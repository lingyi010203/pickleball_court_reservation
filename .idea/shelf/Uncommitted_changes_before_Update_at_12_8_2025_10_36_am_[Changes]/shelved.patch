Index: pickleball/pickleball/src/main/resources/application.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>spring.application.name=pickleball\r\n\r\n# JWT Configuration\r\njwt.secret=404E635266556A586E3272357538782F413F4428472B4B6250645367566B5970\r\njwt.expiration=86400000\r\njwt.refresh-expiration=604800000\r\n\r\n# Server Configuration\r\nserver.port=8081\r\n\r\n# Database Configuration\r\nspring.datasource.url=jdbc:mysql://localhost:3306/pickleball\r\nspring.datasource.username=root\r\nspring.datasource.password=Lingyi@2025\r\nspring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver\r\n\r\napp.admin.email=sitxy-wp22@student.tarc.edu.my\r\nspring.mail.host=smtp.gmail.com\r\nspring.mail.port=587\r\nspring.mail.username=sitxy-wp22@student.tarc.edu.my\r\nspring.mail.password=ebylkwzsnprkpoos\r\nspring.mail.properties.mail.smtp.ssl.trust=smtp.gmail.com\r\nspring.mail.properties.mail.smtp.ssl.protocols=TLSv1.2\r\nspring.mail.properties.mail.smtp.auth=true\r\nspring.mail.properties.mail.smtp.starttls.enable=true\r\nspring.mail.properties.mail.smtp.starttls.required=true\r\nspring.mail.properties.mail.smtp.connectiontimeout=5000\r\nspring.mail.properties.mail.smtp.timeout=5000\r\nspring.mail.properties.mail.smtp.writetimeout=5000\r\n\r\n# JPA Configuration\r\nspring.jpa.hibernate.ddl-auto=update\r\nspring.jpa.show-sql=true\r\nspring.jpa.properties.hibernate.format_sql=true\r\nspring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect\r\n\r\n# Date format configuration\r\nspring.jackson.date-format=dd-MM-yyyy\r\nspring.jackson.time-zone=UTC\r\n\r\n# Enable WebSocket\r\nspring.websocket.enabled=true\r\n\r\n# STOMP endpoint\r\napp.websocket.endpoint=/ws-messaging\r\napp.websocket.allowed-origins=*\r\n\r\n# Message retention\r\napp.messages.retention-days=90\r\n\r\n# File upload settings\r\nspring.servlet.multipart.max-file-size=5MB\r\nspring.servlet.multipart.max-request-size=5MB\r\nfile.upload-dir=uploads/\r\n\r\nlogging.level.org.springframework.security=INFo\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/pickleball/pickleball/src/main/resources/application.properties b/pickleball/pickleball/src/main/resources/application.properties
--- a/pickleball/pickleball/src/main/resources/application.properties	(revision c178c1d9e80f6815b91226b2d10f391611dcb6b4)
+++ b/pickleball/pickleball/src/main/resources/application.properties	(date 1754832508534)
@@ -11,7 +11,7 @@
 # Database Configuration
 spring.datasource.url=jdbc:mysql://localhost:3306/pickleball
 spring.datasource.username=root
-spring.datasource.password=Lingyi@2025
+spring.datasource.password=Xingyusit0917s.
 spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
 
 app.admin.email=sitxy-wp22@student.tarc.edu.my
@@ -54,3 +54,10 @@
 file.upload-dir=uploads/
 
 logging.level.org.springframework.security=INFo
+
+# ===== AI Chat Assistant (Groq) =====
+# Groq API Configuration
+groq.api.key=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
+groq.base-url=https://api.groq.com/openai/v1
+groq.model=llama3-8b-8192
+
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/BookingService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.service;\r\n\r\nimport com.pickleball_backend.pickleball.dto.*;\r\nimport com.pickleball_backend.pickleball.entity.*;\r\nimport com.pickleball_backend.pickleball.exception.ResourceNotFoundException;\r\nimport com.pickleball_backend.pickleball.exception.ValidationException;\r\nimport com.pickleball_backend.pickleball.repository.*;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.springframework.security.core.context.SecurityContextHolder;\r\nimport org.springframework.stereotype.Service;\r\nimport org.springframework.transaction.annotation.Transactional;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\nimport java.time.Duration;\r\nimport java.time.LocalDate;\r\nimport java.time.LocalDateTime;\r\nimport java.time.LocalTime;\r\nimport java.time.format.DateTimeParseException;\r\nimport java.util.List;\r\nimport java.util.Objects;\r\nimport java.util.Optional;\r\nimport java.util.stream.Collectors;\r\n\r\n@Service\r\n@RequiredArgsConstructor\r\npublic class BookingService {\r\n\r\n    private final BookingRepository bookingRepository;\r\n    private final SlotRepository slotRepository;\r\n    private final CourtRepository courtRepository;\r\n    private final MemberRepository memberRepository;\r\n    private final PaymentRepository paymentRepository;\r\n    private final UserAccountRepository userAccountRepository;\r\n    private final EmailService emailService;\r\n    private final CancellationRequestRepository cancellationRequestRepository;\r\n    private final BookingSlotRepository bookingSlotRepository;\r\n    private final UserRepository userRepository;\r\n    private final WalletRepository walletRepository;\r\n    private final WalletTransactionRepository walletTransactionRepository;\r\n    private final FeedbackRepository feedbackRepository;\r\n    private final FriendlyMatchService friendlyMatchService;\r\n    private final TierService tierService;\r\n    private final ClassSessionRepository classSessionRepository;\r\n    private final VoucherRedemptionService voucherRedemptionService; // 新增：優惠券服務\r\n    private static final Logger log = LoggerFactory.getLogger(BookingService.class);\r\n\r\n    private static final String CANCELLED_STATUS = \"CANCELLED\";\r\n\r\n    @Transactional\r\n    public BookingResponseDto bookCourt(BookingRequestDto request) {\r\n        // 1. Get authenticated user\r\n        String username = SecurityContextHolder.getContext().getAuthentication().getName();\r\n        UserAccount account = userAccountRepository.findByUsername(username)\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"User account not found\"));\r\n\r\n        // 2. Get member\r\n        Member member = memberRepository.findByUserId(account.getUser().getId());\r\n        if (member == null) {\r\n            throw new ResourceNotFoundException(\"Member not found\");\r\n        }\r\n\r\n        // 3. Get wallet (create if missing)\r\n        Wallet wallet = getOrCreateWallet(member);\r\n\r\n        // 4. 多 slot 合并逻辑\r\n        List<Integer> slotIds = request.getSlotIds() != null && !request.getSlotIds().isEmpty()\r\n            ? request.getSlotIds()\r\n            : (request.getSlotId() != null ? List.of(request.getSlotId()) : List.of());\r\n        \r\n        // 添加调试日志\r\n        log.info(\"Booking request - slotId: {}, slotIds: {}, final slotIds: {}\", \r\n                request.getSlotId(), request.getSlotIds(), slotIds);\r\n        \r\n        if (slotIds.isEmpty()) {\r\n            throw new ValidationException(\"No slot selected\");\r\n        }\r\n\r\n        // 5. 获取所有 slot，校验连续性、可用性\r\n        List<Slot> slots = slotRepository.findAllById(slotIds);\r\n        log.info(\"Found {} slots out of {} requested slotIds\", slots.size(), slotIds.size());\r\n        \r\n        if (slots.size() != slotIds.size()) {\r\n            throw new ResourceNotFoundException(\"Some slots not found\");\r\n        }\r\n        // 按时间排序\r\n        slots.sort((a, b) -> a.getStartTime().compareTo(b.getStartTime()));\r\n        // 校验连续性\r\n        for (int i = 1; i < slots.size(); i++) {\r\n            if (!slots.get(i).getStartTime().equals(slots.get(i-1).getEndTime())) {\r\n                throw new ValidationException(\"Selected slots are not consecutive\");\r\n            }\r\n        }\r\n        // 校验全部可用\r\n        for (Slot slot : slots) {\r\n            if (!slot.isAvailable() || isSlotBooked(slot.getId())) {\r\n                throw new IllegalStateException(\"Slot \" + slot.getId() + \" is not available\");\r\n            }\r\n        }\r\n\r\n        // 6. Get court and calculate price\r\n        Court court = courtRepository.findById(slots.get(0).getCourtId())\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"Court not found\"));\r\n        int totalDuration = slots.stream().mapToInt(Slot::getDurationHours).sum();\r\n        double baseAmount = calculateBookingAmount(court, slots.get(0), totalDuration); // 以第一个slot为基准\r\n\r\n        // 新增：加上 paddle/ball set\r\n        int numPaddles = request.getNumPaddles() != null ? request.getNumPaddles() : 0;\r\n        boolean buyBallSet = request.getBuyBallSet() != null && request.getBuyBallSet();\r\n        double paddleFee = numPaddles * 5.0;\r\n        double ballSetFee = buyBallSet ? 12.0 : 0.0;\r\n        double amount = baseAmount + paddleFee + ballSetFee;\r\n\r\n        // 新增：處理優惠券折扣\r\n        double originalAmount = amount;\r\n        double discountAmount = 0.0;\r\n        VoucherRedemptionDto appliedVoucher = null;\r\n        \r\n        if (request.getUseVoucher() != null && request.getUseVoucher() && request.getVoucherRedemptionId() != null) {\r\n            try {\r\n                appliedVoucher = voucherRedemptionService.useVoucher(request.getVoucherRedemptionId());\r\n                if (appliedVoucher != null) {\r\n                    if (\"percentage\".equals(appliedVoucher.getDiscountType())) {\r\n                        // 百分比折扣\r\n                        discountAmount = amount * (appliedVoucher.getDiscountValue() / 100.0);\r\n                    } else {\r\n                        // 固定金額折扣\r\n                        discountAmount = appliedVoucher.getDiscountValue();\r\n                    }\r\n                    \r\n                    // 確保折扣不超過總金額\r\n                    discountAmount = Math.min(discountAmount, amount);\r\n                    amount = amount - discountAmount;\r\n                    \r\n                    log.info(\"Applied voucher discount: RM{} ({}% of original RM{})\", \r\n                            discountAmount, appliedVoucher.getDiscountValue(), originalAmount);\r\n                }\r\n            } catch (Exception e) {\r\n                log.warn(\"Failed to apply voucher: {}\", e.getMessage());\r\n                // 如果優惠券應用失敗，繼續使用原始金額\r\n            }\r\n        }\r\n        \r\n        // 確保 originalAmount 在沒有折扣時也正確設置\r\n        if (discountAmount == 0.0) {\r\n            originalAmount = amount;\r\n        }\r\n\r\n        // 7. Process wallet payment if requested\r\n        Payment payment = new Payment();\r\n        payment.setAmount(amount);\r\n        payment.setPaymentDate(LocalDateTime.now());\r\n        payment.setPaymentType(\"BOOKING\");\r\n        \r\n        // 新增：記錄折扣信息\r\n        if (discountAmount > 0) {\r\n            payment.setDiscountAmount(discountAmount);\r\n            payment.setOriginalAmount(originalAmount);\r\n        }\r\n\r\n        if (request.isUseWallet()) {\r\n            if (wallet.getBalance() < amount) {\r\n                throw new ValidationException(\"Insufficient wallet balance. Available: \" + wallet.getBalance());\r\n            }\r\n            wallet.setBalance(wallet.getBalance() - amount);\r\n            wallet.setTotalSpent(wallet.getTotalSpent() + amount); // 更新總支出\r\n            walletRepository.save(wallet);\r\n            payment.setPaymentMethod(\"WALLET\");\r\n            payment.setStatus(\"COMPLETED\");\r\n        } else {\r\n            payment.setPaymentMethod(\"OTHER\");\r\n            payment.setStatus(\"PENDING\");\r\n        }\r\n        payment = paymentRepository.save(payment);\r\n\r\n        // 8. Create booking\r\n        Booking booking = new Booking();\r\n        booking.setBookingDate(LocalDateTime.now());\r\n        booking.setTotalAmount(amount);\r\n        booking.setOriginalAmount(originalAmount); // 新增：記錄原始金額\r\n        booking.setDiscountAmount(discountAmount); // 新增：記錄折扣金額\r\n        String bookingStatus = \"CONFIRMED\";\r\n        if (bookingStatus.length() > 50) {\r\n            bookingStatus = bookingStatus.substring(0, 50);\r\n        }\r\n        booking.setStatus(bookingStatus);\r\n        booking.setMember(member);\r\n        booking.setPayment(payment);\r\n        booking.setPurpose(request.getPurpose());\r\n        booking.setNumberOfPlayers(request.getNumberOfPlayers());\r\n        booking.setNumPaddles(request.getNumPaddles());\r\n        booking.setBuyBallSet(request.getBuyBallSet());\r\n        booking = bookingRepository.save(booking);\r\n\r\n        // 9. Create booking slots\r\n        for (Slot slot : slots) {\r\n            BookingSlot bookingSlot = new BookingSlot();\r\n            bookingSlot.setBooking(booking);\r\n            bookingSlot.setSlot(slot);\r\n            bookingSlot.setStatus(\"BOOKED\");\r\n            bookingSlotRepository.save(bookingSlot);\r\n            \r\n            // 更新 slot 的可用狀態\r\n            slot.setAvailable(false);\r\n            slotRepository.save(slot);\r\n        }\r\n\r\n        // 10. Add points to member\r\n        int pointsEarned = (int) Math.round(amount); // 使用實際支付金額計算積分\r\n        String oldTierName = member.getTier() != null ? member.getTier().getTierName() : \"NONE\";\r\n\r\n        member.setTierPointBalance(member.getTierPointBalance() + pointsEarned);\r\n        member.setRewardPointBalance(member.getRewardPointBalance() + pointsEarned);\r\n        memberRepository.save(member);\r\n        log.info(\"Added {} tier points and {} reward points to member {} for booking {}\",\r\n                pointsEarned, pointsEarned, member.getId(), booking.getId());\r\n\r\n        // Automatic tier upgrade check after booking\r\n        tierService.recalculateMemberTier(member);\r\n\r\n        // 11. Send confirmation email\r\n        try {\r\n            emailService.sendBookingConfirmation(\r\n                    member.getUser().getEmail(),\r\n                    booking,\r\n                    court,\r\n                    slots.get(0)\r\n            );\r\n        } catch (Exception e) {\r\n            log.error(\"Failed to send booking confirmation email: {}\", e.getMessage());\r\n        }\r\n\r\n        // 12. Create response\r\n        BookingResponseDto response = mapToBookingResponse(booking, court, slots.get(0));\r\n        response.setDurationHours(totalDuration);\r\n        response.setWalletBalance(wallet.getBalance());\r\n        response.setPointsEarned(pointsEarned);\r\n        response.setCurrentPointBalance(member.getTierPointBalance());  // 保持向後兼容\r\n        response.setCurrentTierPointBalance(member.getTierPointBalance());\r\n        response.setCurrentRewardPointBalance(member.getRewardPointBalance());\r\n\r\n        // 13. 更新用户统计数据\r\n        User user = member.getUser();\r\n        user.setBookingsMade(user.getBookingsMade() + 1);\r\n        user.setBookingHours(user.getBookingHours() + totalDuration);\r\n        user.setAmountSpent(user.getAmountSpent() + amount);\r\n        userRepository.save(user);\r\n\r\n        return response;\r\n    }\r\n\r\n    private boolean isSlotBooked(Integer slotId) {\r\n        if (slotId == null) return false;\r\n        return bookingSlotRepository.existsBySlotIdAndStatus(slotId, \"BOOKED\");\r\n    }\r\n\r\n    private double calculateBookingAmount(Court court, Slot slot, int durationHours) {\r\n        LocalTime startTime = slot.getStartTime();\r\n        LocalTime endTime = slot.getEndTime();\r\n\r\n        // Handle null pricing safely\r\n        double peakHourlyPrice = court.getPeakHourlyPrice() != null ?\r\n                court.getPeakHourlyPrice() : 0.0;\r\n        double offPeakHourlyPrice = court.getOffPeakHourlyPrice() != null ?\r\n                court.getOffPeakHourlyPrice() : 0.0;\r\n\r\n        // Default to off-peak rate\r\n        double hourlyRate = offPeakHourlyPrice;\r\n\r\n        // Only check peak times if defined\r\n        if (court.getPeakStartTime() != null && court.getPeakEndTime() != null) {\r\n            try {\r\n                LocalTime peakStart = LocalTime.parse(court.getPeakStartTime());\r\n                LocalTime peakEnd = LocalTime.parse(court.getPeakEndTime());\r\n\r\n                // Check if slot falls entirely within peak hours\r\n                if (!startTime.isBefore(peakStart) && !endTime.isAfter(peakEnd)) {\r\n                    hourlyRate = peakHourlyPrice;\r\n                }\r\n            } catch (DateTimeParseException e) {\r\n                log.error(\"Invalid peak time format: {}\", e.getMessage());\r\n                // Maintain off-peak rate if parsing fails\r\n            }\r\n        }\r\n\r\n        return hourlyRate * durationHours;\r\n    }\r\n\r\n    // 生成响应时，slot 相关信息通过 booking.getBookingSlots().get(0).getSlot()\r\n    private BookingResponseDto mapToBookingResponse(Booking booking, Court court, Slot slot) {\r\n        BookingResponseDto response = new BookingResponseDto();\r\n        response.setBookingId(booking.getId());\r\n        response.setCourtName(court.getName());\r\n        response.setCourtLocation(court.getLocation());\r\n        // Slot slot = booking.getSlot();\r\n        Slot slot0 = booking.getBookingSlots() != null && !booking.getBookingSlots().isEmpty() ? booking.getBookingSlots().get(0).getSlot() : null;\r\n        if (slot0 != null) {\r\n            response.setSlotDate(slot0.getDate());\r\n            response.setStartTime(slot0.getStartTime());\r\n            response.setEndTime(slot0.getEndTime());\r\n        }\r\n        response.setTotalAmount(booking.getTotalAmount());\r\n        response.setBookingStatus(booking.getStatus());\r\n        response.setPurpose(booking.getPurpose());\r\n        response.setNumberOfPlayers(booking.getNumberOfPlayers());\r\n\r\n        // Add payment details\r\n        if (booking.getPayment() != null) {\r\n            response.setPaymentMethod(booking.getPayment().getPaymentMethod());\r\n            response.setPaymentStatus(booking.getPayment().getStatus());\r\n        } else {\r\n            response.setPaymentMethod(\"N/A\");\r\n            response.setPaymentStatus(\"N/A\");\r\n        }\r\n\r\n        // Add points information\r\n        int pointsEarned = (int) Math.round(booking.getTotalAmount());\r\n        response.setPointsEarned(pointsEarned);\r\n        response.setCurrentPointBalance(booking.getMember().getTierPointBalance());  // 保持向後兼容\r\n        response.setCurrentTierPointBalance(booking.getMember().getTierPointBalance());\r\n        response.setCurrentRewardPointBalance(booking.getMember().getRewardPointBalance());\r\n\r\n        // 新增：添加折扣信息\r\n        response.setOriginalAmount(booking.getOriginalAmount() != null ? booking.getOriginalAmount() : booking.getTotalAmount());\r\n        response.setDiscountAmount(booking.getDiscountAmount() != null ? booking.getDiscountAmount() : 0.0);\r\n        \r\n        // 設置是否使用了優惠券\r\n        response.setVoucherUsed(booking.getDiscountAmount() != null && booking.getDiscountAmount() > 0);\r\n        \r\n        // 如果有折扣，嘗試獲取優惠券代碼\r\n        if (booking.getDiscountAmount() != null && booking.getDiscountAmount() > 0 && booking.getPayment() != null) {\r\n            // 這裡可以從 VoucherRedemption 表中查詢使用的優惠券\r\n            // 暫時設為空，後續可以完善\r\n            response.setAppliedVoucherCode(\"Applied\");\r\n        }\r\n\r\n        return response;\r\n    }\r\n\r\n\r\n\r\n    @Transactional\r\n    public CancellationResponse cancelBooking(Integer bookingId, String username, String reason) {\r\n        // 1. 获取用户账户\r\n        UserAccount account = userAccountRepository.findByUsername(username)\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"User account not found\"));\r\n\r\n        // 2. 获取预订信息\r\n        Booking booking = bookingRepository.findById(bookingId)\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"Booking not found\"));\r\n\r\n        // 3. 验证预订所有权\r\n        if (!booking.getMember().getUser().getId().equals(account.getUser().getId())) {\r\n            throw new ValidationException(\"You can only cancel your own bookings\");\r\n        }\r\n\r\n        // 4. 获取时间段信息\r\n        Slot slot = booking.getBookingSlots() != null && !booking.getBookingSlots().isEmpty() ? booking.getBookingSlots().get(0).getSlot() : null;\r\n        if (slot == null) {\r\n            throw new ValidationException(\"No slot found for this booking\");\r\n        }\r\n        LocalDateTime slotDateTime = LocalDateTime.of(slot.getDate(), slot.getStartTime());\r\n        long hours = java.time.temporal.ChronoUnit.HOURS.between(LocalDateTime.now(), slotDateTime);\r\n\r\n        // 5. 自动批准逻辑\r\n        if (hours > 24) {\r\n            // 1. Free up the slot\r\n            slot.setAvailable(true);\r\n            slotRepository.save(slot);\r\n\r\n            // 2. Update booking status\r\n            String bookingStatus = \"CANCELLED\";\r\n            if (bookingStatus.length() > 50) {\r\n                bookingStatus = bookingStatus.substring(0, 50);\r\n            }\r\n            booking.setStatus(bookingStatus);\r\n            bookingRepository.save(booking);\r\n\r\n            // 3. Update booking slot status\r\n            BookingSlot bookingSlot = booking.getBookingSlots() != null && !booking.getBookingSlots().isEmpty() ? booking.getBookingSlots().get(0) : null;\r\n            if (bookingSlot != null) {\r\n                String slotStatus = \"CANCELLED\";\r\n                if (slotStatus.length() > 50) {\r\n                    slotStatus = slotStatus.substring(0, 50);\r\n                }\r\n                bookingSlot.setStatus(slotStatus);\r\n                bookingSlotRepository.save(bookingSlot);\r\n            }\r\n\r\n            // 新增：同步取消 FriendlyMatch\r\n            friendlyMatchService.cancelReservationAndMatch(bookingId);\r\n\r\n            // 4. Update or create cancellation request\r\n            CancellationRequest request = booking.getCancellationRequest();\r\n            if (request == null) {\r\n                request = new CancellationRequest();\r\n                request.setBooking(booking);\r\n                request.setRequestDate(LocalDateTime.now());\r\n            }\r\n            request.setStatus(\"APPROVED\");\r\n            request.setReason(reason != null ? reason : \"User requested cancellation\");\r\n            request.setAdminRemark(\"Auto-approved by system (more than 24h before slot)\");\r\n            cancellationRequestRepository.save(request);\r\n\r\n            // 5. 退款50%到钱包\r\n            double refund = booking.getTotalAmount() * 0.5;\r\n            Wallet wallet = walletRepository.findByMemberId(booking.getMember().getId())\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"Wallet not found\"));\r\n            \r\n            double balanceBefore = wallet.getBalance();\r\n            wallet.setBalance(wallet.getBalance() + refund);\r\n            wallet.setTotalSpent(wallet.getTotalSpent() - refund); // 退款時減少總支出\r\n            walletRepository.save(wallet);\r\n            \r\n            // 创建退款交易记录\r\n            createWalletTransaction(wallet, \"REFUND\", refund, balanceBefore, wallet.getBalance(), \r\n                                  \"BOOKING\", booking.getId(), \"Booking cancellation refund (50%)\");\r\n\r\n            // 6. 更新用户统计数据（减少预订小时数）\r\n            User user = booking.getMember().getUser();\r\n            double cancelledHours = booking.getBookingSlots().stream()\r\n                    .mapToDouble(bs -> bs.getSlot().getDurationHours())\r\n                    .sum();\r\n            user.setBookingHours(Math.max(0, user.getBookingHours() - cancelledHours));\r\n            user.setAmountSpent(Math.max(0, user.getAmountSpent() - booking.getTotalAmount()));\r\n            userRepository.save(user);\r\n\r\n            // 7. 更新支付状态\r\n            Payment payment = booking.getPayment();\r\n            if (payment != null) {\r\n                payment.setStatus(\"REFUNDED\");\r\n                paymentRepository.save(payment);\r\n            }\r\n\r\n            // 8. 发送邮件通知\r\n            Court court = courtRepository.findById(slot.getCourtId())\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"Court not found\"));\r\n            emailService.sendCancellationDecision(\r\n                booking.getMember().getUser().getEmail(),\r\n                booking,\r\n                slot,\r\n                court != null ? court.getName() : \"Court not found\",\r\n                true\r\n            );\r\n\r\n            return new CancellationResponse(\r\n                request.getId(),\r\n                booking.getId(),\r\n                request.getStatus(),\r\n                request.getRequestDate(),\r\n                \"Cancellation auto-approved and 50% refunded to wallet\"\r\n            );\r\n        }\r\n\r\n        // 6. 原有流程（<=24小时，人工审核）\r\n        // 检查1小时限制\r\n        if (LocalDateTime.now().plusHours(1).isAfter(slotDateTime)) {\r\n            throw new ValidationException(\"Cannot cancel within 1 hour of booking\");\r\n        }\r\n\r\n        // 更新预订状态\r\n        booking.setStatus(\"CANCELLATION_REQUESTED\");\r\n        bookingRepository.save(booking);\r\n\r\n        // 创建取消请求\r\n        CancellationRequest request = new CancellationRequest();\r\n        request.setBooking(booking);\r\n        request.setRequestDate(LocalDateTime.now());\r\n        request.setStatus(\"PENDING\");\r\n        request.setReason(reason != null ? reason : \"User requested cancellation\");\r\n        cancellationRequestRepository.save(request);\r\n\r\n        // 获取场馆信息\r\n        Court court = courtRepository.findById(slot.getCourtId())\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"Court not found\"));\r\n\r\n        // 发送确认邮件\r\n        emailService.sendCancellationConfirmation(\r\n                booking.getMember().getUser().getEmail(),\r\n                booking,\r\n                slot,\r\n                court\r\n        );\r\n\r\n        return new CancellationResponse(\r\n                request.getId(),\r\n                booking.getId(),\r\n                request.getStatus(),\r\n                request.getRequestDate(),\r\n                \"Cancellation request submitted\"\r\n        );\r\n    }\r\n\r\n    public List<SlotResponseDto> getAvailableSlots(LocalDate date) {\r\n        return slotRepository.findByDateAndIsAvailableTrue(date).stream()\r\n                .filter(slot -> {\r\n                    // 檢查是否有課程預約佔用這個時段\r\n                    LocalDateTime startDateTime = LocalDateTime.of(date, slot.getStartTime());\r\n                    LocalDateTime endDateTime = LocalDateTime.of(date, slot.getEndTime());\r\n\r\n                    // 檢查是否有 ClassSession 在這個時段\r\n                    List<ClassSession> classSessions = classSessionRepository.findByCourtIdAndStartTimeBetween(\r\n                        slot.getCourtId(),\r\n                        startDateTime,\r\n                        endDateTime\r\n                    );\r\n                    \r\n                    // 過濾掉已取消的課程\r\n                    boolean hasActiveClassSessions = classSessions.stream()\r\n                        .anyMatch(session -> !\"CANCELLED\".equalsIgnoreCase(session.getStatus()));\r\n\r\n                    // 檢查是否有已預訂的 BookingSlot\r\n                    boolean isBooked = bookingSlotRepository.existsBySlotIdAndStatus(slot.getId(), \"BOOKED\");\r\n\r\n                    return !hasActiveClassSessions && !isBooked; // 只有沒有課程預約且未預訂的時段才可用\r\n                })\r\n                .map(slot -> {\r\n                    SlotResponseDto dto = new SlotResponseDto();\r\n                    dto.setId(slot.getId());\r\n                    dto.setCourtId(slot.getCourtId());\r\n                    dto.setDate(slot.getDate());\r\n                    dto.setStartTime(slot.getStartTime());\r\n                    dto.setEndTime(slot.getEndTime());\r\n                    dto.setStatus(\"AVAILABLE\");\r\n                    return dto;\r\n                })\r\n                .collect(Collectors.toList());\r\n    }\r\n\r\n    @Transactional(readOnly = true)\r\n    public List<PendingCancellationRequestDto> getPendingCancellationRequests() {\r\n        return cancellationRequestRepository.findByStatus(\"PENDING\").stream()\r\n                .map(request -> {\r\n                    // Safe navigation through relationships\r\n                    Booking booking = request.getBooking();\r\n                    if (booking == null) return null;\r\n\r\n                    Slot slot = booking.getBookingSlots() != null && !booking.getBookingSlots().isEmpty() ? booking.getBookingSlots().get(0).getSlot() : null;\r\n                    if (slot == null) return null;\r\n\r\n                    // Get court safely\r\n                    Court court = courtRepository.findById(slot.getCourtId()).orElse(null);\r\n\r\n                    // Get member name safely\r\n                    String memberName = Optional.ofNullable(booking.getMember())\r\n                            .map(Member::getUser)\r\n                            .map(User::getName)\r\n                            .orElse(\"Unknown Member\");\r\n\r\n                    return new PendingCancellationRequestDto(\r\n                            request.getId(),\r\n                            booking.getId(),\r\n                            memberName,\r\n                            slot != null ? slot.getDate() : null,\r\n                            slot != null ? slot.getStartTime() : null,\r\n                            court != null ? court.getName() : \"Court not found\",\r\n                            request.getReason()\r\n                    );\r\n                })\r\n                .filter(Objects::nonNull)  // Requires java.util.Objects import\r\n                .collect(Collectors.toList());\r\n    }\r\n\r\n    @Transactional\r\n    public CancellationResponse processCancellation(Integer requestId, boolean approve, String adminRemark) {\r\n        CancellationRequest request = cancellationRequestRepository.findById(requestId)\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"Cancellation request not found\"));\r\n\r\n        if (!\"PENDING\".equals(request.getStatus())) {\r\n            throw new ValidationException(\"Request already processed\");\r\n        }\r\n\r\n        Booking booking = request.getBooking();\r\n        BookingSlot bookingSlot = booking.getBookingSlots() != null && !booking.getBookingSlots().isEmpty() ? booking.getBookingSlots().get(0) : null;\r\n        Slot slot = bookingSlot != null ? bookingSlot.getSlot() : null;\r\n        Court court = slot != null ? courtRepository.findById(slot.getCourtId())\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"Court not found\")) : null;\r\n\r\n        if (approve) {\r\n            // 1. Free up the slot\r\n            slot.setAvailable(true);\r\n            slotRepository.save(slot);\r\n\r\n            // 2. Update booking status\r\n            String bookingStatus = \"CANCELLED\";\r\n            if (bookingStatus.length() > 50) {\r\n                bookingStatus = bookingStatus.substring(0, 50);\r\n            }\r\n            booking.setStatus(bookingStatus);\r\n            bookingRepository.save(booking);\r\n\r\n            // 3. Update booking slot status\r\n            String slotStatus = \"CANCELLED\";\r\n            if (slotStatus.length() > 50) {\r\n                slotStatus = slotStatus.substring(0, 50);\r\n            }\r\n            bookingSlot.setStatus(slotStatus);\r\n            bookingSlotRepository.save(bookingSlot);\r\n\r\n            // 新增：同步取消 FriendlyMatch\r\n            friendlyMatchService.cancelReservationAndMatch(booking.getId());\r\n\r\n            // 4. 退款50%到钱包\r\n            double refund = booking.getTotalAmount() * 0.5;\r\n            Wallet wallet = walletRepository.findByMemberId(booking.getMember().getId())\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"Wallet not found\"));\r\n            \r\n            double balanceBefore = wallet.getBalance();\r\n            wallet.setBalance(wallet.getBalance() + refund);\r\n            wallet.setTotalSpent(wallet.getTotalSpent() - refund); // 退款時減少總支出\r\n            walletRepository.save(wallet);\r\n            \r\n            // 创建退款交易记录\r\n            createWalletTransaction(wallet, \"REFUND\", refund, balanceBefore, wallet.getBalance(), \r\n                                  \"BOOKING\", booking.getId(), \"Booking cancellation refund (50%) - Admin approved\");\r\n\r\n            // 5. 更新支付状态\r\n            Payment payment = booking.getPayment();\r\n            if (payment != null) {\r\n                payment.setStatus(\"REFUNDED\");\r\n                paymentRepository.save(payment);\r\n            }\r\n\r\n            // 6. 更新用户统计数据（减少预订小时数）\r\n            User user = booking.getMember().getUser();\r\n            double cancelledHours = booking.getBookingSlots().stream()\r\n                    .mapToDouble(bs -> bs.getSlot().getDurationHours())\r\n                    .sum();\r\n            user.setBookingHours(Math.max(0, user.getBookingHours() - cancelledHours));\r\n            user.setAmountSpent(Math.max(0, user.getAmountSpent() - booking.getTotalAmount()));\r\n            userRepository.save(user);\r\n\r\n            // 7. Update request\r\n            request.setStatus(\"APPROVED\");\r\n\r\n            // Get current admin ID\r\n            String username = SecurityContextHolder.getContext().getAuthentication().getName();\r\n            User adminUser = userRepository.findByUserAccount_Username(username)\r\n                    .orElseThrow(() -> new ResourceNotFoundException(\"Admin user not found\"));\r\n            request.setApprovedBy(adminUser.getId());\r\n        } else {\r\n            // Reject request - revert changes\r\n            String bookingStatus = \"CONFIRMED\";\r\n            if (bookingStatus.length() > 50) {\r\n                bookingStatus = bookingStatus.substring(0, 50);\r\n            }\r\n            booking.setStatus(bookingStatus);\r\n            bookingRepository.save(booking);\r\n\r\n            // Keep booking slot as booked\r\n            String slotStatus = \"BOOKED\";\r\n            if (slotStatus.length() > 50) {\r\n                slotStatus = slotStatus.substring(0, 50);\r\n            }\r\n            bookingSlot.setStatus(slotStatus);\r\n\r\n            request.setStatus(\"REJECTED\");\r\n        }\r\n\r\n        // 新增：保存 adminRemark\r\n        if (adminRemark != null) {\r\n            request.setAdminRemark(adminRemark);\r\n        }\r\n        cancellationRequestRepository.save(request);\r\n\r\n        // Send decision email\r\n        emailService.sendCancellationDecision(\r\n                booking.getMember().getUser().getEmail(),\r\n                booking,\r\n                slot,\r\n                court != null ? court.getName() : \"Court not found\",\r\n                approve\r\n        );\r\n\r\n        return new CancellationResponse(\r\n                request.getId(),\r\n                booking.getId(),\r\n                request.getStatus(),\r\n                request.getRequestDate(),\r\n                approve ? \"Cancellation approved\" : \"Cancellation rejected\"\r\n        );\r\n    }\r\n\r\n    public List<BookingHistoryDto> getBookingHistory(Integer memberId, String status) {\r\n        try {\r\n            List<Booking> bookings = bookingRepository.findByMemberId(memberId);\r\n            log.info(\"Found {} bookings for member {}\", bookings.size(), memberId);\r\n\r\n            // 自動修正已過期的CONFIRMED預訂為COMPLETED\r\n            LocalDateTime now = LocalDateTime.now();\r\n            boolean updated = false;\r\n            for (Booking booking : bookings) {\r\n                if (\"CONFIRMED\".equalsIgnoreCase(booking.getStatus())) {\r\n                    // 檢查所有 slots 是否都已過期\r\n                    boolean allSlotsExpired = true;\r\n                    if (booking.getBookingSlots() != null && !booking.getBookingSlots().isEmpty()) {\r\n                        for (BookingSlot bookingSlot : booking.getBookingSlots()) {\r\n                            Slot slot = bookingSlot.getSlot();\r\n                            if (slot != null && slot.getDate() != null && slot.getEndTime() != null) {\r\n                                LocalDateTime endDateTime = LocalDateTime.of(slot.getDate(), slot.getEndTime());\r\n                                if (endDateTime.isAfter(now)) {\r\n                                    allSlotsExpired = false;\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                        if (allSlotsExpired) {\r\n                            booking.setStatus(\"COMPLETED\");\r\n                            bookingRepository.save(booking);\r\n                            updated = true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            // 重新獲取最新狀態\r\n            if (updated) {\r\n                bookings = bookingRepository.findByMemberId(memberId);\r\n            }\r\n\r\n            return bookings.stream()\r\n                    .filter(booking -> status == null || booking.getStatus().equalsIgnoreCase(status))\r\n                    .map(booking -> {\r\n                        try {\r\n                            log.debug(\"Processing booking {} with {} booking slots\", \r\n                                    booking.getId(), \r\n                                    booking.getBookingSlots() != null ? booking.getBookingSlots().size() : 0);\r\n                            \r\n                            // 獲取第一個和最後一個 slot 來顯示時間範圍\r\n                            Slot firstSlot = null;\r\n                            Slot lastSlot = null;\r\n                            int totalDuration = 0;\r\n                            \r\n                            if (booking.getBookingSlots() != null && !booking.getBookingSlots().isEmpty()) {\r\n                                // 按時間排序\r\n                                List<BookingSlot> sortedSlots = booking.getBookingSlots().stream()\r\n                                        .sorted((a, b) -> a.getSlot().getStartTime().compareTo(b.getSlot().getStartTime()))\r\n                                        .collect(Collectors.toList());\r\n                                \r\n                                firstSlot = sortedSlots.get(0).getSlot();\r\n                                lastSlot = sortedSlots.get(sortedSlots.size() - 1).getSlot();\r\n                                \r\n                                // 計算總時長\r\n                                totalDuration = sortedSlots.stream()\r\n                                        .mapToInt(bs -> bs.getSlot().getDurationHours() != null ? bs.getSlot().getDurationHours() : 1)\r\n                                        .sum();\r\n                                \r\n                                log.debug(\"Booking {} has {} slots, total duration: {}\", \r\n                                        booking.getId(), sortedSlots.size(), totalDuration);\r\n                            } else {\r\n                                log.warn(\"Booking {} has no booking slots!\", booking.getId());\r\n                            }\r\n                            \r\n                            Court court = null;\r\n                            if (firstSlot != null) {\r\n                                court = courtRepository.findById(firstSlot.getCourtId()).orElse(new Court());\r\n                            } else {\r\n                                // 如果沒有slots，嘗試從booking的其他信息獲取court\r\n                                log.warn(\"No slots found for booking {}, trying to get court info from booking\", booking.getId());\r\n                                // 嘗試通過查詢數據庫獲取court信息\r\n                                try {\r\n                                    // 查詢這個booking的所有bookingSlots\r\n                                    List<BookingSlot> bookingSlots = bookingSlotRepository.findByBookingId(booking.getId());\r\n                                    if (!bookingSlots.isEmpty()) {\r\n                                        Slot slot = bookingSlots.get(0).getSlot();\r\n                                        if (slot != null) {\r\n                                            court = courtRepository.findById(slot.getCourtId()).orElse(new Court());\r\n                                            log.info(\"Found court info for booking {} through direct query: {}\", booking.getId(), court.getName());\r\n                                        }\r\n                                    } else {\r\n                                        log.error(\"No booking slots found in database for booking {}\", booking.getId());\r\n                                        court = new Court();\r\n                                    }\r\n                                } catch (Exception e) {\r\n                                    log.error(\"Error getting court info for booking {}: {}\", booking.getId(), e.getMessage());\r\n                                    court = new Court();\r\n                                }\r\n                            }\r\n                            \r\n                            // 安全地處理 Payment 信息，避免 null 值問題\r\n                            Payment payment = booking.getPayment();\r\n                            if (payment != null) {\r\n                                // 如果 originalAmount 為 null，設置為 amount\r\n                                if (payment.getOriginalAmount() == null) {\r\n                                    payment.setOriginalAmount(payment.getAmount());\r\n                                }\r\n                                // discountAmount 是 double 類型，不需要 null 檢查\r\n                            }\r\n                            \r\n                            // 安全地處理 Booking 的折扣信息\r\n                            if (booking.getOriginalAmount() == null) {\r\n                                booking.setOriginalAmount(booking.getTotalAmount());\r\n                            }\r\n                            if (booking.getDiscountAmount() == null) {\r\n                                booking.setDiscountAmount(0.0);\r\n                            }\r\n                            \r\n                            BookingHistoryDto dto = new BookingHistoryDto();\r\n                            dto.setId(booking.getId());\r\n                            dto.setCourtId(court.getId());\r\n                            dto.setCourtName(court.getName());\r\n                            dto.setLocation(court.getLocation());\r\n                            dto.setDate(firstSlot != null ? firstSlot.getDate() : null);\r\n                            dto.setStartTime(firstSlot != null ? firstSlot.getStartTime() : null);\r\n                            dto.setEndTime(lastSlot != null ? lastSlot.getEndTime() : null);\r\n                            dto.setAmount(booking.getTotalAmount());\r\n                            dto.setStatus(booking.getStatus());\r\n                            dto.setCreatedAt(booking.getBookingDate());\r\n                            dto.setPurpose(booking.getPurpose());\r\n                            dto.setNumberOfPlayers(booking.getNumberOfPlayers());\r\n                            dto.setDurationHours(totalDuration);\r\n                            dto.setNumPaddles(booking.getNumPaddles());\r\n                            dto.setBuyBallSet(booking.getBuyBallSet());\r\n                            \r\n                            // 檢查用戶是否已經評價過這個預訂\r\n                            boolean hasReviewed = false;\r\n                            if (booking.getMember() != null && booking.getMember().getUser() != null) {\r\n                                hasReviewed = feedbackRepository.findByUserId(booking.getMember().getUser().getId()).stream()\r\n                                        .anyMatch(feedback -> feedback.getBooking() != null \r\n                                                && feedback.getBooking().getId().equals(booking.getId()));\r\n                            }\r\n                            dto.setHasReviewed(hasReviewed);\r\n                            \r\n                            return dto;\r\n                        } catch (Exception e) {\r\n                            log.error(\"Error processing booking {}: {}\", booking.getId(), e.getMessage());\r\n                            // 返回一個基本的 DTO，避免整個列表失敗\r\n                            BookingHistoryDto dto = new BookingHistoryDto();\r\n                            dto.setId(booking.getId());\r\n                            dto.setStatus(booking.getStatus());\r\n                            dto.setAmount(booking.getTotalAmount());\r\n                            dto.setCreatedAt(booking.getBookingDate());\r\n                            // 嘗試從第一個slot獲取courtId\r\n                            if (booking.getBookingSlots() != null && !booking.getBookingSlots().isEmpty()) {\r\n                                Slot firstSlot = booking.getBookingSlots().get(0).getSlot();\r\n                                if (firstSlot != null) {\r\n                                    dto.setCourtId(firstSlot.getCourtId());\r\n                                }\r\n                            }\r\n                            return dto;\r\n                        }\r\n                    })\r\n                    .collect(Collectors.toList());\r\n        } catch (Exception e) {\r\n            log.error(\"Error in getBookingHistory for member {}: {}\", memberId, e.getMessage(), e);\r\n            throw new RuntimeException(\"Failed to load booking history\", e);\r\n        }\r\n    }\r\n\r\n    private Wallet getOrCreateWallet(Member member) {\r\n        return walletRepository.findByMemberId(member.getId())\r\n                .orElseGet(() -> {\r\n                    Wallet newWallet = new Wallet();\r\n                    newWallet.setMember(member);\r\n                    newWallet.setBalance(0.00);\r\n                    return walletRepository.save(newWallet);\r\n                });\r\n    }\r\n\r\n    private void createWalletTransaction(Wallet wallet, String transactionType, double amount, \r\n                                       double balanceBefore, double balanceAfter, \r\n                                       String referenceType, Integer referenceId, String description) {\r\n        WalletTransaction transaction = new WalletTransaction();\r\n        transaction.setWalletId(wallet.getId());\r\n        transaction.setTransactionType(transactionType);\r\n        transaction.setAmount(amount);\r\n        transaction.setBalanceBefore(balanceBefore);\r\n        transaction.setBalanceAfter(balanceAfter);\r\n        transaction.setFrozenBefore(wallet.getFrozenBalance());\r\n        transaction.setFrozenAfter(wallet.getFrozenBalance());\r\n        transaction.setReferenceType(referenceType);\r\n        transaction.setReferenceId(referenceId);\r\n        transaction.setDescription(description);\r\n        transaction.setStatus(\"COMPLETED\");\r\n        transaction.setProcessedAt(LocalDateTime.now());\r\n        \r\n        walletTransactionRepository.save(transaction);\r\n    }\r\n\r\n    /**\r\n     * 清理重复的 BookingSlot 记录\r\n     * 这个方法应该只在需要时手动调用\r\n     */\r\n    @Transactional\r\n    public void cleanupDuplicateBookingSlots() {\r\n        log.info(\"Starting cleanup of duplicate booking slots...\");\r\n        \r\n        // 使用原生 SQL 查询找到重复记录\r\n        String findDuplicatesSql = \"\"\"\r\n            SELECT booking_id, slot_id, COUNT(*) as count \r\n            FROM bookingslot \r\n            GROUP BY booking_id, slot_id \r\n            HAVING COUNT(*) > 1\r\n            \"\"\";\r\n        \r\n        // 这里需要注入 JdbcTemplate 来执行原生 SQL\r\n        // 暂时用日志记录，实际清理需要手动执行 SQL\r\n        \r\n        log.warn(\"Duplicate booking slots detected. Please run the following SQL manually:\");\r\n        log.warn(\"DELETE bs1 FROM bookingslot bs1\");\r\n        log.warn(\"INNER JOIN bookingslot bs2\");\r\n        log.warn(\"WHERE bs1.id > bs2.id\");\r\n        log.warn(\"AND bs1.booking_id = bs2.booking_id\");\r\n        log.warn(\"AND bs1.slot_id = bs2.slot_id;\");\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/BookingService.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/BookingService.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/BookingService.java	(revision c178c1d9e80f6815b91226b2d10f391611dcb6b4)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/BookingService.java	(date 1754956018244)
@@ -4,6 +4,7 @@
 import com.pickleball_backend.pickleball.entity.*;
 import com.pickleball_backend.pickleball.exception.ResourceNotFoundException;
 import com.pickleball_backend.pickleball.exception.ValidationException;
+import com.pickleball_backend.pickleball.exception.ConflictException;
 import com.pickleball_backend.pickleball.repository.*;
 import lombok.RequiredArgsConstructor;
 import org.springframework.security.core.context.SecurityContextHolder;
@@ -21,6 +22,7 @@
 import java.util.Objects;
 import java.util.Optional;
 import java.util.stream.Collectors;
+import java.util.ArrayList;
 
 @Service
 @RequiredArgsConstructor
@@ -43,6 +45,9 @@
     private final TierService tierService;
     private final ClassSessionRepository classSessionRepository;
     private final VoucherRedemptionService voucherRedemptionService; // 新增：優惠券服務
+    private final EventRegistrationRepository eventRegistrationRepository; // 新增：事件註冊倉庫
+    private final EventRepository eventRepository; // 新增：事件倉庫
+    private final MemberService memberService; // 新增：會員服務
     private static final Logger log = LoggerFactory.getLogger(BookingService.class);
 
     private static final String CANCELLED_STATUS = "CANCELLED";
@@ -91,6 +96,24 @@
                 throw new ValidationException("Selected slots are not consecutive");
             }
         }
+        
+        // 新增：檢查與Event的衝突
+        for (Slot slot : slots) {
+            // 檢查是否有Event在這個時段使用這個場地
+            List<Event> conflictingEvents = eventRepository.findByCourtsIdAndStartTimeBetweenAndStatusNot(
+                slot.getCourtId(),
+                LocalDateTime.of(slot.getDate(), slot.getStartTime()),
+                LocalDateTime.of(slot.getDate(), slot.getEndTime()),
+                "CANCELLED"
+            );
+            
+            if (!conflictingEvents.isEmpty()) {
+                Event conflictingEvent = conflictingEvents.get(0);
+                throw new ConflictException("Court is reserved for event: " + conflictingEvent.getTitle() + 
+                    " during the selected time");
+            }
+        }
+        
         // 校验全部可用
         for (Slot slot : slots) {
             if (!slot.isAvailable() || isSlotBooked(slot.getId())) {
@@ -416,7 +439,14 @@
             createWalletTransaction(wallet, "REFUND", refund, balanceBefore, wallet.getBalance(), 
                                   "BOOKING", booking.getId(), "Booking cancellation refund (50%)");
 
-            // 6. 更新用户统计数据（减少预订小时数）
+            // 6. 扣除積分（扣除50%的積分，與退款比例一致）
+            Member member = booking.getMember();
+            MemberService.PointDeductionResult deductionResult = memberService.deductPointsForRefund(member, booking.getTotalAmount(), 0.5);
+            
+            log.info("Deducted {} tier points and {} reward points from member {} for booking cancellation {}",
+                    deductionResult.getTierPointsDeducted(), deductionResult.getRewardPointsDeducted(), member.getId(), booking.getId());
+
+            // 7. 更新用户统计数据（减少预订小时数）
             User user = booking.getMember().getUser();
             double cancelledHours = booking.getBookingSlots().stream()
                     .mapToDouble(bs -> bs.getSlot().getDurationHours())
@@ -425,14 +455,14 @@
             user.setAmountSpent(Math.max(0, user.getAmountSpent() - booking.getTotalAmount()));
             userRepository.save(user);
 
-            // 7. 更新支付状态
+            // 8. 更新支付状态
             Payment payment = booking.getPayment();
             if (payment != null) {
                 payment.setStatus("REFUNDED");
                 paymentRepository.save(payment);
             }
 
-            // 8. 发送邮件通知
+            // 9. 发送邮件通知
             Court court = courtRepository.findById(slot.getCourtId())
                 .orElseThrow(() -> new ResourceNotFoundException("Court not found"));
             emailService.sendCancellationDecision(
@@ -511,8 +541,17 @@
 
                     // 檢查是否有已預訂的 BookingSlot
                     boolean isBooked = bookingSlotRepository.existsBySlotIdAndStatus(slot.getId(), "BOOKED");
+                    
+                    // 新增：檢查是否有Event衝突
+                    List<Event> conflictingEvents = eventRepository.findByCourtsIdAndStartTimeBetweenAndStatusNot(
+                        slot.getCourtId(),
+                        startDateTime,
+                        endDateTime,
+                        "CANCELLED"
+                    );
+                    boolean hasEventConflict = !conflictingEvents.isEmpty();
 
-                    return !hasActiveClassSessions && !isBooked; // 只有沒有課程預約且未預訂的時段才可用
+                    return !hasActiveClassSessions && !isBooked && !hasEventConflict; // 只有沒有課程預約、未預訂且沒有Event衝突的時段才可用
                 })
                 .map(slot -> {
                     SlotResponseDto dto = new SlotResponseDto();
@@ -614,7 +653,14 @@
             createWalletTransaction(wallet, "REFUND", refund, balanceBefore, wallet.getBalance(), 
                                   "BOOKING", booking.getId(), "Booking cancellation refund (50%) - Admin approved");
 
-            // 5. 更新支付状态
+            // 5. 扣除積分（扣除50%的積分，與退款比例一致）
+            Member member = booking.getMember();
+            MemberService.PointDeductionResult deductionResult = memberService.deductPointsForRefund(member, booking.getTotalAmount(), 0.5);
+            
+            log.info("Deducted {} tier points and {} reward points from member {} for admin-approved booking cancellation {}",
+                    deductionResult.getTierPointsDeducted(), deductionResult.getRewardPointsDeducted(), member.getId(), booking.getId());
+
+            // 6. 更新支付状态
             Payment payment = booking.getPayment();
             if (payment != null) {
                 payment.setStatus("REFUNDED");
@@ -685,6 +731,12 @@
         try {
             List<Booking> bookings = bookingRepository.findByMemberId(memberId);
             log.info("Found {} bookings for member {}", bookings.size(), memberId);
+            
+            // 獲取事件註冊記錄
+            Integer userId = memberRepository.findById(memberId).map(Member::getUser).map(User::getId).orElse(null);
+            List<EventRegistration> eventRegistrations = userId != null ? 
+                eventRegistrationRepository.findByUser_Id(userId) : List.of();
+            log.info("Found {} event registrations for member {}", eventRegistrations.size(), memberId);
 
             // 自動修正已過期的CONFIRMED預訂為COMPLETED
             LocalDateTime now = LocalDateTime.now();
@@ -717,7 +769,7 @@
                 bookings = bookingRepository.findByMemberId(memberId);
             }
 
-            return bookings.stream()
+            List<BookingHistoryDto> bookingDtos = bookings.stream()
                     .filter(booking -> status == null || booking.getStatus().equalsIgnoreCase(status))
                     .map(booking -> {
                         try {
@@ -819,6 +871,7 @@
                                                 && feedback.getBooking().getId().equals(booking.getId()));
                             }
                             dto.setHasReviewed(hasReviewed);
+                            dto.setBookingType("COURT_BOOKING"); // 標記為場地預訂
                             
                             return dto;
                         } catch (Exception e) {
@@ -836,10 +889,106 @@
                                     dto.setCourtId(firstSlot.getCourtId());
                                 }
                             }
+                            dto.setBookingType("COURT_BOOKING"); // 標記為場地預訂
                             return dto;
                         }
                     })
                     .collect(Collectors.toList());
+            
+            // 將事件註冊記錄轉換為 BookingHistoryDto 格式
+            List<BookingHistoryDto> eventDtos = eventRegistrations.stream()
+                .map(eventReg -> {
+                    try {
+                        BookingHistoryDto dto = new BookingHistoryDto();
+                        dto.setId(eventReg.getRegistrationId()); // 使用 registrationId 作為 ID
+                        dto.setCourtId(null); // 事件沒有 courtId
+                        dto.setCourtName(eventReg.getEvent().getTitle()); // 使用事件標題作為 courtName
+                        dto.setLocation(eventReg.getEvent().getLocation()); // 使用事件地點
+                        dto.setDate(eventReg.getEvent().getStartTime().toLocalDate()); // 使用事件開始日期
+                        dto.setStartTime(eventReg.getEvent().getStartTime().toLocalTime()); // 使用事件開始時間
+                        dto.setEndTime(eventReg.getEvent().getEndTime() != null ? 
+                            eventReg.getEvent().getEndTime().toLocalTime() : 
+                            eventReg.getEvent().getStartTime().plusHours(2).toLocalTime()); // 使用事件結束時間或默認2小時
+                        dto.setAmount(eventReg.getFeeAmount() != null ? eventReg.getFeeAmount() : 0.0);
+                        
+                        // 根據事件時間和註冊狀態計算顯示狀態
+                        String displayStatus = eventReg.getStatus();
+                        if ("REGISTERED".equals(eventReg.getStatus())) {
+                            LocalDateTime eventStartTime = eventReg.getEvent().getStartTime();
+                            LocalDateTime eventEndTime = eventReg.getEvent().getEndTime();
+                            LocalDateTime currentTime = LocalDateTime.now();
+                            
+                            // 檢查事件時間是否為 null
+                            if (eventStartTime == null) {
+                                log.warn("Event {} has null start time, defaulting to UPCOMING", eventReg.getEvent().getTitle());
+                                displayStatus = "UPCOMING";
+                            } else {
+                                // 添加詳細的調試日誌
+                                log.info("=== Event Status Calculation Debug ===");
+                                log.info("Event: {}", eventReg.getEvent().getTitle());
+                                log.info("Event Start Time: {}", eventStartTime);
+                                log.info("Event End Time: {}", eventEndTime);
+                                log.info("Current Time: {}", currentTime);
+                                log.info("Is current time after end time? {}", eventEndTime != null && currentTime.isAfter(eventEndTime));
+                                log.info("Is current time before start time? {}", eventStartTime != null && currentTime.isBefore(eventStartTime));
+                                log.info("Is current time between start and end? {}", 
+                                    eventStartTime != null && eventEndTime != null && 
+                                    currentTime.isAfter(eventStartTime) && currentTime.isBefore(eventEndTime));
+                                
+                                if (eventEndTime != null && currentTime.isAfter(eventEndTime)) {
+                                    displayStatus = "COMPLETED";
+                                    log.info("Result: Event marked as COMPLETED");
+                                } else if (eventStartTime != null && currentTime.isBefore(eventStartTime)) {
+                                    displayStatus = "UPCOMING";
+                                    log.info("Result: Event marked as UPCOMING");
+                                } else if (eventStartTime != null && eventEndTime != null && 
+                                         currentTime.isAfter(eventStartTime) && currentTime.isBefore(eventEndTime)) {
+                                    displayStatus = "ONGOING";
+                                    log.info("Result: Event marked as ONGOING");
+                                } else {
+                                    // 如果無法確定狀態，默認為 UPCOMING
+                                    displayStatus = "UPCOMING";
+                                    log.info("Result: Event status unclear, defaulting to UPCOMING");
+                                }
+                                log.info("Final display status: {}", displayStatus);
+                                log.info("=== End Debug ===");
+                            }
+                        }
+                        
+                        dto.setStatus(displayStatus);
+                        dto.setCreatedAt(eventReg.getRegistrationDate());
+                        dto.setPurpose("Event Registration"); // 標記為事件註冊
+                        dto.setNumberOfPlayers(1); // 事件註冊通常是個人
+                        dto.setDurationHours(2); // 默認事件時長
+                        dto.setNumPaddles(0); // 事件通常不包含設備
+                        dto.setBuyBallSet(false);
+                        dto.setHasReviewed(false); // 事件註冊不包含評價
+                        dto.setBookingType("EVENT"); // 新增：標記為事件類型
+                        
+                        return dto;
+                    } catch (Exception e) {
+                        log.error("Error processing event registration {}: {}", eventReg.getRegistrationId(), e.getMessage());
+                        // 返回一個基本的 DTO
+                        BookingHistoryDto dto = new BookingHistoryDto();
+                        dto.setId(eventReg.getRegistrationId());
+                        dto.setStatus(eventReg.getStatus());
+                        dto.setAmount(eventReg.getFeeAmount() != null ? eventReg.getFeeAmount() : 0.0);
+                        dto.setCreatedAt(eventReg.getRegistrationDate());
+                        dto.setBookingType("EVENT");
+                        return dto;
+                    }
+                })
+                .collect(Collectors.toList());
+            
+            // 合併場地預訂和事件註冊記錄，按創建時間排序
+            List<BookingHistoryDto> allBookings = new ArrayList<>();
+            allBookings.addAll(bookingDtos);
+            allBookings.addAll(eventDtos);
+            
+            // 按創建時間降序排序
+            allBookings.sort((a, b) -> b.getCreatedAt().compareTo(a.getCreatedAt()));
+            
+            return allBookings;
         } catch (Exception e) {
             log.error("Error in getBookingHistory for member {}: {}", memberId, e.getMessage(), e);
             throw new RuntimeException("Failed to load booking history", e);
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"0c3ded6e-9290-4208-bf86-f2c4e1aa2374\" name=\"Changes\" comment=\"static page design done\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball-frontend/src/App.js\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball-frontend/src/App.js\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball-frontend/src/components/admin/AdminDashboard.jsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball-frontend/src/components/admin/AdminDashboard.jsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball-frontend/src/components/admin/AdminInviteForm.jsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball-frontend/src/components/admin/AdminInviteForm.jsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball-frontend/src/components/admin/AdminManageTiers.jsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball-frontend/src/components/admin/AdminManageTiers.jsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball-frontend/src/components/admin/AdminManageUsers.jsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball-frontend/src/components/admin/AdminManageUsers.jsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball-frontend/src/components/admin/AdminSettings.jsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball-frontend/src/components/admin/AdminSettings.jsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball-frontend/src/components/admin/AdminUserForm.jsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball-frontend/src/components/admin/AdminUserForm.jsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball-frontend/src/components/admin/ReportChart.jsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball-frontend/src/components/admin/ReportChart.jsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball-frontend/src/components/admin/ReportGenerator.jsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball-frontend/src/components/admin/ReportGenerator.jsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball-frontend/src/context/AuthContext.js\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball-frontend/src/context/AuthContext.js\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball-frontend/src/pages/LoginPage.jsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball-frontend/src/pages/LoginPage.jsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball-frontend/src/service/api.js\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball-frontend/src/service/api.js\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/AdminDashboardServiceImpl.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/AdminDashboardServiceImpl.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"fix-court\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\r\n  &quot;lastFilter&quot;: {\r\n    &quot;state&quot;: &quot;OPEN&quot;,\r\n    &quot;assignee&quot;: &quot;lingyi010203&quot;\r\n  }\r\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\">{\r\n  &quot;selectedUrlAndAccountId&quot;: {\r\n    &quot;url&quot;: &quot;https://github.com/lingyi010203/pickleball_court_reservation.git&quot;,\r\n    &quot;accountId&quot;: &quot;9f485822-26e4-4c6b-9a46-fe7d37d48793&quot;\r\n  }\r\n}</component>\r\n  <component name=\"ProblemsViewState\">\r\n    <option name=\"selectedTabId\" value=\"CurrentFile\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 3\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2zJOWIlZQeOJcEKgpbdiTlxKL0G\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;Application.PickleballApplication.executor&quot;: &quot;Debug&quot;,\r\n    &quot;Application.run.executor&quot;: &quot;Debug&quot;,\r\n    &quot;Application.zzz.executor&quot;: &quot;Run&quot;,\r\n    &quot;ModuleVcsDetector.initialDetectionPerformed&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.git.unshallow&quot;: &quot;true&quot;,\r\n    &quot;git-widget-placeholder&quot;: &quot;master&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;C:/Users/lingy/FYP2/pickleball_court_reservation&quot;,\r\n    &quot;project.structure.last.edited&quot;: &quot;SDKs&quot;,\r\n    &quot;project.structure.proportion&quot;: &quot;0.15&quot;,\r\n    &quot;project.structure.side.proportion&quot;: &quot;0.21079959&quot;,\r\n    &quot;settings.editor.selected.configurable&quot;: &quot;reference.projectsettings.compiler.annotationProcessors&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"run\" type=\"Application\" factoryName=\"Application\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"com.pickleball_backend.pickleball.PickleballApplication\" />\r\n      <module name=\"pickleball\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n  </component>\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"0c3ded6e-9290-4208-bf86-f2c4e1aa2374\" name=\"Changes\" comment=\"\" />\r\n      <created>1751445739450</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1751445739450</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"court fixed\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1752479821667</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1752479821667</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"Booking fixed\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1752578761777</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1752578761777</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"Booking fixed\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1752578799651</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1752578799651</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"admin dashboard updated\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1752636329567</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1752636329572</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"admin dashboard updated\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1752674934808</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1752674934808</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"court bug fixed\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1752777506350</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1752777506350</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"admin booking updated\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1752910787475</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1752910787475</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"admin booking updated\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1752910799800</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1752910799800</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"booking history redirect to feedback done\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1752936178325</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1752936178325</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"booking confirmation solved\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1752940514141</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1752940514141</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"point and voucher redemption done\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1753005993987</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1753005993987</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"point and voucher redemption done\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1753006004014</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1753006004014</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00013\" summary=\"rewards page ok\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1753009932754</created>\r\n      <option name=\"number\" value=\"00013\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1753009932754</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00014\" summary=\"rewards page ok\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1753009956442</created>\r\n      <option name=\"number\" value=\"00014\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1753009956442</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00015\" summary=\"homepage initialized\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1753097246899</created>\r\n      <option name=\"number\" value=\"00015\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1753097246899</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00016\" summary=\"court image uploaded\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1753126384809</created>\r\n      <option name=\"number\" value=\"00016\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1753126384809</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00017\" summary=\"court image uploaded\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1753128005836</created>\r\n      <option name=\"number\" value=\"00017\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00017\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1753128005836</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00018\" summary=\"court image uploaded\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1753128125937</created>\r\n      <option name=\"number\" value=\"00018\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00018\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1753128125937</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00019\" summary=\"home page done\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1753249711528</created>\r\n      <option name=\"number\" value=\"00019\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00019\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1753249711528</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00020\" summary=\"admin setting initialized\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1753370349395</created>\r\n      <option name=\"number\" value=\"00020\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00020\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1753370349395</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00021\" summary=\"admin setting initialized\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1753370392315</created>\r\n      <option name=\"number\" value=\"00021\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00021\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1753370392315</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00022\" summary=\"admin setting initialized\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1753370403315</created>\r\n      <option name=\"number\" value=\"00022\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00022\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1753370403315</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00023\" summary=\"admin setting, dark mode done\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1753418680148</created>\r\n      <option name=\"number\" value=\"00023\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00023\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1753418680148</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00024\" summary=\"admin setting, dark mode done\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1753418682718</created>\r\n      <option name=\"number\" value=\"00024\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00024\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1753418682718</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00025\" summary=\"admin setting, dark mode done\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1753418716730</created>\r\n      <option name=\"number\" value=\"00025\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00025\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1753418716730</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00026\" summary=\"report generation done\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1753714834923</created>\r\n      <option name=\"number\" value=\"00026\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00026\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1753714834923</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00027\" summary=\"report generation done\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1753714851764</created>\r\n      <option name=\"number\" value=\"00027\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00027\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1753714851764</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00028\" summary=\"profile\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1753781450293</created>\r\n      <option name=\"number\" value=\"00028\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00028\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1753781450293</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00029\" summary=\"static page design done\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1754796120126</created>\r\n      <option name=\"number\" value=\"00029\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00029\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1754796120126</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00030\" summary=\"static page design done\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1754796150978</created>\r\n      <option name=\"number\" value=\"00030\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00030\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1754796150978</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"31\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State>\r\n              <option name=\"FILTERS\">\r\n                <map>\r\n                  <entry key=\"branch\">\r\n                    <value>\r\n                      <list>\r\n                        <option value=\"fix-court\" />\r\n                      </list>\r\n                    </value>\r\n                  </entry>\r\n                </map>\r\n              </option>\r\n            </State>\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"court fixed\" />\r\n    <MESSAGE value=\"Booking fixed\" />\r\n    <MESSAGE value=\"admin dashboard updated\" />\r\n    <MESSAGE value=\"court bug fixed\" />\r\n    <MESSAGE value=\"admin booking updated\" />\r\n    <MESSAGE value=\"booking history redirect to feedback done\" />\r\n    <MESSAGE value=\"booking confirmation solved\" />\r\n    <MESSAGE value=\"point and voucher redemption done\" />\r\n    <MESSAGE value=\"rewards page ok\" />\r\n    <MESSAGE value=\"homepage initialized\" />\r\n    <MESSAGE value=\"court image uploaded\" />\r\n    <MESSAGE value=\"home page done\" />\r\n    <MESSAGE value=\"admin setting initialized\" />\r\n    <MESSAGE value=\"admin setting, dark mode done\" />\r\n    <MESSAGE value=\"report generation done\" />\r\n    <MESSAGE value=\"profile\" />\r\n    <MESSAGE value=\"static page design done\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"static page design done\" />\r\n  </component>\r\n  <component name=\"XDebuggerManager\">\r\n    <breakpoint-manager>\r\n      <breakpoints>\r\n        <line-breakpoint enabled=\"true\" type=\"java-line\">\r\n          <url>file://$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/security/JwtAuthFilter.java</url>\r\n          <line>32</line>\r\n          <option name=\"timeStamp\" value=\"1\" />\r\n        </line-breakpoint>\r\n      </breakpoints>\r\n    </breakpoint-manager>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision c178c1d9e80f6815b91226b2d10f391611dcb6b4)
+++ b/.idea/workspace.xml	(date 1754966098406)
@@ -4,21 +4,94 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="0c3ded6e-9290-4208-bf86-f2c4e1aa2374" name="Changes" comment="static page design done">
+    <list default="true" id="0c3ded6e-9290-4208-bf86-f2c4e1aa2374" name="Changes" comment="">
+      <change beforePath="$PROJECT_DIR$/.idea/jarRepositories.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/jarRepositories.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/pickleball-frontend/src/App.js" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball-frontend/src/App.js" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/pickleball-frontend/src/components/admin/AdminDashboard.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball-frontend/src/components/admin/AdminDashboard.jsx" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/pickleball-frontend/src/components/admin/AdminInviteForm.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball-frontend/src/components/admin/AdminInviteForm.jsx" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/pickleball-frontend/src/components/admin/AdminManageTiers.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball-frontend/src/components/admin/AdminManageTiers.jsx" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/pickleball-frontend/src/components/admin/AdminManageUsers.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball-frontend/src/components/admin/AdminManageUsers.jsx" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/pickleball-frontend/src/components/admin/AdminSettings.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball-frontend/src/components/admin/AdminSettings.jsx" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/pickleball-frontend/src/components/admin/AdminUserForm.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball-frontend/src/components/admin/AdminUserForm.jsx" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/pickleball-frontend/src/components/admin/ReportChart.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball-frontend/src/components/admin/ReportChart.jsx" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/pickleball-frontend/src/components/admin/ReportGenerator.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball-frontend/src/components/admin/ReportGenerator.jsx" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball-frontend/src/components/coach/StudentManagementSystem.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball-frontend/src/components/coach/StudentManagementSystem.jsx" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball-frontend/src/components/common/Navbar.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball-frontend/src/components/common/Navbar.jsx" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball-frontend/src/components/court/BookingHistory.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball-frontend/src/components/court/BookingHistory.jsx" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball-frontend/src/components/court/BookingPage.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball-frontend/src/components/court/BookingPage.jsx" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball-frontend/src/components/court/CourtListPage.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball-frontend/src/components/court/CourtListPage.jsx" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball-frontend/src/components/court/CourtPage.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball-frontend/src/components/court/CourtPage.jsx" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball-frontend/src/components/court/PaymentPage.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball-frontend/src/components/court/PaymentPage.jsx" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball-frontend/src/components/event/EventCreatePage.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball-frontend/src/components/event/EventCreatePage.jsx" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball-frontend/src/components/event/EventPage.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball-frontend/src/components/event/EventPage.jsx" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball-frontend/src/components/event/FriendlyMatchPage.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball-frontend/src/components/event/FriendlyMatchPage.jsx" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball-frontend/src/components/feedback/FeedbackPage.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball-frontend/src/components/feedback/FeedbackPage.jsx" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball-frontend/src/components/helpdesk/HelpdeskPage.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball-frontend/src/components/helpdesk/HelpdeskPage.jsx" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball-frontend/src/components/layout/MainLayout.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball-frontend/src/components/layout/MainLayout.jsx" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball-frontend/src/components/messaging/Conversation.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball-frontend/src/components/messaging/Conversation.jsx" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball-frontend/src/components/messaging/FriendList.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball-frontend/src/components/messaging/FriendList.jsx" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball-frontend/src/components/messaging/FriendRequestList.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball-frontend/src/components/messaging/FriendRequestList.jsx" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball-frontend/src/components/messaging/MessageBubble.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball-frontend/src/components/messaging/MessageBubble.jsx" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball-frontend/src/components/messaging/MessagingHub.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball-frontend/src/components/messaging/MessagingHub.jsx" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball-frontend/src/components/messaging/MessagingPage.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball-frontend/src/components/messaging/MessagingPage.jsx" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball-frontend/src/components/messaging/UserSearch.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball-frontend/src/components/messaging/UserSearch.jsx" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball-frontend/src/components/profile/ProfileNavigation.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball-frontend/src/components/profile/ProfileNavigation.jsx" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball-frontend/src/components/profile/ProfilePage.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball-frontend/src/components/profile/ProfilePage.jsx" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball-frontend/src/components/profile/ProfileStats.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball-frontend/src/components/profile/ProfileStats.jsx" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/pickleball-frontend/src/context/AuthContext.js" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball-frontend/src/context/AuthContext.js" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/pickleball-frontend/src/pages/LoginPage.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball-frontend/src/pages/LoginPage.jsx" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/pickleball-frontend/src/service/api.js" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball-frontend/src/service/api.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball-frontend/src/service/ClassSessionService.js" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball-frontend/src/service/ClassSessionService.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball-frontend/src/service/CoachService.js" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball-frontend/src/service/CoachService.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball-frontend/src/service/CourtService.js" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball-frontend/src/service/CourtService.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball-frontend/src/service/EventService.js" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball-frontend/src/service/EventService.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball-frontend/src/service/FriendlyMatchService.js" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball-frontend/src/service/FriendlyMatchService.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball-frontend/src/service/SlotService.js" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball-frontend/src/service/SlotService.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball-frontend/src/service/VenueService.js" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball-frontend/src/service/VenueService.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/pom.xml" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/pom.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/config/SecurityConfig.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/config/SecurityConfig.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/EventController.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/EventController.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/EventRegistrationController.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/EventRegistrationController.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/SlotController.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/SlotController.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/VenueController.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/VenueController.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/BookingHistoryDto.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/BookingHistoryDto.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/EventRegistrationRequestDto.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/EventRegistrationRequestDto.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Admin.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Admin.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Booking.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Booking.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/BookingSlot.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/BookingSlot.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/CancellationRequest.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/CancellationRequest.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/ClassRegistration.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/ClassRegistration.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/ClassSession.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/ClassSession.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Coach.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Coach.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Court.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Court.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Event.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Event.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/EventOrganizer.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/EventOrganizer.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/EventRegistration.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/EventRegistration.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Feedback.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Feedback.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/FriendRequest.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/FriendRequest.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/FriendlyMatch.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/FriendlyMatch.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/HelpdeskQuery.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/HelpdeskQuery.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Invitation.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Invitation.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/JoinRequest.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/JoinRequest.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/LeaveRequest.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/LeaveRequest.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Message.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Message.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Payment.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Payment.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Registration.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Registration.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Slot.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Slot.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/User.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/User.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/UserAccount.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/UserAccount.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Venue.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Venue.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/WalletTransaction.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/WalletTransaction.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/EventRepository.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/EventRepository.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/security/JwtService.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/security/JwtService.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/security/UserDetailsServiceImpl.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/security/UserDetailsServiceImpl.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/AdminDashboardServiceImpl.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/AdminDashboardServiceImpl.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/BookingService.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/BookingService.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/ClassSessionServiceImpl.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/ClassSessionServiceImpl.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/CourtServiceImpl.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/CourtServiceImpl.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/EscrowAccountService.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/EscrowAccountService.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/EventRegistrationService.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/EventRegistrationService.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/EventRegistrationServiceImpl.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/EventRegistrationServiceImpl.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/EventService.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/EventService.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/EventServiceImpl.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/EventServiceImpl.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/HelpdeskService.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/HelpdeskService.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/MemberService.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/MemberService.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/SlotService.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/SlotService.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/SlotServiceImpl.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/SlotServiceImpl.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/VenueService.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/VenueService.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/resources/application.properties" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/resources/application.properties" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -49,7 +122,7 @@
   <component name="GithubPullRequestsUISettings">{
   &quot;selectedUrlAndAccountId&quot;: {
     &quot;url&quot;: &quot;https://github.com/lingyi010203/pickleball_court_reservation.git&quot;,
-    &quot;accountId&quot;: &quot;9f485822-26e4-4c6b-9a46-fe7d37d48793&quot;
+    &quot;accountId&quot;: &quot;6d62f555-4b33-47bd-babf-2da1b420cd8e&quot;
   }
 }</component>
   <component name="ProblemsViewState">
@@ -66,7 +139,7 @@
   <component name="PropertiesComponent">{
   &quot;keyToString&quot;: {
     &quot;Application.PickleballApplication.executor&quot;: &quot;Debug&quot;,
-    &quot;Application.run.executor&quot;: &quot;Debug&quot;,
+    &quot;Application.run.executor&quot;: &quot;Run&quot;,
     &quot;Application.zzz.executor&quot;: &quot;Run&quot;,
     &quot;ModuleVcsDetector.initialDetectionPerformed&quot;: &quot;true&quot;,
     &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
@@ -350,7 +423,7 @@
                   <entry key="branch">
                     <value>
                       <list>
-                        <option value="fix-court" />
+                        <option value="origin/master" />
                       </list>
                     </value>
                   </entry>
Index: pickleball/pickleball/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n\t<modelVersion>4.0.0</modelVersion>\r\n\t<parent>\r\n\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t<artifactId>spring-boot-starter-parent</artifactId>\r\n\t\t<version>3.5.0</version>\r\n\t\t<relativePath/> <!-- lookup parent from repository -->\r\n\t</parent>\r\n\t<groupId>com.pickleball-backend</groupId>\r\n\t<artifactId>pickleball</artifactId>\r\n\t<version>0.0.1-SNAPSHOT</version>\r\n\t<name>pickleball</name>\r\n\t<description>Demo project for Spring Boot Pickleball</description>\r\n\t<url/>\r\n\t<licenses>\r\n\t\t<license/>\r\n\t</licenses>\r\n\t<developers>\r\n\t\t<developer/>\r\n\t</developers>\r\n\t<scm>\r\n\t\t<connection/>\r\n\t\t<developerConnection/>\r\n\t\t<tag/>\r\n\t\t<url/>\r\n\t</scm>\r\n\t<properties>\r\n\t\t<java.version>21</java.version>\r\n\t\t<javax.annotation.version>1.3.2</javax.annotation.version>\r\n\t</properties>\r\n\t<dependencies>\r\n\t<!-- Apache POI for Excel -->\r\n<dependency>\r\n  <groupId>org.apache.poi</groupId>\r\n  <artifactId>poi-ooxml</artifactId>\r\n  <version>5.2.5</version>\r\n</dependency>\r\n<!-- OpenPDF for PDF -->\r\n<dependency>\r\n  <groupId>com.github.librepdf</groupId>\r\n  <artifactId>openpdf</artifactId>\r\n  <version>1.3.30</version>\r\n</dependency>\r\n<!-- JFreeChart for chart generation -->\r\n<dependency>\r\n  <groupId>org.jfree</groupId>\r\n  <artifactId>jfreechart</artifactId>\r\n  <version>1.5.4</version>\r\n</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-data-jpa</artifactId>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-web</artifactId>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-mail</artifactId>\r\n\t\t</dependency>\r\n\r\n\t\t<dependency>\r\n\t\t\t<groupId>javax.annotation</groupId>\r\n\t\t\t<artifactId>javax.annotation-api</artifactId>\r\n\t\t\t<version>1.3.2</version>\r\n\t\t</dependency>\r\n\r\n\t\t<!-- Add WebSocket starter -->\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-websocket</artifactId>\r\n\t\t</dependency>\r\n\r\n\t\t<!-- Add messaging support -->\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework</groupId>\r\n\t\t\t<artifactId>spring-messaging</artifactId>\r\n\t\t</dependency>\r\n\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.security</groupId>\r\n\t\t\t<artifactId>spring-security-messaging</artifactId>\r\n\t\t\t<version>6.5.0</version> <!-- Matches Spring Boot 3.5.0 -->\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-security</artifactId>\r\n\t\t</dependency>\r\n\r\n\t\t<dependency>\r\n\t\t\t<groupId>com.mysql</groupId>\r\n\t\t\t<artifactId>mysql-connector-j</artifactId>\r\n\t\t\t<scope>runtime</scope>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.projectlombok</groupId>\r\n\t\t\t<artifactId>lombok</artifactId>\r\n\t\t\t<scope>provided</scope>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-test</artifactId>\r\n\t\t\t<scope>test</scope>\r\n\t\t</dependency>\r\n\r\n\t\t<!-- https://mvnrepository.com/artifact/io.jsonwebtoken/jjwt-impl -->\r\n\t\t<dependency>\r\n\t\t\t<groupId>io.jsonwebtoken</groupId>\r\n\t\t\t<artifactId>jjwt-impl</artifactId>\r\n\t\t\t<version>0.12.6</version>\r\n\t\t\t<scope>runtime</scope>\r\n\t\t</dependency>\r\n\r\n\t\t<!-- https://mvnrepository.com/artifact/io.jsonwebtoken/jjwt-api -->\r\n\t\t<dependency>\r\n\t\t\t<groupId>io.jsonwebtoken</groupId>\r\n\t\t\t<artifactId>jjwt-api</artifactId>\r\n\t\t\t<version>0.12.6</version>\r\n\t\t</dependency>\r\n\r\n\t\t<!-- https://mvnrepository.com/artifact/io.jsonwebtoken/jjwt-jackson -->\r\n\t\t<dependency>\r\n\t\t\t<groupId>io.jsonwebtoken</groupId>\r\n\t\t\t<artifactId>jjwt-jackson</artifactId>\r\n\t\t\t<version>0.12.6</version>\r\n\t\t\t<scope>runtime</scope>\r\n\t\t</dependency>\r\n\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-validation</artifactId>\r\n\t\t</dependency>\r\n\t</dependencies>\r\n\r\n\t<build>\r\n\t\t<plugins>\r\n\t\t\t<plugin>\r\n\t\t\t\t<groupId>org.apache.maven.plugins</groupId>\r\n\t\t\t\t<artifactId>maven-compiler-plugin</artifactId>\r\n\t\t\t\t<configuration>\r\n\t\t\t\t\t<annotationProcessorPaths>\r\n\t\t\t\t\t\t<path>\r\n\t\t\t\t\t\t\t<groupId>org.projectlombok</groupId>\r\n\t\t\t\t\t\t\t<artifactId>lombok</artifactId>\r\n\t\t\t\t\t\t</path>\r\n\t\t\t\t\t</annotationProcessorPaths>\r\n\t\t\t\t</configuration>\r\n\t\t\t</plugin>\r\n\t\t\t<plugin>\r\n\t\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t\t<artifactId>spring-boot-maven-plugin</artifactId>\r\n\t\t\t\t<configuration>\r\n\t\t\t\t\t<excludes>\r\n\t\t\t\t\t\t<exclude>\r\n\t\t\t\t\t\t\t<groupId>org.projectlombok</groupId>\r\n\t\t\t\t\t\t\t<artifactId>lombok</artifactId>\r\n\t\t\t\t\t\t</exclude>\r\n\t\t\t\t\t</excludes>\r\n\t\t\t\t</configuration>\r\n\t\t\t</plugin>\r\n\t\t</plugins>\r\n\t</build>\r\n\r\n</project>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/pom.xml b/pickleball/pickleball/pom.xml
--- a/pickleball/pickleball/pom.xml	(revision c178c1d9e80f6815b91226b2d10f391611dcb6b4)
+++ b/pickleball/pickleball/pom.xml	(date 1754826893868)
@@ -61,7 +61,7 @@
 			<groupId>org.springframework.boot</groupId>
 			<artifactId>spring-boot-starter-mail</artifactId>
 		</dependency>
-
+		<!-- Removed Spring AI starter: using custom AiChatService instead -->
 		<dependency>
 			<groupId>javax.annotation</groupId>
 			<artifactId>javax.annotation-api</artifactId>
@@ -135,6 +135,9 @@
 		</dependency>
 	</dependencies>
 
+
+
+
 	<build>
 		<plugins>
 			<plugin>
@@ -163,5 +166,4 @@
 			</plugin>
 		</plugins>
 	</build>
-
 </project>
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/EventController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.controller;\r\n\r\nimport com.pickleball_backend.pickleball.dto.EventDetailDto;\r\nimport com.pickleball_backend.pickleball.dto.EventFilterDto;\r\nimport com.pickleball_backend.pickleball.dto.EventCreateDto;\r\nimport com.pickleball_backend.pickleball.dto.EventUpdateDto;\r\nimport com.pickleball_backend.pickleball.entity.Event;\r\nimport com.pickleball_backend.pickleball.repository.EventRepository;\r\nimport com.pickleball_backend.pickleball.service.EventService;\r\nimport jakarta.validation.Valid;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.springframework.data.domain.Page;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.security.access.prepost.PreAuthorize;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\nimport java.security.Principal;\r\nimport java.util.List;\r\n\r\n@RestController\r\n@RequestMapping(\"/api/events\")\r\n@RequiredArgsConstructor\r\npublic class EventController {\r\n\r\n    private final EventService eventService;\r\n    private final EventRepository eventRepository;\r\n\r\n    @PostMapping\r\n    @PreAuthorize(\"hasRole('EVENTORGANIZER')\")\r\n    public ResponseEntity<Event> createEvent(@Valid @RequestBody EventCreateDto eventDto, Principal principal) {\r\n        String username = principal.getName();\r\n        return ResponseEntity.ok(eventService.createEvent(eventDto, username));\r\n    }\r\n\r\n    @PutMapping(\"/{id}\")\r\n    @PreAuthorize(\"hasRole('EVENTORGANIZER')\")\r\n    public ResponseEntity<Event> updateEvent(\r\n            @PathVariable Integer id,\r\n            @Valid @RequestBody EventUpdateDto eventDto,\r\n            Principal principal) {\r\n        String username = principal.getName();\r\n        return ResponseEntity.ok(eventService.updateEvent(id, eventDto, username));\r\n    }\r\n\r\n    /**\r\n     * Update event with notifications enabled\r\n     * Use this endpoint when you want to notify participants about event changes\r\n     * Example: PUT /api/events/1?notifyParticipants=true\r\n     */\r\n    @PutMapping(\"/{id}/notify\")\r\n    @PreAuthorize(\"hasRole('EVENTORGANIZER')\")\r\n    public ResponseEntity<Event> updateEventWithNotification(\r\n            @PathVariable Integer id,\r\n            @Valid @RequestBody EventUpdateDto eventDto,\r\n            Principal principal) {\r\n        String username = principal.getName();\r\n        return ResponseEntity.ok(eventService.updateEvent(id, eventDto, username));\r\n    }\r\n\r\n    @DeleteMapping(\"/{id}\")\r\n    @PreAuthorize(\"hasRole('EVENTORGANIZER')\")\r\n    public ResponseEntity<Void> deleteEvent(@PathVariable Integer id) {\r\n        eventService.deleteEvent(id);\r\n        return ResponseEntity.noContent().build();\r\n    }\r\n\r\n    @PostMapping(\"/{id}/publish\")\r\n    @PreAuthorize(\"hasRole('EVENTORGANIZER')\")\r\n    public ResponseEntity<Event> publishEvent(\r\n            @PathVariable Integer id,\r\n            Principal principal\r\n    ) {\r\n        String username = principal.getName();\r\n        Event publishedEvent = eventService.publishEvent(id, username);\r\n        return ResponseEntity.ok(publishedEvent);\r\n    }\r\n\r\n    // New endpoints for browsing events\r\n    \r\n    /**\r\n     * Browse events with advanced filtering\r\n     * Supports filtering by event type, skill level, location, date range, etc.\r\n     */\r\n    @GetMapping(\"/browse\")\r\n    public ResponseEntity<Page<Event>> browseEvents(\r\n            @ModelAttribute EventFilterDto filterDto,\r\n            Principal principal) {\r\n        String username = principal != null ? principal.getName() : null;\r\n        Page<Event> events = eventService.browseEvents(filterDto, username);\r\n        return ResponseEntity.ok(events);\r\n    }\r\n    \r\n    /**\r\n     * Get detailed information about a specific event\r\n     * Includes organizer details, eligibility check, and time calculations\r\n     */\r\n    @GetMapping(\"/{id}/details\")\r\n    public ResponseEntity<EventDetailDto> getEventDetails(\r\n            @PathVariable Integer id,\r\n            Principal principal) {\r\n        String username = principal != null ? principal.getName() : null;\r\n        EventDetailDto eventDetails = eventService.getEventDetails(id, username);\r\n        return ResponseEntity.ok(eventDetails);\r\n    }\r\n    \r\n    /**\r\n     * Get all upcoming events\r\n     */\r\n    @GetMapping(\"/upcoming\")\r\n    public ResponseEntity<Page<Event>> getUpcomingEvents(\r\n            Principal principal,\r\n            @RequestParam(defaultValue = \"0\") int page,\r\n            @RequestParam(defaultValue = \"9\") int size) {\r\n        String username = principal != null ? principal.getName() : null;\r\n        Page<Event> events = eventService.getUpcomingEvents(username, page, size);\r\n        return ResponseEntity.ok(events);\r\n    }\r\n    \r\n    /**\r\n     * Get events by type (tournament, league, friendly match)\r\n     */\r\n    @GetMapping(\"/type/{eventType}\")\r\n    public ResponseEntity<Page<Event>> getEventsByType(\r\n            @PathVariable String eventType,\r\n            Principal principal) {\r\n        String username = principal != null ? principal.getName() : null;\r\n        Page<Event> events = eventService.getEventsByType(eventType, username);\r\n        return ResponseEntity.ok(events);\r\n    }\r\n    \r\n    /**\r\n     * Get friendly matches specifically\r\n     */\r\n    @GetMapping(\"/friendly-matches\")\r\n    public ResponseEntity<Page<Event>> getFriendlyMatches(Principal principal) {\r\n        String username = principal != null ? principal.getName() : null;\r\n        Page<Event> events = eventService.getEventsByType(\"friendly match\", username);\r\n        return ResponseEntity.ok(events);\r\n    }\r\n    \r\n    /**\r\n     * Get tournaments specifically\r\n     */\r\n    @GetMapping(\"/tournaments\")\r\n    public ResponseEntity<Page<Event>> getTournaments(Principal principal) {\r\n        String username = principal != null ? principal.getName() : null;\r\n        Page<Event> events = eventService.getEventsByType(\"tournament\", username);\r\n        return ResponseEntity.ok(events);\r\n    }\r\n    \r\n    /**\r\n     * Get leagues specifically\r\n     */\r\n    @GetMapping(\"/leagues\")\r\n    public ResponseEntity<Page<Event>> getLeagues(Principal principal) {\r\n        String username = principal != null ? principal.getName() : null;\r\n        Page<Event> events = eventService.getEventsByType(\"league\", username);\r\n        return ResponseEntity.ok(events);\r\n    }\r\n    \r\n    /**\r\n     * Get available event types for filtering\r\n     */\r\n    @GetMapping(\"/types\")\r\n    public ResponseEntity<List<String>> getAvailableEventTypes() {\r\n        List<String> eventTypes = List.of(\"tournament\", \"league\", \"friendly match\", \"workshop\", \"social\");\r\n        return ResponseEntity.ok(eventTypes);\r\n    }\r\n    \r\n    /**\r\n     * Get event statistics (count by type, upcoming events, etc.)\r\n     */\r\n    @GetMapping(\"/stats\")\r\n    public ResponseEntity<Object> getEventStats(Principal principal) {\r\n        String username = principal != null ? principal.getName() : null;\r\n        \r\n        // Get counts for different event types\r\n        Page<Event> tournaments = eventService.getEventsByType(\"tournament\", username);\r\n        Page<Event> leagues = eventService.getEventsByType(\"league\", username);\r\n        Page<Event> friendlyMatches = eventService.getEventsByType(\"friendly match\", username);\r\n        Page<Event> upcomingEvents = eventService.getUpcomingEvents(username, 0, 9);\r\n        \r\n        var stats = new Object() {\r\n            public final long totalTournaments = tournaments.getTotalElements();\r\n            public final long totalLeagues = leagues.getTotalElements();\r\n            public final long totalFriendlyMatches = friendlyMatches.getTotalElements();\r\n            public final long totalUpcomingEvents = upcomingEvents.getTotalElements();\r\n        };\r\n        \r\n        return ResponseEntity.ok(stats);\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/EventController.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/EventController.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/EventController.java	(revision c178c1d9e80f6815b91226b2d10f391611dcb6b4)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/EventController.java	(date 1754951796715)
@@ -4,9 +4,19 @@
 import com.pickleball_backend.pickleball.dto.EventFilterDto;
 import com.pickleball_backend.pickleball.dto.EventCreateDto;
 import com.pickleball_backend.pickleball.dto.EventUpdateDto;
+import com.pickleball_backend.pickleball.dto.SlotDto;
 import com.pickleball_backend.pickleball.entity.Event;
+import com.pickleball_backend.pickleball.entity.Court;
+import com.pickleball_backend.pickleball.entity.Slot;
+import com.pickleball_backend.pickleball.entity.ClassSession;
 import com.pickleball_backend.pickleball.repository.EventRepository;
+import com.pickleball_backend.pickleball.repository.CourtRepository;
+import com.pickleball_backend.pickleball.repository.SlotRepository;
+import com.pickleball_backend.pickleball.repository.BookingSlotRepository;
+import com.pickleball_backend.pickleball.repository.ClassSessionRepository;
 import com.pickleball_backend.pickleball.service.EventService;
+import com.pickleball_backend.pickleball.service.SlotService;
+import com.pickleball_backend.pickleball.dto.SlotResponseDto;
 import jakarta.validation.Valid;
 import lombok.RequiredArgsConstructor;
 import org.springframework.data.domain.Page;
@@ -15,7 +25,13 @@
 import org.springframework.web.bind.annotation.*;
 
 import java.security.Principal;
+import java.time.LocalDate;
+import java.time.LocalTime;
+import java.util.ArrayList;
 import java.util.List;
+import java.util.Map;
+import java.util.HashMap;
+import java.util.stream.Collectors;
 
 @RestController
 @RequestMapping("/api/events")
@@ -24,6 +40,11 @@
 
     private final EventService eventService;
     private final EventRepository eventRepository;
+    private final SlotService slotService;
+    private final CourtRepository courtRepository;
+    private final SlotRepository slotRepository;
+    private final BookingSlotRepository bookingSlotRepository;
+    private final ClassSessionRepository classSessionRepository;
 
     @PostMapping
     @PreAuthorize("hasRole('EVENTORGANIZER')")
@@ -189,4 +210,293 @@
         
         return ResponseEntity.ok(stats);
     }
+
+    // New endpoints for event organizer available slots
+    @GetMapping("/organizer/available-slots")
+    @PreAuthorize("hasRole('EVENTORGANIZER')")
+    public ResponseEntity<List<SlotResponseDto>> getAvailableSlotsForEventOrganizer(
+            @RequestParam(required = false) Integer courtId,
+            @RequestParam(required = false) String date) {
+        try {
+            List<SlotResponseDto> slots;
+            if (courtId != null && date != null) {
+                LocalDate localDate = LocalDate.parse(date);
+                slots = slotService.getAvailableSlotsByCourtAndDateRange(courtId, localDate, localDate);
+            } else if (courtId != null) {
+                slots = slotService.getAvailableSlotsByCourt(courtId);
+            } else {
+                return ResponseEntity.badRequest().build();
+            }
+            return ResponseEntity.ok(slots);
+        } catch (Exception e) {
+            return ResponseEntity.internalServerError().body(null);
+        }
+    }
+
+    @GetMapping("/organizer/available-slots-range")
+    @PreAuthorize("hasRole('EVENTORGANIZER')")
+    public ResponseEntity<List<SlotResponseDto>> getAvailableSlotsRangeForEventOrganizer(
+            @RequestParam Integer courtId,
+            @RequestParam String startDate,
+            @RequestParam String endDate) {
+        try {
+            LocalDate start = LocalDate.parse(startDate);
+            LocalDate end = LocalDate.parse(endDate);
+            List<SlotResponseDto> slots = slotService.getAvailableSlotsByCourtAndDateRange(courtId, start, end);
+            return ResponseEntity.ok(slots);
+        } catch (Exception e) {
+            return ResponseEntity.internalServerError().body(null);
+        }
+    }
+
+    @GetMapping("/organizer/all-slots")
+    @PreAuthorize("hasRole('EVENTORGANIZER')")
+    public ResponseEntity<List<SlotResponseDto>> getAllSlotsForEventOrganizer(
+            @RequestParam Integer courtId,
+            @RequestParam(required = false) String startDate,
+            @RequestParam(required = false) String endDate) {
+        try {
+            List<SlotResponseDto> slots;
+            if (startDate != null && endDate != null) {
+                LocalDate start = LocalDate.parse(startDate);
+                LocalDate end = LocalDate.parse(endDate);
+                slots = slotService.getAllSlotsByCourt(courtId, start, end);
+            } else {
+                LocalDate today = LocalDate.now();
+                LocalDate defaultEndDate = today.plusMonths(3);
+                slots = slotService.getAllSlotsByCourt(courtId, today, defaultEndDate);
+            }
+            return ResponseEntity.ok(slots);
+        } catch (Exception e) {
+            return ResponseEntity.internalServerError().body(null);
+        }
+    }
+
+    @GetMapping("/organizer/time-slots")
+    @PreAuthorize("hasRole('EVENTORGANIZER')")
+    public ResponseEntity<List<Map<String, Object>>> getTimeSlotsForEventOrganizer() {
+        try {
+            // Generate available time slots (hourly slots from 8 AM to 10 PM)
+            List<Map<String, Object>> timeSlots = new java.util.ArrayList<>();
+            for (int hour = 8; hour <= 22; hour++) {
+                Map<String, Object> slot = new HashMap<>();
+                slot.put("startTime", String.format("%02d:00", hour));
+                slot.put("endTime", String.format("%02d:00", hour + 1));
+                slot.put("displayTime", String.format("%02d:00 - %02d:00", hour, hour + 1));
+                timeSlots.add(slot);
+            }
+            return ResponseEntity.ok(timeSlots);
+        } catch (Exception e) {
+            return ResponseEntity.internalServerError().body(null);
+        }
+    }
+
+    @GetMapping("/organizer/available-times")
+    @PreAuthorize("hasRole('EVENTORGANIZER')")
+    public ResponseEntity<List<Map<String, String>>> getAvailableTimesForEventOrganizer(
+            @RequestParam Integer courtId,
+            @RequestParam String date) {
+        try {
+            LocalDate localDate = LocalDate.parse(date);
+            LocalDate startOfDay = localDate.atStartOfDay().toLocalDate();
+            LocalDate endOfDay = localDate.atTime(23, 59, 59).toLocalDate();
+            
+            List<SlotResponseDto> slots = slotService.getAvailableSlotsByCourtAndDateRange(courtId, startOfDay, endOfDay);
+            
+            List<Map<String, String>> busySlots = slots.stream()
+                .map(slot -> Map.of(
+                    "start", slot.getDate() + "T" + slot.getStartTime(),
+                    "end", slot.getDate() + "T" + slot.getEndTime()
+                ))
+                .collect(java.util.stream.Collectors.toList());
+            
+            return ResponseEntity.ok(busySlots);
+        } catch (Exception e) {
+            return ResponseEntity.internalServerError().body(null);
+        }
+    }
+
+    @GetMapping("/organizer/venue-available-slots")
+    @PreAuthorize("hasRole('EVENTORGANIZER')")
+    public ResponseEntity<List<SlotResponseDto>> getAvailableSlotsForVenue(
+            @RequestParam Integer venueId,
+            @RequestParam String date) {
+        try {
+            LocalDate localDate = LocalDate.parse(date);
+            List<SlotResponseDto> allSlots = slotService.getAvailableSlotsByVenueAndDate(venueId, localDate);
+            return ResponseEntity.ok(allSlots);
+        } catch (Exception e) {
+            return ResponseEntity.internalServerError().body(null);
+        }
+    }
+
+    @GetMapping("/organizer/venue-booked-dates")
+    @PreAuthorize("hasRole('EVENTORGANIZER')")
+    public ResponseEntity<List<String>> getBookedDatesForVenue(
+            @RequestParam Integer venueId,
+            @RequestParam(required = false) String startDate,
+            @RequestParam(required = false) String endDate,
+            @RequestParam(required = false) String state) {
+        try {
+            LocalDate start = startDate != null ? LocalDate.parse(startDate) : LocalDate.now();
+            LocalDate end = endDate != null ? LocalDate.parse(endDate) : start.plusMonths(3);
+            
+            List<String> bookedDates = slotService.getBookedDatesForVenue(venueId, start, end);
+            return ResponseEntity.ok(bookedDates);
+        } catch (Exception e) {
+            return ResponseEntity.internalServerError().body(null);
+        }
+    }
+
+    @GetMapping("/organizer/debug/slots")
+    @PreAuthorize("hasRole('EVENTORGANIZER')")
+    public ResponseEntity<Map<String, Object>> debugSlots(
+            @RequestParam Integer venueId,
+            @RequestParam String date) {
+        try {
+            LocalDate localDate = LocalDate.parse(date);
+            
+            // 獲取該venue下所有court的ID
+            List<Court> venueCourts = courtRepository.findByVenueId(venueId);
+            Map<String, Object> debugInfo = new HashMap<>();
+            debugInfo.put("venueId", venueId);
+            debugInfo.put("date", date);
+            debugInfo.put("totalCourts", venueCourts.size());
+            
+            List<Map<String, Object>> courtDebugInfo = new ArrayList<>();
+            for (Court court : venueCourts) {
+                Map<String, Object> courtInfo = new HashMap<>();
+                courtInfo.put("courtId", court.getId());
+                courtInfo.put("courtName", court.getName());
+                
+                // 獲取該court在指定日期的所有slots
+                List<Slot> allSlots = slotRepository.findByCourtIdAndDateBetween(court.getId(), localDate, localDate);
+                courtInfo.put("totalSlots", allSlots.size());
+                
+                // 統計不同狀態的slots
+                Map<String, Long> statusCounts = allSlots.stream()
+                    .collect(Collectors.groupingBy(slot -> slot.getStatus() != null ? slot.getStatus() : "NULL", Collectors.counting()));
+                courtInfo.put("statusCounts", statusCounts);
+                
+                // 統計isAvailable的slots
+                long availableCount = allSlots.stream().filter(Slot::isAvailable).count();
+                courtInfo.put("availableCount", availableCount);
+                
+                // 檢查BookingSlot
+                long bookedCount = 0;
+                for (Slot slot : allSlots) {
+                    if (bookingSlotRepository.existsBySlotIdAndStatus(slot.getId(), "BOOKED")) {
+                        bookedCount++;
+                    }
+                }
+                courtInfo.put("bookedCount", bookedCount);
+                
+                // 檢查ClassSession衝突
+                List<ClassSession> classSessions = classSessionRepository.findByCourtIdAndStartTimeBetween(
+                    court.getId(),
+                    localDate.atStartOfDay(),
+                    localDate.atTime(23, 59, 59)
+                );
+                courtInfo.put("classSessionsCount", classSessions.size());
+                
+                // 檢查Event衝突
+                List<Event> events = eventRepository.findByCourtsIdAndStartTimeBetweenAndStatusNot(
+                    court.getId(),
+                    localDate.atStartOfDay(),
+                    localDate.atTime(23, 59, 59),
+                    "CANCELLED"
+                );
+                courtInfo.put("eventsCount", events.size());
+                
+                courtDebugInfo.add(courtInfo);
+            }
+            debugInfo.put("courts", courtDebugInfo);
+            
+            return ResponseEntity.ok(debugInfo);
+        } catch (Exception e) {
+            Map<String, Object> error = new HashMap<>();
+            error.put("error", e.getMessage());
+            return ResponseEntity.internalServerError().body(error);
+        }
+    }
+
+    @PostMapping("/organizer/generate-slots")
+    @PreAuthorize("hasRole('EVENTORGANIZER')")
+    public ResponseEntity<Map<String, Object>> generateSlotsForDate(
+            @RequestParam Integer venueId,
+            @RequestParam String date) {
+        try {
+            LocalDate localDate = LocalDate.parse(date);
+            
+            // 獲取該venue下所有court的ID
+            List<Court> venueCourts = courtRepository.findByVenueId(venueId);
+            Map<String, Object> result = new HashMap<>();
+            result.put("venueId", venueId);
+            result.put("date", date);
+            result.put("totalCourts", venueCourts.size());
+            
+            int totalSlotsGenerated = 0;
+            List<Map<String, Object>> courtResults = new ArrayList<>();
+            
+            for (Court court : venueCourts) {
+                Map<String, Object> courtResult = new HashMap<>();
+                courtResult.put("courtId", court.getId());
+                courtResult.put("courtName", court.getName());
+                
+                // 檢查是否已經有slots
+                List<Slot> existingSlots = slotRepository.findByCourtIdAndDateBetween(court.getId(), localDate, localDate);
+                if (!existingSlots.isEmpty()) {
+                    courtResult.put("message", "Slots already exist for this date");
+                    courtResult.put("existingSlots", existingSlots.size());
+                    courtResults.add(courtResult);
+                    continue;
+                }
+                
+                // 生成slots
+                List<SlotDto> slotsToCreate = new ArrayList<>();
+                
+                // 解析營業時間
+                LocalTime opening = LocalTime.parse(court.getOpeningTime());
+                LocalTime closing = LocalTime.parse(court.getClosingTime());
+                
+                // 生成每小時的slot
+                LocalTime slotStart = opening;
+                while (slotStart.isBefore(closing)) {
+                    LocalTime slotEnd = slotStart.plusHours(1);
+                    if (slotEnd.isAfter(closing)) {
+                        break;
+                    }
+                    
+                    SlotDto slot = new SlotDto();
+                    slot.setCourtId(court.getId());
+                    slot.setDate(localDate);
+                    slot.setStartTime(slotStart);
+                    slot.setEndTime(slotEnd);
+                    slot.setAvailable(true);
+                    slot.setDurationHours(1);
+                    slotsToCreate.add(slot);
+                    
+                    slotStart = slotStart.plusHours(1);
+                }
+                
+                // 創建slots
+                slotService.createSlots(slotsToCreate);
+                
+                courtResult.put("slotsGenerated", slotsToCreate.size());
+                courtResult.put("message", "Successfully generated slots");
+                totalSlotsGenerated += slotsToCreate.size();
+                
+                courtResults.add(courtResult);
+            }
+            
+            result.put("totalSlotsGenerated", totalSlotsGenerated);
+            result.put("courts", courtResults);
+            
+            return ResponseEntity.ok(result);
+        } catch (Exception e) {
+            Map<String, Object> error = new HashMap<>();
+            error.put("error", e.getMessage());
+            return ResponseEntity.internalServerError().body(error);
+        }
+    }
 }
\ No newline at end of file
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/config/SecurityConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.config;\r\n\r\nimport com.pickleball_backend.pickleball.security.JwtAuthFilter;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.springframework.context.annotation.*;\r\nimport org.springframework.http.HttpMethod;\r\nimport org.springframework.security.authentication.*;\r\nimport org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;\r\nimport org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;\r\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\r\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\r\nimport org.springframework.security.config.http.SessionCreationPolicy;\r\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\r\nimport org.springframework.security.crypto.password.PasswordEncoder;\r\nimport org.springframework.security.web.SecurityFilterChain;\r\nimport org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;\r\nimport org.springframework.web.cors.CorsConfiguration;\r\nimport org.springframework.web.cors.CorsConfigurationSource;\r\nimport org.springframework.web.cors.UrlBasedCorsConfigurationSource;\r\nimport org.springframework.web.filter.CorsFilter;\r\n\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\n\r\n@Configuration\r\n@EnableWebSecurity\r\n@RequiredArgsConstructor\r\n@EnableGlobalMethodSecurity(prePostEnabled = true)\r\npublic class SecurityConfig {\r\n\r\n    private final JwtAuthFilter jwtAuthFilter;\r\n\r\n    @Bean\r\n    public CorsConfigurationSource corsConfigurationSource() {\r\n        CorsConfiguration configuration = new CorsConfiguration();\r\n        configuration.setAllowedOrigins(List.of(\"http://localhost:3000\"));\r\n        configuration.setAllowedMethods(Arrays.asList(\"GET\", \"POST\", \"PUT\", \"DELETE\", \"OPTIONS\"));\r\n        configuration.setAllowedHeaders(Arrays.asList(\"Authorization\", \"Content-Type\", \"X-Requested-With\", \"Accept\", \"Content-Disposition\"));\r\n        configuration.setExposedHeaders(Arrays.asList(\"Authorization\", \"Content-Type\", \"Content-Disposition\"));\r\n        configuration.setAllowCredentials(true);\r\n        configuration.setMaxAge(3600L);\r\n\r\n        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\r\n        source.registerCorsConfiguration(\"/**\", configuration);\r\n        return source;\r\n    }\r\n\r\n    @Bean\r\n    public PasswordEncoder passwordEncoder() {\r\n        return new BCryptPasswordEncoder();\r\n    }\r\n\r\n    @Bean\r\n    public AuthenticationManager authenticationManager(AuthenticationConfiguration config) throws Exception {\r\n        return config.getAuthenticationManager();\r\n    }\r\n\r\n    @Bean\r\n    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\r\n        http\r\n                .cors(cors -> cors.configurationSource(corsConfigurationSource()))\r\n                .csrf(csrf -> csrf.disable())\r\n                .authorizeHttpRequests(auth -> auth\r\n                        .requestMatchers(\"/api/health\").permitAll()\r\n                        .requestMatchers(\"/api/auth/**\").permitAll()\r\n                        .requestMatchers(\"/uploads/**\").permitAll()\r\n                        .requestMatchers(HttpMethod.POST, \"/api/admin/register\").permitAll()\r\n                        .requestMatchers(HttpMethod.POST, \"/api/admin/login\").permitAll()\r\n                        \r\n                        // 允许公开访问球场图片\r\n                        .requestMatchers(\"/api/admin/courts/public/**\").permitAll()\r\n                        \r\n                        // Public court access for unauthenticated users\r\n                        .requestMatchers(HttpMethod.GET, \"/api/courts\").permitAll()\r\n                        .requestMatchers(HttpMethod.GET, \"/api/courts/{id}\").permitAll()\r\n                        .requestMatchers(HttpMethod.GET, \"/api/courts/booked\").permitAll()\r\n                        .requestMatchers(HttpMethod.GET, \"/api/courts/available\").permitAll()\r\n                        \r\n                        // Public event access for unauthenticated users\r\n                        .requestMatchers(HttpMethod.GET, \"/api/events/upcoming\").permitAll()\r\n                        .requestMatchers(HttpMethod.GET, \"/api/events/browse\").permitAll()\r\n                        .requestMatchers(HttpMethod.GET, \"/api/events/{id}/details\").permitAll()\r\n                        .requestMatchers(HttpMethod.GET, \"/api/events/type/{eventType}\").permitAll()\r\n                        .requestMatchers(HttpMethod.GET, \"/api/events/friendly-matches\").permitAll()\r\n                        .requestMatchers(HttpMethod.GET, \"/api/events/tournaments\").permitAll()\r\n                        .requestMatchers(HttpMethod.GET, \"/api/events/leagues\").permitAll()\r\n                        .requestMatchers(HttpMethod.GET, \"/api/events/types\").permitAll()\r\n                        .requestMatchers(HttpMethod.GET, \"/api/events/stats\").permitAll()\r\n                        \r\n                        // Public friendly match access for unauthenticated users\r\n                        .requestMatchers(HttpMethod.GET, \"/api/friendly-matches/open\").permitAll()\r\n                        .requestMatchers(HttpMethod.GET, \"/api/friendly-matches/all\").permitAll()\r\n                        .requestMatchers(HttpMethod.GET, \"/api/friendly-matches/invitations\").permitAll()\r\n                        // Tier Management Endpoints\r\n                        .requestMatchers(HttpMethod.POST, \"/api/admin/tiers\").hasAuthority(\"ROLE_ADMIN\")\r\n                        .requestMatchers(HttpMethod.POST, \"/api/admin/*/vouchers\").hasAuthority(\"ROLE_ADMIN\")\r\n\r\n                        // Existing Admin Endpoints\r\n                        .requestMatchers(HttpMethod.GET, \"/api/admin/dashboard/**\").hasAuthority(\"ROLE_ADMIN\")\r\n                        .requestMatchers(HttpMethod.POST, \"/api/admin/courts\").hasAuthority(\"ROLE_ADMIN\")\r\n                        .requestMatchers(HttpMethod.PUT, \"/api/admin/courts/**\").hasAuthority(\"ROLE_ADMIN\")\r\n                        .requestMatchers(HttpMethod.PUT, \"/api/admin/courts/*/pricing\").hasAuthority(\"ROLE_ADMIN\")\r\n                        .requestMatchers(HttpMethod.POST, \"/api/admin/courts/**\").hasAuthority(\"ROLE_ADMIN\")\r\n                        .requestMatchers(HttpMethod.DELETE, \"/api/admin/courts/**\").hasAuthority(\"ROLE_ADMIN\")\r\n                        .requestMatchers(HttpMethod.GET, \"/api/admin/courts\").hasAuthority(\"ROLE_ADMIN\")\r\n                        .requestMatchers(HttpMethod.GET, \"/api/admin/courts/**\").hasAuthority(\"ROLE_ADMIN\")\r\n                        .requestMatchers(HttpMethod.GET, \"/api/admin/courts/*/analytics\").hasAuthority(\"ROLE_ADMIN\")\r\n                        .requestMatchers(HttpMethod.POST, \"/api/admin/tiers\").hasAuthority(\"ROLE_ADMIN\")\r\n                        .requestMatchers(HttpMethod.POST, \"/api/admin/*/vouchers\").hasAuthority(\"ROLE_ADMIN\")\r\n                        .requestMatchers(HttpMethod.GET, \"/api/admin/tiers\").hasAuthority(\"ROLE_ADMIN\")\r\n                        .requestMatchers(HttpMethod.GET, \"/api/admin/slots\").hasAuthority(\"ROLE_ADMIN\")\r\n                        .requestMatchers(HttpMethod.GET, \"/api/admin/cancellation-requests/pending\").hasAuthority(\"ROLE_ADMIN\")\r\n                        .requestMatchers(HttpMethod.PUT, \"/api/admin/cancellation-requests/*/process\").hasAuthority(\"ROLE_ADMIN\")\r\n                        .requestMatchers(HttpMethod.PUT, \"/api/admin/cancellation-requests/**\").hasAuthority(\"ROLE_ADMIN\")\r\n                        .requestMatchers(HttpMethod.GET, \"/api/admin/dashboard/**\").hasAuthority(\"ROLE_ADMIN\")\r\n                        .requestMatchers(HttpMethod.GET, \"/api/admin/users\").hasAuthority(\"ROLE_ADMIN\")\r\n                        .requestMatchers(HttpMethod.POST, \"/api/admin/users\").hasAuthority(\"ROLE_ADMIN\")\r\n                        .requestMatchers(HttpMethod.PUT, \"/api/admin/users/**\").hasAuthority(\"ROLE_ADMIN\")\r\n                        .requestMatchers(HttpMethod.DELETE, \"/api/admin/users/**\").hasAuthority(\"ROLE_ADMIN\")\r\n                        .requestMatchers(HttpMethod.POST, \"/api/admin/register-from-invite\").permitAll()\r\n                        .requestMatchers(\"/api/admin/**\").hasAuthority(\"ROLE_ADMIN\")\r\n                        .requestMatchers(HttpMethod.GET, \"/api/member/**\").hasRole(\"USER\")\r\n                        .requestMatchers(HttpMethod.POST, \"/api/member/**\").hasRole(\"USER\")\r\n                        .requestMatchers(HttpMethod.POST, \"/api/member/bookings\").hasRole(\"USER\")\r\n                        .requestMatchers(HttpMethod.GET, \"/api/member/bookings\").hasRole(\"USER\")\r\n                        .requestMatchers(HttpMethod.GET, \"/api/member/bookings/**\").hasRole(\"USER\")\r\n                        .requestMatchers(HttpMethod.POST, \"/api/member/bookings/*/cancel\").hasRole(\"USER\")\r\n                        .requestMatchers(HttpMethod.GET, \"/api/member/dashboard\").hasRole(\"USER\")\r\n                        .requestMatchers(HttpMethod.GET, \"/api/member/tiers\").hasRole(\"USER\")\r\n                        .requestMatchers(HttpMethod.GET, \"/api/member/dashboard\").hasAuthority(\"ROLE_USER\")\r\n                        .requestMatchers(HttpMethod.GET, \"/api/member/tiers\").hasAuthority(\"ROLE_USER\")\r\n                        .requestMatchers(HttpMethod.GET, \"/api/member/courts\").hasRole(\"USER\")\r\n                        .requestMatchers(HttpMethod.GET, \"/api/member/courts/{id}\").hasRole(\"USER\")\r\n                        .requestMatchers(HttpMethod.GET, \"/api/member/slots/available\").hasRole(\"USER\")\r\n                        .requestMatchers(HttpMethod.GET, \"/api/member/slots/available/grouped\").hasRole(\"USER\")\r\n                        .requestMatchers(HttpMethod.GET, \"/api/member/redeem-history\").hasRole(\"USER\")\r\n                        .requestMatchers(HttpMethod.GET, \"/api/user/reviewable-items\").hasRole(\"USER\")\r\n                        .requestMatchers(HttpMethod.GET, \"/api/feedback\").permitAll()\r\n                        .requestMatchers(HttpMethod.GET, \"/api/feedback/stats\").permitAll()\r\n                        .requestMatchers(HttpMethod.GET, \"/api/feedback/user\").hasRole(\"USER\")\r\n                        .requestMatchers(HttpMethod.GET, \"/api/feedback/reviewable-items\").hasRole(\"USER\")\r\n                        .requestMatchers(HttpMethod.POST, \"/api/feedback\").hasRole(\"USER\")\r\n                        .requestMatchers(HttpMethod.PUT, \"/api/feedback/**\").hasRole(\"USER\")\r\n                        .requestMatchers(HttpMethod.DELETE, \"/api/feedback/**\").hasAnyRole(\"USER\", \"ADMIN\")\r\n                        .requestMatchers(\"/api/auth/verify\").permitAll()\r\n                        // General Admin Access\r\n                        .requestMatchers(\"/api/admin/**\").hasAuthority(\"ROLE_ADMIN\")\r\n\r\n                        .requestMatchers(HttpMethod.POST, \"/api/coach/recurring-sessions\").hasAuthority(\"ROLE_COACH\")\r\n                        .requestMatchers(HttpMethod.POST, \"/api/coach/courses/**\").hasAuthority(\"ROLE_COACH\")\r\n                        .requestMatchers(\"/api/coach/**\").hasAuthority(\"ROLE_COACH\")\r\n\r\n                        // User Endpoints\r\n                        .requestMatchers(\"/api/profile\").authenticated()\r\n                        .requestMatchers(HttpMethod.POST, \"/api/profile/photo\").authenticated()\r\n                        .requestMatchers(\"/api/preferences\").authenticated()\r\n                        .requestMatchers(\"/error\").permitAll()\r\n                        .requestMatchers(\"/ws/**\").permitAll()\r\n                        .anyRequest().authenticated()\r\n                )\r\n                .sessionManagement(sess -> sess.sessionCreationPolicy(SessionCreationPolicy.STATELESS))\r\n                .addFilterBefore(jwtAuthFilter, UsernamePasswordAuthenticationFilter.class);\r\n\r\n        return http.build();\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/config/SecurityConfig.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/config/SecurityConfig.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/config/SecurityConfig.java	(revision c178c1d9e80f6815b91226b2d10f391611dcb6b4)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/config/SecurityConfig.java	(date 1754950438372)
@@ -68,7 +68,6 @@
                         .requestMatchers(HttpMethod.POST, "/api/admin/login").permitAll()
                         
                         // 允许公开访问球场图片
-                        .requestMatchers("/api/admin/courts/public/**").permitAll()
                         
                         // Public court access for unauthenticated users
                         .requestMatchers(HttpMethod.GET, "/api/courts").permitAll()
@@ -91,6 +90,11 @@
                         .requestMatchers(HttpMethod.GET, "/api/friendly-matches/open").permitAll()
                         .requestMatchers(HttpMethod.GET, "/api/friendly-matches/all").permitAll()
                         .requestMatchers(HttpMethod.GET, "/api/friendly-matches/invitations").permitAll()
+                        
+                        // Public venue access for unauthenticated users
+                        .requestMatchers(HttpMethod.GET, "/api/venues").permitAll()
+                        .requestMatchers(HttpMethod.GET, "/api/venues/bystate").permitAll()
+                        .requestMatchers(HttpMethod.GET, "/api/venues/check-availability").permitAll()
                         // Tier Management Endpoints
                         .requestMatchers(HttpMethod.POST, "/api/admin/tiers").hasAuthority("ROLE_ADMIN")
                         .requestMatchers(HttpMethod.POST, "/api/admin/*/vouchers").hasAuthority("ROLE_ADMIN")
@@ -129,10 +133,12 @@
                         .requestMatchers(HttpMethod.GET, "/api/member/tiers").hasRole("USER")
                         .requestMatchers(HttpMethod.GET, "/api/member/dashboard").hasAuthority("ROLE_USER")
                         .requestMatchers(HttpMethod.GET, "/api/member/tiers").hasAuthority("ROLE_USER")
-                        .requestMatchers(HttpMethod.GET, "/api/member/courts").hasRole("USER")
-                        .requestMatchers(HttpMethod.GET, "/api/member/courts/{id}").hasRole("USER")
-                        .requestMatchers(HttpMethod.GET, "/api/member/slots/available").hasRole("USER")
-                        .requestMatchers(HttpMethod.GET, "/api/member/slots/available/grouped").hasRole("USER")
+                        .requestMatchers(HttpMethod.GET, "/api/member/courts").hasAnyRole("USER", "EVENTORGANIZER")
+                        .requestMatchers(HttpMethod.GET, "/api/member/courts/{id}").hasAnyRole("USER", "EVENTORGANIZER")
+                        .requestMatchers(HttpMethod.GET, "/api/member/slots/available").hasAnyRole("USER", "EVENTORGANIZER")
+                        .requestMatchers(HttpMethod.GET, "/api/member/slots/available/grouped").hasAnyRole("USER", "EVENTORGANIZER")
+                        .requestMatchers(HttpMethod.GET, "/api/member/slots/available-range").hasAnyRole("USER", "EVENTORGANIZER")
+                        .requestMatchers(HttpMethod.GET, "/api/member/slots/all").hasAnyRole("USER", "EVENTORGANIZER")
                         .requestMatchers(HttpMethod.GET, "/api/member/redeem-history").hasRole("USER")
                         .requestMatchers(HttpMethod.GET, "/api/user/reviewable-items").hasRole("USER")
                         .requestMatchers(HttpMethod.GET, "/api/feedback").permitAll()
@@ -143,6 +149,11 @@
                         .requestMatchers(HttpMethod.PUT, "/api/feedback/**").hasRole("USER")
                         .requestMatchers(HttpMethod.DELETE, "/api/feedback/**").hasAnyRole("USER", "ADMIN")
                         .requestMatchers("/api/auth/verify").permitAll()
+                        
+                        // Admin public endpoints (must come before general admin rule)
+                        .requestMatchers("/api/admin/courts/public/**").permitAll()
+                        .requestMatchers("/api/admin/venues/public/**").permitAll()
+                        
                         // General Admin Access
                         .requestMatchers("/api/admin/**").hasAuthority("ROLE_ADMIN")
 
@@ -150,6 +161,14 @@
                         .requestMatchers(HttpMethod.POST, "/api/coach/courses/**").hasAuthority("ROLE_COACH")
                         .requestMatchers("/api/coach/**").hasAuthority("ROLE_COACH")
 
+                        // Event Organizer Endpoints
+                        .requestMatchers("/api/event-organizer/**").hasRole("EVENTORGANIZER")
+                        .requestMatchers("/api/events/organizer/**").hasRole("EVENTORGANIZER")
+                        .requestMatchers(HttpMethod.POST, "/api/events").hasRole("EVENTORGANIZER")
+                        .requestMatchers(HttpMethod.PUT, "/api/events/**").hasRole("EVENTORGANIZER")
+                        .requestMatchers(HttpMethod.DELETE, "/api/events/**").hasRole("EVENTORGANIZER")
+                        .requestMatchers("/api/event-registration/**").hasAnyRole("USER", "EVENTORGANIZER")
+
                         // User Endpoints
                         .requestMatchers("/api/profile").authenticated()
                         .requestMatchers(HttpMethod.POST, "/api/profile/photo").authenticated()
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/EventRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.repository;\r\n\r\nimport com.pickleball_backend.pickleball.entity.Event;\r\nimport org.springframework.data.domain.Page;\r\nimport org.springframework.data.domain.Pageable;\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\nimport org.springframework.data.jpa.repository.Query;\r\nimport org.springframework.data.repository.query.Param;\r\nimport org.springframework.stereotype.Repository;\r\n\r\nimport java.time.LocalDate;\r\nimport java.time.LocalDateTime;\r\nimport java.util.List;\r\n\r\n@Repository\r\npublic interface EventRepository extends JpaRepository<Event, Integer> {\r\n\r\n    // Find all events\r\n    List<Event> findAll();\r\n\r\n    // Find events by organizer\r\n    List<Event> findByOrganizerId(Integer organizerId);\r\n\r\n    // Find upcoming events\r\n    List<Event> findByStartTimeAfter(LocalDateTime date);\r\n\r\n    // Find events by title containing keyword\r\n    List<Event> findByTitleContainingIgnoreCase(String keyword);\r\n\r\n    List<Event> findByStatus(String status);\r\n    \r\n    // New methods for browsing and filtering\r\n    List<Event> findByEventType(String eventType);\r\n    List<Event> findByEventTypeAndStatus(String eventType, String status);\r\n    \r\n    // Find published events by type\r\n    List<Event> findByEventTypeAndStatusOrderByStartTimeAsc(String eventType, String status);\r\n    \r\n    // Find upcoming published events\r\n    List<Event> findByStatusAndStartTimeAfterOrderByStartTimeAsc(String status, LocalDateTime date);\r\n    \r\n    // Complex query for filtering\r\n    @Query(\"SELECT e FROM Event e WHERE \" +\r\n           \"(:eventType IS NULL OR e.eventType = :eventType) AND \" +\r\n           \"(:startDate IS NULL OR e.startTime >= :startDate) AND \" +\r\n           \"(:endDate IS NULL OR e.startTime <= :endDate) AND \" +\r\n           \"(:status IS NULL OR e.status = :status OR e.status IS NULL) AND \" +\r\n           \"(:searchKeyword IS NULL OR LOWER(e.title) LIKE LOWER(CONCAT('%', :searchKeyword, '%'))) AND \" +\r\n           \"e.startTime > :currentTime\")\r\n    Page<Event> findEventsWithFilters(\r\n            @Param(\"eventType\") String eventType,\r\n            @Param(\"startDate\") LocalDateTime startDate,\r\n            @Param(\"endDate\") LocalDateTime endDate,\r\n            @Param(\"status\") String status,\r\n            @Param(\"searchKeyword\") String searchKeyword,\r\n            @Param(\"currentTime\") LocalDateTime currentTime,\r\n            Pageable pageable);\r\n\r\n    List<Event> findByCourts_Id(Integer courtId);\r\n    List<Event> findByVenue_Id(Integer venueId);\r\n\r\n    @Query(\"SELECT DISTINCT DATE(e.startTime) FROM Event e WHERE e.venue.id = :venueId AND e.startTime BETWEEN :start AND :end\")\r\nList<LocalDate> findEventDatesByVenueIdAndDateRange(@Param(\"venueId\") Integer venueId,\r\n                                                    @Param(\"start\") LocalDate start,\r\n                                                    @Param(\"end\") LocalDate end);\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/EventRepository.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/EventRepository.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/EventRepository.java	(revision c178c1d9e80f6815b91226b2d10f391611dcb6b4)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/EventRepository.java	(date 1754946888659)
@@ -60,7 +60,23 @@
     List<Event> findByVenue_Id(Integer venueId);
 
     @Query("SELECT DISTINCT DATE(e.startTime) FROM Event e WHERE e.venue.id = :venueId AND e.startTime BETWEEN :start AND :end")
-List<LocalDate> findEventDatesByVenueIdAndDateRange(@Param("venueId") Integer venueId,
-                                                    @Param("start") LocalDate start,
-                                                    @Param("end") LocalDate end);
+    List<LocalDate> findEventDatesByVenueIdAndDateRange(@Param("venueId") Integer venueId,
+                                                        @Param("start") LocalDate start,
+                                                        @Param("end") LocalDate end);
+
+    // Find event dates by court venue
+    @Query("SELECT DISTINCT DATE(e.startTime) FROM Event e JOIN e.courts c WHERE c.venue.id = :venueId AND e.startTime BETWEEN :start AND :end")
+    List<LocalDate> findEventDatesByCourtVenueIdAndDateRange(@Param("venueId") Integer venueId,
+                                                             @Param("start") LocalDate start,
+                                                             @Param("end") LocalDate end);
+    
+    // 新增：檢查特定場地在指定時間段內是否有Event衝突
+    @Query("SELECT e FROM Event e JOIN e.courts c WHERE c.id = :courtId " +
+           "AND e.status NOT IN ('CANCELLED', 'COMPLETED') " +
+           "AND ((e.startTime < :endTime AND e.endTime > :startTime))")
+    List<Event> findByCourtsIdAndStartTimeBetweenAndStatusNot(
+            @Param("courtId") Integer courtId,
+            @Param("startTime") LocalDateTime startTime,
+            @Param("endTime") LocalDateTime endTime,
+            @Param("status") String status);
 }
\ No newline at end of file
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/BookingHistoryDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.dto;\r\n\r\nimport lombok.Data;\r\nimport java.time.LocalDate;\r\nimport java.time.LocalDateTime;\r\nimport java.time.LocalTime;\r\n\r\n@Data\r\npublic class BookingHistoryDto {\r\n    private Integer id;\r\n    private Integer courtId; // 新增：court ID\r\n    private String courtName;\r\n    private String location;\r\n    private LocalDate date;\r\n    private LocalTime startTime;\r\n    private LocalTime endTime;\r\n    private double amount;\r\n    private String status; // UPCOMING, COMPLETED, CANCELLED\r\n    private LocalDateTime createdAt;\r\n    private String purpose;\r\n    private Integer numberOfPlayers;\r\n    private Integer durationHours;\r\n    // 新增：球拍和球组信息\r\n    private Integer numPaddles;\r\n    private Boolean buyBallSet;\r\n    \r\n    // 新增：用户是否已经评价过这个预订\r\n    private Boolean hasReviewed;\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/BookingHistoryDto.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/BookingHistoryDto.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/BookingHistoryDto.java	(revision c178c1d9e80f6815b91226b2d10f391611dcb6b4)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/BookingHistoryDto.java	(date 1754939990881)
@@ -26,4 +26,7 @@
     
     // 新增：用户是否已经评价过这个预订
     private Boolean hasReviewed;
+    
+    // 新增：預訂類型（COURT_BOOKING, EVENT_REGISTRATION）
+    private String bookingType = "COURT_BOOKING";
 }
\ No newline at end of file
Index: pickleball-frontend/src/components/court/PaymentPage.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Container,\r\n  Card,\r\n  CardContent,\r\n  Typography,\r\n  Button,\r\n  Box,\r\n  Grid,\r\n  Divider,\r\n  Radio,\r\n  RadioGroup,\r\n  FormControlLabel,\r\n  FormControl,\r\n  FormLabel,\r\n  CircularProgress,\r\n  Alert,\r\n  Chip,\r\n  Paper,\r\n  Select,\r\n  MenuItem,\r\n  Checkbox,\r\n  FormControlLabel as MuiFormControlLabel\r\n} from '@mui/material';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport PaymentIcon from '@mui/icons-material/Payment';\r\nimport AccountBalanceWalletIcon from '@mui/icons-material/AccountBalanceWallet';\r\nimport CreditCardIcon from '@mui/icons-material/CreditCard';\r\nimport LocationOnIcon from '@mui/icons-material/LocationOn';\r\nimport AccessTimeIcon from '@mui/icons-material/AccessTime';\r\nimport SportsIcon from '@mui/icons-material/Sports';\r\nimport GroupIcon from '@mui/icons-material/Group';\r\nimport LocalOfferIcon from '@mui/icons-material/LocalOffer';\r\nimport api from '../../api/axiosConfig.js';\r\nimport { getWalletBalance, initializeWallet } from '../../service/WalletService';\r\nimport { VoucherService } from '../../service/VoucherService';\r\nimport { useAuth } from '../../context/AuthContext';\r\nimport ThemedCard from '../common/ThemedCard';\r\n\r\nconst PaymentPage = () => {\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n  const bookingDetails = location.state?.bookingDetails;\r\n  const sessionGroup = location.state?.sessionGroup;\r\n  const session = location.state?.session;\r\n  const eventDetails = location.state?.eventDetails;\r\n  const paymentType = location.state?.paymentType;\r\n\r\n  // 檢查是否有 replacement session 支付數據\r\n  const replacementSessionPayment = localStorage.getItem('replacementSessionPayment');\r\n  const replacementData = replacementSessionPayment ? JSON.parse(replacementSessionPayment) : null;\r\n\r\n  // 確定支付數據來源\r\n  const paymentData = bookingDetails || sessionGroup || session || replacementData || eventDetails;\r\n\r\n  // 調試信息\r\n  console.log('=== PaymentPage Debug ===');\r\n  console.log('location.state:', location.state);\r\n  console.log('bookingDetails:', bookingDetails);\r\n  console.log('sessionGroup:', sessionGroup);\r\n  console.log('session:', session);\r\n  console.log('eventDetails:', eventDetails);\r\n  console.log('paymentType:', paymentType);\r\n  console.log('replacementData:', replacementData);\r\n  console.log('paymentData:', paymentData);\r\n\r\n  // 詳細檢查 session 對象\r\n  if (session) {\r\n    console.log('Session details:');\r\n    console.log('- id:', session.id);\r\n    console.log('- title:', session.title);\r\n    console.log('- price:', session.price);\r\n    console.log('- startTime:', session.startTime);\r\n    console.log('- endTime:', session.endTime);\r\n    console.log('- startTime type:', typeof session.startTime);\r\n    console.log('- endTime type:', typeof session.endTime);\r\n    if (session.startTime) {\r\n      console.log('- startTime parsed:', new Date(session.startTime));\r\n      console.log('- startTime valid:', !isNaN(new Date(session.startTime).getTime()));\r\n    }\r\n    if (session.endTime) {\r\n      console.log('- endTime parsed:', new Date(session.endTime));\r\n      console.log('- endTime valid:', !isNaN(new Date(session.endTime).getTime()));\r\n    }\r\n    console.log('- coach:', session.coach);\r\n    console.log('- coachName:', session.coachName);\r\n    console.log('- court:', session.court);\r\n    console.log('- venue:', session.venue);\r\n    console.log('- venueName:', session.venueName);\r\n    console.log('- All session keys:', Object.keys(session));\r\n  }\r\n\r\n  if (sessionGroup) {\r\n    console.log('SessionGroup details:');\r\n    console.log('- length:', sessionGroup.length);\r\n    console.log('- first session:', sessionGroup[0]);\r\n  }\r\n\r\n  const [paymentMethod, setPaymentMethod] = useState('wallet');\r\n  const [walletBalance, setWalletBalance] = useState(0);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [isProcessing, setIsProcessing] = useState(false);\r\n  const [useVoucher, setUseVoucher] = useState(false);\r\n  const [availableVouchers, setAvailableVouchers] = useState([]);\r\n  const [selectedVoucherId, setSelectedVoucherId] = useState(null);\r\n\r\n  // Class session 設備選項\r\n  const [numPaddles, setNumPaddles] = useState(0);\r\n  const [buyBallSet, setBuyBallSet] = useState(false);\r\n\r\n  const { authToken } = useAuth();\r\n\r\n  // 定義常量\r\n  const PADDLE_PRICE = 5;\r\n  const BALL_SET_PRICE = 12;\r\n\r\n  // 計算初始金額\r\n  const getInitialAmount = () => {\r\n    let baseAmount = 0;\r\n\r\n    if (sessionGroup) {\r\n      // 對於 sessionGroup，計算所有課程的總價\r\n      baseAmount = sessionGroup.reduce((sum, sess) => sum + (sess.price || 0), 0);\r\n    } else if (session) {\r\n      // 對於單個 session，使用其價格\r\n      baseAmount = session.price || 0;\r\n    } else if (replacementData) {\r\n      // 對於 replacement session，使用 amount\r\n      baseAmount = replacementData.amount || 0;\r\n    } else if (eventDetails) {\r\n      // 對於事件註冊，使用事件費用\r\n      baseAmount = eventDetails.feeAmount || 0;\r\n    } else if (paymentData) {\r\n      // 對於其他情況，使用 price 或 amount\r\n      baseAmount = paymentData.price || paymentData.amount || 0;\r\n    }\r\n\r\n    // 添加設備費用（只在 class session 時）\r\n    if (sessionGroup || session) {\r\n      const paddleCost = numPaddles * PADDLE_PRICE;\r\n      const ballCost = buyBallSet ? BALL_SET_PRICE : 0;\r\n      baseAmount += paddleCost + ballCost;\r\n    }\r\n\r\n    return baseAmount;\r\n  };\r\n\r\n  const [discountedAmount, setDiscountedAmount] = useState(getInitialAmount());\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        setIsLoading(true);\r\n\r\n        // Fetch wallet balance\r\n        let balance;\r\n        try {\r\n          balance = await getWalletBalance();\r\n        } catch (getError) {\r\n          console.warn('Wallet not found, initializing...', getError);\r\n          await initializeWallet();\r\n          balance = await getWalletBalance();\r\n        }\r\n        setWalletBalance(balance);\r\n\r\n        // Fetch available vouchers\r\n        try {\r\n          const vouchers = await VoucherService.getActiveVouchers();\r\n          console.log('=== PaymentPage Debug ===');\r\n          console.log('Fetched active vouchers:', vouchers);\r\n          setAvailableVouchers(vouchers);\r\n        } catch (voucherError) {\r\n          console.warn('Failed to fetch active vouchers:', voucherError);\r\n          console.error('Voucher error details:', voucherError.response?.data);\r\n          setAvailableVouchers([]);\r\n        }\r\n\r\n      } catch (err) {\r\n        console.error('Data loading error:', err);\r\n        setError('Failed to load data: ' + err.message);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  // Calculate discounted amount when voucher selection changes\r\n  useEffect(() => {\r\n    if (useVoucher && selectedVoucherId) {\r\n      const selectedVoucher = availableVouchers.find(v => v.id === selectedVoucherId);\r\n      if (selectedVoucher) {\r\n        let originalPrice = getInitialAmount();\r\n        let newAmount = originalPrice;\r\n        if (selectedVoucher.discountType === 'percentage') {\r\n          newAmount = originalPrice * (1 - selectedVoucher.discountValue / 100);\r\n        } else {\r\n          newAmount = Math.max(0, originalPrice - selectedVoucher.discountValue);\r\n        }\r\n        setDiscountedAmount(newAmount);\r\n      }\r\n    } else {\r\n      setDiscountedAmount(getInitialAmount());\r\n    }\r\n  }, [useVoucher, selectedVoucherId, availableVouchers, sessionGroup, session, replacementData, paymentData, numPaddles, buyBallSet]);\r\n\r\n  const handlePayment = async () => {\r\n    if (!paymentData) {\r\n      setError('Payment details missing');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setIsProcessing(true);\r\n\r\n      // 根據支付類型構建請求\r\n      let apiEndpoint = '/member/bookings';\r\n      let requestData = {};\r\n\r\n      if (replacementData) {\r\n        // Replacement session payment\r\n        apiEndpoint = '/member/replacement-session-payment';\r\n        requestData = {\r\n          sessionId: replacementData.sessionId,\r\n          amount: replacementData.amount,\r\n          useWallet: paymentMethod === 'wallet',\r\n          useVoucher: useVoucher,\r\n          voucherRedemptionId: selectedVoucherId\r\n        };\r\n      } else if (sessionGroup || session) {\r\n        // Class session registration\r\n        if (sessionGroup) {\r\n          // 對於 sessionGroup，使用批量註冊端點\r\n          apiEndpoint = '/class-sessions/register-multi';\r\n          requestData = {\r\n            sessionIds: sessionGroup.map(s => s.id),\r\n            paymentMethod: paymentMethod === 'wallet' ? 'wallet' : 'card',\r\n            numPaddles: numPaddles,\r\n            buyBallSet: buyBallSet\r\n          };\r\n        } else {\r\n          // 對於單個 session\r\n          apiEndpoint = `/class-sessions/${session.id}/register`;\r\n          requestData = {\r\n            useWallet: paymentMethod === 'wallet',\r\n            useVoucher: useVoucher,\r\n            voucherRedemptionId: selectedVoucherId,\r\n            numPaddles: numPaddles,\r\n            buyBallSet: buyBallSet\r\n          };\r\n        }\r\n      } else if (eventDetails) {\r\n        // Event registration payment - 事件註冊不使用 voucher\r\n        apiEndpoint = '/event-registration/register';\r\n        requestData = {\r\n          eventId: eventDetails.id\r\n        };\r\n      } else {\r\n        // Regular court booking\r\n        requestData = {\r\n          slotIds: paymentData.slotIds,\r\n          purpose: paymentData.purpose,\r\n          numberOfPlayers: paymentData.numberOfPlayers,\r\n          numPaddles: paymentData.numPaddles,\r\n          buyBallSet: paymentData.buyBallSet,\r\n          durationHours: paymentData.durationHours,\r\n          useWallet: paymentMethod === 'wallet',\r\n          useVoucher: useVoucher,\r\n          voucherRedemptionId: selectedVoucherId\r\n        };\r\n      }\r\n\r\n      console.log('=== PaymentPage Debug ===');\r\n      console.log('Payment Method:', paymentMethod);\r\n      console.log('Use Wallet:', paymentMethod === 'wallet');\r\n      console.log('Use Voucher:', useVoucher);\r\n      console.log('Selected Voucher ID:', selectedVoucherId);\r\n      console.log('Request Data:', requestData);\r\n      console.log('API Endpoint:', apiEndpoint);\r\n      console.log('Available Vouchers:', availableVouchers);\r\n      if (selectedVoucherId) {\r\n        const selectedVoucher = availableVouchers.find(v => v.id === selectedVoucherId);\r\n        console.log('Selected Voucher Details:', selectedVoucher);\r\n      }\r\n\r\n      const response = await api.post(apiEndpoint, requestData);\r\n\r\n      console.log('=== PaymentPage Debug ===');\r\n      console.log('API Response:', response.data);\r\n      console.log('Booking Details:', bookingDetails);\r\n\r\n      // 根據支付類型決定導航目標\r\n      if (replacementData) {\r\n        // Replacement session - 清除 localStorage 並導航到教練儀表板\r\n        localStorage.removeItem('replacementSessionPayment');\r\n        navigate('/coach/dashboard', {\r\n          state: {\r\n            message: 'Replacement session payment completed successfully!',\r\n            paymentResult: response.data\r\n          }\r\n        });\r\n      } else if (sessionGroup || session) {\r\n        // Class session - 導航到課程確認頁面\r\n        navigate('/booking/confirmation', {\r\n          state: {\r\n            booking: {\r\n              type: 'class-session',\r\n              sessions: sessionGroup || [session],\r\n              totalAmount: response.data.totalAmount,\r\n              pointsEarned: response.data.pointsEarned,\r\n              numPaddles: numPaddles,\r\n              buyBallSet: buyBallSet,\r\n              registrationDate: new Date().toISOString(),\r\n              currentTierPointBalance: response.data.currentTierPointBalance,\r\n              currentRewardPointBalance: response.data.currentRewardPointBalance,\r\n              paymentMethod: paymentMethod === 'wallet' ? 'WALLET' : 'CREDIT_CARD',\r\n              paymentStatus: 'COMPLETED'\r\n            }\r\n          }\r\n        });\r\n      } else if (eventDetails) {\r\n        // Event registration - 導航到確認頁面\r\n        navigate('/booking/confirmation', {\r\n          state: {\r\n            type: 'event-registration',\r\n            eventDetails: eventDetails,\r\n            registrationResult: response.data,\r\n            totalAmount: response.data.feeAmount || eventDetails.feeAmount,\r\n            paymentMethod: paymentMethod === 'wallet' ? 'WALLET' : 'CREDIT_CARD',\r\n            paymentStatus: 'COMPLETED'\r\n          }\r\n        });\r\n      } else {\r\n        // Regular court booking\r\n        navigate('/booking/confirmation', {\r\n          state: {\r\n            booking: {\r\n              ...response.data,\r\n              slotDate: paymentData.date,\r\n              startTime: paymentData.startTime,\r\n              endTime: paymentData.endTime,\r\n              durationHours: paymentData.durationHours,\r\n              totalAmount: response.data.totalAmount,\r\n              price: paymentData.price,\r\n              numPaddles: paymentData.numPaddles,\r\n              buyBallSet: paymentData.buyBallSet,\r\n              numberOfPlayers: paymentData.numberOfPlayers,\r\n              courtName: paymentData.courtName,\r\n              courtLocation: paymentData.courtLocation,\r\n              venueName: paymentData.venueName,\r\n              venueLocation: paymentData.venueLocation,\r\n              pointsEarned: response.data.pointsEarned,\r\n              currentTierPointBalance: response.data.currentTierPointBalance,\r\n              currentRewardPointBalance: response.data.currentRewardPointBalance\r\n            }\r\n          }\r\n        });\r\n      }\r\n    } catch (err) {\r\n      const errorMessage = err.response?.data?.message || 'Payment failed. Please try again.';\r\n\r\n      if (errorMessage.includes('Insufficient wallet balance')) {\r\n        setError('Your wallet balance is too low. Please top up and try again.');\r\n      } else {\r\n        setError(errorMessage);\r\n      }\r\n\r\n      setIsProcessing(false);\r\n    }\r\n  };\r\n\r\n  if (!paymentData) {\r\n    return (\r\n      <Container sx={{ py: 4, textAlign: 'center' }}>\r\n        <Typography variant=\"h5\" gutterBottom>\r\n          Payment information not available\r\n        </Typography>\r\n        <Button variant=\"contained\" onClick={() => navigate('/courts')}>\r\n          Browse Courts\r\n        </Button>\r\n      </Container>\r\n    );\r\n  }\r\n\r\n  const formatTime = (time) => {\r\n    return new Date(`1970-01-01T${time}:00`).toLocaleTimeString([],\r\n      { hour: '2-digit', minute: '2-digit' });\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\" sx={{ py: 4 }}>\r\n      {/* Header */}\r\n      <Box sx={{ textAlign: 'center', mb: 4 }}>\r\n        <PaymentIcon sx={{ fontSize: 48, color: '#1976d2', mb: 2 }} />\r\n        <Typography variant=\"h4\" gutterBottom sx={{ fontWeight: 'bold', color: '#1976d2' }}>\r\n          {eventDetails ? 'Event Registration Payment' : 'Complete Payment'}\r\n        </Typography>\r\n        <Typography variant=\"body1\" color=\"text.secondary\">\r\n          {eventDetails ? 'Review your event registration and choose payment method' : 'Review your booking and choose payment method'}\r\n        </Typography>\r\n      </Box>\r\n\r\n      <Box sx={{\r\n        display: 'flex',\r\n        flexDirection: { xs: 'column', md: 'row' },\r\n        gap: 3,\r\n        minHeight: '600px'\r\n      }}>\r\n        {/* Left Column - Booking Summary */}\r\n        <Box sx={{ flex: { xs: 'none', md: 1 } }}>\r\n          <ThemedCard sx={{ borderRadius: 3, boxShadow: 2, height: '100%' }}>\r\n            <CardContent sx={{ p: 4 }}>\r\n              <Typography variant=\"h5\" gutterBottom sx={{ fontWeight: 'bold', color: '#1976d2', mb: 3 }}>\r\n                \uD83D\uDCCB {eventDetails ? 'Event Registration Summary' : 'Booking Summary'}\r\n              </Typography>\r\n\r\n              {/* Court & Venue Info - 只在非 class session 且非 event 時顯示 */}\r\n              {!sessionGroup && !session && !eventDetails && (\r\n                <Box sx={{ display: 'flex', alignItems: 'center', mb: 3 }}>\r\n                  <SportsIcon sx={{ color: '#1976d2', mr: 1, fontSize: 28 }} />\r\n                  <Box>\r\n                    <Typography variant=\"h6\" sx={{ fontWeight: 'bold', color: '#1976d2' }}>\r\n                      {replacementData ? replacementData.courtName :\r\n                        paymentData.courtName}\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" color=\"text.secondary\">\r\n                      {replacementData ? replacementData.venueName :\r\n                        paymentData.venueName}\r\n                    </Typography>\r\n                  </Box>\r\n                </Box>\r\n              )}\r\n\r\n              {/* Date & Time - 只在非 class session 且非 event 時顯示 */}\r\n              {!sessionGroup && !session && !eventDetails && (\r\n                <Box sx={{ display: 'flex', alignItems: 'center', mb: 3 }}>\r\n                  <AccessTimeIcon sx={{ color: '#1976d2', mr: 1, fontSize: 28 }} />\r\n                  <Box>\r\n                    <Typography variant=\"h6\" sx={{ fontWeight: 'bold' }}>\r\n                      {replacementData ? new Date(replacementData.startTime).toLocaleDateString() :\r\n                        paymentData.date}\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" color=\"text.secondary\">\r\n                      {replacementData ?\r\n                        `${new Date(replacementData.startTime).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })} - ${new Date(replacementData.endTime).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })} (${replacementData.duration}h)` :\r\n                        `${formatTime(paymentData.startTime)} - ${formatTime(paymentData.endTime)} (${paymentData.durationHours}h)`}\r\n                    </Typography>\r\n                  </Box>\r\n                </Box>\r\n              )}\r\n\r\n              {/* Players & Equipment - 只在 court booking 時顯示，不包括 event */}\r\n              {!replacementData && !sessionGroup && !session && !eventDetails && (\r\n                <>\r\n                  <Divider sx={{ my: 2 }} />\r\n                  <Typography variant=\"h6\" gutterBottom sx={{ fontWeight: 'bold', color: '#424242' }}>\r\n                    \uD83D\uDC65 Players & Equipment\r\n                  </Typography>\r\n\r\n                  <Grid container spacing={2}>\r\n                    <Grid item xs={12} sm={4}>\r\n                      <Box sx={{ textAlign: 'center', p: 2, backgroundColor: '#f5f5f5', borderRadius: 2 }}>\r\n                        <GroupIcon sx={{ color: '#1976d2', fontSize: 32, mb: 1 }} />\r\n                        <Typography variant=\"h6\" sx={{ fontWeight: 'bold' }}>\r\n                          {paymentData.numberOfPlayers}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\" color=\"text.secondary\">\r\n                          Players\r\n                        </Typography>\r\n                      </Box>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} sm={4}>\r\n                      <Box sx={{ textAlign: 'center', p: 2, backgroundColor: '#f5f5f5', borderRadius: 2 }}>\r\n                        <SportsIcon sx={{ color: '#9c27b0', fontSize: 32, mb: 1 }} />\r\n                        <Typography variant=\"h6\" sx={{ fontWeight: 'bold' }}>\r\n                          {paymentData.numPaddles}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\" color=\"text.secondary\">\r\n                          Paddles (RM{PADDLE_PRICE} each)\r\n                        </Typography>\r\n                      </Box>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} sm={4}>\r\n                      <Box sx={{ textAlign: 'center', p: 2, backgroundColor: '#f5f5f5', borderRadius: 2 }}>\r\n                        <SportsIcon sx={{ color: '#4caf50', fontSize: 32, mb: 1 }} />\r\n                        <Typography variant=\"h6\" sx={{ fontWeight: 'bold' }}>\r\n                          {paymentData.buyBallSet ? 'Yes' : 'No'}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\" color=\"text.secondary\">\r\n                          Ball Set (RM{BALL_SET_PRICE})\r\n                        </Typography>\r\n                      </Box>\r\n                    </Grid>\r\n                  </Grid>\r\n                </>\r\n              )}\r\n\r\n              {/* Class Session Info - 只在 class session 時顯示 */}\r\n              {(sessionGroup || session) && (\r\n                <>\r\n                  <Divider sx={{ my: 2 }} />\r\n                  <Typography variant=\"h6\" gutterBottom sx={{ fontWeight: 'bold', color: '#424242' }}>\r\n                    \uD83C\uDF93 Class Session Details\r\n                  </Typography>\r\n\r\n                  <Box sx={{ p: 2, backgroundColor: '#f5f5f5', borderRadius: 2 }}>\r\n                    <Typography variant=\"h6\" sx={{ fontWeight: 'bold', color: '#1976d2' }}>\r\n                      {sessionGroup ? sessionGroup[0]?.title || sessionGroup[0]?.type : session.title}\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mt: 1 }}>\r\n                      {sessionGroup ? sessionGroup[0]?.description : session.description}\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" sx={{ mt: 1, fontWeight: 'bold' }}>\r\n                      Coach: {sessionGroup ? sessionGroup[0]?.coach?.name || sessionGroup[0]?.coachName : session.coach?.name || session.coachName}\r\n                    </Typography>\r\n\r\n                    {/* 顯示場地和場館信息 */}\r\n                    <Typography variant=\"body2\" sx={{ mt: 1 }}>\r\n                      Venue: {sessionGroup ?\r\n                        (sessionGroup[0]?.venue?.name || sessionGroup[0]?.venueName || sessionGroup[0]?.venue || 'Not specified') :\r\n                        (session.venue?.name || session.venueName || session.venue || 'Not specified')}\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" sx={{ mt: 1 }}>\r\n                      Court: {sessionGroup ?\r\n                        (sessionGroup[0]?.court?.name || sessionGroup[0]?.courtName || sessionGroup[0]?.court || 'Not specified') :\r\n                        (session.court?.name || session.courtName || session.court || 'Not specified')}\r\n                    </Typography>\r\n\r\n                    {/* 顯示日期和時間信息 */}\r\n                    <Typography variant=\"body2\" sx={{ mt: 1 }}>\r\n                      Date: {sessionGroup ?\r\n                        (sessionGroup[0]?.startTime ? new Date(sessionGroup[0].startTime).toLocaleDateString() :\r\n                          sessionGroup[0]?.date ? sessionGroup[0].date : 'Not specified') :\r\n                        (session.startTime ? new Date(session.startTime).toLocaleDateString() :\r\n                          session.date ? session.date : 'Not specified')}\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" sx={{ mt: 1 }}>\r\n                      Time: {sessionGroup ?\r\n                        (sessionGroup[0]?.startTime && sessionGroup[0]?.endTime ?\r\n                          `${new Date(sessionGroup[0].startTime).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })} - ${new Date(sessionGroup[0].endTime).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}` :\r\n                          sessionGroup[0]?.time ? sessionGroup[0].time : 'Not specified') :\r\n                        (session.startTime && session.endTime ?\r\n                          `${new Date(session.startTime).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })} - ${new Date(session.endTime).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}` :\r\n                          session.time ? session.time : 'Not specified')}\r\n                    </Typography>\r\n                  </Box>\r\n\r\n                  {/* Class Session 設備選項 */}\r\n                  <Divider sx={{ my: 2 }} />\r\n                  <Typography variant=\"h6\" gutterBottom sx={{ fontWeight: 'bold', color: '#424242' }}>\r\n                    \uD83C\uDFD3 Equipment Options\r\n                  </Typography>\r\n\r\n                  <Grid container spacing={2}>\r\n                    <Grid item xs={12} sm={6}>\r\n                      <Box sx={{ p: 2, backgroundColor: '#f5f5f5', borderRadius: 2 }}>\r\n                        <Typography variant=\"body1\" sx={{ fontWeight: 'bold', mb: 1 }}>\r\n                          Paddles (RM{PADDLE_PRICE} each)\r\n                        </Typography>\r\n                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n                          <Button\r\n                            size=\"small\"\r\n                            variant={numPaddles > 0 ? \"contained\" : \"outlined\"}\r\n                            onClick={() => setNumPaddles(Math.max(0, numPaddles - 1))}\r\n                          >\r\n                            -\r\n                          </Button>\r\n                          <Typography sx={{ minWidth: 30, textAlign: 'center' }}>\r\n                            {numPaddles}\r\n                          </Typography>\r\n                          <Button\r\n                            size=\"small\"\r\n                            variant=\"contained\"\r\n                            onClick={() => setNumPaddles(numPaddles + 1)}\r\n                          >\r\n                            +\r\n                          </Button>\r\n                        </Box>\r\n                      </Box>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} sm={6}>\r\n                      <Box sx={{ p: 2, backgroundColor: '#f5f5f5', borderRadius: 2 }}>\r\n                        <Typography variant=\"body1\" sx={{ fontWeight: 'bold', mb: 1 }}>\r\n                          Ball Set (RM{BALL_SET_PRICE})\r\n                        </Typography>\r\n                        <FormControlLabel\r\n                          control={\r\n                            <Checkbox\r\n                              checked={buyBallSet}\r\n                              onChange={(e) => setBuyBallSet(e.target.checked)}\r\n                              color=\"primary\"\r\n                            />\r\n                          }\r\n                          label=\"Add ball set\"\r\n                        />\r\n                      </Box>\r\n                    </Grid>\r\n                  </Grid>\r\n\r\n                  {/* 設備費用摘要 */}\r\n                  {(numPaddles > 0 || buyBallSet) && (\r\n                    <Box sx={{ mt: 2, p: 2, backgroundColor: '#e3f2fd', borderRadius: 2 }}>\r\n                      <Typography variant=\"body2\" sx={{ fontWeight: 'bold', mb: 1 }}>\r\n                        Equipment Summary:\r\n                      </Typography>\r\n                      {numPaddles > 0 && (\r\n                        <Typography variant=\"body2\">\r\n                          Paddles: {numPaddles} × RM{PADDLE_PRICE} = RM{(numPaddles * PADDLE_PRICE).toFixed(2)}\r\n                        </Typography>\r\n                      )}\r\n                      {buyBallSet && (\r\n                        <Typography variant=\"body2\">\r\n                          Ball Set: RM{BALL_SET_PRICE.toFixed(2)}\r\n                        </Typography>\r\n                      )}\r\n                      <Typography variant=\"body2\" sx={{ fontWeight: 'bold', mt: 1 }}>\r\n                        Total Equipment: RM{((numPaddles * PADDLE_PRICE) + (buyBallSet ? BALL_SET_PRICE : 0)).toFixed(2)}\r\n                      </Typography>\r\n                    </Box>\r\n                  )}\r\n                </>\r\n              )}\r\n\r\n              {/* Event Details - 只在事件註冊時顯示 */}\r\n              {eventDetails && (\r\n                <>\r\n                  <Divider sx={{ my: 2 }} />\r\n                  <Typography variant=\"h6\" gutterBottom sx={{ fontWeight: 'bold', color: '#424242' }}>\r\n                    \uD83C\uDF89 Event Details\r\n                  </Typography>\r\n\r\n                  <Box sx={{ p: 2, backgroundColor: '#f5f5f5', borderRadius: 2 }}>\r\n                    <Typography variant=\"h6\" sx={{ fontWeight: 'bold', color: '#1976d2' }}>\r\n                      {eventDetails.title}\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 1 }}>\r\n                      {eventDetails.eventType}\r\n                    </Typography>\r\n\r\n                    <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\r\n                      <AccessTimeIcon sx={{ fontSize: 16, mr: 1, color: '#666' }} />\r\n                      <Typography variant=\"body2\">\r\n                        {new Date(eventDetails.startTime).toLocaleDateString()} {new Date(eventDetails.startTime).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })} - {new Date(eventDetails.endTime).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}\r\n                      </Typography>\r\n                    </Box>\r\n\r\n                    <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\r\n                      <LocationOnIcon sx={{ fontSize: 16, mr: 1, color: '#666' }} />\r\n                      <Typography variant=\"body2\">\r\n                        {eventDetails.location || eventDetails.venueLocation || 'Location TBD'}\r\n                      </Typography>\r\n                    </Box>\r\n\r\n                    <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\r\n                      <GroupIcon sx={{ fontSize: 16, mr: 1, color: '#666' }} />\r\n                      <Typography variant=\"body2\">\r\n                        Capacity: {eventDetails.currentParticipants || 0}/{eventDetails.capacity} participants\r\n                      </Typography>\r\n                    </Box>\r\n\r\n                    <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                      <LocalOfferIcon sx={{ fontSize: 16, mr: 1, color: '#666' }} />\r\n                      <Typography variant=\"body2\" sx={{ fontWeight: 'bold', color: '#1976d2' }}>\r\n                        Fee: RM{eventDetails.feeAmount || 0}\r\n                      </Typography>\r\n                    </Box>\r\n                  </Box>\r\n                </>\r\n              )}\r\n\r\n              {/* Replacement Session Info - 只在 replacement session 時顯示 */}\r\n              {replacementData && (\r\n                <>\r\n                  <Divider sx={{ my: 2 }} />\r\n                  <Typography variant=\"h6\" gutterBottom sx={{ fontWeight: 'bold', color: '#424242' }}>\r\n                    \uD83D\uDD04 Replacement Session Details\r\n                  </Typography>\r\n\r\n                  <Box sx={{ p: 2, backgroundColor: '#f5f5f5', borderRadius: 2 }}>\r\n                    <Typography variant=\"h6\" sx={{ fontWeight: 'bold', color: '#1976d2' }}>\r\n                      {replacementData.description}\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" sx={{ mt: 1, fontWeight: 'bold' }}>\r\n                      Student Count: {replacementData.studentCount}\r\n                    </Typography>\r\n                    {replacementData.studentName && (\r\n                      <Typography variant=\"body2\" sx={{ mt: 1 }}>\r\n                        Student: {replacementData.studentName}\r\n                      </Typography>\r\n                    )}\r\n                  </Box>\r\n                </>\r\n              )}\r\n            </CardContent>\r\n          </ThemedCard>\r\n        </Box>\r\n\r\n        {/* Right Column - Payment */}\r\n        <Box sx={{ flex: { xs: 'none', md: 1 } }}>\r\n          <ThemedCard sx={{ borderRadius: 3, boxShadow: 2, height: '100%' }}>\r\n            <CardContent sx={{ p: 4 }}>\r\n              <Typography variant=\"h5\" gutterBottom sx={{ fontWeight: 'bold', color: '#2e7d32', mb: 3 }}>\r\n                \uD83D\uDCB3 Payment Details\r\n              </Typography>\r\n\r\n              {/* Total Amount */}\r\n              <Paper\r\n                elevation={0}\r\n                sx={{\r\n                  background: 'linear-gradient(135deg, #e8f5e9 0%, #c8e6c9 100%)',\r\n                  p: 3,\r\n                  mb: 3,\r\n                  borderRadius: 2,\r\n                  border: '2px solid #4caf50'\r\n                }}\r\n              >\r\n                <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>\r\n                  <Typography variant=\"h6\" sx={{ fontWeight: 'bold' }}>\r\n                    Total Amount:\r\n                  </Typography>\r\n                  <Typography variant=\"h4\" sx={{ fontWeight: 'bold', color: '#2e7d32' }}>\r\n                    RM{discountedAmount.toFixed(2)}\r\n                  </Typography>\r\n                </Box>\r\n\r\n                {/* 費用明細 - 只在 class session 時顯示 */}\r\n                {(sessionGroup || session) && (\r\n                  <Box sx={{ mt: 2, pt: 2, borderTop: '1px solid #e0e0e0' }}>\r\n                    <Typography variant=\"body2\" sx={{ display: 'flex', justifyContent: 'space-between', mb: 0.5 }}>\r\n                      <span>Class Fee:</span>\r\n                      <span>RM{(sessionGroup ? sessionGroup.reduce((sum, sess) => sum + (sess.price || 0), 0) : session.price || 0).toFixed(2)}</span>\r\n                    </Typography>\r\n                    {numPaddles > 0 && (\r\n                      <Typography variant=\"body2\" sx={{ display: 'flex', justifyContent: 'space-between', mb: 0.5 }}>\r\n                        <span>Paddles ({numPaddles}):</span>\r\n                        <span>RM{(numPaddles * PADDLE_PRICE).toFixed(2)}</span>\r\n                      </Typography>\r\n                    )}\r\n                    {buyBallSet && (\r\n                      <Typography variant=\"body2\" sx={{ display: 'flex', justifyContent: 'space-between', mb: 0.5 }}>\r\n                        <span>Ball Set:</span>\r\n                        <span>RM{BALL_SET_PRICE.toFixed(2)}</span>\r\n                      </Typography>\r\n                    )}\r\n                  </Box>\r\n                )}\r\n                {useVoucher && selectedVoucherId && (\r\n                  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n                    <Typography variant=\"body2\" color=\"text.secondary\">\r\n                      Original Price:\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" color=\"text.secondary\" sx={{ textDecoration: 'line-through' }}>\r\n                      RM{(paymentData?.price || paymentData?.amount || 0).toFixed(2)}\r\n                    </Typography>\r\n                  </Box>\r\n                )}\r\n              </Paper>\r\n\r\n              {/* Payment Method Selection */}\r\n              <FormControl component=\"fieldset\" fullWidth sx={{ mb: 3 }}>\r\n                <FormLabel component=\"legend\" sx={{ mb: 2, fontWeight: 'bold', color: '#424242' }}>\r\n                  Select Payment Method\r\n                </FormLabel>\r\n                <RadioGroup\r\n                  value={paymentMethod}\r\n                  onChange={(e) => setPaymentMethod(e.target.value)}\r\n                >\r\n                  {/* Wallet Option */}\r\n                  <ThemedCard\r\n                    variant=\"outlined\"\r\n                    sx={{\r\n                      mb: 2,\r\n                      borderRadius: 2,\r\n                      border: paymentMethod === 'wallet' ? '2px solid #1976d2' : '1px solid #e0e0e0',\r\n                      backgroundColor: paymentMethod === 'wallet' ? '#f3f8ff' : 'transparent'\r\n                    }}\r\n                  >\r\n                    <FormControlLabel\r\n                      value=\"wallet\"\r\n                      control={<Radio color=\"primary\" />}\r\n                      label={\r\n                        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', width: '100%', p: 1 }}>\r\n                          <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                            <AccountBalanceWalletIcon sx={{ color: '#1976d2', mr: 1 }} />\r\n                            <Typography sx={{ fontWeight: 'bold' }}>SuperBadge Wallet</Typography>\r\n                          </Box>\r\n                          {isLoading ? (\r\n                            <CircularProgress size={20} />\r\n                          ) : error ? (\r\n                            <Typography color=\"error\">Error</Typography>\r\n                          ) : (\r\n                            <Typography fontWeight=\"bold\" color=\"#1976d2\">\r\n                              RM{walletBalance.toFixed(2)}\r\n                            </Typography>\r\n                          )}\r\n                        </Box>\r\n                      }\r\n                      sx={{ p: 2, width: '100%' }}\r\n                    />\r\n                  </ThemedCard>\r\n\r\n                  {/* Credit Card Option */}\r\n                  <ThemedCard\r\n                    variant=\"outlined\"\r\n                    sx={{\r\n                      borderRadius: 2,\r\n                      border: paymentMethod === 'card' ? '2px solid #1976d2' : '1px solid #e0e0e0',\r\n                      backgroundColor: paymentMethod === 'card' ? '#f3f8ff' : 'transparent'\r\n                    }}\r\n                  >\r\n                    <FormControlLabel\r\n                      value=\"card\"\r\n                      control={<Radio color=\"primary\" />}\r\n                      label={\r\n                        <Box sx={{ display: 'flex', alignItems: 'center', p: 1 }}>\r\n                          <CreditCardIcon sx={{ color: '#1976d2', mr: 1 }} />\r\n                          <Typography sx={{ fontWeight: 'bold' }}>Credit/Debit Card</Typography>\r\n                        </Box>\r\n                      }\r\n                      sx={{ p: 2, width: '100%' }}\r\n                    />\r\n                  </ThemedCard>\r\n                </RadioGroup>\r\n              </FormControl>\r\n\r\n                             {/* Voucher Selection - 只在 court booking 時顯示，不包括 event */}\r\n               {!replacementData && !sessionGroup && !session && !eventDetails && (\r\n                <Box sx={{ mb: 3 }}>\r\n                  <Typography variant=\"h6\" sx={{ mb: 2, fontWeight: 'bold', color: '#424242' }}>\r\n                    <LocalOfferIcon sx={{ mr: 1, color: '#ff9800' }} />\r\n                    Vouchers & Discounts\r\n                  </Typography>\r\n\r\n                  {/* Available Active Vouchers */}\r\n                  {availableVouchers.length > 0 && (\r\n                    <Box sx={{ mb: 3 }}>\r\n                      <Typography variant=\"subtitle1\" sx={{ mb: 1, fontWeight: 'bold', color: '#2e7d32' }}>\r\n                        Your Active Vouchers ({availableVouchers.length})\r\n                      </Typography>\r\n                      <MuiFormControlLabel\r\n                        control={\r\n                          <Checkbox\r\n                            checked={useVoucher}\r\n                            onChange={(e) => {\r\n                              setUseVoucher(e.target.checked);\r\n                              if (!e.target.checked) {\r\n                                setSelectedVoucherId(null);\r\n                              }\r\n                            }}\r\n                            color=\"primary\"\r\n                          />\r\n                        }\r\n                        label={\r\n                          <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                            <Typography sx={{ fontWeight: 'bold' }}>Use Active Voucher</Typography>\r\n                          </Box>\r\n                        }\r\n                      />\r\n\r\n                      {useVoucher && (\r\n                        <FormControl fullWidth sx={{ mt: 2 }}>\r\n                          <Select\r\n                            value={selectedVoucherId || ''}\r\n                            onChange={(e) => setSelectedVoucherId(e.target.value)}\r\n                            displayEmpty\r\n                            sx={{ borderRadius: 2 }}\r\n                          >\r\n                            <MenuItem value=\"\" disabled>\r\n                              Choose an active voucher...\r\n                            </MenuItem>\r\n                            {availableVouchers.map((voucher) => (\r\n                              <MenuItem key={voucher.id} value={voucher.id}>\r\n                                <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', width: '100%' }}>\r\n                                  <Box>\r\n                                    <Typography variant=\"body1\" sx={{ fontWeight: 'bold' }}>\r\n                                      {voucher.voucherTitle || `Voucher ${voucher.voucherCode}`}\r\n                                    </Typography>\r\n                                    <Typography variant=\"body2\" color=\"text.secondary\">\r\n                                      {voucher.discountType === 'percentage'\r\n                                        ? `${voucher.discountValue}% off`\r\n                                        : `RM${voucher.discountValue} off`}\r\n                                    </Typography>\r\n                                  </Box>\r\n                                  <Chip\r\n                                    label={`Expires: ${new Date(voucher.expiryDate).toLocaleDateString()}`}\r\n                                    size=\"small\"\r\n                                    color=\"warning\"\r\n                                  />\r\n                                </Box>\r\n                              </MenuItem>\r\n                            ))}\r\n                          </Select>\r\n                        </FormControl>\r\n                      )}\r\n                    </Box>\r\n                  )}\r\n\r\n                  {/* No Active Vouchers - Show Browse Button */}\r\n                  {availableVouchers.length === 0 && (\r\n                    <Box sx={{ textAlign: 'center', p: 3, backgroundColor: '#fff3e0', borderRadius: 2, border: '1px solid #ffb74d' }}>\r\n                      <LocalOfferIcon sx={{ fontSize: 48, color: '#ff9800', mb: 2 }} />\r\n                      <Typography variant=\"body1\" sx={{ mb: 1, fontWeight: 'bold' }}>\r\n                        No active vouchers\r\n                      </Typography>\r\n                      <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\r\n                        You don't have any active vouchers to use for this booking.\r\n                      </Typography>\r\n                      <Button\r\n                        variant=\"contained\"\r\n                        onClick={() => navigate('/profile/redeem-voucher')}\r\n                        sx={{\r\n                          backgroundColor: '#ff9800',\r\n                          '&:hover': {\r\n                            backgroundColor: '#f57c00'\r\n                          }\r\n                        }}\r\n                      >\r\n                        Browse & Redeem Vouchers\r\n                      </Button>\r\n                    </Box>\r\n                  )}\r\n\r\n                  {/* Always show browse button if user has active vouchers */}\r\n                  {availableVouchers.length > 0 && (\r\n                    <Box sx={{ textAlign: 'center', mt: 2 }}>\r\n                      <Button\r\n                        variant=\"outlined\"\r\n                        onClick={() => {\r\n                          console.log('Browse More Vouchers button clicked');\r\n                          console.log('Navigating to /profile/redeem-voucher');\r\n                          navigate('/profile/redeem-voucher');\r\n                        }}\r\n                        sx={{\r\n                          borderColor: '#ff9800',\r\n                          color: '#ff9800',\r\n                          '&:hover': {\r\n                            borderColor: '#f57c00',\r\n                            backgroundColor: '#fff3e0'\r\n                          }\r\n                        }}\r\n                      >\r\n                        Browse More Vouchers\r\n                      </Button>\r\n                    </Box>\r\n                  )}\r\n                </Box>\r\n              )}\r\n\r\n              {/* Class Session Notice - 只在 class session 時顯示 */}\r\n              {(sessionGroup || session) && (\r\n                <Box sx={{ mb: 3 }}>\r\n                  <Alert severity=\"info\" sx={{ mb: 2 }}>\r\n                    <Typography variant=\"body2\">\r\n                      <strong>Note:</strong> Vouchers cannot be used for class session bookings.\r\n                    </Typography>\r\n                  </Alert>\r\n                </Box>\r\n              )}\r\n\r\n                             {/* Event Registration Notice - 只在事件註冊時顯示 */}\r\n               {eventDetails && (\r\n                 <Box sx={{ mb: 3 }}>\r\n                   <Alert severity=\"info\" sx={{ mb: 2 }}>\r\n                     <Typography variant=\"body2\">\r\n                       <strong>Note:</strong> Vouchers cannot be used for event registrations.\r\n                     </Typography>\r\n                   </Alert>\r\n                 </Box>\r\n               )}\r\n\r\n               {/* Replacement Session Notice - 只在 replacement session 時顯示 */}\r\n               {replacementData && (\r\n                 <Box sx={{ mb: 3 }}>\r\n                   <Alert severity=\"info\" sx={{ mb: 2 }}>\r\n                     <Typography variant=\"body2\">\r\n                       <strong>Note:</strong> Vouchers cannot be used for replacement session payments.\r\n                     </Typography>\r\n                   </Alert>\r\n                 </Box>\r\n               )}\r\n\r\n              {/* Insufficient Balance Warning */}\r\n              {paymentMethod === 'wallet' && walletBalance < discountedAmount && !isLoading && (\r\n                <Alert severity=\"warning\" sx={{ mb: 3 }}>\r\n                  <Typography variant=\"body2\" sx={{ mb: 1 }}>\r\n                    Insufficient wallet balance. You need RM{(discountedAmount - walletBalance).toFixed(2)} more.\r\n                  </Typography>\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    size=\"small\"\r\n                    onClick={() => navigate('/wallet/topup')}\r\n                    sx={{\r\n                      backgroundColor: '#ff9800',\r\n                      '&:hover': {\r\n                        backgroundColor: '#f57c00'\r\n                      }\r\n                    }}\r\n                  >\r\n                    Top Up Wallet\r\n                  </Button>\r\n                </Alert>\r\n              )}\r\n\r\n              {/* Error Alert */}\r\n              {error && (\r\n                <Alert severity=\"error\" sx={{ mb: 3 }}>\r\n                  {error}\r\n                </Alert>\r\n              )}\r\n\r\n              {/* Action Buttons */}\r\n              <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  fullWidth\r\n                  size=\"large\"\r\n                  onClick={handlePayment}\r\n                  disabled={\r\n                    isProcessing ||\r\n                    (paymentMethod === 'wallet' && walletBalance < discountedAmount) ||\r\n                    isLoading ||\r\n                    (!replacementData && !sessionGroup && !session && !eventDetails && useVoucher && !selectedVoucherId)\r\n                  }\r\n                  sx={{\r\n                    py: 2,\r\n                    backgroundColor: '#4caf50',\r\n                    borderRadius: 2,\r\n                    fontSize: '1.1rem',\r\n                    fontWeight: 'bold',\r\n                    '&:hover': {\r\n                      backgroundColor: '#2e7d32'\r\n                    },\r\n                    '&:disabled': {\r\n                      backgroundColor: '#e0e0e0'\r\n                    }\r\n                  }}\r\n                >\r\n                  {isProcessing ? (\r\n                    <CircularProgress size={24} color=\"inherit\" />\r\n                  ) : (\r\n                    eventDetails ? `Register & Pay RM${discountedAmount.toFixed(2)}` : `Pay RM${discountedAmount.toFixed(2)}`\r\n                  )}\r\n                </Button>\r\n\r\n                <Button\r\n                  variant=\"outlined\"\r\n                  fullWidth\r\n                  size=\"large\"\r\n                  onClick={() => navigate(-1)}\r\n                  sx={{\r\n                    py: 2,\r\n                    borderRadius: 2,\r\n                    borderColor: '#757575',\r\n                    color: '#757575',\r\n                    '&:hover': {\r\n                      borderColor: '#424242',\r\n                      backgroundColor: '#f5f5f5'\r\n                    }\r\n                  }}\r\n                >\r\n                  Back to Booking\r\n                </Button>\r\n              </Box>\r\n            </CardContent>\r\n          </ThemedCard>\r\n        </Box>\r\n      </Box>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default PaymentPage;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball-frontend/src/components/court/PaymentPage.jsx b/pickleball-frontend/src/components/court/PaymentPage.jsx
--- a/pickleball-frontend/src/components/court/PaymentPage.jsx	(revision c178c1d9e80f6815b91226b2d10f391611dcb6b4)
+++ b/pickleball-frontend/src/components/court/PaymentPage.jsx	(date 1754938355618)
@@ -148,6 +148,11 @@
 
   const [discountedAmount, setDiscountedAmount] = useState(getInitialAmount());
 
+  // Scroll to top when component mounts
+  useEffect(() => {
+    window.scrollTo({ top: 0, behavior: 'smooth' });
+  }, []);
+
   useEffect(() => {
     const fetchData = async () => {
       try {
@@ -159,10 +164,15 @@
           balance = await getWalletBalance();
         } catch (getError) {
           console.warn('Wallet not found, initializing...', getError);
-          await initializeWallet();
-          balance = await getWalletBalance();
+          try {
+            await initializeWallet();
+            balance = await getWalletBalance();
+          } catch (initError) {
+            console.error('Failed to initialize wallet:', initError);
+            balance = 0; // 設置默認餘額為 0
+          }
         }
-        setWalletBalance(balance);
+        setWalletBalance(balance || 0);
 
         // Fetch available vouchers
         try {
@@ -255,7 +265,8 @@
         // Event registration payment - 事件註冊不使用 voucher
         apiEndpoint = '/event-registration/register';
         requestData = {
-          eventId: eventDetails.id
+          eventId: eventDetails.id,
+          useWallet: paymentMethod === 'wallet'
         };
       } else {
         // Regular court booking
@@ -362,7 +373,9 @@
       const errorMessage = err.response?.data?.message || 'Payment failed. Please try again.';
 
       if (errorMessage.includes('Insufficient wallet balance')) {
-        setError('Your wallet balance is too low. Please top up and try again.');
+        setError('Your wallet balance is insufficient. Please switch to credit card payment or top up your wallet.');
+        // 自動切換到信用卡支付
+        setPaymentMethod('card');
       } else {
         setError(errorMessage);
       }
@@ -985,10 +998,13 @@
                )}
 
               {/* Insufficient Balance Warning */}
-              {paymentMethod === 'wallet' && walletBalance < discountedAmount && !isLoading && (
+              {paymentMethod === 'wallet' && (walletBalance < discountedAmount || walletBalance === 0) && !isLoading && (
                 <Alert severity="warning" sx={{ mb: 3 }}>
                   <Typography variant="body2" sx={{ mb: 1 }}>
-                    Insufficient wallet balance. You need RM{(discountedAmount - walletBalance).toFixed(2)} more.
+                    {walletBalance === 0 
+                      ? 'Your wallet is empty. Please top up your wallet or switch to credit card payment.'
+                      : `Insufficient wallet balance. You need RM${(discountedAmount - walletBalance).toFixed(2)} more.`
+                    }
                   </Typography>
                   <Button
                     variant="contained"
@@ -1022,7 +1038,7 @@
                   onClick={handlePayment}
                   disabled={
                     isProcessing ||
-                    (paymentMethod === 'wallet' && walletBalance < discountedAmount) ||
+                    (paymentMethod === 'wallet' && (walletBalance < discountedAmount || walletBalance === 0)) ||
                     isLoading ||
                     (!replacementData && !sessionGroup && !session && !eventDetails && useVoucher && !selectedVoucherId)
                   }
Index: pickleball-frontend/src/components/event/FriendlyMatchPage.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useEffect, useState } from 'react';\r\nimport { \r\n  Box, \r\n  Typography, \r\n  Button, \r\n  TextField, \r\n  MenuItem, \r\n  Select, \r\n  InputLabel, \r\n  FormControl, \r\n  Card, \r\n  CardContent, \r\n  Alert, \r\n  CircularProgress, \r\n  Divider, \r\n  Grid, \r\n  Chip,\r\n  Paper,\r\n  Avatar,\r\n  IconButton,\r\n  Fade,\r\n  Slide,\r\n  Container,\r\n  CardActions,\r\n  Stack,\r\n  Badge,\r\n  Tooltip,\r\n  Tabs,\r\n  Tab,\r\n  List,\r\n  ListItem,\r\n  ListItemText\r\n} from '@mui/material';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport { \r\n  Add as AddIcon,\r\n  SportsTennis as TennisIcon,\r\n  Group as GroupIcon,\r\n  LocationOn as LocationIcon,\r\n  Schedule as ScheduleIcon,\r\n  Person as PersonIcon,\r\n  Visibility as ViewIcon,\r\n  Close as CloseIcon,\r\n  CheckCircle as CheckIcon,\r\n  AccessTime as TimeIcon,\r\n  Stadium as StadiumIcon,\r\n  Star,\r\n  Favorite,\r\n  FavoriteBorder,\r\n  Notifications,\r\n  NotificationsOff,\r\n  PersonAdd,\r\n  ExitToApp,\r\n  Info,\r\n  Delete as DeleteIcon,\r\n  Share as ShareIcon\r\n} from '@mui/icons-material';\r\nimport api from '../../service/api';\r\nimport { useAuth } from '../../context/AuthContext';\r\nimport { useTheme, useMediaQuery } from '@mui/material';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { cancelJoin } from '../../service/FriendlyMatchService';\r\nimport MessageService from '../../service/MessageService';\r\n\r\nfunction formatTime(dt) {\r\n  if (!dt) return '';\r\n  // 支援 ISO string 或 Date 物件\r\n  const d = typeof dt === 'string' ? new Date(dt) : dt;\r\n  if (isNaN(d.getTime())) return '';\r\n  return d.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\r\n}\r\n\r\nconst FriendlyMatchPage = () => {\r\n  const navigate = useNavigate();\r\n  // States\r\n  const [bookings, setBookings] = useState([]);\r\n  const [selectedBooking, setSelectedBooking] = useState('');\r\n  const [note, setNote] = useState('');\r\n  const [submitting, setSubmitting] = useState(false);\r\n  const [createSuccess, setCreateSuccess] = useState('');\r\n  const [createError, setCreateError] = useState('');\r\n\r\n  const [invitations, setInvitations] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState('');\r\n  const [joiningId, setJoiningId] = useState(null);\r\n  const [deletingId, setDeletingId] = useState(null);\r\n  const [joinSuccess, setJoinSuccess] = useState('');\r\n  const [viewOpen, setViewOpen] = useState(false);\r\n  const [viewInvite, setViewInvite] = useState(null);\r\n  const [currentPlayers, setCurrentPlayers] = useState(1);\r\n  const [matchExistsError, setMatchExistsError] = useState('');\r\n\r\n  const { currentUser, authToken } = useAuth();\r\n\r\n  const theme = useTheme();\r\n  const isMobile = useMediaQuery(theme.breakpoints.down('md'));\r\n  const [isLiked, setIsLiked] = useState(false);\r\n  \r\n  // 分享相關狀態\r\n  const [shareDialogOpen, setShareDialogOpen] = useState(false);\r\n  const [shareMessage, setShareMessage] = useState('');\r\n  const [shareRecipient, setShareRecipient] = useState('');\r\n  const [isSharing, setIsSharing] = useState(false);\r\n  const [friends, setFriends] = useState([]);\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [searchResults, setSearchResults] = useState([]);\r\n  const [isSearching, setIsSearching] = useState(false);\r\n  const [showSearchResults, setShowSearchResults] = useState(false);\r\n  const [matchToShare, setMatchToShare] = useState(null);\r\n  const [isNotified, setIsNotified] = useState(false);\r\n  const [joinStatus, setJoinStatus] = useState('not_joined');\r\n  const [showCancelModal, setShowCancelModal] = useState(false);\r\n  const [reminderSet, setReminderSet] = useState(false);\r\n  const [userProfileDialogOpen, setUserProfileDialogOpen] = useState(false);\r\n  const [selectedUserProfile, setSelectedUserProfile] = useState(null);\r\n  const [messageDialogOpen, setMessageDialogOpen] = useState(false);\r\n  const [messageContent, setMessageContent] = useState('');\r\n  const [sendingMessage, setSendingMessage] = useState(false);\r\n  const [messageError, setMessageError] = useState('');\r\n  const [messageSuccess, setMessageSuccess] = useState('');\r\n  const [cancelConfirmDialogOpen, setCancelConfirmDialogOpen] = useState(false);\r\n\r\n  const handleOpenUserProfile = async (username) => {\r\n    try {\r\n      const token = localStorage.getItem('authToken');\r\n      const res = await fetch(`http://localhost:8081/api/users/profile/${username}`, {\r\n        headers: { Authorization: `Bearer ${token}` }\r\n      });\r\n      \r\n      if (res.ok) {\r\n        const data = await res.json();\r\n        setSelectedUserProfile(data);\r\n      } else {\r\n        // 如果 API 調用失敗，顯示基本資料\r\n        setSelectedUserProfile({\r\n          username: username,\r\n          name: 'User',\r\n          email: 'Contact info not available',\r\n          phone: 'Contact info not available',\r\n          userType: 'User'\r\n        });\r\n      }\r\n      setUserProfileDialogOpen(true);\r\n    } catch (err) {\r\n      console.error('Failed to fetch user profile:', err);\r\n      // 如果 API 調用失敗，顯示基本資料\r\n      setSelectedUserProfile({\r\n        username: username,\r\n        name: 'User',\r\n        email: 'Contact info not available',\r\n        phone: 'Contact info not available',\r\n        userType: 'User'\r\n      });\r\n      setUserProfileDialogOpen(true);\r\n    }\r\n  };\r\n\r\n  const handleCloseUserProfile = () => {\r\n    setUserProfileDialogOpen(false);\r\n    setSelectedUserProfile(null);\r\n  };\r\n\r\n  const handleSendMessage = () => {\r\n    if (!authToken) {\r\n      navigate('/login');\r\n      return;\r\n    }\r\n    setMessageDialogOpen(true);\r\n    setMessageContent('');\r\n    setMessageError('');\r\n    setMessageSuccess('');\r\n  };\r\n\r\n  const handleCloseMessageDialog = () => {\r\n    setMessageDialogOpen(false);\r\n    setMessageContent('');\r\n    setMessageError('');\r\n    setMessageSuccess('');\r\n  };\r\n\r\n  const handleSubmitMessage = async () => {\r\n    if (!authToken) {\r\n      navigate('/login');\r\n      return;\r\n    }\r\n    if (!messageContent.trim()) {\r\n      setMessageError('Please enter a message');\r\n      return;\r\n    }\r\n\r\n    setSendingMessage(true);\r\n    setMessageError('');\r\n    setMessageSuccess('');\r\n\r\n    try {\r\n      await MessageService.sendMessage(selectedUserProfile.username, messageContent.trim());\r\n      setMessageSuccess('Message sent successfully!');\r\n      setMessageContent('');\r\n      \r\n      // 自動關閉對話框\r\n      setTimeout(() => {\r\n        handleCloseMessageDialog();\r\n      }, 1500);\r\n    } catch (error) {\r\n      setMessageError(error.message || 'Failed to send message');\r\n    } finally {\r\n      setSendingMessage(false);\r\n    }\r\n  };\r\n\r\n  const TeamCard = ({ team, isAway = false }) => (\r\n    <Box \r\n      display=\"flex\" \r\n      alignItems=\"center\" \r\n      gap={2} \r\n      flexDirection={isAway ? (isMobile ? 'column' : 'row-reverse') : (isMobile ? 'column' : 'row')}\r\n      textAlign={isMobile ? 'center' : (isAway ? 'right' : 'left')}\r\n    >\r\n      <Avatar \r\n        sx={{ \r\n          width: 60, \r\n          height: 60, \r\n          bgcolor: team?.color || '#1976d2', \r\n          fontSize: '2rem',\r\n          order: isAway ? 2 : 1\r\n        }}\r\n      >\r\n        {team?.logo || '\uD83C\uDFF8'}\r\n      </Avatar>\r\n      <Box sx={{ order: isAway ? 1 : 2 }}>\r\n        <Typography variant=\"h6\" fontWeight=\"bold\" color=\"white\">\r\n          {team?.name || (isAway ? 'Away Team' : 'Home Team')}\r\n        </Typography>\r\n        <Box display=\"flex\" alignItems=\"center\" gap={1} flexDirection={isAway ? 'row-reverse' : 'row'}>\r\n          <Star sx={{ color: '#ffd700', fontSize: '1rem' }} />\r\n          <Typography variant=\"body2\" color=\"rgba(255,255,255,0.8)\">\r\n            {team?.rating || 4.0} ({team?.wins || 0}W-{team?.losses || 0}L)\r\n          </Typography>\r\n        </Box>\r\n        <Typography variant=\"body2\" color=\"rgba(255,255,255,0.7)\">\r\n          {team?.players || 0} players\r\n        </Typography>\r\n      </Box>\r\n    </Box>\r\n  );\r\n\r\n  useEffect(() => {\r\n    fetchBookings();\r\n    fetchInvitations();\r\n  }, []);\r\n\r\n  const fetchBookings = async () => {\r\n    try {\r\n      const res = await api.get('/member/my-upcoming');\r\n      setBookings(res.data);\r\n    } catch (err) {\r\n      setCreateError('Failed to load your bookings');\r\n    }\r\n  };\r\n\r\n  const fetchInvitations = async () => {\r\n    setLoading(true);\r\n    setError('');\r\n    try {\r\n      // 获取所有开放的比赛（包括邀请类型和独立类型）\r\n      const res = await api.get('/friendly-matches/all');\r\n      setInvitations(res.data);\r\n    } catch (err) {\r\n      console.error('Failed to load matches:', err);\r\n      setError('Failed to load matches');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // 移除自动刷新功能，避免过多的网络请求\r\n\r\n  const handleBookingChange = (e) => {\r\n    setSelectedBooking(e.target.value);\r\n    setCurrentPlayers(1); // reset current participants when booking changes\r\n  };\r\n\r\n  const handleCreate = async (e) => {\r\n    if (!authToken) {\r\n      navigate('/login');\r\n      return;\r\n    }\r\n    e.preventDefault();\r\n    setSubmitting(true);\r\n    setCreateError('');\r\n    setCreateSuccess('');\r\n    setMatchExistsError('');\r\n    try {\r\n      const booking = bookings.find(b => b.id === Number(selectedBooking));\r\n      const capacity = booking?.numberOfPlayers;\r\n      if (!capacity || capacity <= 0) {\r\n        setCreateError('Please select a booking with valid number of players.');\r\n        setSubmitting(false);\r\n        return;\r\n      }\r\n      if (currentPlayers < 1 || currentPlayers > capacity) {\r\n        setCreateError('Current participants must be between 1 and capacity.');\r\n        setSubmitting(false);\r\n        return;\r\n      }\r\n      await api.post('/friendly-matches/invitation', {\r\n        maxPlayers: capacity,\r\n        currentPlayers,\r\n        matchRules: note,\r\n        startTime: booking?.bookingDate,\r\n        status: 'OPEN',\r\n      }, { params: { bookingId: selectedBooking } });\r\n      setCreateSuccess('Invitation created successfully!');\r\n      setSelectedBooking('');\r\n      setCurrentPlayers(1);\r\n      setNote('');\r\n      fetchInvitations();\r\n    } catch (err) {\r\n      if (err.response && err.response.data && typeof err.response.data === 'string' && err.response.data.includes('already exists')) {\r\n        setMatchExistsError('A match for this booking/time already exists. Please select another booking or time.');\r\n      } else if (err.response && (err.response.status === 409 || err.response.status === 400)) {\r\n        setMatchExistsError(err.response.data.message || 'A match for this booking/time already exists.');\r\n      } else {\r\n        setCreateError('Failed to create invitation');\r\n      }\r\n    } finally {\r\n      setSubmitting(false);\r\n    }\r\n  };\r\n\r\n  const handleJoin = async (id) => {\r\n    if (!authToken) {\r\n      navigate('/login');\r\n      return;\r\n    }\r\n    setJoiningId(id);\r\n    setJoinSuccess('');\r\n    try {\r\n      await api.post(`/friendly-matches/invitation/${id}/join`);\r\n      setJoinStatus('confirmed'); // 直接設為已加入\r\n      setJoinSuccess('Successfully joined the match!');\r\n      // 立即在前端更新 invitations，讓 UI 立即反映\r\n      setInvitations(prevInvitations => prevInvitations.map(invite => {\r\n        if (invite.id === id) {\r\n          // 檢查是否已經有 joinRequests\r\n          const alreadyJoined = invite.joinRequests && invite.joinRequests.some(req => req.status === 'APPROVED' && (\r\n            req.memberId === currentUser?.id ||\r\n            req.memberName === currentUser?.name ||\r\n            req.username === currentUser?.username\r\n          ));\r\n          if (!alreadyJoined) {\r\n            const newCurrentPlayers = (invite.currentPlayers || 0) + 1;\r\n            const isFull = newCurrentPlayers >= invite.maxPlayers;\r\n            const updatedInvite = {\r\n              ...invite,\r\n              currentPlayers: newCurrentPlayers,\r\n              status: isFull ? 'FULL' : invite.status,\r\n              joinRequests: [\r\n                ...(invite.joinRequests || []),\r\n                {\r\n                  id: 'local-' + (currentUser?.id || currentUser?.username),\r\n                  status: 'APPROVED',\r\n                  memberId: currentUser?.id,\r\n                  memberName: currentUser?.name,\r\n                  username: currentUser?.username\r\n                }\r\n              ]\r\n            };\r\n            \r\n            // 如果當前正在查看這個比賽，也要更新 viewInvite\r\n            if (viewInvite && viewInvite.id === id) {\r\n              setViewInvite(updatedInvite);\r\n            }\r\n            \r\n            return updatedInvite;\r\n          }\r\n        }\r\n        return invite;\r\n      }));\r\n      // 也可選擇 fetchInvitations(); // 但這樣會有延遲\r\n    } catch (err) {\r\n      setError('Failed to join invitation');\r\n    } finally {\r\n      setJoiningId(null);\r\n    }\r\n  };\r\n\r\n  const handleView = (invite) => {\r\n    setViewInvite(invite);\r\n    setViewOpen(true);\r\n  };\r\n\r\n  const handleCloseView = () => {\r\n    setViewOpen(false);\r\n    setViewInvite(null);\r\n  };\r\n\r\n  const getStatusColor = (status) => {\r\n    switch(status) {\r\n      case 'OPEN': return 'success';\r\n      case 'FULL': return 'warning';\r\n      case 'CLOSED': return 'error';\r\n      case 'END': return 'error';\r\n      case 'CANCELLED': return 'error';\r\n      default: return 'default';\r\n    }\r\n  };\r\n\r\n  // 計算已存在 match 的 bookingId set\r\n  const existingMatchBookingIds = new Set(invitations.map(invite => invite.bookingId).filter(Boolean));\r\n\r\n  // 刪除這段提醒彈窗的 useEffect\r\n  // useEffect(() => {\r\n  //   if (joinStatus === 'confirmed' && !reminderSet && viewInvite) {\r\n  //     const reminderTimeout = setTimeout(() => {\r\n  //       alert('Reminder: Your match is tomorrow at ' + \r\n  //         (viewInvite.startTime ? new Date(viewInvite.startTime).toLocaleTimeString() : '') + \r\n  //         ' at ' + (viewInvite.courtLocation || '') + '!');\r\n  //       setReminderSet(true);\r\n  //     }, 5000); // 測試用 5 秒，實際可設 24 小時前\r\n  //     return () => clearTimeout(reminderTimeout);\r\n  //   }\r\n  // }, [joinStatus, reminderSet, viewInvite]);\r\n\r\n  useEffect(() => {\r\n    if (viewInvite) {\r\n      console.log('currentUser', currentUser);\r\n      console.log('viewInvite.joinRequests', viewInvite.joinRequests);\r\n    }\r\n  }, [viewInvite, currentUser]);\r\n\r\n  const handlePayForMatch = () => {\r\n    console.log('handlePayForMatch called'); // Debug log\r\n    if (!viewInvite) {\r\n      console.log('No viewInvite available'); // Debug log\r\n      return;\r\n    }\r\n    \r\n    console.log('Navigating to payment page with match details:', viewInvite); // Debug log\r\n    \r\n    // 導航到付款頁面，傳遞 friendly match 的詳細資訊\r\n    navigate('/payment', {\r\n      state: {\r\n        type: 'friendly-match',\r\n        matchId: viewInvite.id,\r\n        matchDetails: {\r\n          id: viewInvite.id,\r\n          title: `Friendly Match #${viewInvite.id}`,\r\n          organizer: viewInvite.organizerUsername,\r\n          maxPlayers: viewInvite.maxPlayers,\r\n          currentPlayers: viewInvite.currentPlayers,\r\n          startTime: viewInvite.startTime,\r\n          endTime: viewInvite.endTime,\r\n          courtName: viewInvite.courtName,\r\n          venueName: viewInvite.venueName,\r\n          location: viewInvite.courtLocation,\r\n          paymentStatus: viewInvite.paymentStatus,\r\n          price: viewInvite.price,\r\n          date: viewInvite.slotDate || viewInvite.date,\r\n          duration: viewInvite.durationHours || 1\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  const handlePayForMatchFromList = (invite) => {\r\n    if (!authToken) {\r\n      navigate('/login');\r\n      return;\r\n    }\r\n    console.log('handlePayForMatchFromList called for invite:', invite.id); // Debug log\r\n    \r\n    // 導航到付款頁面，傳遞 friendly match 的詳細資訊\r\n    navigate('/payment', {\r\n      state: {\r\n        type: 'friendly-match',\r\n        matchId: invite.id,\r\n        matchDetails: {\r\n          id: invite.id,\r\n          title: `Friendly Match #${invite.id}`,\r\n          organizer: invite.organizerUsername,\r\n          maxPlayers: invite.maxPlayers,\r\n          currentPlayers: invite.currentPlayers,\r\n          startTime: invite.startTime,\r\n          endTime: invite.endTime,\r\n          courtName: invite.courtName,\r\n          venueName: invite.venueName,\r\n          location: invite.courtLocation,\r\n          paymentStatus: invite.paymentStatus,\r\n          price: invite.price,\r\n          date: invite.slotDate || invite.date,\r\n          duration: invite.durationHours || 1\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  const handleCancelPayment = async () => {\r\n    if (!viewInvite) return;\r\n    try {\r\n      await api.post(`/friendly-matches/invitation/${viewInvite.id}/cancel-payment`);\r\n      setJoinStatus('not_joined'); // 取消付款後，狀態回到未加入\r\n      setJoinSuccess('Payment cancelled successfully!');\r\n      fetchInvitations(); // 立即刷新\r\n    } catch (err) {\r\n      setError('Failed to cancel payment');\r\n    }\r\n  };\r\n\r\n  const handleDeleteMatch = async (matchId) => {\r\n    if (!authToken) {\r\n      navigate('/login');\r\n      return;\r\n    }\r\n    console.log('=== Delete button clicked ===');\r\n    console.log('Match ID:', matchId);\r\n    console.log('Current user:', currentUser);\r\n    \r\n    if (!window.confirm('Are you sure you want to delete this friendly match? This action cannot be undone.')) {\r\n      console.log('User cancelled deletion');\r\n      return;\r\n    }\r\n\r\n    console.log('User confirmed deletion');\r\n    setDeletingId(matchId);\r\n    try {\r\n      console.log('Attempting to delete match:', matchId);\r\n      const response = await api.delete(`/friendly-matches/${matchId}`);\r\n      console.log('Delete response:', response);\r\n      \r\n      if (response.status === 200) {\r\n        // 刷新数据以移除已删除的match\r\n        fetchInvitations();\r\n        setJoinSuccess('Friendly match deleted successfully');\r\n        setTimeout(() => setJoinSuccess(''), 3000);\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to delete friendly match:', error);\r\n      console.error('Error response:', error.response);\r\n      setError('Failed to delete friendly match: ' + (error.response?.data || error.message));\r\n    } finally {\r\n      setDeletingId(null);\r\n    }\r\n  };\r\n\r\n  const handleCancelJoin = () => {\r\n    setCancelConfirmDialogOpen(true);\r\n  };\r\n\r\n  const handleConfirmCancelJoin = async () => {\r\n    if (!authToken) {\r\n      navigate('/login');\r\n      return;\r\n    }\r\n    console.log('handleConfirmCancelJoin called'); // Debug log\r\n    if (!viewInvite || !currentUser) {\r\n      console.log('Missing viewInvite or currentUser:', { viewInvite, currentUser }); // Debug log\r\n      return;\r\n    }\r\n    \r\n    // 找到自己的 joinRequest\r\n    const myRequest = viewInvite.joinRequests && viewInvite.joinRequests.find(\r\n      req => req.status === 'APPROVED' && req.username === currentUser?.username\r\n    );\r\n    \r\n    console.log('Found myRequest:', myRequest); // Debug log\r\n    \r\n    if (!myRequest) {\r\n      console.log('No approved join request found'); // Debug log\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      console.log('Calling cancelJoin with:', { requestId: myRequest.id, memberId: currentUser.id }); // Debug log\r\n      await cancelJoin(myRequest.id, currentUser.id);\r\n      \r\n      setJoinStatus('not_joined');\r\n      setJoinSuccess('You have cancelled your join!');\r\n      \r\n      // 更新 invitations 和 viewInvite 狀態\r\n      setInvitations(prevInvitations => prevInvitations.map(invite => {\r\n        if (invite.id === viewInvite.id) {\r\n          const newJoinRequests = (invite.joinRequests || []).filter(r => r.id !== myRequest.id);\r\n          const newCurrentPlayers = Math.max((invite.currentPlayers || 1) - 1, 0);\r\n          return {\r\n            ...invite,\r\n            joinRequests: newJoinRequests,\r\n            currentPlayers: newCurrentPlayers,\r\n            status: (invite.status === 'FULL' && newCurrentPlayers < invite.maxPlayers) ? 'OPEN' : invite.status\r\n          };\r\n        }\r\n        return invite;\r\n      }));\r\n      \r\n      // 更新 viewInvite\r\n      setViewInvite(prev => {\r\n        if (!prev) return prev;\r\n        const newJoinRequests = (prev.joinRequests || []).filter(r => r.id !== myRequest.id);\r\n        const newCurrentPlayers = Math.max((prev.currentPlayers || 1) - 1, 0);\r\n        return {\r\n          ...prev,\r\n          joinRequests: newJoinRequests,\r\n          currentPlayers: newCurrentPlayers,\r\n          status: (prev.status === 'FULL' && newCurrentPlayers < prev.maxPlayers) ? 'OPEN' : prev.status\r\n        };\r\n      });\r\n      \r\n      console.log('Successfully cancelled join'); // Debug log\r\n      \r\n      // 關閉確認對話框\r\n      setCancelConfirmDialogOpen(false);\r\n    } catch (err) {\r\n      console.error('Error in handleConfirmCancelJoin:', err); // Debug log\r\n      setError('Failed to cancel join');\r\n    }\r\n  };\r\n\r\n  const handleCloseCancelConfirmDialog = () => {\r\n    setCancelConfirmDialogOpen(false);\r\n  };\r\n\r\n  // 獲取朋友列表\r\n  const fetchFriends = async () => {\r\n    try {\r\n      const response = await api.get('/friends/accepted');\r\n      setFriends(response.data);\r\n    } catch (error) {\r\n      console.error('Failed to fetch friends:', error);\r\n    }\r\n  };\r\n\r\n  // 搜索用戶\r\n  const searchUsers = async () => {\r\n    if (!searchQuery.trim()) {\r\n      setSearchResults([]);\r\n      setShowSearchResults(false);\r\n      return;\r\n    }\r\n\r\n    setIsSearching(true);\r\n    try {\r\n      const response = await api.get(`/users/search?query=${encodeURIComponent(searchQuery.trim())}`);\r\n      setSearchResults(response.data);\r\n      setShowSearchResults(true);\r\n    } catch (error) {\r\n      console.error('Failed to search users:', error);\r\n      setSearchResults([]);\r\n    } finally {\r\n      setIsSearching(false);\r\n    }\r\n  };\r\n\r\n  // 選擇用戶\r\n  const selectUser = (username) => {\r\n    setShareRecipient(username);\r\n    setSearchQuery(username);\r\n    setShowSearchResults(false);\r\n  };\r\n\r\n  // 生成分享消息\r\n  const generateShareMessage = (match) => {\r\n    const formatDate = (dateString) => {\r\n      if (!dateString) return '';\r\n      const options = { year: 'numeric', month: 'long', day: 'numeric' };\r\n      return new Date(dateString).toLocaleDateString(undefined, options);\r\n    };\r\n\r\n    const formatTime = (time) => {\r\n      if (!time) return '';\r\n      if (time.includes('T') || time.includes(' ')) {\r\n        const date = new Date(time);\r\n        return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\r\n      }\r\n      return new Date(`1970-01-01T${time}:00`).toLocaleTimeString([], \r\n        { hour: '2-digit', minute: '2-digit' });\r\n    };\r\n\r\n    return `\uD83C\uDFBE Join my Friendly Match!\r\n\r\n\uD83D\uDCC5 Date: ${formatDate(match.startTime)}\r\n⏰ Time: ${formatTime(match.startTime)} - ${formatTime(match.endTime)}\r\n\uD83C\uDFDF\uFE0F Court: ${match.courtName || 'Court'}\r\n\uD83D\uDCCD Location: ${match.venueName || match.location || 'Location'}\r\n\uD83D\uDC65 Players: ${match.currentPlayers}/${match.maxPlayers}\r\n\uD83D\uDCB0 Price: RM${match.price || 0}\r\n\r\nCome join us for a great game! \uD83C\uDFD3\r\nClick here to join: [Friendly Match #${match.id}]`;\r\n  };\r\n\r\n  // 處理分享\r\n  const handleShare = (match) => {\r\n    console.log('handleShare called with match:', match);\r\n    setMatchToShare(match);\r\n    setShareMessage(generateShareMessage(match));\r\n    setShareDialogOpen(true);\r\n    console.log('Share dialog should be open now');\r\n  };\r\n\r\n  // 發送分享消息\r\n  const handleSendShare = async () => {\r\n    if (!shareRecipient.trim()) {\r\n      alert('Please enter a recipient username');\r\n      return;\r\n    }\r\n\r\n    setIsSharing(true);\r\n    try {\r\n      const params = new URLSearchParams({\r\n        recipient: shareRecipient.trim(),\r\n        content: shareMessage\r\n      });\r\n      await api.post(`/messages/send?${params.toString()}`);\r\n      alert('Invitation sent successfully!');\r\n      setShareDialogOpen(false);\r\n      setShareRecipient('');\r\n      setMatchToShare(null);\r\n    } catch (error) {\r\n      console.error('Failed to send invitation:', error);\r\n      alert('Failed to send invitation: ' + (error.response?.data || error.message));\r\n    } finally {\r\n      setIsSharing(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\">\r\n      <Box sx={{ py: 4 }}>\r\n        {/* Header */}\r\n        <Paper \r\n          elevation={0}\r\n          sx={{ \r\n            background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n            color: 'white',\r\n            p: 4,\r\n            mb: 4,\r\n            borderRadius: 3\r\n          }}\r\n        >\r\n          <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\r\n            <TennisIcon sx={{ fontSize: 48, mr: 2 }} />\r\n            <Box>\r\n              <Typography variant=\"h3\" component=\"h1\" fontWeight=\"bold\">\r\n                Friendly Matches\r\n              </Typography>\r\n              <Typography variant=\"h6\" sx={{ opacity: 0.9 }}>\r\n                {authToken ? 'Create and join pickleball matches with fellow players' : 'Browse and join tennis matches with fellow players'}\r\n              </Typography>\r\n            </Box>\r\n          </Box>\r\n        </Paper>\r\n\r\n        {/* Success/Error Alerts */}\r\n        <Stack spacing={2} sx={{ mb: 3 }}>\r\n          {createError && authToken && (\r\n            <Slide direction=\"down\" in={!!createError}>\r\n              <Alert \r\n                severity=\"error\" \r\n                onClose={() => setCreateError('')}\r\n                sx={{ borderRadius: 2 }}\r\n              >\r\n                {createError}\r\n              </Alert>\r\n            </Slide>\r\n          )}\r\n          {createSuccess && (\r\n            <Slide direction=\"down\" in={!!createSuccess}>\r\n              <Alert \r\n                severity=\"success\" \r\n                onClose={() => setCreateSuccess('')}\r\n                sx={{ borderRadius: 2 }}\r\n              >\r\n                {createSuccess}\r\n              </Alert>\r\n            </Slide>\r\n          )}\r\n          {joinSuccess && (\r\n            <Slide direction=\"down\" in={!!joinSuccess}>\r\n              <Alert \r\n                severity=\"success\" \r\n                onClose={() => setJoinSuccess('')}\r\n                sx={{ borderRadius: 2 }}\r\n              >\r\n                {joinSuccess}\r\n              </Alert>\r\n            </Slide>\r\n          )}\r\n          {error && (\r\n            <Slide direction=\"down\" in={!!error}>\r\n              <Alert \r\n                severity=\"error\" \r\n                onClose={() => setError('')}\r\n                sx={{ borderRadius: 2 }}\r\n              >\r\n                {error}\r\n              </Alert>\r\n            </Slide>\r\n          )}\r\n          {/* 顯示 match exists 錯誤訊息 */}\r\n          {matchExistsError && (\r\n            <Box sx={{ mb: 2 }}>\r\n              <Alert severity=\"error\" onClose={() => setMatchExistsError('')} sx={{ borderRadius: 2 }}>\r\n                {matchExistsError}\r\n              </Alert>\r\n            </Box>\r\n          )}\r\n        </Stack>\r\n\r\n        <Grid container spacing={4}>\r\n          {/* Create New Match Button - Only show for authenticated users */}\r\n          {authToken && (\r\n            <Grid item xs={12}>\r\n              <Box sx={{ display: 'flex', justifyContent: 'center', mb: 3 }}>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  size=\"large\"\r\n                  onClick={() => navigate('/friendly-matches/create')}\r\n                  sx={{\r\n                    py: 2,\r\n                    px: 4,\r\n                    borderRadius: 3,\r\n                    background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\r\n                    fontWeight: 'bold',\r\n                    textTransform: 'none',\r\n                    fontSize: '1.1rem'\r\n                  }}\r\n                  startIcon={<AddIcon />}\r\n                >\r\n                  Create New Friendly Match (No Payment Required)\r\n                </Button>\r\n              </Box>\r\n            </Grid>\r\n          )}\r\n\r\n          {/* Create Invitation Form - Only show for authenticated users */}\r\n          {authToken && (\r\n            <Grid item xs={12} lg={4}>\r\n            <Paper \r\n              elevation={3}\r\n              sx={{ \r\n                p: 0,\r\n                borderRadius: 3,\r\n                overflow: 'hidden',\r\n                position: 'sticky',\r\n                top: 20\r\n              }}\r\n            >\r\n              <Box sx={{ \r\n                background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\r\n                p: 3,\r\n                color: 'white'\r\n              }}>\r\n                <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                  <AddIcon sx={{ mr: 1 }} />\r\n                  <Typography variant=\"h6\" fontWeight=\"bold\">\r\n                    Create New Match\r\n                  </Typography>\r\n                </Box>\r\n              </Box>\r\n              \r\n              <CardContent sx={{ p: 3 }}>\r\n                <form onSubmit={handleCreate}>\r\n                  <FormControl fullWidth required sx={{ mb: 3 }}>\r\n                    <InputLabel id=\"booking-select-label\">Select Your Booking</InputLabel>\r\n                    <Select\r\n                      labelId=\"booking-select-label\"\r\n                      value={selectedBooking}\r\n                      onChange={handleBookingChange}\r\n                      label=\"Select Your Booking\"\r\n                      sx={{ borderRadius: 2 }}\r\n                    >\r\n                      {bookings.filter(b => !existingMatchBookingIds.has(b.id)).map(b => (\r\n                        <MenuItem key={b.id} value={b.id}>\r\n                          <Box>\r\n                            <Typography variant=\"body1\" fontWeight=\"medium\">\r\n                              {b.courtName || 'Court'}\r\n                            </Typography>\r\n                            <Typography variant=\"body2\" color=\"text.secondary\">\r\n                              {b.slotDate} {b.startTime}~{b.endTime}\r\n                            </Typography>\r\n                          </Box>\r\n                        </MenuItem>\r\n                      ))}\r\n                    </Select>\r\n                  </FormControl>\r\n\r\n                  <Box sx={{ mb: 3 }}>\r\n                    <Typography variant=\"body2\" color=\"text.secondary\">\r\n                      <strong>Capacity:</strong> {(() => {\r\n                        if (!selectedBooking) return '-';\r\n                        const booking = bookings.find(b => b.id === Number(selectedBooking));\r\n                        if (booking && typeof booking.numberOfPlayers === 'number' && booking.numberOfPlayers > 0) {\r\n                          return booking.numberOfPlayers;\r\n                        }\r\n                        return '-';\r\n                      })()}\r\n                    </Typography>\r\n                  </Box>\r\n\r\n                  {/* 新增目前已參加人數輸入欄位 */}\r\n                  <Box sx={{ mb: 3 }}>\r\n                    <TextField\r\n                      fullWidth\r\n                      label=\"Current Participants\"\r\n                      type=\"number\"\r\n                      value={currentPlayers}\r\n                      onChange={e => {\r\n                        const booking = bookings.find(b => b.id === Number(selectedBooking));\r\n                        const capacity = booking?.numberOfPlayers || 1;\r\n                        const maxVal = Math.max(1, capacity - 1);\r\n                        const inputVal = Number(e.target.value);\r\n                        const val = Math.max(1, Math.min(inputVal, maxVal));\r\n                        setCurrentPlayers(val);\r\n                      }}\r\n                      required\r\n                      inputProps={{ min: 1, max: selectedBooking ? Math.max(1, (bookings.find(b => b.id === Number(selectedBooking))?.numberOfPlayers || 1) - 1) : 1 }}\r\n                      helperText={`How many participants (including yourself) are already confirmed?`}\r\n                    />\r\n                  </Box>\r\n\r\n                  <TextField\r\n                    fullWidth\r\n                    label=\"Match Rules & Notes\"\r\n                    value={note}\r\n                    onChange={e => setNote(e.target.value)}\r\n                    multiline\r\n                    rows={3}\r\n                    sx={{ mb: 3, '& .MuiOutlinedInput-root': { borderRadius: 2 } }}\r\n                    placeholder=\"e.g., Friendly doubles, all levels welcome...\"\r\n                  />\r\n\r\n                  <Button\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    size=\"large\"\r\n                    disabled={submitting || !selectedBooking || !(bookings.find(b => b.id === Number(selectedBooking))?.numberOfPlayers > 0) || !!matchExistsError}\r\n                    fullWidth\r\n                    sx={{ \r\n                      py: 1.5,\r\n                      borderRadius: 2,\r\n                      background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\r\n                      fontWeight: 'bold',\r\n                      textTransform: 'none'\r\n                    }}\r\n                  >\r\n                    {submitting ? (\r\n                      <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                        <CircularProgress size={20} color=\"inherit\" sx={{ mr: 1 }} />\r\n                        Creating...\r\n                      </Box>\r\n                    ) : (\r\n                      <>Create Match Invitation</>\r\n                    )}\r\n                  </Button>\r\n                </form>\r\n              </CardContent>\r\n            </Paper>\r\n          </Grid>\r\n          )}\r\n\r\n          {/* Invitations List */}\r\n          <Grid item xs={12} lg={authToken ? 8 : 12}>\r\n            <Box sx={{ mb: 3 }}>\r\n              <Typography variant=\"h5\" fontWeight=\"bold\" sx={{ mb: 1 }}>\r\n                Available Matches\r\n              </Typography>\r\n              <Typography variant=\"body2\" color=\"text.secondary\">\r\n                Join exciting tennis matches organized by the community\r\n              </Typography>\r\n            </Box>\r\n\r\n            {loading ? (\r\n              <Box sx={{ display: 'flex', justifyContent: 'center', py: 8 }}>\r\n                <CircularProgress size={48} />\r\n              </Box>\r\n            ) : (\r\n              <Grid container spacing={3}>\r\n                {invitations.filter(invite => invite.status === 'OPEN' || invite.status === 'FULL' || invite.status === 'REMOVED').map((invite, index) => (\r\n                  <Grid item xs={12} md={6} key={invite.id}>\r\n                    <Fade in timeout={300 + index * 100}>\r\n                      <Card \r\n                        elevation={2}\r\n                        sx={{ \r\n                          borderRadius: 3,\r\n                          transition: 'all 0.3s ease',\r\n                          bgcolor: invite.status === 'REMOVED' ? 'grey.100' : 'white',\r\n                          color: invite.status === 'REMOVED' ? 'grey.500' : 'inherit',\r\n                          '&:hover': invite.status === 'REMOVED' ? {} : {\r\n                            transform: 'translateY(-4px)',\r\n                            boxShadow: '0 8px 25px rgba(0,0,0,0.15)'\r\n                          }\r\n                        }}\r\n                      >\r\n                        <CardContent sx={{ p: 3 }}>\r\n                          {/* Header */}\r\n                          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', mb: 2 }}>\r\n                            <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                              <Avatar sx={{ \r\n                                bgcolor: invite.status === 'REMOVED' ? 'grey.400' : 'primary.main',\r\n                                width: 40,\r\n                                height: 40,\r\n                                mr: 2\r\n                              }}>\r\n                                <TennisIcon />\r\n                              </Avatar>\r\n                              <Box>\r\n                                <Typography variant=\"h6\" fontWeight=\"bold\">\r\n                                  Match #{invite.id}\r\n                                </Typography>\r\n                                <Typography variant=\"body2\" color=\"text.secondary\">\r\n                                  by {invite.organizerUsername}\r\n                                </Typography>\r\n                              </Box>\r\n                            </Box>\r\n                            <Chip \r\n                              label={invite.bookingStatus === 'CANCELLED' ? 'CANCELLED' : (invite.status === 'REMOVED' ? 'REMOVED' : invite.status)}\r\n                              color={invite.bookingStatus === 'CANCELLED' ? 'error' : (invite.status === 'REMOVED' ? 'default' : getStatusColor(invite.status))}\r\n                              size=\"small\"\r\n                              sx={{ fontWeight: 'medium', bgcolor: invite.bookingStatus === 'CANCELLED' ? 'error.light' : (invite.status === 'REMOVED' ? 'grey.300' : undefined) }}\r\n                            />\r\n                          </Box>\r\n\r\n                          {/* Details */}\r\n                          <Stack spacing={2} sx={{ mb: 3 }}>\r\n                            <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                              <ScheduleIcon sx={{ color: 'text.secondary', mr: 2, fontSize: 20 }} />\r\n                              <Typography variant=\"body2\">\r\n                                {invite.slotDate || invite.date || ''} {invite.startTime && invite.endTime\r\n                                  ? `${formatTime(invite.startTime)} ~ ${formatTime(invite.endTime)}`\r\n                                  : (invite.startTime ? formatTime(invite.startTime) : '')}\r\n                              </Typography>\r\n                            </Box>\r\n                            \r\n                            <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                              <StadiumIcon sx={{ color: 'text.secondary', mr: 2, fontSize: 20 }} />\r\n                              <Box>\r\n                                <Typography variant=\"body2\" fontWeight=\"medium\">\r\n                                  {invite.courtName || invite.court}\r\n                                </Typography>\r\n                                <Typography variant=\"body2\" color=\"text.secondary\">\r\n                                  {invite.venueName}\r\n                                </Typography>\r\n                              </Box>\r\n                            </Box>\r\n\r\n                            <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                              <LocationIcon sx={{ color: 'text.secondary', mr: 2, fontSize: 20 }} />\r\n                              <Typography variant=\"body2\">\r\n                                {invite.courtLocation}\r\n                              </Typography>\r\n                            </Box>\r\n\r\n                            <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                              <GroupIcon sx={{ color: 'text.secondary', mr: 2, fontSize: 20 }} />\r\n                              <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                                <Typography variant=\"body2\" fontWeight=\"medium\">\r\n                                  {invite.currentPlayers} / {invite.maxPlayers} players\r\n                                </Typography>\r\n                                <Box sx={{ ml: 1 }}>\r\n                                  {[...Array(invite.maxPlayers)].map((_, i) => (\r\n                                    <PersonIcon \r\n                                      key={i}\r\n                                      sx={{ \r\n                                        fontSize: 16,\r\n                                        color: i < invite.currentPlayers ? 'primary.main' : 'action.disabled'\r\n                                      }}\r\n                                    />\r\n                                  ))}\r\n                                </Box>\r\n                              </Box>\r\n                            </Box>\r\n\r\n                            {/* Price Information */}\r\n                            {invite.price && invite.price > 0 && (\r\n                              <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                                <Box sx={{ \r\n                                  width: 16, \r\n                                  height: 16, \r\n                                  borderRadius: '50%', \r\n                                  bgcolor: 'success.main',\r\n                                  mr: 2 \r\n                                }} />\r\n                                <Typography variant=\"body2\" fontWeight=\"medium\" color=\"success.main\">\r\n                                  RM{invite.price.toFixed(2)}\r\n                                </Typography>\r\n                              </Box>\r\n                            )}\r\n\r\n                            {/* Payment Status - Only show for independent friendly matches (not invitation type) */}\r\n                            {!invite.isInvitation && invite.paymentStatus === 'PENDING' && (\r\n                              <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                                <Box sx={{ \r\n                                  width: 16, \r\n                                  height: 16, \r\n                                  borderRadius: '50%', \r\n                                  bgcolor: 'warning.main',\r\n                                  mr: 2 \r\n                                }} />\r\n                                <Typography variant=\"body2\" color=\"text.secondary\">\r\n                                  Payment: PENDING\r\n                                </Typography>\r\n                              </Box>\r\n                            )}\r\n\r\n                            {/* Payment Note for PENDING status - Only for independent matches */}\r\n                            {!invite.isInvitation && invite.paymentStatus === 'PENDING' && invite.organizerUsername === currentUser?.username && (\r\n                              <Box sx={{ \r\n                                bgcolor: 'warning.light',\r\n                                p: 1.5,\r\n                                borderRadius: 2,\r\n                                border: '1px solid',\r\n                                borderColor: 'warning.main'\r\n                              }}>\r\n                                <Typography variant=\"body2\" color=\"warning.dark\" sx={{ fontSize: '0.875rem' }}>\r\n                                  \uD83D\uDCA1 Organizer will make payment when the match is full\r\n                                </Typography>\r\n                              </Box>\r\n                            )}\r\n                          </Stack>\r\n\r\n                          {invite.matchRules && (\r\n                            <Box sx={{ \r\n                              bgcolor: 'grey.50',\r\n                              p: 2,\r\n                              borderRadius: 2,\r\n                              mb: 2\r\n                            }}>\r\n                              <Typography variant=\"body2\" color=\"text.secondary\">\r\n                                <strong>Rules:</strong> {invite.matchRules}\r\n                              </Typography>\r\n                            </Box>\r\n                          )}\r\n                        </CardContent>\r\n\r\n                        <CardActions sx={{ p: 3, pt: 0 }}>\r\n                          <Stack direction=\"row\" spacing={1} sx={{ width: '100%' }}>\r\n                            {invite.status === 'REMOVED' || invite.status === 'END' ? (\r\n                              <Button\r\n                                variant=\"outlined\"\r\n                                disabled\r\n                                fullWidth\r\n                                sx={{ \r\n                                  py: 1.5,\r\n                                  borderRadius: 2,\r\n                                  textTransform: 'none',\r\n                                  color: 'grey.500',\r\n                                  borderColor: 'grey.300',\r\n                                  bgcolor: 'grey.100'\r\n                                }}\r\n                              >\r\n                                {invite.status === 'END' ? 'Match Ended' : 'Removed'}\r\n                              </Button>\r\n                            ) : (() => {\r\n                              console.log('=== Checking organizer match ===');\r\n                              console.log('Invite organizer:', invite.organizerUsername);\r\n                              console.log('Current user username:', currentUser?.username);\r\n                              console.log('Current user name:', currentUser?.name);\r\n                              console.log('Match:', invite.id);\r\n                              console.log('Match status:', invite.status);\r\n                              console.log('Match start time:', invite.startTime);\r\n                              console.log('Match end time:', invite.endTime);\r\n                              console.log('Current date:', new Date().toISOString());\r\n                              console.log('Is expired:', invite.status === 'END' || invite.status === 'CLOSED');\r\n                              return invite.organizerUsername === currentUser?.username && invite.status !== 'END';\r\n                            })() ? (\r\n                              <Stack direction=\"row\" spacing={1} sx={{ width: '100%' }}>\r\n                                {/* 檢查是否滿員且需要付款 */}\r\n                                {invite.status === 'FULL' && invite.paymentStatus === 'PENDING' ? (\r\n                                  <Button\r\n                                    onClick={() => handlePayForMatchFromList(invite)}\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    sx={{ \r\n                                      py: 1.5,\r\n                                      borderRadius: 2,\r\n                                      textTransform: 'none',\r\n                                      flex: 1,\r\n                                      background: 'linear-gradient(45deg, #2196F3 30%, #21CBF3 90%)'\r\n                                    }}\r\n                                  >\r\n                                    \uD83D\uDCB3 Make Payment\r\n                                  </Button>\r\n                                ) : (\r\n                                  <Button\r\n                                    variant=\"outlined\"\r\n                                    disabled\r\n                                    sx={{ \r\n                                      py: 1.5,\r\n                                      borderRadius: 2,\r\n                                      textTransform: 'none',\r\n                                      flex: 1\r\n                                    }}\r\n                                  >\r\n                                    You're the organizer\r\n                                  </Button>\r\n                                )}\r\n                                {/* 分享按鈕 - 只有 organizer 且不是 END 狀態才顯示 */}\r\n                                {(() => {\r\n                                  console.log('Share button debug:', {\r\n                                    inviteId: invite.id,\r\n                                    status: invite.status,\r\n                                    organizerUsername: invite.organizerUsername,\r\n                                    currentUser: currentUser?.username,\r\n                                    isOrganizer: invite.organizerUsername === currentUser?.username,\r\n                                    shouldShow: invite.organizerUsername === currentUser?.username && invite.status !== 'END'\r\n                                  });\r\n                                  return invite.organizerUsername === currentUser?.username && invite.status !== 'END';\r\n                                })() && (\r\n                                  <Tooltip title=\"Share with friends\">\r\n                                    <Button\r\n                                      onClick={() => {\r\n                                        console.log('Share button clicked for match:', invite.id);\r\n                                        handleShare(invite);\r\n                                      }}\r\n                                      variant=\"contained\"\r\n                                      size=\"small\"\r\n                                      sx={{\r\n                                        backgroundColor: '#2196f3',\r\n                                        color: 'white',\r\n                                        minWidth: 'auto',\r\n                                        px: 2,\r\n                                        py: 1.5,\r\n                                        borderRadius: 2,\r\n                                        '&:hover': {\r\n                                          backgroundColor: '#1976d2'\r\n                                        }\r\n                                      }}\r\n                                    >\r\n                                      Share\r\n                                    </Button>\r\n                                  </Tooltip>\r\n                                )}\r\n                                <Button\r\n                                  onClick={() => handleDeleteMatch(invite.id)}\r\n                                  disabled={deletingId === invite.id}\r\n                                  variant=\"outlined\"\r\n                                  color=\"error\"\r\n                                  sx={{ \r\n                                    py: 1.5,\r\n                                    borderRadius: 2,\r\n                                    textTransform: 'none',\r\n                                    minWidth: 'auto',\r\n                                    px: 2\r\n                                  }}\r\n                                >\r\n                                  {deletingId === invite.id ? (\r\n                                    <CircularProgress size={16} color=\"error\" />\r\n                                  ) : (\r\n                                    <DeleteIcon />\r\n                                  )}\r\n                                </Button>\r\n                              </Stack>\r\n                            ) : (\r\n                              <Button\r\n                                onClick={() => handleJoin(invite.id)}\r\n                                disabled={(() => {\r\n                                  const hasJoined = invite.joinRequests && invite.joinRequests.some(\r\n                                    req => req.status === 'APPROVED' &&\r\n                                      req.memberName && req.memberName.toLowerCase() === ((currentUser?.name || currentUser?.username || '')).toLowerCase()\r\n                                  );\r\n                                  return joiningId === invite.id || \r\n                                         invite.currentPlayers >= invite.maxPlayers || \r\n                                         invite.bookingStatus === 'CANCELLED' || \r\n                                         invite.status === 'END' || \r\n                                         invite.status === 'CLOSED' ||\r\n                                         hasJoined;\r\n                                })()}\r\n                                variant=\"contained\"\r\n                                fullWidth\r\n                                sx={{ \r\n                                  py: 1.5,\r\n                                  borderRadius: 2,\r\n                                  background: (() => {\r\n                                    const hasJoined = invite.joinRequests && invite.joinRequests.some(\r\n                                      req => req.status === 'APPROVED' &&\r\n                                        req.memberName && req.memberName.toLowerCase() === ((currentUser?.name || currentUser?.username || '')).toLowerCase()\r\n                                    );\r\n                                    if (hasJoined) {\r\n                                      return 'linear-gradient(45deg, #4CAF50 30%, #66BB6A 90%)';\r\n                                    }\r\n                                    return (invite.bookingStatus === 'CANCELLED' || invite.status === 'END' || invite.status === 'CLOSED') ? 'grey.400' : 'linear-gradient(45deg, #2196F3 30%, #21CBF3 90%)';\r\n                                  })(),\r\n                                  fontWeight: 'medium',\r\n                                  textTransform: 'none'\r\n                                }}\r\n                              >\r\n                                {(() => {\r\n                                  const hasJoined = invite.joinRequests && invite.joinRequests.some(\r\n                                    req => req.status === 'APPROVED' &&\r\n                                      req.memberName && req.memberName.toLowerCase() === ((currentUser?.name || currentUser?.username || '')).toLowerCase()\r\n                                  );\r\n                                  if (hasJoined) {\r\n                                    return (\r\n                                      <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                                        <CheckIcon />\r\n                                        Already Joined\r\n                                      </Box>\r\n                                    );\r\n                                  }\r\n                                  return (\r\n                                    invite.bookingStatus === 'CANCELLED' ? (\r\n                                      'Booking Cancelled'\r\n                                    ) : invite.status === 'END' || invite.status === 'CLOSED' ? (\r\n                                      'Match Ended'\r\n                                    ) : joiningId === invite.id ? (\r\n                                      <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                                        <CircularProgress size={16} color=\"inherit\" sx={{ mr: 1 }} />\r\n                                        Joining...\r\n                                      </Box>\r\n                                    ) : invite.currentPlayers >= invite.maxPlayers ? (\r\n                                      'Match Full'\r\n                                    ) : (\r\n                                      'Join Match'\r\n                                    )\r\n                                  );\r\n                                })()}\r\n                              </Button>\r\n                            )}\r\n                            \r\n                            <Tooltip title=\"View Details\">\r\n                              <IconButton \r\n                                onClick={() => handleView(invite)}\r\n                                sx={{ \r\n                                  border: 1,\r\n                                  borderColor: 'divider',\r\n                                  borderRadius: 2\r\n                                }}\r\n                              >\r\n                                <ViewIcon />\r\n                              </IconButton>\r\n                            </Tooltip>\r\n                          </Stack>\r\n                        </CardActions>\r\n                      </Card>\r\n                    </Fade>\r\n                  </Grid>\r\n                ))}\r\n              </Grid>\r\n            )}\r\n\r\n            {!loading && invitations.length === 0 && (\r\n              <Paper \r\n                elevation={0}\r\n                sx={{ \r\n                  p: 8,\r\n                  textAlign: 'center',\r\n                  bgcolor: 'grey.50',\r\n                  borderRadius: 3\r\n                }}\r\n              >\r\n                <TennisIcon sx={{ fontSize: 64, color: 'grey.400', mb: 2 }} />\r\n                <Typography variant=\"h6\" color=\"text.secondary\" sx={{ mb: 1 }}>\r\n                  No matches available\r\n                </Typography>\r\n                <Typography variant=\"body2\" color=\"text.secondary\">\r\n                  {authToken ? 'Be the first to create a friendly match!' : 'No matches are currently available. Please check back later!'}\r\n                </Typography>\r\n              </Paper>\r\n            )}\r\n          </Grid>\r\n        </Grid>\r\n      </Box>\r\n\r\n        {/* View Match Dialog */}\r\n        <Dialog \r\n          open={viewOpen} \r\n          onClose={handleCloseView} \r\n          maxWidth=\"sm\" \r\n          fullWidth\r\n          PaperProps={{\r\n            sx: { borderRadius: 3 }\r\n          }}\r\n        >\r\n          <DialogTitle sx={{ \r\n            pb: 1,\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'space-between'\r\n          }}>\r\n            <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n              <TennisIcon sx={{ mr: 2, color: 'primary.main' }} />\r\n              <Typography variant=\"h6\" fontWeight=\"bold\">\r\n                Match Details\r\n              </Typography>\r\n            </Box>\r\n            <IconButton onClick={handleCloseView} size=\"small\">\r\n              <CloseIcon />\r\n            </IconButton>\r\n          </DialogTitle>\r\n          \r\n          <DialogContent dividers sx={{ p: 3 }}>\r\n            {viewInvite && (\r\n              <Stack spacing={3}>\r\n                <Box>\r\n                  <Typography variant=\"h6\" fontWeight=\"bold\" sx={{ mb: 2 }}>\r\n                    Match #{viewInvite.id}\r\n                  </Typography>\r\n                  \r\n                  <Grid container spacing={2}>\r\n                    <Grid item xs={6}>\r\n                      <Typography variant=\"body2\" color=\"text.secondary\">\r\n                        Organizer\r\n                      </Typography>\r\n                      <Typography variant=\"body1\" fontWeight=\"medium\">\r\n                        {viewInvite.organizerUsername}\r\n                      </Typography>\r\n                    </Grid>\r\n                    \r\n                    <Grid item xs={6}>\r\n                      <Typography variant=\"body2\" color=\"text.secondary\">\r\n                        Status\r\n                      </Typography>\r\n                      <Chip \r\n                        label={viewInvite.bookingStatus === 'CANCELLED' ? 'CANCELLED' : viewInvite.status} \r\n                        color={viewInvite.bookingStatus === 'CANCELLED' ? 'error' : getStatusColor(viewInvite.status)}\r\n                        size=\"small\"\r\n                      />\r\n                    </Grid>\r\n                    \r\n                    <Grid item xs={12}>\r\n                      <Typography variant=\"body2\" color=\"text.secondary\">\r\n                        When & Where\r\n                      </Typography>\r\n                      <Typography variant=\"body1\" fontWeight=\"medium\">\r\n                        {viewInvite.slotDate || viewInvite.date || ''} {viewInvite.startTime && viewInvite.endTime\r\n                          ? `${formatTime(viewInvite.startTime)} ~ ${formatTime(viewInvite.endTime)}`\r\n                          : (viewInvite.startTime ? formatTime(viewInvite.startTime) : '')}\r\n                      </Typography>\r\n                      <Typography variant=\"body2\">\r\n                        {viewInvite.courtName} at {viewInvite.venueName}\r\n                      </Typography>\r\n                      <Typography variant=\"body2\" color=\"text.secondary\">\r\n                        {viewInvite.courtLocation}\r\n                      </Typography>\r\n                    </Grid>\r\n                    \r\n                    <Grid item xs={6}>\r\n                      <Typography variant=\"body2\" color=\"text.secondary\">\r\n                        Players\r\n                      </Typography>\r\n                      <Typography variant=\"body1\" fontWeight=\"medium\">\r\n                        {viewInvite.currentPlayers} / {viewInvite.maxPlayers}\r\n                      </Typography>\r\n                    </Grid>\r\n                    \r\n                    {viewInvite.price && viewInvite.price > 0 && (\r\n                      <Grid item xs={6}>\r\n                        <Typography variant=\"body2\" color=\"text.secondary\">\r\n                          Price\r\n                        </Typography>\r\n                        <Typography variant=\"body1\" fontWeight=\"medium\" color=\"success.main\">\r\n                          RM{viewInvite.price.toFixed(2)}\r\n                        </Typography>\r\n                      </Grid>\r\n                    )}\r\n                  </Grid>\r\n                </Box>\r\n\r\n                {viewInvite.matchRules && (\r\n                  <Box>\r\n                    <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 1 }}>\r\n                      Match Rules\r\n                    </Typography>\r\n                    <Paper elevation={0} sx={{ p: 2, bgcolor: 'grey.50', borderRadius: 2 }}>\r\n                      <Typography variant=\"body2\">\r\n                        {viewInvite.matchRules}\r\n                      </Typography>\r\n                    </Paper>\r\n                  </Box>\r\n                )}\r\n\r\n                {viewInvite.note && (\r\n                  <Box>\r\n                    <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 1 }}>\r\n                      Additional Notes\r\n                    </Typography>\r\n                    <Paper elevation={0} sx={{ p: 2, bgcolor: 'grey.50', borderRadius: 2 }}>\r\n                      <Typography variant=\"body2\">\r\n                        {viewInvite.note}\r\n                      </Typography>\r\n                    </Paper>\r\n                  </Box>\r\n                )}\r\n\r\n                {viewInvite.joinRequests && viewInvite.joinRequests.length > 0 && (\r\n                  <Box>\r\n                    <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\r\n                      Join Members\r\n                    </Typography>\r\n                    <Stack spacing={1}>\r\n                      {viewInvite.joinRequests\r\n                        .filter(req => req.status === 'APPROVED')\r\n                        .map(req => (\r\n                          <Box \r\n                            key={req.id}\r\n                            sx={{ \r\n                              display: 'flex', \r\n                              alignItems: 'center',\r\n                              p: 2,\r\n                              border: 1,\r\n                              borderColor: 'divider',\r\n                              borderRadius: 2\r\n                            }}\r\n                          >\r\n                            <Typography \r\n                              variant=\"body2\" \r\n                              fontWeight=\"medium\"\r\n                              sx={{ color: 'primary.main', cursor: 'pointer', textDecoration: 'underline' }}\r\n                              onClick={() => handleOpenUserProfile(req.username)}\r\n                            >\r\n                              {req.username}\r\n                            </Typography>\r\n                          </Box>\r\n                        ))}\r\n                    </Stack>\r\n                  </Box>\r\n                )}\r\n\r\n                {/* 如果沒有 joinRequests 或為空，顯示提示 */}\r\n                {(!viewInvite.joinRequests || viewInvite.joinRequests.length === 0) && (\r\n                  <Box>\r\n                    <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\r\n                      Join Members\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" color=\"text.secondary\" sx={{ fontStyle: 'italic' }}>\r\n                      No members have joined yet.\r\n                    </Typography>\r\n                  </Box>\r\n                )}\r\n                {joinStatus === 'confirmed' && (\r\n                  <Alert severity=\"success\" sx={{ mb: 3 }} icon={<Info />}>You have successfully joined this match!</Alert>\r\n                )}\r\n                <Stack direction=\"row\" spacing={2} sx={{ mb: 3 }}>\r\n                  {(() => {\r\n                    // 強化判斷：memberId 轉字串比對，並 fallback 比對 name/username\r\n                    const hasJoined = viewInvite && viewInvite.joinRequests && viewInvite.joinRequests.some(\r\n                      req => req.status === 'APPROVED' && req.username && req.username === currentUser?.username\r\n                    );\r\n                    const isFull = viewInvite.currentPlayers >= viewInvite.maxPlayers;\r\n                    const isOrganizer = viewInvite.organizerUsername === currentUser?.username;\r\n                    const isCancelled = viewInvite.bookingStatus === 'CANCELLED';\r\n                    const isEnded = viewInvite.status === 'END' || viewInvite.status === 'CLOSED';\r\n                    \r\n                    if (hasJoined) {\r\n                      // 檢查是否為 organizer\r\n                      const isOrganizer = viewInvite.organizerUsername === currentUser?.username;\r\n                      \r\n                      if (isOrganizer) {\r\n                        // Organizer 只顯示 \"Already Joined\" 按鈕，沒有 Cancel Join\r\n                        return (\r\n                          <Button\r\n                            startIcon={<CheckIcon />}\r\n                            size=\"large\"\r\n                            fullWidth\r\n                            color=\"success\"\r\n                            variant=\"contained\"\r\n                            disabled\r\n                            sx={{\r\n                              background: 'linear-gradient(45deg, #4CAF50 30%, #66BB6A 90%)',\r\n                              fontWeight: 'medium'\r\n                            }}\r\n                          >\r\n                            Already Joined\r\n                          </Button>\r\n                        );\r\n                      } else {\r\n                        // 一般參與者顯示兩個按鈕\r\n                        return (\r\n                          <Stack direction=\"row\" spacing={2} sx={{ width: '100%' }}>\r\n                            <Button\r\n                              startIcon={<CheckIcon />}\r\n                              size=\"large\"\r\n                              fullWidth\r\n                              color=\"success\"\r\n                              variant=\"contained\"\r\n                              disabled\r\n                              sx={{\r\n                                background: 'linear-gradient(45deg, #4CAF50 30%, #66BB6A 90%)',\r\n                                fontWeight: 'medium'\r\n                              }}\r\n                            >\r\n                              Already Joined\r\n                            </Button>\r\n                            <Button\r\n                              startIcon={<ExitToApp />}\r\n                              size=\"large\"\r\n                              color=\"error\"\r\n                              variant=\"outlined\"\r\n                              onClick={handleCancelJoin}\r\n                              sx={{ fontWeight: 'medium', minWidth: 150 }}\r\n                            >\r\n                              Cancel Join\r\n                            </Button>\r\n                          </Stack>\r\n                        );\r\n                      }\r\n                    }\r\n                    if (isFull && !hasJoined) {\r\n                      return (\r\n                        <Button\r\n                          startIcon={<PersonAdd />}\r\n                          size=\"large\"\r\n                          fullWidth\r\n                          color=\"warning\"\r\n                          variant=\"contained\"\r\n                          disabled\r\n                          sx={{\r\n                            background: 'linear-gradient(45deg, #FF9800 30%, #FFB74D 90%)',\r\n                            fontWeight: 'medium'\r\n                          }}\r\n                        >\r\n                          Match Full\r\n                        </Button>\r\n                      );\r\n                    }\r\n                    // 檢查是否為 organizer 且比賽滿員需要付款\r\n                    if (isOrganizer && isFull && viewInvite.paymentStatus === 'PENDING') {\r\n                      return (\r\n                        <Button\r\n                          startIcon={<PersonAdd />}\r\n                          size=\"large\"\r\n                          fullWidth\r\n                          color=\"primary\"\r\n                          variant=\"contained\"\r\n                          onClick={handlePayForMatch}\r\n                          sx={{\r\n                            background: 'linear-gradient(45deg, #2196F3 30%, #21CBF3 90%)',\r\n                            fontWeight: 'medium'\r\n                          }}\r\n                        >\r\n                          \uD83D\uDCB3 Make Payment\r\n                        </Button>\r\n                      );\r\n                    }\r\n                    \r\n                    return (\r\n                      <Button\r\n                        startIcon={<PersonAdd />}\r\n                        size=\"large\"\r\n                        fullWidth\r\n                        color={isCancelled ? 'error' : (isOrganizer ? 'info' : 'primary')}\r\n                        variant=\"contained\"\r\n                        onClick={isCancelled || isEnded || isOrganizer ? undefined : () => handleJoin(viewInvite.id)}\r\n                        disabled={isCancelled || isEnded || isOrganizer || joiningId === viewInvite.id}\r\n                        sx={{\r\n                          background: isCancelled || isEnded ? 'grey.400' : 'linear-gradient(45deg, #2196F3 30%, #21CBF3 90%)',\r\n                          fontWeight: 'medium'\r\n                        }}\r\n                      >\r\n                        {isCancelled\r\n                          ? 'Booking Cancelled'\r\n                          : isEnded\r\n                            ? 'Match Ended'\r\n                            : isOrganizer\r\n                              ? \"You're the organizer\"\r\n                              : joiningId === viewInvite.id ? (\r\n                                <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                                  <CircularProgress size={16} color=\"inherit\" sx={{ mr: 1 }} />\r\n                                  Joining...\r\n                                </Box>\r\n                              ) : (\r\n                                'Join Match'\r\n                              )}\r\n                      </Button>\r\n                    );\r\n                  })()}\r\n                </Stack>\r\n              </Stack>\r\n            )}\r\n          </DialogContent>\r\n        </Dialog>\r\n\r\n        {/* User Profile Dialog */}\r\n        <Dialog open={userProfileDialogOpen} onClose={handleCloseUserProfile} maxWidth=\"xs\" fullWidth>\r\n          <DialogTitle>User Profile</DialogTitle>\r\n          <DialogContent>\r\n            {selectedUserProfile ? (\r\n              <Box sx={{ p: 2 }}>\r\n                <Typography variant=\"subtitle1\" fontWeight=\"bold\">Username: {selectedUserProfile.username}</Typography>\r\n                <Typography variant=\"body2\">Name: {selectedUserProfile.name || '-'}</Typography>\r\n                <Typography variant=\"body2\">Email: {selectedUserProfile.email || '-'}</Typography>\r\n                <Typography variant=\"body2\">Phone: {selectedUserProfile.phone || '-'}</Typography>\r\n                \r\n                {/* Send Message Button - 只有當不是自己的資料時才顯示 */}\r\n                {selectedUserProfile.username !== currentUser?.username && (\r\n                  <Box sx={{ mt: 3, display: 'flex', justifyContent: 'center' }}>\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      onClick={handleSendMessage}\r\n                      sx={{ minWidth: 150 }}\r\n                    >\r\n                      Send Message\r\n                    </Button>\r\n                  </Box>\r\n                )}\r\n              </Box>\r\n            ) : (\r\n              <Typography>Loading...</Typography>\r\n            )}\r\n          </DialogContent>\r\n        </Dialog>\r\n\r\n        {/* Message Dialog */}\r\n        <Dialog open={messageDialogOpen} onClose={handleCloseMessageDialog} maxWidth=\"sm\" fullWidth>\r\n          <DialogTitle>\r\n            Send Message to {selectedUserProfile?.username}\r\n          </DialogTitle>\r\n          <DialogContent>\r\n            <Box sx={{ p: 2 }}>\r\n              {messageError && (\r\n                <Alert severity=\"error\" sx={{ mb: 2 }}>\r\n                  {messageError}\r\n                </Alert>\r\n              )}\r\n              {messageSuccess && (\r\n                <Alert severity=\"success\" sx={{ mb: 2 }}>\r\n                  {messageSuccess}\r\n                </Alert>\r\n              )}\r\n              <TextField\r\n                fullWidth\r\n                multiline\r\n                rows={4}\r\n                variant=\"outlined\"\r\n                label=\"Message\"\r\n                value={messageContent}\r\n                onChange={(e) => setMessageContent(e.target.value)}\r\n                placeholder=\"Type your message here...\"\r\n                sx={{ mb: 2 }}\r\n              />\r\n            </Box>\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={handleCloseMessageDialog} disabled={sendingMessage}>\r\n              Cancel\r\n            </Button>\r\n            <Button \r\n              onClick={handleSubmitMessage} \r\n              variant=\"contained\" \r\n              disabled={sendingMessage || !messageContent.trim()}\r\n            >\r\n              {sendingMessage ? <CircularProgress size={20} /> : 'Send'}\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n\r\n        {/* Share Dialog */}\r\n        <Dialog open={shareDialogOpen} onClose={() => setShareDialogOpen(false)} maxWidth=\"sm\" fullWidth>\r\n          <DialogTitle>\r\n            Share Friendly Match\r\n          </DialogTitle>\r\n          <DialogContent>\r\n            <Box sx={{ mb: 3 }}>\r\n              <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\r\n                Select Friend or Search User:\r\n              </Typography>\r\n              \r\n              {/* 朋友列表下拉框 */}\r\n              <FormControl fullWidth size=\"small\" sx={{ mb: 2 }}>\r\n                <InputLabel>Select from Friends</InputLabel>\r\n                <Select\r\n                  value=\"\"\r\n                  onChange={(e) => selectUser(e.target.value)}\r\n                  label=\"Select from Friends\"\r\n                  onClick={fetchFriends}\r\n                >\r\n                  {friends.map((friend) => (\r\n                    <MenuItem key={friend.id} value={friend.username}>\r\n                      {friend.username} {friend.name && `(${friend.name})`}\r\n                    </MenuItem>\r\n                  ))}\r\n                  {friends.length === 0 && (\r\n                    <MenuItem disabled>No friends found</MenuItem>\r\n                  )}\r\n                </Select>\r\n              </FormControl>\r\n\r\n              {/* 搜索用戶 */}\r\n              <Box sx={{ display: 'flex', gap: 1, mb: 2 }}>\r\n                <TextField\r\n                  fullWidth\r\n                  value={searchQuery}\r\n                  onChange={(e) => setSearchQuery(e.target.value)}\r\n                  placeholder=\"Search by username\"\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                  onKeyPress={(e) => e.key === 'Enter' && searchUsers()}\r\n                />\r\n                <Button\r\n                  variant=\"contained\"\r\n                  onClick={searchUsers}\r\n                  disabled={isSearching || !searchQuery.trim()}\r\n                  sx={{ minWidth: '80px' }}\r\n                >\r\n                  {isSearching ? '...' : 'Search'}\r\n                </Button>\r\n              </Box>\r\n\r\n              {/* 搜索結果 */}\r\n              {showSearchResults && (\r\n                <Box sx={{ mb: 2, maxHeight: 150, overflow: 'auto', border: '1px solid #e0e0e0', borderRadius: 1 }}>\r\n                  {searchResults.map((user) => (\r\n                    <Box\r\n                      key={user.id}\r\n                      onClick={() => selectUser(user.username)}\r\n                      sx={{\r\n                        p: 1,\r\n                        cursor: 'pointer',\r\n                        '&:hover': { backgroundColor: '#f5f5f5' },\r\n                        borderBottom: '1px solid #f0f0f0'\r\n                      }}\r\n                    >\r\n                      <Typography variant=\"body2\" fontWeight=\"medium\">\r\n                        {user.username}\r\n                      </Typography>\r\n                      {user.name && (\r\n                        <Typography variant=\"body2\" color=\"text.secondary\">\r\n                          {user.name}\r\n                        </Typography>\r\n                      )}\r\n                    </Box>\r\n                  ))}\r\n                  {searchResults.length === 0 && (\r\n                    <Box sx={{ p: 1, textAlign: 'center' }}>\r\n                      <Typography variant=\"body2\" color=\"text.secondary\">\r\n                        No users found\r\n                      </Typography>\r\n                    </Box>\r\n                  )}\r\n                </Box>\r\n              )}\r\n\r\n              {/* 選中的用戶 */}\r\n              {shareRecipient && (\r\n                <Box sx={{ mb: 2, p: 1, backgroundColor: '#e3f2fd', borderRadius: 1 }}>\r\n                  <Typography variant=\"body2\" color=\"text.secondary\">\r\n                    Selected: <strong>{shareRecipient}</strong>\r\n                  </Typography>\r\n                </Box>\r\n              )}\r\n            </Box>\r\n            \r\n            <Box>\r\n              <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\r\n                Message Preview:\r\n              </Typography>\r\n              <TextField\r\n                fullWidth\r\n                multiline\r\n                rows={8}\r\n                value={shareMessage}\r\n                onChange={(e) => setShareMessage(e.target.value)}\r\n                variant=\"outlined\"\r\n                sx={{\r\n                  '& .MuiOutlinedInput-root': {\r\n                    backgroundColor: '#f5f5f5'\r\n                  }\r\n                }}\r\n              />\r\n            </Box>\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={() => setShareDialogOpen(false)}>\r\n              Cancel\r\n            </Button>\r\n            <Button \r\n              onClick={handleSendShare}\r\n              variant=\"contained\"\r\n              disabled={isSharing || !shareRecipient.trim()}\r\n              sx={{\r\n                backgroundColor: '#2196f3',\r\n                '&:hover': {\r\n                  backgroundColor: '#1976d2'\r\n                }\r\n              }}\r\n            >\r\n              {isSharing ? 'Sending...' : 'Send Invitation'}\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n\r\n        {/* Cancel Join Confirmation Dialog */}\r\n        <Dialog open={cancelConfirmDialogOpen} onClose={handleCloseCancelConfirmDialog} maxWidth=\"sm\" fullWidth>\r\n          <DialogTitle>\r\n            Confirm Cancel Join\r\n          </DialogTitle>\r\n          <DialogContent>\r\n            <Box sx={{ p: 2 }}>\r\n              <Typography variant=\"body1\" sx={{ mb: 2 }}>\r\n                Are you sure you want to cancel your join for this match?\r\n              </Typography>\r\n              <Typography variant=\"body2\" color=\"text.secondary\">\r\n                This action cannot be undone. You will be removed from the match.\r\n              </Typography>\r\n            </Box>\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={handleCloseCancelConfirmDialog}>\r\n              Keep Joined\r\n            </Button>\r\n            <Button \r\n              onClick={() => {\r\n                console.log('Button clicked!'); // Debug log\r\n                handleConfirmCancelJoin();\r\n              }} \r\n              variant=\"contained\" \r\n              color=\"error\"\r\n            >\r\n              Yes, Cancel Join\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n      \r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default FriendlyMatchPage;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball-frontend/src/components/event/FriendlyMatchPage.jsx b/pickleball-frontend/src/components/event/FriendlyMatchPage.jsx
--- a/pickleball-frontend/src/components/event/FriendlyMatchPage.jsx	(revision c178c1d9e80f6815b91226b2d10f391611dcb6b4)
+++ b/pickleball-frontend/src/components/event/FriendlyMatchPage.jsx	(date 1754898551023)
@@ -62,7 +62,7 @@
 import { useAuth } from '../../context/AuthContext';
 import { useTheme, useMediaQuery } from '@mui/material';
 import { useNavigate } from 'react-router-dom';
-import { cancelJoin } from '../../service/FriendlyMatchService';
+import FriendlyMatchService from '../../service/FriendlyMatchService';
 import MessageService from '../../service/MessageService';
 
 function formatTime(dt) {
@@ -576,7 +576,7 @@
     
     try {
       console.log('Calling cancelJoin with:', { requestId: myRequest.id, memberId: currentUser.id }); // Debug log
-      await cancelJoin(myRequest.id, currentUser.id);
+      await FriendlyMatchService.cancelJoin(myRequest.id, currentUser.id);
       
       setJoinStatus('not_joined');
       setJoinSuccess('You have cancelled your join!');
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/ClassRegistration.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.entity;\r\n\r\nimport jakarta.persistence.*;\r\nimport lombok.AllArgsConstructor;\r\nimport lombok.Data;\r\nimport lombok.NoArgsConstructor;\r\nimport java.time.LocalDateTime;\r\nimport com.fasterxml.jackson.annotation.JsonIgnore;\r\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\r\n\r\n\r\n@Entity\r\n@Data\r\n@NoArgsConstructor\r\n@AllArgsConstructor\r\n@Table(name = \"class_registration\")\r\npublic class ClassRegistration {\r\n\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Integer id;\r\n\r\n    @ManyToOne\r\n    @JoinColumn(name = \"session_id\")\r\n    @JsonIgnore\r\n    private ClassSession classSession;\r\n\r\n    @ManyToOne\r\n    @JoinColumn(name = \"member_id\")\r\n    @JsonIgnoreProperties({\"registrations\", \"vouchers\", \"wallet\", \"organizedMatches\", \"joinRequests\"})\r\n    private Member member;\r\n\r\n    @Column(name = \"registration_date\")\r\n    private LocalDateTime registrationDate;\r\n\r\n    @Column(name = \"attendance_status\")\r\n    private String attendanceStatus; // \"PRESENT\", \"ABSENT\", \"LATE\", \"MAKEUP\"\r\n\r\n    @Column(name = \"group_booking_id\")\r\n    private String groupBookingId; // UUID字串\r\n\r\n    @OneToOne(cascade = CascadeType.ALL)\r\n    @JoinColumn(name = \"payment_id\")\r\n    private Payment payment;\r\n\r\n    @Column(name = \"coach_comment\", columnDefinition = \"TEXT\")\r\n    private String coachComment;\r\n\r\n    @Column(name = \"rating\")\r\n    private Integer rating; // 1-5 rating from coach\r\n\r\n    // Getters and Setters...\r\n    public Integer getId() {\r\n        return id;\r\n    }\r\n    public void setId(Integer id) {\r\n        this.id = id;\r\n    }\r\n    public ClassSession getClassSession() {\r\n        return classSession;\r\n    }\r\n    public void setClassSession(ClassSession classSession) {\r\n        this.classSession = classSession;\r\n    }\r\n    public Member getMember() {\r\n        return member;\r\n    }\r\n    public void setMember(Member member) {\r\n        this.member = member;\r\n    }\r\n    public LocalDateTime getRegistrationDate() {\r\n        return registrationDate;\r\n    }\r\n    public void setRegistrationDate(LocalDateTime registrationDate) {\r\n        this.registrationDate = registrationDate;\r\n    }\r\n    public Payment getPayment() {\r\n        return payment;\r\n    }\r\n    public void setPayment(Payment payment) {\r\n        this.payment = payment;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/ClassRegistration.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/ClassRegistration.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/ClassRegistration.java	(revision c178c1d9e80f6815b91226b2d10f391611dcb6b4)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/ClassRegistration.java	(date 1754953467239)
@@ -4,6 +4,7 @@
 import lombok.AllArgsConstructor;
 import lombok.Data;
 import lombok.NoArgsConstructor;
+import lombok.ToString;
 import java.time.LocalDateTime;
 import com.fasterxml.jackson.annotation.JsonIgnore;
 import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
@@ -23,11 +24,13 @@
     @ManyToOne
     @JoinColumn(name = "session_id")
     @JsonIgnore
+    @ToString.Exclude
     private ClassSession classSession;
 
     @ManyToOne
     @JoinColumn(name = "member_id")
     @JsonIgnoreProperties({"registrations", "vouchers", "wallet", "organizedMatches", "joinRequests"})
+    @ToString.Exclude
     private Member member;
 
     @Column(name = "registration_date")
@@ -41,6 +44,7 @@
 
     @OneToOne(cascade = CascadeType.ALL)
     @JoinColumn(name = "payment_id")
+    @ToString.Exclude
     private Payment payment;
 
     @Column(name = "coach_comment", columnDefinition = "TEXT")
Index: pickleball-frontend/src/components/court/CourtPage.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Box, Grid, Typography, TextField,\r\n  Button, Chip, Paper, Container,\r\n  CircularProgress, MenuItem, InputLabel, FormControl, Select\r\n} from '@mui/material';\r\nimport { FilterList, Search, SportsTennis } from '@mui/icons-material';\r\nimport CourtService from '../../service/CourtService';\r\nimport CourtCard from './CourtCard';\r\nimport Footer from '../common/Footer';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useMemo } from 'react';\r\nimport { useAuth } from '../../context/AuthContext';\r\n\r\n\r\nconst CourtPage = () => {\r\n  const [courts, setCourts] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState('');\r\n  const [filteredCourts, setFilteredCourts] = useState([]);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [statusFilter, setStatusFilter] = useState('all');\r\n  const [locationFilter, setLocationFilter] = useState('all');\r\n  const [showFilters, setShowFilters] = useState(false);\r\n  const navigate = useNavigate();\r\n  const { authToken } = useAuth();\r\n\r\n  useEffect(() => {\r\n    const loadCourts = async () => {\r\n      try {\r\n        const courtData = await CourtService.getAllCourts();\r\n        setCourts(courtData);\r\n        setFilteredCourts(courtData);\r\n      } catch (err) {\r\n        setError(err.message);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    loadCourts();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n  let result = courts;\r\n\r\n  // Apply search filter\r\n  if (searchTerm) {\r\n    const term = searchTerm.toLowerCase();\r\n    result = result.filter(court =>\r\n      court.name.toLowerCase().includes(term) ||\r\n      court.location.toLowerCase().includes(term)\r\n    );\r\n  }\r\n\r\n  // Apply status filter\r\n  if (statusFilter !== 'all') {\r\n    result = result.filter(court =>\r\n      court.status.toLowerCase() === statusFilter.toLowerCase()\r\n    );\r\n  }\r\n\r\n  // Apply location filter\r\n  if (locationFilter !== 'all') {\r\n    result = result.filter(court => court.location === locationFilter);\r\n  }\r\n\r\n  setFilteredCourts(result);\r\n}, [courts, searchTerm, statusFilter, locationFilter]);\r\n\r\n  const uniqueLocations = [...new Set(courts.map(court => court.location))];\r\n\r\n  const handleResetFilters = () => {\r\n    setSearchTerm('');\r\n    setStatusFilter('all');\r\n    setLocationFilter('all');\r\n  };\r\n\r\n  const handleBookNow = (courtId) => {\r\n    if (!authToken) {\r\n      // 未登录用户重定向到登录页面\r\n      navigate('/login');\r\n    } else {\r\n      // 已登录用户直接跳转到预订页面\r\n      navigate(`/booking/${courtId}`);\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <Box sx={{ display: 'flex', justifyContent: 'center', mt: 10 }}>\r\n        <CircularProgress size={60} />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <Container maxWidth=\"md\" sx={{ py: 4, textAlign: 'center' }}>\r\n        <Typography variant=\"h5\" color=\"error\" gutterBottom>\r\n          {error}\r\n        </Typography>\r\n        <Button\r\n          variant=\"contained\"\r\n          onClick={() => window.location.reload()}\r\n          sx={{ mt: 2 }}\r\n        >\r\n          Try Again\r\n        </Button>\r\n      </Container>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Container maxWidth=\"xl\" sx={{ py: 4 }}>\r\n      {/* Header */}\r\n      <Box sx={{ textAlign: 'center', mb: 6 }}>\r\n        <Typography variant=\"h3\" sx={{\r\n          fontWeight: 800,\r\n          mb: 2,\r\n          background: 'linear-gradient(45deg, #1976d2 30%, #4caf50 90%)',\r\n          WebkitBackgroundClip: 'text',\r\n          WebkitTextFillColor: 'transparent'\r\n        }}>\r\n          Find Your Perfect Court\r\n        </Typography>\r\n        <Typography variant=\"h6\" color=\"text.secondary\" sx={{ maxWidth: 700, mx: 'auto' }}>\r\n          Discover premium pickleball courts with state-of-the-art facilities\r\n        </Typography>\r\n      </Box>\r\n\r\n      {/* Search & Filters */}\r\n      <Paper sx={{ p: 3, mb: 4, borderRadius: 3, boxShadow: 2 }}>\r\n        <Grid container spacing={2} alignItems=\"center\">\r\n          <Grid item xs={12} md={6}>\r\n            <TextField\r\n              fullWidth\r\n              variant=\"outlined\"\r\n              placeholder=\"Search courts by name or location...\"\r\n              value={searchTerm}\r\n              onChange={(e) => setSearchTerm(e.target.value)}\r\n              InputProps={{\r\n                startAdornment: <Search sx={{ mr: 1, color: 'action.active' }} />\r\n              }}\r\n            />\r\n          </Grid>\r\n\r\n          <Grid item xs={6} md={3}>\r\n            <Button\r\n              fullWidth\r\n              variant=\"outlined\"\r\n              startIcon={<FilterList />}\r\n              onClick={() => setShowFilters(!showFilters)}\r\n              sx={{ height: 56 }}\r\n            >\r\n              {showFilters ? 'Hide Filters' : 'Show Filters'}\r\n            </Button>\r\n          </Grid>\r\n\r\n          <Grid item xs={6} md={3}>\r\n            <Chip\r\n              label={`${filteredCourts.length} courts available`}\r\n              color=\"primary\"\r\n              sx={{\r\n                height: 56,\r\n                borderRadius: 2,\r\n                fontSize: '1rem',\r\n                fontWeight: 700,\r\n                width: '100%'\r\n              }}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n\r\n        {/* Advanced Filters */}\r\n        {showFilters && (\r\n          <Box sx={{ mt: 3, pt: 2, borderTop: '1px solid #eee' }}>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={12} md={6}>\r\n                <FormControl fullWidth>\r\n                  <InputLabel>Status</InputLabel>\r\n                  <Select\r\n                    value={statusFilter}\r\n                    onChange={(e) => setStatusFilter(e.target.value)}\r\n                    label=\"Status\"\r\n                  >\r\n                    <MenuItem value=\"all\">All Statuses</MenuItem>\r\n                    <MenuItem value=\"active\">Active</MenuItem>\r\n                    <MenuItem value=\"maintenance\">Maintenance</MenuItem>\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n\r\n              <Grid item xs={12} md={6}>\r\n                <FormControl fullWidth>\r\n                  <InputLabel>Location</InputLabel>\r\n                  <Select\r\n                    value={locationFilter}\r\n                    onChange={(e) => setLocationFilter(e.target.value)}\r\n                    label=\"Location\"\r\n                  >\r\n                    <MenuItem value=\"all\">All Locations</MenuItem>\r\n                    {uniqueLocations.map(location => (\r\n                      <MenuItem key={location} value={location}>\r\n                        {location}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n            </Grid>\r\n          </Box>\r\n        )}\r\n      </Paper>\r\n\r\n      {/* Court Cards */}\r\n      {filteredCourts.length === 0 ? (\r\n        <Box sx={{ textAlign: 'center', p: 8 }}>\r\n          <Box sx={{\r\n            width: 120,\r\n            height: 120,\r\n            bgcolor: '#e3f2fd',\r\n            borderRadius: '50%',\r\n            display: 'inline-flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            mb: 3\r\n          }}>\r\n            <SportsTennis sx={{ fontSize: 60, color: '#1976d2' }} />\r\n          </Box>\r\n          <Typography variant=\"h5\" sx={{ fontWeight: 700, mb: 1 }}>\r\n            No Courts Found\r\n          </Typography>\r\n          <Typography color=\"text.secondary\" sx={{ maxWidth: 500, mx: 'auto', mb: 3 }}>\r\n            Try adjusting your filters or search terms\r\n          </Typography>\r\n          <Button\r\n            variant=\"outlined\"\r\n            onClick={handleResetFilters}\r\n          >\r\n            Reset Filters\r\n          </Button>\r\n        </Box>\r\n      ) : (\r\n        <Grid container spacing={4}>\r\n          {filteredCourts.map(court => (\r\n            <Grid item key={court.id} xs={12} sm={6} md={4} lg={3}>\r\n              <CourtCard\r\n                court={court}\r\n                onBookNow={() => handleBookNow(court.id)}\r\n              />\r\n            </Grid>\r\n          ))}\r\n        </Grid>\r\n      )}\r\n\r\n      <Footer />\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default CourtPage;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball-frontend/src/components/court/CourtPage.jsx b/pickleball-frontend/src/components/court/CourtPage.jsx
--- a/pickleball-frontend/src/components/court/CourtPage.jsx	(revision c178c1d9e80f6815b91226b2d10f391611dcb6b4)
+++ b/pickleball-frontend/src/components/court/CourtPage.jsx	(date 1754914807803)
@@ -102,7 +102,23 @@
         </Typography>
         <Button
           variant="contained"
-          onClick={() => window.location.reload()}
+          onClick={() => {
+            setError(null);
+            setLoading(true);
+            // 重新获取数据
+            const loadCourts = async () => {
+              try {
+                const courtsData = await CourtService.getAllCourts();
+                setCourts(courtsData);
+                setFilteredCourts(courtsData);
+              } catch (err) {
+                setError(err.message || 'Failed to load courts');
+              } finally {
+                setLoading(false);
+              }
+            };
+            loadCourts();
+          }}
           sx={{ mt: 2 }}
         >
           Try Again
Index: pickleball-frontend/src/components/event/EventCreatePage.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useState, useEffect, useMemo } from 'react';\r\nimport {\r\n  Box,\r\n  Container,\r\n  Paper,\r\n  Typography,\r\n  TextField,\r\n  Button,\r\n  Grid,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Chip,\r\n  Avatar,\r\n  IconButton,\r\n  Divider,\r\n  Alert,\r\n  Card,\r\n  CardContent,\r\n  Switch,\r\n  FormControlLabel,\r\n  InputAdornment,\r\n  Fade,\r\n  Zoom,\r\n  CircularProgress,\r\n  Checkbox,\r\n  ListItemText,\r\n  Stepper,\r\n  Step,\r\n  StepLabel\r\n} from '@mui/material';\r\nimport {\r\n  Event,\r\n  LocationOn,\r\n  AccessTime,\r\n  Person,\r\n  Category,\r\n  AttachMoney,\r\n  Image,\r\n  Add,\r\n  Close,\r\n  CalendarToday,\r\n  Public,\r\n  Lock,\r\n  Error\r\n} from '@mui/icons-material';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useAuth } from '../../context/AuthContext';\r\nimport EventService from '../../service/EventService';\r\nimport CourtService from '../../service/CourtService';\r\nimport VenueService from '../../service/VenueService';\r\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\r\nimport dayjs from 'dayjs';\r\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\r\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\r\n\r\nconst EventCreatePage = () => {\r\n  // Removed profile and loading state\r\n  const [submitting, setSubmitting] = useState(false);\r\n  const [showSuccess, setShowSuccess] = useState(false);\r\n  const [error, setError] = useState('');\r\n  const [priceError, setPriceError] = useState('');\r\n  const navigate = useNavigate();\r\n  const { currentUser } = useAuth();\r\n\r\n  const [formData, setFormData] = useState({\r\n    title: '',\r\n    date: '',\r\n    time: '',\r\n    endTime: '',\r\n    eventType: '', // will use category for this\r\n    capacity: '',\r\n    price: '', // used for feeAmount\r\n    status: 'PUBLISHED',\r\n    sendNotification: true // 默認發送郵件通知\r\n  });\r\n\r\n  // Schedule builder state\r\n  const [scheduleArray, setScheduleArray] = useState([]);\r\n  const [scheduleTime, setScheduleTime] = useState('');\r\n  const [scheduleActivity, setScheduleActivity] = useState('');\r\n\r\n  const [courtIds, setCourtIds] = useState([]);\r\n  const [courts, setCourts] = useState([]);\r\n  const [venues, setVenues] = useState([]);\r\n  const [venueId, setVenueId] = useState('');\r\n  const [filteredCourts, setFilteredCourts] = useState([]);\r\n  const [capacityError, setCapacityError] = useState('');\r\n  const [filteredVenues, setFilteredVenues] = useState([]);\r\n  const [venueMaxCapacity, setVenueMaxCapacity] = useState(0);\r\n\r\n  const categories = [\r\n    'Tournament',\r\n    'Social Play',\r\n    'Ladder League',\r\n    'Round Robin',\r\n    'Clinic',\r\n    'Open Play',\r\n    'Youth Event',\r\n    'Senior Event',\r\n    'Charity Event',\r\n    'Skills & Drills',\r\n    'Exhibition Match',\r\n    'Club Night',\r\n    'Beginner Session',\r\n    'Advanced Play'\r\n  ];\r\n\r\n\r\n\r\n  // 在組件內部\r\n  const [bookedDates, setBookedDates] = useState([]);\r\n  // 強化禁用邏輯：bookedDates 轉成 dayjs 字串陣列，shouldDisableDate 嚴格比對\r\n  const bookedDateSet = useMemo(() => new Set(bookedDates.map(d => dayjs(d).format('YYYY-MM-DD'))), [bookedDates]);\r\n  const today = useMemo(() => dayjs(), []);\r\n  const minDate = useMemo(() => today.add(3, 'month'), [today]);\r\n  // 1. Stepper 狀態\r\n  const steps = ['Select State', 'Select Venue', 'Event Info', 'Confirm & Submit'];\r\n  const [activeStep, setActiveStep] = useState(0);\r\n  const [allStates, setAllStates] = useState([]);\r\n  const [selectedState, setSelectedState] = useState('');\r\n  const [venuesByState, setVenuesByState] = useState([]);\r\n  const [autoAssignedCourts, setAutoAssignedCourts] = useState([]);\r\n  const [checkingAvailability, setCheckingAvailability] = useState(false);\r\n\r\n  const initialFormData = {\r\n    title: '',\r\n    eventType: '',\r\n    date: '',\r\n    time: '',\r\n    endTime: '',\r\n    capacity: '',\r\n    price: '',\r\n    schedule: '',\r\n    description: '',\r\n  };\r\n\r\n  const handleResetForm = () => {\r\n    setFormData(initialFormData);\r\n    setScheduleArray([]);\r\n    setCourtIds([]);\r\n    setVenueId('');\r\n    setSelectedState('');\r\n    setAutoAssignedCourts([]);\r\n    setActiveStep(0);\r\n  };\r\n\r\n  // When state changes, clear venue selection\r\n  const handleStateChange = (e) => {\r\n    setSelectedState(e.target.value);\r\n    setVenueId('');\r\n  };\r\n\r\n  // 2. 取得所有 state\r\n  useEffect(() => {\r\n    VenueService.getAllVenues().then(data => {\r\n      const states = Array.from(new Set(data.map(v => v.state).filter(Boolean)));\r\n      setAllStates(states);\r\n    });\r\n  }, []);\r\n\r\n  // 3. 依 state 取得 venue\r\n  useEffect(() => {\r\n    if (selectedState) {\r\n      VenueService.getVenuesByState(selectedState).then(setVenuesByState);\r\n    } else {\r\n      setVenuesByState([]);\r\n    }\r\n  }, [selectedState]);\r\n\r\n  // 4. 分步驟流程的下一步/上一步\r\n  const handleNext = async () => {\r\n    // 如果目前在 Event Info 步驟（activeStep === 2），直接跳到 Confirm & Submit 步驟（activeStep = 4）\r\n    if (activeStep === 2) {\r\n      setActiveStep(3);\r\n      return;\r\n    }\r\n    setActiveStep((prev) => prev + 1);\r\n  };\r\n  const handleBack = () => {\r\n    setShowSuccess(false);\r\n    setActiveStep((prev) => Math.max(prev - 1, 0));\r\n  };\r\n\r\n  useEffect(() => {\r\n    // fetch all courts\r\n    CourtService.getAllCourts().then(setCourts);\r\n    VenueService.getAllVenues().then(setVenues);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (formData.capacity) {\r\n      const cap = parseInt(formData.capacity, 10);\r\n      const venuesOk = venues.filter(v =>\r\n        courts.filter(c => c.venue && c.venue.id === v.id).length * 8 >= cap\r\n      );\r\n      setFilteredVenues(venuesOk);\r\n      // 如果目前 venueId 不在可用 venue，清空 venueId/courtIds\r\n      if (venueId && !venuesOk.some(v => v.id === venueId)) {\r\n        setVenueId('');\r\n        setCourtIds([]);\r\n      }\r\n    } else {\r\n      setFilteredVenues(venues);\r\n    }\r\n  }, [formData.capacity, venues, courts]);\r\n\r\n  useEffect(() => {\r\n    if (venueId) {\r\n      let filtered = courts.filter(c => c.venue && c.venue.id === Number(venueId));\r\n      if (formData.capacity) {\r\n        // 只顯示能湊到 capacity 的 court 組合\r\n        const need = Math.ceil(parseInt(formData.capacity, 10) / 8);\r\n        if (filtered.length < need) {\r\n          setCapacityError('This venue does not have enough courts for your capacity. Please choose another venue.');\r\n          setCourtIds([]);\r\n        } else {\r\n          setCapacityError('');\r\n        }\r\n        // 預設不自動選 court，讓 user 自己選\r\n      } else {\r\n        setCapacityError('');\r\n      }\r\n      setFilteredCourts(filtered);\r\n      setCourtIds([]);\r\n    } else {\r\n      setFilteredCourts([]);\r\n      setCourtIds([]);\r\n      setCapacityError('');\r\n    }\r\n  }, [venueId, courts, formData.capacity]);\r\n\r\n  useEffect(() => {\r\n    if (formData.capacity && courtIds.length > 0) {\r\n      const total = courtIds.length * 8;\r\n      if (total < parseInt(formData.capacity, 10)) {\r\n        setCapacityError('Selected courts cannot accommodate your capacity. Please select more courts or reduce capacity.');\r\n      } else {\r\n        setCapacityError('');\r\n      }\r\n    }\r\n  }, [courtIds, formData.capacity]);\r\n\r\n  // 當 venueId 改變時，計算最大容量\r\n  useEffect(() => {\r\n    if (venueId) {\r\n      // 假設 courts 是所有 court 的陣列\r\n      const courtsForVenue = courts.filter(c => c.venue && c.venue.id === Number(venueId));\r\n      setVenueMaxCapacity(courtsForVenue.length * 8);\r\n    } else {\r\n      setVenueMaxCapacity(0);\r\n    }\r\n  }, [venueId, courts]);\r\n\r\n  useEffect(() => {\r\n    if (activeStep === 3 && courtIds.length > 0) {\r\n      CourtService.getCourtsByIds(courtIds).then(setAutoAssignedCourts).catch(() => setAutoAssignedCourts([]));\r\n    }\r\n  }, [activeStep, courtIds]);\r\n\r\n  useEffect(() => {\r\n    if (venueId && selectedState) {\r\n      // 傳 state 參數給後端（如後端支援）\r\n      CourtService.getBookedDates(venueId, minDate.format('YYYY-MM-DD'), undefined, selectedState)\r\n        .then(dates => {\r\n          setBookedDates(dates);\r\n        })\r\n        .catch(() => setBookedDates([]));\r\n    } else {\r\n      setBookedDates([]);\r\n    }\r\n  }, [venueId, minDate, selectedState]);\r\n\r\n  const handleInputChange = (field) => (event) => {\r\n    if (field === 'price') {\r\n      const value = event.target.value;\r\n      if (value !== '' && parseFloat(value) < 0) {\r\n        setPriceError('Price cannot be negative');\r\n      } else {\r\n        setPriceError('');\r\n      }\r\n    }\r\n    setFormData({\r\n      ...formData,\r\n      [field]: event.target.value\r\n    });\r\n    // Clear messages when user starts typing\r\n    if (error) setError('');\r\n  };\r\n\r\n  const handleSwitchChange = (field) => (event) => {\r\n    setFormData({\r\n      ...formData,\r\n      [field]: event.target.checked\r\n    });\r\n  };\r\n\r\n  // Add schedule item\r\n  const handleAddScheduleItem = () => {\r\n    if (scheduleTime && scheduleActivity) {\r\n      setScheduleArray([...scheduleArray, { time: scheduleTime, activity: scheduleActivity }]);\r\n      setScheduleTime('');\r\n      setScheduleActivity('');\r\n    }\r\n  };\r\n\r\n  // Remove schedule item\r\n  const handleRemoveScheduleItem = (idx) => {\r\n    setScheduleArray(scheduleArray.filter((_, i) => i !== idx));\r\n  };\r\n\r\n  const handleCourtChange = (event) => {\r\n    setCourtIds(event.target.value);\r\n  };\r\n\r\n  const handleVenueChange = (event) => {\r\n    const selectedVenueId = Number(event.target.value);\r\n    setVenueId(selectedVenueId);\r\n    // 自動全選該場館下所有 court\r\n    const courtsForVenue = courts.filter(c => c.venue && c.venue.id === selectedVenueId);\r\n    setFilteredCourts(courtsForVenue);\r\n    setCourtIds(courtsForVenue.map(c => c.id));\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault?.();\r\n    setSubmitting(true);\r\n    setError('');\r\n    // Price validation\r\n    if (formData.price !== '' && parseFloat(formData.price) < 0) {\r\n      setPriceError('Price cannot be negative');\r\n      setSubmitting(false);\r\n      return;\r\n    }\r\n    try {\r\n      const eventData = {\r\n        title: formData.title,\r\n        startTime: `${formData.date}T${formData.time}`,\r\n        endTime: `${formData.date}T${formData.endTime}`,\r\n        eventType: formData.eventType,\r\n        capacity: parseInt(formData.capacity, 10),\r\n        schedule: JSON.stringify(scheduleArray),\r\n        feeAmount: formData.price ? parseFloat(formData.price) : 0,\r\n        status: formData.status || 'PUBLISHED',\r\n        location: venuesByState.find(v => v.id === venueId)?.location || '', // 新增：從選中的 venue 獲取 location\r\n        courtIds: courtIds,\r\n        venueId: venueId || null,\r\n        sendNotification: formData.sendNotification\r\n      };\r\n      await EventService.createEvent(eventData);\r\n      setShowSuccess(true); // 顯示成功訊息\r\n      // 不要自動跳頁\r\n    } catch (err) {\r\n      let errorMsg = \"Failed to create event.\";\r\n      if (err.response?.data) {\r\n        if (typeof err.response.data === \"string\") {\r\n          errorMsg = err.response.data;\r\n        } else if (typeof err.response.data === \"object\") {\r\n          errorMsg = err.response.data.message || err.response.data.error || JSON.stringify(err.response.data);\r\n        }\r\n      }\r\n      setError(errorMsg);\r\n    } finally {\r\n      setSubmitting(false);\r\n    }\r\n  };\r\n\r\n  // Only check currentUser role for access\r\n  const isEventOrganizer = currentUser?.role === 'EVENTORGANIZER' || \r\n                          currentUser?.role === 'EventOrganizer' || \r\n                          currentUser?.userType === 'EventOrganizer';\r\n  \r\n  if (!isEventOrganizer) {\r\n    return (\r\n      <Box sx={{ \r\n        minHeight: '100vh', \r\n        background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n        py: 4\r\n      }}>\r\n        <Container maxWidth=\"lg\">\r\n          <Paper \r\n            elevation={24} \r\n            sx={{ \r\n              p: 4, \r\n              borderRadius: 4,\r\n              background: 'rgba(255, 255, 255, 0.95)',\r\n              backdropFilter: 'blur(10px)',\r\n              textAlign: 'center'\r\n            }}\r\n          >\r\n            <Avatar \r\n              sx={{ \r\n                width: 80, \r\n                height: 80, \r\n                mx: 'auto', \r\n                mb: 2, \r\n                bgcolor: 'error.main'\r\n              }}\r\n            >\r\n              <Error sx={{ fontSize: 40 }} />\r\n            </Avatar>\r\n            <Typography variant=\"h4\" component=\"h1\" sx={{ color: 'error.main', fontWeight: 'bold', mb: 2 }}>\r\n              Access Denied\r\n            </Typography>\r\n            <Typography variant=\"h6\" color=\"text.secondary\" sx={{ mb: 3 }}>\r\n              You need to be an Event Organizer to create events.\r\n            </Typography>\r\n            <Button\r\n              variant=\"contained\"\r\n              onClick={() => navigate('/events')}\r\n              sx={{\r\n                background: 'linear-gradient(45deg, #667eea, #764ba2)',\r\n                borderRadius: 2,\r\n                px: 4,\r\n                py: 1.5\r\n              }}\r\n            >\r\n              Back to Events\r\n            </Button>\r\n          </Paper>\r\n        </Container>\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  // 在 return 最前面加 fallback，避免 activeStep 不在 0~3 時出現空白\r\n  if (activeStep < 0 || activeStep > 3) {\r\n    return <div style={{textAlign: 'center', marginTop: 80, color: '#667eea', fontSize: 24}}>Step error, please refresh or contact admin.</div>;\r\n  }\r\n\r\n  return (\r\n    <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n      <Box sx={{ minHeight: '100vh', background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)', py: 4 }}>\r\n        <Container maxWidth=\"md\">\r\n          <Stepper activeStep={activeStep} alternativeLabel sx={{ mb: 4 }}>\r\n            {steps.map(label => <Step key={label}><StepLabel>{label}</StepLabel></Step>)}\r\n          </Stepper>\r\n          <Paper elevation={24} sx={{ p: 4, borderRadius: 4, background: 'rgba(255,255,255,0.95)' }}>\r\n            {showSuccess ? (\r\n              <Box textAlign=\"center\" py={6}>\r\n                <Typography variant=\"h5\" color=\"success.main\" gutterBottom>\r\n                  Event created successfully!\r\n                </Typography>\r\n                <Typography variant=\"body1\" sx={{ mb: 2 }}>\r\n                  Your event has been created and is now live.\r\n                </Typography>\r\n                {formData.sendNotification && (\r\n                  <Alert severity=\"info\" sx={{ mb: 3 }}>\r\n                    \uD83D\uDCE7 Email notifications have been sent to all registered users.\r\n                  </Alert>\r\n                )}\r\n                <Button variant=\"contained\" color=\"primary\" onClick={() => navigate('/events')}>\r\n                  Go to Event List\r\n                </Button>\r\n              </Box>\r\n            ) : (\r\n              <>\r\n                {activeStep === 0 && (\r\n                  <FormControl fullWidth>\r\n                    <InputLabel>Select State</InputLabel>\r\n                    <Select value={selectedState} onChange={handleStateChange} label=\"Select State\">\r\n                      {allStates.map(state => <MenuItem key={state} value={state}>{state}</MenuItem>)}\r\n                    </Select>\r\n                    <Box mt={2}><Button variant=\"contained\" onClick={handleNext} disabled={!selectedState}>Next</Button></Box>\r\n                  </FormControl>\r\n                )}\r\n                {activeStep === 1 && (\r\n                  <FormControl fullWidth disabled={!selectedState}>\r\n                    <InputLabel>Select Venue</InputLabel>\r\n                    <Select value={venueId} onChange={e => setVenueId(e.target.value)} label=\"Select Venue\">\r\n                      {venuesByState.map(venue => <MenuItem key={venue.id} value={venue.id}>{venue.name}</MenuItem>)}\r\n                    </Select>\r\n                    <Box mt={2} display=\"flex\" gap={2}>\r\n                      <Button onClick={handleBack}>Back</Button>\r\n                      <Button variant=\"contained\" onClick={handleNext} disabled={!venueId}>Next</Button>\r\n                    </Box>\r\n                  </FormControl>\r\n                )}\r\n                {activeStep === 2 && (\r\n                  <Box component=\"form\" noValidate autoComplete=\"off\">\r\n                    {/* 保留原本所有活動欄位（活動名稱、類型、價格、資格、賽程、說明、日期、時間、容量等） */}\r\n                    <TextField label=\"Event Name\" fullWidth value={formData.title} onChange={handleInputChange('title')} sx={{ mb: 2 }} />\r\n                    <FormControl fullWidth sx={{ mb: 2 }}>\r\n                      <InputLabel>Type</InputLabel>\r\n                      <Select value={formData.eventType} onChange={handleInputChange('eventType')} label=\"Type\">\r\n                        {categories.map(category => <MenuItem key={category} value={category}>{category}</MenuItem>)}\r\n                      </Select>\r\n                    </FormControl>\r\n                    <TextField label=\"Price\" type=\"number\" fullWidth value={formData.price} onChange={handleInputChange('price')} sx={{ mb: 2 }} />\r\n                    {/* 賽程、說明、日期、時間、容量等欄位照原本保留 */}\r\n                    <Box sx={{ mb: 2 }}>\r\n                      <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item xs={4}>\r\n                          <TextField\r\n                            label=\"Time\"\r\n                            type=\"time\"\r\n                            value={scheduleTime}\r\n                            onChange={e => setScheduleTime(e.target.value)}\r\n                            fullWidth\r\n                            size=\"small\"\r\n                          />\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                          <TextField\r\n                            label=\"Activity\"\r\n                            value={scheduleActivity}\r\n                            onChange={e => setScheduleActivity(e.target.value)}\r\n                            fullWidth\r\n                            size=\"small\"\r\n                          />\r\n                        </Grid>\r\n                        <Grid item xs={2}>\r\n                          <Button variant=\"contained\" onClick={handleAddScheduleItem} disabled={!scheduleTime || !scheduleActivity}>Add</Button>\r\n                        </Grid>\r\n                      </Grid>\r\n                      <Box sx={{ mt: 2 }}>\r\n                        {scheduleArray.length === 0 && <Typography color=\"text.secondary\">No schedule items added.</Typography>}\r\n                        {scheduleArray.map((item, idx) => (\r\n                          <Box key={idx} sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\r\n                            <Typography sx={{ mr: 2 }}>{item.time} - {item.activity}</Typography>\r\n                            <Button color=\"error\" size=\"small\" onClick={() => handleRemoveScheduleItem(idx)}>Remove</Button>\r\n                          </Box>\r\n                        ))}\r\n                      </Box>\r\n                    </Box>\r\n                    <TextField label=\"Description\" fullWidth value={formData.description} onChange={handleInputChange('description')} sx={{ mb: 2 }} />\r\n                    <DatePicker\r\n                      label=\"Date\"\r\n                      value={formData.date ? dayjs(formData.date) : null}\r\n                      onChange={date => setFormData({ ...formData, date: date ? date.format('YYYY-MM-DD') : '' })}\r\n                      minDate={minDate}\r\n                      shouldDisableDate={date => {\r\n                        const formatted = date.format('YYYY-MM-DD');\r\n                        // console.log('Checking date:', formatted, 'booked:', bookedDateSet);\r\n                        return bookedDateSet.has(formatted);\r\n                      }}\r\n                      renderInput={params => (\r\n                        <TextField {...params} fullWidth sx={{ mb: 2 }} />\r\n                      )}\r\n                    />\r\n                    <TextField label=\"Start Time\" type=\"time\" fullWidth value={formData.time} onChange={handleInputChange('time')} sx={{ mb: 2 }} InputLabelProps={{ shrink: true }} />\r\n                    <TextField label=\"End Time\" type=\"time\" fullWidth value={formData.endTime} onChange={handleInputChange('endTime')} sx={{ mb: 2 }} InputLabelProps={{ shrink: true }} />\r\n                    {venueId && (\r\n                      <Box sx={{ mt: 2, mb: 2 }}>\r\n                        <Alert severity=\"info\">\r\n                          This venue can accommodate up to <b>{venueMaxCapacity}</b> people.\r\n                        </Alert>\r\n                      </Box>\r\n                    )}\r\n                    <TextField\r\n                      label=\"Capacity\"\r\n                      type=\"number\"\r\n                      fullWidth\r\n                      value={formData.capacity}\r\n                      onChange={e => {\r\n                        let value = Number(e.target.value);\r\n                        if (value > venueMaxCapacity) value = venueMaxCapacity;\r\n                        if (value < 1) value = 1;\r\n                        setFormData({ ...formData, capacity: value });\r\n                      }}\r\n                      sx={{ mb: 2 }}\r\n                      inputProps={{ min: 1, max: venueMaxCapacity }}\r\n                      error={formData.capacity > venueMaxCapacity}\r\n                      helperText={\r\n                        formData.capacity > venueMaxCapacity\r\n                          ? `The maximum capacity for this venue is ${venueMaxCapacity}.`\r\n                          : ''\r\n                      }\r\n                      disabled={venueMaxCapacity === 0}\r\n                    />\r\n                    <Box mt={2} display=\"flex\" gap={2}>\r\n                      <Button onClick={handleBack}>Back</Button>\r\n                      <Button variant=\"contained\" onClick={handleNext} disabled={!(formData.title && formData.eventType && formData.date && formData.time && formData.endTime && formData.capacity && formData.capacity <= venueMaxCapacity && venueMaxCapacity > 0)}>Next</Button>\r\n                    </Box>\r\n                  </Box>\r\n                )}\r\n                {activeStep === 3 && (\r\n                  <Box>\r\n                    <Typography variant=\"h6\">Please confirm event information:</Typography>\r\n                    <ul>\r\n                      <li>State: {venuesByState.find(v => v.id === venueId)?.state}</li>\r\n                      <li>Venue: {venuesByState.find(v => v.id === venueId)?.name}</li>\r\n                      <li>Location: {venuesByState.find(v => v.id === venueId)?.location}</li>\r\n                      <li>Event Name: {formData.title}</li>\r\n                      <li>Type: {formData.eventType}</li>\r\n                      <li>Price: {formData.price}</li>\r\n                      <li>Schedule: {JSON.stringify(scheduleArray)}</li>\r\n                      <li>Description: {formData.description}</li>\r\n                      <li>Date: {formData.date}</li>\r\n                      <li>Time: {formData.time} ~ {formData.endTime}</li>\r\n                      <li>Capacity: {formData.capacity}</li>\r\n                      <li>Assigned Courts: {autoAssignedCourts.map(c => c.name).join(', ')}</li>\r\n                    </ul>\r\n                    \r\n                    <Box sx={{ mt: 3, p: 2, bgcolor: 'info.light', borderRadius: 1 }}>\r\n                      <FormControlLabel\r\n                        control={\r\n                          <Checkbox\r\n                            checked={formData.sendNotification !== false}\r\n                            onChange={(e) => setFormData({ ...formData, sendNotification: e.target.checked })}\r\n                            color=\"primary\"\r\n                          />\r\n                        }\r\n                        label={\r\n                          <Typography variant=\"body2\">\r\n                            \uD83D\uDCE7 Send email notification to all users about this new event\r\n                          </Typography>\r\n                        }\r\n                      />\r\n                      <Typography variant=\"caption\" color=\"text.secondary\" display=\"block\" sx={{ mt: 1 }}>\r\n                        When enabled, all registered users will receive an email notification about this new event.\r\n                      </Typography>\r\n                    </Box>\r\n                    \r\n                    <Box mt={2} display=\"flex\" gap={2}>\r\n                      <Button onClick={handleBack}>Back</Button>\r\n                      <Button variant=\"contained\" color=\"success\" onClick={handleSubmit} disabled={submitting}>\r\n                        {submitting ? 'Creating Event...' : 'Submit'}\r\n                      </Button>\r\n                    </Box>\r\n                  </Box>\r\n                )}\r\n              </>\r\n            )}\r\n          </Paper>\r\n        </Container>\r\n      </Box>\r\n    </LocalizationProvider>\r\n  );\r\n};\r\n\r\nexport default EventCreatePage;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball-frontend/src/components/event/EventCreatePage.jsx b/pickleball-frontend/src/components/event/EventCreatePage.jsx
--- a/pickleball-frontend/src/components/event/EventCreatePage.jsx	(revision c178c1d9e80f6815b91226b2d10f391611dcb6b4)
+++ b/pickleball-frontend/src/components/event/EventCreatePage.jsx	(date 1754954670267)
@@ -43,19 +43,22 @@
   CalendarToday,
   Public,
   Lock,
-  Error
+  Error,
+  Schedule,
+  ArrowBack
 } from '@mui/icons-material';
 import { useNavigate } from 'react-router-dom';
 import { useAuth } from '../../context/AuthContext';
 import EventService from '../../service/EventService';
 import CourtService from '../../service/CourtService';
 import VenueService from '../../service/VenueService';
+import EventOrganizerService from '../../service/EventOrganizerService';
 import { DatePicker } from '@mui/x-date-pickers/DatePicker';
 import dayjs from 'dayjs';
 import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
 import { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';
 
-const EventCreatePage = () => {
+const EventCreatePage = ({ embedded = false }) => {
   // Removed profile and loading state
   const [submitting, setSubmitting] = useState(false);
   const [showSuccess, setShowSuccess] = useState(false);
@@ -90,6 +93,12 @@
   const [filteredVenues, setFilteredVenues] = useState([]);
   const [venueMaxCapacity, setVenueMaxCapacity] = useState(0);
 
+  // 新增：time slot相關state
+  const [availableSlots, setAvailableSlots] = useState([]);
+  const [allSlots, setAllSlots] = useState([]);
+  const [loadingSlots, setLoadingSlots] = useState(false);
+  const [selectedTimeRange, setSelectedTimeRange] = useState({ start: null, end: null });
+
   const categories = [
     'Tournament',
     'Social Play',
@@ -107,12 +116,14 @@
     'Advanced Play'
   ];
 
-
-
   // 在組件內部
   const [bookedDates, setBookedDates] = useState([]);
   // 強化禁用邏輯：bookedDates 轉成 dayjs 字串陣列，shouldDisableDate 嚴格比對
-  const bookedDateSet = useMemo(() => new Set(bookedDates.map(d => dayjs(d).format('YYYY-MM-DD'))), [bookedDates]);
+  const bookedDateSet = useMemo(() => {
+    const set = new Set(bookedDates.map(d => dayjs(d).format('YYYY-MM-DD')));
+    console.log('BookedDateSet updated:', Array.from(set), 'from bookedDates:', bookedDates);
+    return set;
+  }, [bookedDates]);
   const today = useMemo(() => dayjs(), []);
   const minDate = useMemo(() => today.add(3, 'month'), [today]);
   // 1. Stepper 狀態
@@ -152,6 +163,247 @@
     setVenueId('');
   };
 
+  // 新增：獲取可用時段
+  const fetchAvailableSlots = async (date) => {
+    if (!venueId || !date) return;
+    
+    try {
+      setLoadingSlots(true);
+      console.log('=== fetchAvailableSlots ===');
+      console.log('Venue ID:', venueId, 'Date:', date);
+
+      // 使用新的EventOrganizerService獲取該venue下所有court的可用時段
+      const venueSlots = await EventOrganizerService.getVenueAvailableSlots(venueId, date);
+      console.log('Venue available slots:', venueSlots);
+      
+      // 過濾出指定日期的可用時段
+      let filtered = venueSlots.filter(slot => slot.date === date);
+      
+      // 如果是今天，過濾掉2小時內的時段
+      if (dayjs(date).isSame(dayjs(), 'day')) {
+        const nowPlus2h = dayjs().add(2, 'hour');
+        filtered = filtered.filter(slot => {
+          const slotDateTime = dayjs(`${slot.date} ${slot.startTime}`, 'YYYY-MM-DD HH:mm');
+          return slotDateTime.isAfter(nowPlus2h);
+        });
+      }
+      
+      console.log('Final filtered slots:', filtered);
+      setAvailableSlots(filtered);
+      setAllSlots(venueSlots);
+    } catch (error) {
+      console.error('Failed to fetch available slots:', error);
+      setError('Failed to load available time slots');
+    } finally {
+      setLoadingSlots(false);
+    }
+  };
+
+  // 新增：檢查時間段是否在選中範圍內
+  const isTimeSlotInRange = (slotTime) => {
+    if (selectedTimeRange.start === null || selectedTimeRange.end === null) {
+      return false;
+    }
+    return slotTime >= selectedTimeRange.start && slotTime <= selectedTimeRange.end;
+  };
+
+  // 新增：渲染time slots
+  const renderTimeSlots = () => {
+    if (!formData.date || !venueId) return null;
+
+    const venueCourts = courts.filter(c => c.venue && c.venue.id === Number(venueId));
+    if (venueCourts.length === 0) return null;
+
+    // 使用第一個court的營業時間作為參考
+    const court = venueCourts[0];
+    
+    // 獲取營業時間範圍
+    const getHourRange = () => {
+      let open = 8, close = 22;
+      if (court && court.openingTime && court.closingTime) {
+        open = parseInt(court.openingTime.split(':')[0], 10);
+        close = parseInt(court.closingTime.split(':')[0], 10);
+        if (isNaN(open)) open = 8;
+        if (isNaN(close)) close = 22;
+      }
+      return { open, close };
+    };
+
+    const { open, close } = getHourRange();
+    const hourSlots = [];
+    for (let h = open; h < close; h++) {
+      const start = (h < 10 ? '0' : '') + h + ':00';
+      const end = (h + 1 < 10 ? '0' : '') + (h + 1) + ':00';
+      hourSlots.push({ start, end });
+    }
+
+    console.log('Available slots for rendering:', availableSlots);
+    // 修正：確保使用正確的字段名稱和格式
+    const availableSlotSet = new Set(availableSlots.map(s => {
+      const startTime = typeof s.startTime === 'string' ? s.startTime : s.startTime;
+      const endTime = typeof s.endTime === 'string' ? s.endTime : s.endTime;
+      return startTime + '-' + endTime;
+    }));
+    console.log('Available slot set:', Array.from(availableSlotSet));
+
+    // 新增：處理時間段選擇（移到函數內部）
+    const handleTimeSlotClick = (clickedSlot) => {
+      if (!availableSlotSet.has(clickedSlot.start + '-' + clickedSlot.end)) {
+        return; // 如果時段不可用，不處理
+      }
+
+      const clickedTime = clickedSlot.start;
+      
+      // 如果沒有選中的時間範圍，開始新的選擇
+      if (selectedTimeRange.start === null) {
+        setSelectedTimeRange({ start: clickedTime, end: clickedTime });
+        setFormData({
+          ...formData,
+          time: clickedTime,
+          endTime: clickedSlot.end
+        });
+        return;
+      }
+
+      // 如果點擊的是已經選中的單個時間段，清除選擇
+      if (clickedTime === selectedTimeRange.start && selectedTimeRange.start === selectedTimeRange.end) {
+        setSelectedTimeRange({ start: null, end: null });
+        setFormData({
+          ...formData,
+          time: '',
+          endTime: ''
+        });
+        return;
+      }
+
+      // 確定新的時間範圍
+      let newStart, newEnd;
+      
+      if (clickedTime < selectedTimeRange.start) {
+        // 點擊的時間早於當前開始時間，擴展到左邊
+        newStart = clickedTime;
+        newEnd = selectedTimeRange.end;
+      } else if (clickedTime > selectedTimeRange.end) {
+        // 點擊的時間晚於當前結束時間，擴展到右邊
+        newStart = selectedTimeRange.start;
+        newEnd = clickedTime;
+      } else {
+        // 點擊的時間在當前範圍內，調整為從開始到點擊時間
+        newStart = selectedTimeRange.start;
+        newEnd = clickedTime;
+      }
+
+      // 檢查範圍內的所有時間段是否都可用
+      const rangeSlots = hourSlots.filter(slot => 
+        slot.start >= newStart && slot.start <= newEnd
+      );
+      
+      const allAvailable = rangeSlots.every(slot => 
+        availableSlotSet.has(slot.start + '-' + slot.end)
+      );
+
+      if (allAvailable) {
+        setSelectedTimeRange({ start: newStart, end: newEnd });
+        
+        // 找到結束時間對應的slot
+        const endSlot = hourSlots.find(slot => slot.start === newEnd);
+        const endTime = endSlot ? endSlot.end : newEnd;
+        
+        setFormData({
+          ...formData,
+          time: newStart,
+          endTime: endTime
+        });
+      }
+    };
+
+    return (
+      <Card sx={{ mb: 3, borderRadius: 3 }}>
+        <CardContent>
+          <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
+            <Schedule sx={{ mr: 1, color: 'text.secondary' }} />
+            <Typography variant="h6" fontWeight="bold">
+              Available Time Slots - {dayjs(formData.date).format('dddd, MMMM D, YYYY')}
+            </Typography>
+            {selectedTimeRange.start && (
+              <Typography variant="body2" color="primary" sx={{ ml: 2 }}>
+                Selected: {selectedTimeRange.start} - {selectedTimeRange.end}
+              </Typography>
+            )}
+          </Box>
+
+          {loadingSlots ? (
+            <Box sx={{ display: 'flex', justifyContent: 'center', py: 4 }}>
+              <CircularProgress />
+            </Box>
+          ) : (
+            <Grid container spacing={1.5}>
+              {hourSlots.length > 0 ? (
+                hourSlots.map((slot, idx) => {
+                  const key = slot.start + '-' + slot.end;
+                  const isAvailable = availableSlotSet.has(key);
+                  const isInRange = isTimeSlotInRange(slot.start);
+                  const isSelected = formData.time === slot.start;
+                  
+                  return (
+                    <Grid item xs={4} sm={3} md={2} key={key}>
+                      <Button
+                        fullWidth
+                        variant={isInRange ? "contained" : "outlined"}
+                        onClick={() => handleTimeSlotClick(slot)}
+                        disabled={!isAvailable}
+                        sx={{
+                          py: 1.5,
+                          borderRadius: '12px',
+                          fontWeight: 600,
+                          ...(isInRange ? {
+                            background: 'linear-gradient(90deg, #6a11cb 0%, #2575fc 100%)',
+                            color: 'white',
+                            boxShadow: '0 4px 8px rgba(37, 117, 252, 0.3)'
+                          } : {}),
+                          ...(!isAvailable ? {
+                            borderColor: '#aaa',
+                            color: '#aaa',
+                            background: '#f5f5f5',
+                            opacity: 0.7
+                          } : {})
+                        }}
+                      >
+                        <Box sx={{ textAlign: 'center' }}>
+                          <Typography variant="body2" fontWeight="medium">
+                            {slot.start}
+                          </Typography>
+                          {!isAvailable && (
+                            <Typography variant="caption" color="error" sx={{ display: 'block' }}>
+                              BOOKED
+                            </Typography>
+                          )}
+                        </Box>
+                      </Button>
+                    </Grid>
+                  );
+                })
+              ) : (
+                <Grid item xs={12}>
+                  <Box sx={{ 
+                    textAlign: 'center', 
+                    py: 4,
+                    color: 'text.secondary'
+                  }}>
+                    <Schedule sx={{ fontSize: '3rem', mb: 2, opacity: 0.5 }} />
+                    <Typography variant="body1">
+                      No available time slots for this date
+                    </Typography>
+                  </Box>
+                </Grid>
+              )}
+            </Grid>
+          )}
+        </CardContent>
+      </Card>
+    );
+  };
+
   // 2. 取得所有 state
   useEffect(() => {
     VenueService.getAllVenues().then(data => {
@@ -261,17 +513,65 @@
 
   useEffect(() => {
     if (venueId && selectedState) {
-      // 傳 state 參數給後端（如後端支援）
-      CourtService.getBookedDates(venueId, minDate.format('YYYY-MM-DD'), undefined, selectedState)
+      // 使用EventOrganizerService獲取已預訂日期
+      EventOrganizerService.getVenueBookedDates(venueId, minDate.format('YYYY-MM-DD'), undefined, selectedState)
         .then(dates => {
+          console.log('Booked dates received:', dates); // Debug log
           setBookedDates(dates);
         })
-        .catch(() => setBookedDates([]));
+        .catch((error) => {
+          console.error('Error fetching booked dates:', error);
+          setBookedDates([]);
+        });
     } else {
       setBookedDates([]);
     }
   }, [venueId, minDate, selectedState]);
 
+  // 新增：當日期改變時獲取可用時段
+  useEffect(() => {
+    if (formData.date && venueId) {
+      // 重置時間範圍選擇
+      setSelectedTimeRange({ start: null, end: null });
+      
+      // 調試：檢查slot數據
+      EventOrganizerService.debugSlots(venueId, formData.date)
+        .then(debugInfo => {
+          console.log('=== DEBUG SLOTS INFO ===');
+          console.log(debugInfo);
+          console.log('=== END DEBUG ===');
+          
+          // 檢查是否需要生成slots
+          const needsSlots = debugInfo.courts.some(court => court.totalSlots === 0);
+          if (needsSlots) {
+            console.log('No slots found for this date, generating slots...');
+            return EventOrganizerService.generateSlots(venueId, formData.date);
+          }
+        })
+        .then(generateResult => {
+          if (generateResult) {
+            console.log('Slots generated:', generateResult);
+            // 重新獲取可用時段
+            fetchAvailableSlots(formData.date);
+          } else {
+            // 直接獲取可用時段
+            fetchAvailableSlots(formData.date);
+          }
+        })
+        .catch(error => {
+          console.error('Debug/generate slots error:', error);
+          // 即使出錯也嘗試獲取可用時段
+          fetchAvailableSlots(formData.date);
+        });
+    }
+  }, [formData.date, venueId]);
+
+  // Check if selected date is booked
+  const isSelectedDateBooked = useMemo(() => {
+    if (!formData.date || bookedDates.length === 0) return false;
+    return bookedDateSet.has(formData.date);
+  }, [formData.date, bookedDateSet]);
+
   const handleInputChange = (field) => (event) => {
     if (field === 'price') {
       const value = event.target.value;
@@ -327,12 +627,7 @@
     e.preventDefault?.();
     setSubmitting(true);
     setError('');
-    // Price validation
-    if (formData.price !== '' && parseFloat(formData.price) < 0) {
-      setPriceError('Price cannot be negative');
-      setSubmitting(false);
-      return;
-    }
+    
     try {
       const eventData = {
         title: formData.title,
@@ -341,16 +636,16 @@
         eventType: formData.eventType,
         capacity: parseInt(formData.capacity, 10),
         schedule: JSON.stringify(scheduleArray),
-        feeAmount: formData.price ? parseFloat(formData.price) : 0,
+        feeAmount: formData.price ? parseFloat(formData.price) : 0, // 參與者付費金額
         status: formData.status || 'PUBLISHED',
-        location: venuesByState.find(v => v.id === venueId)?.location || '', // 新增：從選中的 venue 獲取 location
+        location: venuesByState.find(v => v.id === venueId)?.location || '',
         courtIds: courtIds,
         venueId: venueId || null,
         sendNotification: formData.sendNotification
       };
+      
       await EventService.createEvent(eventData);
-      setShowSuccess(true); // 顯示成功訊息
-      // 不要自動跳頁
+      setShowSuccess(true);
     } catch (err) {
       let errorMsg = "Failed to create event.";
       if (err.response?.data) {
@@ -369,7 +664,8 @@
   // Only check currentUser role for access
   const isEventOrganizer = currentUser?.role === 'EVENTORGANIZER' || 
                           currentUser?.role === 'EventOrganizer' || 
-                          currentUser?.userType === 'EventOrganizer';
+                          currentUser?.userType === 'EventOrganizer' ||
+                          currentUser?.userType === 'EVENTORGANIZER';
   
   if (!isEventOrganizer) {
     return (
@@ -408,7 +704,7 @@
             </Typography>
             <Button
               variant="contained"
-              onClick={() => navigate('/events')}
+              onClick={() => navigate('/event-organizer')}
               sx={{
                 background: 'linear-gradient(45deg, #667eea, #764ba2)',
                 borderRadius: 2,
@@ -431,26 +727,50 @@
 
   return (
     <LocalizationProvider dateAdapter={AdapterDayjs}>
-      <Box sx={{ minHeight: '100vh', background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)', py: 4 }}>
-        <Container maxWidth="md">
-          <Stepper activeStep={activeStep} alternativeLabel sx={{ mb: 4 }}>
+      <Box sx={{ 
+        minHeight: embedded ? 'auto' : '100vh', 
+        background: embedded ? 'transparent' : 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)', 
+        py: embedded ? 0 : 4,
+        display: 'flex',
+        justifyContent: embedded ? 'center' : 'flex-end'
+      }}>
+        <Container maxWidth={embedded ? 'md' : 'sm'} sx={{ mx: embedded ? 'auto' : 'initial', ml: embedded ? 'auto' : 'auto', mr: embedded ? 'auto' : { xs: 0, md: 4 } }}>
+          <Stepper activeStep={activeStep} alternativeLabel sx={{ mb: 3 }}>
             {steps.map(label => <Step key={label}><StepLabel>{label}</StepLabel></Step>)}
           </Stepper>
-          <Paper elevation={24} sx={{ p: 4, borderRadius: 4, background: 'rgba(255,255,255,0.95)' }}>
+          <Paper elevation={embedded ? 6 : 20} sx={{ p: 3, borderRadius: 3, background: 'rgba(255,255,255,0.95)' }}>
+            {/* Back to Event Button */}
+            <Box sx={{ display: 'flex', justifyContent: 'flex-start', mb: 2 }}>
+              <Button
+                variant="outlined"
+                onClick={() => navigate('/event-organizer')}
+                startIcon={<ArrowBack />}
+                sx={{
+                  color: '#667eea',
+                  borderColor: '#667eea',
+                  '&:hover': {
+                    borderColor: '#5a6fd8',
+                    backgroundColor: 'rgba(102, 126, 234, 0.04)'
+                  }
+                }}
+              >
+                Back to Event
+              </Button>
+            </Box>
             {showSuccess ? (
               <Box textAlign="center" py={6}>
                 <Typography variant="h5" color="success.main" gutterBottom>
                   Event created successfully!
                 </Typography>
                 <Typography variant="body1" sx={{ mb: 2 }}>
-                  Your event has been created and is now live.
+                  Your event has been created and is now live. Participants will pay the registration fee when they sign up.
                 </Typography>
                 {formData.sendNotification && (
                   <Alert severity="info" sx={{ mb: 3 }}>
                     📧 Email notifications have been sent to all registered users.
                   </Alert>
                 )}
-                <Button variant="contained" color="primary" onClick={() => navigate('/events')}>
+                <Button variant="contained" color="primary" onClick={() => navigate('/event-organizer')}>
                   Go to Event List
                 </Button>
               </Box>
@@ -487,7 +807,7 @@
                         {categories.map(category => <MenuItem key={category} value={category}>{category}</MenuItem>)}
                       </Select>
                     </FormControl>
-                    <TextField label="Price" type="number" fullWidth value={formData.price} onChange={handleInputChange('price')} sx={{ mb: 2 }} />
+                    <TextField label="Participant Registration Fee ($)" type="number" fullWidth value={formData.price} onChange={handleInputChange('price')} sx={{ mb: 2 }} />
                     {/* 賽程、說明、日期、時間、容量等欄位照原本保留 */}
                     <Box sx={{ mb: 2 }}>
                       <Grid container spacing={2} alignItems="center">
@@ -528,17 +848,26 @@
                     <DatePicker
                       label="Date"
                       value={formData.date ? dayjs(formData.date) : null}
-                      onChange={date => setFormData({ ...formData, date: date ? date.format('YYYY-MM-DD') : '' })}
+                      onChange={date => {
+                        const newDate = date ? date.format('YYYY-MM-DD') : '';
+                        console.log('Date selected:', newDate, 'Booked dates:', bookedDateSet);
+                        setFormData({ ...formData, date: newDate, time: '', endTime: '' });
+                      }}
                       minDate={minDate}
                       shouldDisableDate={date => {
                         const formatted = date.format('YYYY-MM-DD');
-                        // console.log('Checking date:', formatted, 'booked:', bookedDateSet);
-                        return bookedDateSet.has(formatted);
+                        const isBooked = bookedDateSet.has(formatted);
+                        console.log('Checking date:', formatted, 'isBooked:', isBooked, 'bookedDateSet:', Array.from(bookedDateSet));
+                        return isBooked;
                       }}
                       renderInput={params => (
                         <TextField {...params} fullWidth sx={{ mb: 2 }} />
                       )}
                     />
+                    
+                    {/* 新增：顯示time slots */}
+                    {renderTimeSlots()}
+                    
                     <TextField label="Start Time" type="time" fullWidth value={formData.time} onChange={handleInputChange('time')} sx={{ mb: 2 }} InputLabelProps={{ shrink: true }} />
                     <TextField label="End Time" type="time" fullWidth value={formData.endTime} onChange={handleInputChange('endTime')} sx={{ mb: 2 }} InputLabelProps={{ shrink: true }} />
                     {venueId && (
@@ -548,6 +877,15 @@
                         </Alert>
                       </Box>
                     )}
+                    
+                    {isSelectedDateBooked && (
+                      <Box sx={{ mt: 2, mb: 2 }}>
+                        <Alert severity="error">
+                          ⚠️ This date is already booked for this venue. Please select a different date.
+                        </Alert>
+                      </Box>
+                    )}
+                    
                     <TextField
                       label="Capacity"
                       type="number"
@@ -571,7 +909,16 @@
                     />
                     <Box mt={2} display="flex" gap={2}>
                       <Button onClick={handleBack}>Back</Button>
-                      <Button variant="contained" onClick={handleNext} disabled={!(formData.title && formData.eventType && formData.date && formData.time && formData.endTime && formData.capacity && formData.capacity <= venueMaxCapacity && venueMaxCapacity > 0)}>Next</Button>
+                      <Button 
+                        variant="contained" 
+                        onClick={handleNext} 
+                        disabled={
+                          !(formData.title && formData.eventType && formData.date && formData.time && formData.endTime && formData.capacity && formData.capacity <= venueMaxCapacity && venueMaxCapacity > 0) ||
+                          isSelectedDateBooked
+                        }
+                      >
+                        Next
+                      </Button>
                     </Box>
                   </Box>
                 )}
@@ -584,7 +931,7 @@
                       <li>Location: {venuesByState.find(v => v.id === venueId)?.location}</li>
                       <li>Event Name: {formData.title}</li>
                       <li>Type: {formData.eventType}</li>
-                      <li>Price: {formData.price}</li>
+                      <li>Participant Fee: ${formData.price || 0}</li>
                       <li>Schedule: {JSON.stringify(scheduleArray)}</li>
                       <li>Description: {formData.description}</li>
                       <li>Date: {formData.date}</li>
@@ -594,6 +941,27 @@
                     </ul>
                     
                     <Box sx={{ mt: 3, p: 2, bgcolor: 'info.light', borderRadius: 1 }}>
+                      <Typography variant="body2" sx={{ mb: 2, fontWeight: 'bold' }}>
+                        💡 Payment Model: You create events for free. Participants pay the registration fee when they sign up.
+                      </Typography>
+                      
+                      {formData.price > 0 && (
+                        <Box sx={{ mb: 2, p: 2, bgcolor: 'warning.light', borderRadius: 1 }}>
+                          <Typography variant="body2" sx={{ fontWeight: 'bold', mb: 1 }}>
+                            📊 Revenue Breakdown (per participant):
+                          </Typography>
+                          <Typography variant="body2">
+                            • Participant pays: ${formData.price}
+                          </Typography>
+                          <Typography variant="body2">
+                            • Platform fee: ${(formData.price * 0.1).toFixed(2)} (10% of ${formData.price})
+                          </Typography>
+                          <Typography variant="body2" sx={{ fontWeight: 'bold', color: 'success.main' }}>
+                            • You receive: ${(formData.price - (formData.price * 0.1)).toFixed(2)}
+                          </Typography>
+                        </Box>
+                      )}
+                      
                       <FormControlLabel
                         control={
                           <Checkbox
Index: pickleball-frontend/src/components/common/Navbar.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useState, useEffect, useMemo, useCallback } from 'react';\r\nimport {\r\n  AppBar,\r\n  Toolbar,\r\n  Typography,\r\n  Button,\r\n  Box,\r\n  Avatar,\r\n  Container,\r\n  Divider,\r\n  useMediaQuery,\r\n  IconButton,\r\n  Skeleton,\r\n  useTheme,\r\n  Tooltip\r\n} from '@mui/material';\r\nimport {\r\n  SportsTennis as CourtsIcon,\r\n  CalendarToday as BookIcon,\r\n  Home as HomeIcon,\r\n  LocalOffer as DealsIcon,\r\n  ExitToApp as LogoutIcon,\r\n  Group as ManageRequestsIcon,\r\n  Group,\r\n  Dashboard as DashboardIcon,\r\n  Menu as MenuIcon,\r\n  Mail as MailIcon,\r\n  Help as HelpIcon,\r\n  People as PeopleIcon,\r\n  Assignment as BookingIcon,\r\n  Event as EventIcon,\r\n  Create as CreateEventIcon\r\n} from '@mui/icons-material';\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\nimport { useAuth } from '../../context/AuthContext';\r\nimport { useTheme as useCustomTheme } from '../../context/ThemeContext';\r\nimport MobileDrawer from './MobileDrawer';\r\nimport ProfileMenu from './ProfileMenu';\r\n\r\nfunction Navbar() {\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  const { currentUser, logout, isAuthenticated } = useAuth();\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n  const [activeTab, setActiveTab] = useState('');\r\n  const [profileImage, setProfileImage] = useState(null);\r\n  const [isAdminRoute, setIsAdminRoute] = useState(false);\r\n  const [mobileOpen, setMobileOpen] = useState(false);\r\n  const isMobile = useMediaQuery('(max-width:900px)');\r\n  const theme = useTheme();\r\n  const customTheme = useCustomTheme();\r\n\r\n  const username = currentUser?.username || '';\r\n  const role = currentUser?.role || '';\r\n  const isLoggedIn = isAuthenticated();\r\n\r\n  const getUsernameInitial = () => {\r\n    return username ? username.charAt(0).toUpperCase() : '';\r\n  };\r\n\r\n  useEffect(() => {\r\n    const path = location.pathname;\r\n    setIsAdminRoute(path.startsWith('/admin'));\r\n\r\n    if (path === '/') setActiveTab('home');\r\n    else if (path === '/courts' || path.startsWith('/courts/')) setActiveTab('courts');\r\n    else if (path === '/book' || path.startsWith('/book/')) setActiveTab('book');\r\n    else if (path === '/events' || path.startsWith('/events/')) setActiveTab('events');\r\n    else if (path === '/deals' || path.startsWith('/deals/')) setActiveTab('deals');\r\n    else if (path === '/admin' || path.startsWith('/admin/')) setActiveTab('admin');\r\n    else if (path === '/profile' || path.startsWith('/profile/')) setActiveTab('');\r\n    else if (path === '/messages' || path.startsWith('/messages/')) setActiveTab('messages');\r\n    else if (path === '/helpdesk' || path.startsWith('/helpdesk/')) setActiveTab('helpdesk');\r\n    else if (path === '/friendly-matches' || path.startsWith('/friendly-matches/')) setActiveTab('friendly-matches');\r\n    else if (path === '/coaching' || path.startsWith('/coaching/')) setActiveTab('coaching');\r\n  }, [location]);\r\n\r\n  useEffect(() => {\r\n    const handleProfileImageChange = (event) => {\r\n      setProfileImage(event.detail?.profileImage || null);\r\n    };\r\n    window.addEventListener('profileImageChanged', handleProfileImageChange);\r\n    return () => {\r\n      window.removeEventListener('profileImageChanged', handleProfileImageChange);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setProfileImage(currentUser?.profileImage || null);\r\n  }, [currentUser]);\r\n\r\n  useEffect(() => {\r\n    handleCloseMenu();\r\n    setMobileOpen(false);\r\n  }, [location]);\r\n\r\n  const navigateTo = useCallback((path, id) => {\r\n    // 检查是否是私有页面（需要登录）\r\n    const isPrivateItem = ['book', 'deals', 'helpdesk', 'messages', 'create-event', 'admin', 'coaching'].includes(id);\r\n    \r\n    if (!isLoggedIn && isPrivateItem) {\r\n      // 未登录用户点击私有页面时重定向到登录页面\r\n      navigate('/login');\r\n    } else {\r\n      navigate(path);\r\n      setActiveTab(id);\r\n    }\r\n    setMobileOpen(false);\r\n  }, [navigate, isLoggedIn]);\r\n\r\n  const handleDrawerToggle = useCallback(() => {\r\n    setMobileOpen(prev => !prev);\r\n  }, []);\r\n\r\n  const handleLogout = useCallback(() => {\r\n    logout();\r\n    navigate('/login');\r\n    handleCloseMenu();\r\n  }, [logout, navigate]);\r\n\r\n  const handleOpenMenu = useCallback((event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  }, []);\r\n\r\n  const handleCloseMenu = useCallback(() => {\r\n    setAnchorEl(null);\r\n  }, []);\r\n\r\n  const navItems = useMemo(() => {\r\n    // 未登录用户可以访问的页面\r\n    const publicItems = [\r\n      { id: 'home', label: 'Home', icon: <HomeIcon />, path: '/' },\r\n      { id: 'courts', label: 'Courts', icon: <CourtsIcon />, path: '/courts' },\r\n      { id: 'events', label: 'Events', icon: <EventIcon />, path: '/events' },\r\n      { id: 'friendly-matches', label: 'Friendly Match', icon: <Group />, path: '/friendly-matches' },\r\n    ];\r\n\r\n    // 需要登录才能访问的页面\r\n    const privateItems = [\r\n      { id: 'book', label: 'Book', icon: <BookIcon />, path: '/book' },\r\n      { id: 'deals', label: 'Deals', icon: <DealsIcon />, path: '/deals' },\r\n      { id: 'helpdesk', label: 'Help', icon: <HelpIcon />, path: '/helpdesk' },\r\n      { id: 'coaching', label: 'Coaching', icon: <BookIcon />, path: '/coaching/browse' },\r\n    ];\r\n\r\n    let items = [...publicItems];\r\n    \r\n    // 如果已登录，添加私有页面\r\n    if (isLoggedIn) {\r\n      items = [...items, ...privateItems];\r\n      \r\n      // 添加EventOrganizer特有的页面\r\n      if (role === 'EventOrganizer' || currentUser?.userType === 'EventOrganizer') {\r\n        items.splice(3, 0, {\r\n          id: 'create-event',\r\n          label: 'Create Event',\r\n          icon: <CreateEventIcon />,\r\n          path: '/events/create'\r\n        });\r\n      }\r\n      \r\n      // 添加Messages页面（非管理员）\r\n      if (role !== 'ADMIN') {\r\n        items.push({ id: 'messages', label: 'Messages', icon: <MailIcon />, path: '/messages' });\r\n      }\r\n      \r\n      // 添加管理员页面\r\n      if (role === 'ADMIN') {\r\n        items.push({ id: 'admin', label: 'Manage Requests', icon: <ManageRequestsIcon />, path: '/admin' });\r\n      }\r\n    } else {\r\n      // 未登录用户只显示公开页面\r\n      items = [...publicItems];\r\n    }\r\n    \r\n    return items;\r\n  }, [isLoggedIn, role, currentUser]);\r\n\r\n  const adminNavItems = useMemo(() => [\r\n    { id: 'dashboard', label: 'Dashboard', icon: <DashboardIcon />, path: '/admin/dashboard' },\r\n    { id: 'users', label: 'Users', icon: <PeopleIcon />, path: '/admin/users' },\r\n    { id: 'bookings', label: 'Bookings', icon: <BookingIcon />, path: '/admin/bookings' },\r\n    { id: 'courts-admin', label: 'Courts', icon: <CourtsIcon />, path: '/admin/courts' },\r\n  ], []);\r\n\r\n  const renderNavItems = (items) => (\r\n    <>\r\n      {items.map((item) => {\r\n        // 检查是否是私有页面（需要登录）\r\n        const isPrivateItem = ['book', 'deals', 'helpdesk', 'messages', 'create-event', 'admin', 'coaching'].includes(item.id);\r\n        \r\n        const button = (\r\n          <Button\r\n            key={item.id}\r\n            startIcon={!isMobile && item.icon}\r\n            onClick={() => navigateTo(item.path, item.id)}\r\n            disabled={!isLoggedIn && isPrivateItem}\r\n            sx={{\r\n              mx: 1,\r\n              px: 2,\r\n              color: activeTab === item.id\r\n                ? theme.palette.primary.main\r\n                : theme.palette.text.primary,\r\n              fontWeight: activeTab === item.id ? 'bold' : 'normal',\r\n              position: 'relative',\r\n              transition: 'color 0.2s ease, font-weight 0.2s ease',\r\n              opacity: !isLoggedIn && isPrivateItem ? 0.6 : 1,\r\n              '&:after': {\r\n                content: '\"\"',\r\n                position: 'absolute',\r\n                bottom: '-10px',\r\n                left: 0,\r\n                right: 0,\r\n                height: activeTab === item.id ? '3px' : 0,\r\n                borderRadius: '3px',\r\n                backgroundColor: theme.palette.primary.main,\r\n                transform: activeTab === item.id ? 'scaleX(1)' : 'scaleX(0.8)',\r\n                transition: 'height 0.3s ease, transform 0.3s ease',\r\n              },\r\n              '&:hover': {\r\n                color: theme.palette.primary.main,\r\n                backgroundColor: 'transparent',\r\n                '&:after': {\r\n                  height: '2px',\r\n                  backgroundColor: theme.palette.primary.main\r\n                }\r\n              },\r\n              '&:disabled': {\r\n                color: theme.palette.text.disabled,\r\n                '&:hover': {\r\n                  backgroundColor: 'transparent',\r\n                  '&:after': {\r\n                    height: '2px',\r\n                    backgroundColor: theme.palette.text.disabled\r\n                  }\r\n                }\r\n              }\r\n            }}\r\n          >\r\n            {item.label}\r\n          </Button>\r\n        );\r\n\r\n        // 为未登录用户显示工具提示\r\n        if (!isLoggedIn && isPrivateItem) {\r\n          return (\r\n            <Tooltip \r\n              key={item.id}\r\n              title=\"Login to access this feature\" \r\n              arrow\r\n              placement=\"bottom\"\r\n            >\r\n              {button}\r\n            </Tooltip>\r\n          );\r\n        }\r\n\r\n        return button;\r\n      })}\r\n    </>\r\n  );\r\n\r\n  if (location.pathname.startsWith('/admin/login')) {\r\n    return null;\r\n  }\r\n\r\n\r\n\r\n  const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8081';\r\n\r\n  return (\r\n    <AppBar\r\n      position=\"fixed\"\r\n      elevation={2}\r\n      sx={{\r\n        backgroundColor: theme.palette.background.paper,\r\n        color: theme.palette.text.primary,\r\n        boxShadow: theme.shadows[2],\r\n        borderBottom: theme.palette.mode === 'dark' ? '1px solid #23262F' : '1px solid #e0e0e0',\r\n        transition: 'background-color 0.3s, color 0.3s',\r\n        zIndex: (muiTheme) => muiTheme.zIndex.drawer + 1\r\n      }}\r\n    >\r\n      <Container maxWidth={false} sx={{ maxWidth: '1200px', width: '100%', mx: 'auto', px: { xs: 1, sm: 2, lg: 3 } }}>\r\n        <Toolbar sx={{\r\n          justifyContent: 'space-between',\r\n          py: { xs: 1, sm: 1.5 },\r\n          px: { xs: 1, sm: 0 }\r\n        }}>\r\n          <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n            {isMobile && (\r\n              <IconButton\r\n                color=\"inherit\"\r\n                aria-label=\"open drawer\"\r\n                edge=\"start\"\r\n                onClick={handleDrawerToggle}\r\n                sx={{ mr: 1 }}\r\n              >\r\n                <MenuIcon />\r\n              </IconButton>\r\n            )}\r\n            <Box\r\n              onClick={() => navigateTo(isAdminRoute ? '/admin/dashboard' : '/', 'home')}\r\n              sx={{\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                cursor: 'pointer',\r\n              }}\r\n            >\r\n              {isAdminRoute ? (\r\n                <Typography\r\n                  variant={isMobile ? \"h5\" : \"h4\"}\r\n                  sx={{\r\n                    fontWeight: 'bold',\r\n                    background: `linear-gradient(45deg, ${theme.palette.primary.main}, ${theme.palette.primary.dark})`,\r\n                    WebkitBackgroundClip: 'text',\r\n                    WebkitTextFillColor: 'transparent',\r\n                    letterSpacing: 1.5,\r\n                    fontFamily: '\"Roboto Condensed\", sans-serif'\r\n                  }}\r\n                >\r\n                  ADMIN PORTAL\r\n                </Typography>\r\n              ) : (\r\n                <Box\r\n                  component=\"img\"\r\n                  src={`${process.env.PUBLIC_URL}/web-name.png`}\r\n                  alt=\"Brand\"\r\n                  sx={{\r\n                    height: isMobile ? 28 : 36,\r\n                    display: 'block'\r\n                  }}\r\n                />\r\n              )}\r\n            </Box>\r\n          </Box>\r\n\r\n          <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n            {!isLoggedIn ? (\r\n              <>\r\n                {!isMobile && !isAdminRoute && (\r\n                  <>\r\n                    <Button\r\n                      variant=\"outlined\"\r\n                      onClick={() => navigate('/login')}\r\n                      sx={{\r\n                        mx: 1,\r\n                        borderColor: theme.palette.primary.main,\r\n                        color: theme.palette.primary.main,\r\n                        '&:hover': {\r\n                          backgroundColor: theme.palette.primary.light + '20',\r\n                          borderColor: theme.palette.primary.dark\r\n                        }\r\n                      }}\r\n                    >\r\n                      Login\r\n                    </Button>\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      onClick={() => navigate('/register')}\r\n                      sx={{\r\n                        mx: 1,\r\n                        backgroundColor: theme.palette.primary.main,\r\n                        '&:hover': { backgroundColor: theme.palette.primary.dark }\r\n                      }}\r\n                    >\r\n                      Register\r\n                    </Button>\r\n                  </>\r\n                )}\r\n\r\n              </>\r\n            ) : (\r\n              <Box\r\n                onClick={handleOpenMenu}\r\n                sx={{\r\n                  display: 'flex',\r\n                  alignItems: 'center',\r\n                  cursor: 'pointer',\r\n                  '&:hover': {\r\n                    backgroundColor: theme.palette.action.hover,\r\n                    borderRadius: '4px'\r\n                  },\r\n                  p: 1,\r\n                  transition: 'background-color 0.3s ease',\r\n                  '&:active': {\r\n                    transform: 'scale(0.95)',\r\n                    transition: 'transform 0.1s ease'\r\n                  }\r\n                }}\r\n                role=\"button\"\r\n                aria-label=\"User menu\"\r\n                tabIndex={0}\r\n                onKeyPress={(e) => e.key === 'Enter' && handleOpenMenu(e)}\r\n              >\r\n                {profileImage === undefined ? (\r\n                  <Skeleton variant=\"circular\" width={40} height={40} />\r\n                ) : (\r\n                  <Avatar\r\n                    src={profileImage ? `${API_URL}/uploads/${profileImage}?ts=${Date.now()}` : null}\r\n                    onError={e => {\r\n                      e.target.onerror = null;\r\n                      e.target.src = null;\r\n                    }}\r\n                    sx={{\r\n                      width: 40,\r\n                      height: 40,\r\n                      bgcolor: theme.palette.primary.main,\r\n                      fontSize: '1.2rem',\r\n                      fontWeight: 'bold'\r\n                    }}\r\n                  >\r\n                    {!profileImage && getUsernameInitial()}\r\n                  </Avatar>\r\n                )}\r\n                {!isMobile && (\r\n                  <Typography variant=\"body1\" sx={{ fontWeight: 500, ml: 1 }}>\r\n                    {username ? `Hi, ${username}` : 'Profile'}\r\n                  </Typography>\r\n                )}\r\n              </Box>\r\n            )}\r\n          </Box>\r\n        </Toolbar>\r\n\r\n        <Divider sx={{ backgroundColor: theme.palette.divider, mb: 1 }} />\r\n\r\n        {!isMobile && (\r\n          <Box sx={{\r\n            display: 'flex',\r\n            justifyContent: 'left',\r\n            py: 1,\r\n            position: 'relative'\r\n          }}>\r\n            {renderNavItems(isAdminRoute ? adminNavItems : navItems)}\r\n          </Box>\r\n        )}\r\n      </Container>\r\n\r\n      {isMobile && (\r\n        <MobileDrawer\r\n          isAdminRoute={isAdminRoute}\r\n          navItems={navItems}\r\n          adminNavItems={adminNavItems}\r\n          activeTab={activeTab}\r\n          navigateTo={navigateTo}\r\n          isLoggedIn={isLoggedIn}\r\n          profileImage={profileImage}\r\n          username={username}\r\n          getUsernameInitial={getUsernameInitial}\r\n          handleLogout={handleLogout}\r\n          navigate={navigate}\r\n          mobileOpen={mobileOpen}\r\n          handleDrawerToggle={handleDrawerToggle}\r\n        />\r\n      )}\r\n\r\n      <ProfileMenu\r\n        anchorEl={anchorEl}\r\n        handleCloseMenu={handleCloseMenu}\r\n        profileImage={profileImage}\r\n        isAdminRoute={isAdminRoute}\r\n        getUsernameInitial={getUsernameInitial}\r\n        navigate={navigate}\r\n        role={role}\r\n        handleLogout={handleLogout}\r\n        API_URL={API_URL}\r\n      />\r\n    </AppBar>\r\n  );\r\n}\r\n\r\nexport default Navbar;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball-frontend/src/components/common/Navbar.jsx b/pickleball-frontend/src/components/common/Navbar.jsx
--- a/pickleball-frontend/src/components/common/Navbar.jsx	(revision c178c1d9e80f6815b91226b2d10f391611dcb6b4)
+++ b/pickleball-frontend/src/components/common/Navbar.jsx	(date 1754936256228)
@@ -12,7 +12,8 @@
   IconButton,
   Skeleton,
   useTheme,
-  Tooltip
+  Tooltip,
+  alpha
 } from '@mui/material';
 import {
   SportsTennis as CourtsIcon,
@@ -96,7 +97,7 @@
 
   const navigateTo = useCallback((path, id) => {
     // 检查是否是私有页面（需要登录）
-    const isPrivateItem = ['book', 'deals', 'helpdesk', 'messages', 'create-event', 'admin', 'coaching'].includes(id);
+    const isPrivateItem = ['messages', 'create-event', 'admin', 'coaching'].includes(id);
     
     if (!isLoggedIn && isPrivateItem) {
       // 未登录用户点击私有页面时重定向到登录页面
@@ -137,9 +138,6 @@
 
     // 需要登录才能访问的页面
     const privateItems = [
-      { id: 'book', label: 'Book', icon: <BookIcon />, path: '/book' },
-      { id: 'deals', label: 'Deals', icon: <DealsIcon />, path: '/deals' },
-      { id: 'helpdesk', label: 'Help', icon: <HelpIcon />, path: '/helpdesk' },
       { id: 'coaching', label: 'Coaching', icon: <BookIcon />, path: '/coaching/browse' },
     ];
 
@@ -187,7 +185,7 @@
     <>
       {items.map((item) => {
         // 检查是否是私有页面（需要登录）
-        const isPrivateItem = ['book', 'deals', 'helpdesk', 'messages', 'create-event', 'admin', 'coaching'].includes(item.id);
+        const isPrivateItem = ['messages', 'create-event', 'admin', 'coaching'].includes(item.id);
         
         const button = (
           <Button
@@ -371,54 +369,75 @@
 
               </>
             ) : (
-              <Box
-                onClick={handleOpenMenu}
-                sx={{
-                  display: 'flex',
-                  alignItems: 'center',
-                  cursor: 'pointer',
-                  '&:hover': {
-                    backgroundColor: theme.palette.action.hover,
-                    borderRadius: '4px'
-                  },
-                  p: 1,
-                  transition: 'background-color 0.3s ease',
-                  '&:active': {
-                    transform: 'scale(0.95)',
-                    transition: 'transform 0.1s ease'
-                  }
-                }}
-                role="button"
-                aria-label="User menu"
-                tabIndex={0}
-                onKeyPress={(e) => e.key === 'Enter' && handleOpenMenu(e)}
-              >
-                {profileImage === undefined ? (
-                  <Skeleton variant="circular" width={40} height={40} />
-                ) : (
-                  <Avatar
-                    src={profileImage ? `${API_URL}/uploads/${profileImage}?ts=${Date.now()}` : null}
-                    onError={e => {
-                      e.target.onerror = null;
-                      e.target.src = null;
-                    }}
-                    sx={{
-                      width: 40,
-                      height: 40,
-                      bgcolor: theme.palette.primary.main,
-                      fontSize: '1.2rem',
-                      fontWeight: 'bold'
-                    }}
-                  >
-                    {!profileImage && getUsernameInitial()}
-                  </Avatar>
-                )}
-                {!isMobile && (
-                  <Typography variant="body1" sx={{ fontWeight: 500, ml: 1 }}>
-                    {username ? `Hi, ${username}` : 'Profile'}
-                  </Typography>
-                )}
-              </Box>
+              <>
+                {/* Help Button */}
+                <Tooltip title="Help & Support" placement="bottom">
+                  <Button
+                    onClick={() => navigate('/helpdesk')}
+                    sx={{
+                      mx: 1,
+                      color: theme.palette.text.primary,
+                      textTransform: 'none',
+                      fontWeight: 500,
+                      fontSize: '0.875rem',
+                      '&:hover': {
+                        backgroundColor: alpha(theme.palette.primary.main, 0.1),
+                      }
+                    }}
+                  >
+                    HELP
+                  </Button>
+                </Tooltip>
+                
+                <Box
+                  onClick={handleOpenMenu}
+                  sx={{
+                    display: 'flex',
+                    alignItems: 'center',
+                    cursor: 'pointer',
+                    '&:hover': {
+                      backgroundColor: theme.palette.action.hover,
+                      borderRadius: '4px'
+                    },
+                    p: 1,
+                    transition: 'background-color 0.3s ease',
+                    '&:active': {
+                      transform: 'scale(0.95)',
+                      transition: 'transform 0.1s ease'
+                    }
+                  }}
+                  role="button"
+                  aria-label="User menu"
+                  tabIndex={0}
+                  onKeyPress={(e) => e.key === 'Enter' && handleOpenMenu(e)}
+                >
+                  {profileImage === undefined ? (
+                    <Skeleton variant="circular" width={40} height={40} />
+                  ) : (
+                    <Avatar
+                      src={profileImage ? `${API_URL}/uploads/${profileImage}?ts=${Date.now()}` : null}
+                      onError={e => {
+                        e.target.onerror = null;
+                        e.target.src = null;
+                      }}
+                      sx={{
+                        width: 40,
+                        height: 40,
+                        bgcolor: theme.palette.primary.main,
+                        fontSize: '1.2rem',
+                        fontWeight: 'bold'
+                      }}
+                    >
+                      {!profileImage && getUsernameInitial()}
+                    </Avatar>
+                  )}
+                  {!isMobile && (
+                    <Typography variant="body1" sx={{ fontWeight: 500, ml: 1 }}>
+                      {username ? `Hi, ${username}` : 'Profile'}
+                    </Typography>
+                  )}
+                </Box>
+              </>
             )}
           </Box>
         </Toolbar>
Index: pickleball-frontend/src/components/event/EventPage.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useState, useEffect } from 'react';\r\nimport api from '../../service/api';\r\nimport EventService from '../../service/EventService';\r\nimport { useAuth } from '../../context/AuthContext';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport {\r\n  Container,\r\n  Typography,\r\n  Grid,\r\n  Card,\r\n  CardContent,\r\n  CardMedia,\r\n  CardActions,\r\n  Button,\r\n  Chip,\r\n  Box,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  IconButton,\r\n  Avatar,\r\n  Divider,\r\n  Paper,\r\n  CircularProgress,\r\n  Alert,\r\n  Pagination,\r\n  TextField,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  FormHelperText,\r\n  useTheme,\r\n  alpha\r\n} from '@mui/material';\r\nimport {\r\n  CalendarToday,\r\n  LocationOn,\r\n  People,\r\n  AttachMoney,\r\n  Close,\r\n  Favorite,\r\n  FavoriteBorder\r\n} from '@mui/icons-material';\r\nimport { useLocation } from 'react-router-dom';\r\nimport FriendlyMatchPage from './FriendlyMatchPage';\r\nimport ThemedCard from '../common/ThemedCard';\r\n\r\nconst EventPage = () => {\r\n  const [events, setEvents] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [selectedEvent, setSelectedEvent] = useState(null);\r\n  const [favorites, setFavorites] = useState(new Set());\r\n  const [showRegisterDialog, setShowRegisterDialog] = useState(false);\r\n  const [registering, setRegistering] = useState(false);\r\n  const [registerSuccess, setRegisterSuccess] = useState(false);\r\n  const [registerError, setRegisterError] = useState('');\r\n  const [registerEvent, setRegisterEvent] = useState(null);\r\n  const [isRegistered, setIsRegistered] = useState(false);\r\n  const [checkingRegistration, setCheckingRegistration] = useState(false);\r\n  const [detailLoading, setDetailLoading] = useState(false);\r\n  const [registeredUsers, setRegisteredUsers] = useState([]);\r\n  const [showDialog, setShowDialog] = useState(false);\r\n  const [showFriendlyMatch, setShowFriendlyMatch] = useState(false);\r\n  const [page, setPage] = useState(1); // MUI 分頁從 1 開始\r\n  const [totalPages, setTotalPages] = useState(1);\r\n  const [venues, setVenues] = useState([]); // 新增 venues 狀態\r\n  const [venueMaxCapacity, setVenueMaxCapacity] = useState(0);\r\n  const [formData, setFormData] = useState({\r\n    title: '',\r\n    eventType: '',\r\n    date: '',\r\n    time: '',\r\n    endTime: '',\r\n    capacity: 1,\r\n    location: '',\r\n    price: 0,\r\n    description: '',\r\n    eligibility: '',\r\n    tags: [],\r\n    schedule: [],\r\n    venue: null,\r\n  });\r\n\r\n  const { currentUser, authToken } = useAuth();\r\n  const isEventOrganizer = currentUser?.role === 'EVENTORGANIZER' || currentUser?.role === 'EventOrganizer' || currentUser?.userType === 'EventOrganizer';\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  const theme = useTheme();\r\n\r\n\r\n  const fetchEvents = async (pageNum = 1) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      console.log('Fetching events for page:', pageNum);\r\n      const eventList = await EventService.getUpcomingEvents(pageNum - 1, 3); // 每頁顯示3個事件\r\n      console.log('Received event list:', eventList);\r\n      console.log('Total pages:', eventList.totalPages);\r\n      console.log('Total elements:', eventList.totalElements);\r\n      console.log('Current page:', eventList.number);\r\n      console.log('Content length:', eventList.content?.length);\r\n      setEvents(eventList.content || eventList);\r\n      setTotalPages(eventList.totalPages || 1);\r\n    } catch (err) {\r\n      console.error('Error fetching events:', err);\r\n      setError('Failed to load events.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchVenues = async () => {\r\n    try {\r\n      const res = await api.get('/api/venues');\r\n      setVenues(res.data);\r\n    } catch (err) {\r\n      console.error('Failed to fetch venues:', err);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Always fetch events on mount or path change\r\n    fetchEvents(page);\r\n    fetchVenues(); // 在 mount 時也 fetch venues\r\n\r\n    // If coming back from edit and refresh flag is set, fetch again\r\n    if (location.state?.refresh) {\r\n      fetchEvents();\r\n      // Clear the state so it doesn't refetch every time\r\n      window.history.replaceState({}, document.title);\r\n    }\r\n  }, [location.pathname, page]); // location from react-router\r\n\r\n  // Update handleEventClick to fetch event details from backend\r\n  const handleEventClick = async (event) => {\r\n    setDetailLoading(true);\r\n    setError(null); // <-- Clear error before starting\r\n    setSelectedEvent(null);\r\n    setIsRegistered(false);\r\n    setCheckingRegistration(true);\r\n    try {\r\n      const eventDetails = await EventService.getEventDetails(event.id);\r\n      console.log('Event details received:', eventDetails);\r\n      console.log('Venue info:', {\r\n        venueId: eventDetails.venueId,\r\n        venueName: eventDetails.venueName,\r\n        venueState: eventDetails.venueState,\r\n        venueLocation: eventDetails.venueLocation\r\n      });\r\n      setSelectedEvent(eventDetails);\r\n      setError(null); // <-- Clear error on success\r\n      const isRegistered = await EventService.isRegisteredForEvent(event.id);\r\n      setIsRegistered(isRegistered === true);\r\n    } catch {\r\n      setIsRegistered(false);\r\n      // setError('Failed to load event details.'); // This line is removed\r\n    } finally {\r\n      setCheckingRegistration(false);\r\n      setDetailLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleCloseDialog = () => {\r\n    setSelectedEvent(null);\r\n    setIsRegistered(false);\r\n  };\r\n\r\n  const toggleFavorite = (eventId) => {\r\n    const newFavorites = new Set(favorites);\r\n    if (newFavorites.has(eventId)) {\r\n      newFavorites.delete(eventId);\r\n    } else {\r\n      newFavorites.add(eventId);\r\n    }\r\n    setFavorites(newFavorites);\r\n  };\r\n\r\n  const getCategoryColor = (category) => {\r\n    const colors = {\r\n      Technology: 'primary',\r\n      Music: 'secondary',\r\n      Business: 'success',\r\n      Arts: 'warning',\r\n      Food: 'error',\r\n      Fitness: 'info',\r\n      Tournament: 'primary',\r\n      League: 'secondary',\r\n      'Friendly Match': 'success',\r\n      Workshop: 'warning',\r\n      Social: 'info',\r\n    };\r\n    return colors[category] || 'default';\r\n  };\r\n\r\n  const formatDate = (dateString) => {\r\n    if (!dateString) return '';\r\n    const d = new Date(dateString);\r\n    if (isNaN(d.getTime())) return '';\r\n    return d.toLocaleDateString('en-US', {\r\n      weekday: 'long',\r\n      year: 'numeric',\r\n      month: 'long',\r\n      day: 'numeric'\r\n    });\r\n  };\r\n\r\n  function formatTime(dateString) {\r\n    if (!dateString) return '';\r\n    const d = new Date(dateString);\r\n    if (isNaN(d.getTime())) return '';\r\n    return d.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\r\n  }\r\n\r\n  const getAvailabilityStatus = (registered, capacity) => {\r\n    const percentage = (registered / capacity) * 100;\r\n    if (percentage >= 90) return { text: 'Almost Full', color: 'error' };\r\n    if (percentage >= 70) return { text: 'Filling Fast', color: 'warning' };\r\n    return { text: 'Available', color: 'success' };\r\n  };\r\n\r\n  // Map backend event fields to UI fields\r\n  const mapEvent = (event) => {\r\n    // Ensure startTime is a string in ISO format\r\n    let startTime = event.startTime;\r\n    if (startTime && typeof startTime === 'object' && startTime.toISOString) {\r\n      startTime = startTime.toISOString();\r\n    } else if (startTime && typeof startTime === 'string' && startTime.includes(' ')) {\r\n      startTime = startTime.replace(' ', 'T');\r\n    }\r\n    return {\r\n      id: event.id,\r\n      title: event.title,\r\n      description: event.description,\r\n      fullDescription: event.fullDescription || event.description,\r\n      date: startTime,\r\n      time: formatTime(startTime),\r\n      location: event.location,\r\n      price: event.price !== undefined ? event.price : (event.feeAmount !== undefined ? event.feeAmount : 0),\r\n      capacity: event.capacity,\r\n      registered: event.registeredCount || event.registered || 0,\r\n      category: event.eventType || event.category,\r\n      image: event.imageUrl || 'https://images.unsplash.com/photo-1540575467063-178a50c2df87?w=400&h=200&fit=crop',\r\n      organizer: event.organizerName || 'Organizer',\r\n      tags: event.tags || [],\r\n      venue: event.venue, // 保留 venue 欄位\r\n    };\r\n  };\r\n\r\n  const handleRegisterClick = (event) => {\r\n    if (!authToken) {\r\n      navigate('/login');\r\n      return;\r\n    }\r\n    // 直接跳轉到支付頁面，傳遞事件詳情\r\n    navigate('/payment', { \r\n      state: { \r\n        eventDetails: event,\r\n        paymentType: 'event_registration'\r\n      } \r\n    });\r\n  };\r\n\r\n  const handleRegisterCancel = () => {\r\n    setShowRegisterDialog(false);\r\n    setRegisterEvent(null);\r\n    setRegisterSuccess(false);\r\n    setRegisterError('');\r\n  };\r\n\r\n  const handleRegisterConfirm = async () => {\r\n    setRegistering(true);\r\n    setRegisterError('');\r\n    try {\r\n      await EventService.registerForEvent(registerEvent.id);\r\n      setRegisterSuccess(true);\r\n      setEvents(prevEvents =>\r\n        prevEvents.map(ev =>\r\n          ev.id === registerEvent.id\r\n            ? { ...ev, registered: (ev.registered || 0) + 1 }\r\n            : ev\r\n        )\r\n      );\r\n      setIsRegistered(true);\r\n      setTimeout(() => {\r\n        setShowRegisterDialog(false);\r\n        setRegisterEvent(null);\r\n        setRegisterSuccess(false);\r\n      }, 2000);\r\n    } catch (err) {\r\n      setRegisterError(\r\n        err.response?.data?.message || err.response?.data || 'Registration failed.'\r\n      );\r\n    } finally {\r\n      setRegistering(false);\r\n    }\r\n  };\r\n\r\n  const handleEditEvent = (event) => {\r\n    navigate(`/events/edit/${event.id}`);\r\n  };\r\n\r\n  const handleCancelEvent = async (event) => {\r\n    try {\r\n      await EventService.deleteEvent(event.id);\r\n      fetchEvents();\r\n      setSelectedEvent(null);\r\n    } catch (err) {\r\n      alert('Failed to cancel event.');\r\n    }\r\n  };\r\n\r\n  const handleViewRegisteredUsers = async (eventId) => {\r\n    const res = await api.get(`/api/event-registration/event/${eventId}/users`);\r\n    setRegisteredUsers(res.data);\r\n    setShowDialog(true);\r\n  };\r\n\r\n  let scheduleItems = [];\r\n  try {\r\n    if (selectedEvent?.schedule) {\r\n      scheduleItems = JSON.parse(selectedEvent.schedule);\r\n    }\r\n  } catch (e) {\r\n    scheduleItems = [];\r\n  }\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\" sx={{ py: 4 }}>\r\n      <Typography variant=\"h3\" component=\"h1\" gutterBottom align=\"center\" sx={{ mb: 4 }}>\r\n        Upcoming Events\r\n      </Typography>\r\n\r\n      {isEventOrganizer && (\r\n        <Box sx={{ display: 'flex', justifyContent: 'flex-end', mb: 2 }}>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={() => navigate('/events/create')}\r\n          >\r\n            Create Event\r\n          </Button>\r\n        </Box>\r\n      )}\r\n\r\n      {loading && (\r\n        <Box sx={{ display: 'flex', justifyContent: 'center', my: 6 }}>\r\n          <CircularProgress />\r\n        </Box>\r\n      )}\r\n      {error && (\r\n        <Alert severity=\"error\" sx={{ mb: 3 }}>{error}</Alert>\r\n      )}\r\n      {!loading && !error && events.length === 0 && (\r\n        <Typography align=\"center\" color=\"text.secondary\" sx={{ mt: 6 }}>\r\n          No upcoming events found.\r\n        </Typography>\r\n      )}\r\n\r\n      <Grid container spacing={3}>\r\n        {events.map((rawEvent) => {\r\n          const event = mapEvent(rawEvent);\r\n          const availability = getAvailabilityStatus(event.registered, event.capacity);\r\n\r\n          return (\r\n            <Grid item xs={12} md={6} lg={4} key={event.id}>\r\n              <ThemedCard\r\n                sx={{\r\n                  height: '100%',\r\n                  display: 'flex',\r\n                  flexDirection: 'column',\r\n                  cursor: 'pointer',\r\n                  transition: 'transform 0.2s, box-shadow 0.2s',\r\n                  '&:hover': {\r\n                    transform: 'translateY(-4px)',\r\n                    boxShadow: 4\r\n                  }\r\n                }}\r\n                onClick={() => handleEventClick(event)}\r\n              >\r\n                <CardMedia\r\n                  component=\"img\"\r\n                  height=\"200\"\r\n                  image={event.image}\r\n                  alt={event.title}\r\n                />\r\n                <CardContent sx={{ flexGrow: 1 }}>\r\n                  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', mb: 1 }}>\r\n                    <Chip\r\n                      label={event.category}\r\n                      color={getCategoryColor(event.category)}\r\n                      size=\"small\"\r\n                    />\r\n                    <IconButton\r\n                      size=\"small\"\r\n                      onClick={e => {\r\n                        e.stopPropagation();\r\n                        toggleFavorite(event.id);\r\n                      }}\r\n                    >\r\n                      {favorites.has(event.id) ? <Favorite color=\"error\" /> : <FavoriteBorder />}\r\n                    </IconButton>\r\n                  </Box>\r\n\r\n                  <Typography variant=\"h6\" component=\"h2\" gutterBottom>\r\n                    {event.title}\r\n                  </Typography>\r\n\r\n                  <Typography variant=\"body2\" color=\"text.secondary\" paragraph>\r\n                    {event.description}\r\n                  </Typography>\r\n\r\n                  <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\r\n                    <CalendarToday sx={{ mr: 1, fontSize: 16 }} />\r\n                    <Typography variant=\"body2\">\r\n                      {formatDate(event.date) || 'No date'} {formatTime(event.time)}\r\n                    </Typography>\r\n                  </Box>\r\n\r\n                  <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\r\n                    <LocationOn sx={{ mr: 1, fontSize: 16 }} />\r\n                    <Typography variant=\"body2\">\r\n                      {typeof event.venue === 'object'\r\n                        ? event.venue?.name\r\n                        : (venues?.find(v => v.id === event.venue)?.name || 'N/A')}\r\n                    </Typography>\r\n                  </Box>\r\n\r\n                  <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\r\n                    <AttachMoney sx={{ mr: 1, fontSize: 16 }} />\r\n                    <Typography variant=\"body2\">\r\n                      {event.price === 0 ? 'Free' : `$${event.price}`}\r\n                    </Typography>\r\n                  </Box>\r\n\r\n                  <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\r\n                    <People sx={{ mr: 1, fontSize: 16 }} />\r\n                    <Typography variant=\"body2\">\r\n                      {event.registered}/{event.capacity} registered\r\n                    </Typography>\r\n                    <Chip\r\n                      label={event.registered >= event.capacity ? 'Fully Booked' : availability.text}\r\n                      color={event.registered >= event.capacity ? 'error' : availability.color}\r\n                      size=\"small\"\r\n                      sx={{ ml: 1 }}\r\n                    />\r\n                  </Box>\r\n                </CardContent>\r\n\r\n                <CardActions sx={{ p: 2, pt: 0 }}>\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    fullWidth\r\n                    onClick={e => {\r\n                      e.stopPropagation();\r\n                      handleEventClick(event);\r\n                    }}\r\n                  >\r\n                    View Details\r\n                  </Button>\r\n                </CardActions>\r\n              </ThemedCard>\r\n            </Grid>\r\n          );\r\n        })}\r\n      </Grid>\r\n\r\n      {totalPages > 1 && (\r\n        <Box sx={{ display: 'flex', justifyContent: 'center', mt: 4 }}>\r\n          <Pagination\r\n            count={totalPages}\r\n            page={page}\r\n            onChange={(e, value) => setPage(value)}\r\n            color=\"primary\"\r\n            shape=\"rounded\"\r\n            size=\"large\"\r\n          />\r\n        </Box>\r\n      )}\r\n\r\n      {/* Event Detail Dialog */}\r\n      <Dialog\r\n        open={!!selectedEvent || detailLoading}\r\n        onClose={handleCloseDialog}\r\n        maxWidth=\"md\"\r\n        fullWidth\r\n      >\r\n        {detailLoading ? (\r\n          <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', minHeight: 300 }}>\r\n            <CircularProgress />\r\n          </Box>\r\n        ) : selectedEvent && (\r\n          <>\r\n            <DialogTitle>\r\n              <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n                <Typography variant=\"h5\">{selectedEvent.title}</Typography>\r\n                <IconButton onClick={handleCloseDialog}>\r\n                  <Close />\r\n                </IconButton>\r\n              </Box>\r\n            </DialogTitle>\r\n\r\n            <DialogContent>\r\n              <Box sx={{ mb: 3 }}>\r\n                <img\r\n                  src={selectedEvent.imageUrl || 'https://images.unsplash.com/photo-1540575467063-178a50c2df87?w=400&h=200&fit=crop'}\r\n                  alt={selectedEvent.title}\r\n                  style={{ width: '100%', height: '300px', objectFit: 'cover', borderRadius: '8px' }}\r\n                />\r\n              </Box>\r\n\r\n              <Box sx={{ display: 'flex', gap: 1, mb: 2 }}>\r\n                <Chip\r\n                  label={selectedEvent.eventType}\r\n                  color={getCategoryColor(selectedEvent.eventType)}\r\n                />\r\n                {selectedEvent.tags && selectedEvent.tags.map((tag, index) => (\r\n                  <Chip key={index} label={tag} variant=\"outlined\" size=\"small\" />\r\n                ))}\r\n              </Box>\r\n\r\n              <Typography variant=\"body1\" paragraph>\r\n                {selectedEvent.description || selectedEvent.title}\r\n              </Typography>\r\n\r\n              <Divider sx={{ my: 2, color: theme.palette.divider }} />\r\n\r\n              <Grid container spacing={2}>\r\n                <Grid item xs={12} md={6}>\r\n                  <Paper sx={{ p: 2, bgcolor: theme.palette.background.paper }}>\r\n                    <Typography variant=\"h6\" gutterBottom>Event Details</Typography>\r\n\r\n                    <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\r\n                      <CalendarToday sx={{ mr: 1, fontSize: 20 }} />\r\n                      <Box>\r\n                        <Typography variant=\"body2\" color=\"text.secondary\">Date & Time</Typography>\r\n                        <Typography variant=\"body1\">\r\n                          {formatDate(selectedEvent.startTime)} {formatTime(selectedEvent.startTime)} - {formatTime(selectedEvent.endTime)}\r\n                        </Typography>\r\n                      </Box>\r\n                    </Box>\r\n\r\n                    <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\r\n                      <LocationOn sx={{ mr: 1, fontSize: 20 }} />\r\n                      <Box>\r\n                        <Typography variant=\"body2\" color=\"text.secondary\">Venue</Typography>\r\n                        <Typography variant=\"body1\">{selectedEvent.venue?.name}</Typography>\r\n                        {/* 新增 State */}\r\n                        <Typography variant=\"body2\" color=\"text.secondary\">\r\n                          State: {selectedEvent.venueState || 'N/A'}\r\n                        </Typography>\r\n                        {/* 新增 Location */}\r\n                        <Typography variant=\"body2\" color=\"text.secondary\">\r\n                          Location: {selectedEvent.venueLocation || 'N/A'}\r\n                        </Typography>\r\n                      </Box>\r\n                    </Box>\r\n\r\n                    <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\r\n                      <AttachMoney sx={{ mr: 1, fontSize: 20 }} />\r\n                      <Box>\r\n                        <Typography variant=\"body2\" color=\"text.secondary\">Price</Typography>\r\n                        <Typography variant=\"body1\">\r\n                          {selectedEvent.feeAmount > 0\r\n                            ? `$${selectedEvent.feeAmount}`\r\n                            : selectedEvent.price > 0\r\n                              ? `$${selectedEvent.price}`\r\n                              : 'Free'}\r\n                        </Typography>\r\n                      </Box>\r\n                    </Box>\r\n\r\n                    {selectedEvent.eligibility && (\r\n                      <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\r\n                        <People sx={{ mr: 1, fontSize: 20 }} />\r\n                        <Box>\r\n                          <Typography variant=\"body2\" color=\"text.secondary\">Eligibility</Typography>\r\n                          <Typography variant=\"body1\">{selectedEvent.eligibility}</Typography>\r\n                        </Box>\r\n                      </Box>\r\n                    )}\r\n                  </Paper>\r\n                </Grid>\r\n\r\n                <Grid item xs={12} md={6}>\r\n                  <Paper sx={{ p: 2, bgcolor: theme.palette.background.paper }}>\r\n                    <Typography variant=\"h6\" gutterBottom>Organizer</Typography>\r\n\r\n                    <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\r\n                      <Avatar sx={{ mr: 2 }}>\r\n                        {selectedEvent.organizerName?.charAt(0)}\r\n                      </Avatar>\r\n                      <Typography variant=\"body1\">{selectedEvent.organizerName || 'Unknown Organizer'}</Typography>\r\n                    </Box>\r\n\r\n                    <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\r\n                      <People sx={{ mr: 1, fontSize: 20 }} />\r\n                      <Box>\r\n                        <Typography variant=\"body2\" color=\"text.secondary\">Capacity</Typography>\r\n                        <Typography variant=\"body1\">\r\n                          {selectedEvent.capacity} participants\r\n                        </Typography>\r\n                      </Box>\r\n                    </Box>\r\n\r\n                    {selectedEvent.currentParticipants && (\r\n                      <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\r\n                        <People sx={{ mr: 1, fontSize: 20 }} />\r\n                        <Box>\r\n                          <Typography variant=\"body2\" color=\"text.secondary\">Registered</Typography>\r\n                          <Typography variant=\"body1\">\r\n                            {selectedEvent.currentParticipants} / {selectedEvent.capacity} registered\r\n                          </Typography>\r\n                        </Box>\r\n                      </Box>\r\n                    )}\r\n\r\n                    {selectedEvent.timeUntilEvent && (\r\n                      <Box sx={{ mt: 2 }}>\r\n                        <Chip\r\n                          label={`Event starts in ${selectedEvent.timeUntilEvent}`}\r\n                          color={selectedEvent.isUpcoming ? 'primary' : 'default'}\r\n                        />\r\n                      </Box>\r\n                    )}\r\n                  </Paper>\r\n                </Grid>\r\n              </Grid>\r\n\r\n              {selectedEvent.schedule && (\r\n                <>\r\n                  <Divider sx={{ my: 2, color: theme.palette.divider }} />\r\n                  <Paper sx={{ p: 2, bgcolor: theme.palette.background.paper }}>\r\n                    <Typography variant=\"h6\" gutterBottom>Schedule</Typography>\r\n                    {scheduleItems.length > 0 ? (\r\n                      <ul>\r\n                        {scheduleItems.map((item, idx) => (\r\n                          <li key={idx}>\r\n                            <strong>{item.time}</strong>: {item.activity}\r\n                          </li>\r\n                        ))}\r\n                      </ul>\r\n                    ) : (\r\n                      <Typography variant=\"body2\" color=\"text.secondary\">No schedule available.</Typography>\r\n                    )}\r\n                  </Paper>\r\n                </>\r\n              )}\r\n            </DialogContent>\r\n\r\n            <DialogActions sx={{ p: 3 }}>\r\n              <Button onClick={handleCloseDialog} color=\"inherit\">\r\n                Close\r\n              </Button>\r\n              {currentUser?.role === \"EVENTORGANIZER\" || currentUser?.userType === \"EventOrganizer\" ? (\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  onClick={() => handleEditEvent(selectedEvent)}\r\n                >\r\n                  Edit\r\n                </Button>\r\n              ) : (\r\n                <Button\r\n                  variant=\"contained\"\r\n                  size=\"large\"\r\n                  disabled={selectedEvent.currentParticipants >= selectedEvent.capacity || isRegistered || checkingRegistration}\r\n                  onClick={() => handleRegisterClick(selectedEvent)}\r\n                  sx={isRegistered ? { backgroundColor: theme.palette.grey[400], color: theme.palette.common.white } : {}}\r\n                >\r\n                  {selectedEvent.currentParticipants >= selectedEvent.capacity\r\n                    ? 'Event Full'\r\n                    : isRegistered\r\n                      ? 'Already Registered'\r\n                      : 'Register Now'}\r\n                </Button>\r\n              )}\r\n              {selectedEvent.currentParticipants >= selectedEvent.capacity && (\r\n                <Alert severity=\"warning\" sx={{ mt: 2 }}>\r\n                  This event is fully booked and cannot accept more registrations.\r\n                </Alert>\r\n              )}\r\n              {currentUser?.userType === \"EventOrganizer\" && (\r\n                <Button onClick={() => handleViewRegisteredUsers(selectedEvent.id)}>\r\n                  View Registered Users\r\n                </Button>\r\n              )}\r\n              {selectedEvent.eventType === 'Friendly Match' && (\r\n                <Button onClick={() => setShowFriendlyMatch(true)}>View Friendly Match</Button>\r\n              )}\r\n            </DialogActions>\r\n          </>\r\n        )}\r\n      </Dialog>\r\n\r\n      {/* Registration Confirmation Dialog */}\r\n      <Dialog\r\n        open={showRegisterDialog}\r\n        onClose={handleRegisterCancel}\r\n        maxWidth=\"sm\"\r\n        fullWidth\r\n        PaperProps={{\r\n          sx: {\r\n            borderRadius: 3,\r\n            boxShadow: '0 20px 40px rgba(0,0,0,0.1)'\r\n          }\r\n        }}\r\n      >\r\n        {registerSuccess ? (\r\n          <>\r\n            <DialogTitle sx={{ textAlign: 'center', pb: 1 }}>\r\n              <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\r\n                <Box\r\n                  sx={{\r\n                    width: 80,\r\n                    height: 80,\r\n                    borderRadius: '50%',\r\n                    bgcolor: theme.palette.success.main,\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    justifyContent: 'center',\r\n                    mb: 2,\r\n                    animation: 'pulse 2s infinite'\r\n                  }}\r\n                >\r\n                  <Typography variant=\"h2\" color={theme.palette.common.white}>✓</Typography>\r\n                </Box>\r\n                <Typography variant=\"h5\" color={theme.palette.success.main} fontWeight=\"bold\">\r\n                  Registration Successful!\r\n                </Typography>\r\n              </Box>\r\n            </DialogTitle>\r\n            <DialogContent sx={{ textAlign: 'center', px: 4 }}>\r\n              <Alert severity=\"success\" sx={{ mb: 3, borderRadius: 2 }}>\r\n                <Typography variant=\"body1\" sx={{ mb: 1 }}>\r\n                  <strong>Congratulations!</strong> You've successfully registered for this event.\r\n                </Typography>\r\n                <Typography variant=\"body2\">\r\n                  A confirmation email has been sent to your registered email address. \r\n                  Please check your inbox and spam folder.\r\n                </Typography>\r\n              </Alert>\r\n              \r\n              <Paper sx={{ p: 2, bgcolor: theme.palette.grey[50], borderRadius: 2, mb: 2 }}>\r\n                <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 1 }}>\r\n                  \uD83D\uDCE7 <strong>What's Next?</strong>\r\n                </Typography>\r\n                <Typography variant=\"body2\" sx={{ mb: 1 }}>\r\n                  • Check your email for event details and QR code\r\n                </Typography>\r\n                <Typography variant=\"body2\" sx={{ mb: 1 }}>\r\n                  • Add the event to your calendar\r\n                </Typography>\r\n                <Typography variant=\"body2\">\r\n                  • Arrive 15 minutes early on event day\r\n                </Typography>\r\n              </Paper>\r\n\r\n              <Alert severity=\"info\" sx={{ borderRadius: 2 }}>\r\n                <Typography variant=\"body2\">\r\n                  <strong>Cancellation Policy:</strong> You can cancel your registration up to \r\n                  <strong> 48 hours</strong> before the event starts. Contact support if you need to cancel.\r\n                </Typography>\r\n              </Alert>\r\n            </DialogContent>\r\n            <DialogActions sx={{ justifyContent: 'center', pb: 3 }}>\r\n              <Button \r\n                variant=\"contained\" \r\n                onClick={handleRegisterCancel}\r\n                sx={{ px: 4, py: 1.5, borderRadius: 2 }}\r\n              >\r\n                Got It!\r\n              </Button>\r\n            </DialogActions>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <DialogTitle sx={{ textAlign: 'center', pb: 1 }}>\r\n              <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\r\n                <Box\r\n                  sx={{\r\n                    width: 60,\r\n                    height: 60,\r\n                    borderRadius: '50%',\r\n                    bgcolor: theme.palette.primary.main,\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    justifyContent: 'center',\r\n                    mb: 2\r\n                  }}\r\n                >\r\n                  <Typography variant=\"h4\" color={theme.palette.common.white}>\uD83D\uDCDD</Typography>\r\n                </Box>\r\n                <Typography variant=\"h5\" fontWeight=\"bold\">\r\n                  Confirm Registration\r\n                </Typography>\r\n                <Typography variant=\"body2\" color=\"text.secondary\">\r\n                  You're about to register for this event\r\n                </Typography>\r\n              </Box>\r\n            </DialogTitle>\r\n            \r\n            <DialogContent sx={{ px: 4 }}>\r\n              <Paper sx={{ p: 3, bgcolor: theme.palette.grey[50], borderRadius: 2, mb: 3 }}>\r\n                <Typography variant=\"h6\" gutterBottom color={theme.palette.primary.main}>\r\n                  {registerEvent?.title}\r\n                </Typography>\r\n                <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\r\n                  {registerEvent?.description}\r\n                </Typography>\r\n                \r\n                <Box sx={{ mt: 2, display: 'flex', flexDirection: 'column', gap: 1 }}>\r\n                  <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                    <CalendarToday sx={{ mr: 1, fontSize: 16, color: 'text.secondary' }} />\r\n                    <Typography variant=\"body2\">\r\n                      <strong>Date:</strong> {formatDate(registerEvent?.startTime)}\r\n                    </Typography>\r\n                  </Box>\r\n                  <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                    <Box sx={{ width: 16, height: 16, mr: 1, display: 'flex', alignItems: 'center' }}>\r\n                      <Typography variant=\"body2\">\uD83D\uDD50</Typography>\r\n                    </Box>\r\n                    <Typography variant=\"body2\">\r\n                      <strong>Time:</strong> {formatTime(registerEvent?.startTime)}\r\n                    </Typography>\r\n                  </Box>\r\n                  <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                    <LocationOn sx={{ mr: 1, fontSize: 16, color: 'text.secondary' }} />\r\n                    <Typography variant=\"body2\">\r\n                      <strong>Location:</strong> {registerEvent?.location}\r\n                    </Typography>\r\n                  </Box>\r\n                  <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                    <AttachMoney sx={{ mr: 1, fontSize: 16, color: 'text.secondary' }} />\r\n                    <Typography variant=\"body2\">\r\n                      <strong>Price:</strong> {registerEvent?.price === 0 ? 'Free' : `$${registerEvent?.price}`}\r\n                    </Typography>\r\n                  </Box>\r\n                </Box>\r\n              </Paper>\r\n\r\n              <Alert severity=\"info\" sx={{ mb: 2, borderRadius: 2 }}>\r\n                <Typography variant=\"body2\" sx={{ mb: 1 }}>\r\n                  <strong>\uD83D\uDCCB Registration Terms:</strong>\r\n                </Typography>\r\n                <Typography variant=\"body2\" sx={{ mb: 1 }}>\r\n                  • You can cancel your registration up to <strong>48 hours</strong> before the event\r\n                </Typography>\r\n                <Typography variant=\"body2\" sx={{ mb: 1 }}>\r\n                  • A confirmation email will be sent to your registered email address\r\n                </Typography>\r\n                <Typography variant=\"body2\">\r\n                  • Please arrive 15 minutes early on the event day\r\n                </Typography>\r\n              </Alert>\r\n\r\n              <Alert severity=\"warning\" sx={{ borderRadius: 2 }}>\r\n                <Typography variant=\"body2\">\r\n                  <strong>⚠\uFE0F Important:</strong> By confirming, you agree to attend the event. \r\n                  Late cancellations may result in a no-show fee for paid events.\r\n                </Typography>\r\n              </Alert>\r\n\r\n              {registerError && (\r\n                <Alert severity=\"error\" sx={{ mt: 2, borderRadius: 2 }}>\r\n                  {registerError}\r\n                </Alert>\r\n              )}\r\n            </DialogContent>\r\n            \r\n            <DialogActions sx={{ px: 4, pb: 3, gap: 2 }}>\r\n              <Button \r\n                onClick={handleRegisterCancel} \r\n                disabled={registering}\r\n                variant=\"outlined\"\r\n                sx={{ px: 3, py: 1.5, borderRadius: 2 }}\r\n              >\r\n                Cancel\r\n              </Button>\r\n              <Button\r\n                variant=\"contained\"\r\n                onClick={handleRegisterConfirm}\r\n                disabled={registering}\r\n                sx={{ px: 3, py: 1.5, borderRadius: 2 }}\r\n              >\r\n                {registering ? (\r\n                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n                    <CircularProgress size={16} color=\"inherit\" />\r\n                    Registering...\r\n                  </Box>\r\n                ) : (\r\n                  'Confirm Registration'\r\n                )}\r\n              </Button>\r\n            </DialogActions>\r\n          </>\r\n        )}\r\n      </Dialog>\r\n\r\n      {/* Registered Users Dialog */}\r\n      <Dialog\r\n        open={showDialog}\r\n        onClose={() => setShowDialog(false)}\r\n        maxWidth=\"md\"\r\n        fullWidth\r\n      >\r\n        <DialogTitle>Registered Users</DialogTitle>\r\n        <DialogContent>\r\n          <ul>\r\n            {registeredUsers.map(user => (\r\n              <li key={user.id}>{user.name} ({user.email})</li>\r\n            ))}\r\n          </ul>\r\n        </DialogContent>\r\n      </Dialog>\r\n\r\n      {showFriendlyMatch && <FriendlyMatchPage />}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default EventPage;\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball-frontend/src/components/event/EventPage.jsx b/pickleball-frontend/src/components/event/EventPage.jsx
--- a/pickleball-frontend/src/components/event/EventPage.jsx	(revision c178c1d9e80f6815b91226b2d10f391611dcb6b4)
+++ b/pickleball-frontend/src/components/event/EventPage.jsx	(date 1754936525402)
@@ -39,9 +39,7 @@
   LocationOn,
   People,
   AttachMoney,
-  Close,
-  Favorite,
-  FavoriteBorder
+  Close
 } from '@mui/icons-material';
 import { useLocation } from 'react-router-dom';
 import FriendlyMatchPage from './FriendlyMatchPage';
@@ -52,7 +50,6 @@
   const [loading, setLoading] = useState(true);
   const [error, setError] = useState(null);
   const [selectedEvent, setSelectedEvent] = useState(null);
-  const [favorites, setFavorites] = useState(new Set());
   const [showRegisterDialog, setShowRegisterDialog] = useState(false);
   const [registering, setRegistering] = useState(false);
   const [registerSuccess, setRegisterSuccess] = useState(false);
@@ -96,7 +93,7 @@
     setError(null);
     try {
       console.log('Fetching events for page:', pageNum);
-      const eventList = await EventService.getUpcomingEvents(pageNum - 1, 3); // 每頁顯示3個事件
+      const eventList = await EventService.getUpcomingEvents(pageNum - 1, 8); // 每頁顯示8個事件
       console.log('Received event list:', eventList);
       console.log('Total pages:', eventList.totalPages);
       console.log('Total elements:', eventList.totalElements);
@@ -114,7 +111,7 @@
 
   const fetchVenues = async () => {
     try {
-      const res = await api.get('/api/venues');
+      const res = await api.get('/venues');
       setVenues(res.data);
     } catch (err) {
       console.error('Failed to fetch venues:', err);
@@ -168,16 +165,6 @@
     setIsRegistered(false);
   };
 
-  const toggleFavorite = (eventId) => {
-    const newFavorites = new Set(favorites);
-    if (newFavorites.has(eventId)) {
-      newFavorites.delete(eventId);
-    } else {
-      newFavorites.add(eventId);
-    }
-    setFavorites(newFavorites);
-  };
-
   const getCategoryColor = (category) => {
     const colors = {
       Technology: 'primary',
@@ -386,23 +373,14 @@
                   image={event.image}
                   alt={event.title}
                 />
-                <CardContent sx={{ flexGrow: 1 }}>
-                  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', mb: 1 }}>
-                    <Chip
-                      label={event.category}
-                      color={getCategoryColor(event.category)}
-                      size="small"
-                    />
-                    <IconButton
-                      size="small"
-                      onClick={e => {
-                        e.stopPropagation();
-                        toggleFavorite(event.id);
-                      }}
-                    >
-                      {favorites.has(event.id) ? <Favorite color="error" /> : <FavoriteBorder />}
-                    </IconButton>
-                  </Box>
+                                 <CardContent sx={{ flexGrow: 1 }}>
+                   <Box sx={{ display: 'flex', justifyContent: 'flex-start', alignItems: 'flex-start', mb: 1 }}>
+                     <Chip
+                       label={event.category}
+                       color={getCategoryColor(event.category)}
+                       size="small"
+                     />
+                   </Box>
 
                   <Typography variant="h6" component="h2" gutterBottom>
                     {event.title}
Index: pickleball-frontend/src/App.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React from 'react';\r\nimport { Routes, Route, Navigate, Outlet } from 'react-router-dom';\r\nimport HomePage from './pages/HomePage';\r\nimport LoginPage from './pages/LoginPage';\r\nimport RegisterPage from './pages/RegisterPage';\r\nimport AboutPage from './pages/AboutPage';\r\nimport ContactPage from './pages/ContactPage';\r\nimport PrivacyPage from './pages/PrivacyPage';\r\nimport TermsPage from './pages/TermsPage';\r\nimport CookiesPage from './pages/CookiesPage';\r\nimport AccessibilityPage from './pages/AccessibilityPage';\r\n\r\nimport ProfilePage from './components/profile/ProfilePage';\r\nimport RewardsPage from './components/profile/RewardsPage';\r\nimport FeedbackPage from './components/feedback/FeedbackPage';\r\nimport MyFeedbackPage from './components/feedback/MyFeedbackPage';\r\n\r\n\r\nimport AdminDashboard from './components/admin/AdminDashboard';\r\nimport MainLayout from './components/layout/MainLayout';\r\nimport UserService from './service/UserService';\r\nimport ForgotPasswordPage from './pages/ForgotPasswordPage';\r\nimport ResetPasswordPage from './pages/ResetPasswordPage';\r\nimport ResetPasswordEmailSent from './pages/ResetPasswordEmailSent';\r\nimport ResetPasswordSuccess from './pages/ResetPasswordSuccess';\r\nimport { AuthProvider, useAuth } from './context/AuthContext';\r\nimport CourtListPage from './components/court/CourtListPage';\r\nimport CourtDetailPage from './components/court/CourtDetailPage'; \r\nimport BookingPage from './components/court/BookingPage'; \r\nimport BookingHistory from './components/court/BookingHistory';\r\nimport BookingConfirmationPage from './components/court/BookingConfirmationPage'; \r\nimport PaymentPage from './components/court/PaymentPage';\r\nimport WalletTopUpPage from './components/profile/WalletTopUpPage';\r\nimport WalletPage from './components/profile/WalletPage';\r\nimport WalletTransactionHistory from './components/profile/WalletTransactionHistory';\r\nimport EventPage from './components/event/EventPage';\r\nimport EventCreatePage from './components/event/EventCreatePage';\r\nimport EventEditPage from './components/event/EventEditPage';\r\nimport FriendlyMatchPage from './components/event/FriendlyMatchPage';\r\nimport FriendlyMatchCreatePage from './components/event/FriendlyMatchCreatePage';\r\nimport MessagingPage from './components/messaging/MessagingPage';\r\nimport HelpdeskPage from './components/helpdesk/HelpdeskPage';\r\nimport { SocketProvider } from './context/SocketContext';\r\nimport AdminManageUsers from './components/admin/AdminManageUsers';\r\nimport AdminManageTiers from './components/admin/AdminManageTiers';\r\nimport AdminManageCourts from './components/admin/AdminManageCourts';\r\nimport AdminManageBookings from './components/admin/AdminManageBookings';\r\nimport CoachScheduleManagement from './components/coach/CoachScheduleManagement';\r\nimport BrowseClassPage from './components/class/BrowseClassPage';\r\nimport ClassSessionRegisterPage from './components/class/ClassSessionRegisterPage';\r\nimport CoachingDashboard from './components/coach/CoachingDashboard';\r\nimport StudentManagementSystem from './components/coach/StudentManagementSystem';\r\nimport MyClassSessionsPage from './components/profile/MyClassSessionsPage';\r\nimport RedeemVoucherPage from './components/profile/RedeemVoucherPage';\r\nimport AdminSettings from './components/admin/AdminSettings';\r\nimport CourtAvailabilityPage from './components/court/CourtAvailabilityPage';\r\nimport ProfileOverview from './components/profile/ProfileOverview';\r\nimport EditProfileForm from './components/profile/EditProfileForm';\r\nimport AdminModerationDashboard from './components/admin/AdminModerationDashboard';\r\n\r\n\r\nconst ProtectedRoute = ({ children }) => {\r\n  const { authToken } = useAuth();\r\n  return authToken ? children : <Navigate to=\"/login\" replace />;\r\n};\r\n\r\nconst AdminProtectedRoute = ({ children }) => {\r\n  const { authToken, currentUser } = useAuth();\r\n  \r\n  // Check multiple ways admin could be logged in:\r\n  // 1. UserService admin token (for admin-specific login)\r\n  // 2. AuthContext token with admin role/userType\r\n  // 3. Check if currentUser exists and has admin role\r\n  const isAdminLoggedIn = UserService.isAdminLoggedIn() || \r\n    (authToken && currentUser && (\r\n      currentUser.userType === 'Admin' || \r\n      currentUser.userType === 'ADMIN' || \r\n      currentUser.role === 'Admin' || \r\n      currentUser.role === 'ADMIN'\r\n    ));\r\n  \r\n  console.log('AdminProtectedRoute check:', {\r\n    userServiceAdmin: UserService.isAdminLoggedIn(),\r\n    authToken: !!authToken,\r\n    currentUser: !!currentUser,\r\n    userType: currentUser?.userType,\r\n    role: currentUser?.role,\r\n    isAdminLoggedIn\r\n  });\r\n  \r\n  return isAdminLoggedIn ? children : <Navigate to=\"/login\" replace />;\r\n};\r\n\r\nfunction AdminDashboardLayout() {\r\n  return <AdminDashboard><Outlet /></AdminDashboard>;\r\n}\r\n\r\nfunction HomeRedirect() {\r\n  const { currentUser } = useAuth();\r\n  if (!currentUser) return <HomePage />;\r\n  if (currentUser.userType === 'Admin' || currentUser.userType === 'ADMIN') {\r\n    return <Navigate to=\"/admin/dashboard\" replace />;\r\n  }\r\n  if (currentUser.userType === 'Coach' || currentUser.userType === 'COACH') {\r\n    return <Navigate to=\"/coaching\" replace />;\r\n  }\r\n  return <HomePage />;\r\n}\r\n\r\nfunction App() {\r\n  const { currentUser } = useAuth();\r\n\r\n  // Coach 專屬路由：只顯示 CoachScheduleManagement\r\n  if (currentUser?.userType === 'Coach' || currentUser?.userType === 'COACH') {\r\n    return (\r\n      <SocketProvider>\r\n        <Routes>\r\n          <Route path=\"/coaching\" element={<CoachingDashboard />} />\r\n          <Route path=\"/coaching/schedulemanagement\" element={<CoachScheduleManagement />} />\r\n          <Route path=\"/coaching/students\" element={<StudentManagementSystem />} />\r\n          <Route path=\"/messages\" element={<MessagingPage />} />\r\n          <Route path=\"*\" element={<Navigate to=\"/coaching\" replace />} />\r\n        </Routes>\r\n      </SocketProvider>\r\n    );\r\n  }\r\n\r\n  // 其他 user 正常顯示 MainLayout\r\n  return (\r\n    <SocketProvider>\r\n      <Routes>\r\n        {/* Public routes */}\r\n        <Route path=\"/login\" element={<LoginPage />} />\r\n        <Route path=\"/register\" element={<RegisterPage />} />\r\n        <Route path=\"/forgot-password\" element={<ForgotPasswordPage />} />\r\n        <Route path=\"/reset-password-email-sent\" element={<ResetPasswordEmailSent />} />\r\n        <Route path=\"/reset-password/:token\" element={<ResetPasswordPage />} />\r\n        <Route path=\"/reset-password-success\" element={<ResetPasswordSuccess />} />\r\n\r\n\r\n\r\n        {/* Protected user routes with layout */}\r\n        <Route path=\"/\" element={<MainLayout />}>\r\n          <Route index element={<HomePage />} />\r\n          <Route path=\"home\" element={<HomePage />} />\r\n          \r\n          {/* Profile routes */}\r\n          <Route path=\"profile\" element={<ProfilePage />}>\r\n            <Route index element={<ProfileOverview />} />\r\n            <Route path=\"rewards\" element={\r\n              <ProtectedRoute>\r\n                <RewardsPage />\r\n              </ProtectedRoute>\r\n            } />\r\n            <Route path=\"my-bookings\" element={\r\n              <ProtectedRoute>\r\n                <BookingHistory />\r\n              </ProtectedRoute>\r\n            } />\r\n            <Route path=\"my-feedback\" element={\r\n              <ProtectedRoute>\r\n                <MyFeedbackPage />\r\n              </ProtectedRoute>\r\n            } />\r\n            <Route path=\"my-class-sessions\" element={\r\n              <ProtectedRoute>\r\n                <MyClassSessionsPage />\r\n              </ProtectedRoute>\r\n            } />\r\n            <Route path=\"wallet\" element={\r\n              <ProtectedRoute>\r\n                <WalletPage />\r\n              </ProtectedRoute>\r\n            } />\r\n            <Route path=\"wallet/transactions\" element={\r\n              <ProtectedRoute>\r\n                <WalletTransactionHistory />\r\n              </ProtectedRoute>\r\n            } />\r\n            <Route path=\"edit-profile\" element={\r\n              <ProtectedRoute>\r\n                <EditProfileForm />\r\n              </ProtectedRoute>\r\n            } />\r\n            <Route path=\"redeem-voucher\" element={\r\n              <ProtectedRoute>\r\n                <RedeemVoucherPage />\r\n              </ProtectedRoute>\r\n            } />\r\n            <Route path=\"notifications\" element={null} />\r\n            <Route path=\"my-games\" element={null} />\r\n            <Route path=\"my-invoices\" element={null} />\r\n          </Route>\r\n\r\n          {/* Feedback form page */}\r\n          <Route path=\"feedback\" element={\r\n            <ProtectedRoute>\r\n              <FeedbackPage />\r\n            </ProtectedRoute>\r\n          } />\r\n\r\n          {/* Court listing */}\r\n          <Route path=\"courts\" element={<CourtListPage />} />\r\n\r\n          {/* Court details */}\r\n          <Route path=\"courts/:id\" element={<CourtDetailPage />} />\r\n\r\n          {/* Booking flow */}\r\n          <Route path=\"booking/:courtId\" element={\r\n            <ProtectedRoute>\r\n              <BookingPage />\r\n            </ProtectedRoute>\r\n          } />\r\n\r\n          {/* Payment page */}\r\n          <Route path=\"payment\" element={\r\n            <ProtectedRoute>\r\n              <PaymentPage />\r\n            </ProtectedRoute>\r\n          } />\r\n\r\n          {/* Booking confirmation page */}\r\n          <Route path=\"booking/confirmation\" element={\r\n            <ProtectedRoute>\r\n              <BookingConfirmationPage />\r\n            </ProtectedRoute>\r\n          } />\r\n\r\n          {/* Wallet top-up page */}\r\n          <Route path=\"wallet/topup\" element={\r\n            <ProtectedRoute>\r\n              <WalletTopUpPage />\r\n            </ProtectedRoute>\r\n          } />\r\n\r\n          {/* Event listing */}\r\n          <Route path=\"events\" element={<EventPage />} />\r\n\r\n          {/* Event creation */}\r\n          <Route path=\"events/create\" element={\r\n            <ProtectedRoute>\r\n              <EventCreatePage />\r\n            </ProtectedRoute>\r\n          } />\r\n\r\n          {/* Event editing */}\r\n          <Route path=\"events/edit/:eventId\" element={\r\n            <ProtectedRoute>\r\n              <EventEditPage />\r\n            </ProtectedRoute>\r\n          } />\r\n\r\n          {/* Friendly Match page */}\r\n          <Route path=\"friendly-matches\" element={<FriendlyMatchPage />} />\r\n\r\n          {/* Friendly Match create page */}\r\n          <Route path=\"friendly-matches/create\" element={\r\n            <ProtectedRoute>\r\n              <FriendlyMatchCreatePage />\r\n            </ProtectedRoute>\r\n          } />\r\n\r\n          {/* Messaging page */}\r\n          <Route path=\"messages\" element={\r\n            <ProtectedRoute>\r\n              <MessagingPage />\r\n            </ProtectedRoute>\r\n          } />\r\n\r\n          {/* Helpdesk page */}\r\n          <Route path=\"helpdesk\" element={\r\n            <ProtectedRoute>\r\n              <HelpdeskPage />\r\n            </ProtectedRoute>\r\n          } />\r\n\r\n          <Route path=\"court-availability\" element={<CourtAvailabilityPage />} />\r\n\r\n          {/* User-side: Browse available coaching sessions */}\r\n          <Route path=\"coaching/browse\" element={<BrowseClassPage />} />\r\n          <Route path=\"class/:id\" element={<ClassSessionRegisterPage />} />\r\n          <Route path=\"class/:id/register\" element={<ClassSessionRegisterPage />} />\r\n\r\n          {/* Footer Links - Public Pages */}\r\n          <Route path=\"about\" element={<AboutPage />} />\r\n          <Route path=\"contact\" element={<ContactPage />} />\r\n          <Route path=\"privacy\" element={<PrivacyPage />} />\r\n          <Route path=\"terms\" element={<TermsPage />} />\r\n          {/* sitemap removed */}\r\n          <Route path=\"cookies\" element={<CookiesPage />} />\r\n          <Route path=\"accessibility\" element={<AccessibilityPage />} />\r\n          {/* community removed */}\r\n        </Route>\r\n\r\n        {/* Admin routes with nested structure */}\r\n        <Route path=\"/admin\" element={\r\n          <AdminProtectedRoute>\r\n            <AdminDashboardLayout />\r\n          </AdminProtectedRoute>\r\n        }>\r\n          <Route path=\"dashboard\" element={<div />} /> {/* Dashboard home, content handled in AdminDashboard */}\r\n          <Route path=\"users\" element={<AdminManageUsers />} />\r\n          <Route path=\"tiers\" element={<AdminManageTiers />} />\r\n          <Route path=\"courts\" element={<AdminManageCourts />} />\r\n          <Route path=\"bookings\" element={<AdminManageBookings />} />\r\n          <Route path=\"feedback\" element={<AdminModerationDashboard />} />\r\n          <Route path=\"settings\" element={<AdminSettings />} />\r\n        </Route>\r\n\r\n        {/* 404 fallback */}\r\n        <Route path=\"*\" element={<Navigate to=\"/\" replace />} />\r\n      </Routes>\r\n    </SocketProvider>\r\n  );\r\n}\r\n\r\nexport default App;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball-frontend/src/App.js b/pickleball-frontend/src/App.js
--- a/pickleball-frontend/src/App.js	(revision c178c1d9e80f6815b91226b2d10f391611dcb6b4)
+++ b/pickleball-frontend/src/App.js	(date 1754953860509)
@@ -57,6 +57,7 @@
 import ProfileOverview from './components/profile/ProfileOverview';
 import EditProfileForm from './components/profile/EditProfileForm';
 import AdminModerationDashboard from './components/admin/AdminModerationDashboard';
+import EventOrganizerDashboard from './components/event/EventOrganizerDashboard';
 
 
 const ProtectedRoute = ({ children }) => {
@@ -104,6 +105,9 @@
   if (currentUser.userType === 'Coach' || currentUser.userType === 'COACH') {
     return <Navigate to="/coaching" replace />;
   }
+  if (currentUser.userType === 'EventOrganizer' || currentUser.userType === 'EVENTORGANIZER') {
+    return <Navigate to="/event-organizer" replace />;
+  }
   return <HomePage />;
 }
 
@@ -124,6 +128,22 @@
       </SocketProvider>
     );
   }
+
+  // EventOrganizer 專屬路由
+  if (currentUser?.userType === 'EventOrganizer' || currentUser?.userType === 'EVENTORGANIZER') {
+    return (
+      <SocketProvider>
+        <Routes>
+          <Route path="/event-organizer" element={<EventOrganizerDashboard />} />
+          <Route path="/event-organizer/create" element={<EventOrganizerDashboard />} />
+          <Route path="/events/create" element={<EventCreatePage />} />
+          <Route path="/events/edit/:eventId" element={<EventEditPage />} />
+          <Route path="/messages" element={<MessagingPage />} />
+          <Route path="*" element={<Navigate to="/event-organizer" replace />} />
+        </Routes>
+      </SocketProvider>
+    );
+  }
 
   // 其他 user 正常顯示 MainLayout
   return (
Index: pickleball-frontend/src/components/coach/StudentManagementSystem.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useState, useEffect, useCallback, useRef } from 'react';\r\nimport {\r\n  AppBar,\r\n  Tabs,\r\n  Tab,\r\n  Box,\r\n  Typography,\r\n  Card,\r\n  CardContent,\r\n  CardActions,\r\n  Button,\r\n  Avatar,\r\n  LinearProgress,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  TextField,\r\n  IconButton,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Chip,\r\n  Stack,\r\n  Divider,\r\n  Tooltip,\r\n  Grid,\r\n  Alert,\r\n  Pagination\r\n} from '@mui/material';\r\nimport { Star, Edit, Add, CheckCircle, Cancel, AccessTime, WarningAmber, School, TrendingUp, Book, Email, Phone, Event, Person, Schedule, Message, BarChart, Settings } from '@mui/icons-material';\r\nimport { useAuth } from '../../context/AuthContext';\r\nimport ClassSessionService from '../../service/ClassSessionService';\r\nimport CoachService from '../../service/CoachService';\r\n\r\nconst StudentManagementSystem = () => {\r\n  const [activeTab, setActiveTab] = useState(0);\r\n  const [selectedStudent, setSelectedStudent] = useState(null);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [modalType, setModalType] = useState('');\r\n  const [expandedClass, setExpandedClass] = useState(null);\r\n\r\n  // Mock data\r\n  const [students, setStudents] = useState([]);\r\n\r\n  const [classes, setClasses] = useState([]);\r\n  const [currentPage, setCurrentPage] = useState(0);\r\n  const classesPerPage = 2;\r\n  const { currentUser } = useAuth();\r\n  \r\n  // 出席和反饋狀態 - 移到頂部避免重新定義\r\n  const [todayAttendance, setTodayAttendance] = useState({});\r\n  const [studentFeedbacks, setStudentFeedbacks] = useState({});\r\n  const [evaluations, setEvaluations] = useState([]);\r\n  const [attendanceSessionId, setAttendanceSessionId] = useState(null);\r\n  const [selectedSessionForAttendance, setSelectedSessionForAttendance] = useState(null);\r\n  const [unattendedClasses, setUnattendedClasses] = useState([]);\r\n  const [unattendedClassesCount, setUnattendedClassesCount] = useState(0);\r\n  const [showSuccessMessage, setShowSuccessMessage] = useState(false);\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const [savedAttendanceData, setSavedAttendanceData] = useState(null);\r\n  \r\n  console.log(currentUser); // 這裡就有教練的所有資訊\r\n\r\n  // 添加全局錯誤處理器\r\n  useEffect(() => {\r\n    const handleError = (error) => {\r\n      console.error('Global error caught:', error);\r\n      // 防止頁面刷新\r\n      error.preventDefault();\r\n      return false;\r\n    };\r\n\r\n    const handleUnhandledRejection = (event) => {\r\n      console.error('Unhandled promise rejection:', event.reason);\r\n      // 防止頁面刷新\r\n      event.preventDefault();\r\n    };\r\n\r\n    window.addEventListener('error', handleError);\r\n    window.addEventListener('unhandledrejection', handleUnhandledRejection);\r\n\r\n    return () => {\r\n      window.removeEventListener('error', handleError);\r\n      window.removeEventListener('unhandledrejection', handleUnhandledRejection);\r\n    };\r\n  }, []);\r\n\r\n  // 獲取我的課程\r\n  const fetchMyClasses = useCallback(async () => {\r\n    // 獲取更長時間範圍的課程，包括過去和未來\r\n    const start = new Date();\r\n    start.setFullYear(start.getFullYear() - 1); // 從一年前開始\r\n    const end = new Date();\r\n    end.setFullYear(end.getFullYear() + 1); // 到一年後結束\r\n    \r\n    // 使用 getScheduleWithRegistrations 來獲取包含 attendanceStatus 的完整數據\r\n    const allSessions = await CoachService.getScheduleWithRegistrations(start.toISOString(), end.toISOString());\r\n    \r\n    // 添加调试信息\r\n    console.log('\uD83D\uDD0D Fetched sessions data:', allSessions);\r\n    if (allSessions && allSessions.length > 0) {\r\n      console.log('\uD83D\uDCCA First session sample:', allSessions[0]);\r\n      if (allSessions[0].registrations) {\r\n        console.log('\uD83D\uDC65 First session registrations:', allSessions[0].registrations);\r\n        allSessions[0].registrations.forEach((reg, index) => {\r\n          console.log(`  Registration ${index}:`, {\r\n            id: reg.id,\r\n            memberId: reg.memberId,\r\n            attendanceStatus: reg.attendanceStatus,\r\n            hasAttendanceStatus: !!reg.attendanceStatus\r\n          });\r\n        });\r\n      }\r\n    }\r\n    \r\n    // 過濾掉 CANCELLED 的 session\r\n    const activeSessions = allSessions.filter(session => session.status !== 'CANCELLED');\r\n    // 依 recurringGroupId 分組\r\n    const grouped = {};\r\n    activeSessions.forEach(session => {\r\n      const key = session.recurringGroupId || session.id;\r\n      if (!grouped[key]) grouped[key] = { groupId: session.recurringGroupId || session.id, sessions: [] };\r\n      grouped[key].sessions.push(session);\r\n    });\r\n    // 轉成卡片資料格式\r\n    const classCards = await Promise.all(Object.values(grouped).map(async group => {\r\n      const first = group.sessions[0];\r\n      let sessionsWithRegs = [];\r\n      // 用 recurringGroupId 查詢所有 session 及報名名單\r\n      if (first.recurringGroupId) {\r\n        sessionsWithRegs = await ClassSessionService.getRecurringClassFullDetails(first.recurringGroupId);\r\n      } else {\r\n        // 單堂課 fallback\r\n        sessionsWithRegs = [\r\n          { ...first, registrations: await ClassSessionService.getSessionStudents(first.id) }\r\n        ];\r\n      }\r\n      \r\n      // 計算總學生數（去重）\r\n      const uniqueStudents = new Set();\r\n      sessionsWithRegs.forEach(session => {\r\n        if (session.registrations) {\r\n          session.registrations.forEach(reg => {\r\n            uniqueStudents.add(reg.memberId || reg.id);\r\n          });\r\n        }\r\n      });\r\n      \r\n      return {\r\n        id: first.recurringGroupId || first.id, // 卡片 id 用 recurringGroupId\r\n        recurringGroupId: first.recurringGroupId || first.id,\r\n        name: first.title || first.type || '-',\r\n        time: `${first.daysOfWeek ? first.daysOfWeek.join('/') : ''} ${first.startTime ? new Date(first.startTime).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }) : ''}-${first.endTime ? new Date(first.endTime).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }) : ''}`,\r\n        capacity: first.maxParticipants || 0,\r\n        sessions: sessionsWithRegs,\r\n        totalStudents: uniqueStudents.size, // 添加總學生數\r\n        // 添加最早開始時間用於排序\r\n        earliestStartTime: sessionsWithRegs.length > 0 ? \r\n          Math.min(...sessionsWithRegs.map(s => s.startTime ? new Date(s.startTime).getTime() : Infinity)) : \r\n          (first.startTime ? new Date(first.startTime).getTime() : Infinity)\r\n      };\r\n    }));\r\n    \r\n    // 按最早開始時間排序，最近的日期排在前面\r\n    const sortedClassCards = classCards.sort((a, b) => {\r\n      const now = new Date().getTime();\r\n      const aTime = a.earliestStartTime;\r\n      const bTime = b.earliestStartTime;\r\n      \r\n      // 如果兩個課程都還沒開始，按開始時間排序（最近的在前）\r\n      if (aTime > now && bTime > now) {\r\n        return aTime - bTime;\r\n      }\r\n      // 如果一個已開始一個還沒開始，未開始的排在前面\r\n      if (aTime > now && bTime <= now) {\r\n        return -1;\r\n      }\r\n      if (aTime <= now && bTime > now) {\r\n        return 1;\r\n      }\r\n      // 如果兩個都已開始，按開始時間排序（最近的在前）\r\n      return aTime - bTime;\r\n    });\r\n    \r\n    setClasses(sortedClassCards);\r\n    \r\n    // 調試：顯示所有課程的詳細信息\r\n    console.log('=== ALL CLASSES DEBUG ===');\r\n    sortedClassCards.forEach((classItem, index) => {\r\n      console.log(`Class ${index + 1}:`, {\r\n        name: classItem.name,\r\n        sessionsCount: classItem.sessions.length,\r\n        totalStudents: classItem.totalStudents,\r\n        sessions: classItem.sessions.map(s => ({\r\n          id: s.id,\r\n          startTime: s.startTime,\r\n          endTime: s.endTime,\r\n          date: s.startTime ? new Date(s.startTime).toISOString().slice(0, 10) : 'N/A',\r\n          registrations: s.registrations ? s.registrations.length : 0,\r\n          // 詳細的場地信息調試\r\n          courtName: s.courtName,\r\n          court: s.court,\r\n          venue: s.venue,\r\n          venueName: s.venueName,\r\n          venueState: s.venueState,\r\n          // 檢查所有可能的場地相關字段\r\n          allFields: Object.keys(s).filter(key => \r\n            key.toLowerCase().includes('court') || \r\n            key.toLowerCase().includes('venue')\r\n          ).reduce((obj, key) => {\r\n            obj[key] = s[key];\r\n            return obj;\r\n          }, {})\r\n        }))\r\n      });\r\n      \r\n      // 特別調試第一個課程的場地信息\r\n      if (index === 0 && classItem.sessions.length > 0) {\r\n        const firstSession = classItem.sessions[0];\r\n        console.log('=== FIRST SESSION COURT DEBUG ===');\r\n        console.log('Session object:', firstSession);\r\n        console.log('Court name field:', firstSession.courtName);\r\n        console.log('Court object:', firstSession.court);\r\n        console.log('Venue object:', firstSession.venue);\r\n        console.log('Venue name field:', firstSession.venueName);\r\n        console.log('All session fields:', Object.keys(firstSession));\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (currentUser?.id) fetchMyClasses();\r\n  }, [currentUser, fetchMyClasses]);\r\n\r\n  useEffect(() => {\r\n    // 直接從 classes 取得所有學生，並去重\r\n    let allStudents = [];\r\n    const studentMap = new Map(); // 用 Map 來去重，key 是 memberId\r\n    \r\n    for (const classItem of classes) {\r\n      for (const session of classItem.sessions) {\r\n        if (session.registrations) {\r\n          session.registrations.forEach(reg => {\r\n            const memberId = reg.memberId || reg.id;\r\n            if (!studentMap.has(memberId)) {\r\n              // 新學生，創建記錄\r\n              studentMap.set(memberId, {\r\n                ...reg,\r\n                memberId: memberId,\r\n                classId: classItem.recurringGroupId,\r\n                sessionId: session.id,\r\n                totalSessions: 1,\r\n                completedSessions: 0,\r\n                progress: 0,\r\n                rating: 0,\r\n                missedSessions: 0,\r\n                status: 'active'\r\n              });\r\n            } else {\r\n              // 已存在的學生，增加課程計數\r\n              const existingStudent = studentMap.get(memberId);\r\n              existingStudent.totalSessions += 1;\r\n              // 可以根據需要合併其他資訊\r\n            }\r\n          });\r\n        }\r\n      }\r\n    }\r\n    \r\n    // 轉換 Map 為陣列\r\n    allStudents = Array.from(studentMap.values());\r\n    setStudents(allStudents);\r\n  }, [classes]);\r\n\r\n  // 檢測今天需要記錄出席的課程\r\n  const fetchUnattendedClasses = useCallback(async () => {\r\n    try {\r\n      if (!classes || classes.length === 0) {\r\n        console.log('No classes available for unattended check');\r\n        return;\r\n      }\r\n      \r\n      const today = new Date();\r\n      const todayStr = today.toISOString().slice(0, 10);\r\n      console.log('Checking for unattended classes on:', todayStr);\r\n      console.log('Total classes available:', classes.length);\r\n      \r\n      // 收集今天和未來幾天內的課程（最多檢查未來7天）\r\n      let todaySessions = [];\r\n      for (let i = 0; i < 7; i++) {\r\n        const checkDate = new Date();\r\n        checkDate.setDate(today.getDate() + i);\r\n        const checkDateStr = checkDate.toISOString().slice(0, 10);\r\n        \r\n        for (const classItem of classes) {\r\n          console.log('Checking class:', classItem.name, 'with', classItem.sessions?.length, 'sessions');\r\n          for (const session of classItem.sessions) {\r\n            if (session.startTime) {\r\n              const sessionDate = new Date(session.startTime).toISOString().slice(0, 10);\r\n              console.log('Session date:', sessionDate, 'vs check date:', checkDateStr);\r\n              if (sessionDate === checkDateStr) {\r\n                console.log('Found session for date:', checkDateStr, ':', session.title || session.className);\r\n                todaySessions.push({\r\n                  ...session,\r\n                  className: classItem.name,\r\n                  classId: classItem.recurringGroupId,\r\n                  sessionDate: checkDateStr,\r\n                  isToday: i === 0\r\n                });\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      \r\n      console.log('Sessions found for next 7 days:', todaySessions.length);\r\n      \r\n      // 過濾出有學生註冊但還沒有記錄出勤的課程\r\n      const unattended = todaySessions.filter(session => {\r\n        const hasRegistrations = session.registrations && session.registrations.length > 0;\r\n        const hasUnrecordedAttendance = hasRegistrations && session.registrations.some(reg => \r\n          !reg.attendanceStatus || reg.attendanceStatus === 'NOT_RECORDED' || reg.attendanceStatus === null\r\n        );\r\n        \r\n        // 課程狀態檢查\r\n        const isCompleted = session.status === 'completed' || session.status === 'COMPLETED';\r\n        const isCancelled = session.status === 'cancelled' || session.status === 'CANCELLED';\r\n        \r\n        console.log('Session check:', {\r\n          sessionTitle: session.title || session.className,\r\n          hasRegistrations,\r\n          hasUnrecordedAttendance,\r\n          isCompleted,\r\n          isCancelled,\r\n          shouldInclude: hasRegistrations && hasUnrecordedAttendance && !isCompleted && !isCancelled\r\n        });\r\n        \r\n        return hasRegistrations && hasUnrecordedAttendance && !isCompleted && !isCancelled;\r\n      });\r\n      \r\n      console.log('Unattended sessions found:', unattended.length);\r\n      setUnattendedClasses(unattended);\r\n      setUnattendedClassesCount(unattended.length);\r\n    } catch (error) {\r\n      console.error('Error fetching unattended classes:', error);\r\n    }\r\n  }, [classes]);\r\n\r\n  // 簡化：只在 classes 變化時調用一次\r\n  useEffect(() => {\r\n    if (classes.length > 0) {\r\n      fetchUnattendedClasses();\r\n    }\r\n  }, [classes.length, fetchUnattendedClasses]); // 添加 fetchUnattendedClasses 依賴項\r\n\r\n  // 移除可能導致無限循環的 useEffect\r\n  // useEffect(() => {\r\n  //   if (classes.length > 0) {\r\n  //     fetchUnattendedClasses();\r\n  //   }\r\n  // }, [fetchMyClasses]);\r\n\r\n  const handleAttendanceCheck = useCallback((memberId, present) => {\r\n    try {\r\n      const safeMemberId = String(memberId || '').trim();\r\n      if (!safeMemberId || safeMemberId.length === 0) {\r\n        console.error('Invalid memberId in attendance check:', memberId);\r\n        return;\r\n      }\r\n      \r\n      console.log('Updating attendance for student:', safeMemberId, 'present:', present);\r\n      \r\n      setTodayAttendance(prev => {\r\n        try {\r\n          const newState = {\r\n            ...prev,\r\n            [safeMemberId]: present\r\n          };\r\n          console.log('New todayAttendance state:', newState);\r\n          return newState;\r\n        } catch (stateError) {\r\n          console.error('Error updating attendance state:', stateError);\r\n          return prev;\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.error('Error in handleAttendanceCheck:', error);\r\n    }\r\n  }, []);\r\n\r\n  // 新增：處理 feedback 輸入\r\n  const handleFeedbackChange = useCallback((memberId, feedback) => {\r\n    // 確保 memberId 是有效的字符串\r\n    const safeMemberId = String(memberId || '').trim();\r\n    if (!safeMemberId) {\r\n      console.error('Invalid memberId:', memberId);\r\n      return;\r\n    }\r\n    \r\n    console.log('Feedback change:', { memberId: safeMemberId, feedback });\r\n    \r\n    try {\r\n      setStudentFeedbacks(prev => {\r\n        const newState = {\r\n          ...prev,\r\n          [safeMemberId]: feedback\r\n        };\r\n        console.log('New studentFeedbacks state:', newState);\r\n        return newState;\r\n      });\r\n    } catch (error) {\r\n      console.error('Error updating feedback:', error);\r\n    }\r\n  }, []);\r\n\r\n  // 新增：保存 attendance 和 feedback\r\n  const handleSaveAttendanceAndFeedback = async () => {\r\n    try {\r\n      if (!selectedSessionForAttendance) {\r\n        console.error('No session selected for attendance');\r\n        alert('No session selected for attendance');\r\n        return;\r\n      }\r\n\r\n      console.log('=== SAVING ATTENDANCE AND FEEDBACK ===');\r\n      console.log('Session ID:', selectedSessionForAttendance.id);\r\n      console.log('Session Title:', selectedSessionForAttendance.title);\r\n      console.log('Attendance data:', todayAttendance);\r\n      console.log('Feedback data:', studentFeedbacks);\r\n      console.log('Current user:', currentUser);\r\n\r\n      // 檢查是否有出席數據\r\n      if (Object.keys(todayAttendance).length === 0) {\r\n        console.warn('No attendance data to save');\r\n        alert('Please mark at least one student as Present or Absent');\r\n        return;\r\n      }\r\n\r\n      // 準備要保存的數據\r\n      const attendanceData = {\r\n        sessionId: selectedSessionForAttendance.id,\r\n        attendance: todayAttendance,\r\n        feedbacks: studentFeedbacks // 這個會保存到後端的 coachComment 字段\r\n      };\r\n\r\n      console.log('Sending data to backend:', attendanceData);\r\n\r\n      // 調用後端 API 保存出席記錄\r\n      const response = await fetch(`${process.env.REACT_APP_API_BASE_URL || 'http://localhost:8081'}/api/coach/session/${selectedSessionForAttendance.id}/attendance`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\r\n        },\r\n        body: JSON.stringify(attendanceData)\r\n      });\r\n\r\n      console.log('Response status:', response.status);\r\n      console.log('Response ok:', response.ok);\r\n\r\n      if (response.ok) {\r\n        const result = await response.json();\r\n        console.log('✅ Attendance saved successfully:', result);\r\n        \r\n        // 保存成功後設置編輯狀態\r\n        setIsEditing(false);\r\n        setSavedAttendanceData({\r\n          sessionId: selectedSessionForAttendance.id,\r\n          attendance: { ...todayAttendance },\r\n          feedbacks: { ...studentFeedbacks }\r\n        });\r\n        \r\n        // 顯示成功提示\r\n        setShowSuccessMessage(true);\r\n        setTimeout(() => setShowSuccessMessage(false), 3000); // 3秒後自動隱藏\r\n        \r\n        // 刷新classes数据以更新出席率显示\r\n        try {\r\n          console.log('Refreshing classes data to update attendance rate...');\r\n          await fetchMyClasses();\r\n        } catch (refreshError) {\r\n          console.error('Error refreshing classes data:', refreshError);\r\n        }\r\n        \r\n        // 不關閉模態框，讓用戶可以編輯\r\n        console.log('Data saved successfully. View mode enabled.');\r\n      } else {\r\n        const errorData = await response.json();\r\n        console.error('❌ Failed to save attendance:', errorData);\r\n        alert('Failed to save attendance: ' + (errorData.message || 'Unknown error'));\r\n      }\r\n    } catch (error) {\r\n      console.error('❌ Error saving attendance:', error);\r\n      alert('Failed to save: ' + error.message);\r\n    }\r\n  };\r\n\r\n  // 新增：選擇具體 session 進行點名\r\n  const handleTakeAttendance = (classItem) => {\r\n    setAttendanceSessionId(classItem.recurringGroupId);\r\n    setModalType('selectSession');\r\n    setShowModal(true);\r\n  };\r\n\r\n  const handleAddEvaluation = (evaluation) => {\r\n    setEvaluations(prev => [...prev, {\r\n      id: Date.now(),\r\n      studentId: selectedStudent.memberId,\r\n      date: new Date().toISOString().split('T')[0],\r\n      ...evaluation\r\n    }]);\r\n    setShowModal(false);\r\n  };\r\n\r\n  // 新增：編輯功能\r\n  const handleEdit = () => {\r\n    console.log('Entering edit mode...');\r\n    setIsEditing(true);\r\n    \r\n    // 确保当前状态包含已保存的数据\r\n    if (savedAttendanceData) {\r\n      setTodayAttendance({ ...savedAttendanceData.attendance });\r\n      setStudentFeedbacks({ ...savedAttendanceData.feedbacks });\r\n      console.log('Edit mode enabled with saved data:', {\r\n        attendance: savedAttendanceData.attendance,\r\n        feedbacks: savedAttendanceData.feedbacks\r\n      });\r\n    } else {\r\n      console.log('Edit mode enabled without saved data');\r\n    }\r\n  };\r\n\r\n  // 新增：取消編輯功能\r\n  const handleCancelEdit = (closeModal = false) => {\r\n    if (closeModal) {\r\n      // 直接关闭模态框\r\n      setIsEditing(false);\r\n      setSavedAttendanceData(null);\r\n      setShowModal(false);\r\n      setSelectedSessionForAttendance(null);\r\n      setTodayAttendance({});\r\n      setStudentFeedbacks({});\r\n      console.log('Modal closed.');\r\n    } else if (savedAttendanceData) {\r\n      // 如果有已保存的數據，恢復到已保存的狀態\r\n      setTodayAttendance({ ...savedAttendanceData.attendance });\r\n      setStudentFeedbacks({ ...savedAttendanceData.feedbacks });\r\n      setIsEditing(false);\r\n      console.log('Edit cancelled. Restored saved data.');\r\n    } else {\r\n      // 如果沒有已保存的數據，關閉模態框並清空狀態\r\n      setIsEditing(false);\r\n      setSavedAttendanceData(null);\r\n      setShowModal(false);\r\n      setSelectedSessionForAttendance(null);\r\n      setTodayAttendance({});\r\n      setStudentFeedbacks({});\r\n      console.log('Edit cancelled. Modal closed.');\r\n    }\r\n  };\r\n\r\n  // 新增：保存編輯功能\r\n  const handleSaveEdit = async () => {\r\n    try {\r\n      console.log('=== SAVING EDITED DATA ===');\r\n      console.log('Session ID:', selectedSessionForAttendance.id);\r\n      console.log('Edited attendance data:', todayAttendance);\r\n      console.log('Edited feedback data:', studentFeedbacks);\r\n\r\n      // 準備要保存的數據\r\n      const attendanceData = {\r\n        sessionId: selectedSessionForAttendance.id,\r\n        attendance: todayAttendance,\r\n        feedbacks: studentFeedbacks\r\n      };\r\n\r\n      console.log('Sending edited data to backend:', attendanceData);\r\n\r\n      // 調用後端 API 保存編輯後的數據\r\n      const response = await fetch(`${process.env.REACT_APP_API_BASE_URL || 'http://localhost:8081'}/api/coach/session/${selectedSessionForAttendance.id}/attendance`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\r\n        },\r\n        body: JSON.stringify(attendanceData)\r\n      });\r\n\r\n      console.log('Response status:', response.status);\r\n\r\n      if (response.ok) {\r\n        const result = await response.json();\r\n        console.log('✅ Edited data saved successfully:', result);\r\n        \r\n        // 更新保存的數據\r\n        setSavedAttendanceData({\r\n          sessionId: selectedSessionForAttendance.id,\r\n          attendance: { ...todayAttendance },\r\n          feedbacks: { ...studentFeedbacks }\r\n        });\r\n        \r\n        // 退出編輯模式\r\n        setIsEditing(false);\r\n        \r\n        // 顯示成功提示\r\n        setShowSuccessMessage(true);\r\n        setTimeout(() => setShowSuccessMessage(false), 3000);\r\n        \r\n        // 刷新classes数据以更新出席率显示\r\n        try {\r\n          console.log('Refreshing classes data to update attendance rate...');\r\n          await fetchMyClasses();\r\n        } catch (refreshError) {\r\n          console.error('Error refreshing classes data:', refreshError);\r\n        }\r\n        \r\n        console.log('Edited data saved successfully. Edit mode disabled.');\r\n      } else {\r\n        const errorData = await response.json();\r\n        console.error('❌ Failed to save edited data:', errorData);\r\n        alert('Failed to save edited data: ' + (errorData.message || 'Unknown error'));\r\n      }\r\n    } catch (error) {\r\n      console.error('❌ Error saving edited data:', error);\r\n      alert('Failed to save edited data: ' + error.message);\r\n    }\r\n  };\r\n\r\n\r\n  const getClassStudents = (classId) => students.filter(s => s.classId === classId);\r\n\r\n  const getAttendanceRate = (classStudents) => {\r\n    if (classStudents.length === 0) return 0;\r\n    \r\n    // 计算该课程的实际出席率\r\n    let totalAttendanceRecords = 0;\r\n    let presentRecords = 0;\r\n    \r\n    // 遍历该课程的所有sessions来统计出席记录\r\n    const classItem = classes.find(c => c.recurringGroupId === classStudents[0]?.classId);\r\n    if (classItem && classItem.sessions) {\r\n      console.log(`\uD83D\uDD0D Calculating attendance rate for class: ${classItem.name}`);\r\n      console.log(`\uD83D\uDCCA Total sessions: ${classItem.sessions.length}`);\r\n      console.log(`\uD83C\uDFAF Class item:`, classItem);\r\n      \r\n      for (const session of classItem.sessions) {\r\n        console.log(`  \uD83D\uDCC5 Session ${session.id}:`, {\r\n          title: session.title,\r\n          status: session.status,\r\n          registrationsCount: session.registrations?.length || 0,\r\n          registrations: session.registrations\r\n        });\r\n        \r\n        if (session.registrations) {\r\n          console.log(`    \uD83D\uDCCB All registrations for session ${session.id}:`, session.registrations);\r\n          for (const reg of session.registrations) {\r\n            console.log(`    \uD83D\uDC64 Registration:`, {\r\n              id: reg.id,\r\n              memberId: reg.memberId,\r\n              attendanceStatus: reg.attendanceStatus,\r\n              hasStatus: !!reg.attendanceStatus,\r\n              fullRegistration: reg\r\n            });\r\n            \r\n            if (reg.attendanceStatus) {\r\n              totalAttendanceRecords++;\r\n              if (reg.attendanceStatus === 'PRESENT') {\r\n                presentRecords++;\r\n              }\r\n            }\r\n          }\r\n        } else {\r\n          console.log(`    ❌ No registrations found for session ${session.id}`);\r\n        }\r\n      }\r\n      \r\n      console.log(`\uD83D\uDCC8 Attendance calculation:`, {\r\n        totalRecords: totalAttendanceRecords,\r\n        presentRecords: presentRecords,\r\n        rate: totalAttendanceRecords > 0 ? ((presentRecords / totalAttendanceRecords) * 100).toFixed(1) : 0\r\n      });\r\n    } else {\r\n      console.log(`❌ Class item not found for classStudents:`, classStudents);\r\n    }\r\n    \r\n    return totalAttendanceRecords > 0 ? ((presentRecords / totalAttendanceRecords) * 100).toFixed(1) : 0;\r\n  };\r\n\r\n  // 分頁處理函數\r\n  const handleNextPage = () => {\r\n    const maxPage = Math.ceil(classes.length / classesPerPage) - 1;\r\n    if (currentPage < maxPage) {\r\n      setCurrentPage(currentPage + 1);\r\n    }\r\n  };\r\n\r\n  const handlePrevPage = () => {\r\n    if (currentPage > 0) {\r\n      setCurrentPage(currentPage - 1);\r\n    }\r\n  };\r\n\r\n  const getCurrentPageClasses = () => {\r\n    const startIndex = currentPage * classesPerPage;\r\n    return classes.slice(startIndex, startIndex + classesPerPage);\r\n  };\r\n\r\n  const totalPages = Math.ceil(classes.length / classesPerPage);\r\n\r\n  const StarRating = ({ rating, size = 'small' }) => {\r\n    const stars = [];\r\n    const fullStars = Math.floor(rating);\r\n    const hasHalfStar = rating % 1 !== 0;\r\n    for (let i = 0; i < 5; i++) {\r\n      if (i < fullStars) {\r\n        stars.push(<Star key={i} fontSize={size} sx={{ color: '#FFD600' }} />);\r\n      } else if (i === fullStars && hasHalfStar) {\r\n        stars.push(<Star key={i} fontSize={size} sx={{ color: '#FFE082' }} />);\r\n      } else {\r\n        stars.push(<Star key={i} fontSize={size} sx={{ color: '#E0E0E0' }} />);\r\n      }\r\n    }\r\n    return <Box display=\"flex\">{stars}</Box>;\r\n  };\r\n\r\n  // --- Class Overview Tab ---\r\n  const ClassOverview = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState('');\r\n    const [searchTerm, setSearchTerm] = useState('');\r\n    const [statusFilter, setStatusFilter] = useState('all');\r\n    const [currentPage, setCurrentPage] = useState(0);\r\n\r\n    // 在 ClassOverview 內部定義 handleTakeAttendance 函數\r\n    const handleTakeAttendance = (classItem) => {\r\n      setAttendanceSessionId(classItem.recurringGroupId);\r\n      setModalType('selectSession');\r\n      setShowModal(true);\r\n    };\r\n\r\n    // 在 ClassOverview 內部定義分頁處理函數\r\n    const handleNextPage = () => {\r\n      const maxPage = Math.ceil(filteredClasses.length / classesPerPage) - 1;\r\n      if (currentPage < maxPage) {\r\n        setCurrentPage(currentPage + 1);\r\n      }\r\n    };\r\n\r\n    const handlePrevPage = () => {\r\n      if (currentPage > 0) {\r\n        setCurrentPage(currentPage - 1);\r\n      }\r\n    };\r\n\r\n    // 在 ClassOverview 內部定義 getCurrentPageClasses 函數\r\n    const getCurrentPageClasses = () => {\r\n      const startIndex = currentPage * classesPerPage;\r\n      return filteredClasses.slice(startIndex, startIndex + classesPerPage);\r\n    };\r\n\r\n    // 篩選課程\r\n    const filteredClasses = classes.filter(classItem => {\r\n      const matchesSearch = classItem.name.toLowerCase().includes(searchTerm.toLowerCase());\r\n      \r\n      if (statusFilter === 'all') return matchesSearch;\r\n      \r\n      const classStatus = (() => {\r\n        if (classItem.sessions && classItem.sessions.length > 0) {\r\n          const now = new Date();\r\n          const futureSessions = classItem.sessions.filter(s => \r\n            s.startTime && new Date(s.startTime) > now\r\n          );\r\n          const pastSessions = classItem.sessions.filter(s => \r\n            s.startTime && new Date(s.startTime) <= now\r\n          );\r\n          \r\n          if (futureSessions.length > 0 && pastSessions.length > 0) {\r\n            return 'ongoing';\r\n          } else if (futureSessions.length > 0) {\r\n            return 'upcoming';\r\n          } else {\r\n            return 'completed';\r\n          }\r\n        }\r\n        return 'unknown';\r\n      })();\r\n      \r\n      return matchesSearch && classStatus === statusFilter;\r\n    });\r\n\r\n    // 如果沒有課程，顯示空狀態\r\n    if (classes.length === 0) {\r\n      return (\r\n        <Box>\r\n          <Typography variant=\"h5\" fontWeight={700} mb={2}>Class Overview</Typography>\r\n          <Card sx={{ p: 4, textAlign: 'center' }}>\r\n            <School sx={{ fontSize: 64, color: 'text.secondary', mb: 2 }} />\r\n            <Typography variant=\"h6\" color=\"text.secondary\" mb={1}>\r\n              No Classes Found\r\n            </Typography>\r\n            <Typography variant=\"body2\" color=\"text.secondary\">\r\n              You haven't created any classes yet. Create your first class to get started.\r\n            </Typography>\r\n          </Card>\r\n        </Box>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <Box>\r\n        <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={3}>\r\n          <Typography variant=\"h5\" fontWeight={700}>Class Overview</Typography>\r\n          <Typography variant=\"body2\" color=\"text.secondary\">\r\n            {(() => {\r\n              const filtered = classes.filter(classItem => {\r\n                const matchesSearch = classItem.name.toLowerCase().includes(searchTerm.toLowerCase());\r\n                \r\n                if (statusFilter === 'all') return matchesSearch;\r\n                \r\n                const classStatus = (() => {\r\n                  if (classItem.sessions && classItem.sessions.length > 0) {\r\n                    const now = new Date();\r\n                    const futureSessions = classItem.sessions.filter(s => \r\n                      s.startTime && new Date(s.startTime) > now\r\n                    );\r\n                    const pastSessions = classItem.sessions.filter(s => \r\n                      s.startTime && new Date(s.startTime) <= now\r\n                    );\r\n                    \r\n                    if (futureSessions.length > 0 && pastSessions.length > 0) {\r\n                      return 'ongoing';\r\n                    } else if (futureSessions.length > 0) {\r\n                      return 'upcoming';\r\n                    } else {\r\n                      return 'completed';\r\n                    }\r\n                  }\r\n                  return 'unknown';\r\n                })();\r\n                \r\n                return matchesSearch && classStatus === statusFilter;\r\n              });\r\n              \r\n              return `Showing ${filtered.length} of ${classes.length} total classes`;\r\n            })()}\r\n          </Typography>\r\n        </Box>\r\n\r\n        {/* 未記錄出席提醒 */}\r\n        {unattendedClassesCount > 0 && (\r\n          <Card sx={{ mb: 3, backgroundColor: '#d1ecf1', border: '1px solid #bee5eb' }}>\r\n            <CardContent>\r\n              <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\r\n                <Box display=\"flex\" alignItems=\"center\">\r\n                  <Box display=\"flex\" alignItems=\"center\" gap={1}>\r\n                    <CheckCircle sx={{ color: '#0c5460' }} />\r\n                    <Typography variant=\"h6\" sx={{ color: '#0c5460', fontWeight: 'bold' }}>\r\n                      Attendance Not Recorded ({unattendedClassesCount})\r\n                    </Typography>\r\n                  </Box>\r\n                </Box>\r\n                <Button \r\n                  variant=\"contained\" \r\n                  color=\"info\"\r\n                  onClick={() => setActiveTab(0)} // 保持在 Class Overview 標籤\r\n                >\r\n                  Take Attendance\r\n                </Button>\r\n              </Box>\r\n              <Typography variant=\"body2\" sx={{ color: '#0c5460', mt: 1 }}>\r\n                You have {unattendedClassesCount} class{unattendedClassesCount > 1 ? 'es' : ''} in the next 7 days that need attendance to be recorded.\r\n              </Typography>\r\n              {/* 顯示具體的課程信息 */}\r\n              <Box sx={{ mt: 2 }}>\r\n                {unattendedClasses.slice(0, 3).map((session, index) => {\r\n                  const studentCount = session.registrations ? session.registrations.length : 0;\r\n                  const unrecordedCount = session.registrations ? \r\n                    session.registrations.filter(reg => \r\n                      !reg.attendanceStatus || reg.attendanceStatus === 'NOT_RECORDED' || reg.attendanceStatus === null\r\n                    ).length : 0;\r\n                  \r\n                  const dateLabel = session.isToday ? 'Today' : \r\n                    new Date(session.sessionDate).toLocaleDateString('en-US', { \r\n                      weekday: 'short', \r\n                      month: 'short', \r\n                      day: 'numeric' \r\n                    });\r\n                  \r\n                  return (\r\n                    <Typography key={index} variant=\"body2\" sx={{ color: '#0c5460', opacity: 0.8 }}>\r\n                      • {dateLabel} {new Date(session.startTime).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })} - {session.className || session.title || 'Class Session'} ({unrecordedCount}/{studentCount} students)\r\n                    </Typography>\r\n                  );\r\n                })}\r\n                {unattendedClasses.length > 3 && (\r\n                  <Typography variant=\"body2\" sx={{ color: '#0c5460', opacity: 0.8 }}>\r\n                    • ... and {unattendedClasses.length - 3} more\r\n                  </Typography>\r\n                )}\r\n              </Box>\r\n            </CardContent>\r\n          </Card>\r\n        )}\r\n        \r\n        {/* 搜索和篩選 */}\r\n        <Card sx={{ p: 2, mb: 3 }}>\r\n          <Grid container spacing={2} alignItems=\"center\">\r\n            <Grid item xs={12} sm={6}>\r\n              <TextField\r\n                fullWidth\r\n                placeholder=\"Search classes...\"\r\n                value={searchTerm}\r\n                onChange={(e) => setSearchTerm(e.target.value)}\r\n                size=\"small\"\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} sm={6}>\r\n              <Stack direction=\"row\" spacing={1}>\r\n                <Button\r\n                  variant={statusFilter === 'all' ? 'contained' : 'outlined'}\r\n                  size=\"small\"\r\n                  onClick={() => setStatusFilter('all')}\r\n                >\r\n                  All ({classes.length})\r\n                </Button>\r\n                <Button\r\n                  variant={statusFilter === 'ongoing' ? 'contained' : 'outlined'}\r\n                  size=\"small\"\r\n                  color=\"info\"\r\n                  onClick={() => setStatusFilter('ongoing')}\r\n                >\r\n                  Ongoing ({classes.filter(c => {\r\n                    if (c.sessions && c.sessions.length > 0) {\r\n                      const now = new Date();\r\n                      const futureSessions = c.sessions.filter(s => s.startTime && new Date(s.startTime) > now);\r\n                      const pastSessions = c.sessions.filter(s => s.startTime && new Date(s.startTime) <= now);\r\n                      return futureSessions.length > 0 && pastSessions.length > 0;\r\n                    }\r\n                    return false;\r\n                  }).length})\r\n                </Button>\r\n                <Button\r\n                  variant={statusFilter === 'upcoming' ? 'contained' : 'outlined'}\r\n                  size=\"small\"\r\n                  color=\"warning\"\r\n                  onClick={() => setStatusFilter('upcoming')}\r\n                >\r\n                  Upcoming ({classes.filter(c => {\r\n                    if (c.sessions && c.sessions.length > 0) {\r\n                      const now = new Date();\r\n                      const futureSessions = c.sessions.filter(s => s.startTime && new Date(s.startTime) > now);\r\n                      const pastSessions = c.sessions.filter(s => s.startTime && new Date(s.startTime) <= now);\r\n                      return futureSessions.length > 0 && pastSessions.length === 0;\r\n                    }\r\n                    return false;\r\n                  }).length})\r\n                </Button>\r\n                <Button\r\n                  variant={statusFilter === 'completed' ? 'contained' : 'outlined'}\r\n                  size=\"small\"\r\n                  color=\"success\"\r\n                  onClick={() => setStatusFilter('completed')}\r\n                >\r\n                  Completed ({classes.filter(c => {\r\n                    if (c.sessions && c.sessions.length > 0) {\r\n                      const now = new Date();\r\n                      const pastSessions = c.sessions.filter(s => s.startTime && new Date(s.startTime) <= now);\r\n                      return pastSessions.length > 0;\r\n                    }\r\n                    return false;\r\n                  }).length})\r\n                </Button>\r\n              </Stack>\r\n            </Grid>\r\n          </Grid>\r\n        </Card>\r\n        \r\n        {error && (\r\n          <Card sx={{ p: 2, mb: 3, bgcolor: '#ffebee', border: '1px solid #f44336' }}>\r\n            <Typography color=\"error\" variant=\"body2\">\r\n              Error: {error}\r\n            </Typography>\r\n          </Card>\r\n        )}\r\n\r\n        {/* 如果篩選後沒有結果 */}\r\n        {(() => {\r\n          const filtered = classes.filter(classItem => {\r\n            const matchesSearch = classItem.name.toLowerCase().includes(searchTerm.toLowerCase());\r\n            \r\n            if (statusFilter === 'all') return matchesSearch;\r\n            \r\n            const classStatus = (() => {\r\n              if (classItem.sessions && classItem.sessions.length > 0) {\r\n                const now = new Date();\r\n                const futureSessions = classItem.sessions.filter(s => \r\n                  s.startTime && new Date(s.startTime) > now\r\n                );\r\n                const pastSessions = classItem.sessions.filter(s => \r\n                  s.startTime && new Date(s.startTime) <= now\r\n                );\r\n                \r\n                if (futureSessions.length > 0 && pastSessions.length > 0) {\r\n                  return 'ongoing';\r\n                } else if (futureSessions.length > 0) {\r\n                  return 'upcoming';\r\n                } else {\r\n                  return 'completed';\r\n                }\r\n              }\r\n              return 'unknown';\r\n            })();\r\n            \r\n            return matchesSearch && classStatus === statusFilter;\r\n          });\r\n          \r\n          return filtered.length === 0 ? (\r\n            <Card sx={{ p: 4, textAlign: 'center' }}>\r\n              <Typography variant=\"h6\" color=\"text.secondary\" mb={1}>\r\n                No classes match your search criteria\r\n              </Typography>\r\n              <Typography variant=\"body2\" color=\"text.secondary\">\r\n                Try adjusting your search terms or filters\r\n              </Typography>\r\n            </Card>\r\n          ) : null;\r\n        })()}\r\n\r\n        <Grid container spacing={3} mb={3} sx={{ justifyContent: 'flex-start' }}>\r\n          {(() => {\r\n            // 先篩選課程\r\n            const filtered = classes.filter(classItem => {\r\n              const matchesSearch = classItem.name.toLowerCase().includes(searchTerm.toLowerCase());\r\n              \r\n              if (statusFilter === 'all') return matchesSearch;\r\n              \r\n              const classStatus = (() => {\r\n                if (classItem.sessions && classItem.sessions.length > 0) {\r\n                  const now = new Date();\r\n                  const futureSessions = classItem.sessions.filter(s => \r\n                    s.startTime && new Date(s.startTime) > now\r\n                  );\r\n                  const pastSessions = classItem.sessions.filter(s => \r\n                    s.startTime && new Date(s.startTime) <= now\r\n                  );\r\n                  \r\n                  if (futureSessions.length > 0 && pastSessions.length > 0) {\r\n                    return 'ongoing';\r\n                  } else if (futureSessions.length > 0) {\r\n                    return 'upcoming';\r\n                  } else {\r\n                    return 'completed';\r\n                  }\r\n                }\r\n                return 'unknown';\r\n              })();\r\n              \r\n              return matchesSearch && classStatus === statusFilter;\r\n            });\r\n\r\n            // 然後分頁\r\n            const startIndex = currentPage * classesPerPage;\r\n            const paginatedClasses = filtered.slice(startIndex, startIndex + classesPerPage);\r\n\r\n            return paginatedClasses.map((classItem) => {\r\n              // 計算學生數與出席率\r\n              const classStudents = students.filter(s => s.classId === classItem.recurringGroupId);\r\n              const attendanceRate = getAttendanceRate(classStudents);\r\n              \r\n              // 處理星期幾顯示\r\n              let weekDays = '-';\r\n              try {\r\n                if (classItem.sessions && classItem.sessions.length > 0) {\r\n                  // 先嘗試 daysOfWeek\r\n                  const allDays = classItem.sessions.flatMap(s => s.daysOfWeek || []);\r\n                  const uniqueDays = Array.from(new Set(allDays));\r\n                  const dayMap = { MONDAY: 'Mon', TUESDAY: 'Tue', WEDNESDAY: 'Wed', THURSDAY: 'Thu', FRIDAY: 'Fri', SATURDAY: 'Sat', SUNDAY: 'Sun' };\r\n                  if (uniqueDays.length > 0) {\r\n                    weekDays = uniqueDays.map(d => dayMap[d] || d).join('/');\r\n                  } else {\r\n                    // fallback: 用第一堂課的 startTime 算出星期幾\r\n                    const first = classItem.sessions[0];\r\n                    if (first.startTime) {\r\n                      const dayIdx = new Date(first.startTime).getDay();\r\n                      const dayArr = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\n                      if (dayIdx >= 0 && dayIdx < dayArr.length) {\r\n                        weekDays = dayArr[dayIdx];\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n              } catch (error) {\r\n                console.error('Error calculating weekDays:', error);\r\n                weekDays = '-';\r\n              }\r\n\r\n              // 計算已完成堂數\r\n              const completedCount = classItem.sessions\r\n                ? classItem.sessions.filter(s => {\r\n                    // 检查session是否已完成（有多种判断方式）\r\n                    const isCompleted = s.status === 'COMPLETED' || \r\n                                       s.status === 'completed' || \r\n                                       s.attendanceTaken === true ||\r\n                                       (s.registrations && s.registrations.some(reg => reg.attendanceStatus));\r\n                    \r\n                    console.log(`\uD83D\uDD0D Session ${s.id} completion check:`, {\r\n                      title: s.title,\r\n                      status: s.status,\r\n                      attendanceTaken: s.attendanceTaken,\r\n                      hasRegistrations: !!(s.registrations && s.registrations.length > 0),\r\n                      hasAttendanceStatus: s.registrations && s.registrations.some(reg => reg.attendanceStatus),\r\n                      isCompleted: isCompleted\r\n                    });\r\n                    \r\n                    return isCompleted;\r\n                  }).length\r\n                : 0;\r\n\r\n              // 計算課程狀態\r\n              const getClassStatus = () => {\r\n                try {\r\n                  if (classItem.sessions && classItem.sessions.length > 0) {\r\n                    const now = new Date();\r\n                    const futureSessions = classItem.sessions.filter(s => \r\n                      s.startTime && new Date(s.startTime) > now\r\n                    );\r\n                    const pastSessions = classItem.sessions.filter(s => \r\n                      s.startTime && new Date(s.startTime) <= now\r\n                    );\r\n                    \r\n                    if (futureSessions.length > 0 && pastSessions.length > 0) {\r\n                      return 'ongoing';\r\n                    } else if (futureSessions.length > 0) {\r\n                      return 'upcoming';\r\n                    } else {\r\n                      return 'completed';\r\n                    }\r\n                  }\r\n                  return 'unknown';\r\n                } catch (error) {\r\n                  console.error('Error in getClassStatus:', error);\r\n                  return 'unknown';\r\n                }\r\n              };\r\n\r\n              const classStatus = getClassStatus();\r\n              const statusColor = {\r\n                ongoing: 'primary',\r\n                upcoming: 'info',\r\n                completed: 'success',\r\n                unknown: 'default'\r\n              }[classStatus];\r\n\r\n              return (\r\n                <Grid item xs={12} sm={6} lg={4} key={classItem.recurringGroupId} sx={{ minWidth: 0 }}>\r\n                  <Card sx={{ \r\n                    height: '100%', \r\n                    minWidth: 0,\r\n                    transition: '0.2s',\r\n                    '&:hover': { \r\n                      boxShadow: 6,\r\n                      transform: 'translateY(-2px)'\r\n                    }\r\n                  }}>\r\n                    <CardContent sx={{ p: 2, '&:last-child': { pb: 2 } }}>\r\n                      {/* 課程標題和狀態 */}\r\n                      <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\" mb={1}>\r\n                        <Typography variant=\"h6\" sx={{ wordBreak: 'break-word', flex: 1, mr: 1 }}>\r\n                          {classItem.name}\r\n                        </Typography>\r\n                        <Chip \r\n                          label={classStatus && classStatus.length > 0 ? classStatus.charAt(0).toUpperCase() + classStatus.slice(1) : 'Unknown'} \r\n                          color={statusColor} \r\n                          size=\"small\" \r\n                        />\r\n                      </Box>\r\n\r\n                      {/* 課程時間和日期 */}\r\n                      <Typography variant=\"body2\" color=\"text.secondary\" mb={1} sx={{ wordBreak: 'break-word', fontSize: '0.875rem' }}>\r\n                        {(() => {\r\n                          let dateStr = '-';\r\n                          let timeStr = '-';\r\n                          if (classItem.sessions && classItem.sessions.length > 0) {\r\n                            const startDates = classItem.sessions.map(s => s.startTime ? new Date(s.startTime) : null).filter(Boolean);\r\n                            const endDates = classItem.sessions.map(s => s.endTime ? new Date(s.endTime) : null).filter(Boolean);\r\n                            if (startDates.length && endDates.length) {\r\n                              const minStart = new Date(Math.min(...startDates.map(d => d.getTime())));\r\n                              const maxEnd = new Date(Math.max(...endDates.map(d => d.getTime())));\r\n                              const format = d => `${d.getFullYear()}/${(d.getMonth()+1).toString().padStart(2,'0')}/${d.getDate().toString().padStart(2,'0')}`;\r\n                              \r\n                              // 如果只有一個日期，只顯示一個日期\r\n                              if (minStart.getTime() === maxEnd.getTime()) {\r\n                                dateStr = format(minStart);\r\n                              } else {\r\n                                dateStr = `${format(minStart)} - ${format(maxEnd)}`;\r\n                              }\r\n                              \r\n                              const first = classItem.sessions[0];\r\n                              if (first.startTime && first.endTime) {\r\n                                const start = new Date(first.startTime);\r\n                                const end = new Date(first.endTime);\r\n                                timeStr = `${start.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })} - ${end.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}`;\r\n                              }\r\n                            }\r\n                          }\r\n                          return `${dateStr} | ${timeStr} | ${weekDays}`;\r\n                        })()}\r\n                      </Typography>\r\n\r\n                      {/* 場館和球場資訊 */}\r\n                      <Typography variant=\"body2\" color=\"text.secondary\" mb={1} sx={{ wordBreak: 'break-word', fontSize: '0.875rem' }}>\r\n                        {(() => {\r\n                          if (classItem.sessions && classItem.sessions.length > 0) {\r\n                            const first = classItem.sessions[0];\r\n                            const venue = first.venueName || (first.venue && first.venue.name) || '-';\r\n                            const state = first.venueState || (first.venue && first.venue.state) || '-';\r\n                            return `Venue: ${venue} | State: ${state}`;\r\n                          }\r\n                          return 'Venue: - | State: -';\r\n                        })()}\r\n                      </Typography>\r\n                      <Typography variant=\"body2\" color=\"text.secondary\" mb={1} sx={{ wordBreak: 'break-word', fontSize: '0.875rem' }}>\r\n                        {(() => {\r\n                          if (classItem.sessions && classItem.sessions.length > 0) {\r\n                            const first = classItem.sessions[0];\r\n                            // 更健壯的場地信息獲取邏輯\r\n                            let court = '-';\r\n                            \r\n                            // 嘗試多種可能的場地信息來源\r\n                            if (first.courtName) {\r\n                              court = first.courtName;\r\n                            } else if (first.court && first.court.name) {\r\n                              court = first.court.name;\r\n                            } else if (first.court && typeof first.court === 'string') {\r\n                              court = first.court;\r\n                            } else if (first.court && first.court.id) {\r\n                              court = `Court ${first.court.id}`;\r\n                            }\r\n                            \r\n                            // 調試信息\r\n                            console.log('Court debug for session', first.id, ':', {\r\n                              courtName: first.courtName,\r\n                              court: first.court,\r\n                              courtType: typeof first.court,\r\n                              finalCourt: court\r\n                            });\r\n                            \r\n                            return `Court: ${court}`;\r\n                          }\r\n                          return 'Court: -';\r\n                        })()}\r\n                      </Typography>\r\n\r\n                      {/* 學生數量進度條 */}\r\n                      <Box mb={1}>\r\n                        <Typography variant=\"body2\" display=\"flex\" justifyContent=\"space-between\">\r\n                          <span>Students</span>\r\n                          <span>{classItem.totalStudents || 0} / {classItem.capacity}</span>\r\n                        </Typography>\r\n                        <LinearProgress\r\n                          variant=\"determinate\"\r\n                          value={classItem.capacity > 0 ? (classItem.totalStudents / classItem.capacity) * 100 : 0}\r\n                          sx={{ height: 8, borderRadius: 5, my: 0.5 }}\r\n                          color={classItem.totalStudents >= classItem.capacity ? 'error' : 'primary'}\r\n                        />\r\n                      </Box>\r\n\r\n                      {/* 課程進度條 */}\r\n                      <Box mb={1}>\r\n                        <Typography variant=\"body2\" display=\"flex\" justifyContent=\"space-between\">\r\n                          <span>Sessions</span>\r\n                          <span>{completedCount} / {classItem.sessions ? classItem.sessions.length : 0}</span>\r\n                        </Typography>\r\n                        <LinearProgress\r\n                          variant=\"determinate\"\r\n                          value={\r\n                            (classItem.sessions && classItem.sessions.length > 0)\r\n                              ? (completedCount / classItem.sessions.length) * 100\r\n                              : 0\r\n                          }\r\n                          sx={{ height: 8, borderRadius: 5, my: 0.5 }}\r\n                          color=\"secondary\"\r\n                        />\r\n                      </Box>\r\n\r\n                      {/* 出席率進度條 */}\r\n                      <Box mb={2}>\r\n                        <Typography variant=\"body2\" display=\"flex\" justifyContent=\"space-between\">\r\n                          <span>Attendance Rate</span>\r\n                          <span>{attendanceRate}%</span>\r\n                        </Typography>\r\n                        <LinearProgress \r\n                          variant=\"determinate\" \r\n                          value={parseFloat(attendanceRate)} \r\n                          sx={{ height: 8, borderRadius: 5, my: 0.5 }} \r\n                          color={parseFloat(attendanceRate) >= 80 ? 'success' : parseFloat(attendanceRate) >= 60 ? 'warning' : 'error'}\r\n                        />\r\n                      </Box>\r\n\r\n                      {/* 操作按鈕 */}\r\n                      <Stack direction=\"row\" spacing={1}>\r\n                        <Button\r\n                          variant=\"contained\"\r\n                          color=\"success\"\r\n                          startIcon={<CheckCircle />}\r\n                          fullWidth\r\n                          onClick={() => handleTakeAttendance(classItem)}\r\n                          disabled={classStatus === 'completed'}\r\n                        >\r\n                          TAKE ATTENDANCE\r\n                        </Button>\r\n                        {/* 出席記錄按鈕 */}\r\n                        <Button\r\n                          variant=\"outlined\"\r\n                          size=\"small\"\r\n                          onClick={() => {\r\n                            setAttendanceSessionId(classItem.recurringGroupId);\r\n                            setModalType('selectSession');\r\n                            setShowModal(true);\r\n                          }}\r\n                          sx={{\r\n                            borderColor: '#1976d2',\r\n                            color: '#1976d2',\r\n                            '&:hover': {\r\n                              borderColor: '#1565c0',\r\n                              backgroundColor: 'rgba(25, 118, 210, 0.04)'\r\n                            },\r\n                            minWidth: '120px'\r\n                          }}\r\n                        >\r\n                          Record Attendance\r\n                        </Button>\r\n                      </Stack>\r\n                    </CardContent>\r\n                  </Card>\r\n                </Grid>\r\n              );\r\n            });\r\n          })()}\r\n        </Grid>\r\n        \r\n        {/* 分頁導航 */}\r\n        {(() => {\r\n          const filtered = classes.filter(classItem => {\r\n            const matchesSearch = classItem.name.toLowerCase().includes(searchTerm.toLowerCase());\r\n            \r\n            if (statusFilter === 'all') return matchesSearch;\r\n            \r\n            const classStatus = (() => {\r\n              if (classItem.sessions && classItem.sessions.length > 0) {\r\n                const now = new Date();\r\n                const futureSessions = classItem.sessions.filter(s => \r\n                  s.startTime && new Date(s.startTime) > now\r\n                );\r\n                const pastSessions = classItem.sessions.filter(s => \r\n                  s.startTime && new Date(s.startTime) <= now\r\n                );\r\n                \r\n                if (futureSessions.length > 0 && pastSessions.length > 0) {\r\n                  return 'ongoing';\r\n                } else if (futureSessions.length > 0) {\r\n                  return 'upcoming';\r\n                } else {\r\n                  return 'completed';\r\n                }\r\n              }\r\n              return 'unknown';\r\n            })();\r\n            \r\n            return matchesSearch && classStatus === statusFilter;\r\n          });\r\n          \r\n          const filteredTotalPages = Math.ceil(filtered.length / classesPerPage);\r\n          \r\n          return filteredTotalPages > 1 ? (\r\n            <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', mt: 3, gap: 2 }}>\r\n              <Button\r\n                variant=\"outlined\"\r\n                onClick={handlePrevPage}\r\n                disabled={currentPage === 0}\r\n                sx={{ borderRadius: 2 }}\r\n              >\r\n                Previous\r\n              </Button>\r\n              <Typography variant=\"body2\" sx={{ px: 2 }}>\r\n                Page {currentPage + 1} of {filteredTotalPages}\r\n              </Typography>\r\n              <Button\r\n                variant=\"outlined\"\r\n                onClick={handleNextPage}\r\n                disabled={currentPage === filteredTotalPages - 1}\r\n                sx={{ borderRadius: 2 }}\r\n              >\r\n                Next\r\n              </Button>\r\n            </Box>\r\n          ) : null;\r\n        })()}\r\n      </Box>\r\n    );\r\n  };\r\n\r\n  // --- Student List Tab ---\r\n  const StudentList = () => (\r\n    <Box>\r\n      <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={2}>\r\n        <Typography variant=\"h5\" fontWeight={700}>All Students</Typography>\r\n      </Box>\r\n      <Stack direction={{ xs: 'column', md: 'row' }} spacing={3}>\r\n        {students.map((student) => {\r\n          // 計算學生註冊的課程數量\r\n          const registeredClasses = classes.filter(c => \r\n            c.sessions.some(s => \r\n              s.registrations && s.registrations.some(reg => \r\n                (reg.memberId || reg.id) === student.memberId\r\n              )\r\n            )\r\n          );\r\n          \r\n          // 計算學生的session統計\r\n          let totalSessions = 0;\r\n          let completedSessions = 0;\r\n          let presentSessions = 0;\r\n          \r\n          classes.forEach(classItem => {\r\n            if (classItem.sessions) {\r\n              classItem.sessions.forEach(session => {\r\n                if (session.registrations) {\r\n                  const studentRegistration = session.registrations.find(reg => \r\n                    (reg.memberId || reg.id) === student.memberId\r\n                  );\r\n                  if (studentRegistration) {\r\n                    totalSessions++;\r\n                    // 检查session是否已完成\r\n                    const isCompleted = session.status === 'COMPLETED' || \r\n                                       session.status === 'completed' || \r\n                                       session.attendanceTaken === true ||\r\n                                       (session.registrations && session.registrations.some(reg => reg.attendanceStatus));\r\n                    if (isCompleted) {\r\n                      completedSessions++;\r\n                    }\r\n                    // 检查学生是否出席\r\n                    if (studentRegistration.attendanceStatus === 'PRESENT') {\r\n                      presentSessions++;\r\n                    }\r\n                  }\r\n                }\r\n              });\r\n            }\r\n          });\r\n          \r\n          const progress = totalSessions > 0 ? (completedSessions / totalSessions) * 100 : 0;\r\n          const attendanceRate = totalSessions > 0 ? (presentSessions / totalSessions) * 100 : 0;\r\n          \r\n          return (\r\n            <Card\r\n              key={student.memberId}\r\n              sx={{ minWidth: 280, cursor: 'pointer', transition: '0.2s', '&:hover': { boxShadow: 6 } }}\r\n              onClick={() => {\r\n                setSelectedStudent(student);\r\n                setModalType('studentDetail');\r\n                setShowModal(true);\r\n              }}\r\n            >\r\n              <CardContent>\r\n                <Box display=\"flex\" alignItems=\"center\" mb={2}>\r\n                  <Avatar sx={{ bgcolor: 'primary.main', mr: 2 }}>\r\n                    {(student.name || student.username || 'S').charAt(0)}\r\n                  </Avatar>\r\n                  <Box flex={1}>\r\n                    <Typography fontWeight={600}>\r\n                      {student.username || student.name || 'Unknown Student'}\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" color=\"text.secondary\">\r\n                      {registeredClasses.length} class{registeredClasses.length !== 1 ? 'es' : ''} registered\r\n                    </Typography>\r\n                  </Box>\r\n                  <Chip\r\n                    label={student.status || 'active'}\r\n                    color={(student.status || 'active') === 'active' ? 'success' : 'default'}\r\n                    size=\"small\"\r\n                  />\r\n                </Box>\r\n                <Box mb={1}>\r\n                  <Typography variant=\"body2\">Sessions: {completedSessions}/{totalSessions}</Typography>\r\n                  <LinearProgress variant=\"determinate\" value={progress} sx={{ height: 8, borderRadius: 5, my: 0.5 }} />\r\n                </Box>\r\n                <Box mb={1}>\r\n                  <Typography variant=\"body2\">Attendance Rate: {attendanceRate.toFixed(0)}%</Typography>\r\n                  <LinearProgress \r\n                    variant=\"determinate\" \r\n                    value={attendanceRate} \r\n                    sx={{ \r\n                      height: 6, \r\n                      borderRadius: 3, \r\n                      my: 0.5,\r\n                      backgroundColor: 'rgba(156, 39, 176, 0.2)',\r\n                      '& .MuiLinearProgress-bar': {\r\n                        backgroundColor: 'purple'\r\n                      }\r\n                    }} \r\n                  />\r\n                </Box>\r\n                <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\r\n                  <Box display=\"flex\" alignItems=\"center\" gap={1}>\r\n                    <StarRating rating={student.rating || 0} />\r\n                    <Typography variant=\"body2\" color=\"text.secondary\">{student.rating || 0}</Typography>\r\n                  </Box>\r\n                  {(student.missedSessions || 0) > 0 && (\r\n                    <Box display=\"flex\" alignItems=\"center\" gap={0.5} color=\"error.main\">\r\n                      <AccessTime fontSize=\"small\" />\r\n                      <Typography variant=\"body2\">{student.missedSessions || 0}</Typography>\r\n                    </Box>\r\n                  )}\r\n                </Box>\r\n              </CardContent>\r\n            </Card>\r\n          );\r\n        })}\r\n      </Stack>\r\n    </Box>\r\n  );\r\n\r\n  // --- Session Selection Modal ---\r\n  const SessionSelectionModal = () => {\r\n    const classItem = classes.find(c => c.recurringGroupId === attendanceSessionId);\r\n    if (!classItem) return null;\r\n\r\n    return (\r\n      <Dialog open={showModal && modalType === 'selectSession'} onClose={() => setShowModal(false)} maxWidth=\"md\" fullWidth>\r\n        <DialogTitle>Select Session for Attendance</DialogTitle>\r\n        <DialogContent dividers>\r\n          <Typography variant=\"body2\" color=\"text.secondary\" mb={2}>\r\n            Select which specific session you want to take attendance for:\r\n          </Typography>\r\n          <Stack spacing={2}>\r\n            {classItem.sessions.map((session) => (\r\n              <Card key={session.id} sx={{ cursor: 'pointer', '&:hover': { bgcolor: '#f5f5f5' } }}>\r\n                <CardContent onClick={async () => {\r\n                  try {\r\n                    console.log('Loading attendance data for session:', session.id);\r\n                    \r\n                    // 重置狀態\r\n                    setTodayAttendance({});\r\n                    setStudentFeedbacks({});\r\n                    setSavedAttendanceData(null);\r\n                    setIsEditing(false);\r\n                    \r\n                    // 嘗試從後端獲取已保存的考勤數據\r\n                    const response = await fetch(`${process.env.REACT_APP_API_BASE_URL || 'http://localhost:8081'}/api/coach/session/${session.id}/attendance`, {\r\n                      method: 'GET',\r\n                      headers: {\r\n                        'Content-Type': 'application/json',\r\n                        'Authorization': `Bearer ${localStorage.getItem('authToken')}`\r\n                      }\r\n                    });\r\n                    \r\n                    if (response.ok) {\r\n                      const attendanceData = await response.json();\r\n                      console.log('Loaded attendance data:', attendanceData);\r\n                      \r\n                      if (attendanceData.hasAttendanceData) {\r\n                        // 如果有已保存的數據，設置到狀態中\r\n                        const savedAttendance = attendanceData.attendance || {};\r\n                        const savedFeedbacks = attendanceData.feedbacks || {};\r\n                        \r\n                        setTodayAttendance(savedAttendance);\r\n                        setStudentFeedbacks(savedFeedbacks);\r\n                        setSavedAttendanceData({\r\n                          sessionId: session.id,\r\n                          attendance: savedAttendance,\r\n                          feedbacks: savedFeedbacks\r\n                        });\r\n                        setIsEditing(false); // 确保是查看模式\r\n                        console.log('Restored saved attendance data:', {\r\n                          attendance: savedAttendance,\r\n                          feedbacks: savedFeedbacks\r\n                        });\r\n                      } else {\r\n                        // 没有已保存的数据，重置状态\r\n                        setTodayAttendance({});\r\n                        setStudentFeedbacks({});\r\n                        setSavedAttendanceData(null);\r\n                        setIsEditing(false);\r\n                        console.log('No saved data found, starting fresh');\r\n                      }\r\n                    } else {\r\n                      console.log('No saved attendance data found for this session');\r\n                      // 重置状态\r\n                      setTodayAttendance({});\r\n                      setStudentFeedbacks({});\r\n                      setSavedAttendanceData(null);\r\n                      setIsEditing(false);\r\n                    }\r\n                  } catch (error) {\r\n                    console.error('Error loading attendance data:', error);\r\n                    // 即使加載失敗，也繼續打開考勤模態框\r\n                  }\r\n                  \r\n                  setSelectedSessionForAttendance(session);\r\n                  setModalType('attendance');\r\n                }}>\r\n                  <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\r\n                    <Box>\r\n                      <Typography variant=\"h6\">{session.title || classItem.name}</Typography>\r\n                      <Typography variant=\"body2\" color=\"text.secondary\">\r\n                        {session.startTime ? new Date(session.startTime).toLocaleDateString() : ''} | \r\n                        {session.startTime ? new Date(session.startTime).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }) : ''} - \r\n                        {session.endTime ? new Date(session.endTime).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }) : ''}\r\n                      </Typography>\r\n                      <Typography variant=\"body2\" color=\"text.secondary\">\r\n                        Venue: {session.venue?.name || session.venueName || '-'} | \r\n                        Court: {session.court?.name || session.courtName || '-'}\r\n                      </Typography>\r\n                      <Typography variant=\"body2\" color=\"text.secondary\">\r\n                        Students: {session.registrations ? session.registrations.length : 0}\r\n                      </Typography>\r\n                    </Box>\r\n                    <Chip \r\n                      label={session.status || 'Scheduled'} \r\n                      color={session.status === 'COMPLETED' ? 'success' : 'primary'} \r\n                      size=\"small\" \r\n                    />\r\n                  </Box>\r\n                </CardContent>\r\n              </Card>\r\n            ))}\r\n          </Stack>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setShowModal(false)} color=\"inherit\">Cancel</Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    );\r\n  };\r\n\r\n  // --- Attendance Modal ---\r\n  const AttendanceModal = useCallback(() => {\r\n    if (!selectedSessionForAttendance) return null;\r\n    \r\n    // 只顯示這個具體 session 的學生\r\n    const sessionStudents = selectedSessionForAttendance.registrations || [];\r\n\r\n    // 檢查是否到了課程日期\r\n    const isSessionDateReached = (() => {\r\n      if (!selectedSessionForAttendance?.startTime) return false;\r\n      const sessionDate = new Date(selectedSessionForAttendance.startTime);\r\n      const today = new Date();\r\n      const sessionDateOnly = new Date(sessionDate.getFullYear(), sessionDate.getMonth(), sessionDate.getDate());\r\n      const todayOnly = new Date(today.getFullYear(), today.getMonth(), today.getDate());\r\n      \r\n      return sessionDateOnly <= todayOnly;\r\n    })();\r\n\r\n    // 移除 canTakeAttendance 限制，讓出席記錄始終可用\r\n    const canTakeAttendance = true;\r\n\r\n    return (\r\n      <Dialog open={showModal && modalType === 'attendance'} onClose={() => setShowModal(false)} maxWidth=\"md\" fullWidth>\r\n        <DialogTitle>\r\n          Take Attendance - {selectedSessionForAttendance.title || 'Session'}\r\n          {savedAttendanceData && (\r\n            <Chip \r\n              label={isEditing ? \"Editing\" : \"Saved\"} \r\n              color={isEditing ? \"warning\" : \"success\"} \r\n              size=\"small\" \r\n              sx={{ ml: 2 }}\r\n              icon={isEditing ? <Edit /> : <CheckCircle />}\r\n            />\r\n          )}\r\n        </DialogTitle>\r\n        <DialogContent dividers>\r\n          <Box mb={2} p={2} bgcolor=\"#f8f9fa\" borderRadius={1}>\r\n            <Typography variant=\"body2\" color=\"text.secondary\">\r\n              Date: {selectedSessionForAttendance.startTime ? new Date(selectedSessionForAttendance.startTime).toLocaleDateString() : ''}\r\n            </Typography>\r\n            <Typography variant=\"body2\" color=\"text.secondary\">\r\n              Time: {selectedSessionForAttendance.startTime ? new Date(selectedSessionForAttendance.startTime).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }) : ''} - \r\n              {selectedSessionForAttendance.endTime ? new Date(selectedSessionForAttendance.endTime).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }) : ''}\r\n            </Typography>\r\n            <Typography variant=\"body2\" color=\"text.secondary\">\r\n              Venue: {selectedSessionForAttendance.venue?.name || selectedSessionForAttendance.venueName || '-'} | \r\n              Court: {selectedSessionForAttendance.court?.name || selectedSessionForAttendance.courtName || '-'}\r\n            </Typography>\r\n            {isEditing && (\r\n              <Typography variant=\"body2\" color=\"warning.main\" sx={{ mt: 1, fontWeight: 'bold' }}>\r\n                ✏\uFE0F Edit Mode: You can now modify attendance and feedback\r\n              </Typography>\r\n            )}\r\n            {savedAttendanceData && !isEditing && (\r\n              <Typography variant=\"body2\" color=\"success.main\" sx={{ mt: 1, fontWeight: 'bold' }}>\r\n                ✅ Data saved successfully. Click \"Edit\" to make changes.\r\n              </Typography>\r\n            )}\r\n          </Box>\r\n          <Stack spacing={2}>\r\n            {sessionStudents.length === 0 ? (\r\n              <Typography color=\"text.secondary\">No students registered for this session.</Typography>\r\n            ) : (\r\n              sessionStudents.map((student) => {\r\n                console.log('Student data in attendance modal:', student);\r\n                const stableKey = `student-${student.registrationId || student.memberId || student.id || 'unknown'}`;\r\n                return (\r\n                  <Box key={stableKey} display=\"flex\" flexDirection=\"column\" p={2} bgcolor=\"#f5f5f5\" borderRadius={2} mb={2}>\r\n                    {/* 學生基本資訊和點名按鈕 */}\r\n                    <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\" mb={2}>\r\n                      <Box display=\"flex\" alignItems=\"center\" gap={2}>\r\n                        <Avatar sx={{ width: 40, height: 40, bgcolor: 'primary.main' }}>\r\n                          {student.name?.charAt(0) || student.username?.charAt(0) || 'S'}\r\n                        </Avatar>\r\n                        <Box>\r\n                          <Typography fontWeight={500}>\r\n                            {student.username || student.name || 'Unknown Student'}\r\n                          </Typography>\r\n                          <Typography variant=\"body2\" color=\"text.secondary\">\r\n                            {student.name && student.username && student.name !== student.username ? student.name : ''}\r\n                            {student.phone ? (student.name && student.username && student.name !== student.username ? ' | ' : '') + student.phone : ''}\r\n                            {student.email && !student.username && !student.name ? student.email : ''}\r\n                          </Typography>\r\n                          {isEditing && (\r\n                            <Typography variant=\"caption\" color=\"warning.main\" sx={{ fontWeight: 'bold' }}>\r\n                              ✏\uFE0F Editing enabled\r\n                            </Typography>\r\n                          )}\r\n                        </Box>\r\n                      </Box>\r\n                      <Stack direction=\"row\" spacing={1}>\r\n                        <Button\r\n                          size=\"small\"\r\n                          variant={(() => {\r\n                            const studentId = String(student.memberId || student.id || '').trim();\r\n                            if (studentId) {\r\n                              // 優先使用當前編輯的數據\r\n                              if (todayAttendance[studentId] !== undefined) {\r\n                                return todayAttendance[studentId] === true ? 'contained' : 'outlined';\r\n                              }\r\n                              // 如果沒有當前編輯數據，使用已保存的數據\r\n                              if (savedAttendanceData && savedAttendanceData.attendance[studentId] !== undefined) {\r\n                                return savedAttendanceData.attendance[studentId] === true ? 'contained' : 'outlined';\r\n                              }\r\n                            }\r\n                            return 'outlined';\r\n                          })()}\r\n                          color=\"success\"\r\n                          disabled={!isEditing && savedAttendanceData} // 非编辑模式下禁用\r\n                          onClick={() => {\r\n                            const studentId = String(student.memberId || student.id || '').trim();\r\n                            if (studentId && (isEditing || !savedAttendanceData)) {\r\n                              console.log('Marking student', studentId, 'as present');\r\n                              handleAttendanceCheck(studentId, true);\r\n                            }\r\n                          }}\r\n                        >\r\n                          Present\r\n                        </Button>\r\n                        <Button\r\n                          size=\"small\"\r\n                          variant={(() => {\r\n                            const studentId = String(student.memberId || student.id || '').trim();\r\n                            if (studentId) {\r\n                              // 優先使用當前編輯的數據\r\n                              if (todayAttendance[studentId] !== undefined) {\r\n                                return todayAttendance[studentId] === false ? 'contained' : 'outlined';\r\n                              }\r\n                              // 如果沒有當前編輯數據，使用已保存的數據\r\n                              if (savedAttendanceData && savedAttendanceData.attendance[studentId] !== undefined) {\r\n                                return savedAttendanceData.attendance[studentId] === false ? 'contained' : 'outlined';\r\n                              }\r\n                            }\r\n                            return 'outlined';\r\n                          })()}\r\n                          color=\"error\"\r\n                          disabled={!isEditing && savedAttendanceData} // 非编辑模式下禁用\r\n                          onClick={() => {\r\n                            const studentId = String(student.memberId || student.id || '').trim();\r\n                            if (studentId && (isEditing || !savedAttendanceData)) {\r\n                              console.log('Marking student', studentId, 'as absent');\r\n                              handleAttendanceCheck(studentId, false);\r\n                            }\r\n                          }}\r\n                        >\r\n                          Absent\r\n                        </Button>\r\n                      </Stack>\r\n                    </Box>\r\n                    \r\n                    {/* Feedback 輸入框 - 支持編輯模式 */}\r\n                    <TextField\r\n                      label=\"Feedback for this student\"\r\n                      placeholder=\"Enter feedback, comments, or suggestions...\"\r\n                      defaultValue={(() => {\r\n                        const studentId = String(student.memberId || student.id || '').trim();\r\n                        if (studentId && savedAttendanceData && savedAttendanceData.feedbacks[studentId]) {\r\n                          return savedAttendanceData.feedbacks[studentId];\r\n                        }\r\n                        return '';\r\n                      })()}\r\n                      onBlur={(e) => {\r\n                        try {\r\n                          const studentId = String(student.memberId || student.id || '').trim();\r\n                          if (studentId) {\r\n                            console.log('Saving feedback for student', studentId, ':', e.target.value);\r\n                            setStudentFeedbacks(prev => ({\r\n                              ...prev,\r\n                              [studentId]: e.target.value\r\n                            }));\r\n                          }\r\n                        } catch (error) {\r\n                          console.error('Error updating feedback:', error);\r\n                        }\r\n                      }}\r\n                      multiline\r\n                      rows={2}\r\n                      fullWidth\r\n                      disabled={!isEditing && savedAttendanceData} // 非编辑模式下禁用输入\r\n                      sx={{\r\n                        '& .MuiInputBase-root': {\r\n                          backgroundColor: isEditing ? 'white' : '#f5f5f5'\r\n                        },\r\n                        '& .MuiInputBase-input.Mui-disabled': {\r\n                          WebkitTextFillColor: 'rgba(0, 0, 0, 0.87)', // 保持文字颜色\r\n                          backgroundColor: '#f5f5f5'\r\n                        }\r\n                      }}\r\n                    />\r\n                  </Box>\r\n                );\r\n              })\r\n            )}\r\n          </Stack>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          {isEditing ? (\r\n            // 編輯模式：顯示 Cancel 和 Save Edit 按鈕\r\n            <>\r\n              <Button onClick={() => handleCancelEdit(false)} color=\"inherit\">\r\n                Cancel\r\n              </Button>\r\n              <Button \r\n                onClick={handleSaveEdit}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n              >\r\n                Save Edit\r\n              </Button>\r\n            </>\r\n          ) : savedAttendanceData ? (\r\n            // 已保存狀態：顯示 Edit 和 Close 按鈕\r\n            <>\r\n              <Button onClick={() => handleCancelEdit(true)} color=\"inherit\">\r\n                Close\r\n              </Button>\r\n              <Button \r\n                onClick={handleEdit}\r\n                variant=\"outlined\"\r\n                color=\"primary\"\r\n              >\r\n                Edit\r\n              </Button>\r\n            </>\r\n          ) : (\r\n            // 初始狀態：顯示 Cancel 和 Save 按鈕\r\n            <>\r\n              <Button onClick={() => handleCancelEdit(true)} color=\"inherit\">\r\n                Cancel\r\n              </Button>\r\n              <Button \r\n                onClick={handleSaveAttendanceAndFeedback}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n              >\r\n                Save Attendance & Feedback\r\n              </Button>\r\n            </>\r\n          )}\r\n        </DialogActions>\r\n      </Dialog>\r\n    );\r\n  }, [selectedSessionForAttendance, showModal, modalType, todayAttendance, studentFeedbacks, handleAttendanceCheck, handleSaveAttendanceAndFeedback, isEditing, savedAttendanceData, handleCancelEdit, handleSaveEdit, handleEdit]);\r\n\r\n  // --- Student Detail Modal ---\r\n  const StudentDetailModal = () => {\r\n    if (!selectedStudent) return null;\r\n    const studentEvaluations = evaluations.filter(e => e.studentId === selectedStudent.memberId);\r\n    \r\n    // 获取学生参加的所有class sessions\r\n    const studentSessions = [];\r\n    classes.forEach(classItem => {\r\n      if (classItem.sessions) {\r\n        classItem.sessions.forEach(session => {\r\n          if (session.registrations) {\r\n            const studentRegistration = session.registrations.find(reg => \r\n              (reg.memberId || reg.id) === selectedStudent.memberId\r\n            );\r\n            if (studentRegistration) {\r\n              studentSessions.push({\r\n                ...session,\r\n                className: classItem.name,\r\n                classId: classItem.recurringGroupId,\r\n                registration: studentRegistration\r\n              });\r\n            }\r\n          }\r\n        });\r\n      }\r\n    });\r\n    \r\n    // 计算学生统计\r\n    let totalSessions = studentSessions.length;\r\n    let completedSessions = studentSessions.filter(s => \r\n      s.status === 'COMPLETED' || \r\n      s.status === 'completed' || \r\n      s.attendanceTaken === true ||\r\n      (s.registrations && s.registrations.some(reg => reg.attendanceStatus))\r\n    ).length;\r\n    let presentSessions = studentSessions.filter(s => \r\n      s.registration && s.registration.attendanceStatus === 'PRESENT'\r\n    ).length;\r\n    let absentSessions = studentSessions.filter(s => \r\n      s.registration && s.registration.attendanceStatus === 'ABSENT'\r\n    ).length;\r\n    \r\n    const progress = totalSessions > 0 ? (completedSessions / totalSessions) * 100 : 0;\r\n    const attendanceRate = totalSessions > 0 ? (presentSessions / totalSessions) * 100 : 0;\r\n    \r\n    return (\r\n      <Dialog open={showModal && modalType === 'studentDetail'} onClose={() => setShowModal(false)} maxWidth=\"md\" fullWidth>\r\n        <DialogTitle>Student Details</DialogTitle>\r\n        <DialogContent dividers>\r\n          <Box display=\"flex\" alignItems=\"center\" gap={3} mb={3}>\r\n            <Avatar sx={{ width: 64, height: 64, bgcolor: 'primary.main', fontSize: 32 }}>\r\n              {(selectedStudent.name || selectedStudent.username || 'S').charAt(0)}\r\n            </Avatar>\r\n            <Box>\r\n              <Typography variant=\"h6\">\r\n                {selectedStudent.username || selectedStudent.name || 'Unknown Student'}\r\n              </Typography>\r\n              <Typography color=\"text.secondary\">{selectedStudent.level || 'Beginner'}</Typography>\r\n            </Box>\r\n          </Box>\r\n          \r\n          {/* 统计卡片 */}\r\n          <Stack direction={{ xs: 'column', md: 'row' }} spacing={3} mb={3}>\r\n            <Card sx={{ flex: 1 }}>\r\n              <CardContent>\r\n                <Typography fontWeight={600} mb={1} display=\"flex\" alignItems=\"center\" gap={1}>\r\n                  <Person fontSize=\"small\" /> Basic Information\r\n                </Typography>\r\n                <Typography variant=\"body2\">\r\n                  <Phone fontSize=\"small\" sx={{ mr: 0.5 }} /> {selectedStudent.phone || 'No phone'}\r\n                </Typography>\r\n                <Typography variant=\"body2\">\r\n                  <Email fontSize=\"small\" sx={{ mr: 0.5 }} /> {selectedStudent.email || 'No email'}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n            <Card sx={{ flex: 1 }}>\r\n              <CardContent>\r\n                <Typography fontWeight={600} mb={1} display=\"flex\" alignItems=\"center\" gap={1}>\r\n                  <TrendingUp fontSize=\"small\" /> Progress Statistics\r\n                </Typography>\r\n                <Typography variant=\"body2\">Completed: {completedSessions}/{totalSessions} sessions</Typography>\r\n                <LinearProgress variant=\"determinate\" value={progress} sx={{ height: 8, borderRadius: 5, my: 0.5 }} />\r\n                <Typography variant=\"body2\">Attendance Rate: {attendanceRate.toFixed(0)}%</Typography>\r\n                <LinearProgress \r\n                  variant=\"determinate\" \r\n                  value={attendanceRate} \r\n                  sx={{ \r\n                    height: 6, \r\n                    borderRadius: 3, \r\n                    my: 0.5,\r\n                    backgroundColor: 'rgba(156, 39, 176, 0.2)',\r\n                    '& .MuiLinearProgress-bar': {\r\n                      backgroundColor: 'purple'\r\n                    }\r\n                  }} \r\n                />\r\n              </CardContent>\r\n            </Card>\r\n            <Card sx={{ flex: 1 }}>\r\n              <CardContent>\r\n                <Typography fontWeight={600} mb={1} display=\"flex\" alignItems=\"center\" gap={1}>\r\n                  <CheckCircle fontSize=\"small\" /> Attendance Summary\r\n                </Typography>\r\n                <Typography variant=\"body2\" color=\"success.main\">Present: {presentSessions}</Typography>\r\n                <Typography variant=\"body2\" color=\"error.main\">Absent: {absentSessions}</Typography>\r\n                <Typography variant=\"body2\" color=\"text.secondary\">Not Recorded: {totalSessions - presentSessions - absentSessions}</Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Stack>\r\n          \r\n          {/* Class Sessions 列表 */}\r\n          <Card sx={{ mb: 3 }}>\r\n            <CardContent>\r\n              <Typography fontWeight={600} mb={2} display=\"flex\" alignItems=\"center\" gap={1}>\r\n                <School fontSize=\"small\" /> Class Sessions ({studentSessions.length})\r\n              </Typography>\r\n              {studentSessions.length > 0 ? (\r\n                <Stack spacing={2}>\r\n                  {studentSessions.map((session, index) => {\r\n                    const sessionDate = new Date(session.startTime);\r\n                    const isCompleted = session.status === 'COMPLETED' || \r\n                                       session.status === 'completed' || \r\n                                       session.attendanceTaken === true ||\r\n                                       (session.registrations && session.registrations.some(reg => reg.attendanceStatus));\r\n                    \r\n                    return (\r\n                      <Card key={session.id} variant=\"outlined\" sx={{ p: 2 }}>\r\n                        <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\r\n                          <Box>\r\n                            <Typography fontWeight={600} variant=\"body2\">\r\n                              {session.className || session.title || 'Class'}\r\n                            </Typography>\r\n                            <Typography variant=\"body2\" color=\"text.secondary\">\r\n                              {sessionDate.toLocaleDateString()} {sessionDate.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}\r\n                            </Typography>\r\n                            <Typography variant=\"body2\" color=\"text.secondary\">\r\n                              {session.courtName || session.court?.name || 'Court'} • {session.venueName || session.venue?.name || 'Venue'}\r\n                            </Typography>\r\n                          </Box>\r\n                          <Box display=\"flex\" alignItems=\"center\" gap={1}>\r\n                            <Chip \r\n                              label={isCompleted ? 'Completed' : 'Scheduled'} \r\n                              color={isCompleted ? 'success' : 'default'} \r\n                              size=\"small\" \r\n                            />\r\n                            {session.registration?.attendanceStatus && (\r\n                              <Chip \r\n                                label={session.registration.attendanceStatus} \r\n                                color={session.registration.attendanceStatus === 'PRESENT' ? 'success' : 'error'} \r\n                                size=\"small\" \r\n                              />\r\n                            )}\r\n                          </Box>\r\n                        </Box>\r\n                      </Card>\r\n                    );\r\n                  })}\r\n                </Stack>\r\n              ) : (\r\n                <Typography color=\"text.secondary\">No class sessions found for this student.</Typography>\r\n              )}\r\n            </CardContent>\r\n          </Card>\r\n          \r\n          <Card sx={{ mb: 3 }}>\r\n            <CardContent>\r\n              <Typography fontWeight={600} mb={1} display=\"flex\" alignItems=\"center\" gap={1}>\r\n                <Book fontSize=\"small\" /> Coach Notes\r\n              </Typography>\r\n              <Typography variant=\"body2\">{selectedStudent.notes || 'No notes available'}</Typography>\r\n            </CardContent>\r\n          </Card>\r\n          \r\n          <Stack direction=\"row\" spacing={2} mb={3}>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"secondary\"\r\n              startIcon={<AccessTime />}\r\n              onClick={() => {\r\n                setModalType('makeup');\r\n              }}\r\n            >\r\n              Request Makeup\r\n            </Button>\r\n          </Stack>\r\n          {studentEvaluations.length > 0 && (\r\n            <Box>\r\n              <Typography fontWeight={600} mb={1}>Recent Evaluations</Typography>\r\n              <Stack spacing={1}>\r\n                {studentEvaluations.slice(-3).map((evaluation) => (\r\n                  <Card key={evaluation.id} variant=\"outlined\">\r\n                    <CardContent>\r\n                      <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\" mb={1}>\r\n                        <Typography variant=\"body2\" color=\"text.secondary\">{evaluation.date}</Typography>\r\n                        <StarRating rating={evaluation.rating} />\r\n                      </Box>\r\n                      <Typography variant=\"body2\">{evaluation.comments}</Typography>\r\n                    </CardContent>\r\n                  </Card>\r\n                ))}\r\n              </Stack>\r\n            </Box>\r\n          )}\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setShowModal(false)} color=\"inherit\">Close</Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    );\r\n  };\r\n\r\n  // --- Evaluation Modal ---\r\n  const EvaluationModal = () => {\r\n    const [rating, setRating] = useState(0);\r\n    const [comments, setComments] = useState('');\r\n    const [skills, setSkills] = useState({\r\n      forehand: 0,\r\n      backhand: 0,\r\n      serve: 0,\r\n      footwork: 0\r\n    });\r\n    return (\r\n      <Dialog open={showModal && modalType === 'evaluation'} onClose={() => setShowModal(false)} maxWidth=\"xs\" fullWidth>\r\n        <DialogTitle>Session Evaluation - {selectedStudent?.name}</DialogTitle>\r\n        <DialogContent dividers>\r\n          <Stack spacing={2}>\r\n            <Box>\r\n              <Typography fontWeight={600} mb={1}>Overall Rating</Typography>\r\n              <Box display=\"flex\" gap={1}>\r\n                {[1, 2, 3, 4, 5].map((star) => (\r\n                  <IconButton key={star} onClick={() => setRating(star)}>\r\n                    <Star sx={{ color: star <= rating ? '#FFD600' : '#E0E0E0' }} />\r\n                  </IconButton>\r\n                ))}\r\n              </Box>\r\n            </Box>\r\n            <Box>\r\n              <Typography fontWeight={600} mb={1}>Skill Assessment</Typography>\r\n              {Object.entries(skills).map(([skill, value]) => (\r\n                <Box key={skill} mb={1}>\r\n                  <Typography variant=\"body2\" mb={0.5}>\r\n                    {skill && skill.length > 0 ? skill.charAt(0).toUpperCase() + skill.slice(1) : skill}\r\n                  </Typography>\r\n                  <Box display=\"flex\" gap={1}>\r\n                    {[1, 2, 3, 4, 5].map((star) => (\r\n                      <IconButton key={star} onClick={() => setSkills(prev => ({ ...prev, [skill]: star }))}>\r\n                        <Star sx={{ color: star <= value ? '#FFD600' : '#E0E0E0' }} fontSize=\"small\" />\r\n                      </IconButton>\r\n                    ))}\r\n                  </Box>\r\n                </Box>\r\n              ))}\r\n            </Box>\r\n            <TextField\r\n              label=\"Comments & Notes\"\r\n              multiline\r\n              minRows={3}\r\n              value={comments}\r\n              onChange={e => setComments(e.target.value)}\r\n              fullWidth\r\n            />\r\n          </Stack>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setShowModal(false)} color=\"inherit\">Cancel</Button>\r\n          <Button\r\n            onClick={() => handleAddEvaluation({ rating, comments, skills })}\r\n            variant=\"contained\"\r\n            disabled={rating === 0}\r\n          >\r\n            Save Evaluation\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    );\r\n  };\r\n\r\n\r\n\r\n  return (\r\n    <Box sx={{ p: { xs: 1, md: 4 }, bgcolor: '#f5f5f5', minHeight: '100vh' }}>\r\n      <Box maxWidth=\"lg\" mx=\"auto\">\r\n        <Typography variant=\"h4\" fontWeight={700} mb={3}>Student Management System</Typography>\r\n        \r\n        {/* 成功提示 */}\r\n        {showSuccessMessage && (\r\n          <Box sx={{ mb: 2 }}>\r\n            <Alert severity=\"success\" onClose={() => setShowSuccessMessage(false)}>\r\n              ✅ Attendance and feedback saved successfully! The data has been saved to the database.\r\n            </Alert>\r\n          </Box>\r\n        )}\r\n        \r\n        <AppBar position=\"static\" color=\"default\" sx={{ borderRadius: 2, mb: 3 }}>\r\n          <Tabs\r\n            value={activeTab}\r\n            onChange={(_, v) => setActiveTab(v)}\r\n            indicatorColor=\"primary\"\r\n            textColor=\"primary\"\r\n            variant=\"standard\"\r\n          >\r\n            <Tab label=\"Class Overview\" />\r\n            <Tab label=\"All Students\" />\r\n          </Tabs>\r\n        </AppBar>\r\n        {activeTab === 0 && <ClassOverview />}\r\n        {activeTab === 1 && <StudentList />}\r\n        {showModal && modalType === 'selectSession' && <SessionSelectionModal />}\r\n        {showModal && modalType === 'attendance' && <AttendanceModal />}\r\n        {showModal && modalType === 'studentDetail' && <StudentDetailModal />}\r\n        {showModal && modalType === 'evaluation' && <EvaluationModal />}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default StudentManagementSystem; 
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball-frontend/src/components/coach/StudentManagementSystem.jsx b/pickleball-frontend/src/components/coach/StudentManagementSystem.jsx
--- a/pickleball-frontend/src/components/coach/StudentManagementSystem.jsx	(revision c178c1d9e80f6815b91226b2d10f391611dcb6b4)
+++ b/pickleball-frontend/src/components/coach/StudentManagementSystem.jsx	(date 1754946230224)
@@ -132,7 +132,7 @@
       let sessionsWithRegs = [];
       // 用 recurringGroupId 查詢所有 session 及報名名單
       if (first.recurringGroupId) {
-        sessionsWithRegs = await ClassSessionService.getRecurringClassFullDetails(first.recurringGroupId);
+        sessionsWithRegs = await ClassSessionService.getRecurringGroupDetails(first.recurringGroupId);
       } else {
         // 單堂課 fallback
         sessionsWithRegs = [
Index: pickleball-frontend/src/components/court/CourtListPage.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useState, useEffect } from 'react';\r\nimport { \r\n  Container, Box, Grid, Typography, \r\n  TextField, Button, Chip, Paper,\r\n  MenuItem, Select, FormControl, InputLabel\r\n} from '@mui/material';\r\nimport { FilterList as FilterIcon, Search as SearchIcon, SportsTennis as CourtIcon } from '@mui/icons-material';\r\nimport CourtCard from './CourtCard';\r\nimport CourtService from '../../service/CourtService';\r\nimport { useAuth } from '../../context/AuthContext';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst CourtListPage = () => {\r\n  const [courts, setCourts] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [filteredCourts, setFilteredCourts] = useState([]);\r\n  const [groupedVenues, setGroupedVenues] = useState([]);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [statusFilter, setStatusFilter] = useState('all');\r\n  const [locationFilter, setLocationFilter] = useState('all');\r\n  const [showFilters, setShowFilters] = useState(false);\r\n  const navigate = useNavigate();\r\n  const { authToken, currentUser } = useAuth();\r\n\r\n  // Fetch courts\r\n  useEffect(() => {\r\n    const fetchCourts = async () => {\r\n      try {\r\n        const courtsData = await CourtService.getAllCourts();\r\n        setCourts(courtsData);\r\n        setFilteredCourts(courtsData);\r\n        setGroupedVenues(groupCourtsByVenue(courtsData));\r\n        setLoading(false);\r\n      } catch (err) {\r\n        setError(err.message || 'Failed to load courts');\r\n        setLoading(false);\r\n      }\r\n    };\r\n    \r\n    fetchCourts();\r\n  }, []);\r\n\r\n  // Group courts by venue\r\n  const groupCourtsByVenue = (courts) => {\r\n    const venueMap = new Map();\r\n\r\n    courts.forEach(court => {\r\n      const venue = court.venue;\r\n      if (!venue) return;\r\n\r\n      if (!venueMap.has(venue.id)) {\r\n        venueMap.set(venue.id, {\r\n          venueId: venue.id,\r\n          name: venue.name,\r\n          location: venue.location,\r\n          description: venue.description,\r\n          courts: []\r\n        });\r\n      }\r\n      venueMap.get(venue.id).courts.push(court);\r\n    });\r\n\r\n    return Array.from(venueMap.values());\r\n  };\r\n\r\n  // Apply filters\r\n  useEffect(() => {\r\n    let result = courts;\r\n    \r\n    if (searchTerm) {\r\n      result = result.filter(court => \r\n        court.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n        court.location.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n        (court.venue?.name?.toLowerCase().includes(searchTerm.toLowerCase()) ?? false)\r\n      );\r\n    }\r\n    \r\n    if (statusFilter !== 'all') {\r\n      result = result.filter(court => court.status === statusFilter.toUpperCase());\r\n    }\r\n    \r\n    if (locationFilter !== 'all') {\r\n      result = result.filter(court => court.location === locationFilter);\r\n    }\r\n\r\n    setFilteredCourts(result);\r\n    setGroupedVenues(groupCourtsByVenue(result));\r\n  }, [courts, searchTerm, statusFilter, locationFilter]);\r\n\r\n  const handleRetry = () => window.location.reload();\r\n\r\n  const uniqueLocations = [...new Set(courts.map(court => court.location))];\r\n\r\n  const handleBookNow = (courtId) => {\r\n    if (!authToken) {\r\n      // 未登录用户重定向到登录页面\r\n      navigate('/login');\r\n    } else {\r\n      // 已登录用户直接跳转到预订页面\r\n      navigate(`/booking/${courtId}`);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"xl\" sx={{ py: 4 }}>\r\n      {/* Header Section */}\r\n      <Box sx={{ textAlign: 'center', mb: 6 }}>\r\n        <Typography variant=\"h3\" sx={{ \r\n          fontWeight: 800, \r\n          mb: 2,\r\n          background: 'linear-gradient(45deg, #1976d2 30%, #4caf50 90%)',\r\n          WebkitBackgroundClip: 'text',\r\n          WebkitTextFillColor: 'transparent'\r\n        }}>\r\n          Find Your Perfect Court\r\n        </Typography>\r\n        <Typography variant=\"h6\" color=\"text.secondary\" sx={{ maxWidth: 700, mx: 'auto' }}>\r\n          Discover premium pickleball courts with state-of-the-art facilities and competitive pricing\r\n        </Typography>\r\n      </Box>\r\n\r\n      {/* Search & Filters Section */}\r\n      <Paper sx={{ p: 3, mb: 4, borderRadius: 3, boxShadow: 2 }}>\r\n        <Grid container spacing={2} alignItems=\"center\">\r\n          <Grid item xs={12} md={6}>\r\n            <TextField\r\n              fullWidth\r\n              variant=\"outlined\"\r\n              placeholder=\"Search courts or venues...\"\r\n              value={searchTerm}\r\n              onChange={(e) => setSearchTerm(e.target.value)}\r\n              InputProps={{\r\n                startAdornment: <SearchIcon sx={{ mr: 1, color: 'action.active' }} />\r\n              }}\r\n            />\r\n          </Grid>\r\n          \r\n          <Grid item xs={6} md={3}>\r\n            <Button \r\n              fullWidth \r\n              variant=\"outlined\" \r\n              startIcon={<FilterIcon />}\r\n              onClick={() => setShowFilters(!showFilters)}\r\n              sx={{ height: 56 }}\r\n            >\r\n              {showFilters ? 'Hide Filters' : 'Show Filters'}\r\n            </Button>\r\n          </Grid>\r\n          \r\n          <Grid item xs={6} md={3}>\r\n            <Chip \r\n              label={`${filteredCourts.length} courts found`}\r\n              color=\"primary\"\r\n              sx={{ height: 56, borderRadius: 2, fontSize: '1rem', fontWeight: 700 }}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n\r\n        {showFilters && (\r\n          <Box sx={{ mt: 3, pt: 2, borderTop: '1px solid #eee' }}>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={12} md={6}>\r\n                <FormControl fullWidth>\r\n                  <InputLabel>Status</InputLabel>\r\n                  <Select\r\n                    value={statusFilter}\r\n                    onChange={(e) => setStatusFilter(e.target.value)}\r\n                    label=\"Status\"\r\n                  >\r\n                    <MenuItem value=\"all\">All Statuses</MenuItem>\r\n                    <MenuItem value=\"ACTIVE\">Active</MenuItem>\r\n                    <MenuItem value=\"MAINTENANCE\">Maintenance</MenuItem>\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n              \r\n              <Grid item xs={12} md={6}>\r\n                <FormControl fullWidth>\r\n                  <InputLabel>Location</InputLabel>\r\n                  <Select\r\n                    value={locationFilter}\r\n                    onChange={(e) => setLocationFilter(e.target.value)}\r\n                    label=\"Location\"\r\n                  >\r\n                    <MenuItem value=\"all\">All Locations</MenuItem>\r\n                    {uniqueLocations.map(location => (\r\n                      <MenuItem key={location} value={location}>\r\n                        {location}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n            </Grid>\r\n          </Box>\r\n        )}\r\n      </Paper>\r\n\r\n      {/* Content Section */}\r\n      {error ? (\r\n        <Box sx={{ textAlign: 'center', p: 4 }}>\r\n          <Typography variant=\"h6\" color=\"error\" sx={{ mb: 2 }}>\r\n            {error}\r\n          </Typography>\r\n          <Button variant=\"contained\" onClick={handleRetry}>\r\n            Retry\r\n          </Button>\r\n        </Box>\r\n      ) : (\r\n        <>\r\n          {groupedVenues.length > 0 ? (\r\n            <>\r\n              {groupedVenues.map(venue => (\r\n                <Box key={venue.venueId} sx={{ mb: 6 }}>\r\n                  <Paper elevation={2} sx={{ p: 3, borderRadius: 3, mb: 2 }}>\r\n                    <Typography variant=\"h4\" sx={{ fontWeight: 700, mb: 1 }}>\r\n                      {venue.name}\r\n                    </Typography>\r\n                    <Typography variant=\"subtitle1\" color=\"text.secondary\" sx={{ mb: 1 }}>\r\n                      {venue.location}\r\n                    </Typography>\r\n                    {venue.description && (\r\n                      <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\r\n                        {venue.description}\r\n                      </Typography>\r\n                    )}\r\n                    <Chip \r\n                      label={`${venue.courts.length} courts available`}\r\n                      color=\"primary\"\r\n                      sx={{ height: 32, borderRadius: 2, fontWeight: 700 }}\r\n                    />\r\n                  </Paper>\r\n                  \r\n                  <Grid container spacing={4}>\r\n                    {venue.courts.map(court => (\r\n                      <Grid item key={court.id} xs={12} sm={6} md={4} lg={3}>\r\n                        <CourtCard court={court} loading={loading} onBookNow={handleBookNow} />\r\n                      </Grid>\r\n                    ))}\r\n                  </Grid>\r\n                </Box>\r\n              ))}\r\n            </>\r\n          ) : (\r\n            <Box sx={{ textAlign: 'center', p: 8 }}>\r\n              <Box sx={{ \r\n                width: 120, \r\n                height: 120, \r\n                bgcolor: '#e3f2fd', \r\n                borderRadius: '50%', \r\n                display: 'inline-flex',\r\n                alignItems: 'center',\r\n                justifyContent: 'center',\r\n                mb: 3\r\n              }}>\r\n                <CourtIcon sx={{ fontSize: 60, color: '#1976d2' }} />\r\n              </Box>\r\n              <Typography variant=\"h5\" sx={{ fontWeight: 700, mb: 1 }}>\r\n                No Courts Match Your Search\r\n              </Typography>\r\n              <Typography color=\"text.secondary\" sx={{ maxWidth: 500, mx: 'auto', mb: 3 }}>\r\n                Try adjusting your filters or search terms\r\n              </Typography>\r\n              <Button \r\n                variant=\"outlined\" \r\n                onClick={() => {\r\n                  setSearchTerm('');\r\n                  setStatusFilter('all');\r\n                  setLocationFilter('all');\r\n                }}\r\n              >\r\n                Reset Filters\r\n              </Button>\r\n            </Box>\r\n          )}\r\n        </>\r\n      )}\r\n\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default CourtListPage;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball-frontend/src/components/court/CourtListPage.jsx b/pickleball-frontend/src/components/court/CourtListPage.jsx
--- a/pickleball-frontend/src/components/court/CourtListPage.jsx	(revision c178c1d9e80f6815b91226b2d10f391611dcb6b4)
+++ b/pickleball-frontend/src/components/court/CourtListPage.jsx	(date 1754914799425)
@@ -88,7 +88,20 @@
     setGroupedVenues(groupCourtsByVenue(result));
   }, [courts, searchTerm, statusFilter, locationFilter]);
 
-  const handleRetry = () => window.location.reload();
+  const handleRetry = async () => {
+    setLoading(true);
+    setError(null);
+    try {
+      const courtsData = await CourtService.getAllCourts();
+      setCourts(courtsData);
+      setFilteredCourts(courtsData);
+      setGroupedVenues(groupCourtsByVenue(courtsData));
+    } catch (err) {
+      setError(err.message || 'Failed to load courts');
+    } finally {
+      setLoading(false);
+    }
+  };
 
   const uniqueLocations = [...new Set(courts.map(court => court.location))];
 
Index: pickleball-frontend/src/components/court/BookingHistory.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Container,\r\n  Box,\r\n  Typography,\r\n  Tabs,\r\n  Tab,\r\n  Card,\r\n  CardContent,\r\n  Grid,\r\n  Chip,\r\n  Button,\r\n  Divider,\r\n  Avatar,\r\n  Paper,\r\n  Stack,\r\n  IconButton,\r\n  CircularProgress,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  TextField\r\n} from '@mui/material';\r\nimport {\r\n  SportsTennis as CourtIcon,\r\n  CalendarToday as DateIcon,\r\n  AccessTime as TimeIcon,\r\n  People as PlayersIcon,\r\n  MonetizationOn as AmountIcon,\r\n  Cancel as CancelIcon,\r\n  RateReview as ReviewIcon,\r\n  ArrowBack as BackIcon,\r\n  FilterList as FilterIcon,\r\n  Visibility as ViewIcon\r\n} from '@mui/icons-material';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { styled } from '@mui/material/styles';\r\nimport api from '../../api/axiosConfig';\r\nimport ModernBookingDetailsDialog from '../admin/ModernBookingDetailsDialog';\r\n\r\n// Modern color palette\r\nconst COLORS = {\r\n  primary: '#6366f1',        // Modern indigo\r\n  primaryHover: '#4f46e5',   // Darker indigo\r\n  primaryLight: '#f0f0ff',   // Light indigo background\r\n  success: '#10b981',        // Modern green\r\n  successHover: '#059669',   // Darker green\r\n  successLight: '#ecfdf5',   // Light green background\r\n  warning: '#f59e0b',        // Modern amber\r\n  warningHover: '#d97706',   // Darker amber\r\n  warningLight: '#fffbeb',   // Light amber background\r\n  error: '#ef4444',          // Modern red\r\n  errorHover: '#dc2626',     // Darker red\r\n  errorLight: '#fef2f2',     // Light red background\r\n  neutral: '#6b7280',        // Modern gray\r\n  neutralHover: '#4b5563',   // Darker gray\r\n  neutralLight: '#f9fafb',   // Light gray background\r\n  background: '#ffffff',     // Clean white\r\n  surface: '#f8fafc',        // Subtle surface color\r\n};\r\n\r\n// Styled components\r\nconst GradientCard = styled(Card)(({ theme }) => ({\r\n  background: `linear-gradient(145deg, ${COLORS.surface}, ${COLORS.background})`,\r\n  borderRadius: '20px',\r\n  boxShadow: '0 4px 20px rgba(0, 0, 0, 0.08)',\r\n  border: '1px solid rgba(99, 102, 241, 0.1)',\r\n  transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)',\r\n  '&:hover': {\r\n    transform: 'translateY(-8px)',\r\n    boxShadow: '0 12px 40px rgba(0, 0, 0, 0.12)',\r\n    borderColor: 'rgba(99, 102, 241, 0.2)'\r\n  },\r\n}));\r\n\r\nconst StatusChip = styled(Chip)(({ status, theme }) => {\r\n  const statusStyles = {\r\n    upcoming: {\r\n      backgroundColor: COLORS.warningLight,\r\n      color: COLORS.warning,\r\n      border: `1px solid ${COLORS.warning}20`\r\n    },\r\n    completed: {\r\n      backgroundColor: COLORS.successLight,\r\n      color: COLORS.success,\r\n      border: `1px solid ${COLORS.success}20`\r\n    },\r\n    cancelled: {\r\n      backgroundColor: COLORS.errorLight,\r\n      color: COLORS.error,\r\n      border: `1px solid ${COLORS.error}20`\r\n    },\r\n    CONFIRMED: {\r\n      backgroundColor: COLORS.warningLight,\r\n      color: COLORS.warning,\r\n      border: `1px solid ${COLORS.warning}20`\r\n    },\r\n    COMPLETED: {\r\n      backgroundColor: COLORS.successLight,\r\n      color: COLORS.success,\r\n      border: `1px solid ${COLORS.success}20`\r\n    },\r\n    CANCELLED: {\r\n      backgroundColor: COLORS.errorLight,\r\n      color: COLORS.error,\r\n      border: `1px solid ${COLORS.error}20`\r\n    },\r\n    CANCELLATION_REQUESTED: {\r\n      backgroundColor: COLORS.errorLight,\r\n      color: COLORS.error,\r\n      border: `1px solid ${COLORS.error}20`\r\n    }\r\n  };\r\n\r\n  const style = statusStyles[status] || {\r\n    backgroundColor: COLORS.neutralLight,\r\n    color: COLORS.neutral,\r\n    border: `1px solid ${COLORS.neutral}20`\r\n  };\r\n\r\n  return {\r\n    ...style,\r\n    fontWeight: 600,\r\n    borderRadius: '12px',\r\n    padding: '6px 12px',\r\n    fontSize: '0.75rem',\r\n    textTransform: 'uppercase',\r\n    letterSpacing: '0.5px'\r\n  };\r\n});\r\n\r\nconst ModernButton = styled(Button)(({ variant, color }) => {\r\n  const baseStyles = {\r\n    borderRadius: '12px',\r\n    fontWeight: 600,\r\n    textTransform: 'none',\r\n    fontSize: '0.875rem',\r\n    padding: '8px 16px',\r\n    transition: 'all 0.2s cubic-bezier(0.4, 0, 0.2, 1)',\r\n    border: 'none',\r\n    boxShadow: 'none',\r\n    '&:hover': {\r\n      transform: 'translateY(-1px)',\r\n      boxShadow: '0 4px 12px rgba(0, 0, 0, 0.15)',\r\n    }\r\n  };\r\n\r\n  if (variant === 'contained') {\r\n    if (color === 'primary') {\r\n      return {\r\n        ...baseStyles,\r\n        backgroundColor: COLORS.primary,\r\n        color: '#ffffff',\r\n        '&:hover': {\r\n          ...baseStyles['&:hover'],\r\n          backgroundColor: COLORS.primaryHover,\r\n        }\r\n      };\r\n    }\r\n    if (color === 'error') {\r\n      return {\r\n        ...baseStyles,\r\n        backgroundColor: COLORS.error,\r\n        color: '#ffffff',\r\n        '&:hover': {\r\n          ...baseStyles['&:hover'],\r\n          backgroundColor: COLORS.errorHover,\r\n        }\r\n      };\r\n    }\r\n    if (color === 'success') {\r\n      return {\r\n        ...baseStyles,\r\n        backgroundColor: COLORS.success,\r\n        color: '#ffffff',\r\n        '&:hover': {\r\n          ...baseStyles['&:hover'],\r\n          backgroundColor: COLORS.successHover,\r\n        }\r\n      };\r\n    }\r\n  }\r\n\r\n  if (variant === 'outlined') {\r\n    if (color === 'error') {\r\n      return {\r\n        ...baseStyles,\r\n        backgroundColor: 'transparent',\r\n        color: COLORS.error,\r\n        border: `2px solid ${COLORS.error}`,\r\n        '&:hover': {\r\n          ...baseStyles['&:hover'],\r\n          backgroundColor: COLORS.errorLight,\r\n          borderColor: COLORS.errorHover,\r\n          color: COLORS.errorHover,\r\n        }\r\n      };\r\n    }\r\n    if (color === 'primary') {\r\n      return {\r\n        ...baseStyles,\r\n        backgroundColor: 'transparent',\r\n        color: COLORS.primary,\r\n        border: `2px solid ${COLORS.primary}`,\r\n        '&:hover': {\r\n          ...baseStyles['&:hover'],\r\n          backgroundColor: COLORS.primaryLight,\r\n          borderColor: COLORS.primaryHover,\r\n          color: COLORS.primaryHover,\r\n        }\r\n      };\r\n    }\r\n  }\r\n\r\n  return baseStyles;\r\n});\r\n\r\n\r\nconst BookingHistory = () => {\r\n  const navigate = useNavigate();\r\n  const [tabValue, setTabValue] = useState('all');\r\n  const [showFilters, setShowFilters] = useState(false);\r\n  const [bookings, setBookings] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [cancellingId, setCancellingId] = useState(null);\r\n  const [cancelStatus, setCancelStatus] = useState({});\r\n  const [cancelDialogOpen, setCancelDialogOpen] = useState(false);\r\n  const [cancelReason, setCancelReason] = useState('');\r\n  const [cancelBookingId, setCancelBookingId] = useState(null);\r\n  const [detailsDialogOpen, setDetailsDialogOpen] = useState(false);\r\n  const [selectedBooking, setSelectedBooking] = useState(null);\r\n\r\n  const fetchBookingHistory = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      const response = await api.get('/member/bookings');\r\n      console.log(\"API Response:\", response.data);\r\n\r\n      // 数据规范化处理 - 根据实际API响应调整字段映射\r\n      const normalizedBookings = response.data.map(booking => {\r\n        console.log('Processing booking:', booking);\r\n        console.log('Court ID from API:', booking.courtId);\r\n        \r\n        const normalizedBooking = {\r\n        id: booking.id || booking.bookingId, // 确保ID字段正确\r\n        bookingId: booking.id || booking.bookingId,\r\n          courtId: booking.courtId, // 直接从API获取\r\n          courtName: booking.courtName || \"AAA Pickleball Court\",\r\n          courtLocation: booking.location || \"123 Sports Complex, Kuala Lumpur\",\r\n          slotDate: booking.date, // 使用API中的date字段\r\n          startTime: booking.startTime, // 使用API中的startTime字段\r\n          endTime: booking.endTime, // 使用API中的endTime字段\r\n        numberOfPlayers: booking.playerCount || booking.numberOfPlayers || 4,\r\n        totalAmount: booking.amount ? Number(booking.amount) : booking.price || 50.00,\r\n        status: booking.bookingStatus || booking.status || \"CONFIRMED\",\r\n        purpose: booking.purpose || \"Recreational\",\r\n        numPaddles: booking.numPaddles || 0,\r\n        buyBallSet: booking.buyBallSet || false,\r\n        bookingDate: booking.bookingDate || booking.createdAt,\r\n        // 支付相关字段\r\n        paymentMethod: booking.payment?.paymentMethod || booking.paymentMethod || \"Wallet\",\r\n        paymentType: booking.payment?.paymentType || booking.paymentType,\r\n        paymentStatus: booking.payment?.status || booking.paymentStatus || \"COMPLETED\",\r\n        transactionId: booking.payment?.transactionId || booking.transactionId,\r\n        // 会员信息\r\n        memberId: booking.memberId || booking.member?.id,\r\n        // 多slot支持\r\n        bookingSlots: booking.bookingSlots || [],\r\n        durationHours: booking.durationHours || 1,\r\n          // 评价状态\r\n          hasReviewed: booking.hasReviewed || false,\r\n        };\r\n        \r\n        console.log('Normalized booking:', normalizedBooking);\r\n        console.log('Extracted courtId:', normalizedBooking.courtId);\r\n        console.log('Extracted slotDate:', normalizedBooking.slotDate);\r\n        console.log('Extracted startTime:', normalizedBooking.startTime);\r\n        console.log('Extracted endTime:', normalizedBooking.endTime);\r\n        \r\n        return normalizedBooking;\r\n      });\r\n\r\n      console.log(\"Normalized Bookings:\", normalizedBookings);\r\n      setBookings(normalizedBookings);\r\n    } catch (err) {\r\n      console.error('Failed to fetch booking history:', err);\r\n      setError(err.response?.data?.message || 'Failed to load bookings');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchBookingHistory();\r\n  }, []);\r\n\r\n  const handleTabChange = (event, newValue) => {\r\n    setTabValue(newValue);\r\n  };\r\n\r\n  const handleBookCourt = () => {\r\n    navigate('/courts');\r\n  };\r\n\r\n  const handleCancelBooking = (id) => {\r\n    setCancelBookingId(id);\r\n    setCancelReason('');\r\n    setCancelDialogOpen(true);\r\n  };\r\n\r\n  const handleConfirmCancel = () => {\r\n    if (!cancelReason.trim()) {\r\n      alert('Please provide a reason for cancellation.');\r\n      return;\r\n    }\r\n    setCancellingId(cancelBookingId);\r\n    setCancelStatus(prev => ({ ...prev, [cancelBookingId]: 'processing' }));\r\n    api.post(`/member/bookings/${cancelBookingId}/cancel`, { reason: cancelReason })\r\n      .then(response => {\r\n        setBookings(prev => prev.map(booking =>\r\n          booking.bookingId === cancelBookingId\r\n            ? { ...booking, status: 'CANCELLATION_REQUESTED' }\r\n            : booking\r\n        ));\r\n        setCancelStatus(prev => ({ ...prev, [cancelBookingId]: 'requested' }));\r\n        alert('Cancellation request submitted successfully!');\r\n      })\r\n      .catch(error => {\r\n        console.error('Cancellation failed:', error);\r\n        setCancelStatus(prev => ({ ...prev, [cancelBookingId]: 'error' }));\r\n        let errorMsg = 'Unknown error';\r\n        if (error.response) {\r\n          errorMsg = `Server error: ${error.response.status}`;\r\n          if (error.response.data?.message) {\r\n            errorMsg += ` - ${error.response.data.message}`;\r\n          }\r\n        } else if (error.request) {\r\n          errorMsg = 'No response from server';\r\n        } else {\r\n          errorMsg = error.message;\r\n        }\r\n        alert(`Cancellation failed: ${errorMsg}`);\r\n      })\r\n      .finally(() => {\r\n        setCancellingId(null);\r\n        setCancelDialogOpen(false);\r\n        setCancelBookingId(null);\r\n      });\r\n  };\r\n\r\n  const handleCancelDialogClose = () => {\r\n    setCancelDialogOpen(false);\r\n    setCancelBookingId(null);\r\n    setCancelReason('');\r\n  };\r\n\r\n  const handleLeaveReview = (booking) => {\r\n    console.log('=== Review Button Clicked ===');\r\n    console.log('Booking data:', booking);\r\n    console.log('Booking ID:', booking.bookingId);\r\n    console.log('Court Name:', booking.courtName);\r\n    console.log('Court Location:', booking.courtLocation);\r\n    console.log('Slot Date:', booking.slotDate);\r\n    console.log('Start Time:', booking.startTime);\r\n    console.log('End Time:', booking.endTime);\r\n    console.log('Duration Hours:', booking.durationHours);\r\n    console.log('Has Reviewed:', booking.hasReviewed);\r\n    \r\n    // 检查预订是否包含必要的信息\r\n    if (!booking.bookingId) {\r\n      console.error('Missing booking ID');\r\n      console.log('Falling back to select page');\r\n      // 如果信息不全，回退到选择页面\r\n      navigate('/profile/my-bookings');\r\n      return;\r\n    }\r\n\r\n    const navigationState = {\r\n      targetType: 'COURT',\r\n      courtName: booking.courtName,\r\n      courtLocation: booking.courtLocation,\r\n      slotDate: booking.slotDate,\r\n      startTime: booking.startTime,\r\n      endTime: booking.endTime,\r\n      durationHours: booking.durationHours,\r\n      bookingId: String(booking.bookingId), // 确保bookingId是字符串类型\r\n      isEditing: false, // 新建评价\r\n      isViewReview: booking.hasReviewed // 如果已经评价过，设置为View Review模式\r\n    };\r\n\r\n    console.log('Navigation state:', navigationState);\r\n    console.log('Navigating to /feedback...');\r\n\r\n    // 直接导航到反馈页面，并传递预订信息\r\n    navigate('/feedback', {\r\n      state: navigationState\r\n    });\r\n  };\r\n\r\n  const handleViewDetails = (booking) => {\r\n    setSelectedBooking(booking);\r\n    setDetailsDialogOpen(true);\r\n  };\r\n\r\n  const handleCloseDetails = () => {\r\n    setDetailsDialogOpen(false);\r\n    setSelectedBooking(null);\r\n  };\r\n\r\n  // 日期格式化函数\r\n  const formatDate = (dateString) => {\r\n    if (!dateString) return 'N/A';\r\n\r\n    // 尝试解析日期\r\n    const date = new Date(dateString);\r\n\r\n    if (isNaN(date.getTime())) {\r\n      // 处理可能的日期格式如 \"YYYY-MM-DD\"\r\n      if (/^\\d{4}-\\d{2}-\\d{2}$/.test(dateString)) {\r\n        const [year, month, day] = dateString.split('-');\r\n        return new Date(year, month - 1, day).toLocaleDateString('en-US', {\r\n          month: 'short',\r\n          day: 'numeric',\r\n          year: 'numeric'\r\n        });\r\n      }\r\n      return 'Invalid Date';\r\n    }\r\n\r\n    return date.toLocaleDateString('en-US', {\r\n      month: 'short',\r\n      day: 'numeric',\r\n      year: 'numeric'\r\n    });\r\n  };\r\n\r\n  // 时间格式化函数\r\n  const formatTime = (timeString) => {\r\n    if (!timeString) return '';\r\n\r\n    // 处理 HH:mm 格式\r\n    if (/^\\d{2}:\\d{2}$/.test(timeString)) {\r\n      const timeParts = timeString.split(':');\r\n      let hours = parseInt(timeParts[0]);\r\n      const minutes = timeParts[1];\r\n      const period = hours >= 12 ? 'PM' : 'AM';\r\n      hours = hours % 12 || 12;\r\n      return `${hours}:${minutes} ${period}`;\r\n    }\r\n\r\n    return timeString; // 返回原始值\r\n  };\r\n\r\n  // 过滤预订\r\n  const filteredBookings = tabValue === 'all'\r\n    ? bookings\r\n    : bookings.filter(booking => {\r\n      if (tabValue === 'upcoming') return booking.status === 'CONFIRMED';\r\n      if (tabValue === 'completed') return booking.status === 'COMPLETED';\r\n      if (tabValue === 'cancelled') return booking.status === 'CANCELLED' || booking.status === 'CANCELLATION_REQUESTED';\r\n      return true;\r\n    });\r\n\r\n  if (loading) {\r\n    return (\r\n      <Container style={{\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        height: '80vh',\r\n        flexDirection: 'column'\r\n      }}>\r\n        <CircularProgress size={60} sx={{ color: COLORS.primary }} />\r\n        <Typography variant=\"h6\" sx={{ ml: 2, mt: 2, color: COLORS.neutral }}>\r\n          Loading booking history...\r\n        </Typography>\r\n      </Container>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <Container sx={{ py: 4, textAlign: 'center' }}>\r\n        <Typography variant=\"h5\" sx={{ color: COLORS.error, mb: 2 }}>\r\n          {error}\r\n        </Typography>\r\n        <ModernButton\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          onClick={fetchBookingHistory}\r\n          sx={{ mt: 2 }}\r\n        >\r\n          Retry\r\n        </ModernButton>\r\n      </Container>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\" sx={{ py: 4 }}>\r\n      <Box sx={{ display: 'flex', alignItems: 'center', mb: 4 }}>\r\n        <IconButton\r\n          onClick={() => navigate('/profile')}\r\n          sx={{\r\n            mr: 2,\r\n            backgroundColor: COLORS.neutralLight,\r\n            color: COLORS.neutral,\r\n            '&:hover': {\r\n              backgroundColor: COLORS.primary,\r\n              color: '#ffffff'\r\n            }\r\n          }}\r\n        >\r\n          <BackIcon />\r\n        </IconButton>\r\n        <Typography variant=\"h4\" component=\"h1\" sx={{\r\n          fontWeight: 700,\r\n          flexGrow: 1,\r\n          background: `linear-gradient(135deg, ${COLORS.primary}, ${COLORS.primaryHover})`,\r\n          WebkitBackgroundClip: 'text',\r\n          WebkitTextFillColor: 'transparent'\r\n        }}>\r\n          My Bookings\r\n        </Typography>\r\n        <IconButton\r\n          onClick={() => setShowFilters(!showFilters)}\r\n          sx={{\r\n            backgroundColor: showFilters ? COLORS.primaryLight : COLORS.neutralLight,\r\n            color: showFilters ? COLORS.primary : COLORS.neutral,\r\n            '&:hover': {\r\n              backgroundColor: COLORS.primary,\r\n              color: '#ffffff'\r\n            }\r\n          }}\r\n        >\r\n          <FilterIcon />\r\n        </IconButton>\r\n      </Box>\r\n\r\n      {/* Filter Tabs */}\r\n      <Paper sx={{\r\n        mb: 3,\r\n        borderRadius: 4,\r\n        boxShadow: '0 2px 10px rgba(0, 0, 0, 0.06)',\r\n        border: '1px solid rgba(99, 102, 241, 0.1)',\r\n        overflow: 'hidden'\r\n      }}>\r\n        <Tabs\r\n          value={tabValue}\r\n          onChange={handleTabChange}\r\n          variant=\"scrollable\"\r\n          scrollButtons=\"auto\"\r\n          sx={{\r\n            '& .MuiTabs-indicator': {\r\n              height: 3,\r\n              borderRadius: '3px 3px 0 0',\r\n              backgroundColor: COLORS.primary,\r\n            },\r\n            '& .MuiTab-root': {\r\n              fontWeight: 600,\r\n              color: COLORS.neutral,\r\n              '&.Mui-selected': {\r\n                color: COLORS.primary,\r\n              }\r\n            }\r\n          }}\r\n        >\r\n          <Tab label=\"All\" value=\"all\" />\r\n          <Tab label=\"Upcoming\" value=\"upcoming\" />\r\n          <Tab label=\"Completed\" value=\"completed\" />\r\n          <Tab label=\"Cancelled\" value=\"cancelled\" />\r\n        </Tabs>\r\n      </Paper>\r\n\r\n      {/* Additional Filters */}\r\n      {showFilters && (\r\n        <Paper sx={{\r\n          p: 3,\r\n          mb: 3,\r\n          borderRadius: 4,\r\n          boxShadow: '0 2px 10px rgba(0, 0, 0, 0.06)',\r\n          border: '1px solid rgba(99, 102, 241, 0.1)',\r\n          backgroundColor: COLORS.surface\r\n        }}>\r\n          <Typography variant=\"subtitle1\" sx={{ mb: 2, fontWeight: 600, color: COLORS.neutral }}>\r\n            Additional Filters\r\n          </Typography>\r\n          <Stack direction=\"row\" spacing={1} sx={{ flexWrap: 'wrap', gap: 1 }}>\r\n            <Chip\r\n              label=\"This Week\"\r\n              variant=\"outlined\"\r\n              sx={{\r\n                borderColor: COLORS.primary,\r\n                color: COLORS.primary,\r\n                '&:hover': {\r\n                  backgroundColor: COLORS.primaryLight,\r\n                }\r\n              }}\r\n            />\r\n            <Chip\r\n              label=\"This Month\"\r\n              variant=\"outlined\"\r\n              sx={{\r\n                borderColor: COLORS.primary,\r\n                color: COLORS.primary,\r\n                '&:hover': {\r\n                  backgroundColor: COLORS.primaryLight,\r\n                }\r\n              }}\r\n            />\r\n            <Chip\r\n              label=\"Past Bookings\"\r\n              variant=\"outlined\"\r\n              sx={{\r\n                borderColor: COLORS.primary,\r\n                color: COLORS.primary,\r\n                '&:hover': {\r\n                  backgroundColor: COLORS.primaryLight,\r\n                }\r\n              }}\r\n            />\r\n            <Chip\r\n              label=\"Group Bookings\"\r\n              variant=\"outlined\"\r\n              sx={{\r\n                borderColor: COLORS.primary,\r\n                color: COLORS.primary,\r\n                '&:hover': {\r\n                  backgroundColor: COLORS.primaryLight,\r\n                }\r\n              }}\r\n            />\r\n            <Chip\r\n              label=\"Solo Bookings\"\r\n              variant=\"outlined\"\r\n              sx={{\r\n                borderColor: COLORS.primary,\r\n                color: COLORS.primary,\r\n                '&:hover': {\r\n                  backgroundColor: COLORS.primaryLight,\r\n                }\r\n              }}\r\n            />\r\n          </Stack>\r\n        </Paper>\r\n      )}\r\n\r\n      {/* Bookings List */}\r\n      {filteredBookings.length > 0 ? (\r\n        <Grid container spacing={3}>\r\n          {filteredBookings.map((booking) => (\r\n            <Grid item xs={12} sm={6} md={4} key={booking.bookingId}>\r\n              <GradientCard>\r\n                <CardContent sx={{ p: 3 }}>\r\n                  <Box sx={{ display: 'flex', alignItems: 'center', mb: 3 }}>\r\n                    <Avatar sx={{\r\n                      bgcolor: COLORS.primary,\r\n                      mr: 2,\r\n                      width: 56,\r\n                      height: 56,\r\n                      boxShadow: `0 4px 12px ${COLORS.primary}30`\r\n                    }}>\r\n                      <CourtIcon sx={{ fontSize: 28 }} />\r\n                    </Avatar>\r\n                    <Box>\r\n                      <Typography variant=\"h6\" sx={{ fontWeight: 700, color: COLORS.neutral }}>\r\n                        {booking.courtName}\r\n                      </Typography>\r\n                      <Typography variant=\"body2\" sx={{ color: COLORS.neutral, opacity: 0.7 }}>\r\n                        {booking.courtLocation}\r\n                      </Typography>\r\n                    </Box>\r\n                  </Box>\r\n\r\n                  <Divider sx={{ my: 3, borderColor: `${COLORS.primary}20` }} />\r\n\r\n                  <Grid container spacing={2} sx={{ mb: 3 }}>\r\n                    <Grid item xs={6}>\r\n                      <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                        <DateIcon fontSize=\"small\" sx={{ mr: 1, color: COLORS.primary }} />\r\n                        <Typography variant=\"body2\" sx={{ color: COLORS.neutral, fontWeight: 500 }}>\r\n                          {formatDate(booking.slotDate)}\r\n                        </Typography>\r\n                      </Box>\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                      <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                        <TimeIcon fontSize=\"small\" sx={{ mr: 1, color: COLORS.primary }} />\r\n                        <Typography variant=\"body2\" sx={{ color: COLORS.neutral, fontWeight: 500 }}>\r\n                          {formatTime(booking.startTime)} - {formatTime(booking.endTime)}\r\n                        </Typography>\r\n                      </Box>\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                      <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                        <PlayersIcon fontSize=\"small\" sx={{ mr: 1, color: COLORS.primary }} />\r\n                        <Typography variant=\"body2\" sx={{ color: COLORS.neutral, fontWeight: 500 }}>\r\n                          {booking.numberOfPlayers} players\r\n                        </Typography>\r\n                      </Box>\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                      <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                        <AmountIcon fontSize=\"small\" sx={{ mr: 1, color: COLORS.primary }} />\r\n                        <Typography variant=\"body2\" sx={{ color: COLORS.neutral, fontWeight: 500 }}>\r\n                          MYR {booking.totalAmount.toFixed(2)}\r\n                        </Typography>\r\n                      </Box>\r\n                    </Grid>\r\n                  </Grid>\r\n\r\n                  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mt: 3 }}>\r\n                    <StatusChip\r\n                      label={\r\n                        booking.status === 'CONFIRMED' ? 'Upcoming' :\r\n                        booking.status === 'COMPLETED' ? 'Completed' :\r\n                        booking.status === 'CANCELLED' ? 'Cancelled' :\r\n                        booking.status === 'CANCELLATION_REQUESTED' ? 'Cancellation Requested' :\r\n                        booking.status\r\n                      }\r\n                      status={booking.status}\r\n                    />\r\n\r\n                    <Box sx={{ display: 'flex', gap: 1 }}>\r\n                      <ModernButton\r\n                        variant=\"outlined\"\r\n                        color=\"primary\"\r\n                        size=\"small\"\r\n                        startIcon={<ViewIcon />}\r\n                        onClick={() => handleViewDetails(booking)}\r\n                      >\r\n                        Details\r\n                      </ModernButton>\r\n\r\n                    {booking.status === 'CONFIRMED' && (\r\n                      cancelStatus[booking.bookingId] === 'processing' ? (\r\n                        <CircularProgress size={24} />\r\n                      ) : (\r\n                        <ModernButton\r\n                          variant=\"outlined\"\r\n                          color=\"error\"\r\n                          size=\"small\"\r\n                          startIcon={<CancelIcon />}\r\n                          onClick={() => handleCancelBooking(booking.bookingId)}\r\n                          disabled={cancelStatus[booking.bookingId] === 'requested'}\r\n                        >\r\n                          {cancelStatus[booking.bookingId] === 'requested'\r\n                            ? \"Requested\"\r\n                            : \"Cancel\"}\r\n                        </ModernButton>\r\n                      )\r\n                    )}\r\n\r\n                    {booking.status === 'COMPLETED' && (\r\n                      booking.hasReviewed ? (\r\n                        <ModernButton\r\n                          variant=\"outlined\"\r\n                          color=\"success\"\r\n                          size=\"small\"\r\n                          startIcon={<ViewIcon />}\r\n                          onClick={() => handleLeaveReview(booking)}\r\n                        >\r\n                          View Review\r\n                        </ModernButton>\r\n                      ) : (\r\n                      <ModernButton\r\n                        variant=\"outlined\"\r\n                        color=\"primary\"\r\n                        size=\"small\"\r\n                        startIcon={<ReviewIcon />}\r\n                          onClick={() => handleLeaveReview(booking)}\r\n                      >\r\n                        Review\r\n                      </ModernButton>\r\n                      )\r\n                    )}\r\n                    </Box>\r\n                  </Box>\r\n                </CardContent>\r\n              </GradientCard>\r\n            </Grid>\r\n          ))}\r\n        </Grid>\r\n      ) : (\r\n        <Box sx={{\r\n          textAlign: 'center',\r\n          py: 8,\r\n          bgcolor: COLORS.surface,\r\n          borderRadius: 6,\r\n          boxShadow: '0 4px 20px rgba(0, 0, 0, 0.08)',\r\n          border: '1px solid rgba(99, 102, 241, 0.1)'\r\n        }}>\r\n          <Box sx={{\r\n            width: 140,\r\n            height: 140,\r\n            background: `linear-gradient(135deg, ${COLORS.primaryLight}, ${COLORS.primary}20)`,\r\n            borderRadius: '50%',\r\n            display: 'inline-flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            mb: 3,\r\n            border: `2px solid ${COLORS.primary}30`\r\n          }}>\r\n            <CourtIcon sx={{ fontSize: 70, color: COLORS.primary }} />\r\n          </Box>\r\n          <Typography variant=\"h5\" sx={{ mb: 2, fontWeight: 700, color: COLORS.neutral }}>\r\n            No Bookings Found\r\n          </Typography>\r\n          <Typography variant=\"body1\" sx={{\r\n            color: COLORS.neutral,\r\n            opacity: 0.7,\r\n            maxWidth: 500,\r\n            mx: 'auto',\r\n            mb: 4,\r\n            lineHeight: 1.6\r\n          }}>\r\n            Dive into the world of sports and start booking your favorite venues.\r\n          </Typography>\r\n          <ModernButton\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            size=\"large\"\r\n            onClick={handleBookCourt}\r\n            sx={{\r\n              px: 6,\r\n              py: 1.5,\r\n              fontSize: '1.1rem',\r\n              fontWeight: 700,\r\n            }}\r\n          >\r\n            Book a Court Now\r\n          </ModernButton>\r\n        </Box>\r\n      )}\r\n\r\n      {/* Cancel Reason Dialog */}\r\n      <Dialog open={cancelDialogOpen} onClose={handleCancelDialogClose} maxWidth=\"xs\" fullWidth>\r\n        <DialogTitle>Cancel Booking</DialogTitle>\r\n        <DialogContent>\r\n          <Typography variant=\"body1\" sx={{ mb: 2 }}>\r\n            Please provide a reason for cancelling this booking:\r\n          </Typography>\r\n          <TextField\r\n            label=\"Cancellation Reason\"\r\n            value={cancelReason}\r\n            onChange={e => setCancelReason(e.target.value)}\r\n            fullWidth\r\n            required\r\n            multiline\r\n            minRows={3}\r\n            autoFocus\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleCancelDialogClose} color=\"primary\">\r\n            Back\r\n          </Button>\r\n          <Button onClick={handleConfirmCancel} color=\"error\" variant=\"contained\">\r\n            Confirm Cancel\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Booking Details Dialog */}\r\n      <ModernBookingDetailsDialog\r\n        open={detailsDialogOpen}\r\n        onClose={handleCloseDetails}\r\n        booking={selectedBooking}\r\n        loading={false}\r\n        editableRemark={false}\r\n        isAdmin={false}\r\n      />\r\n\r\n      {/* Footer */}\r\n      <Box sx={{ mt: 8, textAlign: 'center', color: COLORS.neutral, opacity: 0.6 }}>\r\n        <Typography variant=\"body2\">\r\n          © 2025 Pickleball App. All rights reserved.\r\n        </Typography>\r\n      </Box>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default BookingHistory;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball-frontend/src/components/court/BookingHistory.jsx b/pickleball-frontend/src/components/court/BookingHistory.jsx
--- a/pickleball-frontend/src/components/court/BookingHistory.jsx	(revision c178c1d9e80f6815b91226b2d10f391611dcb6b4)
+++ b/pickleball-frontend/src/components/court/BookingHistory.jsx	(date 1754942124309)
@@ -32,7 +32,8 @@
   RateReview as ReviewIcon,
   ArrowBack as BackIcon,
   FilterList as FilterIcon,
-  Visibility as ViewIcon
+  Visibility as ViewIcon,
+  Event as EventIcon
 } from '@mui/icons-material';
 import { useNavigate } from 'react-router-dom';
 import { styled } from '@mui/material/styles';
@@ -110,6 +111,21 @@
       backgroundColor: COLORS.errorLight,
       color: COLORS.error,
       border: `1px solid ${COLORS.error}20`
+    },
+    UPCOMING: {
+      backgroundColor: COLORS.warningLight,
+      color: COLORS.warning,
+      border: `1px solid ${COLORS.warning}20`
+    },
+    ONGOING: {
+      backgroundColor: COLORS.primaryLight,
+      color: COLORS.primary,
+      border: `1px solid ${COLORS.primary}20`
+    },
+    REGISTERED: {
+      backgroundColor: COLORS.successLight,
+      color: COLORS.success,
+      border: `1px solid ${COLORS.success}20`
     }
   };
 
@@ -273,6 +289,8 @@
         durationHours: booking.durationHours || 1,
           // 评价状态
           hasReviewed: booking.hasReviewed || false,
+          // 新增：預訂類型
+          bookingType: booking.bookingType || "COURT_BOOKING",
         };
         
         console.log('Normalized booking:', normalizedBooking);
@@ -459,7 +477,15 @@
   const filteredBookings = tabValue === 'all'
     ? bookings
     : bookings.filter(booking => {
-      if (tabValue === 'upcoming') return booking.status === 'CONFIRMED';
+      if (tabValue === 'events') return booking.bookingType === 'EVENT';
+      if (tabValue === 'upcoming') {
+        // 對於 upcoming，只顯示狀態為 CONFIRMED 或 UPCOMING 的預訂
+        // 明確排除 COMPLETED、CANCELLED 等狀態
+        return (booking.status === 'CONFIRMED' || booking.status === 'UPCOMING') && 
+               booking.status !== 'COMPLETED' && 
+               booking.status !== 'CANCELLED' && 
+               booking.status !== 'CANCELLATION_REQUESTED';
+      }
       if (tabValue === 'completed') return booking.status === 'COMPLETED';
       if (tabValue === 'cancelled') return booking.status === 'CANCELLED' || booking.status === 'CANCELLATION_REQUESTED';
       return true;
@@ -570,6 +596,7 @@
           }}
         >
           <Tab label="All" value="all" />
+          <Tab label="Events" value="events" />
           <Tab label="Upcoming" value="upcoming" />
           <Tab label="Completed" value="completed" />
           <Tab label="Cancelled" value="cancelled" />
@@ -658,20 +685,39 @@
                 <CardContent sx={{ p: 3 }}>
                   <Box sx={{ display: 'flex', alignItems: 'center', mb: 3 }}>
                     <Avatar sx={{
-                      bgcolor: COLORS.primary,
+                      bgcolor: booking.bookingType === 'EVENT' ? COLORS.warning : COLORS.primary,
                       mr: 2,
                       width: 56,
                       height: 56,
-                      boxShadow: `0 4px 12px ${COLORS.primary}30`
+                      boxShadow: `0 4px 12px ${booking.bookingType === 'EVENT' ? COLORS.warning : COLORS.primary}30`
                     }}>
-                      <CourtIcon sx={{ fontSize: 28 }} />
+                      {booking.bookingType === 'EVENT' ? (
+                        <EventIcon sx={{ fontSize: 28 }} />
+                      ) : (
+                        <CourtIcon sx={{ fontSize: 28 }} />
+                      )}
                     </Avatar>
-                    <Box>
-                      <Typography variant="h6" sx={{ fontWeight: 700, color: COLORS.neutral }}>
-                        {booking.courtName}
-                      </Typography>
+                    <Box sx={{ flexGrow: 1 }}>
+                      <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
+                        <Typography variant="h6" sx={{ fontWeight: 700, color: COLORS.neutral }}>
+                          {booking.courtName}
+                        </Typography>
+                        {booking.bookingType === 'EVENT' && (
+                          <Chip
+                            label="Event"
+                            size="small"
+                            sx={{
+                              backgroundColor: COLORS.warningLight,
+                              color: COLORS.warning,
+                              border: `1px solid ${COLORS.warning}20`,
+                              fontSize: '0.75rem',
+                              fontWeight: 600
+                            }}
+                          />
+                        )}
+                      </Box>
                       <Typography variant="body2" sx={{ color: COLORS.neutral, opacity: 0.7 }}>
-                        {booking.courtLocation}
+                        {booking.bookingType === 'EVENT' ? 'Event Registration' : booking.courtLocation}
                       </Typography>
                     </Box>
                   </Box>
@@ -699,7 +745,7 @@
                       <Box sx={{ display: 'flex', alignItems: 'center' }}>
                         <PlayersIcon fontSize="small" sx={{ mr: 1, color: COLORS.primary }} />
                         <Typography variant="body2" sx={{ color: COLORS.neutral, fontWeight: 500 }}>
-                          {booking.numberOfPlayers} players
+                          {booking.bookingType === 'EVENT' ? 'Individual' : `${booking.numberOfPlayers} players`}
                         </Typography>
                       </Box>
                     </Grid>
@@ -714,16 +760,33 @@
                   </Grid>
 
                   <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mt: 3 }}>
-                    <StatusChip
-                      label={
-                        booking.status === 'CONFIRMED' ? 'Upcoming' :
-                        booking.status === 'COMPLETED' ? 'Completed' :
-                        booking.status === 'CANCELLED' ? 'Cancelled' :
-                        booking.status === 'CANCELLATION_REQUESTED' ? 'Cancellation Requested' :
-                        booking.status
-                      }
-                      status={booking.status}
-                    />
+                    <Box sx={{ display: 'flex', gap: 1, alignItems: 'center' }}>
+                      <StatusChip
+                        label={
+                          booking.status === 'CONFIRMED' ? 'Upcoming' :
+                          booking.status === 'COMPLETED' ? 'Completed' :
+                          booking.status === 'CANCELLED' ? 'Cancelled' :
+                          booking.status === 'CANCELLATION_REQUESTED' ? 'Cancellation Requested' :
+                          booking.status === 'UPCOMING' ? 'Upcoming' :
+                          booking.status === 'ONGOING' ? 'Ongoing' :
+                          booking.status
+                        }
+                        status={booking.status}
+                      />
+                      {booking.bookingType === 'EVENT' && (
+                        <Chip
+                          label="REGISTERED"
+                          size="small"
+                          sx={{
+                            backgroundColor: COLORS.successLight,
+                            color: COLORS.success,
+                            border: `1px solid ${COLORS.success}20`,
+                            fontSize: '0.75rem',
+                            fontWeight: 500
+                          }}
+                        />
+                      )}
+                    </Box>
 
                     <Box sx={{ display: 'flex', gap: 1 }}>
                       <ModernButton
@@ -736,7 +799,7 @@
                         Details
                       </ModernButton>
 
-                    {booking.status === 'CONFIRMED' && (
+                    {booking.status === 'CONFIRMED' && booking.bookingType !== 'EVENT' && (
                       cancelStatus[booking.bookingId] === 'processing' ? (
                         <CircularProgress size={24} />
                       ) : (
@@ -755,7 +818,7 @@
                       )
                     )}
 
-                    {booking.status === 'COMPLETED' && (
+                    {booking.status === 'COMPLETED' && booking.bookingType !== 'EVENT' && (
                       booking.hasReviewed ? (
                         <ModernButton
                           variant="outlined"
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/ClassSessionServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.service;\r\n\r\nimport com.pickleball_backend.pickleball.dto.ClassSessionDto;\r\nimport com.pickleball_backend.pickleball.dto.RecurringSessionRequestDto;\r\nimport com.pickleball_backend.pickleball.entity.*;\r\nimport com.pickleball_backend.pickleball.exception.*;\r\nimport com.pickleball_backend.pickleball.repository.*;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.springframework.stereotype.Service;\r\nimport org.springframework.transaction.annotation.Transactional;\r\nimport org.springframework.scheduling.annotation.Scheduled;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\n\r\nimport java.time.DayOfWeek;\r\nimport java.time.LocalDate;\r\nimport java.time.LocalDateTime;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.stream.Collectors;\r\nimport java.util.UUID;\r\nimport java.time.format.DateTimeFormatter;\r\n\r\n@Service\r\n@RequiredArgsConstructor\r\npublic class ClassSessionServiceImpl implements ClassSessionService {\r\n\r\n    @Autowired\r\n    private ClassSessionRepository sessionRepository;\r\n    private final CourtRepository courtRepository;\r\n    private final UserRepository userRepository;\r\n    private final ClassRegistrationRepository registrationRepository;\r\n    private final BookingRepository bookingRepository;\r\n    private final EmailService emailService;\r\n    private final MemberRepository memberRepository;\r\n    private final PaymentRepository paymentRepository;\r\n    private final WalletRepository walletRepository;\r\n    private final EscrowAccountService escrowAccountService;\r\n    private final WalletTransactionRepository walletTransactionRepository;\r\n    private final MembershipTierRepository membershipTierRepository;\r\n    private static final Logger logger = LoggerFactory.getLogger(ClassSessionServiceImpl.class);\r\n\r\n\r\n    @Override\r\n    @Transactional\r\n    public ClassSession createClassSession(ClassSessionDto sessionDto, User coach) throws ConflictException, ResourceNotFoundException {\r\n        // 驗證教練\r\n        if (!\"COACH\".equalsIgnoreCase(coach.getUserType())) {\r\n            throw new ValidationException(\"User is not a coach\");\r\n        }\r\n        // 驗證場地\r\n        Court court = courtRepository.findById(sessionDto.getCourtId())\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"Court not found\"));\r\n        // 檢查時間衝突 (教練)\r\n        if (sessionRepository.existsByCoachIdAndStartTimeBetweenAndStatusNot(\r\n                coach.getId(), sessionDto.getStartTime(), sessionDto.getEndTime(), \"CANCELLED\")) {\r\n            throw new ConflictException(\"Coach has scheduling conflict\");\r\n        }\r\n        // 檢查時間衝突 (場地)\r\n        if (sessionRepository.existsByCourtIdAndStartTimeBetweenAndStatusNot(\r\n                sessionDto.getCourtId(), sessionDto.getStartTime(), sessionDto.getEndTime(), \"CANCELLED\")) {\r\n            throw new ConflictException(\"Court is already booked\");\r\n        }\r\n        // 檢查普通預約衝突\r\n        if (bookingRepository.existsActiveBookingForCourtAndTime(\r\n                sessionDto.getCourtId(),\r\n                sessionDto.getStartTime().toLocalDate(),\r\n                sessionDto.getStartTime().toLocalTime(),\r\n                sessionDto.getEndTime().toLocalTime())) {\r\n            throw new ConflictException(\"Court has regular booking at this time\");\r\n        }\r\n        // 創建課程\r\n        ClassSession session = new ClassSession();\r\n        session.setCoach(coach);\r\n        session.setCourt(court);\r\n        session.setStartTime(sessionDto.getStartTime());\r\n        session.setEndTime(sessionDto.getEndTime());\r\n        session.setMaxParticipants(sessionDto.getMaxParticipants());\r\n        session.setDescription(sessionDto.getDescription());\r\n        session.setPrice(sessionDto.getPrice());\r\n        session.setStatus(\"AVAILABLE\");\r\n        session.setSlotType(\"COACH_SESSION\");\r\n        session.setCurrentParticipants(0);\r\n        session.setTitle(sessionDto.getTitle());\r\n        return sessionRepository.save(session);\r\n    }\r\n\r\n    @Override\r\n    @Transactional\r\n    public ClassSession updateClassSession(Integer sessionId, ClassSessionDto sessionDto)\r\n            throws ResourceNotFoundException, ConflictException {\r\n\r\n        ClassSession session = sessionRepository.findById(sessionId)\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"Session not found\"));\r\n\r\n        // 只允许修改未开始的课程\r\n        if (!\"AVAILABLE\".equals(session.getStatus()) && !\"FULL\".equals(session.getStatus())) {\r\n            throw new ValidationException(\"Only available or full sessions can be modified\");\r\n        }\r\n\r\n        // 冲突检查\r\n        if (sessionRepository.existsConflictForUpdate(\r\n                sessionId,\r\n                sessionDto.getCourtId(),\r\n                sessionDto.getStartTime(),\r\n                sessionDto.getEndTime())) {\r\n            throw new ConflictException(\"Time slot conflict detected\");\r\n        }\r\n\r\n        // 更新字段\r\n        session.setStartTime(sessionDto.getStartTime());\r\n        session.setEndTime(sessionDto.getEndTime());\r\n        session.setMaxParticipants(sessionDto.getMaxParticipants());\r\n        session.setDescription(sessionDto.getDescription());\r\n        session.setPrice(sessionDto.getPrice());\r\n        session.setTitle(sessionDto.getTitle());\r\n        session.setAllowReplacement(sessionDto.getAllowReplacement());\r\n\r\n        // 如果修改后人数少于最大人数，恢复为可用状态\r\n        if (session.getCurrentParticipants() < sessionDto.getMaxParticipants() &&\r\n                \"FULL\".equals(session.getStatus())) {\r\n            session.setStatus(\"AVAILABLE\");\r\n        }\r\n\r\n        return sessionRepository.save(session);\r\n    }\r\n\r\n    @Override\r\n    @Transactional\r\n    public ClassSession partialUpdateClassSession(Integer sessionId, Map<String, Object> updates)\r\n            throws ResourceNotFoundException, ConflictException {\r\n\r\n        ClassSession session = sessionRepository.findById(sessionId)\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"Session not found\"));\r\n\r\n        // 只允许修改未开始的课程\r\n        if (!\"AVAILABLE\".equals(session.getStatus()) && !\"FULL\".equals(session.getStatus())) {\r\n            throw new ValidationException(\"Only available or full sessions can be modified\");\r\n        }\r\n\r\n        // 调试信息\r\n        System.out.println(\"=== Partial Update Debug ===\");\r\n        System.out.println(\"Session ID: \" + sessionId);\r\n        System.out.println(\"Updates map: \" + updates);\r\n        for (Map.Entry<String, Object> entry : updates.entrySet()) {\r\n            System.out.println(\"Key: \" + entry.getKey() + \", Value: \" + entry.getValue() + \", Type: \" + entry.getValue().getClass().getSimpleName());\r\n        }\r\n\r\n        // 只更新提供的字段\r\n        if (updates.containsKey(\"maxParticipants\")) {\r\n            Object maxParticipantsObj = updates.get(\"maxParticipants\");\r\n            Integer maxParticipants;\r\n            if (maxParticipantsObj instanceof Integer) {\r\n                maxParticipants = (Integer) maxParticipantsObj;\r\n            } else if (maxParticipantsObj instanceof Double) {\r\n                maxParticipants = ((Double) maxParticipantsObj).intValue();\r\n            } else {\r\n                maxParticipants = Integer.valueOf(maxParticipantsObj.toString());\r\n            }\r\n            System.out.println(\"Setting maxParticipants: \" + maxParticipants);\r\n            session.setMaxParticipants(maxParticipants);\r\n            \r\n            // 如果修改后人数少于最大人数，恢复为可用状态\r\n            if (session.getCurrentParticipants() < maxParticipants &&\r\n                    \"FULL\".equals(session.getStatus())) {\r\n                session.setStatus(\"AVAILABLE\");\r\n            }\r\n        }\r\n        \r\n        if (updates.containsKey(\"price\")) {\r\n            Object priceObj = updates.get(\"price\");\r\n            Double price;\r\n            if (priceObj instanceof Integer) {\r\n                price = ((Integer) priceObj).doubleValue();\r\n            } else if (priceObj instanceof Double) {\r\n                price = (Double) priceObj;\r\n            } else {\r\n                price = Double.valueOf(priceObj.toString());\r\n            }\r\n            System.out.println(\"Setting price: \" + price);\r\n            session.setPrice(price);\r\n        }\r\n\r\n        return sessionRepository.save(session);\r\n    }\r\n\r\n    @Override\r\n    @Transactional\r\n    public void cancelClassSession(Integer sessionId, boolean force, String reason)\r\n            throws ResourceNotFoundException, ConflictException {\r\n\r\n        ClassSession session = sessionRepository.findById(sessionId)\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"Session not found\"));\r\n\r\n        // 檢查24小時限制\r\n        LocalDateTime now = LocalDateTime.now();\r\n        long hoursUntilSession = java.time.temporal.ChronoUnit.HOURS.between(now, session.getStartTime());\r\n        \r\n        // 如果課程開始前24小時內，不允許取消（除非是教練強制取消）\r\n        if (hoursUntilSession <= 24 && !force) {\r\n            throw new ConflictException(\"Cannot cancel class session within 24 hours of start time. Use force=true to override.\");\r\n        }\r\n\r\n        // 如果有报名且不强制取消\r\n        if (session.getCurrentParticipants() > 0 && !force) {\r\n            throw new ConflictException(\"Session has participants. Use force=true to cancel\");\r\n        }\r\n\r\n        // 通知已报名用户并退款\r\n        if (session.getCurrentParticipants() > 0) {\r\n            List<ClassRegistration> registrations = registrationRepository.findByClassSessionId(sessionId);\r\n            for (ClassRegistration registration : registrations) {\r\n                Member member = registration.getMember();\r\n                if (member != null) {\r\n                    // 使用託管帳戶退款\r\n                    escrowAccountService.refundFromEscrow(member.getUser(), session.getPrice(), session);\r\n                    // 通知\r\n                    String email = member.getUser().getEmail();\r\n                    String msg = \"Your class on \" + session.getStartTime() + \" has been cancelled.\";\r\n                    if (reason != null && !reason.isEmpty()) {\r\n                        msg += \"\\nReason: \" + reason;\r\n                    }\r\n                    emailService.sendEmail(email, \"Class Cancelled\", msg);\r\n                }\r\n            }\r\n        }\r\n\r\n        session.setStatus(\"CANCELLED\");\r\n        sessionRepository.save(session);\r\n    }\r\n\r\n    @Override\r\n    public List<ClassSession> getCoachSchedule(Integer coachId, LocalDateTime start, LocalDateTime end) {\r\n        return sessionRepository.findScheduleByCoachIdAndPeriodWithVenue(coachId, start, end);\r\n    }\r\n\r\n    @Override\r\n    @Transactional\r\n    public boolean registerUserForSession(Integer sessionId, Integer userId)\r\n            throws ConflictException, ResourceNotFoundException {\r\n\r\n        ClassSession session = sessionRepository.findById(sessionId)\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"Session not found\"));\r\n\r\n        // 新增：教練保留時段只能在前一天或當天預約\r\n        if (\"COACH_AVAILABILITY\".equals(session.getSlotType())) {\r\n            LocalDateTime now = LocalDateTime.now();\r\n            LocalDateTime slotDate = session.getStartTime().toLocalDate().atStartOfDay();\r\n            LocalDateTime today = now.toLocalDate().atStartOfDay();\r\n            LocalDateTime yesterday = today.minusDays(1);\r\n            if (!(slotDate.equals(today) || slotDate.equals(yesterday))) {\r\n                throw new ConflictException(\"This coach slot can only be booked on the day before or the same day.\");\r\n            }\r\n        }\r\n\r\n        User user = userRepository.findById(userId)\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"User not found\"));\r\n\r\n        Member member = memberRepository.findByUserId(userId);\r\n        if (member == null) {\r\n            throw new ValidationException(\"User is not a member\");\r\n        }\r\n\r\n        // Replacement class: only allow original students\r\n        if (session.getReplacementForSessionId() != null) {\r\n            Integer originSessionId = session.getReplacementForSessionId();\r\n            ClassSession origin = sessionRepository.findById(originSessionId).orElse(null);\r\n            boolean isOriginalStudent = false;\r\n            if (origin != null && origin.getRegistrations() != null) {\r\n                for (ClassRegistration reg : origin.getRegistrations()) {\r\n                    if (reg.getMember() != null && reg.getMember().getId().equals(member.getId())) {\r\n                        isOriginalStudent = true;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            if (!isOriginalStudent) {\r\n                throw new ConflictException(\"Only students from the original cancelled class can register for this replacement class.\");\r\n            }\r\n        }\r\n\r\n        // 檢查名額\r\n        if (session.getCurrentParticipants() >= session.getMaxParticipants()) {\r\n            throw new ConflictException(\"Session is full\");\r\n        }\r\n\r\n        // 檢查是否已報名\r\n        if (registrationRepository.existsByClassSessionIdAndMemberId(sessionId, member.getId())) {\r\n            throw new ConflictException(\"User already registered for this session\");\r\n        }\r\n\r\n        // Handle payment: replacement class is always free\r\n        double price = session.getReplacementForSessionId() != null ? 0.0 : session.getPrice();\r\n        processPayment(member, price, session);\r\n\r\n        // 創建報名記錄\r\n        ClassRegistration registration = new ClassRegistration();\r\n        registration.setClassSession(session);\r\n        registration.setMember(member);\r\n        registration.setRegistrationDate(LocalDateTime.now());\r\n        registrationRepository.save(registration);\r\n\r\n        // 更新課程人數\r\n        session.setCurrentParticipants(session.getCurrentParticipants() + 1);\r\n        if (session.getCurrentParticipants() >= session.getMaxParticipants()) {\r\n            session.setStatus(\"FULL\");\r\n        }\r\n        // 新增：如果達到開班人數（如 3 人），自動 setStatus(\"CONFIRMED\")\r\n        if (session.getCurrentParticipants() >= 4) {\r\n            session.setStatus(\"CONFIRMED\");\r\n        }\r\n        // 新增：報名成功後寄送 email 通知\r\n        emailService.sendClassRegistrationConfirmation(\r\n            user.getEmail(),\r\n            session,\r\n            member\r\n        );\r\n        // 新增：可加 app 通知（如有推播模組）\r\n        sessionRepository.save(session);\r\n\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    @Transactional\r\n    public Map<String, Object> registerUserForMultipleSessions(Integer userId, List<Integer> sessionIds, String paymentMethod, Integer numPaddles, Boolean buyBallSet) throws ConflictException, ResourceNotFoundException {\r\n        User user = userRepository.findById(userId)\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"User not found\"));\r\n        Member member = memberRepository.findByUserId(userId);\r\n        if (member == null) {\r\n            throw new ValidationException(\"User is not a member\");\r\n        }\r\n        List<ClassSession> sessions = sessionRepository.findAllByIdWithCourt(sessionIds);\r\n        if (sessions.size() != sessionIds.size()) {\r\n            throw new ResourceNotFoundException(\"Some sessions not found\");\r\n        }\r\n        // 檢查所有 session 是否都可報名\r\n        for (ClassSession session : sessions) {\r\n            if (session.getCurrentParticipants() >= session.getMaxParticipants()) {\r\n                throw new ConflictException(\"Session is full: \" + session.getId());\r\n            }\r\n            if (registrationRepository.existsByClassSessionIdAndMemberId(session.getId(), member.getId())) {\r\n                throw new ConflictException(\"Already registered for session: \" + session.getId());\r\n            }\r\n        }\r\n        // 計算總金額（課程費用 + 設備費用）\r\n        double sessionTotal = sessions.stream().mapToDouble(ClassSession::getPrice).sum();\r\n        double equipmentTotal = 0.0;\r\n        \r\n        // 計算設備費用\r\n        if (numPaddles != null && numPaddles > 0) {\r\n            equipmentTotal += numPaddles * 5.0; // 每個球拍 RM5\r\n        }\r\n        if (buyBallSet != null && buyBallSet) {\r\n            equipmentTotal += 12.0; // 球組 RM12\r\n        }\r\n        \r\n        double total = sessionTotal + equipmentTotal;\r\n        \r\n        // 使用託管帳戶系統處理支付（只扣一次）\r\n        if (\"wallet\".equalsIgnoreCase(paymentMethod)) {\r\n            // 為每個課程創建託管支付記錄\r\n            for (ClassSession session : sessions) {\r\n                escrowAccountService.depositToEscrow(user, session.getPrice(), session);\r\n            }\r\n            // 如果有設備費用，也創建託管記錄\r\n            if (equipmentTotal > 0) {\r\n                // 創建一個虛擬的 session 來處理設備費用\r\n                escrowAccountService.depositToEscrow(user, equipmentTotal, null);\r\n            }\r\n        } else {\r\n            // 其他付款方式可擴充\r\n        }\r\n        // 為每個 session 建立報名記錄\r\n        for (ClassSession session : sessions) {\r\n            ClassRegistration registration = new ClassRegistration();\r\n            registration.setClassSession(session);\r\n            registration.setMember(member);\r\n            registration.setRegistrationDate(LocalDateTime.now());\r\n            // 託管支付記錄會在 EscrowAccountService 中創建\r\n            registrationRepository.save(registration);\r\n            session.setCurrentParticipants(session.getCurrentParticipants() + 1);\r\n            if (session.getCurrentParticipants() >= session.getMaxParticipants()) {\r\n                session.setStatus(\"FULL\");\r\n            }\r\n            if (session.getCurrentParticipants() >= 4) {\r\n                session.setStatus(\"CONFIRMED\");\r\n            }\r\n            emailService.sendClassRegistrationConfirmation(\r\n                user.getEmail(),\r\n                session,\r\n                member\r\n            );\r\n            sessionRepository.save(session);\r\n        }\r\n        \r\n        // 返回詳細的響應數據\r\n        Map<String, Object> response = new HashMap<>();\r\n        response.put(\"success\", true);\r\n        response.put(\"totalAmount\", total);\r\n        response.put(\"sessionTotal\", sessionTotal);\r\n        response.put(\"equipmentTotal\", equipmentTotal);\r\n        response.put(\"numPaddles\", numPaddles != null ? numPaddles : 0);\r\n        response.put(\"buyBallSet\", buyBallSet != null ? buyBallSet : false);\r\n        response.put(\"paymentMethod\", paymentMethod);\r\n        \r\n        // 計算積分獎勵\r\n        int pointsEarned = (int) Math.floor(total);\r\n        response.put(\"pointsEarned\", pointsEarned);\r\n        \r\n        // 獲取用戶當前的積分餘額\r\n        if (member != null) {\r\n            response.put(\"currentTierPointBalance\", member.getTierPointBalance());\r\n            response.put(\"currentRewardPointBalance\", member.getRewardPointBalance());\r\n        }\r\n        \r\n        return response;\r\n    }\r\n\r\n    @Override\r\n    public List<ClassSession> getAvailableSessions(Integer courtId, LocalDateTime start, LocalDateTime end) {\r\n        return sessionRepository.findAvailableSessionsWithRegistrations(courtId, start, end);\r\n    }\r\n\r\n    @Override\r\n    public boolean hasCourtConflict(Integer courtId, java.time.LocalDateTime start, java.time.LocalDateTime end) {\r\n        // 檢查課程衝突\r\n        boolean sessionConflict = sessionRepository.existsByCourtIdAndStartTimeBetweenAndStatusNot(\r\n                courtId, start, end, \"CANCELLED\");\r\n        // 檢查booking衝突\r\n        boolean bookingConflict = bookingRepository.existsActiveBookingForCourtAndTime(\r\n                courtId,\r\n                start.toLocalDate(),\r\n                start.toLocalTime(),\r\n                end.toLocalTime()\r\n        );\r\n        return sessionConflict || bookingConflict;\r\n    }\r\n\r\n    private void processPayment(Member member, double amount, ClassSession session) {\r\n        // 使用託管帳戶系統處理支付\r\n        escrowAccountService.depositToEscrow(member.getUser(), amount, session);\r\n    }\r\n\r\n    private void refundPayment(Member member, double amount) {\r\n        // 1. 退款到钱包\r\n        Wallet wallet = walletRepository.findByMemberId(member.getId())\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"Wallet not found\"));\r\n        wallet.setBalance(wallet.getBalance() + amount);\r\n        walletRepository.save(wallet);\r\n\r\n        // 2. 创建退款记录\r\n        Payment refund = new Payment();\r\n        refund.setAmount(amount);\r\n        refund.setRefundDate(LocalDateTime.now());\r\n        refund.setPaymentMethod(\"WALLET\");\r\n        refund.setStatus(\"REFUNDED\");\r\n        refund.setPaymentType(\"CLASS_SESSION_REFUND\");\r\n        paymentRepository.save(refund);\r\n    }\r\n\r\n    @Transactional\r\n    @Override\r\n    public List<ClassSession> createRecurringSessions(RecurringSessionRequestDto request, User coach)\r\n            throws ConflictException, ResourceNotFoundException {\r\n\r\n        List<ClassSession> sessions = new ArrayList<>();\r\n        LocalDate currentDate = request.getStartDate();\r\n        String recurringGroupId = UUID.randomUUID().toString();\r\n\r\n        // 星期幾對應的數字 (1=Monday, 2=Tuesday, ..., 7=Sunday)\r\n        Map<String, Integer> dayMap = Map.of(\r\n            \"MON\", 1, \"TUES\", 2, \"WED\", 3, \"THURS\", 4, \"FRI\", 5, \"SAT\", 6, \"SUN\", 7\r\n        );\r\n\r\n        while (!currentDate.isAfter(request.getEndDate())) {\r\n            // 檢查當前日期是否符合選擇的星期幾\r\n            int currentDayOfWeek = currentDate.getDayOfWeek().getValue(); // 1=Monday, 2=Tuesday, ..., 7=Sunday\r\n            Integer targetDay = dayMap.get(request.getDayOfWeek());\r\n            \r\n            if (targetDay != null && currentDayOfWeek == targetDay) {\r\n                LocalDateTime startDateTime = LocalDateTime.of(currentDate, request.getStartTime());\r\n                LocalDateTime endDateTime = LocalDateTime.of(currentDate, request.getEndTime());\r\n\r\n                ClassSessionDto sessionDto = new ClassSessionDto();\r\n                sessionDto.setCourtId(request.getCourtId());\r\n                sessionDto.setStartTime(startDateTime);\r\n                sessionDto.setEndTime(endDateTime);\r\n                sessionDto.setMaxParticipants(request.getMaxParticipants());\r\n                sessionDto.setDescription(request.getDescription());\r\n                sessionDto.setPrice(request.getPrice());\r\n                sessionDto.setTitle(request.getTitle());\r\n                sessionDto.setSlotType(\"RECURRING_SESSION\");\r\n\r\n                try {\r\n                    ClassSession session = createClassSession(sessionDto, coach);\r\n                    session.setRecurring(true);\r\n                    session.setRecurrencePattern(\"WEEKLY\");\r\n                    session.setRecurrenceDays(request.getDayOfWeek());\r\n                    session.setRecurringGroupId(recurringGroupId);\r\n                    sessions.add(session);\r\n                } catch (ConflictException e) {\r\n                    // 处理时间冲突 - 跳过冲突日期\r\n                    logger.warn(\"时间冲突跳过日期 {}: {}\", currentDate, e.getMessage());\r\n                }\r\n            }\r\n            \r\n            currentDate = currentDate.plusDays(1);\r\n        }\r\n\r\n        if (sessions.isEmpty()) {\r\n            throw new ConflictException(\"所有选定日期都存在时间冲突或没有符合选择的星期几的日期\");\r\n        }\r\n\r\n        return sessions;\r\n    }\r\n\r\n    @Transactional\r\n    public void settleClassSession(Integer sessionId) {\r\n        ClassSession session = sessionRepository.findById(sessionId)\r\n            .orElseThrow(() -> new ResourceNotFoundException(\"Session not found\"));\r\n        if (!\"COMPLETED\".equals(session.getStatus())) {\r\n            throw new IllegalStateException(\"Session not completed yet\");\r\n        }\r\n        \r\n        // 使用託管帳戶系統進行分帳\r\n        escrowAccountService.settleClassSession(session);\r\n        \r\n        // 記錄結算明細\r\n        session.setNote(\"Settled via escrow system: 80% to coach, 20% to platform\");\r\n        sessionRepository.save(session);\r\n    }\r\n\r\n    private double getDurationHours(ClassSession session) {\r\n        return java.time.Duration.between(session.getStartTime(), session.getEndTime()).toMinutes() / 60.0;\r\n    }\r\n\r\n    @Scheduled(cron = \"0 */5 * * * ?\") // 每5分鐘檢查一次\r\n    public void autoSettleStartedSessions() {\r\n        LocalDateTime now = LocalDateTime.now();\r\n        LocalDateTime fiveMinutesAgo = now.minusMinutes(5);\r\n        \r\n        // 查找剛剛開始的課程（狀態為 CONFIRMED 且開始時間在5分鐘內）\r\n        List<ClassSession> startedSessions = sessionRepository.findByStatusAndStartTimeBetween(\"CONFIRMED\", fiveMinutesAgo, now);\r\n        \r\n        for (ClassSession session : startedSessions) {\r\n            try {\r\n                // 只更新課程狀態為進行中，不進行收入分配\r\n                session.setStatus(\"IN_PROGRESS\");\r\n                sessionRepository.save(session);\r\n                \r\n                logger.info(\"Updated session {} status to IN_PROGRESS\", session.getId());\r\n            } catch (Exception e) {\r\n                logger.error(\"Failed to update session \" + session.getId(), e);\r\n            }\r\n        }\r\n    }\r\n    \r\n    // 檢查所有已開始但未結算的課程\r\n    private void autoSettleAllStartedSessions() {\r\n        try {\r\n            LocalDateTime now = LocalDateTime.now();\r\n            \r\n            // 只查找 COMPLETED 狀態的課程\r\n            List<ClassSession> completedSessions = sessionRepository.findAll().stream()\r\n                .filter(session -> session.getStartTime() != null && \r\n                                 session.getStartTime().isBefore(now) &&\r\n                                 \"COMPLETED\".equals(session.getStatus()))\r\n                .collect(Collectors.toList());\r\n            \r\n            for (ClassSession session : completedSessions) {\r\n                try {\r\n                    // 檢查是否已經有收入分配記錄\r\n                    List<Payment> existingSettlements = paymentRepository.findByPaymentTypeAndStatus(\"COACH_INCOME\", \"COMPLETED\")\r\n                        .stream()\r\n                        .filter(payment -> payment.getTransactionId() != null && \r\n                                         payment.getTransactionId().equals(\"SETTLEMENT_\" + session.getId()))\r\n                        .collect(Collectors.toList());\r\n                    \r\n                    // 檢查是否有託管支付\r\n                    List<Payment> escrowedPayments = paymentRepository.findByPaymentTypeAndStatus(\"CLASS_SESSION_ESCROW\", \"ESCROWED\")\r\n                        .stream()\r\n                        .filter(payment -> payment.getTransactionId() != null && \r\n                                         payment.getTransactionId().startsWith(\"SESSION_\" + session.getId() + \"_\"))\r\n                        .collect(Collectors.toList());\r\n                    \r\n                    // 如果有託管支付但沒有結算記錄，則進行結算\r\n                    if (!escrowedPayments.isEmpty() && existingSettlements.isEmpty()) {\r\n                        escrowAccountService.settleClassSession(session);\r\n                        logger.info(\"Auto-settled completed session {} via escrow system\", session.getId());\r\n                    }\r\n                } catch (Exception e) {\r\n                    logger.error(\"Failed to auto-settle completed session \" + session.getId(), e);\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            logger.error(\"Error in autoSettleAllStartedSessions: \", e);\r\n        }\r\n    }\r\n\r\n    @Scheduled(cron = \"0 */5 * * * ?\") // 每5分鐘檢查一次\r\n    public void autoUpdateSessionStatus() {\r\n        LocalDateTime now = LocalDateTime.now();\r\n        \r\n        // 更新已結束的課程狀態為 COMPLETED\r\n        List<ClassSession> inProgressSessions = sessionRepository.findByStatus(\"IN_PROGRESS\");\r\n        for (ClassSession session : inProgressSessions) {\r\n            try {\r\n                if (session.getEndTime() != null && session.getEndTime().isBefore(now)) {\r\n                    session.setStatus(\"COMPLETED\");\r\n                    sessionRepository.save(session);\r\n                    logger.info(\"Updated session {} status to COMPLETED\", session.getId());\r\n                }\r\n            } catch (Exception e) {\r\n                logger.error(\"Failed to update session \" + session.getId() + \" status\", e);\r\n            }\r\n        }\r\n        \r\n        // 更新已開始但未更新的課程狀態為 IN_PROGRESS\r\n        List<ClassSession> confirmedSessions = sessionRepository.findByStatus(\"CONFIRMED\");\r\n        for (ClassSession session : confirmedSessions) {\r\n            try {\r\n                if (session.getStartTime() != null && session.getStartTime().isBefore(now) && \r\n                    (session.getEndTime() == null || session.getEndTime().isAfter(now))) {\r\n                    session.setStatus(\"IN_PROGRESS\");\r\n                    sessionRepository.save(session);\r\n                    logger.info(\"Updated session {} status to IN_PROGRESS\", session.getId());\r\n                }\r\n            } catch (Exception e) {\r\n                logger.error(\"Failed to update session \" + session.getId() + \" status\", e);\r\n            }\r\n        }\r\n    }\r\n\r\n    @Scheduled(cron = \"0 */5 * * * ?\") // 每5分鐘檢查一次\r\n    public void autoSettleCompletedSessions() {\r\n        List<ClassSession> completed = sessionRepository.findByStatus(\"COMPLETED\");\r\n        logger.info(\"Found {} completed sessions to check for settlement\", completed.size());\r\n        \r\n        for (ClassSession session : completed) {\r\n            try {\r\n                // 檢查是否已經有收入分配記錄\r\n                List<Payment> existingSettlements = paymentRepository.findByPaymentTypeAndStatus(\"COACH_INCOME\", \"COMPLETED\")\r\n                    .stream()\r\n                    .filter(payment -> payment.getTransactionId() != null && \r\n                                     payment.getTransactionId().equals(\"SETTLEMENT_\" + session.getId()))\r\n                    .collect(Collectors.toList());\r\n                \r\n                // 檢查是否有託管支付\r\n                List<Payment> escrowedPayments = paymentRepository.findByPaymentTypeAndStatus(\"CLASS_SESSION_ESCROW\", \"ESCROWED\")\r\n                    .stream()\r\n                    .filter(payment -> payment.getTransactionId() != null && \r\n                                     payment.getTransactionId().startsWith(\"SESSION_\" + session.getId() + \"_\"))\r\n                    .collect(Collectors.toList());\r\n                \r\n                logger.info(\"Session {}: {} existing settlements, {} escrowed payments\", \r\n                           session.getId(), existingSettlements.size(), escrowedPayments.size());\r\n                \r\n                // 如果有託管支付但沒有結算記錄，則進行結算\r\n                if (!escrowedPayments.isEmpty() && existingSettlements.isEmpty()) {\r\n                    escrowAccountService.settleClassSession(session);\r\n                    logger.info(\"Auto-settled completed session {} via escrow system\", session.getId());\r\n                } else if (escrowedPayments.isEmpty()) {\r\n                    logger.warn(\"No escrowed payments found for completed session {}\", session.getId());\r\n                } else if (!existingSettlements.isEmpty()) {\r\n                    logger.info(\"Session {} already has settlement records\", session.getId());\r\n                }\r\n            } catch (Exception e) {\r\n                logger.error(\"Failed to auto-settle completed session \" + session.getId(), e);\r\n            }\r\n        }\r\n    }\r\n\r\n    @Scheduled(cron = \"0 0 1 * * ?\") // 每天凌晨1點跑\r\n    public void autoCancelEmptySessions() {\r\n        List<ClassSession> upcoming = sessionRepository.findUpcomingSessionsWithoutParticipants();\r\n        for (ClassSession session : upcoming) {\r\n            session.setStatus(\"CANCELLED\");\r\n            sessionRepository.save(session);\r\n            // 可選：通知教練\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public List<ClassSession> getSessionsByIds(List<Integer> sessionIds) {\r\n        return sessionRepository.findAllByIdWithCourt(sessionIds);\r\n    }\r\n\r\n    @Override\r\n    public ClassSession getSessionById(Integer sessionId) {\r\n        return sessionRepository.findById(sessionId).orElse(null);\r\n    }\r\n\r\n    @Override\r\n    public List<ClassSession> getSessionsByRecurringGroupId(String recurringGroupId) {\r\n        return sessionRepository.findByRecurringGroupId(recurringGroupId);\r\n    }\r\n\r\n    @Scheduled(cron = \"0 0 * * * *\") // 每小時執行一次\r\n    @Transactional\r\n    public void autoDistributeClassRevenue() {\r\n        try {\r\n            LocalDateTime now = LocalDateTime.now();\r\n            LocalDateTime twentyFourHoursFromNow = now.plusHours(24);\r\n            \r\n            // 查找24小時內開始且狀態為CONFIRMED的課程\r\n            List<ClassSession> upcomingSessions = sessionRepository.findByStartTimeBetweenAndStatus(\r\n                now, twentyFourHoursFromNow, \"CONFIRMED\"\r\n            );\r\n            \r\n            for (ClassSession session : upcomingSessions) {\r\n                // 檢查是否已經分配過收入\r\n                if (session.getRevenueDistributed() != null && session.getRevenueDistributed()) {\r\n                    continue;\r\n                }\r\n                \r\n                // 檢查是否有託管支付\r\n                List<Payment> escrowedPayments = paymentRepository.findByPaymentTypeAndStatus(\"CLASS_SESSION_ESCROW\", \"ESCROWED\")\r\n                    .stream()\r\n                    .filter(payment -> payment.getTransactionId() != null && \r\n                            payment.getTransactionId().startsWith(\"SESSION_\" + session.getId() + \"_\"))\r\n                    .collect(java.util.stream.Collectors.toList());\r\n                \r\n                if (!escrowedPayments.isEmpty()) {\r\n                    // 使用託管系統進行分帳\r\n                    escrowAccountService.settleClassSession(session);\r\n                    \r\n                    // 標記為已分配\r\n                    session.setRevenueDistributed(true);\r\n                    sessionRepository.save(session);\r\n                    \r\n                    // 發送通知給教練\r\n                    double totalRevenue = escrowedPayments.stream().mapToDouble(Payment::getAmount).sum();\r\n                    sendRevenueDistributionNotification(session, totalRevenue);\r\n                    \r\n                    logger.info(\"Auto-distributed revenue for session {} via escrow system\", session.getId());\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            logger.error(\"Error in autoDistributeClassRevenue: \", e);\r\n        }\r\n    }\r\n    \r\n    private void sendRevenueDistributionNotification(ClassSession session, double totalRevenue) {\r\n        try {\r\n            User coach = session.getCoach();\r\n            double coachShare = totalRevenue * 0.80;\r\n            \r\n            String subject = \"Revenue Distributed - Class Session\";\r\n            String message = String.format(\r\n                \"Your class session '%s' scheduled for %s has been automatically settled.\\n\\n\" +\r\n                \"Total Revenue: RM %.2f\\n\" +\r\n                \"Your Share (80%%): RM %.2f\\n\" +\r\n                \"Platform Fee (20%%): RM %.2f\\n\\n\" +\r\n                \"The amount has been credited to your wallet via escrow system.\",\r\n                session.getTitle(),\r\n                session.getStartTime().format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\")),\r\n                totalRevenue,\r\n                coachShare,\r\n                totalRevenue * 0.20\r\n            );\r\n            \r\n            emailService.sendEmail(coach.getEmail(), subject, message);\r\n            logger.info(\"Revenue distribution notification sent to coach {} for session {}\", \r\n                       coach.getId(), session.getId());\r\n        } catch (Exception e) {\r\n            logger.error(\"Failed to send revenue distribution notification for session {}\", \r\n                        session.getId(), e);\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/ClassSessionServiceImpl.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/ClassSessionServiceImpl.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/ClassSessionServiceImpl.java	(revision c178c1d9e80f6815b91226b2d10f391611dcb6b4)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/ClassSessionServiceImpl.java	(date 1754966059844)
@@ -41,6 +41,7 @@
     private final EscrowAccountService escrowAccountService;
     private final WalletTransactionRepository walletTransactionRepository;
     private final MembershipTierRepository membershipTierRepository;
+    private final MemberService memberService;
     private static final Logger logger = LoggerFactory.getLogger(ClassSessionServiceImpl.class);
 
 
@@ -452,7 +453,13 @@
         wallet.setBalance(wallet.getBalance() + amount);
         walletRepository.save(wallet);
 
-        // 2. 创建退款记录
+        // 2. 扣除積分（全額扣除，因為課程取消通常是全額退款）
+        MemberService.PointDeductionResult deductionResult = memberService.deductPointsForRefund(member, amount, 1.0);
+        
+        logger.info("Deducted {} tier points and {} reward points from member {} for class session refund",
+                deductionResult.getTierPointsDeducted(), deductionResult.getRewardPointsDeducted(), member.getId());
+
+        // 3. 创建退款记录
         Payment refund = new Payment();
         refund.setAmount(amount);
         refund.setRefundDate(LocalDateTime.now());
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/EventRegistrationRequestDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.dto;\r\n\r\nimport lombok.Data;\r\n\r\n@Data\r\npublic class EventRegistrationRequestDto {\r\n    private Integer eventId;\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/EventRegistrationRequestDto.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/EventRegistrationRequestDto.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/EventRegistrationRequestDto.java	(revision c178c1d9e80f6815b91226b2d10f391611dcb6b4)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/EventRegistrationRequestDto.java	(date 1754936884362)
@@ -5,4 +5,5 @@
 @Data
 public class EventRegistrationRequestDto {
     private Integer eventId;
+    private Boolean useWallet;
 }
Index: pickleball-frontend/src/components/profile/ProfilePage.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Box,\r\n  CircularProgress,\r\n  Container,\r\n  Button,\r\n  Typography,\r\n  Snackbar,\r\n  Alert,\r\n  useMediaQuery,\r\n  useTheme,\r\n  alpha\r\n} from '@mui/material';\r\nimport ProfileHeader from './ProfileHeader';\r\nimport ProfileStats from './ProfileStats';\r\nimport RecentBookings from './RecentBookings';\r\nimport RecentInvoices from './RecentInvoices';\r\nimport ProfileNavigation from './ProfileNavigation';\r\nimport api from '../../service/api';\r\nimport UserService from '../../service/UserService';\r\nimport { useNavigate, Outlet, useLocation } from 'react-router-dom';\r\nimport EditProfileForm from './EditProfileForm';\r\nimport { getWalletBalance, initializeWallet, topUpWallet } from '../../service/WalletService';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport TextField from '@mui/material/TextField';\r\nimport NotificationPreferencesPage from './NotificationPreferencesPage';\r\n\r\nconst ProfilePage = ({ editMode = false }) => {\r\n  const navigate = useNavigate();\r\n  const theme = useTheme();\r\n  const isMobile = useMediaQuery(theme.breakpoints.down('lg'));\r\n  const location = useLocation();\r\n  const isEditProfile = location.pathname.endsWith('/edit-profile');\r\n  const isNotifications = location.pathname.endsWith('/notifications');\r\n\r\n  // State management\r\n  const [profile, setProfile] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState('');\r\n  const [snackbar, setSnackbar] = useState({\r\n    open: false,\r\n    message: '',\r\n    severity: 'success'\r\n  });\r\n  const [activeView, setActiveView] = useState('overview');\r\n  const [usernameChanged, setUsernameChanged] = useState(false);\r\n  const [newUsername, setNewUsername] = useState('');\r\n\r\n  // Wallet state\r\n  const [walletBalance, setWalletBalance] = useState(null);\r\n  const [walletLoading, setWalletLoading] = useState(true);\r\n  const [walletError, setWalletError] = useState('');\r\n  const [topupOpen, setTopupOpen] = useState(false);\r\n  const [topupAmount, setTopupAmount] = useState('');\r\n  const [topupLoading, setTopupLoading] = useState(false);\r\n\r\n  // Fetch profile data\r\n  useEffect(() => {\r\n    const fetchProfile = async () => {\r\n      try {\r\n        const token = UserService.getToken();\r\n        if (!token) {\r\n          navigate('/login');\r\n          return;\r\n        }\r\n\r\n        const response = await api.get('/profile');\r\n\r\n        const enhancedProfile = {\r\n          ...response.data,\r\n          accountStatus: response.data.requestedUserType ? 'PENDING' : 'ACTIVE'\r\n        };\r\n\r\n        UserService.setProfileImage(response.data.profileImage);\r\n        setProfile(enhancedProfile);\r\n      } catch (err) {\r\n        if (err.response?.status === 401) {\r\n          UserService.logout();\r\n          navigate('/login');\r\n        } else {\r\n          setError('Failed to load profile data. Please try again later.');\r\n        }\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchProfile();\r\n  }, [navigate]);\r\n\r\n  // Fetch wallet balance\r\n  useEffect(() => {\r\n    const fetchWallet = async () => {\r\n      try {\r\n        setWalletLoading(true);\r\n        let balance;\r\n        try {\r\n          balance = await getWalletBalance();\r\n        } catch (err) {\r\n          await initializeWallet();\r\n          balance = await getWalletBalance();\r\n        }\r\n        setWalletBalance(balance);\r\n        setWalletError('');\r\n      } catch (err) {\r\n        setWalletError('Failed to load wallet balance: ' + err.message);\r\n      } finally {\r\n        setWalletLoading(false);\r\n      }\r\n    };\r\n    fetchWallet();\r\n  }, []);\r\n\r\n  // Profile update handler\r\n  const handleUpdateProfile = async (updatedProfile) => {\r\n    try {\r\n      const token = UserService.getToken();\r\n      const oldUsername = profile.username;\r\n\r\n      const payload = {\r\n        ...updatedProfile,\r\n        dob: updatedProfile.dob ? new Date(updatedProfile.dob).toISOString() : null\r\n      };\r\n\r\n      const response = await api.put('/profile', payload);\r\n\r\n      const filename = response.data.filename;\r\n      UserService.setProfileImage(filename);\r\n\r\n      if (updatedProfile.username && updatedProfile.username !== oldUsername) {\r\n        setUsernameChanged(true);\r\n        setNewUsername(updatedProfile.username);\r\n        setSnackbar({\r\n          open: true,\r\n          message: 'Username changed. Please log in again with your new username.',\r\n          severity: 'info'\r\n        });\r\n      } else {\r\n        setProfile({\r\n          ...response.data,\r\n          status: response.data.status\r\n        });\r\n\r\n        if (response.data.status === 'PENDING') {\r\n          setSnackbar({\r\n            open: true,\r\n            message: `Role change to ${response.data.requestedUserType} requested. Status: PENDING`,\r\n            severity: 'info'\r\n          });\r\n        } else {\r\n          setSnackbar({\r\n            open: true,\r\n            message: 'Profile updated successfully!',\r\n            severity: 'success'\r\n          });\r\n        }\r\n\r\n        setActiveView('overview');\r\n      }\r\n    } catch (err) {\r\n      let errorMessage = 'Failed to update profile. Please try again.';\r\n      if (err.response?.data) {\r\n        errorMessage = err.response.data;\r\n      } else if (err.message) {\r\n        errorMessage = err.message;\r\n      }\r\n\r\n      setSnackbar({\r\n        open: true,\r\n        message: errorMessage,\r\n        severity: 'error'\r\n      });\r\n    }\r\n  };\r\n\r\n  // Photo handlers\r\n  const handlePhotoUpdate = async (file) => {\r\n    try {\r\n      const token = UserService.getToken();\r\n      const formData = new FormData();\r\n      formData.append('profileImage', file);\r\n\r\n      const response = await axios.post(\r\n        'http://localhost:8081/api/profile/photo',\r\n        formData,\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n            'Content-Type': 'multipart/form-data'\r\n          }\r\n        }\r\n      );\r\n\r\n      const filename = response.data;\r\n      UserService.setProfileImage(filename);\r\n\r\n      setProfile(prev => ({\r\n        ...prev,\r\n        profileImage: filename\r\n      }));\r\n\r\n      setSnackbar({\r\n        open: true,\r\n        message: 'Profile photo updated successfully!',\r\n        severity: 'success'\r\n      });\r\n    } catch (err) {\r\n      setSnackbar({\r\n        open: true,\r\n        message: 'Failed to update profile photo. Please try again.',\r\n        severity: 'error'\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleRemovePhoto = async () => {\r\n    try {\r\n      const token = UserService.getToken();\r\n\r\n      await axios.delete('http://localhost:8081/api/profile/photo', {\r\n        headers: { Authorization: `Bearer ${token}` }\r\n      });\r\n\r\n      UserService.setProfileImage(null);\r\n\r\n      setProfile(prev => ({\r\n        ...prev,\r\n        profileImage: null\r\n      }));\r\n\r\n      setSnackbar({\r\n        open: true,\r\n        message: 'Profile photo removed successfully!',\r\n        severity: 'success'\r\n      });\r\n    } catch (err) {\r\n      setSnackbar({\r\n        open: true,\r\n        message: 'Failed to remove profile photo. Please try again.',\r\n        severity: 'error'\r\n      });\r\n    }\r\n  };\r\n\r\n  // Wallet handlers\r\n  const handleTopup = async () => {\r\n    if (!topupAmount || isNaN(topupAmount) || Number(topupAmount) <= 0) {\r\n      setWalletError('Please enter a valid amount');\r\n      return;\r\n    }\r\n    setTopupLoading(true);\r\n    try {\r\n      await topUpWallet(Number(topupAmount));\r\n      const newBalance = await getWalletBalance();\r\n      setWalletBalance(newBalance);\r\n      setSnackbar({ open: true, message: 'Top-up successful!', severity: 'success' });\r\n      setTopupOpen(false);\r\n      setTopupAmount('');\r\n    } catch (err) {\r\n      setWalletError('Top-up failed: ' + err.message);\r\n    } finally {\r\n      setTopupLoading(false);\r\n    }\r\n  };\r\n\r\n  // Other handlers\r\n  const handleLogoutAfterUsernameChange = () => {\r\n    UserService.logout();\r\n    navigate('/login');\r\n  };\r\n\r\n  const handleSnackbarClose = () => {\r\n    setSnackbar(prev => ({ ...prev, open: false }));\r\n  };\r\n\r\n  // Loading state\r\n  if (loading) {\r\n    return (\r\n      <Box sx={{\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        height: '80vh'\r\n      }}>\r\n        <CircularProgress size={60} sx={{ color: theme.palette.primary.main }} />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  // Error state\r\n  if (error) {\r\n    return (\r\n      <Box sx={{ textAlign: 'center', p: 4 }}>\r\n        <Typography variant=\"h5\" color=\"error\" sx={{ mb: 2 }}>\r\n          {error}\r\n        </Typography>\r\n        <Button\r\n          variant=\"contained\"\r\n          onClick={() => window.location.reload()}\r\n        >\r\n          Reload Page\r\n        </Button>\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Box sx={{\r\n      backgroundColor: theme.palette.background.default,\r\n      minHeight: '100vh',\r\n      pt: { xs: 2, lg: 3 },\r\n      pb: 3\r\n    }}>\r\n      <Container maxWidth={false} sx={{ \r\n        maxWidth: '1200px', \r\n        px: { xs: 1, sm: 2, lg: 3 },\r\n        overflow: 'hidden'\r\n      }}>\r\n        {/* Main Layout Container using Flexbox */}\r\n        <Box sx={{\r\n          display: 'flex',\r\n          gap: { xs: 2, lg: 3 },\r\n          alignItems: 'flex-start',\r\n          flexDirection: { xs: 'column', lg: 'row' },\r\n          width: '100%',\r\n          overflow: 'hidden'\r\n        }}>\r\n          {/* Left Sidebar - Fixed Width */}\r\n          <Box sx={{\r\n            width: { xs: '100%', lg: '260px' },\r\n            flexShrink: 0,\r\n            position: { lg: 'sticky' },\r\n            top: { lg: 20 },\r\n            height: 'fit-content',\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            gap: 2\r\n          }}>\r\n            {/* Profile Header Card */}\r\n            <Box sx={{\r\n              backgroundColor: theme.palette.background.paper,\r\n              borderRadius: 2,\r\n              boxShadow: theme.shadows[1],\r\n              p: 2.5,\r\n              border: `1px solid ${alpha(theme.palette.divider, 0.1)}`,\r\n              position: 'relative'\r\n            }}>\r\n              <ProfileHeader profile={profile} />\r\n            </Box>\r\n            {/* Profile Navigation Card */}\r\n            <Box sx={{\r\n              backgroundColor: theme.palette.background.paper,\r\n              borderRadius: 2,\r\n              boxShadow: theme.shadows[1],\r\n              p: 1.5,\r\n              border: `1px solid ${alpha(theme.palette.divider, 0.1)}`\r\n            }}>\r\n              <ProfileNavigation setActiveView={setActiveView} />\r\n            </Box>\r\n          </Box>\r\n          {/* Right Content Area - Flexible Width */}\r\n          <Box sx={{ \r\n            flex: 1, \r\n            minWidth: 0,\r\n            width: { xs: '100%', lg: 'calc(100% - 260px - 24px)' },\r\n            overflow: 'hidden'\r\n          }}>\r\n            {isEditProfile ? (\r\n              <EditProfileForm\r\n                profile={profile}\r\n                onSave={handleUpdateProfile}\r\n                onCancel={() => navigate('/profile')}\r\n                onPhotoUpdate={handlePhotoUpdate}\r\n                onRemovePhoto={handleRemovePhoto}\r\n              />\r\n            ) : isNotifications ? (\r\n              <NotificationPreferencesPage\r\n                profile={profile}\r\n                onSave={prefs => setProfile(prev => ({ ...prev, ...prefs }))}\r\n                onCancel={() => navigate('/profile')}\r\n              />\r\n            ) : (\r\n              <Outlet />\r\n            )}\r\n          </Box>\r\n        </Box>\r\n      </Container>\r\n      {/* Top Up Dialog */}\r\n      <Dialog open={topupOpen} onClose={() => setTopupOpen(false)} maxWidth=\"sm\" fullWidth>\r\n        <DialogTitle sx={{ pb: 2 }}>\r\n          <Typography variant=\"h5\" fontWeight=\"bold\">\r\n            Top Up Wallet\r\n          </Typography>\r\n        </DialogTitle>\r\n        <DialogContent sx={{ pb: 2 }}>\r\n          <TextField\r\n            autoFocus\r\n            margin=\"dense\"\r\n            label=\"Amount (RM)\"\r\n            type=\"number\"\r\n            fullWidth\r\n            value={topupAmount}\r\n            onChange={(e) => setTopupAmount(e.target.value)}\r\n            inputProps={{ min: 1, step: 1 }}\r\n            sx={{ mt: 2 }}\r\n            size=\"large\"\r\n          />\r\n          {walletError && (\r\n            <Alert severity=\"error\" sx={{ mt: 2 }}>{walletError}</Alert>\r\n          )}\r\n        </DialogContent>\r\n        <DialogActions sx={{ p: 3, pt: 1 }}>\r\n          <Button \r\n            onClick={() => setTopupOpen(false)} \r\n            disabled={topupLoading}\r\n            size=\"large\"\r\n          >\r\n            Cancel\r\n          </Button>\r\n          <Button \r\n            onClick={handleTopup} \r\n            variant=\"contained\" \r\n            disabled={topupLoading}\r\n            size=\"large\"\r\n            sx={{ minWidth: 120 }}\r\n          >\r\n            {topupLoading ? <CircularProgress size={20} /> : 'Top Up'}\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Snackbar Notifications */}\r\n      <Snackbar\r\n        open={snackbar.open}\r\n        autoHideDuration={usernameChanged ? 10000 : 4000}\r\n        onClose={handleSnackbarClose}\r\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\r\n      >\r\n        <Alert\r\n          onClose={handleSnackbarClose}\r\n          severity={snackbar.severity}\r\n          action={\r\n            usernameChanged ? (\r\n              <Button\r\n                color=\"inherit\"\r\n                size=\"small\"\r\n                onClick={handleLogoutAfterUsernameChange}\r\n                sx={{ fontWeight: 'bold' }}\r\n              >\r\n                LOG IN NOW\r\n              </Button>\r\n            ) : null\r\n          }\r\n          sx={{ width: '100%' }}\r\n        >\r\n          {snackbar.message}\r\n          {usernameChanged && (\r\n            <Typography variant=\"body2\" sx={{ mt: 1, fontWeight: 'bold' }}>\r\n              New username: {newUsername}\r\n            </Typography>\r\n          )}\r\n        </Alert>\r\n      </Snackbar>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default ProfilePage;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball-frontend/src/components/profile/ProfilePage.jsx b/pickleball-frontend/src/components/profile/ProfilePage.jsx
--- a/pickleball-frontend/src/components/profile/ProfilePage.jsx	(revision c178c1d9e80f6815b91226b2d10f391611dcb6b4)
+++ b/pickleball-frontend/src/components/profile/ProfilePage.jsx	(date 1754939709732)
@@ -179,20 +179,14 @@
   // Photo handlers
   const handlePhotoUpdate = async (file) => {
     try {
-      const token = UserService.getToken();
       const formData = new FormData();
       formData.append('profileImage', file);
 
-      const response = await axios.post(
-        'http://localhost:8081/api/profile/photo',
-        formData,
-        {
-          headers: {
-            Authorization: `Bearer ${token}`,
-            'Content-Type': 'multipart/form-data'
-          }
+      const response = await api.post('/profile/photo', formData, {
+        headers: {
+          'Content-Type': 'multipart/form-data'
         }
-      );
+      });
 
       const filename = response.data;
       UserService.setProfileImage(filename);
@@ -218,11 +212,7 @@
 
   const handleRemovePhoto = async () => {
     try {
-      const token = UserService.getToken();
-
-      await axios.delete('http://localhost:8081/api/profile/photo', {
-        headers: { Authorization: `Bearer ${token}` }
-      });
+      await api.delete('/profile/photo');
 
       UserService.setProfileImage(null);
 
@@ -299,7 +289,40 @@
         </Typography>
         <Button
           variant="contained"
-          onClick={() => window.location.reload()}
+          onClick={() => {
+            setError('');
+            setLoading(true);
+            // 重新获取数据
+            const fetchProfile = async () => {
+              try {
+                const token = UserService.getToken();
+                if (!token) {
+                  navigate('/login');
+                  return;
+                }
+
+                const response = await api.get('/profile');
+
+                const enhancedProfile = {
+                  ...response.data,
+                  accountStatus: response.data.requestedUserType ? 'PENDING' : 'ACTIVE'
+                };
+
+                UserService.setProfileImage(response.data.profileImage);
+                setProfile(enhancedProfile);
+              } catch (err) {
+                if (err.response?.status === 401) {
+                  UserService.logout();
+                  navigate('/login');
+                } else {
+                  setError('Failed to load profile data. Please try again later.');
+                }
+              } finally {
+                setLoading(false);
+              }
+            };
+            fetchProfile();
+          }}
         >
           Reload Page
         </Button>
Index: pickleball-frontend/src/components/profile/ProfileStats.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React from 'react';\r\nimport {\r\n  Box,\r\n  Typography,\r\n  Grid,\r\n  useTheme,\r\n  alpha\r\n} from '@mui/material';\r\nimport {\r\n  SportsTennis,\r\n  CalendarToday,\r\n  LocalOffer,\r\n  AccountBalanceWallet\r\n} from '@mui/icons-material';\r\n\r\nconst ProfileStats = ({ profile }) => {\r\n  const theme = useTheme();\r\n\r\n  // 调试信息 - 在开发环境中显示\r\n  console.log('ProfileStats - profile data:', profile);\r\n\r\n  const formatCurrency = (amount) => {\r\n    const numAmount = Number(amount) || 0;\r\n    return new Intl.NumberFormat('en-US', {\r\n      style: 'currency',\r\n      currency: 'MYR',\r\n      minimumFractionDigits: 2\r\n    }).format(numAmount);\r\n  };\r\n\r\n  // 安全的数据提取函数\r\n  const getStatValue = (profile, field, defaultValue = 0) => {\r\n    if (!profile) return defaultValue;\r\n    \r\n    const value = profile[field];\r\n    if (value === null || value === undefined) return defaultValue;\r\n    \r\n    // 如果是数字类型的字段，确保转换为数字\r\n    if (typeof value === 'string' && !isNaN(value)) {\r\n      return Number(value);\r\n    }\r\n    \r\n    return value;\r\n  };\r\n\r\n  const stats = [\r\n    {\r\n      title: \"Bookings Made\",\r\n      value: getStatValue(profile, 'bookingsMade', 0),\r\n      icon: <CalendarToday fontSize=\"small\" />,\r\n      color: theme.palette.primary.main,\r\n      bgColor: alpha(theme.palette.primary.main, 0.1)\r\n    },\r\n    {\r\n      title: \"Booking Hours\",\r\n      value: Number(getStatValue(profile, 'bookingHours', 0)).toFixed(1),\r\n      icon: <SportsTennis fontSize=\"small\" />,\r\n      color: theme.palette.success.main,\r\n      bgColor: alpha(theme.palette.success.main, 0.1)\r\n    },\r\n    {\r\n      title: \"Sumos Joined\",\r\n      value: getStatValue(profile, 'sumosJoined', 0),\r\n      icon: <LocalOffer fontSize=\"small\" />,\r\n      color: theme.palette.warning.main,\r\n      bgColor: alpha(theme.palette.warning.main, 0.1)\r\n    },\r\n    {\r\n      title: \"Amount Spent\",\r\n      value: formatCurrency(getStatValue(profile, 'amountSpent', 0)),\r\n      icon: <AccountBalanceWallet fontSize=\"small\" />,\r\n      color: theme.palette.info.main,\r\n      bgColor: alpha(theme.palette.info.main, 0.1)\r\n    }\r\n  ];\r\n\r\n  return (\r\n    <Box sx={{ width: '100%', overflow: 'hidden' }}>\r\n      {/* Header Section */}\r\n      <Box sx={{ \r\n        mb: 3,\r\n        textAlign: { xs: 'center', md: 'left' }\r\n      }}>\r\n        <Typography variant=\"h5\" sx={{\r\n          fontWeight: 700,\r\n          color: theme.palette.text.primary,\r\n          mb: 0.5,\r\n          letterSpacing: '-0.3px',\r\n          lineHeight: 1.2,\r\n          fontSize: { xs: '1.25rem', lg: '1.5rem' }\r\n        }}>\r\n          Activity Overview\r\n        </Typography>\r\n        <Typography variant=\"body1\" color=\"text.secondary\" sx={{\r\n          fontWeight: 400,\r\n          opacity: 0.8,\r\n          fontSize: { xs: '0.95rem', lg: '1rem' }\r\n        }}>\r\n          Your pickleball journey at a glance\r\n        </Typography>\r\n      </Box>\r\n\r\n      {/* Stats Grid */}\r\n      <Grid container spacing={2}>\r\n        {stats.map((stat, index) => (\r\n          <Grid item xs={6} sm={6} lg={3} key={index}>\r\n            <Box sx={{\r\n              backgroundColor: theme.palette.background.paper,\r\n              border: `1px solid ${alpha(stat.color, 0.15)}`,\r\n              borderRadius: 2,\r\n              p: 2,\r\n              height: 120,\r\n              display: 'flex',\r\n              flexDirection: 'column',\r\n              justifyContent: 'space-between',\r\n              position: 'relative',\r\n              boxShadow: theme.shadows[1],\r\n              transition: 'all 0.2s ease',\r\n              overflow: 'hidden',\r\n              '&:hover': {\r\n                boxShadow: theme.shadows[3],\r\n                borderColor: stat.color,\r\n                transform: 'translateY(-2px)'\r\n              }\r\n            }}>\r\n              {/* Icon and Title Row */}\r\n              <Box sx={{\r\n                display: 'flex',\r\n                alignItems: 'flex-start',\r\n                mb: 1,\r\n                gap: 1\r\n              }}>\r\n                <Box sx={{\r\n                  backgroundColor: stat.color,\r\n                  color: theme.palette.getContrastText(stat.color),\r\n                  width: 32,\r\n                  height: 32,\r\n                  borderRadius: 1.5,\r\n                  display: 'flex',\r\n                  alignItems: 'center',\r\n                  justifyContent: 'center',\r\n                  flexShrink: 0\r\n                }}>\r\n                  {stat.icon}\r\n                </Box>\r\n                <Typography variant=\"body2\" sx={{ \r\n                  fontWeight: 600, \r\n                  color: theme.palette.text.primary,\r\n                  fontSize: '0.8rem',\r\n                  lineHeight: 1.2,\r\n                  flex: 1,\r\n                  wordBreak: 'break-word'\r\n                }}>\r\n                  {stat.title}\r\n                </Typography>\r\n              </Box>\r\n\r\n              {/* Value */}\r\n              <Box sx={{ mt: 'auto' }}>\r\n                <Typography variant=\"h6\" sx={{\r\n                  fontWeight: 800,\r\n                  color: stat.color,\r\n                  fontSize: { xs: '1rem', sm: '1.1rem', lg: '1.2rem' },\r\n                  lineHeight: 1.1,\r\n                  wordBreak: 'break-word',\r\n                  display: '-webkit-box',\r\n                  WebkitLineClamp: 2,\r\n                  WebkitBoxOrient: 'vertical',\r\n                  overflow: 'hidden'\r\n                }}>\r\n                  {stat.value}\r\n                </Typography>\r\n              </Box>\r\n\r\n              {/* Decorative Element */}\r\n              <Box sx={{\r\n                position: 'absolute',\r\n                bottom: 0,\r\n                left: 0,\r\n                width: '100%',\r\n                height: 3,\r\n                background: `linear-gradient(90deg, ${stat.color} 0%, ${alpha(stat.color, 0.2)} 100%)`\r\n              }} />\r\n            </Box>\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default ProfileStats;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball-frontend/src/components/profile/ProfileStats.jsx b/pickleball-frontend/src/components/profile/ProfileStats.jsx
--- a/pickleball-frontend/src/components/profile/ProfileStats.jsx	(revision c178c1d9e80f6815b91226b2d10f391611dcb6b4)
+++ b/pickleball-frontend/src/components/profile/ProfileStats.jsx	(date 1754827041542)
@@ -53,18 +53,21 @@
     },
     {
       title: "Booking Hours",
-      value: Number(getStatValue(profile, 'bookingHours', 0)).toFixed(1),
+      value: (() => {
+        const hours = Number(getStatValue(profile, 'bookingHours', 0));
+        return hours % 1 === 0 ? hours.toString() : hours.toFixed(1);
+      })(),
       icon: <SportsTennis fontSize="small" />,
       color: theme.palette.success.main,
       bgColor: alpha(theme.palette.success.main, 0.1)
     },
-    {
+   /* {
       title: "Sumos Joined",
       value: getStatValue(profile, 'sumosJoined', 0),
       icon: <LocalOffer fontSize="small" />,
       color: theme.palette.warning.main,
       bgColor: alpha(theme.palette.warning.main, 0.1)
-    },
+    },*/
     {
       title: "Amount Spent",
       value: formatCurrency(getStatValue(profile, 'amountSpent', 0)),
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Registration.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// Registration.java\r\npackage com.pickleball_backend.pickleball.entity;\r\n\r\nimport jakarta.persistence.*;\r\nimport lombok.Data;\r\n\r\n@Entity\r\n@Data\r\n@Table(name = \"registration\")\r\npublic class Registration {\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    @Column(name = \"id\")\r\n    private Integer id;\r\n\r\n    // Fix: Change referencedColumnName to \"user_id\"\r\n    @ManyToOne(fetch = FetchType.LAZY)\r\n    @JoinColumn(name = \"member_id\", referencedColumnName = \"user_id\")\r\n    private Member member;\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Registration.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Registration.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Registration.java	(revision c178c1d9e80f6815b91226b2d10f391611dcb6b4)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Registration.java	(date 1754953424368)
@@ -3,6 +3,7 @@
 
 import jakarta.persistence.*;
 import lombok.Data;
+import lombok.ToString;
 
 @Entity
 @Data
@@ -16,5 +17,6 @@
     // Fix: Change referencedColumnName to "user_id"
     @ManyToOne(fetch = FetchType.LAZY)
     @JoinColumn(name = "member_id", referencedColumnName = "user_id")
+    @ToString.Exclude
     private Member member;
 }
\ No newline at end of file
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/EventOrganizer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.entity;\r\n\r\nimport jakarta.persistence.*;\r\nimport lombok.Data;\r\n\r\n@Entity\r\n@Data\r\n@Table(name = \"eventorganizer\")\r\npublic class EventOrganizer {\r\n    @Id\r\n    private Integer id; // Will be set by @MapsId\r\n\r\n    @OneToOne(fetch = FetchType.EAGER)\r\n    @MapsId\r\n    @JoinColumn(name = \"user_id\")\r\n    private User user;\r\n\r\n    @Column(name = \"organizerRating\")\r\n    private Double organizerRating;\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/EventOrganizer.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/EventOrganizer.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/EventOrganizer.java	(revision c178c1d9e80f6815b91226b2d10f391611dcb6b4)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/EventOrganizer.java	(date 1754953467239)
@@ -2,6 +2,7 @@
 
 import jakarta.persistence.*;
 import lombok.Data;
+import lombok.ToString;
 
 @Entity
 @Data
@@ -13,6 +14,7 @@
     @OneToOne(fetch = FetchType.EAGER)
     @MapsId
     @JoinColumn(name = "user_id")
+    @ToString.Exclude
     private User user;
 
     @Column(name = "organizerRating")
Index: pickleball-frontend/src/components/layout/MainLayout.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import Navbar from '../common/Navbar';\r\nimport FooterComponent from '../common/Footer';\r\nimport { Box, Container } from '@mui/material';\r\nimport { Outlet } from 'react-router-dom';\r\n\r\nconst MainLayout = () => {\r\n  return (\r\n    <>\r\n      <Navbar />\r\n      <Box sx={{ paddingTop: '150px', minHeight: '100vh', display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\r\n        <Container\r\n          maxWidth={false}\r\n          sx={{\r\n            maxWidth: '1200px',\r\n            width: '100%',\r\n            flex: 1,\r\n            px: { xs: 1, sm: 2, lg: 3 }\r\n          }}\r\n        >\r\n          <Outlet />\r\n        </Container>\r\n      </Box>\r\n      <FooterComponent />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MainLayout;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball-frontend/src/components/layout/MainLayout.jsx b/pickleball-frontend/src/components/layout/MainLayout.jsx
--- a/pickleball-frontend/src/components/layout/MainLayout.jsx	(revision c178c1d9e80f6815b91226b2d10f391611dcb6b4)
+++ b/pickleball-frontend/src/components/layout/MainLayout.jsx	(date 1754923601389)
@@ -1,5 +1,6 @@
 import Navbar from '../common/Navbar';
 import FooterComponent from '../common/Footer';
+import FloatingMessageButton from '../common/FloatingMessageButton';
 import { Box, Container } from '@mui/material';
 import { Outlet } from 'react-router-dom';
 
@@ -21,6 +22,7 @@
         </Container>
       </Box>
       <FooterComponent />
+      <FloatingMessageButton />
     </>
   );
 };
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Event.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.entity;\r\n\r\nimport jakarta.persistence.*;\r\nimport jakarta.validation.constraints.NotBlank;\r\nimport jakarta.validation.constraints.NotNull;\r\nimport jakarta.validation.constraints.Positive;\r\nimport lombok.Data;\r\n\r\nimport java.time.LocalDateTime;\r\nimport java.util.Set;\r\n\r\n@Entity\r\n@Data\r\n@Table(name = \"event\")\r\npublic class Event {\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Integer id;\r\n\r\n    @NotBlank(message = \"Title is required\")\r\n    private String title;\r\n\r\n    @NotNull(message = \"Start time is required\")\r\n    @Column(name = \"start_time\")\r\n    private LocalDateTime startTime;\r\n\r\n    @NotNull(message = \"End time is required\")\r\n    @Column(name = \"end_time\")\r\n    private LocalDateTime endTime;\r\n\r\n    @NotBlank(message = \"Event type is required\")\r\n    private String eventType;\r\n    \r\n    @Positive(message = \"Capacity must be positive\")\r\n    private Integer capacity;\r\n    \r\n    private String status;\r\n    \r\n    private String location; // 新增：事件地點\r\n\r\n    @Column(name = \"organizer_id\")\r\n    private Integer organizerId;\r\n\r\n    @NotBlank(message = \"Schedule is required\")\r\n    @Column(columnDefinition = \"TEXT\")\r\n    private String schedule;\r\n\r\n    @Column(name = \"fee_amount\")\r\n    private Double feeAmount;\r\n\r\n    private int registeredCount = 0;\r\n\r\n    @ManyToMany\r\n    @JoinTable(\r\n        name = \"event_court\",\r\n        joinColumns = @JoinColumn(name = \"event_id\"),\r\n        inverseJoinColumns = @JoinColumn(name = \"court_id\")\r\n    )\r\n    private Set<Court> courts;\r\n\r\n    @ManyToOne(fetch = FetchType.EAGER)\r\n    @JoinColumn(name = \"venue_id\")\r\n    private Venue venue; // optional, for full venue booking\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Event.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Event.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Event.java	(revision c178c1d9e80f6815b91226b2d10f391611dcb6b4)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Event.java	(date 1754953467238)
@@ -5,6 +5,7 @@
 import jakarta.validation.constraints.NotNull;
 import jakarta.validation.constraints.Positive;
 import lombok.Data;
+import lombok.ToString;
 
 import java.time.LocalDateTime;
 import java.util.Set;
@@ -56,10 +57,12 @@
         joinColumns = @JoinColumn(name = "event_id"),
         inverseJoinColumns = @JoinColumn(name = "court_id")
     )
+    @ToString.Exclude
     private Set<Court> courts;
 
     @ManyToOne(fetch = FetchType.EAGER)
     @JoinColumn(name = "venue_id")
+    @ToString.Exclude
     private Venue venue; // optional, for full venue booking
 
 }
\ No newline at end of file
Index: pickleball-frontend/src/components/messaging/MessagingPage.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/pages/MessagingPage.jsx\r\nimport React from 'react';\r\nimport { Container, Box } from '@mui/material';\r\nimport MessagingHub from './MessagingHub';\r\nimport { SocketProvider } from '../../context/SocketContext';\r\nimport { useTheme, alpha } from '@mui/material/styles';\r\n\r\nexport default function MessagingPage() {\r\n  const theme = useTheme();\r\n  return (\r\n    <Container maxWidth=\"md\" sx={{ \r\n      mt: { xs: 2, sm: 4 }, \r\n      height: { xs: 'calc(100vh - 32px)', md: '85vh' }, \r\n      display: 'flex', \r\n      alignItems: 'center', \r\n      justifyContent: 'center',\r\n      p: 0\r\n    }}>\r\n      <Box\r\n        sx={{\r\n          height: '100%',\r\n          width: '100%',\r\n          borderRadius: 4,\r\n          overflow: 'hidden',\r\n          boxShadow: theme.shadows[6],\r\n          bgcolor: theme.palette.background.paper,\r\n          display: 'flex',\r\n          flexDirection: 'column',\r\n          border: theme.palette.mode === 'dark'\r\n            ? `1px solid ${alpha(theme.palette.divider, 0.3)}`\r\n            : `1px solid ${alpha(theme.palette.divider, 0.2)}`\r\n        }}\r\n      >\r\n        <SocketProvider>\r\n          <MessagingHub />\r\n        </SocketProvider>\r\n      </Box>\r\n    </Container>\r\n  );\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball-frontend/src/components/messaging/MessagingPage.jsx b/pickleball-frontend/src/components/messaging/MessagingPage.jsx
--- a/pickleball-frontend/src/components/messaging/MessagingPage.jsx	(revision c178c1d9e80f6815b91226b2d10f391611dcb6b4)
+++ b/pickleball-frontend/src/components/messaging/MessagingPage.jsx	(date 1754912510742)
@@ -8,9 +8,9 @@
 export default function MessagingPage() {
   const theme = useTheme();
   return (
-    <Container maxWidth="md" sx={{ 
-      mt: { xs: 2, sm: 4 }, 
-      height: { xs: 'calc(100vh - 32px)', md: '85vh' }, 
+    <Container maxWidth="xl" sx={{ 
+      mt: { xs: 1, sm: 2 }, 
+      height: { xs: 'calc(100vh - 16px)', md: 'calc(100vh - 32px)' }, 
       display: 'flex', 
       alignItems: 'center', 
       justifyContent: 'center',
@@ -20,15 +20,32 @@
         sx={{
           height: '100%',
           width: '100%',
-          borderRadius: 4,
+          borderRadius: 3,
           overflow: 'hidden',
-          boxShadow: theme.shadows[6],
+          boxShadow: theme.shadows[8],
           bgcolor: theme.palette.background.paper,
           display: 'flex',
-          flexDirection: 'column',
+          flexDirection: 'row',
           border: theme.palette.mode === 'dark'
             ? `1px solid ${alpha(theme.palette.divider, 0.3)}`
-            : `1px solid ${alpha(theme.palette.divider, 0.2)}`
+            : `1px solid ${alpha(theme.palette.divider, 0.2)}`,
+          background: theme.palette.mode === 'dark'
+            ? `linear-gradient(135deg, ${alpha(theme.palette.background.paper, 0.95)}, ${alpha(theme.palette.background.paper, 0.9)})`
+            : `linear-gradient(135deg, ${alpha(theme.palette.background.paper, 0.98)}, ${alpha(theme.palette.background.paper, 0.95)})`,
+          backdropFilter: 'blur(10px)',
+          position: 'relative',
+          '&::before': {
+            content: '""',
+            position: 'absolute',
+            top: 0,
+            left: 0,
+            right: 0,
+            bottom: 0,
+            background: theme.palette.mode === 'dark'
+              ? `linear-gradient(45deg, ${alpha(theme.palette.primary.main, 0.03)}, ${alpha(theme.palette.secondary.main, 0.03)})`
+              : `linear-gradient(45deg, ${alpha(theme.palette.primary.main, 0.02)}, ${alpha(theme.palette.secondary.main, 0.02)})`,
+            pointerEvents: 'none'
+          }
         }}
       >
         <SocketProvider>
Index: pickleball-frontend/src/components/messaging/MessageBubble.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/components/messaging/MessageBubble.jsx\r\nimport React from 'react';\r\nimport { ListItem, Box, Typography, Avatar, Tooltip } from '@mui/material';\r\nimport { useTheme, alpha } from '@mui/material/styles';\r\n\r\nconst MessageBubble = ({ message }) => {\r\n  const theme = useTheme();\r\n  const currentUser = JSON.parse(localStorage.getItem('currentUser')) || {};\r\n  const currentUsername = currentUser.username || '';\r\n  const isOwn = currentUsername.toLowerCase() === (message.senderUsername || '').toLowerCase();\r\n  \r\n  const formatTimestamp = (timestamp) => {\r\n    if (!timestamp) return '';\r\n    try {\r\n      const date = new Date(timestamp);\r\n      return date.toLocaleTimeString('en-GB', {\r\n        hour: '2-digit',\r\n        minute: '2-digit'\r\n      });\r\n    } catch (e) {\r\n      return '';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ListItem\r\n      sx={{\r\n        display: 'flex',\r\n        justifyContent: isOwn ? 'flex-end' : 'flex-start',\r\n        alignItems: 'flex-end',\r\n        mb: 1.5,\r\n        padding: 0,\r\n        width: '100%'\r\n      }}\r\n    >\r\n      {!isOwn && (\r\n        <Avatar\r\n          src={message.senderProfileImage}\r\n          sx={{ \r\n            mr: 1.5, \r\n            width: 40, \r\n            height: 40, \r\n            boxShadow: theme.shadows[1],\r\n            border: `1px solid ${alpha(theme.palette.divider, 0.2)}`\r\n          }}\r\n        />\r\n      )}\r\n      \r\n      <Box\r\n        sx={{\r\n          background: isOwn\r\n            ? `linear-gradient(135deg, ${theme.palette.primary.main} 0%, ${alpha(theme.palette.primary.dark, 0.9)})`\r\n            : theme.palette.mode === 'dark'\r\n              ? alpha(theme.palette.grey[800], 0.8)\r\n              : alpha(theme.palette.grey[50], 0.95),\r\n          color: isOwn ? theme.palette.common.white : theme.palette.text.primary,\r\n          p: 2,\r\n          borderRadius: '18px',\r\n          maxWidth: { xs: '85%', sm: '70%' },\r\n          minWidth: 120,\r\n          borderBottomRightRadius: isOwn ? '4px' : '18px',\r\n          borderBottomLeftRadius: isOwn ? '18px' : '4px',\r\n          boxShadow: theme.shadows[1],\r\n          wordBreak: 'break-word',\r\n          display: 'flex',\r\n          flexDirection: 'column',\r\n          position: 'relative',\r\n          transition: 'transform 0.2s, box-shadow 0.2s',\r\n          '&:hover': {\r\n            transform: 'translateY(-2px)',\r\n            boxShadow: theme.shadows[3]\r\n          }\r\n        }}\r\n      >\r\n        {message.imageUrl && (\r\n          <Box sx={{\r\n            maxWidth: '100%',\r\n            borderRadius: 2,\r\n            overflow: 'hidden',\r\n            mb: message.content ? 1.5 : 0,\r\n            boxShadow: theme.shadows[1],\r\n          }}>\r\n            <img\r\n              src={message.imageUrl}\r\n              alt=\"Chat content\"\r\n              style={{\r\n                maxWidth: '100%',\r\n                maxHeight: 280,\r\n                display: 'block',\r\n                borderRadius: 8,\r\n              }}\r\n            />\r\n          </Box>\r\n        )}\r\n        \r\n        {message.content && (\r\n          <Typography variant=\"body1\" sx={{ \r\n            fontSize: '1.05rem', \r\n            lineHeight: 1.6,\r\n            whiteSpace: 'pre-wrap'\r\n          }}>\r\n            {message.content}\r\n          </Typography>\r\n        )}\r\n        \r\n        <Box sx={{\r\n          display: 'flex',\r\n          justifyContent: 'flex-end',\r\n          alignItems: 'center',\r\n          mt: 1.5,\r\n          gap: 0.5\r\n        }}>\r\n          <Tooltip title={new Date(message.timestamp).toLocaleString()} arrow>\r\n            <Typography\r\n              variant=\"caption\"\r\n              sx={{\r\n                color: isOwn ? alpha(theme.palette.common.white, 0.7) : theme.palette.text.secondary,\r\n                fontSize: '0.75rem'\r\n              }}\r\n            >\r\n              {formatTimestamp(message.timestamp)}\r\n            </Typography>\r\n          </Tooltip>\r\n          \r\n          {isOwn && (\r\n            <Typography\r\n              variant=\"caption\"\r\n              sx={{\r\n                color: message.read\r\n                  ? theme.palette.success.light\r\n                  : message.delivered\r\n                    ? theme.palette.info.light\r\n                    : alpha(theme.palette.common.white, 0.5),\r\n                fontWeight: 'bold',\r\n                fontSize: '1.1em',\r\n                ml: 0.5\r\n              }}\r\n            >\r\n              {message.read ? '✓✓' : message.delivered ? '✓' : ''}\r\n            </Typography>\r\n          )}\r\n        </Box>\r\n      </Box>\r\n      \r\n      {isOwn && (\r\n        <Avatar\r\n          src={currentUser.profileImage}\r\n          sx={{ \r\n            ml: 1.5, \r\n            width: 40, \r\n            height: 40, \r\n            boxShadow: theme.shadows[1],\r\n            border: `1px solid ${alpha(theme.palette.divider, 0.2)}`\r\n          }}\r\n        />\r\n      )}\r\n    </ListItem>\r\n  );\r\n};\r\n\r\nexport default MessageBubble;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball-frontend/src/components/messaging/MessageBubble.jsx b/pickleball-frontend/src/components/messaging/MessageBubble.jsx
--- a/pickleball-frontend/src/components/messaging/MessageBubble.jsx	(revision c178c1d9e80f6815b91226b2d10f391611dcb6b4)
+++ b/pickleball-frontend/src/components/messaging/MessageBubble.jsx	(date 1754915079003)
@@ -2,11 +2,12 @@
 import React from 'react';
 import { ListItem, Box, Typography, Avatar, Tooltip } from '@mui/material';
 import { useTheme, alpha } from '@mui/material/styles';
+import { useAuth } from '../../context/AuthContext';
 
 const MessageBubble = ({ message }) => {
   const theme = useTheme();
-  const currentUser = JSON.parse(localStorage.getItem('currentUser')) || {};
-  const currentUsername = currentUser.username || '';
+  const { currentUser } = useAuth();
+  const currentUsername = currentUser?.username || '';
   const isOwn = currentUsername.toLowerCase() === (message.senderUsername || '').toLowerCase();
   
   const formatTimestamp = (timestamp) => {
@@ -38,21 +39,23 @@
           src={message.senderProfileImage}
           sx={{ 
             mr: 1.5, 
-            width: 40, 
-            height: 40, 
+            width: 36, 
+            height: 36, 
             boxShadow: theme.shadows[1],
             border: `1px solid ${alpha(theme.palette.divider, 0.2)}`
           }}
-        />
+        >
+          {(message.senderUsername || 'U').substring(0, 2).toUpperCase()}
+        </Avatar>
       )}
       
       <Box
         sx={{
           background: isOwn
-            ? `linear-gradient(135deg, ${theme.palette.primary.main} 0%, ${alpha(theme.palette.primary.dark, 0.9)})`
+            ? `linear-gradient(135deg, ${alpha(theme.palette.primary.light, 0.9)}, ${alpha(theme.palette.primary.main, 0.8)})`
             : theme.palette.mode === 'dark'
-              ? alpha(theme.palette.grey[800], 0.8)
-              : alpha(theme.palette.grey[50], 0.95),
+              ? alpha(theme.palette.grey[700], 0.8)
+              : alpha(theme.palette.grey[100], 0.95),
           color: isOwn ? theme.palette.common.white : theme.palette.text.primary,
           p: 2,
           borderRadius: '18px',
@@ -67,8 +70,8 @@
           position: 'relative',
           transition: 'transform 0.2s, box-shadow 0.2s',
           '&:hover': {
-            transform: 'translateY(-2px)',
-            boxShadow: theme.shadows[3]
+            transform: 'translateY(-1px)',
+            boxShadow: theme.shadows[2]
           }
         }}
       >
@@ -95,9 +98,10 @@
         
         {message.content && (
           <Typography variant="body1" sx={{ 
-            fontSize: '1.05rem', 
-            lineHeight: 1.6,
-            whiteSpace: 'pre-wrap'
+            fontSize: '0.95rem', 
+            lineHeight: 1.5,
+            whiteSpace: 'pre-wrap',
+            fontWeight: 400
           }}>
             {message.content}
           </Typography>
@@ -107,7 +111,7 @@
           display: 'flex',
           justifyContent: 'flex-end',
           alignItems: 'center',
-          mt: 1.5,
+          mt: 1,
           gap: 0.5
         }}>
           <Tooltip title={new Date(message.timestamp).toLocaleString()} arrow>
@@ -115,7 +119,8 @@
               variant="caption"
               sx={{
                 color: isOwn ? alpha(theme.palette.common.white, 0.7) : theme.palette.text.secondary,
-                fontSize: '0.75rem'
+                fontSize: '0.7rem',
+                fontWeight: 400
               }}
             >
               {formatTimestamp(message.timestamp)}
@@ -132,8 +137,24 @@
                     ? theme.palette.info.light
                     : alpha(theme.palette.common.white, 0.5),
                 fontWeight: 'bold',
-                fontSize: '1.1em',
-                ml: 0.5
+                fontSize: '1em',
+                ml: 0.5,
+                transition: 'color 0.3s ease',
+                animation: message.read ? 'pulse 1s ease-in-out' : 'none',
+                '@keyframes pulse': {
+                  '0%': {
+                    transform: 'scale(1)',
+                    opacity: 0.7
+                  },
+                  '50%': {
+                    transform: 'scale(1.2)',
+                    opacity: 1
+                  },
+                  '100%': {
+                    transform: 'scale(1)',
+                    opacity: 0.7
+                  }
+                }
               }}
             >
               {message.read ? '✓✓' : message.delivered ? '✓' : ''}
@@ -144,15 +165,17 @@
       
       {isOwn && (
         <Avatar
-          src={currentUser.profileImage}
+          src={currentUser?.profileImage}
           sx={{ 
             ml: 1.5, 
-            width: 40, 
-            height: 40, 
+            width: 36, 
+            height: 36, 
             boxShadow: theme.shadows[1],
             border: `1px solid ${alpha(theme.palette.divider, 0.2)}`
           }}
-        />
+        >
+          {(currentUser?.username || 'U').substring(0, 2).toUpperCase()}
+        </Avatar>
       )}
     </ListItem>
   );
Index: pickleball-frontend/src/service/CoachService.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import axios from 'axios';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:8081';\r\n\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  timeout: 10000\r\n});\r\n\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('authToken');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => Promise.reject(error)\r\n);\r\n\r\nconst CoachService = {\r\n  getVenues: async () => {\r\n    // Fetch venues for the current coach\r\n    const res = await api.get('/api/coach/venues');\r\n    return res.data;\r\n  },\r\n  getAllVenues: async () => {\r\n    // Fetch all venues for dropdown\r\n    const res = await api.get('/api/coach/all-venues');\r\n    return res.data;\r\n  },\r\n  getAvailableCourts: async () => {\r\n    const res = await api.get('/api/coach/available-courts');\r\n    return res.data;\r\n  },\r\n  getCourtsByVenue: async (venueId) => {\r\n    const res = await api.get(`/api/coach/courts-by-venue/${venueId}`);\r\n    return res.data;\r\n  },\r\n  getAllCourts: async () => {\r\n    const res = await api.get('/api/coach/all-courts');\r\n    return res.data;\r\n  },\r\n  getTimeSlots: async () => {\r\n    const res = await api.get('/api/coach/time-slots');\r\n    return res.data;\r\n  },\r\n  getSchedule: async (start, end) => {\r\n    const res = await api.get('/api/coach/schedule', {\r\n      params: { start, end }\r\n    });\r\n    return res.data;\r\n  },\r\n  getScheduleWithRegistrations: async (start, end) => {\r\n    const res = await api.get('/api/coach/schedule-with-registrations', {\r\n      params: { start, end }\r\n    });\r\n    return res.data;\r\n  },\r\n  getDebugSessions: async () => {\r\n    const res = await api.get('/api/coach/debug/sessions');\r\n    return res.data;\r\n  },\r\n  getPublicSessions: async (start, end) => {\r\n    const res = await api.get('/api/coach/public/sessions', {\r\n      params: { start, end }\r\n    });\r\n    return res.data;\r\n  },\r\n  getDebugStatus: async () => {\r\n    const res = await api.get('/api/coach/debug/status');\r\n    return res.data;\r\n  },\r\n  createSlot: async (slotData) => {\r\n    const res = await api.post('/api/coach/slots', slotData);\r\n    return res.data;\r\n  },\r\n  getAvailableTimes: async (courtId, date) => {\r\n    const res = await api.get('/api/coach/available-times', {\r\n      params: { courtId, date }\r\n    });\r\n    return res.data;\r\n  },\r\n\r\n  // 获取教练的所有学生\r\n  getAllStudents: async () => {\r\n    const res = await api.get('/api/coach/students');\r\n    return res.data;\r\n  },\r\n\r\n  // 获取教练的钱包交易记录\r\n  getWalletTransactions: async (timestamp = '') => {\r\n    const url = timestamp ? `/api/coach/wallet-transactions${timestamp}` : '/api/coach/wallet-transactions';\r\n    const res = await api.get(url);\r\n    return res.data;\r\n  },\r\n\r\n  // 获取教练的钱包余额\r\n  getWalletBalance: async (timestamp = '') => {\r\n    const url = timestamp ? `/api/coach/wallet-balance${timestamp}` : '/api/coach/wallet-balance';\r\n    const res = await api.get(url);\r\n    return res.data;\r\n  }\r\n};\r\n\r\nexport default CoachService; 
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball-frontend/src/service/CoachService.js b/pickleball-frontend/src/service/CoachService.js
--- a/pickleball-frontend/src/service/CoachService.js	(revision c178c1d9e80f6815b91226b2d10f391611dcb6b4)
+++ b/pickleball-frontend/src/service/CoachService.js	(date 1754898432741)
@@ -1,82 +1,64 @@
-import axios from 'axios';
-
-const API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:8081';
-
-const api = axios.create({
-  baseURL: API_BASE_URL,
-  timeout: 10000
-});
-
-api.interceptors.request.use(
-  (config) => {
-    const token = localStorage.getItem('authToken');
-    if (token) {
-      config.headers.Authorization = `Bearer ${token}`;
-    }
-    return config;
-  },
-  (error) => Promise.reject(error)
-);
+import api from '../api/axiosConfig';
 
 const CoachService = {
   getVenues: async () => {
     // Fetch venues for the current coach
-    const res = await api.get('/api/coach/venues');
+    const res = await api.get('/coach/venues');
     return res.data;
   },
   getAllVenues: async () => {
     // Fetch all venues for dropdown
-    const res = await api.get('/api/coach/all-venues');
+    const res = await api.get('/coach/all-venues');
     return res.data;
   },
   getAvailableCourts: async () => {
-    const res = await api.get('/api/coach/available-courts');
+    const res = await api.get('/coach/available-courts');
     return res.data;
   },
   getCourtsByVenue: async (venueId) => {
-    const res = await api.get(`/api/coach/courts-by-venue/${venueId}`);
+    const res = await api.get(`/coach/courts-by-venue/${venueId}`);
     return res.data;
   },
   getAllCourts: async () => {
-    const res = await api.get('/api/coach/all-courts');
+    const res = await api.get('/coach/all-courts');
     return res.data;
   },
   getTimeSlots: async () => {
-    const res = await api.get('/api/coach/time-slots');
+    const res = await api.get('/coach/time-slots');
     return res.data;
   },
   getSchedule: async (start, end) => {
-    const res = await api.get('/api/coach/schedule', {
+    const res = await api.get('/coach/schedule', {
       params: { start, end }
     });
     return res.data;
   },
   getScheduleWithRegistrations: async (start, end) => {
-    const res = await api.get('/api/coach/schedule-with-registrations', {
+    const res = await api.get('/coach/schedule-with-registrations', {
       params: { start, end }
     });
     return res.data;
   },
   getDebugSessions: async () => {
-    const res = await api.get('/api/coach/debug/sessions');
+    const res = await api.get('/coach/debug/sessions');
     return res.data;
   },
   getPublicSessions: async (start, end) => {
-    const res = await api.get('/api/coach/public/sessions', {
+    const res = await api.get('/coach/public/sessions', {
       params: { start, end }
     });
     return res.data;
   },
   getDebugStatus: async () => {
-    const res = await api.get('/api/coach/debug/status');
+    const res = await api.get('/coach/debug/status');
     return res.data;
   },
   createSlot: async (slotData) => {
-    const res = await api.post('/api/coach/slots', slotData);
+    const res = await api.post('/coach/slots', slotData);
     return res.data;
   },
   getAvailableTimes: async (courtId, date) => {
-    const res = await api.get('/api/coach/available-times', {
+    const res = await api.get('/coach/available-times', {
       params: { courtId, date }
     });
     return res.data;
@@ -84,20 +66,20 @@
 
   // 获取教练的所有学生
   getAllStudents: async () => {
-    const res = await api.get('/api/coach/students');
+    const res = await api.get('/coach/students');
     return res.data;
   },
 
   // 获取教练的钱包交易记录
   getWalletTransactions: async (timestamp = '') => {
-    const url = timestamp ? `/api/coach/wallet-transactions${timestamp}` : '/api/coach/wallet-transactions';
+    const url = timestamp ? `/coach/wallet-transactions${timestamp}` : '/coach/wallet-transactions';
     const res = await api.get(url);
     return res.data;
   },
 
   // 获取教练的钱包余额
   getWalletBalance: async (timestamp = '') => {
-    const url = timestamp ? `/api/coach/wallet-balance${timestamp}` : '/api/coach/wallet-balance';
+    const url = timestamp ? `/coach/wallet-balance${timestamp}` : '/coach/wallet-balance';
     const res = await api.get(url);
     return res.data;
   }
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Invitation.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.entity;\r\n\r\nimport jakarta.persistence.*;\r\nimport lombok.Data;\r\nimport java.time.LocalDateTime;\r\nimport java.util.UUID;\r\n\r\n@Entity\r\n@Data\r\n@Table(name = \"invitations\")\r\npublic class Invitation {\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Integer id;\r\n\r\n    private String email;\r\n    private String role;\r\n    private String token = UUID.randomUUID().toString();\r\n    private LocalDateTime createdAt = LocalDateTime.now();\r\n    private LocalDateTime expiresAt = LocalDateTime.now().plusDays(7);\r\n    private boolean used = false;\r\n\r\n    @ManyToOne\r\n    @JoinColumn(name = \"admin_id\")\r\n    private Admin createdBy;\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Invitation.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Invitation.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Invitation.java	(revision c178c1d9e80f6815b91226b2d10f391611dcb6b4)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Invitation.java	(date 1754953419868)
@@ -2,6 +2,7 @@
 
 import jakarta.persistence.*;
 import lombok.Data;
+import lombok.ToString;
 import java.time.LocalDateTime;
 import java.util.UUID;
 
@@ -22,5 +23,6 @@
 
     @ManyToOne
     @JoinColumn(name = "admin_id")
+    @ToString.Exclude
     private Admin createdBy;
 }
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Court.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.entity;\r\n\r\nimport com.fasterxml.jackson.annotation.JsonBackReference;\r\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\r\nimport jakarta.persistence.*;\r\nimport lombok.Data;\r\nimport java.time.LocalDateTime;\r\nimport com.fasterxml.jackson.annotation.JsonIgnore;\r\nimport java.util.List;\r\nimport com.pickleball_backend.pickleball.entity.ClassSession;\r\n\r\n@Entity\r\n@Data\r\n@Table(name = \"court\")\r\npublic class Court {\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Integer id;\r\n\r\n    private String name;\r\n    private String location;\r\n    private String status;\r\n\r\n    @Column(name = \"opening_time\")\r\n    private String openingTime;\r\n\r\n    @Column(name = \"closing_time\")\r\n    private String closingTime;\r\n\r\n    @Column(name = \"operating_days\")\r\n    private String operatingDays;\r\n\r\n    @Column(name = \"is_archived\")\r\n    private Boolean isArchived = false;\r\n\r\n    @Column(name = \"archive_timestamp\")\r\n    private LocalDateTime archiveTimestamp;\r\n\r\n    @Column(name = \"peak_hourly_price\")\r\n    private Double peakHourlyPrice;\r\n\r\n    @Column(name = \"off_peak_hourly_price\")\r\n    private Double offPeakHourlyPrice;\r\n\r\n    @Column(name = \"daily_price\")\r\n    private Double dailyPrice;\r\n\r\n    @Column(name = \"peak_start_time\")\r\n    private String peakStartTime;\r\n\r\n    @Column(name = \"peak_end_time\")\r\n    private String peakEndTime;\r\n\r\n    @ManyToOne\r\n    @JoinColumn(name = \"venue_id\")\r\n    @JsonIgnoreProperties(\"courts\")  // 只忽略 courts，讓 venue 的基本信息能傳遞\r\n    private Venue venue;\r\n\r\n    @OneToMany(mappedBy = \"court\", cascade = CascadeType.ALL)\r\n    @JsonIgnore\r\n    private List<ClassSession> sessions;\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Court.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Court.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Court.java	(revision c178c1d9e80f6815b91226b2d10f391611dcb6b4)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Court.java	(date 1754952962383)
@@ -4,6 +4,7 @@
 import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
 import jakarta.persistence.*;
 import lombok.Data;
+import lombok.ToString;
 import java.time.LocalDateTime;
 import com.fasterxml.jackson.annotation.JsonIgnore;
 import java.util.List;
@@ -54,6 +55,7 @@
     @ManyToOne
     @JoinColumn(name = "venue_id")
     @JsonIgnoreProperties("courts")  // 只忽略 courts，讓 venue 的基本信息能傳遞
+    @ToString.Exclude
     private Venue venue;
 
     @OneToMany(mappedBy = "court", cascade = CascadeType.ALL)
Index: pickleball-frontend/src/components/messaging/FriendList.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/components/friends/FriendList.jsx\r\nimport React, { useState, useEffect } from 'react';\r\nimport { \r\n  List, ListItem, ListItemAvatar, Avatar, \r\n  ListItemText, Typography, Box \r\n} from '@mui/material';\r\nimport friendService from '../../service/FriendService';\r\nimport { useTheme, alpha } from '@mui/material/styles';\r\n\r\nexport default function FriendList({ onSelectFriend }) {\r\n  const theme = useTheme();\r\n  const [friends, setFriends] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchFriends = async () => {\r\n      try {\r\n        const data = await friendService.getFriends();\r\n        console.log('API getFriends result:', data); // Debug: log the API response\r\n        setFriends(Array.isArray(data) ? data : []); // Defensive: always set an array\r\n      } catch (error) {\r\n        console.error('Failed to fetch friends', error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    fetchFriends();\r\n  }, []);\r\n\r\n  if (loading) return <Typography>Loading friends...</Typography>;\r\n\r\n  return (\r\n    <Box>\r\n      <Typography variant=\"h6\" sx={{ mb: 2, color: theme.palette.text.primary, fontWeight: 700 }}>Your Friends</Typography>\r\n      {friends.length === 0 ? (\r\n        <Box sx={{ textAlign: 'center', py: 6, color: theme.palette.text.secondary }}>\r\n          <Typography variant=\"body1\">No friends yet</Typography>\r\n        </Box>\r\n      ) : (\r\n        <List>\r\n          {(Array.isArray(friends) ? friends : []).map(friend => (\r\n            <ListItem\r\n              key={friend.id}\r\n              button\r\n              onClick={() => onSelectFriend(friend)}\r\n              sx={{\r\n                borderRadius: 2,\r\n                mb: 1,\r\n                transition: 'background 0.2s',\r\n                '&:hover': {\r\n                  background: alpha(theme.palette.primary.main, 0.08)\r\n                }\r\n              }}\r\n            >\r\n              <ListItemAvatar>\r\n                <Avatar src={friend.profileImage} sx={{ boxShadow: theme.shadows[2] }} />\r\n              </ListItemAvatar>\r\n              <ListItemText\r\n                primary={<Typography sx={{ fontWeight: 600, color: theme.palette.text.primary }}>{friend.name}</Typography>}\r\n                secondary={<Typography variant=\"caption\" sx={{ color: theme.palette.text.secondary }}>{`@${friend.username}`}</Typography>}\r\n              />\r\n            </ListItem>\r\n          ))}\r\n        </List>\r\n      )}\r\n    </Box>\r\n  );\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball-frontend/src/components/messaging/FriendList.jsx b/pickleball-frontend/src/components/messaging/FriendList.jsx
--- a/pickleball-frontend/src/components/messaging/FriendList.jsx	(revision c178c1d9e80f6815b91226b2d10f391611dcb6b4)
+++ b/pickleball-frontend/src/components/messaging/FriendList.jsx	(date 1754923445498)
@@ -2,15 +2,45 @@
 import React, { useState, useEffect } from 'react';
 import { 
   List, ListItem, ListItemAvatar, Avatar, 
-  ListItemText, Typography, Box 
+  ListItemText, Typography, Box, IconButton 
 } from '@mui/material';
 import friendService from '../../service/FriendService';
 import { useTheme, alpha } from '@mui/material/styles';
+// Removed status dot icon
+import MoreVertIcon from '@mui/icons-material/MoreVert';
 
-export default function FriendList({ onSelectFriend }) {
+export default function FriendList({ onSelectFriend, selectedConversation, searchQuery = '' }) {
   const theme = useTheme();
   const [friends, setFriends] = useState([]);
   const [loading, setLoading] = useState(true);
+  // Removed online/offline status tracking
+  const [unreadCounts, setUnreadCounts] = useState({}); // Track unread message counts
+
+  // Helper function to safely get display name
+  const getDisplayName = (friend) => {
+    if (!friend) return '';
+    
+    try {
+      const name = friend.name || friend.username || friend.email || '';
+      return typeof name === 'string' ? name : String(name);
+    } catch (error) {
+      console.error('Error getting display name:', error, friend);
+      return '';
+    }
+  };
+
+  // Helper function to safely get username
+  const getUsername = (friend) => {
+    if (!friend) return '';
+    
+    try {
+      const username = friend.username || friend.email || '';
+      return typeof username === 'string' ? username : String(username);
+    } catch (error) {
+      console.error('Error getting username:', error, friend);
+      return '';
+    }
+  };
 
   useEffect(() => {
     const fetchFriends = async () => {
@@ -18,6 +48,13 @@
         const data = await friendService.getFriends();
         console.log('API getFriends result:', data); // Debug: log the API response
         setFriends(Array.isArray(data) ? data : []); // Defensive: always set an array
+        
+        // Initialize unread counts only
+        const initialUnreadCounts = {};
+        data.forEach(friend => {
+          initialUnreadCounts[friend.id] = Math.floor(Math.random() * 3); // Random unread count for demo
+        });
+        setUnreadCounts(initialUnreadCounts);
       } catch (error) {
         console.error('Failed to fetch friends', error);
       } finally {
@@ -27,42 +64,138 @@
     fetchFriends();
   }, []);
 
-  if (loading) return <Typography>Loading friends...</Typography>;
+  // Removed toggle online status
+
+  // Clear unread messages for a friend
+  const clearUnreadMessages = (friendId) => {
+    setUnreadCounts(prev => ({
+      ...prev,
+      [friendId]: 0
+    }));
+  };
 
-  return (
-    <Box>
-      <Typography variant="h6" sx={{ mb: 2, color: theme.palette.text.primary, fontWeight: 700 }}>Your Friends</Typography>
-      {friends.length === 0 ? (
-        <Box sx={{ textAlign: 'center', py: 6, color: theme.palette.text.secondary }}>
-          <Typography variant="body1">No friends yet</Typography>
-        </Box>
-      ) : (
-        <List>
-          {(Array.isArray(friends) ? friends : []).map(friend => (
-            <ListItem
-              key={friend.id}
-              button
-              onClick={() => onSelectFriend(friend)}
-              sx={{
-                borderRadius: 2,
-                mb: 1,
-                transition: 'background 0.2s',
-                '&:hover': {
-                  background: alpha(theme.palette.primary.main, 0.08)
-                }
+  // Filter friends based on search query
+  const filteredFriends = friends.filter(friend => 
+    searchQuery === '' || 
+    getDisplayName(friend).toLowerCase().includes(searchQuery.toLowerCase()) ||
+    getUsername(friend).toLowerCase().includes(searchQuery.toLowerCase())
+  );
+
+  if (loading) return (
+    <Box sx={{ p: 2, textAlign: 'center' }}>
+      <Typography variant="body2" sx={{ color: theme.palette.text.secondary }}>
+        Loading friends...
+      </Typography>
+    </Box>
+  );
+
+  if (filteredFriends.length === 0) {
+    return (
+      <Box sx={{ 
+        p: 3, 
+        textAlign: 'center', 
+        color: theme.palette.text.secondary 
+      }}>
+        <Typography variant="body2" sx={{ mb: 1 }}>
+          {searchQuery ? 'No friends found' : 'No friends yet'}
+        </Typography>
+        <Typography variant="caption">
+          {searchQuery ? 'Try a different search term' : 'Start connecting with other players!'}
+        </Typography>
+      </Box>
+    );
+  }
+
+  return (
+    <List sx={{ p: 0 }}>
+      {filteredFriends.map((friend, index) => (
+        <ListItem
+          key={friend.id}
+          button
+          onClick={() => onSelectFriend(friend)}
+          sx={{
+            px: 2,
+            py: 1.5,
+            borderBottom: index < filteredFriends.length - 1 ? `1px solid ${alpha(theme.palette.divider, 0.1)}` : 'none',
+            transition: 'background 0.2s',
+            background: selectedConversation?.id === friend.id ? alpha(theme.palette.primary.main, 0.1) : 'transparent',
+            '&:hover': {
+              background: alpha(theme.palette.primary.main, 0.08)
+            }
+          }}
+        >
+          <ListItemAvatar sx={{ minWidth: 48 }}>
+            <Avatar 
+              src={friend.profileImage} 
+              sx={{ 
+                width: 40, 
+                height: 40,
+                boxShadow: theme.shadows[2]
               }}
             >
-              <ListItemAvatar>
-                <Avatar src={friend.profileImage} sx={{ boxShadow: theme.shadows[2] }} />
-              </ListItemAvatar>
-              <ListItemText
-                primary={<Typography sx={{ fontWeight: 600, color: theme.palette.text.primary }}>{friend.name}</Typography>}
-                secondary={<Typography variant="caption" sx={{ color: theme.palette.text.secondary }}>{`@${friend.username}`}</Typography>}
-              />
-            </ListItem>
-          ))}
-        </List>
-      )}
-    </Box>
+              {(getDisplayName(friend) || 'F').substring(0, 2).toUpperCase()}
+            </Avatar>
+          </ListItemAvatar>
+          <ListItemText
+            primary={
+              <Typography 
+                variant="body2" 
+                sx={{ 
+                  fontWeight: 600, 
+                  color: theme.palette.text.primary,
+                  fontSize: '0.9rem'
+                }}
+              >
+                {getDisplayName(friend)}
+              </Typography>
+            }
+            secondary={
+              <Typography 
+                variant="caption" 
+                sx={{ 
+                  color: theme.palette.text.secondary,
+                  fontSize: '0.75rem'
+                }}
+              >
+                {`@${getUsername(friend)}`}
+              </Typography>
+            }
+          />
+          <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'flex-end' }}>
+            <Typography 
+              variant="caption" 
+              sx={{ 
+                color: theme.palette.text.secondary,
+                fontSize: '0.7rem',
+                mb: 0.5
+              }}
+            >
+              {new Date().toLocaleTimeString('en-GB', { hour: '2-digit', minute: '2-digit' })}
+            </Typography>
+            {/* Removed unread indicator dot */}
+          </Box>
+          
+          {/* Friend Actions Menu */}
+          <IconButton
+            size="small"
+            onClick={(e) => {
+              e.stopPropagation();
+              // Clear unread if present (status feature removed)
+              if (unreadCounts[friend.id] > 0) {
+                clearUnreadMessages(friend.id);
+              }
+            }}
+            sx={{
+              color: theme.palette.text.secondary,
+              '&:hover': {
+                color: theme.palette.primary.main,
+              }
+            }}
+          >
+            <MoreVertIcon sx={{ fontSize: 16 }} />
+          </IconButton>
+        </ListItem>
+      ))}
+    </List>
   );
 }
\ No newline at end of file
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Feedback.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.entity;\r\n\r\nimport jakarta.persistence.*;\r\nimport lombok.Data;\r\nimport java.time.LocalDateTime;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n@Entity\r\n@Data\r\n@Table(name = \"feedback\")\r\npublic class Feedback {\r\n\r\n    public enum TargetType {\r\n        COURT, EVENT, COACH\r\n    }\r\n\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Integer id;\r\n\r\n    @Enumerated(EnumType.STRING)\r\n    private TargetType targetType;\r\n\r\n    private Integer targetId; // ID of court, event, or coach\r\n\r\n    private Integer rating; // 1-5\r\n\r\n    private String review;\r\n\r\n    @ManyToOne\r\n    @JoinColumn(name = \"user_id\", referencedColumnName = \"id\")\r\n    private User user;\r\n\r\n    @ManyToOne\r\n    @JoinColumn(name = \"booking_id\", referencedColumnName = \"id\")\r\n    private Booking booking; // 新增：关联到具体的预订\r\n\r\n    private Integer classSessionId; // 新增：关联到具体的课程\r\n\r\n    private LocalDateTime createdAt = LocalDateTime.now();\r\n\r\n    @ElementCollection\r\n    private List<String> tags = new ArrayList<>();\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Feedback.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Feedback.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Feedback.java	(revision c178c1d9e80f6815b91226b2d10f391611dcb6b4)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Feedback.java	(date 1754953262347)
@@ -2,6 +2,7 @@
 
 import jakarta.persistence.*;
 import lombok.Data;
+import lombok.ToString;
 import java.time.LocalDateTime;
 import java.util.ArrayList;
 import java.util.List;
@@ -30,10 +31,12 @@
 
     @ManyToOne
     @JoinColumn(name = "user_id", referencedColumnName = "id")
+    @ToString.Exclude
     private User user;
 
     @ManyToOne
     @JoinColumn(name = "booking_id", referencedColumnName = "id")
+    @ToString.Exclude
     private Booking booking; // 新增：关联到具体的预订
 
     private Integer classSessionId; // 新增：关联到具体的课程
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/FriendRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.entity;\r\n\r\nimport jakarta.persistence.*;\r\nimport lombok.Data;\r\nimport java.time.LocalDateTime;\r\n\r\n@Entity\r\n@Data\r\n@Table(name = \"friendrequest\")\r\npublic class FriendRequest {\r\n    public enum Status {\r\n        PENDING, ACCEPTED, DECLINED\r\n    }\r\n\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Long id;\r\n\r\n    @ManyToOne(fetch = FetchType.LAZY)\r\n    @JoinColumn(name = \"sender_id\", nullable = false)\r\n    private User sender;\r\n\r\n    @ManyToOne(fetch = FetchType.LAZY)\r\n    @JoinColumn(name = \"receiver_id\", nullable = false)\r\n    private User receiver;\r\n\r\n    @Enumerated(EnumType.STRING)\r\n    private Status status = Status.PENDING;\r\n\r\n    private LocalDateTime createdAt = LocalDateTime.now();\r\n    private LocalDateTime updatedAt;\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/FriendRequest.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/FriendRequest.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/FriendRequest.java	(revision c178c1d9e80f6815b91226b2d10f391611dcb6b4)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/FriendRequest.java	(date 1754953267179)
@@ -2,6 +2,7 @@
 
 import jakarta.persistence.*;
 import lombok.Data;
+import lombok.ToString;
 import java.time.LocalDateTime;
 
 @Entity
@@ -18,10 +19,12 @@
 
     @ManyToOne(fetch = FetchType.LAZY)
     @JoinColumn(name = "sender_id", nullable = false)
+    @ToString.Exclude
     private User sender;
 
     @ManyToOne(fetch = FetchType.LAZY)
     @JoinColumn(name = "receiver_id", nullable = false)
+    @ToString.Exclude
     private User receiver;
 
     @Enumerated(EnumType.STRING)
Index: pickleball-frontend/src/components/messaging/FriendRequestList.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/components/friends/FriendRequestList.jsx\r\nimport React, { useState, useEffect } from 'react';\r\nimport { \r\n  List, ListItem, ListItemAvatar, Avatar, \r\n  ListItemText, Button, Typography, Box \r\n} from '@mui/material';\r\nimport friendService from '../../service/FriendService';\r\nimport { useTheme, alpha } from '@mui/material/styles';\r\n\r\nexport default function FriendRequestList() {\r\n  const theme = useTheme();\r\n  const [requests, setRequests] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchRequests = async () => {\r\n      try {\r\n        const data = await friendService.getPendingRequests();\r\n        setRequests(data);\r\n      } catch (error) {\r\n        console.error('Failed to fetch friend requests', error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    fetchRequests();\r\n  }, []);\r\n\r\n  const handleAccept = async (id) => {\r\n    try {\r\n      await friendService.acceptRequest(id);\r\n      setRequests(requests.filter(req => req.id !== id));\r\n    } catch (error) {\r\n      console.error('Failed to accept request', error);\r\n    }\r\n  };\r\n\r\n  const handleDecline = async (id) => {\r\n    try {\r\n      await friendService.declineRequest(id);\r\n      setRequests(requests.filter(req => req.id !== id));\r\n    } catch (error) {\r\n      console.error('Failed to decline request', error);\r\n    }\r\n  };\r\n\r\n  if (loading) return <Typography>Loading requests...</Typography>;\r\n\r\n  return (\r\n    <Box>\r\n      <Typography variant=\"h6\" sx={{ mb: 2, color: theme.palette.text.primary, fontWeight: 700 }}>Friend Requests</Typography>\r\n      {requests.length === 0 ? (\r\n        <Box sx={{ textAlign: 'center', py: 6, color: theme.palette.text.secondary }}>\r\n          <Typography variant=\"body1\">No pending requests</Typography>\r\n        </Box>\r\n      ) : (\r\n        <List>\r\n          {requests.map(request => (\r\n            <ListItem\r\n              key={request.id}\r\n              sx={{\r\n                borderRadius: 2,\r\n                mb: 1,\r\n                transition: 'background 0.2s',\r\n                '&:hover': {\r\n                  background: alpha(theme.palette.primary.main, 0.08)\r\n                }\r\n              }}\r\n            >\r\n              <ListItemAvatar>\r\n                <Avatar src={request.senderProfileImage} sx={{ boxShadow: theme.shadows[2] }} />\r\n              </ListItemAvatar>\r\n              <ListItemText\r\n                primary={<Typography sx={{ fontWeight: 600, color: theme.palette.text.primary }}>{request.senderName}</Typography>}\r\n                secondary={<Typography variant=\"caption\" sx={{ color: theme.palette.text.secondary }}>{`@${request.senderUsername}`}</Typography>}\r\n              />\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                sx={{\r\n                  mr: 1,\r\n                  borderRadius: 3,\r\n                  boxShadow: theme.shadows[2],\r\n                  fontWeight: 600,\r\n                  textTransform: 'none',\r\n                  '&:hover': { boxShadow: theme.shadows[4] }\r\n                }}\r\n                onClick={() => handleAccept(request.id)}\r\n              >\r\n                Accept\r\n              </Button>\r\n              <Button\r\n                variant=\"outlined\"\r\n                color=\"secondary\"\r\n                sx={{\r\n                  borderRadius: 3,\r\n                  fontWeight: 600,\r\n                  textTransform: 'none',\r\n                  '&:hover': { background: alpha(theme.palette.secondary.main, 0.08) }\r\n                }}\r\n                onClick={() => handleDecline(request.id)}\r\n              >\r\n                Decline\r\n              </Button>\r\n            </ListItem>\r\n          ))}\r\n        </List>\r\n      )}\r\n    </Box>\r\n  );\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball-frontend/src/components/messaging/FriendRequestList.jsx b/pickleball-frontend/src/components/messaging/FriendRequestList.jsx
--- a/pickleball-frontend/src/components/messaging/FriendRequestList.jsx	(revision c178c1d9e80f6815b91226b2d10f391611dcb6b4)
+++ b/pickleball-frontend/src/components/messaging/FriendRequestList.jsx	(date 1754912510755)
@@ -2,10 +2,11 @@
 import React, { useState, useEffect } from 'react';
 import { 
   List, ListItem, ListItemAvatar, Avatar, 
-  ListItemText, Button, Typography, Box 
+  ListItemText, Button, Typography, Box, Badge 
 } from '@mui/material';
 import friendService from '../../service/FriendService';
 import { useTheme, alpha } from '@mui/material/styles';
+import FiberManualRecordIcon from '@mui/icons-material/FiberManualRecord';
 
 export default function FriendRequestList() {
   const theme = useTheme();
@@ -44,68 +45,139 @@
     }
   };
 
-  if (loading) return <Typography>Loading requests...</Typography>;
+  if (loading) {
+    return (
+      <Box sx={{ p: 2, textAlign: 'center' }}>
+        <Typography variant="body2" sx={{ color: theme.palette.text.secondary }}>
+          Loading requests...
+        </Typography>
+      </Box>
+    );
+  }
 
-  return (
-    <Box>
-      <Typography variant="h6" sx={{ mb: 2, color: theme.palette.text.primary, fontWeight: 700 }}>Friend Requests</Typography>
-      {requests.length === 0 ? (
-        <Box sx={{ textAlign: 'center', py: 6, color: theme.palette.text.secondary }}>
-          <Typography variant="body1">No pending requests</Typography>
-        </Box>
-      ) : (
-        <List>
-          {requests.map(request => (
-            <ListItem
-              key={request.id}
-              sx={{
-                borderRadius: 2,
-                mb: 1,
-                transition: 'background 0.2s',
-                '&:hover': {
-                  background: alpha(theme.palette.primary.main, 0.08)
-                }
-              }}
+  if (requests.length === 0) {
+    return (
+      <Box sx={{ 
+        p: 3, 
+        textAlign: 'center', 
+        color: theme.palette.text.secondary 
+      }}>
+        <Typography variant="body2" sx={{ mb: 1 }}>
+          No pending requests
+        </Typography>
+        <Typography variant="caption">
+          When someone sends you a friend request, it will appear here.
+        </Typography>
+      </Box>
+    );
+  }
+
+  return (
+    <List sx={{ p: 0 }}>
+      {requests.map((request, index) => (
+        <ListItem
+          key={request.id}
+          sx={{
+            px: 2,
+            py: 1.5,
+            borderBottom: index < requests.length - 1 ? `1px solid ${alpha(theme.palette.divider, 0.1)}` : 'none',
+            transition: 'background 0.2s',
+            '&:hover': {
+              background: alpha(theme.palette.primary.main, 0.08)
+            }
+          }}
+        >
+          <ListItemAvatar sx={{ minWidth: 48 }}>
+            <Badge
+              overlap="circular"
+              anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}
+              badgeContent={
+                <FiberManualRecordIcon 
+                  sx={{ 
+                    fontSize: 12, 
+                    color: theme.palette.warning.main 
+                  }} 
+                />
+              }
             >
-              <ListItemAvatar>
-                <Avatar src={request.senderProfileImage} sx={{ boxShadow: theme.shadows[2] }} />
-              </ListItemAvatar>
-              <ListItemText
-                primary={<Typography sx={{ fontWeight: 600, color: theme.palette.text.primary }}>{request.senderName}</Typography>}
-                secondary={<Typography variant="caption" sx={{ color: theme.palette.text.secondary }}>{`@${request.senderUsername}`}</Typography>}
-              />
-              <Button
-                variant="contained"
-                color="primary"
-                sx={{
-                  mr: 1,
-                  borderRadius: 3,
-                  boxShadow: theme.shadows[2],
-                  fontWeight: 600,
-                  textTransform: 'none',
-                  '&:hover': { boxShadow: theme.shadows[4] }
-                }}
-                onClick={() => handleAccept(request.id)}
-              >
-                Accept
-              </Button>
-              <Button
-                variant="outlined"
-                color="secondary"
-                sx={{
-                  borderRadius: 3,
-                  fontWeight: 600,
-                  textTransform: 'none',
-                  '&:hover': { background: alpha(theme.palette.secondary.main, 0.08) }
-                }}
-                onClick={() => handleDecline(request.id)}
-              >
-                Decline
-              </Button>
-            </ListItem>
-          ))}
-        </List>
-      )}
-    </Box>
+              <Avatar 
+                src={request.senderProfileImage} 
+                sx={{ 
+                  width: 40, 
+                  height: 40,
+                  boxShadow: theme.shadows[2]
+                }}
+              >
+                {(request.senderName || request.senderUsername || 'R').substring(0, 2).toUpperCase()}
+              </Avatar>
+            </Badge>
+          </ListItemAvatar>
+          <ListItemText
+            primary={
+              <Typography 
+                variant="body2" 
+                sx={{ 
+                  fontWeight: 600, 
+                  color: theme.palette.text.primary,
+                  fontSize: '0.9rem'
+                }}
+              >
+                {request.senderName}
+              </Typography>
+            }
+            secondary={
+              <Typography 
+                variant="caption" 
+                sx={{ 
+                  color: theme.palette.text.secondary,
+                  fontSize: '0.75rem'
+                }}
+              >
+                {`@${request.senderUsername}`}
+              </Typography>
+            }
+          />
+          <Box sx={{ display: 'flex', gap: 1 }}>
+            <Button
+              variant="contained"
+              color="primary"
+              sx={{
+                borderRadius: 3,
+                boxShadow: theme.shadows[2],
+                fontWeight: 600,
+                textTransform: 'none',
+                fontSize: '0.8rem',
+                minWidth: 80,
+                height: 32,
+                '&:hover': { 
+                  boxShadow: theme.shadows[4] 
+                }
+              }}
+              onClick={() => handleAccept(request.id)}
+            >
+              Accept
+            </Button>
+            <Button
+              variant="outlined"
+              color="secondary"
+              sx={{
+                borderRadius: 3,
+                fontWeight: 600,
+                textTransform: 'none',
+                fontSize: '0.8rem',
+                minWidth: 80,
+                height: 32,
+                '&:hover': { 
+                  background: alpha(theme.palette.secondary.main, 0.08) 
+                }
+              }}
+              onClick={() => handleDecline(request.id)}
+            >
+              Decline
+            </Button>
+          </Box>
+        </ListItem>
+      ))}
+    </List>
   );
 }
\ No newline at end of file
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Venue.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.entity;\r\n\r\nimport com.fasterxml.jackson.annotation.JsonIgnore;\r\nimport com.fasterxml.jackson.annotation.JsonManagedReference;\r\nimport jakarta.persistence.*;\r\nimport lombok.Data;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n@Entity\r\n@Data\r\n@Table(name = \"venue\")\r\npublic class Venue {\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Integer id;\r\n\r\n    private String name;\r\n\r\n    private String location;\r\n\r\n    @Column(name = \"state\", length = 100)\r\n    private String state;\r\n\r\n    private String description;\r\n\r\n    private Boolean isArchived = false;\r\n\r\n    @OneToMany(mappedBy = \"venue\", cascade = CascadeType.ALL)\r\n    @JsonIgnore\r\n    private List<Court> courts = new ArrayList<>();}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Venue.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Venue.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Venue.java	(revision c178c1d9e80f6815b91226b2d10f391611dcb6b4)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Venue.java	(date 1754952962371)
@@ -4,6 +4,7 @@
 import com.fasterxml.jackson.annotation.JsonManagedReference;
 import jakarta.persistence.*;
 import lombok.Data;
+import lombok.ToString;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -29,5 +30,6 @@
 
     @OneToMany(mappedBy = "venue", cascade = CascadeType.ALL)
     @JsonIgnore
+    @ToString.Exclude
     private List<Court> courts = new ArrayList<>();}
 
Index: pickleball-frontend/src/components/messaging/UserSearch.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/components/friends/UserSearch.jsx\r\nimport React, { useState, useEffect } from 'react';\r\nimport { \r\n  Box, TextField, Button, List, ListItem, \r\n  ListItemAvatar, Avatar, ListItemText, Typography, useTheme, alpha \r\n} from '@mui/material';\r\nimport { Alert } from '@mui/material';\r\nimport friendService from '../../service/FriendService';\r\nimport UserService from '../../service/UserService';\r\n\r\nexport default function UserSearch() {\r\n  const theme = useTheme();\r\n  const [query, setQuery] = useState('');\r\n  const [results, setResults] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState('');\r\n  const [success, setSuccess] = useState('');\r\n  const [friends, setFriends] = useState([]);\r\n\r\n  // Get current user's username from localStorage\r\n  const currentUser = JSON.parse(localStorage.getItem('user'));\r\n  const currentUsername = currentUser?.username;\r\n\r\n  useEffect(() => {\r\n    // Fetch the current user's friends when component mounts\r\n    friendService.getFriends().then(setFriends);\r\n  }, []);\r\n\r\n  const handleSearch = async () => {\r\n    if (!query.trim()) return;\r\n    setLoading(true);\r\n    setError('');\r\n    setSuccess('');\r\n    try {\r\n      // Call backend user search\r\n      const users = await UserService.searchUsers(query);\r\n      setResults(users);\r\n    } catch (error) {\r\n      console.error('Search failed', error);\r\n      let msg = 'Failed to search users';\r\n      if (error.response && error.response.data) {\r\n        // If backend sends a string message\r\n        msg = typeof error.response.data === 'string'\r\n          ? error.response.data\r\n          : (error.response.data.message || msg);\r\n      } else if (error.message) {\r\n        msg = error.message;\r\n      }\r\n      setError(msg);\r\n      setTimeout(() => setError(''), 3000);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleAddFriend = async (username) => {\r\n    setError('');\r\n    setSuccess('');\r\n    setLoading(true);\r\n    try {\r\n      await friendService.sendRequest(username);\r\n      setResults(results.filter(user => user.username !== username));\r\n      // Optionally show a success message\r\n      setSuccess('Friend request already sent');\r\n      setTimeout(() => setSuccess(''), 3000);\r\n    } catch (error) {\r\n      console.error('Failed to send request', error);\r\n      console.log('error.response', error.response);\r\n      console.log('error.response.data', error.response?.data);\r\n      let msg = 'Failed to send request';\r\n      if (error.response && error.response.data) {\r\n        if (typeof error.response.data === 'string') {\r\n          msg = error.response.data;\r\n        } else if (error.response.data.message) {\r\n          msg = error.response.data.message;\r\n        } else {\r\n          msg = JSON.stringify(error.response.data);\r\n        }\r\n      } else if (error.message) {\r\n        msg = error.message;\r\n      }\r\n      setError(msg);\r\n      setTimeout(() => setError(''), 3000);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box>\r\n      <Box sx={{ display: 'flex', mb: 2 }}>\r\n        <TextField\r\n          fullWidth\r\n          label=\"Search users\"\r\n          value={query}\r\n          onChange={(e) => setQuery(e.target.value)}\r\n          onKeyPress={(e) => e.key === 'Enter' && handleSearch()}\r\n          disabled={loading}\r\n          sx={{\r\n            bgcolor: theme.palette.background.paper,\r\n            borderRadius: 2,\r\n            boxShadow: theme.shadows[1],\r\n            mr: 1\r\n          }}\r\n        />\r\n        <Button\r\n          variant=\"contained\"\r\n          sx={{\r\n            borderRadius: '50%',\r\n            minWidth: 48,\r\n            height: 48,\r\n            background: `linear-gradient(135deg, ${theme.palette.primary.main}, ${theme.palette.primary.light})`,\r\n            boxShadow: theme.shadows[2],\r\n            '&:hover': {\r\n              background: `linear-gradient(135deg, ${theme.palette.primary.dark}, ${theme.palette.primary.main})`\r\n            }\r\n          }}\r\n          onClick={handleSearch}\r\n          disabled={!query.trim() || loading}\r\n        >\r\n          {loading ? '...' : 'Go'}\r\n        </Button>\r\n      </Box>\r\n      {error && <Alert severity=\"error\" sx={{ mb: 2, borderRadius: 2 }}>{error}</Alert>}\r\n      {success && <Alert severity=\"success\" sx={{ mb: 2, borderRadius: 2 }}>{success}</Alert>}\r\n      \r\n      {loading && <Typography>Searching...</Typography>}\r\n      \r\n      {results.length > 0 && (\r\n        <List>\r\n          {results.map(user => {\r\n            const isOwn = user.username === currentUsername;\r\n            const isFriend = friends.some(f => f.username === user.username);\r\n            return (\r\n              <ListItem\r\n                key={user.id}\r\n                sx={{\r\n                  borderRadius: 2,\r\n                  mb: 1,\r\n                  transition: 'background 0.2s',\r\n                  '&:hover': {\r\n                    background: alpha(theme.palette.primary.main, 0.08)\r\n                  }\r\n                }}\r\n              >\r\n                <ListItemAvatar>\r\n                  <Avatar src={user.profileImage} sx={{ boxShadow: theme.shadows[2] }} />\r\n                </ListItemAvatar>\r\n                <ListItemText\r\n                  primary={<Typography sx={{ fontWeight: 600, color: theme.palette.text.primary }}>{user.name}</Typography>}\r\n                  secondary={<Typography variant=\"caption\" sx={{ color: theme.palette.text.secondary }}>{`@${user.username}`}</Typography>}\r\n                />\r\n                <Button\r\n                  variant=\"contained\"\r\n                  sx={{\r\n                    borderRadius: 3,\r\n                    fontWeight: 600,\r\n                    minWidth: 110,\r\n                    ml: 1,\r\n                    background: isOwn || isFriend ? theme.palette.grey[300] : `linear-gradient(135deg, ${theme.palette.primary.main}, ${theme.palette.primary.light})`,\r\n                    color: isOwn || isFriend ? theme.palette.text.disabled : theme.palette.common.white,\r\n                    boxShadow: theme.shadows[1],\r\n                    '&:hover': {\r\n                      background: isOwn || isFriend ? theme.palette.grey[300] : `linear-gradient(135deg, ${theme.palette.primary.dark}, ${theme.palette.primary.main})`\r\n                    }\r\n                  }}\r\n                  disabled={loading || isFriend || isOwn}\r\n                  onClick={() => !isOwn && handleAddFriend(user.username)}\r\n                >\r\n                  {isOwn\r\n                    ? \"Own\"\r\n                    : isFriend\r\n                      ? \"Friend\"\r\n                      : (loading ? '...' : 'Add')}\r\n                </Button>\r\n              </ListItem>\r\n            );\r\n          })}\r\n        </List>\r\n      )}\r\n      \r\n      {!loading && results.length === 0 && query && (\r\n        <Typography>No users found</Typography>\r\n      )}\r\n    </Box>\r\n  );\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball-frontend/src/components/messaging/UserSearch.jsx b/pickleball-frontend/src/components/messaging/UserSearch.jsx
--- a/pickleball-frontend/src/components/messaging/UserSearch.jsx	(revision c178c1d9e80f6815b91226b2d10f391611dcb6b4)
+++ b/pickleball-frontend/src/components/messaging/UserSearch.jsx	(date 1754916146629)
@@ -2,11 +2,13 @@
 import React, { useState, useEffect } from 'react';
 import { 
   Box, TextField, Button, List, ListItem, 
-  ListItemAvatar, Avatar, ListItemText, Typography, useTheme, alpha 
+  ListItemAvatar, Avatar, ListItemText, Typography, useTheme, alpha, Badge 
 } from '@mui/material';
 import { Alert } from '@mui/material';
 import friendService from '../../service/FriendService';
 import UserService from '../../service/UserService';
+import { useAuth } from '../../context/AuthContext';
+import FiberManualRecordIcon from '@mui/icons-material/FiberManualRecord';
 
 export default function UserSearch() {
   const theme = useTheme();
@@ -16,9 +18,7 @@
   const [error, setError] = useState('');
   const [success, setSuccess] = useState('');
   const [friends, setFriends] = useState([]);
-
-  // Get current user's username from localStorage
-  const currentUser = JSON.parse(localStorage.getItem('user'));
+  const { currentUser } = useAuth();
   const currentUsername = currentUser?.username;
 
   useEffect(() => {
@@ -87,8 +87,37 @@
   };
 
   return (
-    <Box>
-      <Box sx={{ display: 'flex', mb: 2 }}>
+    <Box sx={{ 
+      flex: 1, 
+      display: 'flex', 
+      flexDirection: 'column',
+      p: 3
+    }}>
+      <Box sx={{ mb: 3 }}>
+        <Typography 
+          variant="h5" 
+          sx={{ 
+            fontWeight: 600, 
+            color: theme.palette.text.primary,
+            mb: 2,
+            fontSize: '1.3rem'
+          }}
+        >
+          Find People
+        </Typography>
+        <Typography 
+          variant="body2" 
+          sx={{ 
+            color: theme.palette.text.secondary,
+            mb: 3,
+            fontSize: '0.85rem'
+          }}
+        >
+          Search for other players to connect with and start messaging.
+        </Typography>
+      </Box>
+
+      <Box sx={{ display: 'flex', mb: 3 }}>
         <TextField
           fullWidth
           label="Search users"
@@ -97,18 +126,24 @@
           onKeyPress={(e) => e.key === 'Enter' && handleSearch()}
           disabled={loading}
           sx={{
-            bgcolor: theme.palette.background.paper,
+            bgcolor: theme.palette.mode === 'dark' 
+              ? alpha(theme.palette.background.paper, 0.8)
+              : alpha(theme.palette.background.paper, 0.6),
             borderRadius: 2,
             boxShadow: theme.shadows[1],
-            mr: 1
+            mr: 1,
+            '& .MuiOutlinedInput-root': {
+              borderRadius: 2
+            }
           }}
         />
         <Button
           variant="contained"
           sx={{
-            borderRadius: '50%',
-            minWidth: 48,
-            height: 48,
+            borderRadius: 2,
+            minWidth: 80,
+            height: 56,
+            fontSize: '0.85rem',
             background: `linear-gradient(135deg, ${theme.palette.primary.main}, ${theme.palette.primary.light})`,
             boxShadow: theme.shadows[2],
             '&:hover': {
@@ -118,69 +153,140 @@
           onClick={handleSearch}
           disabled={!query.trim() || loading}
         >
-          {loading ? '...' : 'Go'}
+          {loading ? '...' : 'Search'}
         </Button>
       </Box>
+      
       {error && <Alert severity="error" sx={{ mb: 2, borderRadius: 2 }}>{error}</Alert>}
       {success && <Alert severity="success" sx={{ mb: 2, borderRadius: 2 }}>{success}</Alert>}
       
-      {loading && <Typography>Searching...</Typography>}
+      {loading && (
+        <Box sx={{ textAlign: 'center', py: 4 }}>
+          <Typography variant="body2" sx={{ color: theme.palette.text.secondary }}>
+            Searching...
+          </Typography>
+        </Box>
+      )}
       
       {results.length > 0 && (
-        <List>
-          {results.map(user => {
-            const isOwn = user.username === currentUsername;
-            const isFriend = friends.some(f => f.username === user.username);
-            return (
-              <ListItem
-                key={user.id}
-                sx={{
-                  borderRadius: 2,
-                  mb: 1,
-                  transition: 'background 0.2s',
-                  '&:hover': {
-                    background: alpha(theme.palette.primary.main, 0.08)
-                  }
-                }}
-              >
-                <ListItemAvatar>
-                  <Avatar src={user.profileImage} sx={{ boxShadow: theme.shadows[2] }} />
-                </ListItemAvatar>
-                <ListItemText
-                  primary={<Typography sx={{ fontWeight: 600, color: theme.palette.text.primary }}>{user.name}</Typography>}
-                  secondary={<Typography variant="caption" sx={{ color: theme.palette.text.secondary }}>{`@${user.username}`}</Typography>}
-                />
-                <Button
-                  variant="contained"
-                  sx={{
-                    borderRadius: 3,
-                    fontWeight: 600,
-                    minWidth: 110,
-                    ml: 1,
-                    background: isOwn || isFriend ? theme.palette.grey[300] : `linear-gradient(135deg, ${theme.palette.primary.main}, ${theme.palette.primary.light})`,
-                    color: isOwn || isFriend ? theme.palette.text.disabled : theme.palette.common.white,
-                    boxShadow: theme.shadows[1],
-                    '&:hover': {
-                      background: isOwn || isFriend ? theme.palette.grey[300] : `linear-gradient(135deg, ${theme.palette.primary.dark}, ${theme.palette.primary.main})`
-                    }
-                  }}
-                  disabled={loading || isFriend || isOwn}
-                  onClick={() => !isOwn && handleAddFriend(user.username)}
-                >
-                  {isOwn
-                    ? "Own"
-                    : isFriend
-                      ? "Friend"
-                      : (loading ? '...' : 'Add')}
-                </Button>
-              </ListItem>
-            );
-          })}
-        </List>
+        <Box sx={{ flex: 1, overflow: 'auto' }}>
+          <Typography 
+            variant="h6" 
+            sx={{ 
+              mb: 2, 
+              color: theme.palette.text.primary,
+              fontWeight: 600,
+              fontSize: '1.1rem'
+            }}
+          >
+            Search Results
+          </Typography>
+          <List sx={{ p: 0 }}>
+            {results.map((user, index) => {
+              const isOwn = user.username === currentUsername;
+              const isFriend = friends.some(f => f.username === user.username);
+              return (
+                <ListItem
+                  key={user.id}
+                  sx={{
+                    borderRadius: 2,
+                    mb: 1,
+                    transition: 'background 0.2s',
+                    background: theme.palette.mode === 'dark'
+                      ? alpha(theme.palette.background.paper, 0.8)
+                      : alpha(theme.palette.background.paper, 0.6),
+                    '&:hover': {
+                      background: alpha(theme.palette.primary.main, 0.08)
+                    }
+                  }}
+                >
+                  <ListItemAvatar sx={{ minWidth: 48 }}>
+                    <Badge
+                      overlap="circular"
+                      anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}
+                      badgeContent={
+                        <FiberManualRecordIcon 
+                          sx={{ 
+                            fontSize: 12, 
+                            color: theme.palette.success.main 
+                          }} 
+                        />
+                      }
+                    >
+                      <Avatar 
+                        src={user.profileImage} 
+                        sx={{ 
+                          width: 40, 
+                          height: 40,
+                          boxShadow: theme.shadows[2]
+                        }}
+                      >
+                        {(user.name || user.username || 'U').substring(0, 2).toUpperCase()}
+                      </Avatar>
+                    </Badge>
+                  </ListItemAvatar>
+                  <ListItemText
+                    primary={
+                      <Typography 
+                        variant="body2" 
+                        sx={{ 
+                          fontWeight: 600, 
+                          color: theme.palette.text.primary,
+                          fontSize: '0.8rem'
+                        }}
+                      >
+                        {user.name}
+                      </Typography>
+                    }
+                    secondary={
+                      <Typography 
+                        variant="caption" 
+                        sx={{ 
+                          color: theme.palette.text.secondary,
+                          fontSize: '0.7rem'
+                        }}
+                      >
+                        {`@${user.username}`}
+                      </Typography>
+                    }
+                  />
+                  <Button
+                    variant="contained"
+                    sx={{
+                      borderRadius: 3,
+                      fontWeight: 600,
+                      minWidth: 110,
+                      ml: 1,
+                      fontSize: '0.8rem',
+                      background: isOwn || isFriend ? theme.palette.grey[300] : `linear-gradient(135deg, ${theme.palette.primary.main}, ${theme.palette.primary.light})`,
+                      color: isOwn || isFriend ? theme.palette.text.disabled : theme.palette.common.white,
+                      boxShadow: theme.shadows[1],
+                      '&:hover': {
+                        background: isOwn || isFriend ? theme.palette.grey[300] : `linear-gradient(135deg, ${theme.palette.primary.dark}, ${theme.palette.primary.main})`
+                      }
+                    }}
+                    disabled={loading || isFriend || isOwn}
+                    onClick={() => !isOwn && handleAddFriend(user.username)}
+                  >
+                    {isOwn
+                      ? "Own"
+                      : isFriend
+                        ? "Friend"
+                        : (loading ? '...' : 'Add')}
+                  </Button>
+                </ListItem>
+              );
+            })}
+          </List>
+        </Box>
       )}
       
       {!loading && results.length === 0 && query && (
-        <Typography>No users found</Typography>
+        <Box sx={{ textAlign: 'center', py: 4 }}>
+          <Typography variant="body2" sx={{ color: theme.palette.text.secondary }}>
+            No users found
+          </Typography>
+        </Box>
       )}
     </Box>
   );
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/BookingSlot.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.entity;\r\n\r\nimport jakarta.persistence.*;\r\nimport lombok.Data;\r\nimport java.time.LocalDateTime;\r\n\r\n@Entity\r\n@Data\r\n@Table(name = \"bookingslot\", uniqueConstraints = {\r\n    @UniqueConstraint(columnNames = {\"booking_id\", \"slot_id\"}, name = \"uk_booking_slot\")\r\n})\r\npublic class BookingSlot {\r\n\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Integer id;\r\n\r\n    @ManyToOne\r\n    @JoinColumn(name = \"booking_id\", nullable = false)\r\n    private Booking booking;\r\n\r\n    @ManyToOne\r\n    @JoinColumn(name = \"slot_id\", nullable = false)\r\n    private Slot slot;\r\n\r\n    @Column(nullable = false)\r\n    private LocalDateTime timestamp = LocalDateTime.now();\r\n\r\n    @Column(nullable = false, length = 50)\r\n    private String status; // BOOKED, CANCELLED, COMPLETED\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/BookingSlot.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/BookingSlot.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/BookingSlot.java	(revision c178c1d9e80f6815b91226b2d10f391611dcb6b4)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/BookingSlot.java	(date 1754953213231)
@@ -2,6 +2,7 @@
 
 import jakarta.persistence.*;
 import lombok.Data;
+import lombok.ToString;
 import java.time.LocalDateTime;
 
 @Entity
@@ -17,10 +18,12 @@
 
     @ManyToOne
     @JoinColumn(name = "booking_id", nullable = false)
+    @ToString.Exclude
     private Booking booking;
 
     @ManyToOne
     @JoinColumn(name = "slot_id", nullable = false)
+    @ToString.Exclude
     private Slot slot;
 
     @Column(nullable = false)
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/EventRegistration.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.entity;\r\n\r\nimport jakarta.persistence.*;\r\nimport lombok.Data;\r\nimport java.time.LocalDateTime;\r\nimport java.io.Serializable;\r\n\r\n@Entity\r\n@Data\r\n@Table(name = \"eventregistration\")\r\npublic class EventRegistration {\r\n    @Id\r\n    @Column(name = \"registration_id\")\r\n    private Integer registrationId;\r\n\r\n    @Column(name = \"registration_date\")\r\n    private LocalDateTime registrationDate;\r\n\r\n    @Column(name = \"payment_status\")\r\n    private String paymentStatus;\r\n\r\n    @Column(name = \"fee_amount\")\r\n    private Double feeAmount;\r\n\r\n    @Column(name = \"status\")\r\n    private String status; // e.g., REGISTERED, CANCELLED\r\n\r\n    @ManyToOne\r\n    @JoinColumn(name = \"user_id\")\r\n    private User user;\r\n\r\n    @ManyToOne\r\n    @JoinColumn(name = \"event_id\")\r\n    private Event event;\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/EventRegistration.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/EventRegistration.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/EventRegistration.java	(revision c178c1d9e80f6815b91226b2d10f391611dcb6b4)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/EventRegistration.java	(date 1754953204038)
@@ -2,6 +2,7 @@
 
 import jakarta.persistence.*;
 import lombok.Data;
+import lombok.ToString;
 import java.time.LocalDateTime;
 import java.io.Serializable;
 
@@ -27,9 +28,11 @@
 
     @ManyToOne
     @JoinColumn(name = "user_id")
+    @ToString.Exclude
     private User user;
 
     @ManyToOne
     @JoinColumn(name = "event_id")
+    @ToString.Exclude
     private Event event;
 }
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/CancellationRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.entity;\r\n\r\nimport jakarta.persistence.*;\r\nimport lombok.Data;\r\nimport java.time.LocalDateTime;\r\n\r\n@Entity\r\n@Data\r\n@Table(name = \"cancellation_request\")\r\npublic class CancellationRequest {\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Integer id;\r\n    private Integer approvedBy;\r\n\r\n    @ManyToOne(fetch = FetchType.LAZY)\r\n    @JoinColumn(name = \"booking_id\", nullable = false)\r\n    private Booking booking;\r\n\r\n    @ManyToOne(fetch = FetchType.LAZY)\r\n    @JoinColumn(name = \"session_id\")\r\n    private ClassSession session;\r\n\r\n    private String reason;\r\n\r\n    @Column(name = \"request_date\", nullable = false)\r\n    private LocalDateTime requestDate;\r\n\r\n    @Column(nullable = false, length = 50)\r\n    private String status; // PENDING, APPROVED, REJECTED\r\n\r\n    @Column(name = \"admin_remark\")\r\n    private String adminRemark;\r\n\r\n    @Column(name = \"initiated_by_coach\")\r\n    private Boolean initiatedByCoach;\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/CancellationRequest.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/CancellationRequest.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/CancellationRequest.java	(revision c178c1d9e80f6815b91226b2d10f391611dcb6b4)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/CancellationRequest.java	(date 1754953237289)
@@ -2,6 +2,7 @@
 
 import jakarta.persistence.*;
 import lombok.Data;
+import lombok.ToString;
 import java.time.LocalDateTime;
 
 @Entity
@@ -15,10 +16,12 @@
 
     @ManyToOne(fetch = FetchType.LAZY)
     @JoinColumn(name = "booking_id", nullable = false)
+    @ToString.Exclude
     private Booking booking;
 
     @ManyToOne(fetch = FetchType.LAZY)
     @JoinColumn(name = "session_id")
+    @ToString.Exclude
     private ClassSession session;
 
     private String reason;
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Slot.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.entity;\r\n\r\nimport jakarta.persistence.*;\r\nimport lombok.Data;\r\nimport java.time.LocalDate;\r\nimport java.time.LocalTime;\r\nimport java.util.List;\r\n\r\n@Entity\r\n@Data\r\n@Table(name = \"slot\")\r\npublic class Slot {\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Integer id;\r\n\r\n    @Column(name = \"court_id\")\r\n    private Integer courtId;\r\n\r\n    @Column(name = \"date\")\r\n    private LocalDate date;\r\n\r\n    @Column(name = \"start_time\")\r\n    private LocalTime startTime;\r\n\r\n    @Column(name = \"end_time\")\r\n    private LocalTime endTime;\r\n\r\n    @Column(name = \"is_available\")\r\n    private boolean isAvailable;\r\n\r\n    @OneToMany(mappedBy = \"slot\", cascade = CascadeType.ALL, fetch = FetchType.LAZY)\r\n    private List<BookingSlot> bookingSlots;\r\n\r\n    @Column(name = \"status\")\r\n    private String status;\r\n\r\n    @Column(name = \"duration_hours\", nullable = false)\r\n    private Integer durationHours = 1;\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Slot.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Slot.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Slot.java	(revision c178c1d9e80f6815b91226b2d10f391611dcb6b4)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Slot.java	(date 1754953215848)
@@ -2,6 +2,7 @@
 
 import jakarta.persistence.*;
 import lombok.Data;
+import lombok.ToString;
 import java.time.LocalDate;
 import java.time.LocalTime;
 import java.util.List;
@@ -30,6 +31,7 @@
     private boolean isAvailable;
 
     @OneToMany(mappedBy = "slot", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
+    @ToString.Exclude
     private List<BookingSlot> bookingSlots;
 
     @Column(name = "status")
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Admin.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.entity;\r\n\r\nimport jakarta.persistence.*;\r\nimport lombok.Data;\r\n\r\n@Entity\r\n@Data\r\n@Table(name = \"admin\")\r\npublic class Admin {\r\n    @Id\r\n    private Integer id;  // Will be set by @MapsId\r\n\r\n    @OneToOne(fetch = FetchType.EAGER)\r\n    @MapsId  // Automatically sets ID from user ID\r\n    @JoinColumn(name = \"user_id\")\r\n    private User user;\r\n\r\n    @Column(name = \"position\")\r\n    private String position;\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Admin.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Admin.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Admin.java	(revision c178c1d9e80f6815b91226b2d10f391611dcb6b4)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Admin.java	(date 1754953340703)
@@ -2,6 +2,7 @@
 
 import jakarta.persistence.*;
 import lombok.Data;
+import lombok.ToString;
 
 @Entity
 @Data
@@ -13,6 +14,7 @@
     @OneToOne(fetch = FetchType.EAGER)
     @MapsId  // Automatically sets ID from user ID
     @JoinColumn(name = "user_id")
+    @ToString.Exclude
     private User user;
 
     @Column(name = "position")
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Booking.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.entity;\r\n\r\nimport jakarta.persistence.*;\r\nimport lombok.Data;\r\nimport java.time.LocalDate;\r\n\r\n@Entity\r\n@Data\r\n@Table(name = \"booking\")\r\npublic class Booking {\r\n\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Integer id;\r\n\r\n    @Column(name = \"booking_date\")\r\n    private java.time.LocalDateTime bookingDate;\r\n\r\n    @Column(name = \"total_amount\", nullable = false, columnDefinition = \"double(5,2)\")\r\n    private double totalAmount;\r\n\r\n    // 新增：折扣相關字段\r\n    @Column(name = \"original_amount\", columnDefinition = \"double(5,2)\")\r\n    private Double originalAmount;\r\n\r\n    @Column(name = \"discount_amount\", columnDefinition = \"double(5,2) default 0.0\")\r\n    private Double discountAmount = 0.0;\r\n\r\n    @Column( length = 50)\r\n    private String status;\r\n\r\n    @ManyToOne(fetch = FetchType.LAZY)\r\n    @JoinColumn(name = \"member_id\", nullable = false, referencedColumnName = \"user_id\")\r\n    private Member member;\r\n\r\n    @ManyToOne(fetch = FetchType.LAZY)\r\n    @JoinColumn(name = \"payment_id\", nullable = false)\r\n    private Payment payment;\r\n\r\n    @Column(name = \"purpose\")\r\n    private String purpose;\r\n\r\n    @Column(name = \"number_of_players\")\r\n    private Integer numberOfPlayers;\r\n\r\n    @Column(name = \"num_paddles\")\r\n    private Integer numPaddles; // 新增：租借球拍数量\r\n\r\n    @Column(name = \"buy_ball_set\")\r\n    private Boolean buyBallSet; // 新增：购买球组\r\n\r\n    @Column(name = \"purpose_id\")\r\n    private Integer purposeId;\r\n\r\n    @OneToMany(mappedBy = \"booking\", cascade = CascadeType.ALL)\r\n    private java.util.List<BookingSlot> bookingSlots;\r\n\r\n    @OneToOne(mappedBy = \"booking\", cascade = CascadeType.ALL)\r\n    private CancellationRequest cancellationRequest;\r\n\r\n    public enum status {\r\n        CONFIRMED, CANCELLED, PENDING\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Booking.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Booking.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Booking.java	(revision c178c1d9e80f6815b91226b2d10f391611dcb6b4)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Booking.java	(date 1754953211231)
@@ -2,6 +2,7 @@
 
 import jakarta.persistence.*;
 import lombok.Data;
+import lombok.ToString;
 import java.time.LocalDate;
 
 @Entity
@@ -31,10 +32,12 @@
 
     @ManyToOne(fetch = FetchType.LAZY)
     @JoinColumn(name = "member_id", nullable = false, referencedColumnName = "user_id")
+    @ToString.Exclude
     private Member member;
 
     @ManyToOne(fetch = FetchType.LAZY)
     @JoinColumn(name = "payment_id", nullable = false)
+    @ToString.Exclude
     private Payment payment;
 
     @Column(name = "purpose")
@@ -53,9 +56,11 @@
     private Integer purposeId;
 
     @OneToMany(mappedBy = "booking", cascade = CascadeType.ALL)
+    @ToString.Exclude
     private java.util.List<BookingSlot> bookingSlots;
 
     @OneToOne(mappedBy = "booking", cascade = CascadeType.ALL)
+    @ToString.Exclude
     private CancellationRequest cancellationRequest;
 
     public enum status {
Index: pickleball-frontend/src/components/helpdesk/HelpdeskPage.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useState, useRef, useEffect } from 'react';\r\nimport HelpdeskService from '../../service/HelpdeskService';\r\nimport ReactMarkdown from 'react-markdown';\r\nimport { FaUser, FaRobot, FaPaperclip, FaArrowLeft } from 'react-icons/fa';\r\nimport { useTheme, alpha } from '@mui/material/styles';\r\nimport { IconButton, Button, CircularProgress, Box, Typography, TextField } from '@mui/material';\r\nimport SendIcon from '@mui/icons-material/Send';\r\n\r\nconst HelpdeskPage = () => {\r\n  const theme = useTheme();\r\n  const [messages, setMessages] = useState([]);\r\n  const [inputMessage, setInputMessage] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState('');\r\n  const [file, setFile] = useState(null);\r\n  const messagesEndRef = useRef(null);\r\n  const [currentTopic, setCurrentTopic] = useState(null);\r\n  const [showEscalateForm, setShowEscalateForm] = useState(false);\r\n  const [escalateMessage, setEscalateMessage] = useState('');\r\n  const [escalateSubmitted, setEscalateSubmitted] = useState(false);\r\n\r\n  // Scroll to bottom on new messages\r\n  const scrollToBottom = () => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n  };\r\n\r\n  useEffect(() => {\r\n    scrollToBottom();\r\n  }, [messages]);\r\n\r\n  // Load from localStorage on mount\r\n  useEffect(() => {\r\n    const saved = localStorage.getItem('helpdeskMessages');\r\n    if (saved) setMessages(JSON.parse(saved));\r\n  }, []);\r\n\r\n  // Save to localStorage on every message change\r\n  useEffect(() => {\r\n    localStorage.setItem('helpdeskMessages', JSON.stringify(messages));\r\n  }, [messages]);\r\n\r\n  const handleSendMessage = async () => {\r\n    if (!inputMessage.trim()) return;\r\n\r\n    const userMessage = {\r\n      id: Date.now(),\r\n      content: inputMessage,\r\n      sender: 'user',\r\n      timestamp: new Date().toISOString()\r\n    };\r\n\r\n    setMessages(prev => [...prev, userMessage]);\r\n    setInputMessage('');\r\n    setIsLoading(true);\r\n    setError('');\r\n\r\n    try {\r\n      // File upload placeholder\r\n      if (file) {\r\n        setError('File/image upload coming soon!');\r\n        setFile(null);\r\n        setIsLoading(false);\r\n        return;\r\n      }\r\n\r\n      const response = await HelpdeskService.askQuestion(inputMessage);\r\n\r\n      const aiMessage = {\r\n        id: response.id,\r\n        content: response.aiResponse,\r\n        sender: 'ai',\r\n        timestamp: response.timestamp || new Date().toISOString(),\r\n        queryId: response.id,\r\n        escalated: response.escalated\r\n      };\r\n\r\n      setMessages(prev => [...prev, aiMessage]);\r\n    } catch (err) {\r\n      setError(err.message);\r\n      const errorMessage = {\r\n        id: Date.now(),\r\n        content: 'Sorry, I encountered an error. Please try again.',\r\n        sender: 'ai',\r\n        timestamp: new Date().toISOString(),\r\n        isError: true\r\n      };\r\n      setMessages(prev => [...prev, errorMessage]);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleEscalate = async (queryId) => {\r\n    try {\r\n      await HelpdeskService.escalateToHumanSupport(queryId);\r\n\r\n      const escalationMessage = {\r\n        id: Date.now(),\r\n        content: 'Your query has been escalated to human support. You will receive a response via email shortly.',\r\n        sender: 'ai',\r\n        timestamp: new Date().toISOString(),\r\n        isEscalated: true\r\n      };\r\n\r\n      setMessages(prev => [...prev, escalationMessage]);\r\n    } catch (err) {\r\n      setError('Failed to escalate query. Please try again.');\r\n    }\r\n  };\r\n\r\n  // Multi-line input: Shift+Enter for new line, Enter to send\r\n  const handleKeyDown = (e) => {\r\n    if (e.key === 'Enter' && !e.shiftKey) {\r\n      e.preventDefault();\r\n      handleSendMessage();\r\n    }\r\n  };\r\n\r\n  const formatTime = (timestamp) => {\r\n    return new Date(timestamp).toLocaleTimeString([], {\r\n      hour: '2-digit',\r\n      minute: '2-digit'\r\n    });\r\n  };\r\n\r\n  // Updated UI styles\r\n  const styles = {\r\n    container: {\r\n      maxWidth: '800px',\r\n      margin: '0 auto',\r\n      height: '100vh',\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      background: theme.palette.background.default\r\n    },\r\n    header: {\r\n      background: theme.palette.background.paper,\r\n      color: theme.palette.text.primary,\r\n      padding: '1.5rem',\r\n      textAlign: 'center',\r\n      boxShadow: theme.shadows[1],\r\n      borderBottom: '2px solid',\r\n      borderColor: theme.palette.divider,\r\n      opacity: 0.8,\r\n      position: 'relative'\r\n    },\r\n    headerTitle: {\r\n      margin: '0 0 0.5rem 0',\r\n      fontSize: '1.5rem',\r\n      fontWeight: '700',\r\n      color: theme.palette.primary.main\r\n    },\r\n    headerSubtitle: {\r\n      margin: 0,\r\n      opacity: 0.8,\r\n      fontSize: '0.9rem',\r\n      color: theme.palette.text.secondary\r\n    },\r\n    messages: {\r\n      flex: 1,\r\n      overflowY: 'auto',\r\n      padding: '1.5rem',\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      gap: '1.5rem',\r\n      background: theme.palette.background.default\r\n    },\r\n    welcomeMessage: {\r\n      marginBottom: '1rem'\r\n    },\r\n    message: {\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      maxWidth: '85%',\r\n      animation: 'fadeIn 0.3s ease-in',\r\n      transition: 'all 0.2s'\r\n    },\r\n    userMessage: {\r\n      alignSelf: 'flex-end'\r\n    },\r\n    aiMessage: {\r\n      alignSelf: 'flex-start'\r\n    },\r\n    messageContent: {\r\n      background: theme.palette.mode === 'light'\r\n        ? alpha(theme.palette.grey[50], 0.98)\r\n        : theme.palette.background.paper,\r\n      color: theme.palette.text.primary,\r\n      padding: '1rem 1.25rem',\r\n      borderRadius: '18px',\r\n      boxShadow: theme.shadows[1],\r\n      position: 'relative',\r\n      borderBottomLeftRadius: '4px'\r\n    },\r\n    userMessageContent: {\r\n      background: theme.palette.mode === 'light'\r\n        ? `linear-gradient(135deg, ${theme.palette.primary.main} 0%, ${alpha(theme.palette.primary.light, 0.85)} 100%)`\r\n        : `linear-gradient(135deg, ${theme.palette.primary.main} 0%, ${alpha(theme.palette.primary.dark, 0.9)} 100%)`,\r\n      color: theme.palette.primary.contrastText,\r\n      padding: '1rem 1.25rem',\r\n      borderRadius: '18px',\r\n      boxShadow: theme.shadows[1],\r\n      position: 'relative',\r\n      borderBottomRightRadius: '4px'\r\n    },\r\n    messageList: {\r\n      margin: '0.5rem 0',\r\n      paddingLeft: '1.5rem'\r\n    },\r\n    messageListItem: {\r\n      margin: '0.25rem 0'\r\n    },\r\n    messageTime: {\r\n      fontSize: '0.7rem',\r\n      color: theme.palette.text.secondary,\r\n      marginTop: '0.25rem',\r\n      textAlign: 'right'\r\n    },\r\n    userMessageTime: {\r\n      fontSize: '0.7rem',\r\n      color: alpha(theme.palette.primary.contrastText, 0.7),\r\n      marginTop: '0.25rem',\r\n      textAlign: 'right'\r\n    },\r\n    errorMessage: {\r\n      color: theme.palette.error.main,\r\n      fontWeight: '500'\r\n    },\r\n    escalateButton: {\r\n      background: theme.palette.success.main,\r\n      color: theme.palette.getContrastText(theme.palette.success.main),\r\n      border: 'none',\r\n      padding: '0.5rem 1rem',\r\n      borderRadius: '20px',\r\n      fontSize: '0.875rem',\r\n      cursor: 'pointer',\r\n      marginTop: '0.75rem',\r\n      transition: 'all 0.2s ease',\r\n      fontWeight: 500,\r\n      display: 'block'\r\n    },\r\n    escalateButtonHover: {\r\n      background: theme.palette.success.dark,\r\n      transform: 'translateY(-1px)'\r\n    },\r\n    escalatedNotice: {\r\n      background: alpha(theme.palette.success.light, 0.2),\r\n      color: theme.palette.success.dark,\r\n      padding: '0.5rem 1rem',\r\n      borderRadius: '8px',\r\n      fontSize: '0.875rem',\r\n      marginTop: '0.75rem',\r\n      border: `1px solid ${alpha(theme.palette.success.light, 0.5)}`\r\n    },\r\n    typingIndicator: {\r\n      display: 'flex',\r\n      gap: '0.25rem',\r\n      padding: '0.5rem'\r\n    },\r\n    typingDot: {\r\n      width: '8px',\r\n      height: '8px',\r\n      borderRadius: '50%',\r\n      background: theme.palette.divider,\r\n      animation: 'typing 1.4s infinite ease-in-out'\r\n    },\r\n    typingDot1: {\r\n      animationDelay: '-0.32s'\r\n    },\r\n    typingDot2: {\r\n      animationDelay: '-0.16s'\r\n    },\r\n    errorBanner: {\r\n      background: alpha(theme.palette.error.light, 0.2),\r\n      color: theme.palette.error.dark,\r\n      padding: '1rem',\r\n      borderRadius: '8px',\r\n      margin: '1rem 0',\r\n      border: `1px solid ${theme.palette.error.light}`,\r\n      textAlign: 'center'\r\n    },\r\n    input: {\r\n      background: theme.palette.mode === 'light'\r\n        ? alpha(theme.palette.grey[50], 0.98)\r\n        : theme.palette.background.paper,\r\n      padding: '1rem',\r\n      borderTop: '2px solid',\r\n      borderColor: theme.palette.divider,\r\n      opacity: 0.8,\r\n      boxShadow: theme.shadows[2]\r\n    },\r\n    inputContainer: {\r\n      display: 'flex',\r\n      gap: '0.5rem',\r\n      alignItems: 'flex-end'\r\n    },\r\n    textarea: {\r\n      flex: 1,\r\n      border: '2px solid',\r\n      borderColor: theme.palette.divider,\r\n      opacity: 0.8,\r\n      borderRadius: '25px',\r\n      padding: '0.75rem 1.25rem',\r\n      fontSize: '1rem',\r\n      resize: 'none',\r\n      outline: 'none',\r\n      transition: 'all 0.2s ease',\r\n      fontFamily: 'inherit',\r\n      lineHeight: 1.5,\r\n      background: theme.palette.mode === 'light'\r\n        ? alpha(theme.palette.grey[100], 0.95)\r\n        : theme.palette.background.default,\r\n      color: theme.palette.text.primary,\r\n      minHeight: '50px'\r\n    },\r\n    textareaFocus: {\r\n      borderColor: theme.palette.primary.main,\r\n      boxShadow: `0 0 0 2px ${alpha(theme.palette.primary.main, 0.2)}`\r\n    },\r\n    textareaDisabled: {\r\n      background: theme.palette.action.disabledBackground,\r\n      cursor: 'not-allowed'\r\n    },\r\n    sendButton: {\r\n      background: `linear-gradient(135deg, ${theme.palette.primary.main} 0%, ${theme.palette.primary.dark} 100%)`,\r\n      color: theme.palette.primary.contrastText,\r\n      border: 'none',\r\n      padding: '0.75rem',\r\n      borderRadius: '50%',\r\n      fontSize: '1rem',\r\n      cursor: 'pointer',\r\n      transition: 'all 0.2s ease',\r\n      minWidth: '48px',\r\n      height: '48px',\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      justifyContent: 'center',\r\n      boxShadow: theme.shadows[2]\r\n    },\r\n    sendButtonHover: {\r\n      transform: 'translateY(-2px)',\r\n      boxShadow: theme.shadows[4]\r\n    },\r\n    sendButtonDisabled: {\r\n      background: theme.palette.action.disabled,\r\n      color: theme.palette.text.disabled,\r\n      cursor: 'not-allowed',\r\n      transform: 'none',\r\n      boxShadow: 'none'\r\n    },\r\n    fileInput: {\r\n      display: 'none'\r\n    },\r\n    fileButton: {\r\n      background: 'transparent',\r\n      border: 'none',\r\n      cursor: 'pointer',\r\n      color: theme.palette.primary.main,\r\n      fontSize: '1.25rem',\r\n      marginRight: '0.5rem'\r\n    },\r\n    quickReplyContainer: {\r\n      display: 'flex',\r\n      flexWrap: 'wrap',\r\n      gap: '0.5rem',\r\n      marginTop: '1rem'\r\n    },\r\n    quickReplyButton: {\r\n      background: theme.palette.mode === 'light'\r\n        ? alpha(theme.palette.primary.light, 0.08)\r\n        : theme.palette.background.paper,\r\n      color: theme.palette.primary.main,\r\n      border: `1.5px solid ${theme.palette.primary.main}`,\r\n      borderRadius: '20px',\r\n      padding: '0.4rem 1rem',\r\n      fontSize: '0.85rem',\r\n      cursor: 'pointer',\r\n      transition: 'all 0.2s ease',\r\n      fontWeight: 500\r\n    },\r\n    backButton: {\r\n      background: theme.palette.background.paper,\r\n      color: theme.palette.text.secondary,\r\n      border: `1px solid ${theme.palette.divider}`,\r\n      borderRadius: '20px',\r\n      padding: '0.4rem 1rem',\r\n      fontSize: '0.85rem',\r\n      cursor: 'pointer',\r\n      transition: 'all 0.2s ease',\r\n      fontWeight: 500,\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      gap: '0.3rem'\r\n    },\r\n    topicQuestionButton: {\r\n      background: theme.palette.mode === 'light'\r\n        ? alpha(theme.palette.primary.light, 0.08)\r\n        : theme.palette.background.paper,\r\n      color: theme.palette.primary.main,\r\n      border: `1.5px solid ${theme.palette.primary.main}`,\r\n      borderRadius: '20px',\r\n      padding: '0.4rem 1rem',\r\n      fontSize: '0.85rem',\r\n      cursor: 'pointer',\r\n      transition: 'all 0.2s ease',\r\n      fontWeight: 500,\r\n      textAlign: 'left'\r\n    }\r\n  };\r\n\r\n  const QUICK_REPLIES = [\r\n    { label: \"Court/Reservation\", value: \"court_reservation\" },\r\n    { label: \"Payment\", value: \"payment\" },\r\n    { label: \"Feedback\", value: \"feedback\" },\r\n    { label: \"Event\", value: \"event\" },\r\n    { label: \"Profile\", value: \"profile\" },\r\n    { label: \"Membership\", value: \"membership\" }\r\n  ];\r\n\r\n  const FEEDBACK_QUESTIONS = [\r\n    \"How was your experience?\",\r\n    \"Would you recommend us?\",\r\n    \"Any suggestions for improvement?\"\r\n  ];\r\n\r\n  const TOPIC_QUESTIONS = {\r\n    court_reservation: [\r\n      \"How do I book a pickleball court?\",\r\n      \"What is the booking cancellation policy?\",\r\n      \"Can I book multiple courts at once?\",\r\n      \"What are the court operating hours?\",\r\n      \"What are the court prices (peak/off-peak)?\",\r\n      \"How do I check court availability?\",\r\n      \"How do I cancel or change my reservation?\",\r\n      \"What happens if I miss my reservation?\"\r\n    ],\r\n    payment: [\r\n      \"What payment methods are accepted?\",\r\n      \"How do I add money to my wallet?\",\r\n      \"Can I get a refund?\",\r\n      \"How do I pay for my booking?\",\r\n      \"What if my payment fails?\"\r\n    ],\r\n    feedback: [\r\n      \"How can I leave feedback?\",\r\n      \"Where can I see my previous feedback?\",\r\n      \"How is my feedback used?\"\r\n    ],\r\n    event: [\r\n      \"How do I register for an event?\",\r\n      \"Can I cancel my event registration?\",\r\n      \"Where can I see upcoming events?\",\r\n      \"How do I create a new event?\",\r\n      \"What are the event rules and requirements?\"\r\n    ],\r\n    profile: [\r\n      \"How do I edit my profile?\",\r\n      \"How do I change my user type?\",\r\n      \"How do I update my email or password?\",\r\n      \"How do I upload a profile picture?\",\r\n      \"How do I manage my notification preferences?\"\r\n    ],\r\n    membership: [\r\n      \"How do I become a member?\",\r\n      \"What are the benefits of membership?\",\r\n      \"How do I upgrade my membership?\",\r\n      \"What are the membership tier levels?\"\r\n    ]\r\n  };\r\n\r\n  const PREDEFINED_ANSWERS = {\r\n    // Court/Reservation\r\n    \"How do I book a pickleball court?\": \"To book a pickleball court, go to the Booking page, select your preferred date and time, and confirm your reservation.\",\r\n    \"What is the booking cancellation policy?\": \"You can cancel your booking up to 24 hours before the scheduled time for a full refund.\",\r\n    \"Can I book multiple courts at once?\": \"Yes, you can select multiple courts during the booking process, subject to availability.\",\r\n    \"What are the court operating hours?\": \"Court operating hours are typically from 8:00 AM to 10:00 PM. Please check the court details for specific timings.\",\r\n    \"What are the court prices (peak/off-peak)?\": \"Peak hours are usually 4:00 PM - 8:00 PM at RM80/hr, off-peak is RM50/hr. See court details for exact pricing.\",\r\n    \"How do I check court availability?\": \"You can check court availability on the Court List or Booking page. Available dates and time slots are shown in the booking calendar.\",\r\n    \"How do I cancel or change my reservation?\": \"To cancel or change your reservation, go to your Booking History and select the booking you wish to modify.\",\r\n    \"What happens if I miss my reservation?\": \"If you miss your reservation, the slot will be released and may be subject to a no-show fee as per our policy.\",\r\n    // Payment\r\n    \"What payment methods are accepted?\": \"We accept credit/debit cards, PayPal, and wallet payments.\",\r\n    \"How do I add money to my wallet?\": \"Go to the Wallet section in your profile and click 'Add Funds' to top up using your preferred payment method.\",\r\n    \"Can I get a refund?\": \"Refunds are processed according to our cancellation policy. Please contact support for assistance.\",\r\n    \"How do I pay for my booking?\": \"You can pay for your booking during the checkout process using your wallet or a supported payment method.\",\r\n    \"What if my payment fails?\": \"If your payment fails, please check your payment details and try again. If the issue persists, contact support.\",\r\n    // Feedback\r\n    \"How can I leave feedback?\": \"After your session, you can leave feedback from your booking history or the feedback section in your profile.\",\r\n    \"Where can I see my previous feedback?\": \"All your submitted feedback is visible in the Feedback section of your profile.\",\r\n    \"How is my feedback used?\": \"Your feedback helps us improve our services and facilities. We review all feedback regularly.\",\r\n    // Event\r\n    \"How do I register for an event?\": \"To register for an event, go to the Events page, select the event you are interested in, and click 'Register'.\",\r\n    \"Can I cancel my event registration?\": \"Yes, you can cancel your event registration from your event history or the event details page.\",\r\n    \"Where can I see upcoming events?\": \"Upcoming events are listed on the Events page. You can view details and register from there.\",\r\n    \"How do I create a new event?\": \"If you are an admin or organizer, go to the Events page and click 'Create Event'. Fill in the event details and submit.\",\r\n    \"What are the event rules and requirements?\": \"Event rules and requirements are listed in each event's details. Please review them before registering.\",\r\n    // Profile\r\n    \"How do I edit my profile?\": \"Go to your Profile page and click the 'Edit Profile' button. Update your information and save your changes.\",\r\n    \"How do I change my user type?\": \"If you are eligible, you can request a user type change from your Profile page or contact support for assistance.\",\r\n    \"How do I update my email or password?\": \"Go to your Profile or Account Settings page. There you can update your email and change your password.\",\r\n    \"How do I upload a profile picture?\": \"On your Profile page, click your avatar or the 'Upload Picture' button to select and upload a new profile photo.\",\r\n    \"How do I manage my notification preferences?\": \"Go to Notification Preferences in your Profile or Settings to enable or disable different types of notifications.\",\r\n    // Membership\r\n    \"How do I become a member?\": \"Once you successfully register an account, you automatically become a member. Your initial membership tier is Silver.\",\r\n    \"What are the benefits of membership?\": \"You can view the specific benefits for each membership tier (Silver, Gold, Platinum) on the Membership page. Each tier offers different discounts, privileges, and rewards. Please visit the Membership section for full details.\",\r\n    \"How do I upgrade my membership?\": \"Each membership tier has a maximum point threshold. When you reach the required points for the next tier, your membership will be automatically upgraded. You can track your points and tier status on the Membership page.\",\r\n    \"What are the membership tier levels?\": \"Our membership tiers are: Silver (default for new members), Gold, and Platinum. Each tier offers increasing benefits and rewards. You can view and upgrade your tier from your Profile or Membership page.\"\r\n  };\r\n\r\n  const [showQuickReplies, setShowQuickReplies] = useState(true);\r\n  const [showFeedbackQuestions, setShowFeedbackQuestions] = useState(false);\r\n  const [pendingQuestions, setPendingQuestions] = useState(null);\r\n\r\n  const handleQuickReply = (value) => {\r\n    setShowQuickReplies(false);\r\n    setPendingQuestions({ topic: value, questions: TOPIC_QUESTIONS[value] });\r\n    setCurrentTopic(value);\r\n    setMessages(prev => [\r\n      ...prev.filter(m => m.type !== 'topic_questions'),\r\n      {\r\n        id: Date.now() + Math.random(),\r\n        sender: 'ai',\r\n        type: 'topic_questions',\r\n        topic: value,\r\n        options: TOPIC_QUESTIONS[value],\r\n        timestamp: new Date().toISOString()\r\n      }\r\n    ]);\r\n  };\r\n\r\n  const handleTopicQuestion = (question) => {\r\n    // Always use currentTopic for topic/options\r\n    const topic = currentTopic;\r\n    const options = TOPIC_QUESTIONS[topic] || [];\r\n    setPendingQuestions(null);\r\n    setMessages(prev => [\r\n      ...prev,\r\n      {\r\n        id: Date.now() + Math.random(),\r\n        sender: 'user',\r\n        content: question,\r\n        timestamp: new Date().toISOString()\r\n      }\r\n    ]);\r\n    if (PREDEFINED_ANSWERS[question]) {\r\n      setMessages(prev => [\r\n        ...prev,\r\n        {\r\n          id: Date.now() + Math.random(),\r\n          sender: 'ai',\r\n          content: PREDEFINED_ANSWERS[question],\r\n          timestamp: new Date().toISOString()\r\n        },\r\n        {\r\n          id: Date.now() + Math.random(),\r\n          sender: 'ai',\r\n          type: 'topic_questions',\r\n          topic: topic,\r\n          options: options,\r\n          timestamp: new Date().toISOString()\r\n        }\r\n      ]);\r\n    } else {\r\n      handleSendMessage(question);\r\n    }\r\n  };\r\n\r\n  const handleFeedbackQuestion = (question) => {\r\n    setShowFeedbackQuestions(false);\r\n    handleSendMessage(question);\r\n  };\r\n\r\n  const handleEscalateSubmit = async () => {\r\n    try {\r\n      await HelpdeskService.escalateForm({\r\n        message: escalateMessage,\r\n        topic: currentTopic\r\n      });\r\n      setEscalateSubmitted(true);\r\n      setEscalateMessage('');\r\n      // Show escalation confirmation as an AI message in the chat\r\n      setMessages(prev => [\r\n        ...prev,\r\n        {\r\n          id: Date.now() + Math.random(),\r\n          sender: 'ai',\r\n          content: 'Your query has been escalated to human support. You will receive a response via email shortly.',\r\n          timestamp: new Date().toISOString(),\r\n          isEscalated: true\r\n        }\r\n      ]);\r\n    } catch (err) {\r\n      setEscalateSubmitted(false);\r\n      alert('Failed to submit. Please try again.');\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (messages.length === 0) {\r\n      setMessages([\r\n        {\r\n          id: Date.now(),\r\n          sender: 'ai',\r\n          content: \"Hi there, how can I help you today?\",\r\n          timestamp: new Date().toISOString()\r\n        },\r\n        {\r\n          id: Date.now() + 1,\r\n          sender: 'ai',\r\n          type: 'quick_replies',\r\n          options: QUICK_REPLIES,\r\n          timestamp: new Date().toISOString()\r\n        }\r\n      ]);\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <div style={styles.container}>\r\n      <div style={styles.header}>\r\n        <h1 style={styles.headerTitle}>Helpdesk Support</h1>\r\n        <p style={styles.headerSubtitle}>Ask me anything about bookings, memberships, payments, or general inquiries!</p>\r\n      </div>\r\n\r\n      <div style={styles.messages}>\r\n        {messages.length === 0 && (\r\n          <div style={styles.welcomeMessage}>\r\n            <div style={{ ...styles.message, ...styles.aiMessage }}>\r\n              <div style={{ display: 'flex', alignItems: 'flex-end' }}>\r\n                <div style={{ \r\n                  background: alpha(theme.palette.primary.main, 0.1), \r\n                  borderRadius: '50%', \r\n                  padding: '0.5rem',\r\n                  marginRight: '0.75rem',\r\n                  display: 'flex',\r\n                  alignItems: 'center',\r\n                  justifyContent: 'center'\r\n                }}>\r\n                  <FaRobot size={24} style={{ color: theme.palette.primary.main }} />\r\n                </div>\r\n              </div>\r\n              <div style={styles.messageContent}>\r\n                <p style={{ fontWeight: 500, marginBottom: '0.5rem' }}>\uD83D\uDC4B Hello! I'm your AI assistant. I can help you with:</p>\r\n                <ul style={styles.messageList}>\r\n                  <li style={styles.messageListItem}>\uD83D\uDCC5 Court bookings and reservations</li>\r\n                  <li style={styles.messageListItem}>\uD83D\uDCB3 Membership information and benefits</li>\r\n                  <li style={styles.messageListItem}>\uD83D\uDCB0 Payment methods and wallet management</li>\r\n                  <li style={styles.messageListItem}>\uD83D\uDCDD General questions about our services</li>\r\n                </ul>\r\n                <p style={{ marginTop: '0.5rem' }}>Just type your question below and I'll do my best to help!</p>\r\n              </div>\r\n              <div style={styles.messageTime}>\r\n                {formatTime(new Date())}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {messages.map((message) => (\r\n          <div key={message.id} style={{\r\n            ...styles.message,\r\n            ...(message.sender === 'user' ? styles.userMessage : styles.aiMessage)\r\n          }}>\r\n            <div style={{ display: 'flex', alignItems: 'flex-end' }}>\r\n              {message.sender === 'ai' ? (\r\n                <div style={{ \r\n                  background: alpha(theme.palette.primary.main, 0.1), \r\n                  borderRadius: '50%', \r\n                  padding: '0.5rem',\r\n                  marginRight: '0.75rem',\r\n                  display: 'flex',\r\n                  alignItems: 'center',\r\n                  justifyContent: 'center'\r\n                }}>\r\n                  <FaRobot size={24} style={{ color: theme.palette.primary.main }} />\r\n                </div>\r\n              ) : (\r\n                <div style={{ \r\n                  background: alpha(theme.palette.primary.main, 0.2), \r\n                  borderRadius: '50%', \r\n                  padding: '0.5rem',\r\n                  marginRight: '0.75rem',\r\n                  display: 'flex',\r\n                  alignItems: 'center',\r\n                  justifyContent: 'center'\r\n                }}>\r\n                  <FaUser size={20} style={{ color: theme.palette.primary.main }} />\r\n                </div>\r\n              )}\r\n              \r\n              <div style={message.sender === 'user' ? styles.userMessageContent : styles.messageContent}>\r\n                {message.isError ? (\r\n                  <div style={styles.errorMessage}>\r\n                    <span>⚠\uFE0F {message.content}</span>\r\n                  </div>\r\n                ) : (\r\n                  message.sender === 'ai' ? (\r\n                    <ReactMarkdown>{message.content}</ReactMarkdown>\r\n                  ) : (\r\n                    <span>{message.content}</span>\r\n                  )\r\n                )}\r\n\r\n                {message.sender === 'ai' && message.queryId && !message.escalated && !message.isEscalated && (\r\n                  <button\r\n                    style={styles.escalateButton}\r\n                    onMouseEnter={(e) => {\r\n                      e.target.style.background = theme.palette.success.dark;\r\n                      e.target.style.transform = 'translateY(-1px)';\r\n                    }}\r\n                    onMouseLeave={(e) => {\r\n                      e.target.style.background = theme.palette.success.main;\r\n                      e.target.style.transform = 'translateY(0)';\r\n                    }}\r\n                    onClick={() => handleEscalate(message.queryId)}\r\n                  >\r\n                    Escalate to Human Support\r\n                  </button>\r\n                )}\r\n\r\n                {message.isEscalated && (\r\n                  <div style={styles.escalatedNotice}>\r\n                    ✅ Query escalated to human support\r\n                  </div>\r\n                )}\r\n\r\n                {message.type === 'quick_replies' && (\r\n                  <div style={{ marginTop: '1rem' }}>\r\n                    <p style={{ marginBottom: '0.5rem', fontSize: '0.9rem', color: theme.palette.text.secondary }}>\r\n                      What do you need help with?\r\n                    </p>\r\n                    <div style={styles.quickReplyContainer}>\r\n                      {message.options.map(btn => (\r\n                        <button\r\n                          key={btn.value}\r\n                          onClick={() => handleQuickReply(btn.value)}\r\n                          style={styles.quickReplyButton}\r\n                          onMouseEnter={(e) => {\r\n                            e.target.style.background = alpha(theme.palette.primary.main, 0.1);\r\n                          }}\r\n                          onMouseLeave={(e) => {\r\n                            e.target.style.background = theme.palette.background.paper;\r\n                          }}\r\n                        >\r\n                          {btn.label}\r\n                        </button>\r\n                      ))}\r\n                    </div>\r\n                  </div>\r\n                )}\r\n\r\n                {message.type === 'topic_questions' && (\r\n                  <div style={{ marginTop: '1rem' }}>\r\n                    <p style={{ marginBottom: '0.5rem', fontSize: '0.9rem', color: theme.palette.text.secondary }}>\r\n                      Here are some common questions about {message.topic.replace('_', ' ')}:\r\n                    </p>\r\n                    <div style={styles.quickReplyContainer}>\r\n                      {message.options.map(q => (\r\n                        <button\r\n                          key={q}\r\n                          onClick={() => handleTopicQuestion(q)}\r\n                          style={styles.topicQuestionButton}\r\n                          onMouseEnter={(e) => {\r\n                            e.target.style.background = theme.palette.action.hover;\r\n                          }}\r\n                          onMouseLeave={(e) => {\r\n                            e.target.style.background = theme.palette.background.paper;\r\n                          }}\r\n                        >\r\n                          {q}\r\n                        </button>\r\n                      ))}\r\n                    </div>\r\n                    <div style={{ marginTop: '0.75rem' }}>\r\n                      <button\r\n                        onClick={() => {\r\n                          setPendingQuestions(null);\r\n                          setCurrentTopic(null);\r\n                          setShowQuickReplies(true);\r\n                          setShowEscalateForm(false);\r\n                          setEscalateSubmitted(false);\r\n                          setMessages(prev => [\r\n                            ...prev.filter(m => m.type !== 'topic_questions'),\r\n                            {\r\n                              id: Date.now() + Math.random(),\r\n                              sender: 'ai',\r\n                              type: 'quick_replies',\r\n                              options: QUICK_REPLIES,\r\n                              timestamp: new Date().toISOString()\r\n                            }\r\n                          ]);\r\n                        }}\r\n                        style={styles.backButton}\r\n                        onMouseEnter={(e) => {\r\n                          e.target.style.background = theme.palette.action.hover;\r\n                        }}\r\n                        onMouseLeave={(e) => {\r\n                          e.target.style.background = theme.palette.background.paper;\r\n                        }}\r\n                      >\r\n                        <FaArrowLeft size={12} /> Back to topics\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n                )}\r\n\r\n                {message.type === 'feedback_options' && (\r\n                  <div style={{ marginTop: '1rem' }}>\r\n                    <div style={styles.quickReplyContainer}>\r\n                      {message.options.map(q => (\r\n                        <button\r\n                          key={q}\r\n                          onClick={() => handleFeedbackQuestion(q)}\r\n                          style={styles.topicQuestionButton}\r\n                          onMouseEnter={(e) => {\r\n                            e.target.style.background = theme.palette.action.hover;\r\n                          }}\r\n                          onMouseLeave={(e) => {\r\n                            e.target.style.background = theme.palette.background.paper;\r\n                          }}\r\n                        >\r\n                          {q}\r\n                        </button>\r\n                      ))}\r\n                    </div>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </div>\r\n            <div style={message.sender === 'user' ? styles.userMessageTime : styles.messageTime}>\r\n              {formatTime(message.timestamp)}\r\n            </div>\r\n          </div>\r\n        ))}\r\n\r\n        {isLoading && (\r\n          <div style={{ ...styles.message, ...styles.aiMessage }}>\r\n            <div style={{ display: 'flex', alignItems: 'flex-end' }}>\r\n              <div style={{ \r\n                background: alpha(theme.palette.primary.main, 0.1), \r\n                borderRadius: '50%', \r\n                padding: '0.5rem',\r\n                marginRight: '0.75rem',\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                justifyContent: 'center'\r\n              }}>\r\n                <FaRobot size={24} style={{ color: theme.palette.primary.main }} />\r\n              </div>\r\n              <div style={styles.messageContent}>\r\n                <div style={styles.typingIndicator}>\r\n                  <span style={{ ...styles.typingDot, ...styles.typingDot1 }}></span>\r\n                  <span style={{ ...styles.typingDot, ...styles.typingDot2 }}></span>\r\n                  <span style={styles.typingDot}></span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {error && (\r\n          <div style={styles.errorBanner}>\r\n            {error}\r\n          </div>\r\n        )}\r\n\r\n        <div ref={messagesEndRef} />\r\n      </div>\r\n\r\n      {/* Only show the default input if not selecting topic questions */}\r\n      {!pendingQuestions && (\r\n        <div style={styles.input}>\r\n          <div style={styles.inputContainer}>\r\n            <textarea\r\n              value={inputMessage}\r\n              onChange={(e) => setInputMessage(e.target.value)}\r\n              onKeyDown={handleKeyDown}\r\n              placeholder=\"Type your question here...\"\r\n              disabled={isLoading}\r\n              rows=\"1\"\r\n              style={{\r\n                ...styles.textarea,\r\n                ...(isLoading ? styles.textareaDisabled : {}),\r\n                ...(inputMessage.trim() ? styles.textareaFocus : {})\r\n              }}\r\n              onFocus={(e) => {\r\n                e.target.style.borderColor = theme.palette.primary.main;\r\n                e.target.style.boxShadow = `0 0 0 2px ${alpha(theme.palette.primary.main, 0.2)}`;\r\n              }}\r\n              onBlur={(e) => {\r\n                if (!inputMessage.trim()) {\r\n                  e.target.style.borderColor = theme.palette.divider;\r\n                  e.target.style.boxShadow = 'none';\r\n                }\r\n              }}\r\n            />\r\n            <button\r\n              onClick={handleSendMessage}\r\n              disabled={!inputMessage.trim() || isLoading}\r\n              style={{\r\n                ...styles.sendButton,\r\n                ...(isLoading || !inputMessage.trim() ? styles.sendButtonDisabled : {})\r\n              }}\r\n              onMouseEnter={(e) => {\r\n                if (!isLoading && inputMessage.trim()) {\r\n                  e.target.style.transform = 'translateY(-2px)';\r\n                  e.target.style.boxShadow = theme.shadows[4];\r\n                }\r\n              }}\r\n              onMouseLeave={(e) => {\r\n                if (!isLoading && inputMessage.trim()) {\r\n                  e.target.style.transform = 'translateY(0)';\r\n                  e.target.style.boxShadow = theme.shadows[2];\r\n                }\r\n              }}\r\n            >\r\n              <SendIcon fontSize=\"small\" />\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Show the topic question input only when pendingQuestions is set */}\r\n      {pendingQuestions && (\r\n        <div style={styles.input}>\r\n          <div style={styles.inputContainer}>\r\n            <textarea\r\n              value={inputMessage}\r\n              onChange={(e) => setInputMessage(e.target.value)}\r\n              onKeyDown={handleKeyDown}\r\n              placeholder={`Ask a question about ${currentTopic || ''}...`}\r\n              disabled={isLoading}\r\n              rows=\"1\"\r\n              style={{\r\n                ...styles.textarea,\r\n                ...(isLoading ? styles.textareaDisabled : {}),\r\n                ...(inputMessage.trim() ? styles.textareaFocus : {})\r\n              }}\r\n              onFocus={(e) => {\r\n                e.target.style.borderColor = theme.palette.primary.main;\r\n                e.target.style.boxShadow = `0 0 0 2px ${alpha(theme.palette.primary.main, 0.2)}`;\r\n              }}\r\n              onBlur={(e) => {\r\n                if (!inputMessage.trim()) {\r\n                  e.target.style.borderColor = theme.palette.divider;\r\n                  e.target.style.boxShadow = 'none';\r\n                }\r\n              }}\r\n            />\r\n            <button\r\n              onClick={() => handleTopicQuestion(inputMessage)}\r\n              disabled={!inputMessage.trim() || isLoading}\r\n              style={{\r\n                ...styles.sendButton,\r\n                ...(isLoading || !inputMessage.trim() ? styles.sendButtonDisabled : {})\r\n              }}\r\n              onMouseEnter={(e) => {\r\n                if (!isLoading && inputMessage.trim()) {\r\n                  e.target.style.transform = 'translateY(-2px)';\r\n                  e.target.style.boxShadow = theme.shadows[4];\r\n                }\r\n              }}\r\n              onMouseLeave={(e) => {\r\n                if (!isLoading && inputMessage.trim()) {\r\n                  e.target.style.transform = 'translateY(0)';\r\n                  e.target.style.boxShadow = theme.shadows[2];\r\n                }\r\n              }}\r\n            >\r\n              <SendIcon fontSize=\"small\" />\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      <style>\r\n        {`\r\n          @keyframes typing {\r\n            0%, 80%, 100% {\r\n              transform: scale(0.8);\r\n              opacity: 0.5;\r\n            }\r\n            40% {\r\n              transform: scale(1);\r\n              opacity: 1;\r\n            }\r\n          }\r\n\r\n          @keyframes fadeIn {\r\n            from {\r\n              opacity: 0;\r\n              transform: translateY(10px);\r\n            }\r\n            to {\r\n              opacity: 1;\r\n              transform: translateY(0);\r\n            }\r\n          }\r\n\r\n          @media (max-width: 768px) {\r\n            .helpdesk-container {\r\n              height: 100vh;\r\n              margin: 0;\r\n            }\r\n\r\n            .helpdesk-header {\r\n              padding: 1.5rem;\r\n              border-radius: 0;\r\n            }\r\n\r\n            .helpdesk-header h1 {\r\n              font-size: 1.5rem;\r\n            }\r\n\r\n            .helpdesk-messages {\r\n              padding: 1rem;\r\n            }\r\n\r\n            .message {\r\n              max-width: 90%;\r\n            }\r\n\r\n            .helpdesk-input {\r\n              padding: 1rem;\r\n            }\r\n\r\n            .input-container {\r\n              gap: 0.5rem;\r\n            }\r\n\r\n            .send-button {\r\n              padding: 0.75rem 1rem;\r\n              min-width: 60px;\r\n            }\r\n          }\r\n        `}\r\n      </style>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HelpdeskPage;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball-frontend/src/components/helpdesk/HelpdeskPage.jsx b/pickleball-frontend/src/components/helpdesk/HelpdeskPage.jsx
--- a/pickleball-frontend/src/components/helpdesk/HelpdeskPage.jsx	(revision c178c1d9e80f6815b91226b2d10f391611dcb6b4)
+++ b/pickleball-frontend/src/components/helpdesk/HelpdeskPage.jsx	(date 1754935453616)
@@ -14,6 +14,8 @@
   const [error, setError] = useState('');
   const [file, setFile] = useState(null);
   const messagesEndRef = useRef(null);
+  const messagesContainerRef = useRef(null);
+  const [shouldAutoScroll, setShouldAutoScroll] = useState(true);
   const [currentTopic, setCurrentTopic] = useState(null);
   const [showEscalateForm, setShowEscalateForm] = useState(false);
   const [escalateMessage, setEscalateMessage] = useState('');
@@ -21,12 +23,38 @@
 
   // Scroll to bottom on new messages
   const scrollToBottom = () => {
-    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
+    setTimeout(() => {
+      if (messagesEndRef.current) {
+        messagesEndRef.current.scrollIntoView({ 
+          behavior: "smooth",
+          block: 'end',
+          inline: 'nearest'
+        });
+      }
+    }, 150);
   };
 
+  // Scroll to bottom when messages change
   useEffect(() => {
-    scrollToBottom();
-  }, [messages]);
+    if (messages.length > 0 && shouldAutoScroll) {
+      scrollToBottom();
+    }
+  }, [messages, shouldAutoScroll]);
+
+  // Handle scroll events to detect manual scrolling
+  useEffect(() => {
+    const container = messagesContainerRef.current;
+    if (!container) return;
+
+    const handleScroll = () => {
+      const { scrollTop, scrollHeight, clientHeight } = container;
+      const isAtBottom = scrollHeight - scrollTop - clientHeight < 50; // 50px threshold
+      setShouldAutoScroll(isAtBottom);
+    };
+
+    container.addEventListener('scroll', handleScroll);
+    return () => container.removeEventListener('scroll', handleScroll);
+  }, []);
 
   // Load from localStorage on mount
   useEffect(() => {
@@ -49,8 +77,13 @@
       timestamp: new Date().toISOString()
     };
 
-    setMessages(prev => [...prev, userMessage]);
+    // Clear input first for better UX
     setInputMessage('');
+    
+    // Force scroll to bottom when user sends a message
+    setShouldAutoScroll(true);
+    
+    setMessages(prev => [...prev, userMessage]);
     setIsLoading(true);
     setError('');
 
@@ -622,7 +655,7 @@
         <p style={styles.headerSubtitle}>Ask me anything about bookings, memberships, payments, or general inquiries!</p>
       </div>
 
-      <div style={styles.messages}>
+      <div style={styles.messages} ref={messagesContainerRef}>
         {messages.length === 0 && (
           <div style={styles.welcomeMessage}>
             <div style={{ ...styles.message, ...styles.aiMessage }}>
@@ -640,7 +673,7 @@
                 </div>
               </div>
               <div style={styles.messageContent}>
-                <p style={{ fontWeight: 500, marginBottom: '0.5rem' }}>👋 Hello! I'm your AI assistant. I can help you with:</p>
+                <p style={{ fontWeight: 500, marginBottom: '0.5rem' }}>👋 Hello! I'm your Groq AI assistant. I can help you with:</p>
                 <ul style={styles.messageList}>
                   <li style={styles.messageListItem}>📅 Court bookings and reservations</li>
                   <li style={styles.messageListItem}>💳 Membership information and benefits</li>
@@ -661,7 +694,11 @@
             ...styles.message,
             ...(message.sender === 'user' ? styles.userMessage : styles.aiMessage)
           }}>
-            <div style={{ display: 'flex', alignItems: 'flex-end' }}>
+            <div style={{ 
+              display: 'flex', 
+              alignItems: 'flex-end',
+              flexDirection: message.sender === 'user' ? 'row-reverse' : 'row'
+            }}>
               {message.sender === 'ai' ? (
                 <div style={{ 
                   background: alpha(theme.palette.primary.main, 0.1), 
@@ -679,7 +716,7 @@
                   background: alpha(theme.palette.primary.main, 0.2), 
                   borderRadius: '50%', 
                   padding: '0.5rem',
-                  marginRight: '0.75rem',
+                  marginLeft: '0.75rem',
                   display: 'flex',
                   alignItems: 'center',
                   justifyContent: 'center'
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Payment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.entity;\r\n\r\nimport jakarta.persistence.*;\r\nimport lombok.Data;\r\nimport java.time.LocalDateTime;\r\n\r\n@Entity\r\n@Data\r\n@Table(name = \"payment\")\r\npublic class Payment {\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Integer id;\r\n\r\n    @Column(nullable = false, columnDefinition = \"decimal(10,2)\")\r\n    private double amount;\r\n\r\n    @Column(name = \"payment_date\")\r\n    private LocalDateTime paymentDate;\r\n\r\n    @Column(name = \"refund_date\")\r\n    private LocalDateTime refundDate;\r\n\r\n    @Column(name = \"status\", length = 50)\r\n    private String status = \"PENDING\";  // PENDING, PROCESSING, COMPLETED, FAILED, CANCELLED, REFUNDED\r\n\r\n    @Column(name = \"payment_type\", length = 20)\r\n    private String paymentType;  // TOP_UP, BOOKING, REFUND\r\n\r\n    @Column(name = \"payment_method\", length = 50)\r\n    private String paymentMethod;  // BANK_CARD, BANK_TRANSFER, E_WALLET, WALLET, INTERNAL_CREDIT\r\n\r\n    @Column(name = \"transaction_id\", length = 50)\r\n    private String transactionId;\r\n\r\n    @Column(name = \"reference_id\", length = 50)\r\n    private String referenceId;  // For external payment references\r\n\r\n    @Column(name = \"failure_reason\", length = 500)\r\n    private String failureReason;\r\n\r\n    @Column(name = \"retry_count\", nullable = false)\r\n    private Integer retryCount = 0;\r\n\r\n    @Column(name = \"max_retries\", nullable = false)\r\n    private Integer maxRetries = 3;\r\n\r\n    @Column(name = \"expires_at\")\r\n    private LocalDateTime expiresAt;  // For pending payments\r\n\r\n    @Column(name = \"processed_at\")\r\n    private LocalDateTime processedAt;\r\n\r\n    @Column(name = \"created_at\", nullable = false)\r\n    private LocalDateTime createdAt;\r\n\r\n    @Column(name = \"updated_at\")\r\n    private LocalDateTime updatedAt;\r\n\r\n    @Column(name = \"group_booking_id\")\r\n    private String groupBookingId; // UUID字串\r\n\r\n    // 新增：折扣相關字段\r\n    @Column(name = \"discount_amount\", columnDefinition = \"decimal(10,2) default 0.0\")\r\n    private double discountAmount = 0.0;\r\n\r\n    @Column(name = \"original_amount\", columnDefinition = \"decimal(10,2)\")\r\n    private Double originalAmount;\r\n\r\n    @OneToOne(mappedBy = \"payment\")\r\n    private Booking booking;\r\n\r\n    @OneToOne(mappedBy = \"payment\")\r\n    private ClassSession session;\r\n\r\n    @PrePersist\r\n    protected void onCreate() {\r\n        createdAt = LocalDateTime.now();\r\n        updatedAt = LocalDateTime.now();\r\n        if (paymentDate == null) {\r\n            paymentDate = LocalDateTime.now();\r\n        }\r\n    }\r\n\r\n    @PreUpdate\r\n    protected void onUpdate() {\r\n        updatedAt = LocalDateTime.now();\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Payment.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Payment.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Payment.java	(revision c178c1d9e80f6815b91226b2d10f391611dcb6b4)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Payment.java	(date 1754953218669)
@@ -2,6 +2,7 @@
 
 import jakarta.persistence.*;
 import lombok.Data;
+import lombok.ToString;
 import java.time.LocalDateTime;
 
 @Entity
@@ -68,9 +69,11 @@
     private Double originalAmount;
 
     @OneToOne(mappedBy = "payment")
+    @ToString.Exclude
     private Booking booking;
 
     @OneToOne(mappedBy = "payment")
+    @ToString.Exclude
     private ClassSession session;
 
     @PrePersist
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/JoinRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.entity;\r\n\r\nimport jakarta.persistence.*;\r\nimport lombok.Data;\r\nimport java.time.LocalDateTime;\r\n\r\n@Entity\r\n@Data\r\n@Table(name = \"joinrequest\")\r\npublic class JoinRequest {\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Integer id;\r\n\r\n    @Enumerated(EnumType.STRING)\r\n    private Status status = Status.PENDING; // PENDING, APPROVED, REJECTED\r\n\r\n    @Column(name = \"request_date\", nullable = false)\r\n    private LocalDateTime requestDate;\r\n\r\n    @PrePersist\r\n    public void prePersist() {\r\n        if (this.requestDate == null) {\r\n            this.requestDate = LocalDateTime.now();\r\n        }\r\n    }\r\n\r\n    @Column(name = \"request_time\")\r\n    private java.time.LocalDateTime requestTime;\r\n\r\n    @ManyToOne\r\n    @JoinColumn(name = \"member_id\")\r\n    private Member member;\r\n\r\n    @ManyToOne\r\n    @JoinColumn(name = \"match_id\", nullable = false)\r\n    private FriendlyMatch friendlyMatch;\r\n\r\n    public enum Status {\r\n        PENDING, APPROVED, REJECTED\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/JoinRequest.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/JoinRequest.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/JoinRequest.java	(revision c178c1d9e80f6815b91226b2d10f391611dcb6b4)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/JoinRequest.java	(date 1754953208622)
@@ -2,6 +2,7 @@
 
 import jakarta.persistence.*;
 import lombok.Data;
+import lombok.ToString;
 import java.time.LocalDateTime;
 
 @Entity
@@ -30,10 +31,12 @@
 
     @ManyToOne
     @JoinColumn(name = "member_id")
+    @ToString.Exclude
     private Member member;
 
     @ManyToOne
     @JoinColumn(name = "match_id", nullable = false)
+    @ToString.Exclude
     private FriendlyMatch friendlyMatch;
 
     public enum Status {
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/VenueService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.service;\r\n\r\nimport com.pickleball_backend.pickleball.dto.VenueDto;\r\nimport com.pickleball_backend.pickleball.entity.Venue;\r\nimport com.pickleball_backend.pickleball.entity.Court;\r\nimport com.pickleball_backend.pickleball.repository.VenueRepository;\r\nimport com.pickleball_backend.pickleball.repository.CourtRepository;\r\nimport com.pickleball_backend.pickleball.repository.SlotRepository;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.stereotype.Service;\r\nimport java.time.LocalDate;\r\nimport java.time.LocalTime;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.HashSet;\r\n\r\n@Service\r\npublic class VenueService {\r\n    @Autowired\r\n    private VenueRepository venueRepository;\r\n    @Autowired\r\n    private CourtRepository courtRepository;\r\n    @Autowired\r\n    private SlotRepository slotRepository;\r\n\r\n    public Venue createVenue(VenueDto venueDto) {\r\n        // 若需要檢查重複場地，請根據現有欄位自行實作，否則直接建立\r\n        // 例如：可用 name + location + state 作為唯一性檢查\r\n        List<Venue> existing = venueRepository.findAll();\r\n        boolean duplicate = existing.stream().anyMatch(v ->\r\n            v.getName().equalsIgnoreCase(venueDto.getName()) &&\r\n            v.getLocation().equalsIgnoreCase(venueDto.getAddress())\r\n        );\r\n        if (duplicate) {\r\n            throw new IllegalArgumentException(\"Venue with the same name and location already exists\");\r\n        }\r\n        Venue venue = new Venue();\r\n        venue.setName(venueDto.getName());\r\n        venue.setLocation(venueDto.getAddress());\r\n        venue.setDescription(venueDto.getDescription());\r\n        return venueRepository.save(venue);\r\n    }\r\n\r\n    /**\r\n     * 查詢 venue 在指定日期、時間區間、所需人數下的可用 court\r\n     */\r\n    public List<Court> getAvailableCourts(Integer venueId, LocalDate date, LocalTime startTime, LocalTime endTime, int peopleCount) {\r\n        List<Court> courts = courtRepository.findByVenueIn(new HashSet<>(List.of(venueRepository.findById(venueId).orElseThrow())));\r\n        List<Court> availableCourts = new ArrayList<>();\r\n        for (Court court : courts) {\r\n            // 查詢該 court 在此時段是否有可用 slot\r\n            var slots = slotRepository.findByCourtIdAndDateAndIsAvailableTrue(court.getId(), date);\r\n            boolean hasAvailable = slots.stream().anyMatch(slot ->\r\n                !slot.getStartTime().isAfter(endTime) && !slot.getEndTime().isBefore(startTime)\r\n            );\r\n            if (hasAvailable) {\r\n                availableCourts.add(court);\r\n            }\r\n        }\r\n        // 直接返回所有可用場地，不再根據人數裁剪\r\n        return availableCourts;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/VenueService.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/VenueService.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/VenueService.java	(revision c178c1d9e80f6815b91226b2d10f391611dcb6b4)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/VenueService.java	(date 1754942494156)
@@ -6,6 +6,7 @@
 import com.pickleball_backend.pickleball.repository.VenueRepository;
 import com.pickleball_backend.pickleball.repository.CourtRepository;
 import com.pickleball_backend.pickleball.repository.SlotRepository;
+import com.pickleball_backend.pickleball.repository.BookingRepository;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Service;
 import java.time.LocalDate;
@@ -22,6 +23,8 @@
     private CourtRepository courtRepository;
     @Autowired
     private SlotRepository slotRepository;
+    @Autowired
+    private BookingRepository bookingRepository;
 
     public Venue createVenue(VenueDto venueDto) {
         // 若需要檢查重複場地，請根據現有欄位自行實作，否則直接建立
@@ -53,7 +56,14 @@
             boolean hasAvailable = slots.stream().anyMatch(slot ->
                 !slot.getStartTime().isAfter(endTime) && !slot.getEndTime().isBefore(startTime)
             );
-            if (hasAvailable) {
+            
+            // 新增：檢查是否有與現有預訂的衝突
+            boolean hasBookingConflict = bookingRepository.existsActiveBookingForCourtAndTime(
+                court.getId(), date, startTime, endTime
+            );
+            
+            // 只有沒有slot衝突且沒有預訂衝突的場地才可用
+            if (hasAvailable && !hasBookingConflict) {
                 availableCourts.add(court);
             }
         }
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/AdminDashboardServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.service;\r\n\r\nimport com.pickleball_backend.pickleball.dto.AdminBookingDto;\r\nimport com.pickleball_backend.pickleball.dto.AdminUserDto;\r\nimport com.pickleball_backend.pickleball.dto.CancellationRequestDto;\r\nimport com.pickleball_backend.pickleball.entity.*;\r\nimport com.pickleball_backend.pickleball.repository.BookingRepository;\r\nimport com.pickleball_backend.pickleball.repository.CourtRepository;\r\nimport com.pickleball_backend.pickleball.repository.UserRepository;\r\nimport com.pickleball_backend.pickleball.repository.BookingSlotRepository;\r\nimport com.pickleball_backend.pickleball.repository.SlotRepository;\r\nimport com.pickleball_backend.pickleball.repository.PaymentRepository;\r\nimport com.pickleball_backend.pickleball.repository.MemberRepository;\r\nimport com.pickleball_backend.pickleball.repository.WalletRepository;\r\nimport com.pickleball_backend.pickleball.repository.WalletTransactionRepository;\r\nimport com.pickleball_backend.pickleball.repository.UserAccountRepository;\r\nimport com.pickleball_backend.pickleball.repository.CancellationRequestRepository;\r\nimport com.pickleball_backend.pickleball.service.EmailService;\r\nimport com.pickleball_backend.pickleball.repository.FeedbackRepository;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.apache.poi.ss.usermodel.Row;\r\nimport org.springframework.data.domain.Page;\r\nimport org.springframework.data.domain.Pageable;\r\nimport org.springframework.stereotype.Service;\r\nimport org.springframework.transaction.annotation.Transactional;\r\nimport java.util.List;\r\nimport java.util.ArrayList;\r\nimport java.util.stream.Collectors;\r\nimport org.springframework.util.StringUtils;\r\nimport java.time.LocalDate;\r\nimport java.time.format.DateTimeFormatter;\r\nimport com.pickleball_backend.pickleball.dto.DashboardSummaryDto;\r\nimport com.pickleball_backend.pickleball.repository.FeedbackRepository;\r\nimport com.pickleball_backend.pickleball.dto.RecentActivityDto;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.core.io.InputStreamResource;\r\nimport org.springframework.http.HttpHeaders;\r\nimport org.springframework.http.MediaType;\r\nimport org.springframework.http.ResponseEntity;\r\nimport com.pickleball_backend.pickleball.dto.ReportRequestDto;\r\nimport org.apache.poi.ss.usermodel.*;\r\nimport org.apache.poi.xssf.usermodel.XSSFWorkbook;\r\nimport com.lowagie.text.*;\r\nimport com.lowagie.text.pdf.*;\r\nimport java.nio.charset.StandardCharsets;\r\nimport java.io.ByteArrayOutputStream;\r\nimport java.util.Map;\r\nimport com.pickleball_backend.pickleball.service.ChartService;\r\nimport java.awt.image.BufferedImage;\r\nimport java.util.HashMap;\r\nimport java.awt.Color;\r\n\r\n@Service\r\n@RequiredArgsConstructor\r\npublic class AdminDashboardServiceImpl implements AdminDashboardService {\r\n\r\n    private final BookingSlotRepository bookingSlotRepository;\r\n    private final SlotRepository slotRepository;\r\n    private final PaymentRepository paymentRepository;\r\n    private final EmailService emailService;\r\n    private final MemberRepository memberRepository;\r\n    private final UserRepository userRepository;\r\n    private final WalletRepository walletRepository;\r\n    private final WalletTransactionRepository walletTransactionRepository;\r\n    private final UserAccountRepository userAccountRepository;\r\n    private final CancellationRequestRepository cancellationRequestRepository;\r\n    private final BookingRepository bookingRepository;\r\n    private final CourtRepository courtRepository;\r\n    private final FeedbackRepository feedbackRepository;\r\n    private final ChartService chartService;\r\n\r\n    @Override\r\n    public List<AdminUserDto> getAllUsers() {\r\n        return userRepository.findAll().stream()\r\n                .map(this::convertToAdminUserDto)\r\n                .collect(Collectors.toList());\r\n    }\r\n\r\n    @Override\r\n    public long getTotalUserCount() {\r\n        return userRepository.count();\r\n    }\r\n\r\n\r\n    @Override\r\n    public Page<AdminBookingDto> getAllBookings(Pageable pageable, String search, String status, String startDate, String endDate) {\r\n        try {\r\n            System.out.println(\"AdminDashboardService: getAllBookings called with filters - search: '\" + search + \"', status: '\" + status + \"', startDate: '\" + startDate + \"', endDate: '\" + endDate + \"'\");\r\n            \r\n            // 转换日期字符串为 LocalDate\r\n            java.time.LocalDate startDateLocal = null;\r\n            java.time.LocalDate endDateLocal = null;\r\n            \r\n            if (startDate != null && !startDate.trim().isEmpty()) {\r\n                try {\r\n                    startDateLocal = java.time.LocalDate.parse(startDate);\r\n                } catch (Exception e) {\r\n                    System.err.println(\"Error parsing startDate: \" + startDate + \" - \" + e.getMessage());\r\n                }\r\n            }\r\n            \r\n            if (endDate != null && !endDate.trim().isEmpty()) {\r\n                try {\r\n                    endDateLocal = java.time.LocalDate.parse(endDate);\r\n                } catch (Exception e) {\r\n                    System.err.println(\"Error parsing endDate: \" + endDate + \" - \" + e.getMessage());\r\n            }\r\n            }\r\n            \r\n            // 使用带筛选条件的查询\r\n            Page<Booking> bookings = bookingRepository.findByAdminFilters(\r\n                search != null && !search.trim().isEmpty() ? search.trim() : null,\r\n                status != null && !status.trim().isEmpty() ? status.trim() : null,\r\n                startDateLocal,\r\n                endDateLocal,\r\n                pageable\r\n            );\r\n            \r\n            System.out.println(\"AdminDashboardService: Found \" + bookings.getTotalElements() + \" total bookings, \" + bookings.getContent().size() + \" on current page\");\r\n            System.out.println(\"AdminDashboardService: Page info - page: \" + pageable.getPageNumber() + \", size: \" + pageable.getPageSize());\r\n            \r\n            // 转换为 DTO\r\n            List<AdminBookingDto> dtos = bookings.getContent().stream()\r\n                .map(b -> {\r\n                    try {\r\n                        return convertToAdminBookingDto(b);\r\n                    } catch (Exception e) {\r\n                        System.err.println(\"Error converting booking \" + b.getId() + \": \" + e.getMessage());\r\n                        e.printStackTrace();\r\n                        // 返回一个基本的 DTO 避免整个请求失败\r\n                        AdminBookingDto basicDto = new AdminBookingDto();\r\n                        basicDto.setId(b.getId());\r\n                        basicDto.setStatus(b.getStatus());\r\n                        basicDto.setTotalAmount(b.getTotalAmount());\r\n                        basicDto.setBookingDate(b.getBookingDate());\r\n                        return basicDto;\r\n                    }\r\n                })\r\n                .collect(java.util.stream.Collectors.toList());\r\n            \r\n            System.out.println(\"AdminDashboardService: Converted \" + dtos.size() + \" DTOs\");\r\n            return new org.springframework.data.domain.PageImpl<>(dtos, pageable, bookings.getTotalElements());\r\n        } catch (Exception e) {\r\n            System.err.println(\"Error in getAllBookings: \" + e.getMessage());\r\n            e.printStackTrace();\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    @Transactional\r\n    public Object cancelBookingForAdmin(Integer bookingId, String adminUsername, String adminRemark) {\r\n        Booking booking = bookingRepository.findByIdWithCancellation(bookingId)\r\n                .orElseThrow(() -> new RuntimeException(\"Booking not found\"));\r\n        BookingSlot bookingSlot = booking.getBookingSlots() != null && !booking.getBookingSlots().isEmpty() ? booking.getBookingSlots().get(0) : null;\r\n        Slot slot = bookingSlot != null ? bookingSlot.getSlot() : null;\r\n        Court court = slot != null ? courtRepository.findById(slot.getCourtId())\r\n                .orElseThrow(() -> new RuntimeException(\"Court not found\")) : null;\r\n        // 1. Free up the slot\r\n        if (slot != null) {\r\n            slot.setAvailable(true);\r\n            slotRepository.save(slot);\r\n        }\r\n        // 2. Update booking status\r\n        booking.setStatus(\"CANCELLED\");\r\n        bookingRepository.save(booking);\r\n        // 3. Update booking slot status\r\n        if (bookingSlot != null) {\r\n            bookingSlot.setStatus(\"CANCELLED\");\r\n            bookingSlotRepository.save(bookingSlot);\r\n        }\r\n        // 4. 退款50%到钱包\r\n        double refund = booking.getTotalAmount() * 0.5;\r\n        Wallet wallet = walletRepository.findByMemberId(booking.getMember().getId())\r\n            .orElseThrow(() -> new RuntimeException(\"Wallet not found\"));\r\n        \r\n        double balanceBefore = wallet.getBalance();\r\n        wallet.setBalance(wallet.getBalance() + refund);\r\n        wallet.setTotalSpent(wallet.getTotalSpent() - refund); // 退款時減少總支出\r\n        walletRepository.save(wallet);\r\n        \r\n        // 创建退款交易记录\r\n        createWalletTransaction(wallet, \"REFUND\", refund, balanceBefore, wallet.getBalance(), \r\n                              \"BOOKING\", booking.getId(), \"Booking cancellation refund (50%) - Admin cancelled\");\r\n\r\n        // 5. 更新用户统计数据（减少预订小时数）\r\n        User user = booking.getMember().getUser();\r\n        double cancelledHours = booking.getBookingSlots().stream()\r\n                .mapToDouble(bs -> bs.getSlot().getDurationHours())\r\n                .sum();\r\n        user.setBookingHours(Math.max(0, user.getBookingHours() - cancelledHours));\r\n        user.setAmountSpent(Math.max(0, user.getAmountSpent() - booking.getTotalAmount()));\r\n        userRepository.save(user);\r\n\r\n        // 6. 更新支付状态\r\n        Payment payment = booking.getPayment();\r\n        if (payment != null) {\r\n            payment.setStatus(\"REFUNDED\");\r\n            paymentRepository.save(payment);\r\n        }\r\n        // 7. 保存管理员备注和操作人到取消请求（如有）\r\n        CancellationRequest cancellationRequest = booking.getCancellationRequest();\r\n        if (cancellationRequest != null) {\r\n            if (org.springframework.util.StringUtils.hasText(adminRemark)) {\r\n                cancellationRequest.setAdminRemark(adminRemark);\r\n            }\r\n            if (org.springframework.util.StringUtils.hasText(adminUsername)) {\r\n                // 查找管理员 user id\r\n                User adminUser = userRepository.findByUserAccount_Username(adminUsername)\r\n                        .orElseThrow(() -> new RuntimeException(\"Admin user not found\"));\r\n                cancellationRequest.setApprovedBy(adminUser.getId()); // 假设实体字段为 approvedBy\r\n            }\r\n            cancellationRequestRepository.save(cancellationRequest);\r\n        }\r\n        // 6. Send admin cancellation notification\r\n        emailService.sendAdminCancellationNotification(\r\n                booking.getMember().getUser().getEmail(),\r\n                booking,\r\n                slot,\r\n                court != null ? court.getName() : \"Court not found\",\r\n                adminRemark\r\n        );\r\n        return java.util.Map.of(\r\n                \"success\", true,\r\n                \"message\", \"Booking cancelled successfully by admin.\"\r\n        );\r\n    }\r\n\r\n    @Override\r\n    public double getGlobalAverageRating() {\r\n        Double avg = feedbackRepository.findAll().stream()\r\n            .mapToInt(f -> f.getRating() != null ? f.getRating() : 0)\r\n            .average()\r\n            .orElse(0.0);\r\n        return avg;\r\n    }\r\n\r\n    @Override\r\n    public DashboardSummaryDto getDashboardSummary() {\r\n        DashboardSummaryDto dto = new DashboardSummaryDto();\r\n        // 当前统计周期：本月\r\n        java.time.LocalDate now = java.time.LocalDate.now();\r\n        java.time.YearMonth thisMonth = java.time.YearMonth.from(now);\r\n        java.time.YearMonth lastMonth = thisMonth.minusMonths(1);\r\n        java.time.LocalDate startOfThisMonthDate = thisMonth.atDay(1);\r\n        java.time.LocalDate startOfLastMonthDate = lastMonth.atDay(1);\r\n        java.time.LocalDate endOfLastMonthDate = startOfThisMonthDate.minusDays(1);\r\n        java.time.LocalDateTime startOfLastMonth = startOfLastMonthDate.atStartOfDay();\r\n        java.time.LocalDateTime endOfLastMonth = endOfLastMonthDate.atTime(23, 59, 59);\r\n\r\n        // 1. 总用户数\r\n        long totalUsers = userRepository.count();\r\n        dto.setTotalUsers(totalUsers);\r\n        // 2. 总预订数\r\n        long totalBookings = bookingRepository.count();\r\n        dto.setTotalBookings(totalBookings);\r\n        // 3. 总收入\r\n        Double totalRevenue = paymentRepository.sumTotalRevenue();\r\n        dto.setTotalRevenue(totalRevenue != null ? totalRevenue : 0.0);\r\n        // 4. 平均评分\r\n        Double averageRating = feedbackRepository.findAverageRating();\r\n        dto.setAverageRating(averageRating != null ? averageRating : 0.0);\r\n\r\n        // 5. 上月数据\r\n        // 5.1 上月用户数（注册时间在上月）\r\n        Long lastMonthUsers = userRepository.countByCreatedAtBetween(startOfLastMonth, endOfLastMonth);\r\n        // 5.2 上月预订数（预订时间在上月）\r\n        Long lastMonthBookings = bookingRepository.countByBookingDateBetween(startOfLastMonth, endOfLastMonth);\r\n        // 5.3 上月收入（支付时间在上月）\r\n        Double lastMonthRevenue = paymentRepository.sumTotalRevenueByDate(startOfLastMonth, endOfLastMonth);\r\n        // 5.4 上月平均评分（评分时间在上月）\r\n        Double lastMonthAvgRating = feedbackRepository.findAverageRatingByDate(startOfLastMonth, endOfLastMonth);\r\n\r\n        // 6. 变化率计算（环比 = (本月-上月)/上月*100%）\r\n        dto.setTotalUsersChange(calcChangeRate(totalUsers, lastMonthUsers));\r\n        dto.setTotalBookingsChange(calcChangeRate(totalBookings, lastMonthBookings));\r\n        dto.setTotalRevenueChange(calcChangeRate(totalRevenue, lastMonthRevenue));\r\n        dto.setAverageRatingChange(calcChangeRate(averageRating, lastMonthAvgRating));\r\n        return dto;\r\n    }\r\n\r\n    @Override\r\n    public Object getBookingTrends(String range) {\r\n        java.util.List<String> labels = new java.util.ArrayList<>();\r\n        java.util.List<Long> data = new java.util.ArrayList<>();\r\n        if (\"7d\".equalsIgnoreCase(range)) {\r\n            java.time.LocalDate today = java.time.LocalDate.now();\r\n            for (int i = 6; i >= 0; i--) {\r\n                java.time.LocalDate day = today.minusDays(i);\r\n                java.time.LocalDateTime start = day.atStartOfDay();\r\n                java.time.LocalDateTime end = day.atTime(23, 59, 59);\r\n                long count = bookingRepository.countByBookingDateBetween(start, end);\r\n                labels.add(day.toString()); // yyyy-MM-dd\r\n                data.add(count);\r\n            }\r\n            return java.util.Map.of(\"labels\", labels, \"data\", data);\r\n        } else if (\"30d\".equalsIgnoreCase(range)) {\r\n            java.time.LocalDate today = java.time.LocalDate.now();\r\n            for (int i = 29; i >= 0; i--) {\r\n                java.time.LocalDate day = today.minusDays(i);\r\n                java.time.LocalDateTime start = day.atStartOfDay();\r\n                java.time.LocalDateTime end = day.atTime(23, 59, 59);\r\n                long count = bookingRepository.countByBookingDateBetween(start, end);\r\n                labels.add(day.toString());\r\n                data.add(count);\r\n            }\r\n            return java.util.Map.of(\"labels\", labels, \"data\", data);\r\n        } else if (\"12m\".equalsIgnoreCase(range)) {\r\n            java.time.YearMonth thisMonth = java.time.YearMonth.now();\r\n            for (int i = 11; i >= 0; i--) {\r\n                java.time.YearMonth ym = thisMonth.minusMonths(i);\r\n                java.time.LocalDateTime start = ym.atDay(1).atStartOfDay();\r\n                java.time.LocalDateTime end = ym.atEndOfMonth().atTime(23, 59, 59);\r\n                long count = bookingRepository.countByBookingDateBetween(start, end);\r\n                labels.add(ym.toString()); // yyyy-MM\r\n                data.add(count);\r\n            }\r\n            return java.util.Map.of(\"labels\", labels, \"data\", data);\r\n        } else {\r\n            // 默认返回最近7天\r\n            java.time.LocalDate today = java.time.LocalDate.now();\r\n            for (int i = 6; i >= 0; i--) {\r\n                java.time.LocalDate day = today.minusDays(i);\r\n                java.time.LocalDateTime start = day.atStartOfDay();\r\n                java.time.LocalDateTime end = day.atTime(23, 59, 59);\r\n                long count = bookingRepository.countByBookingDateBetween(start, end);\r\n                labels.add(day.toString());\r\n                data.add(count);\r\n            }\r\n            return java.util.Map.of(\"labels\", labels, \"data\", data);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public Object getRevenueTrends(String range) {\r\n        java.util.List<String> labels = new java.util.ArrayList<>();\r\n        java.util.List<Double> data = new java.util.ArrayList<>();\r\n        if (\"7d\".equalsIgnoreCase(range)) {\r\n            java.time.LocalDate today = java.time.LocalDate.now();\r\n            for (int i = 6; i >= 0; i--) {\r\n                java.time.LocalDate day = today.minusDays(i);\r\n                java.time.LocalDateTime start = day.atStartOfDay();\r\n                java.time.LocalDateTime end = day.atTime(23, 59, 59);\r\n                Double revenue = paymentRepository.sumRevenueByDateAndType(start, end, \"BOOKING\");\r\n                data.add(revenue != null ? revenue : 0.0);\r\n                labels.add(day.toString());\r\n            }\r\n            return java.util.Map.of(\"labels\", labels, \"data\", data);\r\n        } else if (\"30d\".equalsIgnoreCase(range)) {\r\n            java.time.LocalDate today = java.time.LocalDate.now();\r\n            for (int i = 29; i >= 0; i--) {\r\n                java.time.LocalDate day = today.minusDays(i);\r\n                java.time.LocalDateTime start = day.atStartOfDay();\r\n                java.time.LocalDateTime end = day.atTime(23, 59, 59);\r\n                Double revenue = paymentRepository.sumRevenueByDateAndType(start, end, \"BOOKING\");\r\n                data.add(revenue != null ? revenue : 0.0);\r\n                labels.add(day.toString());\r\n            }\r\n            return java.util.Map.of(\"labels\", labels, \"data\", data);\r\n        } else if (\"12m\".equalsIgnoreCase(range)) {\r\n            java.time.YearMonth thisMonth = java.time.YearMonth.now();\r\n            for (int i = 11; i >= 0; i--) {\r\n                java.time.YearMonth ym = thisMonth.minusMonths(i);\r\n                java.time.LocalDateTime start = ym.atDay(1).atStartOfDay();\r\n                java.time.LocalDateTime end = ym.atEndOfMonth().atTime(23, 59, 59);\r\n                Double revenue = paymentRepository.sumRevenueByDateAndType(start, end, \"BOOKING\");\r\n                data.add(revenue != null ? revenue : 0.0);\r\n                labels.add(ym.toString());\r\n            }\r\n            return java.util.Map.of(\"labels\", labels, \"data\", data);\r\n        } else {\r\n            // 默认返回最近7天\r\n            java.time.LocalDate today = java.time.LocalDate.now();\r\n            for (int i = 6; i >= 0; i--) {\r\n                java.time.LocalDate day = today.minusDays(i);\r\n                java.time.LocalDateTime start = day.atStartOfDay();\r\n                java.time.LocalDateTime end = day.atTime(23, 59, 59);\r\n                Double revenue = paymentRepository.sumRevenueByDateAndType(start, end, \"BOOKING\");\r\n                data.add(revenue != null ? revenue : 0.0);\r\n                labels.add(day.toString());\r\n            }\r\n            return java.util.Map.of(\"labels\", labels, \"data\", data);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public List<RecentActivityDto> getRecentActivity() {\r\n        List<RecentActivityDto> activities = new ArrayList<>();\r\n        // 最近预订\r\n        bookingRepository.findTop5ByOrderByBookingDateDesc().forEach(b -> {\r\n            try {\r\n                RecentActivityDto dto = new RecentActivityDto();\r\n                dto.setType(\"booking\");\r\n                String userName = \"Unknown User\";\r\n                if (b.getMember() != null && b.getMember().getUser() != null && b.getMember().getUser().getName() != null && !b.getMember().getUser().getName().trim().isEmpty()) {\r\n                    userName = b.getMember().getUser().getName();\r\n                }\r\n                dto.setUser(userName);\r\n                // 获取场地名\r\n                String courtName = \"court\";\r\n                if (b.getBookingSlots() != null && !b.getBookingSlots().isEmpty()) {\r\n                    Integer courtId = null;\r\n                    if (b.getBookingSlots().get(0) != null && b.getBookingSlots().get(0).getSlot() != null) {\r\n                        courtId = b.getBookingSlots().get(0).getSlot().getCourtId();\r\n                    }\r\n                    if (courtId != null) {\r\n                        try {\r\n                            courtName = courtRepository.findById(courtId).map(c -> c.getName()).orElse(\"court\");\r\n                        } catch (Exception ignore) {}\r\n                    }\r\n                }\r\n                dto.setDetail(\"booked \" + courtName);\r\n                dto.setTimestamp(b.getBookingDate());\r\n                dto.setIcon(\"\\uD83D\\uDCC5\"); // \uD83D\uDCC5\r\n                activities.add(dto);\r\n            } catch (Exception ignore) {}\r\n        });\r\n        // 最近取消预订\r\n        cancellationRequestRepository.findTop3ByOrderByRequestDateDesc().forEach(cr -> {\r\n            try {\r\n                RecentActivityDto dto = new RecentActivityDto();\r\n                dto.setType(\"cancellation\");\r\n                String userName = \"Unknown User\";\r\n                if (cr.getBooking() != null && cr.getBooking().getMember() != null &&\r\n                    cr.getBooking().getMember().getUser() != null &&\r\n                    cr.getBooking().getMember().getUser().getName() != null && \r\n                    !cr.getBooking().getMember().getUser().getName().trim().isEmpty()) {\r\n                    userName = cr.getBooking().getMember().getUser().getName();\r\n                }\r\n                dto.setUser(userName);\r\n                // 获取场地名\r\n                String courtName = \"court\";\r\n                if (cr.getBooking() != null && cr.getBooking().getBookingSlots() != null && !cr.getBooking().getBookingSlots().isEmpty()) {\r\n                    Integer courtId = null;\r\n                    if (cr.getBooking().getBookingSlots().get(0) != null && cr.getBooking().getBookingSlots().get(0).getSlot() != null) {\r\n                        courtId = cr.getBooking().getBookingSlots().get(0).getSlot().getCourtId();\r\n                    }\r\n                    if (courtId != null) {\r\n                        try {\r\n                            courtName = courtRepository.findById(courtId).map(c -> c.getName()).orElse(\"court\");\r\n                        } catch (Exception ignore) {}\r\n                    }\r\n                }\r\n                dto.setDetail(\"cancelled \" + courtName + \" booking\");\r\n                dto.setTimestamp(cr.getRequestDate());\r\n                dto.setIcon(\"\\u274C\"); // ❌\r\n                activities.add(dto);\r\n            } catch (Exception ignore) {}\r\n        });\r\n        // 最近注册\r\n        userRepository.findTop3ByOrderByCreatedAtDesc().forEach(u -> {\r\n            try {\r\n                RecentActivityDto dto = new RecentActivityDto();\r\n                dto.setType(\"user\");\r\n                dto.setUser(u.getName() != null && !u.getName().trim().isEmpty() ? u.getName() : \"Unknown User\");\r\n                dto.setDetail(\"created an account\");\r\n                dto.setTimestamp(u.getCreatedAt());\r\n                dto.setIcon(\"\\uD83D\\uDC64\"); // \uD83D\uDC64\r\n                activities.add(dto);\r\n            } catch (Exception ignore) {}\r\n        });\r\n        // 最近评价\r\n        feedbackRepository.findTop2ByOrderByCreatedAtDesc().forEach(f -> {\r\n            try {\r\n                RecentActivityDto dto = new RecentActivityDto();\r\n                dto.setType(\"review\");\r\n                String reviewer = \"Unknown User\";\r\n                if (f.getUser() != null && f.getUser().getName() != null && !f.getUser().getName().trim().isEmpty()) {\r\n                    reviewer = f.getUser().getName();\r\n                }\r\n                dto.setUser(reviewer);\r\n                dto.setDetail(\"rated a venue \" + (f.getRating() != null ? f.getRating() : \"\") + \" stars\");\r\n                dto.setTimestamp(f.getCreatedAt());\r\n                dto.setIcon(\"\\u2B50\"); // ⭐\r\n                activities.add(dto);\r\n            } catch (Exception ignore) {}\r\n        });\r\n        // 按时间倒序取前10条\r\n        return activities.stream()\r\n                .filter(a -> a.getTimestamp() != null)\r\n                .sorted((a, b) -> b.getTimestamp().compareTo(a.getTimestamp()))\r\n                .limit(10)\r\n                .collect(Collectors.toList());\r\n    }\r\n\r\n    @Override\r\n    public ResponseEntity<InputStreamResource> generateReport(ReportRequestDto request) throws Exception {\r\n        List<Booking> bookings = bookingRepository.findAll();\r\n        Map<String, Boolean> filters = request.getFilters() != null ? request.getFilters() : new java.util.HashMap<>();\r\n        byte[] bytes;\r\n        String ext;\r\n        String contentType;\r\n        String format = request.getFormat();\r\n        if (format == null) {\r\n            format = \"pdf\";\r\n        }\r\n        switch (format.toLowerCase()) {\r\n            case \"excel\":\r\n                bytes = generateExcelReport(bookings, filters);\r\n                ext = \"xlsx\";\r\n                contentType = \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\";\r\n                break;\r\n            case \"csv\":\r\n                bytes = generateCsvReport(bookings, filters);\r\n                ext = \"csv\";\r\n                contentType = \"text/csv\";\r\n                break;\r\n            case \"pdf\":\r\n                bytes = generateComplexPdfReport(request);\r\n                ext = \"pdf\";\r\n                contentType = \"application/pdf\";\r\n                break;\r\n            default:\r\n                throw new IllegalArgumentException(\"Unsupported format: \" + format);\r\n        }\r\n        String filename = \"report.\" + ext;\r\n        InputStreamResource resource = new InputStreamResource(new java.io.ByteArrayInputStream(bytes));\r\n        return ResponseEntity.ok()\r\n                .header(HttpHeaders.CONTENT_DISPOSITION, \"attachment; filename=\" + filename)\r\n                .contentType(MediaType.parseMediaType(contentType))\r\n                .contentLength(bytes.length)\r\n                .body(resource);\r\n    }\r\n\r\n    private byte[] generateExcelReport(List<Booking> bookings, Map<String, Boolean> filters) throws Exception {\r\n        boolean includeUser = filters.getOrDefault(\"includeUsers\", true);\r\n        boolean includeBooking = filters.getOrDefault(\"includeBookings\", true);\r\n        boolean includeRevenue = filters.getOrDefault(\"includeRevenue\", true);\r\n        Workbook workbook = new XSSFWorkbook();\r\n        Sheet sheet = workbook.createSheet(\"Bookings\");\r\n        Row header = sheet.createRow(0);\r\n        int col = 0;\r\n        header.createCell(col++).setCellValue(\"ID\");\r\n        if (includeUser) header.createCell(col++).setCellValue(\"User\");\r\n        if (includeBooking) {\r\n            header.createCell(col++).setCellValue(\"Date\");\r\n            header.createCell(col++).setCellValue(\"Status\");\r\n        }\r\n        if (includeRevenue) header.createCell(col++).setCellValue(\"Amount\");\r\n        int rowIdx = 1;\r\n        for (Booking b : bookings) {\r\n            Row row = sheet.createRow(rowIdx++);\r\n            int c = 0;\r\n            row.createCell(c++).setCellValue(b.getId());\r\n            if (includeUser) {\r\n                String user = (b.getMember() != null && b.getMember().getUser() != null) ? b.getMember().getUser().getName() : \"\";\r\n                row.createCell(c++).setCellValue(user);\r\n            }\r\n            if (includeBooking) {\r\n                row.createCell(c++).setCellValue(b.getBookingDate() != null ? b.getBookingDate().toString() : \"\");\r\n                row.createCell(c++).setCellValue(b.getStatus());\r\n            }\r\n            if (includeRevenue) {\r\n                row.createCell(c++).setCellValue(b.getTotalAmount());\r\n            }\r\n        }\r\n        ByteArrayOutputStream out = new ByteArrayOutputStream();\r\n        workbook.write(out);\r\n        workbook.close();\r\n        return out.toByteArray();\r\n    }\r\n\r\n    private byte[] generateCsvReport(List<Booking> bookings, Map<String, Boolean> filters) {\r\n        boolean includeUser = filters.getOrDefault(\"includeUsers\", true);\r\n        boolean includeBooking = filters.getOrDefault(\"includeBookings\", true);\r\n        boolean includeRevenue = filters.getOrDefault(\"includeRevenue\", true);\r\n        StringBuilder sb = new StringBuilder();\r\n        sb.append(\"ID\");\r\n        if (includeUser) sb.append(\",User\");\r\n        if (includeBooking) sb.append(\",Date,Status\");\r\n        if (includeRevenue) sb.append(\",Amount\");\r\n        sb.append(\"\\n\");\r\n        for (Booking b : bookings) {\r\n            sb.append(b.getId());\r\n            if (includeUser) {\r\n                String user = (b.getMember() != null && b.getMember().getUser() != null) ? b.getMember().getUser().getName() : \"\";\r\n                sb.append(\",\").append('\"').append(user.replace(\"\\\"\", \"\\\"\\\"\")).append('\"');\r\n            }\r\n            if (includeBooking) {\r\n                sb.append(\",\").append(b.getBookingDate() != null ? b.getBookingDate().toString() : \"\");\r\n                sb.append(\",\").append(b.getStatus());\r\n            }\r\n            if (includeRevenue) {\r\n                sb.append(\",\").append(b.getTotalAmount());\r\n            }\r\n            sb.append(\"\\n\");\r\n        }\r\n        return sb.toString().getBytes(StandardCharsets.UTF_8);\r\n    }\r\n\r\n    private byte[] generatePdfReport(List<Booking> bookings, Map<String, Boolean> filters) throws Exception {\r\n        boolean includeUser = filters.getOrDefault(\"includeUsers\", true);\r\n        boolean includeBooking = filters.getOrDefault(\"includeBookings\", true);\r\n        boolean includeRevenue = filters.getOrDefault(\"includeRevenue\", true);\r\n        ByteArrayOutputStream out = new ByteArrayOutputStream();\r\n        Document document = new Document();\r\n        PdfWriter.getInstance(document, out);\r\n        document.open();\r\n        document.add(new Paragraph(\"Booking Report\"));\r\n        int colCount = 1 + (includeUser ? 1 : 0) + (includeBooking ? 2 : 0) + (includeRevenue ? 1 : 0);\r\n        PdfPTable table = new PdfPTable(colCount);\r\n        table.addCell(\"ID\");\r\n        if (includeUser) table.addCell(\"User\");\r\n        if (includeBooking) {\r\n            table.addCell(\"Date\");\r\n            table.addCell(\"Status\");\r\n        }\r\n        if (includeRevenue) table.addCell(\"Amount\");\r\n        for (Booking b : bookings) {\r\n            table.addCell(String.valueOf(b.getId()));\r\n            if (includeUser) {\r\n                String user = (b.getMember() != null && b.getMember().getUser() != null) ? b.getMember().getUser().getName() : \"\";\r\n                table.addCell(user);\r\n            }\r\n            if (includeBooking) {\r\n                table.addCell(b.getBookingDate() != null ? b.getBookingDate().toString() : \"\");\r\n                table.addCell(b.getStatus());\r\n            }\r\n            if (includeRevenue) {\r\n                table.addCell(String.valueOf(b.getTotalAmount()));\r\n            }\r\n        }\r\n        document.add(table);\r\n        document.close();\r\n        return out.toByteArray();\r\n    }\r\n\r\n    // 复杂PDF报表生成\r\n    private byte[] generateComplexPdfReport(ReportRequestDto request) throws Exception {\r\n        ByteArrayOutputStream out = new ByteArrayOutputStream();\r\n        Document document = new Document();\r\n        PdfWriter.getInstance(document, out);\r\n        document.open();\r\n\r\n        boolean hasContent = false;\r\n        \r\n        // 获取格式化选项\r\n        Map<String, Object> formatting = new HashMap<>();\r\n        if (request.getMetadata() != null && request.getMetadata().containsKey(\"formatting\")) {\r\n            formatting = (Map<String, Object>) request.getMetadata().get(\"formatting\");\r\n        }\r\n        boolean includeHeaderFooter = (Boolean) formatting.getOrDefault(\"includeHeaderFooter\", true);\r\n        boolean useBrandColors = (Boolean) formatting.getOrDefault(\"useBrandColors\", true);\r\n        boolean includeAppendix = (Boolean) formatting.getOrDefault(\"includeAppendix\", false);\r\n\r\n        // 1. 标题、公司信息\r\n        Map<String, Object> metadata = request.getMetadata();\r\n        if (metadata != null) {\r\n            // 页眉\r\n            if (includeHeaderFooter) {\r\n                document.add(new Paragraph(\"Picklefy Pickleball Club\", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 14)));\r\n                document.add(new Paragraph(\"Professional Pickleball Court Management System\", FontFactory.getFont(FontFactory.HELVETICA, 10)));\r\n                document.add(new Paragraph(\" \"));\r\n            }\r\n            \r\n            document.add(new Paragraph((String) metadata.getOrDefault(\"title\", \"Report\"), FontFactory.getFont(FontFactory.HELVETICA_BOLD, 18)));\r\n            hasContent = true;\r\n            Map<String, Object> company = (Map<String, Object>) metadata.getOrDefault(\"company\", java.util.Collections.emptyMap());\r\n            document.add(new Paragraph((String) company.getOrDefault(\"name\", \"\"), FontFactory.getFont(FontFactory.HELVETICA, 12)));\r\n            document.add(new Paragraph(\"Period: \" + metadata.getOrDefault(\"period\", \"\"), FontFactory.getFont(FontFactory.HELVETICA, 10)));\r\n            document.add(new Paragraph(\"Generated at: \" + metadata.getOrDefault(\"generatedAt\", \"\"), FontFactory.getFont(FontFactory.HELVETICA, 10)));\r\n            document.add(new Paragraph(\" \"));\r\n        }\r\n\r\n        java.util.List<String> sections = metadata != null ? (java.util.List<String>) metadata.getOrDefault(\"sections\", java.util.List.of()) : java.util.List.of();\r\n        Map<String, Object> content = request.getContent();\r\n\r\n        if (sections == null || sections.isEmpty()) {\r\n            document.add(new Paragraph(\"No report sections selected.\"));\r\n            hasContent = true;\r\n        } else {\r\n            for (String section : sections) {\r\n                document.add(new Paragraph(section, FontFactory.getFont(FontFactory.HELVETICA_BOLD, 16)));\r\n                hasContent = true;\r\n                document.add(new Paragraph(\" \"));\r\n                if (content != null) {\r\n                    switch (section) {\r\n                        case \"Executive Summary\":\r\n                            Object summaryObj = content.get(\"summary\");\r\n                            if (summaryObj instanceof Map) {\r\n                                @SuppressWarnings(\"unchecked\")\r\n                                Map<String, Object> summary = (Map<String, Object>) summaryObj;\r\n                                \r\n                                Object keyMetricsObj = summary.get(\"keyMetrics\");\r\n                                if (keyMetricsObj instanceof List) {\r\n                                    @SuppressWarnings(\"unchecked\")\r\n                                    List<Map<String, Object>> keyMetrics = (List<Map<String, Object>>) keyMetricsObj;\r\n                                    if (!keyMetrics.isEmpty()) {\r\n                                    PdfPTable table = new PdfPTable(3);\r\n                                    table.addCell(\"Metric\");\r\n                                    table.addCell(\"Value\");\r\n                                    table.addCell(\"Change\");\r\n                                    for (Map<String, Object> metric : keyMetrics) {\r\n                                        table.addCell((String) metric.getOrDefault(\"name\", \"\"));\r\n                                        table.addCell((String) metric.getOrDefault(\"value\", \"\"));\r\n                                        table.addCell((String) metric.getOrDefault(\"change\", \"\"));\r\n                                    }\r\n                                    document.add(table);\r\n                                }\r\n                                }\r\n                                \r\n                                Object highlightsObj = summary.get(\"highlights\");\r\n                                if (highlightsObj instanceof List) {\r\n                                    @SuppressWarnings(\"unchecked\")\r\n                                    List<String> highlights = (List<String>) highlightsObj;\r\n                                    if (!highlights.isEmpty()) {\r\n                                    document.add(new Paragraph(\"Highlights:\", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 12)));\r\n                                    for (String h : highlights) {\r\n                                        document.add(new Paragraph(\"- \" + h));\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                            break;\r\n                        case \"Financial Highlights\":\r\n                            Object financialsObj = content.get(\"financials\");\r\n                            if (financialsObj instanceof Map) {\r\n                                @SuppressWarnings(\"unchecked\")\r\n                                Map<String, Object> financials = (Map<String, Object>) financialsObj;\r\n                                \r\n                                Object incomeStatementObj = financials.get(\"incomeStatement\");\r\n                                if (incomeStatementObj instanceof List) {\r\n                                    @SuppressWarnings(\"unchecked\")\r\n                                    List<Map<String, Object>> incomeStatement = (List<Map<String, Object>>) incomeStatementObj;\r\n                                    if (!incomeStatement.isEmpty()) {\r\n                                    document.add(new Paragraph(\"Income Statement:\", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 12)));\r\n                                    PdfPTable table = new PdfPTable(3);\r\n                                    table.addCell(\"Category\");\r\n                                    table.addCell(\"Current\");\r\n                                    table.addCell(\"Previous\");\r\n                                    for (Map<String, Object> row : incomeStatement) {\r\n                                        table.addCell((String) row.getOrDefault(\"category\", \"\"));\r\n                                        table.addCell(String.valueOf(row.getOrDefault(\"current\", \"\")));\r\n                                        table.addCell(String.valueOf(row.getOrDefault(\"previous\", \"\")));\r\n                                    }\r\n                                    document.add(table);\r\n                                }\r\n                                }\r\n                                \r\n                                Object balanceSheetObj = financials.get(\"balanceSheet\");\r\n                                if (balanceSheetObj instanceof List) {\r\n                                    @SuppressWarnings(\"unchecked\")\r\n                                    List<Map<String, Object>> balanceSheet = (List<Map<String, Object>>) balanceSheetObj;\r\n                                    if (!balanceSheet.isEmpty()) {\r\n                                    document.add(new Paragraph(\"Balance Sheet:\", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 12)));\r\n                                    PdfPTable table = new PdfPTable(2);\r\n                                    table.addCell(\"Category\");\r\n                                    table.addCell(\"Value\");\r\n                                    for (Map<String, Object> row : balanceSheet) {\r\n                                        table.addCell((String) row.getOrDefault(\"category\", \"\"));\r\n                                        table.addCell(String.valueOf(row.getOrDefault(\"value\", \"\")));\r\n                                    }\r\n                                    document.add(table);\r\n                                    }\r\n                                }\r\n                            }\r\n                            break;\r\n                        case \"Trend Analysis\":\r\n                            Object trendsObj = content.get(\"trends\");\r\n                            if (trendsObj instanceof Map) {\r\n                                @SuppressWarnings(\"unchecked\")\r\n                                Map<String, Object> trends = (Map<String, Object>) trendsObj;\r\n                                if (!trends.isEmpty()) {\r\n                                    document.add(new Paragraph(\"Trend Analysis:\", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 12)));\r\n                                    \r\n                                    // 获取可视化类型\r\n                                    String visualizationType = \"bar\"; // 默认值\r\n                                    if (request.getMetadata() != null && request.getMetadata().containsKey(\"visualization\")) {\r\n                                        visualizationType = (String) request.getMetadata().get(\"visualization\");\r\n                                    }\r\n                                    \r\n                                    // 生成收入趋势图表\r\n                                    if (trends.containsKey(\"dailyRevenue\")) {\r\n                                        try {\r\n                                            // 传递品牌色彩参数\r\n                                            Map<String, Object> chartTrends = new HashMap<>(trends);\r\n                                            chartTrends.put(\"useBrandColors\", useBrandColors);\r\n                                            \r\n                                            BufferedImage revenueChart = chartService.generateRevenueTrendChart(chartTrends, visualizationType);\r\n                                            if (revenueChart != null) {\r\n                                                document.add(new Paragraph(\"Revenue Trend Chart:\", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 12)));\r\n                                                ByteArrayOutputStream chartStream = new ByteArrayOutputStream();\r\n                                                javax.imageio.ImageIO.write(revenueChart, \"JPEG\", chartStream);\r\n                                                byte[] chartBytes = chartStream.toByteArray();\r\n                                                com.lowagie.text.Image chartImage = com.lowagie.text.Image.getInstance(chartBytes);\r\n                                                chartImage.scaleToFit(450, 300); // 调整缩放尺寸\r\n                                                chartImage.setAlignment(com.lowagie.text.Image.MIDDLE);\r\n                                                chartImage.setBorder(com.lowagie.text.Rectangle.BOX);\r\n                                                chartImage.setBorderWidth(1.0f);\r\n                                                chartImage.setBorderColor(new Color(200, 200, 200));\r\n                                                document.add(chartImage);\r\n                                                document.add(new Paragraph(\" \"));\r\n                                            }\r\n                                        } catch (Exception e) {\r\n                                            System.err.println(\"Error generating revenue chart: \" + e.getMessage());\r\n                                        }\r\n                                    }\r\n                                    \r\n                                    // 生成预订趋势图表\r\n                                    if (trends.containsKey(\"dailyBookings\")) {\r\n                                        try {\r\n                                            // 传递品牌色彩参数\r\n                                            Map<String, Object> chartTrends = new HashMap<>(trends);\r\n                                            chartTrends.put(\"useBrandColors\", useBrandColors);\r\n                                            \r\n                                            BufferedImage bookingChart = chartService.generateBookingTrendChart(chartTrends, visualizationType);\r\n                                            if (bookingChart != null) {\r\n                                                document.add(new Paragraph(\"Booking Trend Chart:\", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 12)));\r\n                                                ByteArrayOutputStream chartStream = new ByteArrayOutputStream();\r\n                                                javax.imageio.ImageIO.write(bookingChart, \"JPEG\", chartStream);\r\n                                                byte[] chartBytes = chartStream.toByteArray();\r\n                                                com.lowagie.text.Image chartImage = com.lowagie.text.Image.getInstance(chartBytes);\r\n                                                chartImage.scaleToFit(450, 300); // 调整缩放尺寸\r\n                                                chartImage.setAlignment(com.lowagie.text.Image.MIDDLE);\r\n                                                chartImage.setBorder(com.lowagie.text.Rectangle.BOX);\r\n                                                chartImage.setBorderWidth(1.0f);\r\n                                                chartImage.setBorderColor(new Color(200, 200, 200));\r\n                                                document.add(chartImage);\r\n                                                document.add(new Paragraph(\" \"));\r\n                                            }\r\n                                        } catch (Exception e) {\r\n                                            System.err.println(\"Error generating booking chart: \" + e.getMessage());\r\n                                        }\r\n                                    }\r\n                                    \r\n                                    // 生成用户活动图表\r\n                                    if (trends.containsKey(\"activeUsers\") || trends.containsKey(\"userActivityRate\") || \r\n                                        trends.containsKey(\"bookingsPerUser\") || trends.containsKey(\"topActiveUsers\")) {\r\n                                        try {\r\n                                            // 传递品牌色彩参数和所有用户相关数据\r\n                                            Map<String, Object> chartTrends = new HashMap<>(trends);\r\n                                            chartTrends.put(\"useBrandColors\", useBrandColors);\r\n                                            \r\n                                            // 如果有breakdown数据，也添加到图表数据中\r\n                                            if (content.containsKey(\"breakdown\")) {\r\n                                                Object breakdownObj = content.get(\"breakdown\");\r\n                                                if (breakdownObj instanceof Map) {\r\n                                                    @SuppressWarnings(\"unchecked\")\r\n                                                    Map<String, Object> breakdown = (Map<String, Object>) breakdownObj;\r\n                                                    chartTrends.putAll(breakdown);\r\n                                                }\r\n                                            }\r\n                                            \r\n                                            BufferedImage userChart = chartService.generateUserActivityChart(chartTrends, visualizationType);\r\n                                            if (userChart != null) {\r\n                                                document.add(new Paragraph(\"User Activity Chart:\", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 12)));\r\n                                                ByteArrayOutputStream chartStream = new ByteArrayOutputStream();\r\n                                                javax.imageio.ImageIO.write(userChart, \"JPEG\", chartStream);\r\n                                                byte[] chartBytes = chartStream.toByteArray();\r\n                                                com.lowagie.text.Image chartImage = com.lowagie.text.Image.getInstance(chartBytes);\r\n                                                chartImage.scaleToFit(450, 300); // 调整缩放尺寸\r\n                                                chartImage.setAlignment(com.lowagie.text.Image.MIDDLE);\r\n                                                chartImage.setBorder(com.lowagie.text.Rectangle.BOX);\r\n                                                chartImage.setBorderWidth(1.0f);\r\n                                                chartImage.setBorderColor(new Color(200, 200, 200));\r\n                                                document.add(chartImage);\r\n                                                document.add(new Paragraph(\" \"));\r\n                                            }\r\n                                        } catch (Exception e) {\r\n                                            System.err.println(\"Error generating user activity chart: \" + e.getMessage());\r\n                                        }\r\n                                    }\r\n                                    \r\n                                    // 显示详细的表格数据作为补充\r\n                                    document.add(new Paragraph(\"Detailed Data Tables:\", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 10)));\r\n                                    \r\n                                    // 显示每日收入趋势表格\r\n                                    if (trends.containsKey(\"dailyRevenue\")) {\r\n                                        Object dailyRevenueObj = trends.get(\"dailyRevenue\");\r\n                                        if (dailyRevenueObj instanceof Map) {\r\n                                            @SuppressWarnings(\"unchecked\")\r\n                                            Map<String, Object> dailyRevenue = (Map<String, Object>) dailyRevenueObj;\r\n                                            if (!dailyRevenue.isEmpty()) {\r\n                                                document.add(new Paragraph(\"Daily Revenue Data:\", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));\r\n                                                PdfPTable revenueTable = new PdfPTable(2);\r\n                                                revenueTable.setWidthPercentage(100);\r\n                                                revenueTable.addCell(new PdfPCell(new Phrase(\"Date\", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 8))));\r\n                                                revenueTable.addCell(new PdfPCell(new Phrase(\"Revenue (RM)\", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 8))));\r\n                                                \r\n                                                // 按日期排序并显示前10个最高收入日\r\n                                                dailyRevenue.entrySet().stream()\r\n                                                    .sorted((a, b) -> {\r\n                                                        Number aValue = (Number) a.getValue();\r\n                                                        Number bValue = (Number) b.getValue();\r\n                                                        return Double.compare(bValue.doubleValue(), aValue.doubleValue());\r\n                                                    })\r\n                                                    .limit(10)\r\n                                                    .forEach(entry -> {\r\n                                                        revenueTable.addCell(new PdfPCell(new Phrase(entry.getKey(), FontFactory.getFont(FontFactory.HELVETICA, 8))));\r\n                                                        Number value = (Number) entry.getValue();\r\n                                                        revenueTable.addCell(new PdfPCell(new Phrase(String.format(\"RM %.2f\", value.doubleValue()), FontFactory.getFont(FontFactory.HELVETICA, 8))));\r\n                                                    });\r\n                                                document.add(revenueTable);\r\n                                                document.add(new Paragraph(\" \"));\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                    \r\n                                    // 显示收入按状态分布\r\n                                    if (trends.containsKey(\"revenueByStatus\")) {\r\n                                        Object revenueByStatusObj = trends.get(\"revenueByStatus\");\r\n                                        if (revenueByStatusObj instanceof Map) {\r\n                                            @SuppressWarnings(\"unchecked\")\r\n                                            Map<String, Object> revenueByStatus = (Map<String, Object>) revenueByStatusObj;\r\n                                            if (!revenueByStatus.isEmpty()) {\r\n                                                document.add(new Paragraph(\"Revenue by Status:\", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));\r\n                                                PdfPTable statusTable = new PdfPTable(2);\r\n                                                statusTable.setWidthPercentage(100);\r\n                                                statusTable.addCell(new PdfPCell(new Phrase(\"Status\", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 8))));\r\n                                                statusTable.addCell(new PdfPCell(new Phrase(\"Revenue (RM)\", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 8))));\r\n                                                \r\n                                                revenueByStatus.forEach((status, revenue) -> {\r\n                                                    statusTable.addCell(new PdfPCell(new Phrase(status, FontFactory.getFont(FontFactory.HELVETICA, 8))));\r\n                                                    Number value = (Number) revenue;\r\n                                                    statusTable.addCell(new PdfPCell(new Phrase(String.format(\"RM %.2f\", value.doubleValue()), FontFactory.getFont(FontFactory.HELVETICA, 8))));\r\n                                                });\r\n                                                document.add(statusTable);\r\n                                                document.add(new Paragraph(\" \"));\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                } else {\r\n                                    document.add(new Paragraph(\"No trend data available for the selected period.\", FontFactory.getFont(FontFactory.HELVETICA, 10)));\r\n                                }\r\n                            } else {\r\n                                document.add(new Paragraph(\"No trend data available for the selected period.\", FontFactory.getFont(FontFactory.HELVETICA, 10)));\r\n                            }\r\n                            break;\r\n                        case \"Detailed Breakdown\":\r\n                            Object breakdownObj = content.get(\"breakdown\");\r\n                            if (breakdownObj instanceof Map) {\r\n                                @SuppressWarnings(\"unchecked\")\r\n                                Map<String, Object> breakdown = (Map<String, Object>) breakdownObj;\r\n                                if (!breakdown.isEmpty()) {\r\n                                    document.add(new Paragraph(\"Detailed Breakdown:\", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 12)));\r\n                                    \r\n                                    // 显示最高收入日\r\n                                    if (breakdown.containsKey(\"topRevenueDays\")) {\r\n                                        Object topRevenueDaysObj = breakdown.get(\"topRevenueDays\");\r\n                                        if (topRevenueDaysObj instanceof List) {\r\n                                            @SuppressWarnings(\"unchecked\")\r\n                                            List<Map<String, Object>> topRevenueDays = (List<Map<String, Object>>) topRevenueDaysObj;\r\n                                            if (!topRevenueDays.isEmpty()) {\r\n                                                document.add(new Paragraph(\"Top Revenue Days:\", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 10)));\r\n                                                PdfPTable revenueTable = new PdfPTable(2);\r\n                                                revenueTable.setWidthPercentage(100);\r\n                                                revenueTable.addCell(new PdfPCell(new Phrase(\"Date\", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));\r\n                                                revenueTable.addCell(new PdfPCell(new Phrase(\"Revenue (RM)\", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));\r\n                                                \r\n                                                topRevenueDays.forEach(day -> {\r\n                                                    revenueTable.addCell(new PdfPCell(new Phrase(String.valueOf(day.get(\"date\")), FontFactory.getFont(FontFactory.HELVETICA, 9))));\r\n                                                    Number revenue = (Number) day.get(\"revenue\");\r\n                                                    revenueTable.addCell(new PdfPCell(new Phrase(String.format(\"RM %.2f\", revenue.doubleValue()), FontFactory.getFont(FontFactory.HELVETICA, 9))));\r\n                                                });\r\n                                                document.add(revenueTable);\r\n                                                document.add(new Paragraph(\" \"));\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                    \r\n                                    // 显示最高预订日\r\n                                    if (breakdown.containsKey(\"topBookingDays\")) {\r\n                                        Object topBookingDaysObj = breakdown.get(\"topBookingDays\");\r\n                                        if (topBookingDaysObj instanceof List) {\r\n                                            @SuppressWarnings(\"unchecked\")\r\n                                            List<Map<String, Object>> topBookingDays = (List<Map<String, Object>>) topBookingDaysObj;\r\n                                            if (!topBookingDays.isEmpty()) {\r\n                                                document.add(new Paragraph(\"Top Booking Days:\", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 10)));\r\n                                                PdfPTable bookingTable = new PdfPTable(2);\r\n                                                bookingTable.setWidthPercentage(100);\r\n                                                bookingTable.addCell(new PdfPCell(new Phrase(\"Date\", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));\r\n                                                bookingTable.addCell(new PdfPCell(new Phrase(\"Bookings\", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));\r\n                                                \r\n                                                topBookingDays.forEach(day -> {\r\n                                                    bookingTable.addCell(new PdfPCell(new Phrase(String.valueOf(day.get(\"date\")), FontFactory.getFont(FontFactory.HELVETICA, 9))));\r\n                                                    Number bookings = (Number) day.get(\"bookings\");\r\n                                                    bookingTable.addCell(new PdfPCell(new Phrase(String.valueOf(bookings.longValue()), FontFactory.getFont(FontFactory.HELVETICA, 9))));\r\n                                                });\r\n                                                document.add(bookingTable);\r\n                                                document.add(new Paragraph(\" \"));\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                    \r\n                                    // 显示最活跃用户\r\n                                    if (breakdown.containsKey(\"topActiveUsers\")) {\r\n                                        Object topActiveUsersObj = breakdown.get(\"topActiveUsers\");\r\n                                        if (topActiveUsersObj instanceof List) {\r\n                                            @SuppressWarnings(\"unchecked\")\r\n                                            List<Map<String, Object>> topActiveUsers = (List<Map<String, Object>>) topActiveUsersObj;\r\n                                            if (!topActiveUsers.isEmpty()) {\r\n                                                document.add(new Paragraph(\"Top Active Users:\", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 10)));\r\n                                                PdfPTable userTable = new PdfPTable(2);\r\n                                                userTable.setWidthPercentage(100);\r\n                                                userTable.addCell(new PdfPCell(new Phrase(\"User\", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));\r\n                                                userTable.addCell(new PdfPCell(new Phrase(\"Bookings\", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));\r\n                                                \r\n                                                topActiveUsers.forEach(user -> {\r\n                                                    userTable.addCell(new PdfPCell(new Phrase(String.valueOf(user.get(\"user\")), FontFactory.getFont(FontFactory.HELVETICA, 9))));\r\n                                                    Number bookings = (Number) user.get(\"bookings\");\r\n                                                    userTable.addCell(new PdfPCell(new Phrase(String.valueOf(bookings.longValue()), FontFactory.getFont(FontFactory.HELVETICA, 9))));\r\n                                                });\r\n                                                document.add(userTable);\r\n                                                document.add(new Paragraph(\" \"));\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                    \r\n                                    // 显示按用户预订分布\r\n                                    if (breakdown.containsKey(\"bookingsPerUser\")) {\r\n                                        Object bookingsPerUserObj = breakdown.get(\"bookingsPerUser\");\r\n                                        if (bookingsPerUserObj instanceof Map) {\r\n                                            @SuppressWarnings(\"unchecked\")\r\n                                            Map<String, Object> bookingsPerUser = (Map<String, Object>) bookingsPerUserObj;\r\n                                            if (!bookingsPerUser.isEmpty()) {\r\n                                                document.add(new Paragraph(\"Bookings per User:\", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 10)));\r\n                                                PdfPTable userTable = new PdfPTable(2);\r\n                                                userTable.setWidthPercentage(100);\r\n                                                userTable.addCell(new PdfPCell(new Phrase(\"User\", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));\r\n                                                userTable.addCell(new PdfPCell(new Phrase(\"Total Bookings\", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));\r\n                                                \r\n                                                // 按预订数量排序并显示前10个用户\r\n                                                bookingsPerUser.entrySet().stream()\r\n                                                    .sorted((a, b) -> {\r\n                                                        Number aValue = (Number) a.getValue();\r\n                                                        Number bValue = (Number) b.getValue();\r\n                                                        return Long.compare(bValue.longValue(), aValue.longValue());\r\n                                                    })\r\n                                                    .limit(10)\r\n                                                    .forEach(entry -> {\r\n                                                        userTable.addCell(new PdfPCell(new Phrase(entry.getKey(), FontFactory.getFont(FontFactory.HELVETICA, 9))));\r\n                                                        Number value = (Number) entry.getValue();\r\n                                                        userTable.addCell(new PdfPCell(new Phrase(String.valueOf(value.longValue()), FontFactory.getFont(FontFactory.HELVETICA, 9))));\r\n                                                    });\r\n                                                document.add(userTable);\r\n                                                document.add(new Paragraph(\" \"));\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                } else {\r\n                                    document.add(new Paragraph(\"No detailed breakdown data available for the selected period.\", FontFactory.getFont(FontFactory.HELVETICA, 10)));\r\n                                }\r\n                            } else {\r\n                                document.add(new Paragraph(\"No detailed breakdown data available for the selected period.\", FontFactory.getFont(FontFactory.HELVETICA, 10)));\r\n                            }\r\n                            break;\r\n                        case \"Key Insights\":\r\n                            Object insightsObj = content.get(\"insights\");\r\n                            if (insightsObj instanceof List) {\r\n                                @SuppressWarnings(\"unchecked\")\r\n                                List<String> insights = (List<String>) insightsObj;\r\n                                if (!insights.isEmpty()) {\r\n                                    document.add(new Paragraph(\"Key Insights:\", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 12)));\r\n                                    for (String insight : insights) {\r\n                                        document.add(new Paragraph(\"- \" + insight, FontFactory.getFont(FontFactory.HELVETICA, 10)));\r\n                                    }\r\n                                } else {\r\n                                    document.add(new Paragraph(\"No insights available for the selected period.\", FontFactory.getFont(FontFactory.HELVETICA, 10)));\r\n                                }\r\n                            } else {\r\n                                document.add(new Paragraph(\"No insights available for the selected period.\", FontFactory.getFont(FontFactory.HELVETICA, 10)));\r\n                            }\r\n                            break;\r\n                        case \"Recommendations\":\r\n                            Object recsObj = content.get(\"recommendations\");\r\n                            if (recsObj instanceof List) {\r\n                                @SuppressWarnings(\"unchecked\")\r\n                                List<String> recs = (List<String>) recsObj;\r\n                                if (!recs.isEmpty()) {\r\n                                document.add(new Paragraph(\"Recommendations:\", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 12)));\r\n                                for (String rec : recs) {\r\n                                    document.add(new Paragraph(\"- \" + rec));\r\n                                    }\r\n                                }\r\n                            }\r\n                            break;\r\n                        // 其它 section ...\r\n                    }\r\n                }\r\n                document.add(new Paragraph(\" \"));\r\n            }\r\n        }\r\n\r\n        if (!hasContent) {\r\n            document.add(new Paragraph(\"No data available for the selected report parameters.\"));\r\n        }\r\n\r\n        // 添加数据附录\r\n        if (includeAppendix && content != null) {\r\n            document.add(new Paragraph(\" \"));\r\n            document.add(new Paragraph(\"Data Appendix\", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 14)));\r\n            document.add(new Paragraph(\"Raw Data Tables\", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 12)));\r\n            \r\n            // 添加原始收入数据\r\n            Object trendsObj = content.get(\"trends\");\r\n            if (trendsObj instanceof Map) {\r\n                @SuppressWarnings(\"unchecked\")\r\n                Map<String, Object> trends = (Map<String, Object>) trendsObj;\r\n                if (trends.containsKey(\"dailyRevenue\")) {\r\n                    Object dailyRevenueObj = trends.get(\"dailyRevenue\");\r\n                    if (dailyRevenueObj instanceof Map) {\r\n                        @SuppressWarnings(\"unchecked\")\r\n                        Map<String, Object> dailyRevenue = (Map<String, Object>) dailyRevenueObj;\r\n                        if (!dailyRevenue.isEmpty()) {\r\n                            document.add(new Paragraph(\"Complete Daily Revenue Data:\", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 10)));\r\n                            PdfPTable appendixTable = new PdfPTable(2);\r\n                            appendixTable.setWidthPercentage(100);\r\n                            appendixTable.addCell(new PdfPCell(new Phrase(\"Date\", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 8))));\r\n                            appendixTable.addCell(new PdfPCell(new Phrase(\"Revenue (RM)\", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 8))));\r\n                            \r\n                            dailyRevenue.forEach((date, revenue) -> {\r\n                                appendixTable.addCell(new PdfPCell(new Phrase(date, FontFactory.getFont(FontFactory.HELVETICA, 8))));\r\n                                Number value = (Number) revenue;\r\n                                appendixTable.addCell(new PdfPCell(new Phrase(String.format(\"RM %.2f\", value.doubleValue()), FontFactory.getFont(FontFactory.HELVETICA, 8))));\r\n                            });\r\n                            document.add(appendixTable);\r\n                            document.add(new Paragraph(\" \"));\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // 添加页脚\r\n        if (includeHeaderFooter) {\r\n            document.add(new Paragraph(\" \"));\r\n            document.add(new Paragraph(\"Generated by Picklefy Pickleball Club Management System\", FontFactory.getFont(FontFactory.HELVETICA, 8)));\r\n            document.add(new Paragraph(\"For internal use only\", FontFactory.getFont(FontFactory.HELVETICA, 8)));\r\n        }\r\n\r\n        document.close();\r\n        return out.toByteArray();\r\n    }\r\n\r\n    private double calcChangeRate(Number current, Number last) {\r\n        if (last == null || last.doubleValue() == 0) return 0;\r\n        return ((current.doubleValue() - last.doubleValue()) / last.doubleValue()) * 100.0;\r\n    }\r\n\r\n    public AdminUserDto convertToAdminUserDto(User user) {\r\n        AdminUserDto dto = new AdminUserDto();\r\n        dto.setId(user.getId());\r\n        dto.setName(user.getName());\r\n        dto.setEmail(user.getEmail());\r\n        dto.setPhone(user.getPhone());\r\n        dto.setDob(user.getDob());\r\n        dto.setGender(user.getGender());\r\n        dto.setUserType(user.getUserType());\r\n        dto.setCreatedAt(user.getCreatedAt());\r\n\r\n        UserAccount account = user.getUserAccount();\r\n        if (account != null) {\r\n            dto.setUsername(account.getUsername());\r\n            dto.setStatus(account.getStatus());\r\n            dto.setProfileImage(account.getProfileImage());\r\n        }\r\n\r\n        Member member = user.getMember();\r\n        if (member != null) {\r\n            dto.setPointBalance(member.getTierPointBalance());\r\n            if (member.getTier() != null) {\r\n                // 修复这里：直接使用 tierName 字符串值，不需要 .name()\r\n                dto.setTier(member.getTier().getTierName()); // 移除了 .name()\r\n            }\r\n        }\r\n        return dto;\r\n    }\r\n\r\n    public AdminBookingDto convertToAdminBookingDto(Booking booking) {\r\n        try {\r\n        AdminBookingDto dto = new AdminBookingDto();\r\n        dto.setId(booking.getId());\r\n        dto.setBookingDate(booking.getBookingDate());\r\n        dto.setTotalAmount(booking.getTotalAmount());\r\n        dto.setStatus(booking.getStatus());\r\n\r\n            // 安全地获取会员信息\r\n            try {\r\n        if (booking.getMember() != null && booking.getMember().getUser() != null) {\r\n            dto.setMemberName(booking.getMember().getUser().getName());\r\n            dto.setMemberPhone(booking.getMember().getUser().getPhone());\r\n            dto.setMemberEmail(booking.getMember().getUser().getEmail());\r\n                    dto.setMemberId(booking.getMember().getId()); // 新增：设置会员ID\r\n                }\r\n            } catch (Exception e) {\r\n                System.err.println(\"Error getting member info for booking \" + booking.getId() + \": \" + e.getMessage());\r\n            }\r\n\r\n            // 安全地处理多 slot 预订\r\n            try {\r\n                if (booking.getBookingSlots() != null && !booking.getBookingSlots().isEmpty()) {\r\n                    System.out.println(\"AdminDashboardService: Booking \" + booking.getId() + \" has \" + booking.getBookingSlots().size() + \" slots\");\r\n                    \r\n                    // 按时间排序，过滤掉空的 slot\r\n                    List<BookingSlot> sortedSlots = booking.getBookingSlots().stream()\r\n                            .filter(bs -> bs != null && bs.getSlot() != null) // 过滤掉空的 slot\r\n                            .sorted((a, b) -> a.getSlot().getStartTime().compareTo(b.getSlot().getStartTime()))\r\n                            .collect(Collectors.toList());\r\n                    \r\n                    if (!sortedSlots.isEmpty()) {\r\n                        // 获取第一个和最后一个 slot\r\n                        Slot firstSlot = sortedSlots.get(0).getSlot();\r\n                        Slot lastSlot = sortedSlots.get(sortedSlots.size() - 1).getSlot();\r\n                        \r\n                        // 计算总时长\r\n                        int totalDuration = sortedSlots.stream()\r\n                                .mapToInt(bs -> bs.getSlot().getDurationHours() != null ? bs.getSlot().getDurationHours() : 1)\r\n                                .sum();\r\n                        \r\n                        dto.setSlotDate(firstSlot.getDate());\r\n                        dto.setStartTime(firstSlot.getStartTime());\r\n                        dto.setEndTime(lastSlot.getEndTime());\r\n                        dto.setDurationHours(totalDuration);\r\n\r\n                        // 获取场地信息\r\n                        try {\r\n                            Court court = courtRepository.findById(firstSlot.getCourtId()).orElse(null);\r\n            if (court != null) {\r\n                dto.setCourtName(court.getName());\r\n            }\r\n                        } catch (Exception e) {\r\n                            System.err.println(\"Error getting court info for booking \" + booking.getId() + \": \" + e.getMessage());\r\n        }\r\n\r\n                        // 设置所有 bookingSlots 信息（用于前端显示）\r\n                        dto.setBookingSlots(sortedSlots.stream()\r\n                                .map(bs -> {\r\n                                    com.pickleball_backend.pickleball.dto.BookingSlotDto slotDto = \r\n                                        new com.pickleball_backend.pickleball.dto.BookingSlotDto();\r\n                                    slotDto.setId(bs.getId());\r\n                                    slotDto.setStatus(bs.getStatus());\r\n                                    \r\n                                    // 设置slot信息\r\n                                    if (bs.getSlot() != null) {\r\n                                        com.pickleball_backend.pickleball.dto.SlotDto slotInfo = \r\n                                            new com.pickleball_backend.pickleball.dto.SlotDto();\r\n                                        slotInfo.setId(bs.getSlot().getId());\r\n                                        slotInfo.setDate(bs.getSlot().getDate());\r\n                                        slotInfo.setStartTime(bs.getSlot().getStartTime());\r\n                                        slotInfo.setEndTime(bs.getSlot().getEndTime());\r\n                                        slotInfo.setDurationHours(bs.getSlot().getDurationHours());\r\n                                        slotInfo.setCourtId(bs.getSlot().getCourtId());\r\n                                        slotInfo.setAvailable(bs.getSlot().isAvailable());\r\n                                        slotDto.setSlot(slotInfo);\r\n                                    }\r\n                                    \r\n                                    return slotDto;\r\n                                                        })\r\n                        .collect(Collectors.toList()));\r\n                    }\r\n                }\r\n            } catch (Exception e) {\r\n                System.err.println(\"Error processing booking slots for booking \" + booking.getId() + \": \" + e.getMessage());\r\n            }\r\n\r\n            // 設置取消請求信息\r\n            try {\r\n                List<CancellationRequest> cancellationRequests = cancellationRequestRepository.findByBookingId(booking.getId());\r\n                if (!cancellationRequests.isEmpty()) {\r\n                    CancellationRequest cancellationRequest = cancellationRequests.get(0); // 取第一個\r\n                    CancellationRequestDto cancellationRequestDto = new CancellationRequestDto();\r\n                    cancellationRequestDto.setId(cancellationRequest.getId());\r\n                    cancellationRequestDto.setStatus(cancellationRequest.getStatus());\r\n                    cancellationRequestDto.setReason(cancellationRequest.getReason());\r\n                    cancellationRequestDto.setRequestDate(cancellationRequest.getRequestDate());\r\n                    cancellationRequestDto.setAdminRemark(cancellationRequest.getAdminRemark());\r\n                    dto.setCancellationRequest(cancellationRequestDto);\r\n                }\r\n            } catch (Exception e) {\r\n                System.err.println(\"Error getting cancellation request for booking \" + booking.getId() + \": \" + e.getMessage());\r\n            }\r\n            \r\n        return dto;\r\n        } catch (Exception e) {\r\n            System.err.println(\"Error converting booking to DTO: \" + e.getMessage());\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private void createWalletTransaction(Wallet wallet, String transactionType, double amount, \r\n                                       double balanceBefore, double balanceAfter, \r\n                                       String referenceType, Integer referenceId, String description) {\r\n        WalletTransaction transaction = new WalletTransaction();\r\n        transaction.setWalletId(wallet.getId());\r\n        transaction.setTransactionType(transactionType);\r\n        transaction.setAmount(amount);\r\n        transaction.setBalanceBefore(balanceBefore);\r\n        transaction.setBalanceAfter(balanceAfter);\r\n        transaction.setFrozenBefore(wallet.getFrozenBalance());\r\n        transaction.setFrozenAfter(wallet.getFrozenBalance());\r\n        transaction.setReferenceType(referenceType);\r\n        transaction.setReferenceId(referenceId);\r\n        transaction.setDescription(description);\r\n        transaction.setStatus(\"COMPLETED\");\r\n        transaction.setProcessedAt(java.time.LocalDateTime.now());\r\n        \r\n        walletTransactionRepository.save(transaction);\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/AdminDashboardServiceImpl.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/AdminDashboardServiceImpl.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/AdminDashboardServiceImpl.java	(revision c178c1d9e80f6815b91226b2d10f391611dcb6b4)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/AdminDashboardServiceImpl.java	(date 1754966057816)
@@ -18,6 +18,7 @@
 import com.pickleball_backend.pickleball.service.EmailService;
 import com.pickleball_backend.pickleball.repository.FeedbackRepository;
 import lombok.RequiredArgsConstructor;
+import lombok.extern.slf4j.Slf4j;
 import org.apache.poi.ss.usermodel.Row;
 import org.springframework.data.domain.Page;
 import org.springframework.data.domain.Pageable;
@@ -52,6 +53,7 @@
 
 @Service
 @RequiredArgsConstructor
+@Slf4j
 public class AdminDashboardServiceImpl implements AdminDashboardService {
 
     private final BookingSlotRepository bookingSlotRepository;
@@ -68,6 +70,7 @@
     private final CourtRepository courtRepository;
     private final FeedbackRepository feedbackRepository;
     private final ChartService chartService;
+    private final MemberService memberService;
 
     @Override
     public List<AdminUserDto> getAllUsers() {
@@ -183,7 +186,14 @@
         createWalletTransaction(wallet, "REFUND", refund, balanceBefore, wallet.getBalance(), 
                               "BOOKING", booking.getId(), "Booking cancellation refund (50%) - Admin cancelled");
 
-        // 5. 更新用户统计数据（减少预订小时数）
+        // 5. 扣除積分（扣除50%的積分，與退款比例一致）
+        Member member = booking.getMember();
+        MemberService.PointDeductionResult deductionResult = memberService.deductPointsForRefund(member, booking.getTotalAmount(), 0.5);
+        
+        log.info("Deducted {} tier points and {} reward points from member {} for admin cancellation {}",
+                deductionResult.getTierPointsDeducted(), deductionResult.getRewardPointsDeducted(), member.getId(), booking.getId());
+
+        // 6. 更新用户统计数据（减少预订小时数）
         User user = booking.getMember().getUser();
         double cancelledHours = booking.getBookingSlots().stream()
                 .mapToDouble(bs -> bs.getSlot().getDurationHours())
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/UserAccount.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.entity;\r\n\r\nimport jakarta.persistence.*;\r\nimport lombok.*;\r\nimport java.time.LocalDateTime;\r\n\r\n@Entity\r\n@Data\r\n@Table(name = \"useraccount\")\r\npublic class UserAccount {\r\n\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Integer id;\r\n\r\n    private String username;\r\n    private String password;\r\n    private String status = \"ACTIVE\";\r\n    private int failedLoginAttempts = 0;\r\n    private LocalDateTime lockedUntil;\r\n    private LocalDateTime lastLogin;\r\n    private LocalDateTime passwordChangedAt = LocalDateTime.now();\r\n    private LocalDateTime createdAt = LocalDateTime.now();\r\n    private LocalDateTime updatedAt = LocalDateTime.now();\r\n    private String resetPasswordToken;\r\n    private LocalDateTime resetPasswordTokenExpiry;\r\n    @Column(name = \"profile_image\", length = 255, nullable = true)\r\n    private String profileImage;\r\n    private String theme = \"light\";\r\n    private boolean emailNotifications = true;\r\n    private boolean pushNotifications = true;\r\n    private boolean requireReauthForSensitiveActions = false;\r\n\r\n    // FIXED RELATIONSHIP: Changed to OneToOne\r\n    @OneToOne(fetch = FetchType.LAZY)\r\n    @JoinColumn(name = \"user_id\")\r\n    private User user;\r\n\r\n    public boolean isLocked() {\r\n        return lockedUntil != null && lockedUntil.isAfter(LocalDateTime.now());\r\n    }\r\n\r\n    public String getProfileImage() {\r\n        return profileImage;\r\n    }\r\n\r\n    public void setProfileImage(String profileImage) {\r\n        this.profileImage = profileImage;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/UserAccount.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/UserAccount.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/UserAccount.java	(revision c178c1d9e80f6815b91226b2d10f391611dcb6b4)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/UserAccount.java	(date 1754953334666)
@@ -2,6 +2,7 @@
 
 import jakarta.persistence.*;
 import lombok.*;
+import lombok.ToString;
 import java.time.LocalDateTime;
 
 @Entity
@@ -34,6 +35,7 @@
     // FIXED RELATIONSHIP: Changed to OneToOne
     @OneToOne(fetch = FetchType.LAZY)
     @JoinColumn(name = "user_id")
+    @ToString.Exclude
     private User user;
 
     public boolean isLocked() {
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/EventRegistrationServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.service;\r\n\r\nimport com.pickleball_backend.pickleball.dto.EventRegistrationRequestDto;\r\nimport com.pickleball_backend.pickleball.dto.EventRegistrationResponseDto;\r\nimport com.pickleball_backend.pickleball.entity.*;\r\nimport com.pickleball_backend.pickleball.repository.*;\r\nimport jakarta.transaction.Transactional;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport java.time.LocalDateTime;\r\n\r\n@Service\r\npublic class EventRegistrationServiceImpl implements EventRegistrationService {\r\n\r\n    @Autowired\r\n    private RegistrationRepository registrationRepository;\r\n\r\n    @Autowired\r\n    private EventRegistrationRepository eventRegistrationRepository;\r\n\r\n    @Autowired\r\n    private UserAccountRepository userAccountRepository;\r\n\r\n    @Autowired\r\n    private EventRepository eventRepository;\r\n\r\n    @Autowired\r\n    private UserRepository userRepository;\r\n\r\n    @Autowired\r\n    private MemberRepository memberRepository;\r\n\r\n    @Autowired\r\n    private MembershipTierRepository membershipTierRepository;\r\n\r\n    @Autowired\r\n    private EmailService emailService;\r\n\r\n    @Override\r\n    @Transactional\r\n    public EventRegistrationResponseDto registerForEvent(EventRegistrationRequestDto request, String username) {\r\n        UserAccount userAccount = userAccountRepository.findByUsername(username)\r\n                .orElseThrow(() -> new RuntimeException(\"User not found\"));\r\n        User user = userAccount.getUser();\r\n\r\n        // FIX: Get member by USER ID instead of member ID\r\n        Member member = memberRepository.findByUserId(user.getId());\r\n\r\n        // Handle missing member record\r\n        if (member == null) {\r\n            // Create default tier if missing\r\n            MembershipTier defaultTier = membershipTierRepository.findByTierName(\"SILVER\");\r\n            if (defaultTier == null) {\r\n                defaultTier = new MembershipTier();\r\n                defaultTier.setTierName(\"SILVER\");\r\n                defaultTier.setMinPoints(0);\r\n                defaultTier.setMaxPoints(2000);\r\n                defaultTier.setBenefits(\"10% discount\");\r\n                defaultTier.setActive(true);\r\n                defaultTier = membershipTierRepository.save(defaultTier);\r\n            }\r\n\r\n            // Create new member record\r\n            member = new Member();\r\n            member.setUser(user);\r\n            member.setTier(defaultTier);\r\n            member.setTierPointBalance(0);  // Initialize tier points\r\n            member.setRewardPointBalance(0); // Initialize reward points\r\n            member = memberRepository.save(member);\r\n            \r\n            // Update the user's member reference\r\n            user.setMember(member);\r\n            userRepository.save(user);\r\n        }\r\n\r\n        // 1. Create Registration and link to member\r\n        Registration registration = new Registration();\r\n        registration.setMember(member);\r\n        member.getRegistrations().add(registration);\r\n        registrationRepository.save(registration);\r\n\r\n        // 2. Fetch the event\r\n        Event event = eventRepository.findById(request.getEventId())\r\n                .orElseThrow(() -> new RuntimeException(\"Event not found\"));\r\n        Double feeAmount = event.getFeeAmount();\r\n\r\n        // 3. Create EventRegistration\r\n        EventRegistration eventRegistration = new EventRegistration();\r\n        eventRegistration.setRegistrationId(registration.getId());\r\n        eventRegistration.setEvent(event); // set the Event object\r\n        eventRegistration.setUser(user);   // set the User object\r\n        eventRegistration.setRegistrationDate(LocalDateTime.now());\r\n        eventRegistration.setPaymentStatus(\"PAID\");\r\n        eventRegistration.setFeeAmount(feeAmount);\r\n        eventRegistration.setStatus(\"REGISTERED\");\r\n        eventRegistrationRepository.save(eventRegistration);\r\n\r\n        // Update event's registered count\r\n        event.setRegisteredCount(event.getRegisteredCount() + 1);\r\n        eventRepository.save(event);\r\n\r\n        // Send confirmation email to the user\r\n        String userEmail = user.getEmail();\r\n        if (userEmail != null && !userEmail.isEmpty()) {\r\n            String subject = \"Event Registration Confirmation: \" + event.getTitle();\r\n            String content = String.format(\r\n                \"Dear %s,\\n\\nYou have successfully registered for the event \\\"%s\\\".\\n\\nDate: %s\\nLocation: %s\\n\\nThank you for registering!\\n\\nPickleball Team\",\r\n                user.getName(),\r\n                event.getTitle(),\r\n                event.getStartTime() != null ? event.getStartTime().toString() : \"N/A\",\r\n                event.getVenue() != null ? event.getVenue().getName() : \"N/A\"\r\n            );\r\n            emailService.sendEmail(userEmail, subject, content);\r\n        }\r\n\r\n        // 4. Build and return response\r\n        EventRegistrationResponseDto response = new EventRegistrationResponseDto();\r\n        response.setRegistrationId(eventRegistration.getRegistrationId());\r\n        response.setEventId(event.getId());\r\n        response.setUserId(user.getId());\r\n        response.setRegistrationDate(eventRegistration.getRegistrationDate());\r\n        response.setPaymentStatus(eventRegistration.getPaymentStatus());\r\n        response.setFeeAmount(eventRegistration.getFeeAmount());\r\n        response.setStatus(eventRegistration.getStatus());\r\n        return response;\r\n    }\r\n\r\n    @Override\r\n    public void cancelRegistration(Integer eventId, String username) {\r\n        UserAccount userAccount = userAccountRepository.findByUsername(username)\r\n                .orElseThrow(() -> new RuntimeException(\"User not found\"));\r\n\r\n        EventRegistration registration = eventRegistrationRepository.findByEvent_IdAndUser_Id(eventId, userAccount.getUser().getId())\r\n                .orElseThrow(() -> new RuntimeException(\"Registration not found\"));\r\n\r\n        registration.setStatus(\"CANCELLED\");\r\n        eventRegistrationRepository.save(registration);\r\n\r\n        // TODO: Send cancellation email here\r\n    }\r\n\r\n    @Override\r\n    public boolean isUserRegistered(Integer eventId, String username) {\r\n        System.out.println(\"Checking registration for user: \" + username + \", event: \" + eventId);\r\n        UserAccount userAccount = userAccountRepository.findByUsername(username)\r\n                .orElseThrow(() -> new RuntimeException(\"User not found\"));\r\n        return eventRegistrationRepository.findByEvent_IdAndUser_Id(eventId, userAccount.getUser().getId()).isPresent();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/EventRegistrationServiceImpl.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/EventRegistrationServiceImpl.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/EventRegistrationServiceImpl.java	(revision c178c1d9e80f6815b91226b2d10f391611dcb6b4)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/EventRegistrationServiceImpl.java	(date 1754955087587)
@@ -4,11 +4,12 @@
 import com.pickleball_backend.pickleball.dto.EventRegistrationResponseDto;
 import com.pickleball_backend.pickleball.entity.*;
 import com.pickleball_backend.pickleball.repository.*;
-import jakarta.transaction.Transactional;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Service;
+import org.springframework.transaction.annotation.Transactional;
 
 import java.time.LocalDateTime;
+import java.util.List;
 
 @Service
 public class EventRegistrationServiceImpl implements EventRegistrationService {
@@ -37,6 +38,15 @@
     @Autowired
     private EmailService emailService;
 
+    @Autowired
+    private WalletRepository walletRepository;
+
+    @Autowired
+    private WalletTransactionRepository walletTransactionRepository;
+
+    @Autowired
+    private EscrowAccountService escrowAccountService;
+
     @Override
     @Transactional
     public EventRegistrationResponseDto registerForEvent(EventRegistrationRequestDto request, String username) {
@@ -85,13 +95,19 @@
                 .orElseThrow(() -> new RuntimeException("Event not found"));
         Double feeAmount = event.getFeeAmount();
 
-        // 3. Create EventRegistration
+        // 3. Use escrow account for payment (money held in escrow until event completion)
+        escrowAccountService.depositToEscrowForEvent(user, feeAmount, event);
+
+        // 4. Money is now held in escrow until event completion
+        // Platform and organizer will receive their shares after event ends
+
+        // 5. Create EventRegistration
         EventRegistration eventRegistration = new EventRegistration();
         eventRegistration.setRegistrationId(registration.getId());
         eventRegistration.setEvent(event); // set the Event object
         eventRegistration.setUser(user);   // set the User object
         eventRegistration.setRegistrationDate(LocalDateTime.now());
-        eventRegistration.setPaymentStatus("PAID");
+        eventRegistration.setPaymentStatus("ESCROWED"); // Changed to ESCROWED
         eventRegistration.setFeeAmount(feeAmount);
         eventRegistration.setStatus("REGISTERED");
         eventRegistrationRepository.save(eventRegistration);
@@ -114,7 +130,7 @@
             emailService.sendEmail(userEmail, subject, content);
         }
 
-        // 4. Build and return response
+        // 7. Build and return response
         EventRegistrationResponseDto response = new EventRegistrationResponseDto();
         response.setRegistrationId(eventRegistration.getRegistrationId());
         response.setEventId(event.getId());
@@ -134,10 +150,34 @@
         EventRegistration registration = eventRegistrationRepository.findByEvent_IdAndUser_Id(eventId, userAccount.getUser().getId())
                 .orElseThrow(() -> new RuntimeException("Registration not found"));
 
+        // Get the event and user for refund
+        Event event = registration.getEvent();
+        User user = userAccount.getUser();
+
+        // Refund from escrow
+        escrowAccountService.refundEventEscrow(user, registration.getFeeAmount(), event);
+
+        // Update registration status
         registration.setStatus("CANCELLED");
+        registration.setPaymentStatus("REFUNDED");
         eventRegistrationRepository.save(registration);
 
-        // TODO: Send cancellation email here
+        // Update event's registered count
+        event.setRegisteredCount(Math.max(0, event.getRegisteredCount() - 1));
+        eventRepository.save(event);
+
+        // Send cancellation email
+        String userEmail = user.getEmail();
+        if (userEmail != null && !userEmail.isEmpty()) {
+            String subject = "Event Registration Cancellation: " + event.getTitle();
+            String content = String.format(
+                "Dear %s,\n\nYour registration for the event \"%s\" has been cancelled.\n\nRefund Amount: RM%.2f\n\nThe refund has been processed to your wallet.\n\nThank you,\nPickleball Team",
+                user.getName(),
+                event.getTitle(),
+                registration.getFeeAmount()
+            );
+            emailService.sendEmail(userEmail, subject, content);
+        }
     }
 
     @Override
@@ -147,4 +187,44 @@
                 .orElseThrow(() -> new RuntimeException("User not found"));
         return eventRegistrationRepository.findByEvent_IdAndUser_Id(eventId, userAccount.getUser().getId()).isPresent();
     }
+
+    /**
+     * 活動結束時分配託管資金給平台和組織者
+     */
+    @Override
+    @Transactional
+    public void distributeEventEscrow(Integer eventId) {
+        Event event = eventRepository.findById(eventId)
+                .orElseThrow(() -> new RuntimeException("Event not found"));
+        
+        // 分配託管資金
+        escrowAccountService.distributeEventEscrow(event);
+        
+        // 更新所有相關的 EventRegistration 狀態
+        List<EventRegistration> registrations = eventRegistrationRepository.findByEvent_Id(eventId);
+        for (EventRegistration registration : registrations) {
+            if ("ESCROWED".equals(registration.getPaymentStatus())) {
+                registration.setPaymentStatus("COMPLETED");
+                eventRegistrationRepository.save(registration);
+            }
+        }
+        
+        // 更新活動狀態
+        event.setStatus("COMPLETED");
+        eventRepository.save(event);
+        
+        // 發送完成通知給組織者
+        if (event.getOrganizerId() != null) {
+            User organizerUser = userRepository.findById(event.getOrganizerId()).orElse(null);
+            if (organizerUser != null && organizerUser.getEmail() != null) {
+                String subject = "Event Completed: " + event.getTitle();
+                String content = String.format(
+                    "Dear %s,\n\nYour event \"%s\" has been completed.\n\nAll escrow funds have been distributed:\n- Platform fee: 10%%\n- Your revenue: 90%%\n\nThank you for organizing this event!\n\nPickleball Team",
+                    organizerUser.getName(),
+                    event.getTitle()
+                );
+                emailService.sendEmail(organizerUser.getEmail(), subject, content);
+            }
+        }
+    }
 }
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/SlotServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.service;\r\n\r\nimport com.pickleball_backend.pickleball.dto.SlotDto;\r\nimport com.pickleball_backend.pickleball.dto.SlotResponseDto;\r\nimport com.pickleball_backend.pickleball.entity.Court;\r\nimport com.pickleball_backend.pickleball.entity.Slot;\r\n\r\nimport com.pickleball_backend.pickleball.exception.ResourceNotFoundException;\r\nimport com.pickleball_backend.pickleball.exception.ValidationException;\r\nimport com.pickleball_backend.pickleball.repository.CourtRepository;\r\nimport com.pickleball_backend.pickleball.repository.SlotRepository;\r\nimport com.pickleball_backend.pickleball.repository.ClassSessionRepository;\r\nimport com.pickleball_backend.pickleball.repository.BookingSlotRepository; // 新增：檢查預訂狀態\r\n\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.springframework.stereotype.Service;\r\nimport org.springframework.transaction.annotation.Transactional;\r\n\r\nimport java.time.DayOfWeek;\r\nimport java.time.Duration;\r\nimport java.time.LocalDate;\r\nimport java.time.LocalTime;\r\nimport java.time.LocalDateTime;\r\nimport java.util.*;\r\nimport java.util.stream.Collectors;\r\n\r\n@Service\r\n@RequiredArgsConstructor\r\npublic class SlotServiceImpl implements SlotService {\r\n\r\n    private final SlotRepository slotRepository;\r\n    private final CourtRepository courtRepository;\r\n    private final ClassSessionRepository classSessionRepository;\r\n    private final BookingSlotRepository bookingSlotRepository; // 新增：檢查預訂狀態\r\n\r\n    @Override\r\n    public List<SlotResponseDto> getSlots(List<Integer> courtIds, LocalDate startDate, LocalDate endDate) {\r\n        List<Slot> slots;\r\n\r\n        if (courtIds == null || courtIds.isEmpty()) {\r\n            slots = slotRepository.findByDateBetween(startDate, endDate);\r\n        } else {\r\n            slots = new ArrayList<>();\r\n            for (Integer courtId : courtIds) {\r\n                slots.addAll(slotRepository.findByCourtIdAndDateBetween(courtId, startDate, endDate));\r\n            }\r\n        }\r\n\r\n        if (slots.isEmpty()) {\r\n            return Collections.emptyList();\r\n        }\r\n\r\n        // Get court details in bulk\r\n        Set<Integer> courtIdsInSlots = slots.stream()\r\n                .map(Slot::getCourtId)\r\n                .collect(Collectors.toSet());\r\n\r\n        Map<Integer, Court> courts = courtIdsInSlots.isEmpty()\r\n                ? Collections.emptyMap()\r\n                : courtRepository.findAllById(courtIdsInSlots).stream()\r\n                .collect(Collectors.toMap(Court::getId, court -> court));\r\n\r\n        return slots.stream().map(slot -> {\r\n            SlotResponseDto dto = new SlotResponseDto();\r\n            dto.setId(slot.getId());\r\n            dto.setCourtId(slot.getCourtId());\r\n            dto.setDate(slot.getDate());\r\n            dto.setStartTime(slot.getStartTime());\r\n            dto.setEndTime(slot.getEndTime());\r\n\r\n            // 动态计算持续时间\r\n            dto.setDurationHours(calculateDurationHours(slot));\r\n\r\n            Court court = courts.get(slot.getCourtId());\r\n            if (court != null) {\r\n                dto.setCourtName(court.getName());\r\n                dto.setCourtLocation(court.getLocation());\r\n                dto.setStatus(determineSlotStatus(slot, court));\r\n            } else {\r\n                dto.setStatus(\"UNKNOWN\");\r\n            }\r\n\r\n            return dto;\r\n        }).collect(Collectors.toList());\r\n    }\r\n\r\n    @Override\r\n    @Transactional\r\n    public void createSlots(List<SlotDto> slotDtos) {\r\n        slotDtos.forEach(dto -> {\r\n            if (dto.getStartTime() == null) {\r\n                throw new ValidationException(\"Start time is required for slot creation\");\r\n            }\r\n            if (dto.getEndTime() == null) {\r\n                throw new ValidationException(\"End time is required for slot creation\");\r\n            }\r\n\r\n            Slot slot = new Slot();\r\n            slot.setCourtId(dto.getCourtId());\r\n            slot.setDate(dto.getDate());\r\n            slot.setStartTime(dto.getStartTime());\r\n            slot.setEndTime(dto.getEndTime());\r\n            slot.setAvailable(dto.isAvailable());\r\n\r\n            // 设置持续时间（如果提供）\r\n            if (dto.getDurationHours() != null) {\r\n                slot.setDurationHours(dto.getDurationHours());\r\n            }\r\n\r\n            slotRepository.save(slot);\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public List<SlotResponseDto> getAvailableSlotsByCourt(Integer courtId) {\r\n        LocalDate today = LocalDate.now();\r\n        LocalDate endDate = today.plusMonths(3); // Next 3 months\r\n\r\n        Court court = courtRepository.findById(courtId)\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"Court not found with id: \" + courtId));\r\n\r\n        // 查找所有slots，包括isAvailable=false的，然后过滤掉PENDING状态的\r\n        List<Slot> allSlots = slotRepository.findByCourtIdAndDateBetween(courtId, today, endDate);\r\n        List<Slot> slots = allSlots.stream()\r\n            .filter(slot -> !\"PENDING\".equals(slot.getStatus()))\r\n            .collect(Collectors.toList());\r\n        \r\n        System.out.println(\"=== getAvailableSlotsByCourt Debug ===\");\r\n        System.out.println(\"Court ID: \" + courtId);\r\n        System.out.println(\"Total slots found: \" + allSlots.size());\r\n        System.out.println(\"Slots after PENDING filter: \" + slots.size());\r\n        \r\n        // 显示被过滤掉的PENDING slots\r\n        List<Slot> pendingSlots = allSlots.stream()\r\n            .filter(slot -> \"PENDING\".equals(slot.getStatus()))\r\n            .collect(Collectors.toList());\r\n        \r\n        if (!pendingSlots.isEmpty()) {\r\n            System.out.println(\"PENDING slots found:\");\r\n            for (Slot slot : pendingSlots) {\r\n                System.out.println(\"  - Slot ID: \" + slot.getId() + \r\n                    \", Date: \" + slot.getDate() + \r\n                    \", Time: \" + slot.getStartTime() + \"-\" + slot.getEndTime() + \r\n                    \", Status: \" + slot.getStatus());\r\n            }\r\n        }\r\n        System.out.println(\"=== End Debug ===\");\r\n\r\n        // 查詢所有未取消的 class session\r\n        final List<com.pickleball_backend.pickleball.entity.ClassSession> filteredSessions = classSessionRepository.findByCourtIdAndStartTimeBetween(\r\n            courtId,\r\n            today.atStartOfDay(),\r\n            endDate.atTime(23, 59, 59)\r\n        ).stream().filter(s -> !\"CANCELLED\".equalsIgnoreCase(s.getStatus())).toList();\r\n\r\n        return slots.stream().filter(slot -> {\r\n            LocalDateTime slotStart = LocalDateTime.of(slot.getDate(), slot.getStartTime());\r\n            LocalDateTime slotEnd = LocalDateTime.of(slot.getDate(), slot.getEndTime());\r\n            // 只要有任何 class session 時間重疊，該 slot 就不能預約\r\n            boolean overlap = filteredSessions.stream().anyMatch(s ->\r\n                slotStart.isBefore(s.getEndTime()) && slotEnd.isAfter(s.getStartTime())\r\n            );\r\n            \r\n            // 檢查是否有已預訂的 BookingSlot\r\n            boolean isBooked = bookingSlotRepository.existsBySlotIdAndStatus(slot.getId(), \"BOOKED\");\r\n            \r\n            return !overlap && !isBooked; // 只有沒有課程重疊且未預訂的時段才可用\r\n        }).map(slot -> {\r\n            SlotResponseDto dto = new SlotResponseDto();\r\n            dto.setId(slot.getId());\r\n            dto.setCourtId(slot.getCourtId());\r\n            dto.setDate(slot.getDate());\r\n            dto.setStartTime(slot.getStartTime());\r\n            dto.setEndTime(slot.getEndTime());\r\n            dto.setStatus(\"AVAILABLE\");\r\n            dto.setDurationHours(calculateDurationHours(slot));\r\n            dto.setCourtName(court.getName());\r\n            dto.setCourtLocation(court.getLocation());\r\n            return dto;\r\n        }).collect(Collectors.toList());\r\n    }\r\n\r\n    public List<SlotResponseDto> getAllSlotsByCourt(Integer courtId, LocalDate startDate, LocalDate endDate) {\r\n        Court court = courtRepository.findById(courtId)\r\n            .orElseThrow(() -> new ResourceNotFoundException(\"Court not found with id: \" + courtId));\r\n\r\n        List<Slot> slots = slotRepository.findByCourtIdAndDateBetween(courtId, startDate, endDate);\r\n\r\n        return slots.stream().map(slot -> {\r\n            SlotResponseDto dto = new SlotResponseDto();\r\n            dto.setId(slot.getId());\r\n            dto.setCourtId(slot.getCourtId());\r\n            dto.setDate(slot.getDate());\r\n            dto.setStartTime(slot.getStartTime());\r\n            dto.setEndTime(slot.getEndTime());\r\n            dto.setDurationHours(slot.getDurationHours());\r\n            dto.setCourtName(court.getName());\r\n            dto.setCourtLocation(court.getLocation());\r\n            \r\n            // 檢查是否有已預訂的 BookingSlot\r\n            boolean isBooked = bookingSlotRepository.existsBySlotIdAndStatus(slot.getId(), \"BOOKED\");\r\n            dto.setStatus(isBooked ? \"BOOKED\" : (slot.isAvailable() ? \"AVAILABLE\" : \"UNAVAILABLE\"));\r\n            \r\n            return dto;\r\n        }).collect(Collectors.toList());\r\n    }\r\n\r\n    private int calculateDurationHours(Slot slot) {\r\n        if (slot.getDurationHours() != null) {\r\n            return slot.getDurationHours();\r\n        }\r\n\r\n        LocalTime start = slot.getStartTime();\r\n        LocalTime end = slot.getEndTime();\r\n\r\n        long hours = Duration.between(start, end).toHours();\r\n\r\n        if (hours < 0) {\r\n            hours = 24 + hours;\r\n        }\r\n\r\n        return (int) hours;\r\n    }\r\n\r\n    private String determineSlotStatus(Slot slot, Court court) {\r\n        if (!slot.isAvailable()) {\r\n            return \"BOOKED\";\r\n        }\r\n        if (\"MAINTENANCE\".equals(court.getStatus())) {\r\n            return \"MAINTENANCE\";\r\n        }\r\n        if (!isOperatingDay(slot, court)) {\r\n            return \"CLOSED\";\r\n        }\r\n        if (!isDuringOperatingHours(slot, court)) {\r\n            return \"CLOSED\";\r\n        }\r\n        return \"AVAILABLE\";\r\n    }\r\n\r\n    private boolean isOperatingDay(Slot slot, Court court) {\r\n        if (court.getOperatingDays() == null) return false;\r\n\r\n        DayOfWeek slotDay = slot.getDate().getDayOfWeek();\r\n        String[] operatingDays = court.getOperatingDays().split(\",\");\r\n\r\n        for (String day : operatingDays) {\r\n            try {\r\n                DayOfWeek courtDay = DayOfWeek.valueOf(day.trim().toUpperCase());\r\n                if (courtDay == slotDay) {\r\n                    return true;\r\n                }\r\n            } catch (IllegalArgumentException ignored) {\r\n                // 忽略无效日期格式\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private boolean isDuringOperatingHours(Slot slot, Court court) {\r\n        try {\r\n            LocalTime opening = LocalTime.parse(court.getOpeningTime());\r\n            LocalTime closing = LocalTime.parse(court.getClosingTime());\r\n            return !slot.getStartTime().isBefore(opening) &&\r\n                    !slot.getEndTime().isAfter(closing);\r\n        } catch (Exception e) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/SlotServiceImpl.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/SlotServiceImpl.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/SlotServiceImpl.java	(revision c178c1d9e80f6815b91226b2d10f391611dcb6b4)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/SlotServiceImpl.java	(date 1754951065828)
@@ -4,13 +4,16 @@
 import com.pickleball_backend.pickleball.dto.SlotResponseDto;
 import com.pickleball_backend.pickleball.entity.Court;
 import com.pickleball_backend.pickleball.entity.Slot;
-
+import com.pickleball_backend.pickleball.entity.Event;
 import com.pickleball_backend.pickleball.exception.ResourceNotFoundException;
 import com.pickleball_backend.pickleball.exception.ValidationException;
 import com.pickleball_backend.pickleball.repository.CourtRepository;
 import com.pickleball_backend.pickleball.repository.SlotRepository;
 import com.pickleball_backend.pickleball.repository.ClassSessionRepository;
 import com.pickleball_backend.pickleball.repository.BookingSlotRepository; // 新增：檢查預訂狀態
+import com.pickleball_backend.pickleball.repository.EventRepository; // 新增：檢查Event衝突
+import com.pickleball_backend.pickleball.repository.VenueRepository; // 新增：用於查詢場館
+import lombok.extern.slf4j.Slf4j;
 
 import lombok.RequiredArgsConstructor;
 import org.springframework.stereotype.Service;
@@ -26,12 +29,15 @@
 
 @Service
 @RequiredArgsConstructor
+@Slf4j
 public class SlotServiceImpl implements SlotService {
 
     private final SlotRepository slotRepository;
     private final CourtRepository courtRepository;
     private final ClassSessionRepository classSessionRepository;
     private final BookingSlotRepository bookingSlotRepository; // 新增：檢查預訂狀態
+    private final EventRepository eventRepository; // 新增：檢查Event衝突
+    private final VenueRepository venueRepository; // 新增：用於查詢場館
 
     @Override
     public List<SlotResponseDto> getSlots(List<Integer> courtIds, LocalDate startDate, LocalDate endDate) {
@@ -156,6 +162,7 @@
         return slots.stream().filter(slot -> {
             LocalDateTime slotStart = LocalDateTime.of(slot.getDate(), slot.getStartTime());
             LocalDateTime slotEnd = LocalDateTime.of(slot.getDate(), slot.getEndTime());
+            
             // 只要有任何 class session 時間重疊，該 slot 就不能預約
             boolean overlap = filteredSessions.stream().anyMatch(s ->
                 slotStart.isBefore(s.getEndTime()) && slotEnd.isAfter(s.getStartTime())
@@ -164,7 +171,30 @@
             // 檢查是否有已預訂的 BookingSlot
             boolean isBooked = bookingSlotRepository.existsBySlotIdAndStatus(slot.getId(), "BOOKED");
             
-            return !overlap && !isBooked; // 只有沒有課程重疊且未預訂的時段才可用
+            // 新增：檢查是否有Event衝突
+            List<Event> conflictingEvents = eventRepository.findByCourtsIdAndStartTimeBetweenAndStatusNot(
+                courtId,
+                slotStart,
+                slotEnd,
+                "CANCELLED"
+            );
+            boolean hasEventConflict = !conflictingEvents.isEmpty();
+            
+            // 調試信息
+            System.out.println("=== Slot Availability Debug ===");
+            System.out.println("Slot: " + slot.getDate() + " " + slot.getStartTime() + "-" + slot.getEndTime());
+            System.out.println("Class session overlap: " + overlap);
+            System.out.println("Is booked: " + isBooked);
+            System.out.println("Has event conflict: " + hasEventConflict);
+            System.out.println("Conflicting events count: " + conflictingEvents.size());
+            if (!conflictingEvents.isEmpty()) {
+                for (Event event : conflictingEvents) {
+                    System.out.println("  - Event: " + event.getTitle() + " (" + event.getStatus() + ")");
+                }
+            }
+            System.out.println("=== End Debug ===");
+            
+            return !overlap && !isBooked && !hasEventConflict; // 重新啟用Event衝突檢查
         }).map(slot -> {
             SlotResponseDto dto = new SlotResponseDto();
             dto.setId(slot.getId());
@@ -180,6 +210,78 @@
         }).collect(Collectors.toList());
     }
 
+    @Override
+    public List<SlotResponseDto> getAvailableSlotsByCourtAndDateRange(Integer courtId, LocalDate startDate, LocalDate endDate) {
+        log.info("Getting available slots for court {} from {} to {}", courtId, startDate, endDate);
+        
+        Court court = courtRepository.findById(courtId)
+                .orElseThrow(() -> new ResourceNotFoundException("Court not found with id: " + courtId));
+
+        // 查找指定日期範圍內的所有slots，包括isAvailable=false的，然后过滤掉PENDING状态的
+        List<Slot> allSlots = slotRepository.findByCourtIdAndDateBetween(courtId, startDate, endDate);
+        log.info("Found {} total slots for court {}", allSlots.size(), courtId);
+        
+        List<Slot> slots = allSlots.stream()
+            .filter(slot -> !"PENDING".equals(slot.getStatus()))
+            .collect(Collectors.toList());
+        log.info("After filtering PENDING slots: {} slots", slots.size());
+
+        // 查詢指定日期範圍內所有未取消的 class session
+        final List<com.pickleball_backend.pickleball.entity.ClassSession> filteredSessions = classSessionRepository.findByCourtIdAndStartTimeBetween(
+            courtId,
+            startDate.atStartOfDay(),
+            endDate.atTime(23, 59, 59)
+        ).stream().filter(s -> !"CANCELLED".equalsIgnoreCase(s.getStatus())).toList();
+        
+        int totalSlots = slots.size();
+
+        List<SlotResponseDto> result = slots.stream().filter(slot -> {
+            LocalDateTime slotStart = LocalDateTime.of(slot.getDate(), slot.getStartTime());
+            LocalDateTime slotEnd = LocalDateTime.of(slot.getDate(), slot.getEndTime());
+            
+            // 只要有任何 class session 時間重疊，該 slot 就不能預約
+            boolean overlap = filteredSessions.stream().anyMatch(s ->
+                slotStart.isBefore(s.getEndTime()) && slotEnd.isAfter(s.getStartTime())
+            );
+            
+            // 檢查是否有已預訂的 BookingSlot
+            boolean isBooked = bookingSlotRepository.existsBySlotIdAndStatus(slot.getId(), "BOOKED");
+            
+            // 新增：檢查是否有Event衝突
+            List<Event> conflictingEvents = eventRepository.findByCourtsIdAndStartTimeBetweenAndStatusNot(
+                courtId,
+                slotStart,
+                slotEnd,
+                "CANCELLED"
+            );
+            boolean hasEventConflict = !conflictingEvents.isEmpty();
+            
+            boolean isAvailable = !overlap && !isBooked && !hasEventConflict;
+            
+            if (!isAvailable) {
+                log.debug("Slot {} is not available: overlap={}, isBooked={}, hasEventConflict={}", 
+                    slot.getId(), overlap, isBooked, hasEventConflict);
+            }
+            
+            return isAvailable;
+        }).map(slot -> {
+            SlotResponseDto dto = new SlotResponseDto();
+            dto.setId(slot.getId());
+            dto.setCourtId(slot.getCourtId());
+            dto.setDate(slot.getDate());
+            dto.setStartTime(slot.getStartTime());
+            dto.setEndTime(slot.getEndTime());
+            dto.setStatus("AVAILABLE");
+            dto.setDurationHours(calculateDurationHours(slot));
+            dto.setCourtName(court.getName());
+            dto.setCourtLocation(court.getLocation());
+            return dto;
+        }).collect(Collectors.toList());
+        
+        log.info("Court {}: {} total slots, {} available slots", courtId, totalSlots, result.size());
+        return result;
+    }
+
     public List<SlotResponseDto> getAllSlotsByCourt(Integer courtId, LocalDate startDate, LocalDate endDate) {
         Court court = courtRepository.findById(courtId)
             .orElseThrow(() -> new ResourceNotFoundException("Court not found with id: " + courtId));
@@ -268,4 +370,63 @@
         }
     }
 
+    @Override
+    public List<SlotResponseDto> getAvailableSlotsByVenueAndDate(Integer venueId, LocalDate date) {
+        log.info("Getting available slots for venue {} on date {}", venueId, date);
+        
+        // Get all courts for the venue
+        List<Court> venueCourts = courtRepository.findByVenueId(venueId);
+        if (venueCourts.isEmpty()) {
+            log.warn("No courts found for venue {}", venueId);
+            return Collections.emptyList();
+        }
+
+        log.info("Found {} courts for venue {}", venueCourts.size(), venueId);
+
+        // Get available slots for all courts in the venue
+        List<SlotResponseDto> allSlots = new ArrayList<>();
+        for (Court court : venueCourts) {
+            log.info("Getting available slots for court {} ({})", court.getId(), court.getName());
+            List<SlotResponseDto> courtSlots = getAvailableSlotsByCourtAndDateRange(court.getId(), date, date);
+            log.info("Found {} available slots for court {}", courtSlots.size(), court.getId());
+            allSlots.addAll(courtSlots);
+        }
+
+        log.info("Total available slots for venue {} on date {}: {}", venueId, date, allSlots.size());
+        return allSlots;
+    }
+
+    @Override
+    public List<String> getBookedDatesForVenue(Integer venueId, LocalDate startDate, LocalDate endDate) {
+        try {
+            // 獲取該venue下所有court的ID
+            List<Court> venueCourts = courtRepository.findByVenueId(venueId);
+            if (venueCourts.isEmpty()) {
+                return new ArrayList<>();
+            }
+            
+            List<Integer> courtIds = venueCourts.stream()
+                .map(Court::getId)
+                .collect(Collectors.toList());
+            
+            // 獲取所有court的已預訂日期
+            Set<String> bookedDatesSet = new HashSet<>();
+            for (Integer courtId : courtIds) {
+                List<SlotResponseDto> courtSlots = getAllSlotsByCourt(courtId, startDate, endDate);
+                // 過濾出已預訂的時段
+                List<String> courtBookedDates = courtSlots.stream()
+                    .filter(slot -> "BOOKED".equals(slot.getStatus()))
+                    .map(slot -> slot.getDate().toString())
+                    .distinct()
+                    .collect(Collectors.toList());
+                bookedDatesSet.addAll(courtBookedDates);
+            }
+            
+            return new ArrayList<>(bookedDatesSet);
+        } catch (Exception e) {
+            log.error("Error getting booked dates for venue {} from {} to {}", venueId, startDate, endDate, e);
+            return new ArrayList<>();
+        }
+    }
+
 }
\ No newline at end of file
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/FriendlyMatch.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.entity;\r\n\r\nimport jakarta.persistence.*;\r\nimport lombok.Data;\r\nimport java.time.LocalDateTime;\r\nimport java.util.List;\r\n\r\n@Entity\r\n@Data\r\n@Table(name = \"friendlymatch\")\r\npublic class FriendlyMatch {\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Integer id;\r\n\r\n    @Column(name = \"max_players\", nullable = false)\r\n    private Integer maxPlayers;\r\n\r\n    @Column(name = \"current_players\")\r\n    private int currentPlayers = 1; // Organizer is first player\r\n\r\n    private String skillLevel;\r\n\r\n    @Column(columnDefinition = \"TEXT\")\r\n    private String matchRules;\r\n\r\n    private String status = \"OPEN\"; // OPEN, FULL, CANCELLED\r\n\r\n    // 付款狀態：PENDING, PAID, CANCELLED\r\n    @Column(name = \"payment_status\")\r\n    private String paymentStatus = \"PENDING\";\r\n\r\n    @Column(name = \"start_time\")\r\n    private LocalDateTime startTime;\r\n\r\n    @Column(name = \"end_time\")\r\n    private LocalDateTime endTime;\r\n\r\n    @Column(name = \"duration_hours\")\r\n    private Integer durationHours;\r\n\r\n    @Column(name = \"price\")\r\n    private Double price;\r\n\r\n    private String location;\r\n\r\n    @Column(name = \"court_id\")\r\n    private Integer courtId;\r\n\r\n    @ManyToOne\r\n    @JoinColumn(name = \"organizer_id\")\r\n    private Member organizer;\r\n\r\n    @ManyToOne(fetch = FetchType.LAZY)\r\n    @JoinColumn(name = \"booking_id\")\r\n    private Booking booking; // 對應已預約的場地\r\n\r\n    // 是否為邀請型（由 booking 產生的 invitation）\r\n    @Column(name = \"is_invitation\")\r\n    private boolean isInvitation = false;\r\n\r\n    // 邀請型態（可擴充：FRIENDLY_MATCH_INVITE, TOURNAMENT_INVITE...）\r\n    @Column(name = \"invitation_type\")\r\n    private String invitationType = \"FRIENDLY_MATCH_INVITE\";\r\n\r\n    @OneToMany(mappedBy = \"friendlyMatch\", cascade = CascadeType.ALL)\r\n    private List<JoinRequest> joinRequests;\r\n\r\n    public void setIsInvitation(boolean isInvitation) {\r\n        this.isInvitation = isInvitation;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/FriendlyMatch.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/FriendlyMatch.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/FriendlyMatch.java	(revision c178c1d9e80f6815b91226b2d10f391611dcb6b4)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/FriendlyMatch.java	(date 1754953205774)
@@ -2,6 +2,7 @@
 
 import jakarta.persistence.*;
 import lombok.Data;
+import lombok.ToString;
 import java.time.LocalDateTime;
 import java.util.List;
 
@@ -49,10 +50,12 @@
 
     @ManyToOne
     @JoinColumn(name = "organizer_id")
+    @ToString.Exclude
     private Member organizer;
 
     @ManyToOne(fetch = FetchType.LAZY)
     @JoinColumn(name = "booking_id")
+    @ToString.Exclude
     private Booking booking; // 對應已預約的場地
 
     // 是否為邀請型（由 booking 產生的 invitation）
@@ -64,6 +67,7 @@
     private String invitationType = "FRIENDLY_MATCH_INVITE";
 
     @OneToMany(mappedBy = "friendlyMatch", cascade = CascadeType.ALL)
+    @ToString.Exclude
     private List<JoinRequest> joinRequests;
 
     public void setIsInvitation(boolean isInvitation) {
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/EventRegistrationService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.service;\r\n\r\nimport com.pickleball_backend.pickleball.dto.EventRegistrationRequestDto;\r\nimport com.pickleball_backend.pickleball.dto.EventRegistrationResponseDto;\r\n\r\npublic interface EventRegistrationService {\r\n    EventRegistrationResponseDto registerForEvent(EventRegistrationRequestDto request, String username);\r\n    void cancelRegistration(Integer eventId, String username);\r\n    boolean isUserRegistered(Integer eventId, String username);\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/EventRegistrationService.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/EventRegistrationService.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/EventRegistrationService.java	(revision c178c1d9e80f6815b91226b2d10f391611dcb6b4)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/EventRegistrationService.java	(date 1754955075306)
@@ -7,4 +7,5 @@
     EventRegistrationResponseDto registerForEvent(EventRegistrationRequestDto request, String username);
     void cancelRegistration(Integer eventId, String username);
     boolean isUserRegistered(Integer eventId, String username);
+    void distributeEventEscrow(Integer eventId);
 }
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/SlotService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.service;\r\n\r\nimport com.pickleball_backend.pickleball.dto.SlotDto;\r\nimport com.pickleball_backend.pickleball.dto.SlotResponseDto;\r\nimport java.time.LocalDate;\r\nimport java.util.List;\r\n\r\npublic interface SlotService {\r\n    List<SlotResponseDto> getSlots(List<Integer> courtIds, LocalDate startDate, LocalDate endDate);\r\n    void createSlots(List<SlotDto> slotDtos);\r\n    List<SlotResponseDto> getAvailableSlotsByCourt(Integer courtId);\r\n    List<SlotResponseDto> getAllSlotsByCourt(Integer courtId, LocalDate startDate, LocalDate endDate);\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/SlotService.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/SlotService.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/SlotService.java	(revision c178c1d9e80f6815b91226b2d10f391611dcb6b4)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/SlotService.java	(date 1754950770089)
@@ -9,5 +9,8 @@
     List<SlotResponseDto> getSlots(List<Integer> courtIds, LocalDate startDate, LocalDate endDate);
     void createSlots(List<SlotDto> slotDtos);
     List<SlotResponseDto> getAvailableSlotsByCourt(Integer courtId);
+    List<SlotResponseDto> getAvailableSlotsByCourtAndDateRange(Integer courtId, LocalDate startDate, LocalDate endDate);
     List<SlotResponseDto> getAllSlotsByCourt(Integer courtId, LocalDate startDate, LocalDate endDate);
+    List<SlotResponseDto> getAvailableSlotsByVenueAndDate(Integer venueId, LocalDate date);
+    List<String> getBookedDatesForVenue(Integer venueId, LocalDate startDate, LocalDate endDate);
 }
\ No newline at end of file
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/HelpdeskQuery.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.entity;\r\n\r\nimport jakarta.persistence.*;\r\nimport lombok.Data;\r\nimport java.time.LocalDateTime;\r\n\r\n@Entity\r\n@Data\r\n@Table(name = \"helpdeskquery\")\r\npublic class HelpdeskQuery {\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Long id;\r\n\r\n    private String username;\r\n    private String question;\r\n    private String aiResponse;\r\n    private boolean escalated;\r\n    private LocalDateTime timestamp = LocalDateTime.now();\r\n\r\n    private String topic;\r\n    private String message;\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/HelpdeskQuery.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/HelpdeskQuery.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/HelpdeskQuery.java	(revision c178c1d9e80f6815b91226b2d10f391611dcb6b4)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/HelpdeskQuery.java	(date 1754833049760)
@@ -14,7 +14,10 @@
 
     private String username;
     private String question;
+    
+    @Column(columnDefinition = "TEXT")
     private String aiResponse;
+    
     private boolean escalated;
     private LocalDateTime timestamp = LocalDateTime.now();
 
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/LeaveRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.entity;\r\n\r\nimport jakarta.persistence.*;\r\nimport lombok.Data;\r\nimport lombok.NoArgsConstructor;\r\nimport java.time.LocalDateTime;\r\n\r\n@Entity\r\n@Data\r\n@NoArgsConstructor\r\n@Table(name = \"leave_request\")\r\npublic class LeaveRequest {\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Integer id;\r\n\r\n    @ManyToOne(fetch = FetchType.LAZY)\r\n    @JoinColumn(name = \"student_id\", referencedColumnName = \"id\", nullable = false)\r\n    private User student;\r\n\r\n    @ManyToOne(fetch = FetchType.LAZY)\r\n    @JoinColumn(name = \"coach_id\", referencedColumnName = \"id\", nullable = false)\r\n    private User coach;\r\n\r\n    @ManyToOne(fetch = FetchType.LAZY)\r\n    @JoinColumn(name = \"original_session_id\", referencedColumnName = \"id\", nullable = false)\r\n    private ClassSession originalSession;\r\n\r\n    @Column(nullable = false)\r\n    private LocalDateTime originalDate;\r\n\r\n    @Column(nullable = true)\r\n    private LocalDateTime preferredDate;\r\n\r\n    @Column(nullable = false, columnDefinition = \"TEXT\")\r\n    private String reason;\r\n\r\n    @Enumerated(EnumType.STRING)\r\n    @Column(nullable = false)\r\n    private LeaveRequestStatus status = LeaveRequestStatus.PENDING;\r\n\r\n    @Column(nullable = false)\r\n    private LocalDateTime requestDate = LocalDateTime.now();\r\n\r\n    @Column(columnDefinition = \"TEXT\")\r\n    private String coachNotes;\r\n\r\n    @ManyToOne(fetch = FetchType.LAZY)\r\n    @JoinColumn(name = \"replacement_session_id\", referencedColumnName = \"id\")\r\n    private ClassSession replacementSession;\r\n\r\n    @Column\r\n    private LocalDateTime resolvedDate;\r\n\r\n    public enum LeaveRequestStatus {\r\n        DRAFT,             // 草稿狀態（學生已提交但未發送給教練）\r\n        PENDING,           // 等待處理\r\n        SELF_SELECTED,     // 學生自己選擇了補課時間\r\n        MESSAGE_SENT,      // 學生發送了訊息給教練\r\n        APPROVED,          // 已批准並安排補課\r\n        DECLINED,          // 已拒絕\r\n        CANCELLED          // 學生取消請求\r\n    }\r\n} 
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/LeaveRequest.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/LeaveRequest.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/LeaveRequest.java	(revision c178c1d9e80f6815b91226b2d10f391611dcb6b4)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/LeaveRequest.java	(date 1754953467238)
@@ -3,6 +3,7 @@
 import jakarta.persistence.*;
 import lombok.Data;
 import lombok.NoArgsConstructor;
+import lombok.ToString;
 import java.time.LocalDateTime;
 
 @Entity
@@ -16,14 +17,17 @@
 
     @ManyToOne(fetch = FetchType.LAZY)
     @JoinColumn(name = "student_id", referencedColumnName = "id", nullable = false)
+    @ToString.Exclude
     private User student;
 
     @ManyToOne(fetch = FetchType.LAZY)
     @JoinColumn(name = "coach_id", referencedColumnName = "id", nullable = false)
+    @ToString.Exclude
     private User coach;
 
     @ManyToOne(fetch = FetchType.LAZY)
     @JoinColumn(name = "original_session_id", referencedColumnName = "id", nullable = false)
+    @ToString.Exclude
     private ClassSession originalSession;
 
     @Column(nullable = false)
@@ -47,6 +51,7 @@
 
     @ManyToOne(fetch = FetchType.LAZY)
     @JoinColumn(name = "replacement_session_id", referencedColumnName = "id")
+    @ToString.Exclude
     private ClassSession replacementSession;
 
     @Column
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Message.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.entity;\r\n\r\nimport jakarta.persistence.*;\r\nimport lombok.Data;\r\nimport lombok.NoArgsConstructor;\r\nimport java.time.LocalDateTime;\r\n\r\n@Entity\r\n@Data\r\n@NoArgsConstructor // 添加无参构造器\r\n@Table(name = \"message\")\r\npublic class Message {\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Integer id;\r\n\r\n    @ManyToOne(fetch = FetchType.LAZY)\r\n    @JoinColumn(name = \"sender_id\", referencedColumnName = \"id\", nullable = false)\r\n    private User sender;\r\n\r\n    @ManyToOne(fetch = FetchType.LAZY)\r\n    @JoinColumn(name = \"receiver_id\", referencedColumnName = \"id\", nullable = false)\r\n    private User receiver;\r\n\r\n    @Column(nullable = false, columnDefinition = \"TEXT\")\r\n    private String content;\r\n\r\n    @Column(name = \"image_url\")\r\n    private String imageUrl;\r\n\r\n    @Column(nullable = false)\r\n    private LocalDateTime timestamp = LocalDateTime.now();\r\n\r\n    private boolean delivered = false;\r\n\r\n    @Column(name = \"is_read\")\r\n    private boolean read;\r\n\r\n    @Column(name = \"conversation_id\", nullable = false)\r\n    private String conversationId;\r\n\r\n    @PrePersist\r\n    private void generateConversationId() {\r\n        // 增强 null 检查\r\n        if (sender == null) {\r\n            throw new IllegalStateException(\"Sender cannot be null\");\r\n        }\r\n\r\n        if (receiver == null) {\r\n            throw new IllegalStateException(\"Receiver cannot be null\");\r\n        }\r\n\r\n        if (sender.getId() == null) {\r\n            throw new IllegalStateException(\"Sender ID cannot be null\");\r\n        }\r\n\r\n        if (receiver.getId() == null) {\r\n            throw new IllegalStateException(\"Receiver ID cannot be null\");\r\n        }\r\n\r\n        int minId = Math.min(sender.getId(), receiver.getId());\r\n        int maxId = Math.max(sender.getId(), receiver.getId());\r\n        this.conversationId = minId + \"-\" + maxId;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Message.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Message.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Message.java	(revision c178c1d9e80f6815b91226b2d10f391611dcb6b4)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Message.java	(date 1754953467238)
@@ -3,6 +3,7 @@
 import jakarta.persistence.*;
 import lombok.Data;
 import lombok.NoArgsConstructor;
+import lombok.ToString;
 import java.time.LocalDateTime;
 
 @Entity
@@ -16,12 +17,16 @@
 
     @ManyToOne(fetch = FetchType.LAZY)
     @JoinColumn(name = "sender_id", referencedColumnName = "id", nullable = false)
+    @ToString.Exclude
     private User sender;
 
     @ManyToOne(fetch = FetchType.LAZY)
-    @JoinColumn(name = "receiver_id", referencedColumnName = "id", nullable = false)
+    @JoinColumn(name = "receiver_id", referencedColumnName = "id")
+    @ToString.Exclude
     private User receiver;
+    
 
+
     @Column(nullable = false, columnDefinition = "TEXT")
     private String content;
 
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/security/JwtService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.security;\r\n\r\nimport io.jsonwebtoken.*;\r\nimport io.jsonwebtoken.io.Decoders;\r\nimport io.jsonwebtoken.security.Keys;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport javax.crypto.SecretKey;\r\nimport java.util.Date;\r\n\r\n@Service\r\npublic class JwtService {\r\n    private final String SECRET = \"picSecKey123picSecKey123picSecKey123\";\r\n    private final SecretKey key = Keys.hmacShaKeyFor(Decoders.BASE64.decode(java.util.Base64.getEncoder().encodeToString(SECRET.getBytes())));\r\n\r\n    public String generateToken(String subject, String role) {\r\n        String cleanedRole = role.toUpperCase().replace(\"ROLE_\", \"\");\r\n        return Jwts.builder()\r\n                .subject(subject)\r\n                .claim(\"role\", cleanedRole)\r\n                .issuedAt(new Date())\r\n                .expiration(new Date(System.currentTimeMillis() + 1000 * 60 * 60 * 24))\r\n                .signWith(key, Jwts.SIG.HS256)\r\n                .compact();\r\n    }\r\n\r\n    public String generateTokenWithUserId(String subject, String role, Integer userId) {\r\n        String cleanedRole = role.toUpperCase().replace(\"ROLE_\", \"\");\r\n        return Jwts.builder()\r\n                .subject(subject)\r\n                .claim(\"role\", cleanedRole)\r\n                .claim(\"userType\", cleanedRole) // 添加 userType 聲明\r\n                .claim(\"userId\", userId)\r\n                .claim(\"username\", subject) // 添加 username 聲明\r\n                .issuedAt(new Date())\r\n                .expiration(new Date(System.currentTimeMillis() + 1000 * 60 * 60 * 24))\r\n                .signWith(key, Jwts.SIG.HS256)\r\n                .compact();\r\n    }\r\n\r\n    public String extractUsername(String token) {\r\n        return Jwts.parser().verifyWith(key).build().parseSignedClaims(token).getPayload().getSubject();\r\n    }\r\n\r\n    public boolean isValid(String token) {\r\n        try {\r\n            extractUsername(token);\r\n            return true;\r\n        } catch (Exception e) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public String extractRole(String token) {\r\n        Claims claims = Jwts.parser()\r\n                .verifyWith(key)\r\n                .build()\r\n                .parseSignedClaims(token)\r\n                .getPayload();\r\n\r\n        String role = claims.get(\"role\", String.class);\r\n        return role != null ? role.toUpperCase() : null;\r\n    }\r\n\r\n    public Claims extractAllClaims(String token) {\r\n        return Jwts.parser()\r\n                .verifyWith(key)\r\n                .build()\r\n                .parseSignedClaims(token)\r\n                .getPayload();\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/security/JwtService.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/security/JwtService.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/security/JwtService.java	(revision c178c1d9e80f6815b91226b2d10f391611dcb6b4)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/security/JwtService.java	(date 1754878050012)
@@ -26,10 +26,25 @@
 
     public String generateTokenWithUserId(String subject, String role, Integer userId) {
         String cleanedRole = role.toUpperCase().replace("ROLE_", "");
+        // 從 role 中提取原始的 userType（移除 ROLE_ 前綴，但保持原始大小寫）
+        String originalUserType = role.replace("ROLE_", "");
+        
+        // 將 userType 轉換為正確的格式
+        String userType;
+        if ("EVENTORGANIZER".equalsIgnoreCase(originalUserType)) {
+            userType = "EventOrganizer";
+        } else if ("COACH".equalsIgnoreCase(originalUserType)) {
+            userType = "Coach";
+        } else if ("ADMIN".equalsIgnoreCase(originalUserType)) {
+            userType = "Admin";
+        } else {
+            userType = originalUserType;
+        }
+        
         return Jwts.builder()
                 .subject(subject)
                 .claim("role", cleanedRole)
-                .claim("userType", cleanedRole) // 添加 userType 聲明
+                .claim("userType", userType) // 使用正確格式的 userType
                 .claim("userId", userId)
                 .claim("username", subject) // 添加 username 聲明
                 .issuedAt(new Date())
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/VenueController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.controller;\r\n\r\nimport com.pickleball_backend.pickleball.dto.VenueDto;\r\nimport com.pickleball_backend.pickleball.entity.Venue;\r\nimport com.pickleball_backend.pickleball.service.VenueService;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.http.HttpStatus;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.security.access.prepost.PreAuthorize;\r\nimport org.springframework.web.bind.annotation.*;\r\nimport com.pickleball_backend.pickleball.repository.VenueRepository;\r\n\r\nimport java.time.LocalDate;\r\nimport java.time.LocalTime;\r\nimport java.util.List;\r\nimport com.pickleball_backend.pickleball.entity.Court;\r\nimport com.pickleball_backend.pickleball.repository.BookingRepository;\r\nimport com.pickleball_backend.pickleball.entity.Booking;\r\nimport java.util.Set;\r\nimport java.util.ArrayList;\r\nimport java.util.stream.Collectors;\r\nimport com.pickleball_backend.pickleball.repository.BookingSlotRepository;\r\nimport com.pickleball_backend.pickleball.repository.EventRepository;\r\nimport java.util.HashSet;\r\n\r\n@RestController\r\n@RequestMapping(\"/api/admin/venues\")\r\npublic class VenueController {\r\n    @Autowired\r\n    private VenueService venueService;\r\n    \r\n    @Autowired\r\n    private VenueRepository venueRepository;\r\n\r\n    @Autowired\r\n    private BookingRepository bookingRepository;\r\n\r\n    @Autowired\r\n    private BookingSlotRepository bookingSlotRepository;\r\n\r\n    @Autowired\r\n    private EventRepository eventRepository;\r\n\r\n    @PostMapping\r\n    @PreAuthorize(\"hasAuthority('ROLE_ADMIN')\")\r\n    public ResponseEntity<?> createVenue(@RequestBody VenueDto venueDto) {\r\n        try {\r\n            Venue venue = venueService.createVenue(venueDto);\r\n            return new ResponseEntity<>(venue, HttpStatus.CREATED);\r\n        } catch (Exception e) {\r\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(\"Error creating venue\");\r\n        }\r\n}\r\n\r\n    @PostMapping(\"/add\")\r\n    @PreAuthorize(\"hasAuthority('ROLE_ADMIN')\")\r\n    public Integer addVenue(@RequestBody VenueDto venueDto) {\r\n        Venue venue = new Venue();\r\n        venue.setName(venueDto.getName());\r\n        venue.setLocation(venueDto.getAddress());\r\n        venue.setDescription(venueDto.getDescription());\r\n        venue = venueRepository.save(venue);\r\n        return venue.getId();\r\n    }\r\n\r\n    @GetMapping\r\n    @PreAuthorize(\"hasAuthority('ROLE_ADMIN')\")\r\n    public ResponseEntity<List<Venue>> getAllVenues() {\r\n        List<Venue> venues = venueRepository.findAll();\r\n        return ResponseEntity.ok(venues);\r\n    }\r\n\r\n    @GetMapping(\"/bystate\")\r\n    public ResponseEntity<List<Venue>> getVenuesByState(@RequestParam String state) {\r\n        List<Venue> venues = venueRepository.findByState(state);\r\n        return ResponseEntity.ok(venues);\r\n    }\r\n\r\n    @GetMapping(\"/check-availability\")\r\n    public ResponseEntity<?> checkVenueAvailability(@RequestParam Integer venueId,\r\n                                                    @RequestParam String date,\r\n                                                    @RequestParam String startTime,\r\n                                                    @RequestParam String endTime,\r\n                                                    @RequestParam int peopleCount) {\r\n        LocalDate localDate = LocalDate.parse(date);\r\n        LocalTime localStartTime = LocalTime.parse(startTime);\r\n        LocalTime localEndTime = LocalTime.parse(endTime);\r\n        List<Court> availableCourts = venueService.getAvailableCourts(venueId, localDate, localStartTime, localEndTime, peopleCount);\r\n        int courtsNeeded = (int)Math.ceil(peopleCount / 4.0);\r\n        if (availableCourts.size() >= courtsNeeded) {\r\n            return ResponseEntity.ok(availableCourts);\r\n        } else {\r\n            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(\"此場地容量不足\");\r\n        }\r\n    }\r\n\r\n    @GetMapping(\"/{venueId}/booked-dates\")\r\n    public ResponseEntity<List<String>> getBookedDates(@PathVariable Integer venueId,\r\n                                                  @RequestParam(required = false) String startDate,\r\n                                                  @RequestParam(required = false) String endDate) {\r\n        LocalDate start = startDate != null ? LocalDate.parse(startDate) : LocalDate.now();\r\n        LocalDate end = endDate != null ? LocalDate.parse(endDate) : start.plusYears(1);\r\n\r\n        // 1. 查詢已被 booking 的日期\r\n        List<LocalDate> bookedDates = bookingSlotRepository.findBookedDatesByVenueIdAndDateRange(venueId, start, end);\r\n\r\n        // 2. 查詢該 venue 下所有 event 的日期\r\n        List<LocalDate> eventDates = eventRepository.findEventDatesByVenueIdAndDateRange(venueId, start, end);\r\n\r\n        // 3. 合併去重\r\n        Set<String> allDates = new HashSet<>();\r\n        bookedDates.forEach(d -> allDates.add(d.toString()));\r\n        eventDates.forEach(d -> allDates.add(d.toString()));\r\n\r\n        return ResponseEntity.ok(new ArrayList<>(allDates));\r\n    }\r\n\r\n    // 公共端點，供非管理員用戶使用\r\n    @GetMapping(\"/public/{venueId}/booked-dates\")\r\n    @PreAuthorize(\"hasAnyRole('ADMIN', 'USER', 'EVENTORGANIZER', 'COACH')\")\r\n    public ResponseEntity<List<String>> getBookedDatesPublic(@PathVariable Integer venueId,\r\n                                                  @RequestParam(required = false) String startDate,\r\n                                                  @RequestParam(required = false) String endDate) {\r\n        LocalDate start = startDate != null ? LocalDate.parse(startDate) : LocalDate.now();\r\n        LocalDate end = endDate != null ? LocalDate.parse(endDate) : start.plusYears(1);\r\n\r\n        // 1. 查詢已被 booking 的日期\r\n        List<LocalDate> bookedDates = bookingSlotRepository.findBookedDatesByVenueIdAndDateRange(venueId, start, end);\r\n\r\n        // 2. 查詢該 venue 下所有 event 的日期\r\n        List<LocalDate> eventDates = eventRepository.findEventDatesByVenueIdAndDateRange(venueId, start, end);\r\n\r\n        // 3. 合併去重\r\n        Set<String> allDates = new HashSet<>();\r\n        bookedDates.forEach(d -> allDates.add(d.toString()));\r\n        eventDates.forEach(d -> allDates.add(d.toString()));\r\n\r\n        return ResponseEntity.ok(new ArrayList<>(allDates));\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/VenueController.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/VenueController.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/VenueController.java	(revision c178c1d9e80f6815b91226b2d10f391611dcb6b4)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/VenueController.java	(date 1754909751327)
@@ -104,13 +104,17 @@
         // 1. 查詢已被 booking 的日期
         List<LocalDate> bookedDates = bookingSlotRepository.findBookedDatesByVenueIdAndDateRange(venueId, start, end);
 
-        // 2. 查詢該 venue 下所有 event 的日期
+        // 2. 查詢該 venue 下所有 event 的日期（直接關聯）
         List<LocalDate> eventDates = eventRepository.findEventDatesByVenueIdAndDateRange(venueId, start, end);
 
-        // 3. 合併去重
+        // 3. 查詢該 venue 下所有 court 的 event 日期
+        List<LocalDate> courtEventDates = eventRepository.findEventDatesByCourtVenueIdAndDateRange(venueId, start, end);
+
+        // 4. 合併去重
         Set<String> allDates = new HashSet<>();
         bookedDates.forEach(d -> allDates.add(d.toString()));
         eventDates.forEach(d -> allDates.add(d.toString()));
+        courtEventDates.forEach(d -> allDates.add(d.toString()));
 
         return ResponseEntity.ok(new ArrayList<>(allDates));
     }
@@ -124,16 +128,31 @@
         LocalDate start = startDate != null ? LocalDate.parse(startDate) : LocalDate.now();
         LocalDate end = endDate != null ? LocalDate.parse(endDate) : start.plusYears(1);
 
+        System.out.println("=== Debug: getBookedDatesPublic ===");
+        System.out.println("VenueId: " + venueId);
+        System.out.println("Start: " + start);
+        System.out.println("End: " + end);
+
         // 1. 查詢已被 booking 的日期
         List<LocalDate> bookedDates = bookingSlotRepository.findBookedDatesByVenueIdAndDateRange(venueId, start, end);
+        System.out.println("Booked dates: " + bookedDates);
 
-        // 2. 查詢該 venue 下所有 event 的日期
+        // 2. 查詢該 venue 下所有 event 的日期（直接關聯）
         List<LocalDate> eventDates = eventRepository.findEventDatesByVenueIdAndDateRange(venueId, start, end);
+        System.out.println("Event dates (direct): " + eventDates);
 
-        // 3. 合併去重
+        // 3. 查詢該 venue 下所有 court 的 event 日期
+        List<LocalDate> courtEventDates = eventRepository.findEventDatesByCourtVenueIdAndDateRange(venueId, start, end);
+        System.out.println("Event dates (via courts): " + courtEventDates);
+
+        // 4. 合併去重
         Set<String> allDates = new HashSet<>();
         bookedDates.forEach(d -> allDates.add(d.toString()));
         eventDates.forEach(d -> allDates.add(d.toString()));
+        courtEventDates.forEach(d -> allDates.add(d.toString()));
+
+        System.out.println("Final all dates: " + allDates);
+        System.out.println("=== End Debug ===");
 
         return ResponseEntity.ok(new ArrayList<>(allDates));
     }
Index: .idea/jarRepositories.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"RemoteRepositoriesConfiguration\">\r\n    <remote-repository>\r\n      <option name=\"id\" value=\"central\" />\r\n      <option name=\"name\" value=\"Central Repository\" />\r\n      <option name=\"url\" value=\"https://repo.maven.apache.org/maven2\" />\r\n    </remote-repository>\r\n    <remote-repository>\r\n      <option name=\"id\" value=\"central\" />\r\n      <option name=\"name\" value=\"Maven Central repository\" />\r\n      <option name=\"url\" value=\"https://repo1.maven.org/maven2\" />\r\n    </remote-repository>\r\n    <remote-repository>\r\n      <option name=\"id\" value=\"jboss.community\" />\r\n      <option name=\"name\" value=\"JBoss Community repository\" />\r\n      <option name=\"url\" value=\"https://repository.jboss.org/nexus/content/repositories/public/\" />\r\n    </remote-repository>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/jarRepositories.xml b/.idea/jarRepositories.xml
--- a/.idea/jarRepositories.xml	(revision c178c1d9e80f6815b91226b2d10f391611dcb6b4)
+++ b/.idea/jarRepositories.xml	(date 1754827041552)
@@ -16,5 +16,10 @@
       <option name="name" value="JBoss Community repository" />
       <option name="url" value="https://repository.jboss.org/nexus/content/repositories/public/" />
     </remote-repository>
+    <remote-repository>
+      <option name="id" value="spring-milestones" />
+      <option name="name" value="spring-milestones" />
+      <option name="url" value="https://repo.spring.io/milestone" />
+    </remote-repository>
   </component>
 </project>
\ No newline at end of file
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/MemberService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.service;\r\n\r\nimport com.pickleball_backend.pickleball.dto.*;\r\nimport com.pickleball_backend.pickleball.entity.*;\r\nimport com.pickleball_backend.pickleball.exception.*;\r\nimport com.pickleball_backend.pickleball.repository.*;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.springframework.security.core.context.SecurityContextHolder;\r\nimport org.springframework.stereotype.Service;\r\nimport org.springframework.transaction.annotation.Transactional;\r\n\r\nimport java.time.LocalDate;\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\nimport java.util.UUID;\r\nimport java.util.stream.Collectors;\r\nimport java.util.ArrayList;\r\nimport java.util.Set;\r\nimport java.util.HashSet;\r\n\r\n@Service\r\n@RequiredArgsConstructor\r\npublic class MemberService {\r\n\r\n    private final MemberRepository memberRepository;\r\n    private final MembershipTierRepository tierRepository;\r\n    private final UserAccountRepository userAccountRepository;\r\n    private final VoucherRepository voucherRepository;\r\n    private final WalletRepository walletRepository;\r\n    private final EmailService emailService;\r\n    private final TierService tierService;\r\n\r\n    public MemberDashboardDto getMemberDashboard() {\r\n        String username = SecurityContextHolder.getContext().getAuthentication().getName();\r\n        UserAccount account = userAccountRepository.findByUsername(username)\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"User account not found\"));\r\n\r\n        User user = account.getUser();\r\n        Member member = memberRepository.findByUserId(user.getId());\r\n\r\n        if (member == null) {\r\n            throw new ResourceNotFoundException(\"Member not found\");\r\n        }\r\n\r\n        if (member.getTier() == null) {\r\n            // Try to auto-assign tier first\r\n            tierService.recalculateMemberTier(member);\r\n            member = memberRepository.findByUserId(user.getId()); // Refresh\r\n        }\r\n\r\n        if (member.getTier() == null) {\r\n            // 使用字符串查询默认层\r\n            MembershipTier defaultTier = tierRepository.findByTierName(\"BRONZE\");\r\n            if (defaultTier == null) {\r\n                throw new ResourceNotFoundException(\"Default BRONZE tier not found\");\r\n            }\r\n            member.setTier(defaultTier);\r\n            memberRepository.save(member);\r\n        }\r\n\r\n        if (member.getWallet() == null) {\r\n            initializeWallet(member.getId()); // Initialize if missing\r\n        }\r\n\r\n        // Add debug logging\r\n        System.out.println(\"=== MemberService Debug ===\");\r\n        System.out.println(\"Member ID: \" + member.getId());\r\n        System.out.println(\"Member Tier ID: \" + (member.getTier() != null ? member.getTier().getId() : \"NULL\"));\r\n        System.out.println(\"Member Tier Name: \" + (member.getTier() != null ? member.getTier().getTierName() : \"NULL\"));\r\n        System.out.println(\"Member Point Balance: \" + member.getTierPointBalance());\r\n\r\n        // Get vouchers for current tier\r\n        List<Voucher> tierVouchers = voucherRepository.findByTierIdAndMemberIsNull(member.getTier().getId());\r\n        \r\n        // Get vouchers with no tier restriction (available to all users)\r\n        List<Voucher> noTierVouchers = voucherRepository.findByTierIsNullAndMemberIsNull();\r\n        \r\n        // Combine both lists and remove duplicates based on voucher code\r\n        Set<String> seenCodes = new HashSet<>();\r\n        List<Voucher> allVouchers = new ArrayList<>();\r\n        \r\n        // Add tier vouchers first\r\n        for (Voucher voucher : tierVouchers) {\r\n            if (!seenCodes.contains(voucher.getCode())) {\r\n                allVouchers.add(voucher);\r\n                seenCodes.add(voucher.getCode());\r\n            }\r\n        }\r\n        \r\n        // Add no-tier vouchers (only if not already added)\r\n        for (Voucher voucher : noTierVouchers) {\r\n            if (!seenCodes.contains(voucher.getCode())) {\r\n                allVouchers.add(voucher);\r\n                seenCodes.add(voucher.getCode());\r\n            }\r\n        }\r\n        \r\n        System.out.println(\"Found \" + tierVouchers.size() + \" vouchers for tier \" + member.getTier().getId());\r\n        System.out.println(\"Found \" + noTierVouchers.size() + \" vouchers with no tier restriction\");\r\n        System.out.println(\"Total vouchers: \" + allVouchers.size());\r\n        \r\n        allVouchers.forEach(v -> {\r\n            System.out.println(\"Voucher ID: \" + v.getId() + \r\n                             \", Code: \" + v.getCode() + \r\n                             \", Tier: \" + (v.getTier() != null ? v.getTier().getTierName() : \"NO TIER\") +\r\n                             \", Expiry: \" + v.getExpiryDate() + \r\n                             \", Points: \" + v.getRequestPoints());\r\n        });\r\n\r\n        List<VoucherDto> redeemableVouchers = allVouchers.stream()\r\n                .filter(v -> {\r\n                    // Handle null or default dates as never expiring\r\n                    if (v.getExpiryDate() == null) {\r\n                        System.out.println(\"Voucher \" + v.getCode() + \" has no expiry date - INCLUDED\");\r\n                        return true;\r\n                    }\r\n                    if (v.getExpiryDate().equals(LocalDate.of(1970, 1, 1))) {\r\n                        System.out.println(\"Voucher \" + v.getCode() + \" has default expiry date - INCLUDED\");\r\n                        return true;\r\n                    }\r\n                    \r\n                    boolean isExpired = v.getExpiryDate().isBefore(LocalDate.now());\r\n                    System.out.println(\"Voucher \" + v.getCode() + \" expires on \" + v.getExpiryDate() + \r\n                                     \", today is \" + LocalDate.now() + \", isExpired: \" + isExpired + \r\n                                     (isExpired ? \" - EXCLUDED\" : \" - INCLUDED\"));\r\n                    return !isExpired;\r\n                })\r\n                .map(v -> new VoucherDto(\r\n                        v.getId(),\r\n                        v.getCode(),\r\n                        v.getDiscountValue(),  // Changed from getDiscountAmount()\r\n                        v.getDiscountType(),  // Added discount type\r\n                        v.getRequestPoints(),\r\n                        v.getTier() != null ? v.getTier().getTierName() : null,  // Added tierName\r\n                        v.getExpiryDate()\r\n                ))\r\n                .collect(Collectors.toList());\r\n        \r\n        System.out.println(\"After filtering by expiry date: \" + redeemableVouchers.size() + \" vouchers\");\r\n\r\n        return new MemberDashboardDto(\r\n                member.getTier().getTierName(), // 直接返回字符串值\r\n                member.getTierPointBalance(),\r\n                member.getRewardPointBalance(),  // 新增 reward points\r\n                member.getTier().getBenefits(),\r\n                redeemableVouchers,\r\n                member.getTier().getMinPoints(),\r\n                member.getTier().getMaxPoints()\r\n        );\r\n    }\r\n\r\n    public Integer getMemberIdByUsername(String username) {\r\n        UserAccount account = userAccountRepository.findByUsername(username)\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"User account not found\"));\r\n        Member member = memberRepository.findByUserId(account.getUser().getId());\r\n        return member.getId();\r\n    }\r\n\r\n    @Transactional\r\n    public VoucherRedemptionResponse redeemVoucher(Integer voucherId) {\r\n        String username = SecurityContextHolder.getContext().getAuthentication().getName();\r\n        UserAccount account = userAccountRepository.findByUsername(username)\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"User account not found\"));\r\n\r\n        User user = account.getUser();\r\n        Member member = memberRepository.findByUserId(user.getId());\r\n\r\n        if (member == null) {\r\n            throw new ResourceNotFoundException(\"Member not found\");\r\n        }\r\n\r\n        if (member.getTier() == null) {\r\n            throw new ValidationException(\"No tier assigned to member\");\r\n        }\r\n\r\n        Voucher voucher = voucherRepository.findById(voucherId)\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"Voucher not found\"));\r\n\r\n        // Validate voucher\r\n        if (voucher.getTier() != null && voucher.getTier().getId() != null) {\r\n            // Voucher has tier restriction - check if user's tier matches\r\n            if (member.getTier() == null || member.getTier().getId() == null ||\r\n                !voucher.getTier().getId().equals(member.getTier().getId())) {\r\n                throw new ValidationException(\"Voucher not available for your tier\");\r\n            }\r\n        }\r\n        // If voucher.getTier() is null, it means no tier restriction - all users can redeem\r\n        \r\n        if (member.getTierPointBalance() < voucher.getRequestPoints()) {\r\n            throw new ValidationException(\"Insufficient points\");\r\n        }\r\n        if (voucher.getExpiryDate() != null && \r\n            !voucher.getExpiryDate().equals(LocalDate.of(1970, 1, 1)) && \r\n            voucher.getExpiryDate().isBefore(LocalDate.now())) {\r\n            throw new ValidationException(\"Voucher has expired\");\r\n        }\r\n\r\n        // Deduct points\r\n        member.setTierPointBalance(member.getTierPointBalance() - voucher.getRequestPoints());\r\n        memberRepository.save(member);\r\n\r\n        // Recalculate tier\r\n        tierService.recalculateMemberTier(member);\r\n\r\n        // Generate unique voucher code\r\n        String uniqueCode = voucher.getCode() + \"-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\r\n\r\n        // Create redeemed voucher\r\n        Voucher redeemedVoucher = new Voucher();\r\n        redeemedVoucher.setCode(uniqueCode);\r\n        redeemedVoucher.setDiscountValue(voucher.getDiscountValue());  // Changed from getDiscountAmount()\r\n        redeemedVoucher.setDiscountType(voucher.getDiscountType());    // Added discount type\r\n        redeemedVoucher.setRequestPoints(voucher.getRequestPoints());\r\n        redeemedVoucher.setExpiryDate(voucher.getExpiryDate());\r\n        redeemedVoucher.setTier(voucher.getTier());\r\n        redeemedVoucher.setMember(member);\r\n        voucherRepository.save(redeemedVoucher);\r\n\r\n        // Send confirmation email\r\n        emailService.sendVoucherEmail(\r\n                user.getEmail(),\r\n                \"Voucher Redemption Confirmation\",\r\n                \"You redeemed voucher: \" + uniqueCode + \"\\nNew balance: \" + member.getTierPointBalance() + \" points\"\r\n        );\r\n\r\n        return new VoucherRedemptionResponse(\r\n                uniqueCode,\r\n                voucher.getExpiryDate(),\r\n                member.getTierPointBalance()\r\n        );\r\n    }\r\n\r\n    @Transactional\r\n    public void addPoints(int points) {\r\n        String username = SecurityContextHolder.getContext().getAuthentication().getName();\r\n        UserAccount account = userAccountRepository.findByUsername(username)\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"User account not found\"));\r\n\r\n        Member member = memberRepository.findByUserId(account.getUser().getId());\r\n        \r\n        // Store old tier for comparison\r\n        String oldTierName = member.getTier() != null ? member.getTier().getTierName() : \"NONE\";\r\n        \r\n        member.setTierPointBalance(member.getTierPointBalance() + points);\r\n        memberRepository.save(member);\r\n\r\n        // Automatic tier upgrade check\r\n        tierService.recalculateMemberTier(member);\r\n        \r\n        // Refresh member data to get updated tier\r\n        member = memberRepository.findByUserId(account.getUser().getId());\r\n        String newTierName = member.getTier() != null ? member.getTier().getTierName() : \"NONE\";\r\n        \r\n        // Log tier upgrade if it occurred\r\n        if (!oldTierName.equals(newTierName)) {\r\n            // Assuming log is available, otherwise remove this line\r\n            // log.info(\"Automatic tier upgrade: {} -> {} (Points: {} -> {})\", \r\n            //         oldTierName, newTierName, member.getPointBalance() - points, member.getPointBalance());\r\n        }\r\n    }\r\n\r\n    public List<TierDto> getAllAvailableTiers() {\r\n        return tierService.getAllTiers().stream()\r\n                .map(tier -> {\r\n                    TierDto dto = new TierDto();\r\n                    dto.setId(tier.getId());\r\n                    // 直接使用字符串值\r\n                    dto.setTierName(tier.getTierName());\r\n                    dto.setBenefits(tier.getBenefits());\r\n                    dto.setMinPoints(tier.getMinPoints());\r\n                    dto.setMaxPoints(tier.getMaxPoints());\r\n                    dto.setActive(tier.isActive());\r\n                    return dto;\r\n                })\r\n                .collect(Collectors.toList());\r\n    }\r\n\r\n    public List<VoucherDto> getRedeemHistory() {\r\n        String username = SecurityContextHolder.getContext().getAuthentication().getName();\r\n        UserAccount account = userAccountRepository.findByUsername(username)\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"User account not found\"));\r\n\r\n        User user = account.getUser();\r\n        Member member = memberRepository.findByUserId(user.getId());\r\n\r\n        if (member == null) {\r\n            throw new ResourceNotFoundException(\"Member not found\");\r\n        }\r\n\r\n        // Get all vouchers associated with the member\r\n        List<Voucher> redeemedVouchers = voucherRepository.findByMemberIdIsNotNull();\r\n\r\n        return redeemedVouchers.stream()\r\n                .filter(v -> v.getMember().getId().equals(member.getId())) // Filter by current member\r\n                .map(v -> new VoucherDto(\r\n                        v.getId(),\r\n                        v.getCode(),\r\n                        v.getDiscountValue(),  // Changed from getDiscountAmount()\r\n                        v.getDiscountType(),  // Added discount type\r\n                        v.getRequestPoints(),\r\n                        v.getTier() != null ? v.getTier().getTierName() : null,  // Added tierName\r\n                        v.getExpiryDate()\r\n                ))\r\n                .collect(Collectors.toList());\r\n    }\r\n\r\n    @Transactional\r\n    public void initializeWallet(Integer memberId) {\r\n        Wallet wallet = new Wallet();\r\n        wallet.setBalance(0.00); // Initial balance\r\n        wallet.setMember(memberRepository.findById(memberId).orElseThrow());\r\n        walletRepository.save(wallet);\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/MemberService.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/MemberService.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/MemberService.java	(revision c178c1d9e80f6815b91226b2d10f391611dcb6b4)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/MemberService.java	(date 1754956018246)
@@ -241,10 +241,12 @@
         // Store old tier for comparison
         String oldTierName = member.getTier() != null ? member.getTier().getTierName() : "NONE";
         
+        // Add points to both tier points and reward points
         member.setTierPointBalance(member.getTierPointBalance() + points);
+        member.setRewardPointBalance(member.getRewardPointBalance() + points);
         memberRepository.save(member);
 
-        // Automatic tier upgrade check
+        // Automatic tier upgrade check (based on tier points)
         tierService.recalculateMemberTier(member);
         
         // Refresh member data to get updated tier
@@ -255,9 +257,52 @@
         if (!oldTierName.equals(newTierName)) {
             // Assuming log is available, otherwise remove this line
             // log.info("Automatic tier upgrade: {} -> {} (Points: {} -> {})", 
-            //         oldTierName, newTierName, member.getPointBalance() - points, member.getPointBalance());
+            //         oldTierName, newTierName, member.getTierPointBalance() - points, member.getTierPointBalance());
         }
     }
+
+    /**
+     * 扣除積分（用於退款處理）
+     * @param member 會員
+     * @param amount 退款金額
+     * @param refundPercentage 退款比例（0.0-1.0）
+     * @return 實際扣除的積分數量
+     */
+    @Transactional
+    public PointDeductionResult deductPointsForRefund(Member member, double amount, double refundPercentage) {
+        int originalPointsEarned = (int) Math.round(amount); // 原始獲得的積分
+        int pointsToDeduct = (int) Math.round(originalPointsEarned * refundPercentage); // 按比例扣除積分
+        
+        // 確保不會扣除超過用戶擁有的積分
+        int currentTierPoints = member.getTierPointBalance();
+        int currentRewardPoints = member.getRewardPointBalance();
+        
+        int tierPointsToDeduct = Math.min(pointsToDeduct, currentTierPoints);
+        int rewardPointsToDeduct = Math.min(pointsToDeduct, currentRewardPoints);
+        
+        member.setTierPointBalance(Math.max(0, currentTierPoints - tierPointsToDeduct));
+        member.setRewardPointBalance(Math.max(0, currentRewardPoints - rewardPointsToDeduct));
+        memberRepository.save(member);
+        
+        return new PointDeductionResult(tierPointsToDeduct, rewardPointsToDeduct);
+    }
+
+    /**
+     * 積分扣除結果
+     */
+    public static class PointDeductionResult {
+        private final int tierPointsDeducted;
+        private final int rewardPointsDeducted;
+        
+        public PointDeductionResult(int tierPointsDeducted, int rewardPointsDeducted) {
+            this.tierPointsDeducted = tierPointsDeducted;
+            this.rewardPointsDeducted = rewardPointsDeducted;
+        }
+        
+        public int getTierPointsDeducted() { return tierPointsDeducted; }
+        public int getRewardPointsDeducted() { return rewardPointsDeducted; }
+        public int getTotalPointsDeducted() { return tierPointsDeducted + rewardPointsDeducted; }
+    }
 
     public List<TierDto> getAllAvailableTiers() {
         return tierService.getAllTiers().stream()
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/security/UserDetailsServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.security;\r\n\r\nimport com.pickleball_backend.pickleball.entity.UserAccount;\r\nimport com.pickleball_backend.pickleball.repository.UserAccountRepository;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.springframework.security.core.GrantedAuthority;\r\nimport org.springframework.security.core.authority.SimpleGrantedAuthority;\r\nimport org.springframework.security.core.userdetails.*;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.List;\r\n\r\n@Service\r\n@RequiredArgsConstructor\r\npublic class UserDetailsServiceImpl implements UserDetailsService {\r\n\r\n    private final UserAccountRepository userAccountRepository;\r\n\r\n    @Override\r\n    public UserDetails loadUserByUsername(String usernameOrEmail) throws UsernameNotFoundException {\r\n        UserAccount account = userAccountRepository.findByUsername(usernameOrEmail)\r\n                .or(() -> userAccountRepository.findByUser_Email(usernameOrEmail))\r\n                .orElseThrow(() -> new UsernameNotFoundException(\"User not found\"));\r\n\r\n        // Get userType from associated User entity\r\n        String userType = account.getUser().getUserType();\r\n\r\n        List<GrantedAuthority> authorities = new ArrayList<>();\r\n        if (\"EventOrganizer\".equalsIgnoreCase(account.getUser().getUserType())) {\r\n            authorities.add(new SimpleGrantedAuthority(\"ROLE_EVENTORGANIZER\"));\r\n        }\r\n        if (\"Admin\".equalsIgnoreCase(account.getUser().getUserType())) {\r\n            authorities.add(new SimpleGrantedAuthority(\"ROLE_ADMIN\"));\r\n        }\r\n        if (\"Member\".equalsIgnoreCase(account.getUser().getUserType()) || \"USER\".equalsIgnoreCase(account.getUser().getUserType())) {\r\n            authorities.add(new SimpleGrantedAuthority(\"ROLE_USER\"));\r\n        }\r\n        if (\"Coach\".equalsIgnoreCase(account.getUser().getUserType())) {\r\n            authorities.add(new SimpleGrantedAuthority(\"ROLE_COACH\"));\r\n            authorities.add(new SimpleGrantedAuthority(\"ROLE_USER\")); // 教練也應該有USER權限\r\n        }\r\n\r\n        return new org.springframework.security.core.userdetails.User(\r\n                account.getUsername(),\r\n                account.getPassword(),\r\n                !account.getStatus().equals(\"DELETED\"),  // enabled\r\n                true,                                     // account non-expired\r\n                true,                                     // credentials non-expired\r\n                !account.isLocked(),                      // account non-locked\r\n                authorities\r\n        );\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/security/UserDetailsServiceImpl.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/security/UserDetailsServiceImpl.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/security/UserDetailsServiceImpl.java	(revision c178c1d9e80f6815b91226b2d10f391611dcb6b4)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/security/UserDetailsServiceImpl.java	(date 1754889317392)
@@ -30,6 +30,7 @@
         List<GrantedAuthority> authorities = new ArrayList<>();
         if ("EventOrganizer".equalsIgnoreCase(account.getUser().getUserType())) {
             authorities.add(new SimpleGrantedAuthority("ROLE_EVENTORGANIZER"));
+            authorities.add(new SimpleGrantedAuthority("ROLE_USER")); // EventOrganizer 也應該有USER權限
         }
         if ("Admin".equalsIgnoreCase(account.getUser().getUserType())) {
             authorities.add(new SimpleGrantedAuthority("ROLE_ADMIN"));
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/CourtServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.service;\r\n\r\nimport com.pickleball_backend.pickleball.dto.CourtDto;\r\nimport com.pickleball_backend.pickleball.dto.CourtPricingDto;\r\nimport com.pickleball_backend.pickleball.dto.SlotDto;\r\nimport com.pickleball_backend.pickleball.entity.*;\r\nimport com.pickleball_backend.pickleball.exception.ValidationException;\r\nimport com.pickleball_backend.pickleball.repository.*;\r\nimport jakarta.persistence.EntityNotFoundException;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.stereotype.Service;\r\nimport org.springframework.transaction.annotation.Transactional;\r\n\r\nimport java.time.*;\r\nimport java.time.format.DateTimeParseException;\r\nimport java.util.*;\r\nimport java.util.stream.Collectors;\r\n\r\n@Service\r\n@RequiredArgsConstructor\r\npublic class CourtServiceImpl implements CourtService {\r\n    private static final Logger log = LoggerFactory.getLogger(CourtServiceImpl.class);\r\n    private final CourtRepository courtRepository;\r\n    private final SlotService slotService;\r\n    private final BookingRepository bookingRepository;\r\n    private final MemberRepository memberRepository;\r\n    private final SlotRepository slotRepository;\r\n    private final EmailService emailService;\r\n    private final PaymentRepository paymentRepository;\r\n    private final BookingSlotRepository bookingSlotRepository;\r\n    private final FriendlyMatchService friendlyMatchService;\r\n    @Autowired\r\n    private VenueRepository venueRepository;\r\n    private static final Map<String, DayOfWeek> DAY_OF_WEEK_MAP = Map.of(\r\n        \"MON\", DayOfWeek.MONDAY,\r\n        \"TUE\", DayOfWeek.TUESDAY,\r\n        \"WED\", DayOfWeek.WEDNESDAY,\r\n        \"THU\", DayOfWeek.THURSDAY,\r\n        \"FRI\", DayOfWeek.FRIDAY,\r\n        \"SAT\", DayOfWeek.SATURDAY,\r\n        \"SUN\", DayOfWeek.SUNDAY\r\n    );\r\n\r\n    @Override\r\n    public Court createCourt(CourtDto courtDto) {\r\n        try {\r\n            System.out.println(\"==> createCourt called, dto=\" + courtDto);\r\n            Venue venue = venueRepository.findById(courtDto.getVenueId())\r\n                    .orElseThrow(() -> new EntityNotFoundException(\"Venue not found with id: \" + courtDto.getVenueId()));\r\n\r\n            // 检查在同一场馆内是否有相同名称的场地\r\n            if (courtRepository.existsByNameAndVenueId(courtDto.getName(), courtDto.getVenueId())) {\r\n                throw new IllegalArgumentException(\"Court with the same name already exists in this venue\");\r\n            }\r\n\r\n            Court court = new Court();\r\n            court.setVenue(venue);\r\n            saveOrUpdateCourt(court, courtDto);\r\n\r\n            generateSlotsForNewCourt(court);\r\n\r\n            System.out.println(\"==> createCourt success, id=\" + court.getId());\r\n            return court;\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            throw e;\r\n        }\r\n    }\r\n\r\n\r\n    private void generateSlotsForNewCourt(Court court) {\r\n        try {\r\n            if (court.getOpeningTime() == null || court.getClosingTime() == null) {\r\n                throw new ValidationException(\"Court operating hours not defined\");\r\n            }\r\n            LocalTime opening = LocalTime.parse(court.getOpeningTime());\r\n            LocalTime closing = LocalTime.parse(court.getClosingTime());\r\n            if (opening.isAfter(closing)) {\r\n                throw new ValidationException(\"Opening time must be before closing time\");\r\n            }\r\n            Set<DayOfWeek> operatingDaySet = parseOperatingDays(court.getOperatingDays());\r\n            LocalDate start = LocalDate.now();\r\n            LocalDate end = start.plusMonths(3);\r\n            List<SlotDto> slots = new ArrayList<>();\r\n            for (LocalDate date = start; date.isBefore(end); date = date.plusDays(1)) {\r\n                if (!operatingDaySet.isEmpty() && !operatingDaySet.contains(date.getDayOfWeek())) {\r\n                    continue;\r\n                }\r\n                LocalTime slotStart = opening;\r\n                while (slotStart.isBefore(closing)) {\r\n                    LocalTime slotEnd = slotStart.plusHours(1);\r\n                    if (slotEnd.isAfter(closing)) {\r\n                        break;\r\n                    }\r\n                    SlotDto slot = new SlotDto();\r\n                    slot.setCourtId(court.getId());\r\n                    slot.setDate(date);\r\n                    slot.setStartTime(slotStart);\r\n                    slot.setEndTime(slotEnd);\r\n                    slot.setAvailable(true);\r\n                    slot.setDurationHours(1);\r\n                    slots.add(slot);\r\n                    slotStart = slotStart.plusHours(1);\r\n                }\r\n            }\r\n            slotService.createSlots(slots);\r\n        } catch (DateTimeParseException e) {\r\n            throw new ValidationException(\"Invalid time format: \" + e.getMessage());\r\n        }\r\n    }\r\n\r\n    private Set<DayOfWeek> parseOperatingDays(String operatingDaysStr) {\r\n        if (operatingDaysStr == null || operatingDaysStr.trim().isEmpty()) {\r\n            return EnumSet.allOf(DayOfWeek.class);\r\n        }\r\n        return Arrays.stream(operatingDaysStr.split(\",\"))\r\n                .map(String::trim)\r\n                .map(this::parseDayOfWeek)\r\n                .collect(Collectors.toSet());\r\n    }\r\n\r\n    private DayOfWeek parseDayOfWeek(String dayStr) {\r\n        String upper = dayStr.trim().toUpperCase();\r\n        if (DAY_OF_WEEK_MAP.containsKey(upper)) {\r\n            return DAY_OF_WEEK_MAP.get(upper);\r\n        }\r\n        try {\r\n            return DayOfWeek.valueOf(upper);\r\n        } catch (IllegalArgumentException e) {\r\n            throw new ValidationException(\"Invalid day in operating days: \" + dayStr);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    @Transactional\r\n    public Court updateCourt(Integer id, CourtDto courtDto) {\r\n        Court existingCourt = courtRepository.findById(id)\r\n                .orElseThrow(() -> new IllegalArgumentException(\"Court not found with id: \" + id));\r\n\r\n        // Check for duplicate name in the same venue only if name is being changed\r\n        if (!existingCourt.getName().equals(courtDto.getName())) {\r\n            if (courtRepository.existsByNameAndVenueId(courtDto.getName(), courtDto.getVenueId())) {\r\n                throw new IllegalArgumentException(\"Another court with the same name already exists in this venue\");\r\n            }\r\n        }\r\n\r\n        return saveOrUpdateCourt(existingCourt, courtDto);\r\n    }\r\n\r\n    private Court saveOrUpdateCourt(Court court, CourtDto courtDto) {\r\n        try {\r\n            System.out.println(\"==> saveOrUpdateCourt called, dto=\" + courtDto);\r\n            court.setName(courtDto.getName());\r\n            court.setLocation(courtDto.getLocation());\r\n            \r\n            // 如果是新建场地，设置场馆\r\n            if (court.getVenue() == null && courtDto.getVenueId() != null) {\r\n                Venue venue = venueRepository.findById(courtDto.getVenueId())\r\n                    .orElseThrow(() -> new EntityNotFoundException(\"Venue not found with id: \" + courtDto.getVenueId()));\r\n                court.setVenue(venue);\r\n            }\r\n            court.setStatus(courtDto.getStatus().toUpperCase());\r\n            court.setOpeningTime(courtDto.getOpeningTime());\r\n            court.setClosingTime(courtDto.getClosingTime());\r\n            // operatingDays 统一大写并去重\r\n            if (courtDto.getOperatingDays() != null && !courtDto.getOperatingDays().isEmpty()) {\r\n                String normalizedDays = Arrays.stream(courtDto.getOperatingDays().split(\",\"))\r\n                    .map(String::trim)\r\n                    .map(String::toUpperCase)\r\n                    .distinct()\r\n                    .collect(Collectors.joining(\",\"));\r\n                court.setOperatingDays(normalizedDays);\r\n            } else {\r\n                court.setOperatingDays(null);\r\n            }\r\n            court.setPeakHourlyPrice(courtDto.getPeakHourlyPrice());\r\n            court.setOffPeakHourlyPrice(courtDto.getOffPeakHourlyPrice());\r\n            court.setDailyPrice(courtDto.getDailyPrice());\r\n            court.setPeakStartTime(courtDto.getPeakStartTime());\r\n            court.setPeakEndTime(courtDto.getPeakEndTime());\r\n\r\n            validatePeakTimes(courtDto);\r\n            Court saved = courtRepository.save(court);\r\n            System.out.println(\"==> saveOrUpdateCourt success, id=\" + saved.getId());\r\n            return saved;\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    private void validatePeakTimes(CourtDto courtDto) {\r\n        if (courtDto.getPeakStartTime() != null && courtDto.getPeakEndTime() != null) {\r\n            LocalTime start = LocalTime.parse(courtDto.getPeakStartTime());\r\n            LocalTime end = LocalTime.parse(courtDto.getPeakEndTime());\r\n\r\n            if (!start.isBefore(end)) {\r\n                throw new IllegalArgumentException(\"Peak start time must be before end time\");\r\n            }\r\n\r\n            // Check against operating hours\r\n            if (courtDto.getOpeningTime() != null && courtDto.getClosingTime() != null) {\r\n                LocalTime opening = LocalTime.parse(courtDto.getOpeningTime());\r\n                LocalTime closing = LocalTime.parse(courtDto.getClosingTime());\r\n\r\n                if (start.isBefore(opening) || end.isAfter(closing)) {\r\n                    throw new IllegalArgumentException(\r\n                            \"Peak hours must be within operating hours\"\r\n                    );\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    @Override\r\n    @Transactional\r\n    public void deleteCourt(Integer id) {\r\n        Court court = courtRepository.findById(id)\r\n                .orElseThrow(() -> new IllegalArgumentException(\"Court not found with id: \" + id));\r\n\r\n        if (court.getIsArchived() != null && court.getIsArchived()) {\r\n            throw new IllegalStateException(\"Court already deleted\");\r\n        }\r\n\r\n        // List<Booking> activeBookings = bookingRepository.findActiveBookingsByCourtId(id);\r\n        // 替换为通过 BookingSlotRepository 查询所有该 courtId 下的 bookingSlot，且 booking 状态为有效\r\n        List<BookingSlot> activeBookingSlots = bookingSlotRepository.findActiveByCourtId(id);\r\n        List<Booking> activeBookings = activeBookingSlots.stream()\r\n            .map(BookingSlot::getBooking)\r\n            .filter(Objects::nonNull)\r\n            .filter(b -> !\"CANCELLED\".equalsIgnoreCase(b.getStatus()) && !\"COMPLETED\".equalsIgnoreCase(b.getStatus()) && !\"CANCELLED_DUE_TO_COURT_DELETION\".equalsIgnoreCase(b.getStatus()))\r\n            .collect(Collectors.toList());\r\n\r\n        if (!activeBookings.isEmpty()) {\r\n            for (Booking booking : activeBookings) {\r\n                try {\r\n                    // 新增：同步取消 FriendlyMatch\r\n                    friendlyMatchService.cancelReservationAndMatch(booking.getId());\r\n                    refundBooking(booking);\r\n                    // Slot slot = booking.getSlot();\r\n                    Slot slot = booking.getBookingSlots() != null && !booking.getBookingSlots().isEmpty() ? booking.getBookingSlots().get(0).getSlot() : null;\r\n                    emailService.sendCourtDeletionNotification(\r\n                            booking.getMember().getUser().getEmail(),\r\n                            court.getName(),\r\n                            slot != null ? slot.getDate() : null,\r\n                            slot != null ? slot.getStartTime() : null,\r\n                            booking.getTotalAmount()\r\n                    );\r\n                    updateBookingStatus(booking);\r\n\r\n                    addCompensationPoints(booking.getMember());\r\n                } catch (Exception e) {\r\n                    log.error(\"Error processing booking {} during court deletion: {}\", booking.getId(), e.getMessage());\r\n                }\r\n            }\r\n        }\r\n\r\n        // 軟刪除球場\r\n        courtRepository.softDeleteCourt(id, LocalDateTime.now());\r\n        log.info(\"Court {} has been soft deleted\", id);\r\n    }\r\n\r\n    private void refundBooking(Booking booking) {\r\n        log.info(\"Processing refund for booking ID: {}, Amount: ${}\",\r\n                booking.getId(), booking.getTotalAmount());\r\n\r\n        Payment payment = booking.getPayment();\r\n        payment.setStatus(\"REFUNDED\");\r\n        paymentRepository.save(payment);\r\n\r\n        // Slot slot = booking.getSlot();\r\n        Slot slot = booking.getBookingSlots() != null && !booking.getBookingSlots().isEmpty() ? booking.getBookingSlots().get(0).getSlot() : null;\r\n        if (slot != null) {\r\n            slot.setAvailable(true);\r\n            slotRepository.save(slot);\r\n        }\r\n\r\n        // BookingSlot bookingSlot = booking.getBookingSlot();\r\n        BookingSlot bookingSlot = booking.getBookingSlots() != null && !booking.getBookingSlots().isEmpty() ? booking.getBookingSlots().get(0) : null;\r\n        if (bookingSlot != null) {\r\n            bookingSlot.setStatus(\"CANCELLED\");\r\n            bookingSlotRepository.save(bookingSlot);\r\n        }\r\n    }\r\n\r\n    private void updateBookingStatus(Booking booking) {\r\n        booking.setStatus(\"CANCELLED_DUE_TO_COURT_DELETION\");\r\n        bookingRepository.save(booking);\r\n    }\r\n\r\n    private void addCompensationPoints(Member member) {\r\n        int currentPoints = member.getTierPointBalance();\r\n        member.setTierPointBalance(currentPoints + 200); // 添加200積分作為補償\r\n        memberRepository.save(member);\r\n        log.info(\"Added 200 compensation points to member ID: {}\", member.getId());\r\n    }\r\n\r\n    @Override\r\n    @Transactional\r\n    public void updateCourtPricing(Integer id, CourtPricingDto pricingDto) {\r\n        Court court = courtRepository.findById(id)\r\n                .orElseThrow(() -> new IllegalArgumentException(\"Court not found with id: \" + id));\r\n\r\n        // Validate peak times\r\n        if (pricingDto.getPeakStartTime() != null && pricingDto.getPeakEndTime() != null) {\r\n            LocalTime start = LocalTime.parse(pricingDto.getPeakStartTime());\r\n            LocalTime end = LocalTime.parse(pricingDto.getPeakEndTime());\r\n\r\n            if (!start.isBefore(end)) {\r\n                throw new IllegalArgumentException(\"Peak start time must be before end time\");\r\n            }\r\n\r\n            // Check against operating hours only if they exist\r\n            if (court.getOpeningTime() != null && court.getClosingTime() != null) {\r\n                try {\r\n                    LocalTime opening = LocalTime.parse(court.getOpeningTime());\r\n                    LocalTime closing = LocalTime.parse(court.getClosingTime());\r\n\r\n                    if (start.isBefore(opening) || end.isAfter(closing)) {\r\n                        throw new IllegalArgumentException(\r\n                                \"Peak hours must be within operating hours\"\r\n                        );\r\n                    }\r\n                } catch (DateTimeParseException e) {\r\n                    throw new IllegalArgumentException(\"Invalid operating hours format\");\r\n                }\r\n            }\r\n        }\r\n\r\n        // Update pricing fields\r\n        court.setPeakHourlyPrice(pricingDto.getPeakHourlyPrice());\r\n        court.setOffPeakHourlyPrice(pricingDto.getOffPeakHourlyPrice());\r\n        court.setDailyPrice(pricingDto.getDailyPrice());\r\n        court.setPeakStartTime(pricingDto.getPeakStartTime());\r\n        court.setPeakEndTime(pricingDto.getPeakEndTime());\r\n\r\n        courtRepository.save(court);\r\n    }\r\n\r\n    //slot\r\n    @Override\r\n    public List<Court> getAllCourts() {\r\n        return courtRepository.findActiveCourts(); // Use the new query\r\n    }\r\n\r\n    @Override\r\n    public List<Court> findAvailableCourts(LocalDate date, String startTime, String endTime) {\r\n        // 1. 获取所有未归档球场\r\n        List<Court> allCourts = courtRepository.findActiveCourts();\r\n\r\n        // 2. 解析时间\r\n        java.time.LocalTime start = java.time.LocalTime.parse(startTime);\r\n        java.time.LocalTime end = java.time.LocalTime.parse(endTime);\r\n\r\n        // 3. 查询该日期、时间段有冲突的预订（只查有效状态）\r\n        List<Booking> bookings = bookingRepository.findAll();\r\n        Set<Integer> bookedCourtIds = new HashSet<>();\r\n        for (Booking booking : bookings) {\r\n            if (booking.getStatus() != null && booking.getStatus().equalsIgnoreCase(\"CANCELLED\")) continue;\r\n            if (booking.getBookingSlots() == null) continue;\r\n            for (BookingSlot bs : booking.getBookingSlots()) {\r\n                Slot slot = bs.getSlot();\r\n                if (slot == null) continue;\r\n                if (!date.equals(slot.getDate())) continue;\r\n                // 判断时间段是否有重叠\r\n                if (!(end.isBefore(slot.getStartTime()) || start.isAfter(slot.getEndTime()))) {\r\n                    bookedCourtIds.add(slot.getCourtId());\r\n                }\r\n            }\r\n        }\r\n        // 4. 过滤出未被预订的球场\r\n        return allCourts.stream()\r\n                .filter(court -> !bookedCourtIds.contains(court.getId()))\r\n                .collect(Collectors.toList());\r\n    }\r\n\r\n    @Override\r\n    public Court getCourtByIdForMember(Integer id) {\r\n        return courtRepository.findById(id)\r\n                .filter(court ->\r\n                        court.getIsArchived() == null ||\r\n                                !court.getIsArchived()\r\n                )\r\n                .orElse(null);\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/CourtServiceImpl.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/CourtServiceImpl.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/CourtServiceImpl.java	(revision c178c1d9e80f6815b91226b2d10f391611dcb6b4)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/CourtServiceImpl.java	(date 1754942619907)
@@ -32,6 +32,7 @@
     private final PaymentRepository paymentRepository;
     private final BookingSlotRepository bookingSlotRepository;
     private final FriendlyMatchService friendlyMatchService;
+    private final EventRepository eventRepository;
     @Autowired
     private VenueRepository venueRepository;
     private static final Map<String, DayOfWeek> DAY_OF_WEEK_MAP = Map.of(
@@ -371,7 +372,32 @@
                 }
             }
         }
-        // 4. 过滤出未被预订的球场
+        
+        // 4. 新增：查询该日期、时间段有冲突的Event
+        Set<Integer> eventBookedCourtIds = new HashSet<>();
+        List<Event> events = eventRepository.findAll();
+        for (Event event : events) {
+            if ("CANCELLED".equalsIgnoreCase(event.getStatus())) continue;
+            if (event.getCourts() == null) continue;
+            
+            // 检查Event是否在指定日期和时间段
+            if (date.equals(event.getStartTime().toLocalDate())) {
+                java.time.LocalTime eventStart = event.getStartTime().toLocalTime();
+                java.time.LocalTime eventEnd = event.getEndTime().toLocalTime();
+                
+                // 判断时间段是否有重叠
+                if (!(end.isBefore(eventStart) || start.isAfter(eventEnd))) {
+                    for (Court eventCourt : event.getCourts()) {
+                        eventBookedCourtIds.add(eventCourt.getId());
+                    }
+                }
+            }
+        }
+        
+        // 5. 合并所有冲突的场地球场ID
+        bookedCourtIds.addAll(eventBookedCourtIds);
+        
+        // 6. 过滤出未被预订的球场
         return allCourts.stream()
                 .filter(court -> !bookedCourtIds.contains(court.getId()))
                 .collect(Collectors.toList());
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/EventServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.service;\r\n\r\nimport com.pickleball_backend.pickleball.dto.EventDetailDto;\r\nimport com.pickleball_backend.pickleball.dto.EventFilterDto;\r\nimport com.pickleball_backend.pickleball.dto.EventCreateDto;\r\nimport com.pickleball_backend.pickleball.dto.EventUpdateDto;\r\nimport com.pickleball_backend.pickleball.entity.Event;\r\nimport com.pickleball_backend.pickleball.entity.EventOrganizer;\r\nimport com.pickleball_backend.pickleball.entity.User;\r\nimport com.pickleball_backend.pickleball.entity.UserAccount;\r\nimport com.pickleball_backend.pickleball.entity.Court;\r\nimport com.pickleball_backend.pickleball.entity.Venue;\r\nimport com.pickleball_backend.pickleball.repository.EventOrganizerRepository;\r\nimport com.pickleball_backend.pickleball.repository.EventRepository;\r\nimport com.pickleball_backend.pickleball.repository.EventRegistrationRepository;\r\nimport com.pickleball_backend.pickleball.repository.UserAccountRepository;\r\nimport com.pickleball_backend.pickleball.repository.UserRepository;\r\nimport com.pickleball_backend.pickleball.repository.CourtRepository;\r\nimport com.pickleball_backend.pickleball.repository.VenueRepository;\r\nimport com.pickleball_backend.pickleball.service.EmailService;\r\nimport com.pickleball_backend.pickleball.service.VenueService;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.data.domain.Page;\r\nimport org.springframework.data.domain.PageRequest;\r\nimport org.springframework.data.domain.Pageable;\r\nimport org.springframework.data.domain.Sort;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport java.time.LocalDateTime;\r\nimport java.time.temporal.ChronoUnit;\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\nimport java.util.Optional;\r\nimport java.util.Set;\r\nimport java.time.LocalDate;\r\nimport java.time.LocalTime;\r\n\r\n@Service\r\npublic class EventServiceImpl implements EventService {\r\n\r\n    private static final Logger log = LoggerFactory.getLogger(EventServiceImpl.class);\r\n\r\n    @Autowired\r\n    private EventRepository eventRepository;\r\n\r\n    @Autowired\r\n    private UserAccountRepository userAccountRepository;\r\n\r\n    @Autowired\r\n    private UserRepository userRepository;\r\n\r\n    @Autowired\r\n    private EmailService emailService;\r\n\r\n    @Autowired\r\n    private EventOrganizerRepository eventOrganizerRepository;\r\n\r\n    @Autowired\r\n    private EventRegistrationRepository eventRegistrationRepository;\r\n\r\n    @Autowired\r\n    private CourtRepository courtRepository;\r\n    @Autowired\r\n    private VenueRepository venueRepository;\r\n    @Autowired\r\n    private VenueService venueService;\r\n\r\n    @Override\r\n    public Event createEvent(EventCreateDto eventDto, String organizerUsername) {\r\n        UserAccount organizer = userAccountRepository.findByUsername(organizerUsername)\r\n                .orElseThrow(() -> new RuntimeException(\"Organizer not found\"));\r\n\r\n        // Check organizer status\r\n        if (!(\"ACTIVE\".equals(organizer.getStatus()) ||\r\n                \"PENDING\".equals(organizer.getStatus()))) {\r\n            throw new RuntimeException(\"Account not active or pending approval\");\r\n        }\r\n\r\n        // Validate event times\r\n        if (eventDto.getStartTime() != null && eventDto.getEndTime() != null) {\r\n            if (eventDto.getStartTime().isAfter(eventDto.getEndTime())) {\r\n                throw new RuntimeException(\"Start time must be before end time\");\r\n            }\r\n            if (eventDto.getStartTime().isBefore(LocalDateTime.now())) {\r\n                throw new RuntimeException(\"Start time cannot be in the past\");\r\n            }\r\n        }\r\n\r\n        Event event = new Event();\r\n        event.setTitle(eventDto.getTitle());\r\n        event.setStartTime(eventDto.getStartTime());\r\n        event.setEndTime(eventDto.getEndTime());\r\n        event.setEventType(eventDto.getEventType());\r\n        event.setStatus(eventDto.getStatus());\r\n        event.setSchedule(eventDto.getSchedule());\r\n        event.setFeeAmount(eventDto.getFeeAmount());\r\n        event.setLocation(eventDto.getLocation()); // 新增：設置事件地點\r\n        event.setOrganizerId(organizer.getUser().getId());\r\n        // [全場地自動分配]：當自動分配時，會直接分配所有可用場地給活動，不再根據人數裁剪，也不檢查總容量是否足夠。\r\n        Set<Court> courts;\r\n        if ((eventDto.getCourtIds() == null || eventDto.getCourtIds().isEmpty()) && eventDto.getVenueId() != null && eventDto.getCapacity() != null) {\r\n            // 自動分配 court\r\n            LocalDate date = eventDto.getStartTime().toLocalDate();\r\n            LocalTime startTime = eventDto.getStartTime().toLocalTime();\r\n            LocalTime endTime = eventDto.getEndTime().toLocalTime();\r\n            int peopleCount = eventDto.getCapacity();\r\n            List<Court> availableCourts = venueService.getAvailableCourts(eventDto.getVenueId(), date, startTime, endTime, peopleCount);\r\n            // 直接分配所有可用場地，不再根據人數裁剪，也不再丟出『此場地容量不足』\r\n            courts = new java.util.HashSet<>(availableCourts);\r\n        } else if (eventDto.getCourtIds() != null && !eventDto.getCourtIds().isEmpty()) {\r\n            courts = new java.util.HashSet<>(courtRepository.findAllById(eventDto.getCourtIds()));\r\n        } else {\r\n            courts = new java.util.HashSet<>();\r\n        }\r\n        event.setCourts(courts);\r\n        // capacity = courts.size() * 8 (每場8人)\r\n        if (eventDto.getCapacity() != null) {\r\n            event.setCapacity(eventDto.getCapacity());\r\n        } else {\r\n            event.setCapacity(courts.size() * 8);\r\n        }\r\n        // venue\r\n        if (eventDto.getVenueId() != null) {\r\n            Venue venue = venueRepository.findById(eventDto.getVenueId()).orElse(null);\r\n            event.setVenue(venue);\r\n        }\r\n        else {\r\n            event.setVenue(null);\r\n        }\r\n        event.setRegisteredCount(0);\r\n        event.setStatus(\"PUBLISHED\");\r\n        Event savedEvent = eventRepository.save(event);\r\n\r\n        // Notification logic - 根據 sendNotification 參數決定是否發送郵件\r\n        if (eventDto.getSendNotification() != null && eventDto.getSendNotification()) {\r\n            List<User> allUsers = userRepository.findAll();\r\n            int emailsSent = 0;\r\n            int emailsSkipped = 0;\r\n            for (User user : allUsers) {\r\n                String userEmail = user.getEmail();\r\n                if (userEmail == null || userEmail.trim().isEmpty()) {\r\n                    emailsSkipped++;\r\n                    continue;\r\n                }\r\n                try {\r\n                    emailService.sendEventNotification(userEmail, savedEvent);\r\n                    emailsSent++;\r\n                } catch (Exception e) {\r\n                    emailsSkipped++;\r\n                    log.warn(\"Failed to send event notification to {}: {}\", userEmail, e.getMessage());\r\n                }\r\n            }\r\n            \r\n            log.info(\"Event notification summary - Sent: {}, Skipped: {}, Total processed: {}\", \r\n                    emailsSent, emailsSkipped, allUsers.size());\r\n        } else {\r\n            log.info(\"Email notifications disabled for event: {}\", savedEvent.getTitle());\r\n        }\r\n\r\n        return savedEvent;\r\n    }\r\n\r\n    @Override\r\n    public Event updateEvent(Integer id, EventUpdateDto eventDto, String organizerUsername) {\r\n        Optional<Event> existingOpt = eventRepository.findById(id);\r\n        if (existingOpt.isEmpty()) {\r\n            throw new RuntimeException(\"Event not found\");\r\n        }\r\n        Event event = existingOpt.get();\r\n\r\n        // Get the organizer's user id\r\n        UserAccount organizerAccount = userAccountRepository.findByUsername(organizerUsername)\r\n            .orElseThrow(() -> new RuntimeException(\"Organizer not found\"));\r\n        Integer organizerId = organizerAccount.getUser().getId();\r\n\r\n        // Check if the current user is the organizer of this event\r\n        if (!event.getOrganizerId().equals(organizerId)) {\r\n            throw new RuntimeException(\"You are not authorized to edit this event.\");\r\n        }\r\n\r\n        // Validate event times\r\n        if (eventDto.getStartTime() != null && eventDto.getEndTime() != null) {\r\n            if (eventDto.getStartTime().isAfter(eventDto.getEndTime())) {\r\n                throw new RuntimeException(\"Start time must be before end time\");\r\n            }\r\n        }\r\n        \r\n        // Update fields as needed\r\n        event.setTitle(eventDto.getTitle());\r\n        event.setStartTime(eventDto.getStartTime());\r\n        event.setEndTime(eventDto.getEndTime());\r\n        event.setEventType(eventDto.getEventType());\r\n        event.setStatus(eventDto.getStatus());\r\n        event.setSchedule(eventDto.getSchedule());\r\n        event.setFeeAmount(eventDto.getFeeAmount());\r\n        event.setLocation(eventDto.getLocation()); // 新增：更新事件地點\r\n        // courts\r\n        if (eventDto.getCourtIds() != null && !eventDto.getCourtIds().isEmpty()) {\r\n            Set<Court> courts = new java.util.HashSet<>(courtRepository.findAllById(eventDto.getCourtIds()));\r\n            event.setCourts(courts);\r\n            int totalCapacity = courts.size() * 8;\r\n            event.setCapacity(totalCapacity);\r\n        }\r\n        // venue - 保留現有的 venue 關聯，除非明確提供新的 venueId\r\n        if (eventDto.getVenueId() != null) {\r\n            Venue venue = venueRepository.findById(eventDto.getVenueId()).orElse(null);\r\n            event.setVenue(venue);\r\n            log.info(\"Event {} venue updated to: {}\", id, venue != null ? venue.getName() : \"null\");\r\n        } else {\r\n            // 如果沒有提供 venueId，保留現有的 venue 關聯\r\n            log.info(\"Event {} venue unchanged: {}\", id, event.getVenue() != null ? event.getVenue().getName() : \"null\");\r\n        }\r\n        \r\n        Event updatedEvent = eventRepository.save(event);\r\n        \r\n        // Send notifications if requested\r\n        if (eventDto.getSendNotification() != null && eventDto.getSendNotification()) {\r\n            log.info(\"Sending event update notifications to all users for event: {}\", updatedEvent.getTitle());\r\n            \r\n            // 向所有用戶發送事件更新通知\r\n            List<User> allUsers = userRepository.findAll();\r\n            int emailsSent = 0;\r\n            int emailsSkipped = 0;\r\n            for (User user : allUsers) {\r\n                String userEmail = user.getEmail();\r\n                if (userEmail == null || userEmail.trim().isEmpty()) {\r\n                    emailsSkipped++;\r\n                    continue;\r\n                }\r\n                try {\r\n                    emailService.sendEventUpdateNotification(userEmail, updatedEvent);\r\n                    emailsSent++;\r\n                } catch (Exception e) {\r\n                    emailsSkipped++;\r\n                    log.warn(\"Failed to send event update notification to {}: {}\", userEmail, e.getMessage());\r\n                }\r\n            }\r\n            \r\n            log.info(\"Event update notification summary - Sent: {}, Skipped: {}, Total processed: {}\", \r\n                    emailsSent, emailsSkipped, allUsers.size());\r\n        } else {\r\n            log.info(\"Event updated without sending notifications: {}\", updatedEvent.getTitle());\r\n        }\r\n        \r\n        return updatedEvent;\r\n    }\r\n\r\n    @Override\r\n    public void deleteEvent(Integer id) {\r\n        Optional<Event> eventOpt = eventRepository.findById(id);\r\n        if (eventOpt.isEmpty()) {\r\n            throw new RuntimeException(\"Event not found\");\r\n        }\r\n        \r\n        Event event = eventOpt.get();\r\n        \r\n        // Send cancellation notifications before deleting\r\n        log.info(\"Sending event cancellation notifications for event: {}\", event.getTitle());\r\n        sendEventCancellationNotifications(event);\r\n        \r\n        eventRepository.deleteById(id);\r\n        log.info(\"Event deleted successfully: {}\", event.getTitle());\r\n    }\r\n\r\n    @Override\r\n    public Event publishEvent(Integer id, String organizerUsername) {\r\n        Event event = eventRepository.findById(id)\r\n                .orElseThrow(() -> new RuntimeException(\"Event not found\"));\r\n\r\n        UserAccount organizer = userAccountRepository.findByUsername(organizerUsername)\r\n                .orElseThrow(() -> new RuntimeException(\"Organizer not found\"));\r\n\r\n        // Verify ownership\r\n        if (!event.getOrganizerId().equals(organizer.getUser().getId())) {\r\n            throw new RuntimeException(\"Not authorized to publish this event\");\r\n        }\r\n\r\n        event.setStatus(\"PUBLISHED\");\r\n        eventRepository.save(event);\r\n\r\n        // 通知所有 user\r\n        List<User> allUsers = userRepository.findAll();\r\n        int emailsSent = 0;\r\n        int emailsSkipped = 0;\r\n        for (User user : allUsers) {\r\n            String userEmail = user.getEmail();\r\n            if (userEmail == null || userEmail.trim().isEmpty()) {\r\n                emailsSkipped++;\r\n                continue;\r\n            }\r\n            try {\r\n                emailService.sendEventNotification(userEmail, event);\r\n                emailsSent++;\r\n            } catch (Exception e) {\r\n                emailsSkipped++;\r\n            }\r\n        }\r\n        log.info(\"Event notification summary - Sent: {}, Skipped: {}, Total processed: {}\", emailsSent, emailsSkipped, allUsers.size());\r\n        return event;\r\n    }\r\n    \r\n    /**\r\n     * Sends event update notifications to eligible users\r\n     */\r\n    private void sendEventUpdateNotifications(Event event) {\r\n        List<User> registeredUsers = eventRegistrationRepository.findUsersRegisteredForEvent(event.getId());\r\n        log.info(\"Event update - total registered users found: {}\", registeredUsers.size());\r\n\r\n        int emailsSent = 0;\r\n        int emailsSkipped = 0;\r\n\r\n        for (User user : registeredUsers) {\r\n            String userEmail = user.getEmail();\r\n            if (userEmail == null || userEmail.trim().isEmpty()) {\r\n                log.warn(\"Skipping user {} - no valid email address\", user.getName());\r\n                emailsSkipped++;\r\n                continue;\r\n            }\r\n            try {\r\n                emailService.sendEventUpdateNotification(userEmail, event);\r\n                emailsSent++;\r\n                log.info(\"Event update notification sent successfully to: {}\", userEmail);\r\n            } catch (Exception e) {\r\n                log.error(\"Failed to send event update notification to {}: {}\", userEmail, e.getMessage());\r\n                emailsSkipped++;\r\n            }\r\n        }\r\n        log.info(\"Event update notification summary - Sent: {}, Skipped: {}, Total processed: {}\", \r\n                emailsSent, emailsSkipped, registeredUsers.size());\r\n    }\r\n    \r\n    /**\r\n     * Sends event cancellation notifications to eligible users\r\n     */\r\n    private void sendEventCancellationNotifications(Event event) {\r\n        // Notification logic\r\n        List<User> allUsers = userRepository.findAll();\r\n        int emailsSent = 0;\r\n        int emailsSkipped = 0;\r\n        for (User user : allUsers) {\r\n            String userEmail = user.getEmail();\r\n            if (userEmail == null || userEmail.trim().isEmpty()) {\r\n                emailsSkipped++;\r\n                continue;\r\n            }\r\n            try {\r\n                emailService.sendEventCancellationNotification(userEmail, event);\r\n                emailsSent++;\r\n            } catch (Exception e) {\r\n                emailsSkipped++;\r\n            }\r\n        }\r\n        log.info(\"Event cancellation notification summary - Sent: {}, Skipped: {}, Total processed: {}\", emailsSent, emailsSkipped, allUsers.size());\r\n    }\r\n    \r\n    // New methods for browsing events\r\n    \r\n    @Override\r\n    public Page<Event> browseEvents(EventFilterDto filterDto, String username) {\r\n        // Create pageable with sorting\r\n        Sort sort = Sort.by(\r\n            filterDto.getSortDirection().equalsIgnoreCase(\"DESC\") ? \r\n            Sort.Direction.DESC : Sort.Direction.ASC, \r\n            filterDto.getSortBy()\r\n        );\r\n        Pageable pageable = PageRequest.of(filterDto.getPage(), filterDto.getSize(), sort);\r\n        \r\n        // Set default status to PUBLISHED if not specified\r\n        String status = filterDto.getStatus() != null ? filterDto.getStatus() : \"PUBLISHED\";\r\n        \r\n        log.info(\"Browsing events with filters: eventType={}, location={}, status={}\", \r\n                filterDto.getEventType(), filterDto.getLocation(), status);\r\n        \r\n        return eventRepository.findEventsWithFilters(\r\n            filterDto.getEventType(),\r\n            filterDto.getStartDate(),\r\n            filterDto.getEndDate(),\r\n            status,\r\n            filterDto.getSearchKeyword(),\r\n            LocalDateTime.now(),\r\n            pageable\r\n        );\r\n    }\r\n    \r\n    @Override\r\n    public EventDetailDto getEventDetails(Integer eventId, String username) {\r\n        Event event = eventRepository.findById(eventId)\r\n                .orElseThrow(() -> new RuntimeException(\"Event not found\"));\r\n        \r\n        EventDetailDto detailDto = new EventDetailDto();\r\n        detailDto.setId(event.getId());\r\n        detailDto.setTitle(event.getTitle());\r\n        detailDto.setStartTime(event.getStartTime());\r\n        detailDto.setEndTime(event.getEndTime());\r\n        detailDto.setEventType(event.getEventType());\r\n        detailDto.setCapacity(event.getCapacity());\r\n        // 如果 Event 的 location 是空的，使用 venue 的 location\r\n        String location = event.getLocation();\r\n        if (location == null || location.trim().isEmpty()) {\r\n            if (event.getVenue() != null) {\r\n                location = event.getVenue().getLocation();\r\n                log.info(\"Event {} location is empty, using venue location: {}\", eventId, location);\r\n            }\r\n        }\r\n        detailDto.setLocation(location); // 新增：設置事件地點\r\n        log.info(\"Event {} final location: {}\", eventId, location); // 調試日誌\r\n        // Set venue information\r\n        log.info(\"Event {} venue: {}\", eventId, event.getVenue());\r\n        if (event.getVenue() != null) {\r\n            log.info(\"Venue ID: {}, Name: {}, State: {}, Location: {}\", \r\n                    event.getVenue().getId(), \r\n                    event.getVenue().getName(), \r\n                    event.getVenue().getState(), \r\n                    event.getVenue().getLocation());\r\n            detailDto.setVenueId(event.getVenue().getId());\r\n            detailDto.setVenueName(event.getVenue().getName());\r\n            detailDto.setVenueState(event.getVenue().getState());\r\n            detailDto.setVenueLocation(event.getVenue().getLocation());\r\n        } else {\r\n            log.warn(\"Event {} has no venue associated\", eventId);\r\n            detailDto.setVenueId(null);\r\n            detailDto.setVenueName(\"N/A\");\r\n            detailDto.setVenueState(\"N/A\");\r\n            detailDto.setVenueLocation(\"N/A\");\r\n        }\r\n        detailDto.setStatus(event.getStatus());\r\n        detailDto.setSchedule(event.getSchedule());\r\n        detailDto.setFeeAmount(event.getFeeAmount());\r\n        detailDto.setOrganizerId(event.getOrganizerId());\r\n        \r\n        // Get organizer details\r\n        try {\r\n            UserAccount organizerAccount = userAccountRepository.findById(event.getOrganizerId())\r\n                    .orElse(null);\r\n            if (organizerAccount != null) {\r\n                detailDto.setOrganizerName(organizerAccount.getUser().getName());\r\n                detailDto.setOrganizerEmail(organizerAccount.getUser().getEmail());\r\n                \r\n                // Get organizer rating\r\n                Optional<EventOrganizer> organizerOpt = eventOrganizerRepository.findByUserId(event.getOrganizerId());\r\n                if (organizerOpt.isPresent()) {\r\n                    detailDto.setOrganizerRating(organizerOpt.get().getOrganizerRating());\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            log.warn(\"Could not fetch organizer details for event {}: {}\", eventId, e.getMessage());\r\n        }\r\n        \r\n        // Calculate time until event\r\n        LocalDateTime now = LocalDateTime.now();\r\n        if (event.getStartTime().isAfter(now)) {\r\n            long days = ChronoUnit.DAYS.between(now, event.getStartTime());\r\n            long hours = ChronoUnit.HOURS.between(now, event.getStartTime()) % 24;\r\n            \r\n            if (days > 0) {\r\n                detailDto.setTimeUntilEvent(days + \" day\" + (days > 1 ? \"s\" : \"\"));\r\n            } else if (hours > 0) {\r\n                detailDto.setTimeUntilEvent(hours + \" hour\" + (hours > 1 ? \"s\" : \"\"));\r\n            } else {\r\n                detailDto.setTimeUntilEvent(\"Less than 1 hour\");\r\n            }\r\n            detailDto.setUpcoming(true);\r\n        } else {\r\n            detailDto.setUpcoming(false);\r\n            detailDto.setTimeUntilEvent(\"Event has passed\");\r\n        }\r\n        \r\n        return detailDto;\r\n    }\r\n    \r\n    @Override\r\n    public Page<Event> getUpcomingEvents(String username, int page, int size) {\r\n        Pageable pageable = PageRequest.of(page, size, Sort.by(Sort.Direction.ASC, \"startTime\"));\r\n        LocalDateTime now = LocalDateTime.now();\r\n        log.info(\"Getting upcoming events for user: {} page: {} size: {}\", username, page, size);\r\n        log.info(\"Current time: {}\", now);\r\n        \r\n        Page<Event> result = eventRepository.findEventsWithFilters(\r\n            null, // eventType\r\n            null, // startDate\r\n            null, // endDate\r\n            \"PUBLISHED\", // status\r\n            null, // searchKeyword\r\n            now,\r\n            pageable\r\n        );\r\n        \r\n        log.info(\"Found {} events, total pages: {}, total elements: {}\", \r\n                result.getContent().size(), result.getTotalPages(), result.getTotalElements());\r\n        \r\n        return result;\r\n    }\r\n    \r\n    @Override\r\n    public Page<Event> getEventsByType(String eventType, String username) {\r\n        Pageable pageable = PageRequest.of(0, 10, Sort.by(Sort.Direction.ASC, \"startTime\"));\r\n        \r\n        log.info(\"Getting events by type: {} for user: {}\", eventType, username);\r\n        \r\n        return eventRepository.findEventsWithFilters(\r\n            eventType, // eventType\r\n            null, // startDate\r\n            null, // endDate\r\n            \"PUBLISHED\", // status\r\n            null, // searchKeyword\r\n            LocalDateTime.now(),\r\n            pageable\r\n        );\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/EventServiceImpl.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/EventServiceImpl.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/EventServiceImpl.java	(revision c178c1d9e80f6815b91226b2d10f391611dcb6b4)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/EventServiceImpl.java	(date 1754942619907)
@@ -10,6 +10,8 @@
 import com.pickleball_backend.pickleball.entity.UserAccount;
 import com.pickleball_backend.pickleball.entity.Court;
 import com.pickleball_backend.pickleball.entity.Venue;
+import com.pickleball_backend.pickleball.entity.Booking;
+import com.pickleball_backend.pickleball.exception.ConflictException;
 import com.pickleball_backend.pickleball.repository.EventOrganizerRepository;
 import com.pickleball_backend.pickleball.repository.EventRepository;
 import com.pickleball_backend.pickleball.repository.EventRegistrationRepository;
@@ -17,6 +19,7 @@
 import com.pickleball_backend.pickleball.repository.UserRepository;
 import com.pickleball_backend.pickleball.repository.CourtRepository;
 import com.pickleball_backend.pickleball.repository.VenueRepository;
+import com.pickleball_backend.pickleball.repository.BookingRepository;
 import com.pickleball_backend.pickleball.service.EmailService;
 import com.pickleball_backend.pickleball.service.VenueService;
 import org.slf4j.Logger;
@@ -27,6 +30,7 @@
 import org.springframework.data.domain.Pageable;
 import org.springframework.data.domain.Sort;
 import org.springframework.stereotype.Service;
+import org.springframework.transaction.annotation.Transactional;
 
 import java.time.LocalDateTime;
 import java.time.temporal.ChronoUnit;
@@ -66,6 +70,10 @@
     private VenueRepository venueRepository;
     @Autowired
     private VenueService venueService;
+    
+    // 新增：添加BookingRepository依賴
+    @Autowired
+    private BookingRepository bookingRepository;
 
     @Override
     public Event createEvent(EventCreateDto eventDto, String organizerUsername) {
@@ -98,6 +106,7 @@
         event.setFeeAmount(eventDto.getFeeAmount());
         event.setLocation(eventDto.getLocation()); // 新增：設置事件地點
         event.setOrganizerId(organizer.getUser().getId());
+        
         // [全場地自動分配]：當自動分配時，會直接分配所有可用場地給活動，不再根據人數裁剪，也不檢查總容量是否足夠。
         Set<Court> courts;
         if ((eventDto.getCourtIds() == null || eventDto.getCourtIds().isEmpty()) && eventDto.getVenueId() != null && eventDto.getCapacity() != null) {
@@ -114,6 +123,21 @@
         } else {
             courts = new java.util.HashSet<>();
         }
+        
+        // 新增：檢查每個場地是否有與現有預訂的衝突
+        for (Court court : courts) {
+            boolean hasConflict = bookingRepository.existsActiveBookingForCourtAndTime(
+                court.getId(),
+                eventDto.getStartTime().toLocalDate(),
+                eventDto.getStartTime().toLocalTime(),
+                eventDto.getEndTime().toLocalTime()
+            );
+            
+            if (hasConflict) {
+                throw new ConflictException("Court " + court.getName() + " has existing bookings during the event time");
+            }
+        }
+        
         event.setCourts(courts);
         // capacity = courts.size() * 8 (每場8人)
         if (eventDto.getCapacity() != null) {
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/HelpdeskService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.service;\r\n\r\nimport com.pickleball_backend.pickleball.entity.HelpdeskQuery;\r\nimport com.pickleball_backend.pickleball.entity.User;\r\nimport com.pickleball_backend.pickleball.repository.HelpdeskQueryRepository;\r\nimport com.pickleball_backend.pickleball.repository.UserRepository;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.beans.factory.annotation.Value;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport java.util.List;\r\n\r\n@Service\r\npublic class HelpdeskService {\r\n    private final HelpdeskQueryRepository queryRepository;\r\n    private final EmailService emailService;\r\n    private final String adminEmail;\r\n    private final UserRepository userRepository;\r\n\r\n    @Autowired\r\n    public HelpdeskService(HelpdeskQueryRepository queryRepository,\r\n                           EmailService emailService,\r\n                           @Value(\"${app.admin.email}\") String adminEmail,\r\n                           UserRepository userRepository) {\r\n        this.queryRepository = queryRepository;\r\n        this.emailService = emailService;\r\n        this.adminEmail = adminEmail;\r\n        this.userRepository = userRepository;\r\n    }\r\n\r\n    public HelpdeskQuery processQuery(String username, String question) {\r\n        String aiResponse = getFallbackResponse(question); // Use static/fallback answer\r\n\r\n        HelpdeskQuery query = new HelpdeskQuery();\r\n        query.setUsername(username);\r\n        query.setQuestion(question);\r\n        query.setAiResponse(aiResponse);\r\n        query.setEscalated(false);\r\n\r\n        return queryRepository.save(query);\r\n    }\r\n\r\n    private String getFallbackResponse(String question) {\r\n        if (question == null) return \"Please enter your question.\";\r\n        String q = question.toLowerCase();\r\n        if (q.contains(\"booking\")) {\r\n            return \"You can manage bookings in 'My Bookings'. Cancellations allowed up to 24 hours before.\";\r\n        } else if (q.contains(\"membership\")) {\r\n            return \"We offer Bronze, Silver, Gold tiers with court discounts & priority booking.\";\r\n        } else if (q.contains(\"payment\")) {\r\n            return \"Pay via credit cards/e-wallets securely. View history in Wallet section.\";\r\n        }\r\n        return \"Could you provide more details about your question?\";\r\n    }\r\n\r\n    public void escalateToHumanSupport(Long queryId) {\r\n        HelpdeskQuery query = queryRepository.findById(queryId)\r\n                .orElseThrow(() -> new RuntimeException(\"Query not found\"));\r\n\r\n        query.setEscalated(true);\r\n        queryRepository.save(query);\r\n\r\n        // Send email to admin\r\n        String subject = \"Helpdesk Escalation: Query #\" + queryId;\r\n        String content = \"User: \" + query.getUsername() + \"\\n\\n\" +\r\n                \"Question: \" + query.getQuestion() + \"\\n\\n\" +\r\n                \"Please handle this support request.\";\r\n\r\n        emailService.sendEmail(adminEmail, subject, content);\r\n\r\n        // Send notification to the user\r\n        User user = userRepository.findByUsername(query.getUsername())\r\n                .orElseThrow(() -> new RuntimeException(\"User not found\"));\r\n        String userEmail = user.getEmail();\r\n\r\n        String userSubject = \"Your helpdesk query has been escalated\";\r\n        String userContent = \"Dear \" + user.getName() + \",\\n\\n\" +\r\n                \"Your helpdesk query has been escalated to human support. Our team will contact you soon.\\n\\n\" +\r\n                \"Question: \" + query.getQuestion();\r\n\r\n        emailService.sendEmail(userEmail, userSubject, userContent);\r\n    }\r\n\r\n    public void escalateForm(String username, String topic, String message) {\r\n        // 1. Save to DB if needed\r\n        // 2. Send email to admin (and user if needed)\r\n        // Example:\r\n        String adminEmail = \"admin@example.com\";\r\n        String subject = \"New Escalation from \" + username + \" [\" + topic + \"]\";\r\n        String content = \"User: \" + username + \"\\\\nTopic: \" + topic + \"\\\\nMessage: \" + message;\r\n        emailService.sendEmail(adminEmail, subject, content);\r\n        // Optionally send confirmation to user\r\n    }\r\n\r\n    public List<HelpdeskQuery> getQueriesByUsername(String username) {\r\n        return queryRepository.findByUsername(username);\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/HelpdeskService.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/HelpdeskService.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/HelpdeskService.java	(revision c178c1d9e80f6815b91226b2d10f391611dcb6b4)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/HelpdeskService.java	(date 1754827041573)
@@ -16,20 +16,31 @@
     private final EmailService emailService;
     private final String adminEmail;
     private final UserRepository userRepository;
+    private final AiChatService aiChatService;
 
     @Autowired
     public HelpdeskService(HelpdeskQueryRepository queryRepository,
                            EmailService emailService,
                            @Value("${app.admin.email}") String adminEmail,
-                           UserRepository userRepository) {
+                           UserRepository userRepository,
+                           AiChatService aiChatService) {
         this.queryRepository = queryRepository;
         this.emailService = emailService;
         this.adminEmail = adminEmail;
         this.userRepository = userRepository;
+        this.aiChatService = aiChatService;
     }
 
     public HelpdeskQuery processQuery(String username, String question) {
-        String aiResponse = getFallbackResponse(question); // Use static/fallback answer
+        String aiResponse = null;
+        // Try AI first; fallback to static response when not configured or on error
+        try {
+            aiResponse = aiChatService.askSupportAssistant(username, question);
+        } catch (Exception ignored) {
+        }
+        if (aiResponse == null || aiResponse.isBlank()) {
+            aiResponse = getFallbackResponse(question);
+        }
 
         HelpdeskQuery query = new HelpdeskQuery();
         query.setUsername(username);
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/EscrowAccountService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.service;\r\n\r\nimport com.pickleball_backend.pickleball.entity.Payment;\r\nimport com.pickleball_backend.pickleball.entity.Wallet;\r\nimport com.pickleball_backend.pickleball.entity.WalletTransaction;\r\nimport com.pickleball_backend.pickleball.entity.Member;\r\nimport com.pickleball_backend.pickleball.entity.User;\r\nimport com.pickleball_backend.pickleball.entity.ClassSession;\r\nimport com.pickleball_backend.pickleball.repository.WalletRepository;\r\nimport com.pickleball_backend.pickleball.repository.PaymentRepository;\r\nimport com.pickleball_backend.pickleball.repository.WalletTransactionRepository;\r\nimport com.pickleball_backend.pickleball.repository.MemberRepository;\r\nimport com.pickleball_backend.pickleball.exception.ResourceNotFoundException;\r\nimport com.pickleball_backend.pickleball.exception.ValidationException;\r\nimport lombok.RequiredArgsConstructor;\r\nimport lombok.extern.slf4j.Slf4j;\r\nimport org.springframework.stereotype.Service;\r\nimport org.springframework.transaction.annotation.Transactional;\r\n\r\nimport java.time.LocalDateTime;\r\nimport java.util.List;\r\n\r\n@Service\r\n@Slf4j\r\n@RequiredArgsConstructor\r\npublic class EscrowAccountService {\r\n\r\n    private final WalletRepository walletRepository;\r\n    private final PaymentRepository paymentRepository;\r\n    private final WalletTransactionRepository walletTransactionRepository;\r\n    private final MemberRepository memberRepository;\r\n\r\n    /**\r\n     * 用戶報名課程時，將錢存入託管狀態\r\n     */\r\n    @Transactional\r\n    public void depositToEscrow(User user, double amount, ClassSession session) {\r\n        // 從用戶錢包扣款\r\n        Wallet userWallet = walletRepository.findByMemberId(user.getId())\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"User wallet not found\"));\r\n\r\n        if (userWallet.getBalance() < amount) {\r\n            throw new ValidationException(\"Insufficient wallet balance\");\r\n        }\r\n\r\n        userWallet.setBalance(userWallet.getBalance() - amount);\r\n        walletRepository.save(userWallet);\r\n\r\n        // 創建託管支付記錄\r\n        Payment payment = new Payment();\r\n        payment.setAmount(amount);\r\n        payment.setPaymentDate(LocalDateTime.now());\r\n        payment.setPaymentMethod(\"WALLET\");\r\n        payment.setStatus(\"ESCROWED\"); // 託管狀態\r\n        payment.setPaymentType(\"CLASS_SESSION_ESCROW\");\r\n        payment.setTransactionId(\"SESSION_\" + session.getId() + \"_\" + user.getId()); // 關聯課程和用戶\r\n        payment.setGroupBookingId(\"ESCROW_\" + session.getId() + \"_\" + user.getId()); // 添加 groupBookingId\r\n        paymentRepository.save(payment);\r\n\r\n        log.info(\"Deposited RM{} to escrow for session {} by user {}\", \r\n                amount, session.getId(), user.getId());\r\n    }\r\n\r\n    /**\r\n     * 課程開始時自動分帳：80% 給教練，20% 給平台\r\n     */\r\n    @Transactional\r\n    public void settleClassSession(ClassSession session) {\r\n        // 獲取該課程的所有託管支付（通過 transactionId 關聯）\r\n        List<Payment> escrowedPayments = paymentRepository.findByPaymentTypeAndStatus(\"CLASS_SESSION_ESCROW\", \"ESCROWED\")\r\n                .stream()\r\n                .filter(payment -> payment.getTransactionId() != null && \r\n                        payment.getTransactionId().startsWith(\"SESSION_\" + session.getId() + \"_\"))\r\n                .collect(java.util.stream.Collectors.toList());\r\n        \r\n        if (escrowedPayments.isEmpty()) {\r\n            log.warn(\"No escrowed payments found for session {}\", session.getId());\r\n            return;\r\n        }\r\n\r\n        double totalEscrowedAmount = escrowedPayments.stream()\r\n                .mapToDouble(Payment::getAmount)\r\n                .sum();\r\n\r\n        // 計算分帳金額\r\n        double coachAmount = totalEscrowedAmount * 0.8; // 80% 給教練\r\n        double platformAmount = totalEscrowedAmount * 0.2; // 20% 給平台\r\n\r\n        // 轉給教練\r\n        User coach = session.getCoach();\r\n        if (coach == null) {\r\n            log.error(\"Coach not found for session: {}\", session.getId());\r\n            return;\r\n        }\r\n        \r\n        Member coachMember = memberRepository.findByUser(coach);\r\n        if (coachMember == null) {\r\n            log.error(\"Coach member not found for coach: {}\", coach.getId());\r\n            return;\r\n        }\r\n        \r\n        // 獲取或創建教練錢包\r\n        Wallet coachWallet = walletRepository.findByMemberId(coachMember.getId()).orElse(null);\r\n        if (coachWallet == null) {\r\n            // 創建教練錢包\r\n            coachWallet = new Wallet();\r\n            coachWallet.setMember(coachMember);\r\n            coachWallet.setBalance(0.00);\r\n            coachWallet.setFrozenBalance(0.00);\r\n            coachWallet.setTotalDeposited(0.00);\r\n            coachWallet.setTotalSpent(0.00);\r\n            coachWallet.setStatus(\"ACTIVE\");\r\n            coachWallet = walletRepository.save(coachWallet);\r\n            log.info(\"Created new wallet for coach: {}\", coach.getId());\r\n        }\r\n\r\n        // 更新教練錢包餘額\r\n        double oldBalance = coachWallet.getBalance();\r\n        coachWallet.setBalance(oldBalance + coachAmount);\r\n        walletRepository.save(coachWallet);\r\n\r\n        // 創建錢包交易記錄\r\n        WalletTransaction coachTransaction = new WalletTransaction();\r\n        coachTransaction.setWalletId(coachWallet.getId());\r\n        coachTransaction.setTransactionType(\"COACH_INCOME\");\r\n        coachTransaction.setAmount(coachAmount);\r\n        coachTransaction.setBalanceBefore(oldBalance);\r\n        coachTransaction.setBalanceAfter(coachWallet.getBalance());\r\n        coachTransaction.setFrozenBefore(coachWallet.getFrozenBalance());\r\n        coachTransaction.setFrozenAfter(coachWallet.getFrozenBalance());\r\n        coachTransaction.setReferenceType(\"CLASS_SESSION\");\r\n        coachTransaction.setReferenceId(session.getId());\r\n        coachTransaction.setDescription(\"Class session revenue: \" + session.getTitle() + \" (80% share via escrow)\");\r\n        coachTransaction.setStatus(\"COMPLETED\");\r\n        walletTransactionRepository.save(coachTransaction);\r\n\r\n        // 創建教練收入記錄\r\n        Payment coachPayment = new Payment();\r\n        coachPayment.setAmount(coachAmount);\r\n        coachPayment.setPaymentDate(LocalDateTime.now());\r\n        coachPayment.setPaymentMethod(\"ESCROW_SETTLEMENT\");\r\n        coachPayment.setStatus(\"COMPLETED\");\r\n        coachPayment.setPaymentType(\"COACH_INCOME\");\r\n        coachPayment.setTransactionId(\"SETTLEMENT_\" + session.getId());\r\n        coachPayment.setGroupBookingId(\"SETTLEMENT_\" + session.getId());\r\n        paymentRepository.save(coachPayment);\r\n\r\n        // 創建平台收入記錄\r\n        Payment platformPayment = new Payment();\r\n        platformPayment.setAmount(platformAmount);\r\n        platformPayment.setPaymentDate(LocalDateTime.now());\r\n        platformPayment.setPaymentMethod(\"ESCROW_SETTLEMENT\");\r\n        platformPayment.setStatus(\"COMPLETED\");\r\n        platformPayment.setPaymentType(\"PLATFORM_FEE\");\r\n        platformPayment.setTransactionId(\"SETTLEMENT_\" + session.getId());\r\n        platformPayment.setGroupBookingId(\"SETTLEMENT_\" + session.getId());\r\n        paymentRepository.save(platformPayment);\r\n\r\n        // 更新所有相關的託管支付狀態\r\n        escrowedPayments.forEach(payment -> {\r\n            payment.setStatus(\"SETTLED\");\r\n            paymentRepository.save(payment);\r\n        });\r\n\r\n        log.info(\"Successfully settled session {}: Coach {} received RM{}, Platform received RM{}\", \r\n                session.getId(), coach.getId(), coachAmount, platformAmount);\r\n    }\r\n\r\n    /**\r\n     * 課程取消時退款給用戶\r\n     */\r\n    @Transactional\r\n    public void refundFromEscrow(User user, double amount, ClassSession session) {\r\n        // 退款到用戶錢包\r\n        Wallet userWallet = walletRepository.findByMemberId(user.getId())\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"User wallet not found\"));\r\n\r\n        userWallet.setBalance(userWallet.getBalance() + amount);\r\n        walletRepository.save(userWallet);\r\n\r\n        // 創建退款記錄\r\n        Payment refund = new Payment();\r\n        refund.setAmount(amount);\r\n        refund.setRefundDate(LocalDateTime.now());\r\n        refund.setPaymentMethod(\"ESCROW_REFUND\");\r\n        refund.setStatus(\"REFUNDED\");\r\n        refund.setPaymentType(\"CLASS_SESSION_REFUND\");\r\n        refund.setTransactionId(\"REFUND_\" + session.getId() + \"_\" + user.getId());\r\n        refund.setGroupBookingId(\"REFUND_\" + session.getId() + \"_\" + user.getId());\r\n        paymentRepository.save(refund);\r\n\r\n        log.info(\"Refunded RM{} from escrow to user {} for cancelled session {}\", \r\n                amount, user.getId(), session.getId());\r\n    }\r\n\r\n    /**\r\n     * 獲取平台託管餘額（所有 ESCROWED 狀態的支付總和）\r\n     */\r\n    public double getPlatformEscrowBalance() {\r\n        return paymentRepository.findByPaymentTypeAndStatus(\"CLASS_SESSION_ESCROW\", \"ESCROWED\")\r\n                .stream()\r\n                .mapToDouble(Payment::getAmount)\r\n                .sum();\r\n    }\r\n\r\n    /**\r\n     * 獲取平台收入總額（所有 PLATFORM_FEE 類型的支付總和）\r\n     */\r\n    public double getPlatformRevenue() {\r\n        return paymentRepository.findByPaymentTypeAndStatus(\"PLATFORM_FEE\", \"COMPLETED\")\r\n                .stream()\r\n                .mapToDouble(Payment::getAmount)\r\n                .sum();\r\n    }\r\n\r\n    /**\r\n     * 獲取教練收入總額（所有 COACH_INCOME 類型的支付總和）\r\n     */\r\n    public double getCoachRevenue() {\r\n        return paymentRepository.findByPaymentTypeAndStatus(\"COACH_INCOME\", \"COMPLETED\")\r\n                .stream()\r\n                .mapToDouble(Payment::getAmount)\r\n                .sum();\r\n    }\r\n} 
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/EscrowAccountService.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/EscrowAccountService.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/EscrowAccountService.java	(revision c178c1d9e80f6815b91226b2d10f391611dcb6b4)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/EscrowAccountService.java	(date 1754966061873)
@@ -6,6 +6,7 @@
 import com.pickleball_backend.pickleball.entity.Member;
 import com.pickleball_backend.pickleball.entity.User;
 import com.pickleball_backend.pickleball.entity.ClassSession;
+import com.pickleball_backend.pickleball.entity.Event;
 import com.pickleball_backend.pickleball.repository.WalletRepository;
 import com.pickleball_backend.pickleball.repository.PaymentRepository;
 import com.pickleball_backend.pickleball.repository.WalletTransactionRepository;
@@ -19,6 +20,7 @@
 
 import java.time.LocalDateTime;
 import java.util.List;
+import java.util.stream.Collectors;
 
 @Service
 @Slf4j
@@ -29,6 +31,7 @@
     private final PaymentRepository paymentRepository;
     private final WalletTransactionRepository walletTransactionRepository;
     private final MemberRepository memberRepository;
+    private final MemberService memberService;
 
     /**
      * 用戶報名課程時，將錢存入託管狀態
@@ -178,6 +181,15 @@
         userWallet.setBalance(userWallet.getBalance() + amount);
         walletRepository.save(userWallet);
 
+        // 扣除積分（全額扣除，因為課程取消通常是全額退款）
+        Member member = memberRepository.findByUserId(user.getId());
+        if (member != null) {
+            MemberService.PointDeductionResult deductionResult = memberService.deductPointsForRefund(member, amount, 1.0);
+            
+            log.info("Deducted {} tier points and {} reward points from member {} for class session escrow refund",
+                    deductionResult.getTierPointsDeducted(), deductionResult.getRewardPointsDeducted(), member.getId());
+        }
+
         // 創建退款記錄
         Payment refund = new Payment();
         refund.setAmount(amount);
@@ -222,4 +234,118 @@
                 .mapToDouble(Payment::getAmount)
                 .sum();
     }
+
+    /**
+     * 用戶報名活動時，將錢存入託管狀態
+     */
+    @Transactional
+    public void depositToEscrowForEvent(User user, double amount, Event event) {
+        // 從用戶錢包扣款
+        Wallet userWallet = walletRepository.findByMemberId(user.getId())
+                .orElseThrow(() -> new ResourceNotFoundException("User wallet not found"));
+
+        if (userWallet.getBalance() < amount) {
+            throw new ValidationException("Insufficient wallet balance");
+        }
+
+        userWallet.setBalance(userWallet.getBalance() - amount);
+        walletRepository.save(userWallet);
+
+        // 創建託管支付記錄
+        Payment payment = new Payment();
+        payment.setAmount(amount);
+        payment.setPaymentDate(LocalDateTime.now());
+        payment.setPaymentMethod("WALLET");
+        payment.setStatus("ESCROWED"); // 託管狀態
+        payment.setPaymentType("EVENT_ESCROW");
+        payment.setTransactionId("EVENT_" + event.getId() + "_" + user.getId()); // 關聯活動和用戶
+        payment.setGroupBookingId("ESCROW_EVENT_" + event.getId() + "_" + user.getId()); // 添加 groupBookingId
+        paymentRepository.save(payment);
+
+        log.info("Deposited RM{} to escrow for event {} by user {}", 
+                amount, event.getId(), user.getId());
+    }
+
+    /**
+     * 活動結束時自動分帳：90% 給組織者，10% 給平台
+     */
+    @Transactional
+    public void distributeEventEscrow(Event event) {
+        List<Payment> escrowPayments = paymentRepository.findByPaymentTypeAndStatus("EVENT_ESCROW", "ESCROWED")
+                .stream()
+                .filter(payment -> payment.getGroupBookingId() != null && 
+                        payment.getGroupBookingId().contains("ESCROW_EVENT_" + event.getId()))
+                .collect(Collectors.toList());
+
+        for (Payment payment : escrowPayments) {
+            double totalAmount = payment.getAmount();
+            double platformFee = totalAmount * 0.1; // 10% 平台分成
+            double organizerRevenue = totalAmount - platformFee; // 90% 給組織者
+
+            // 更新支付狀態為已完成
+            payment.setStatus("COMPLETED");
+            paymentRepository.save(payment);
+
+            // 創建平台收入記錄
+            Payment platformPayment = new Payment();
+            platformPayment.setAmount(platformFee);
+            platformPayment.setPaymentDate(LocalDateTime.now());
+            platformPayment.setPaymentMethod("ESCROW_DISTRIBUTION");
+            platformPayment.setStatus("COMPLETED");
+            platformPayment.setPaymentType("PLATFORM_FEE");
+            platformPayment.setTransactionId("PLATFORM_FEE_" + event.getId() + "_" + payment.getId());
+            platformPayment.setGroupBookingId("EVENT_" + event.getId());
+            paymentRepository.save(platformPayment);
+
+            // 創建組織者收入記錄
+            Payment organizerPayment = new Payment();
+            organizerPayment.setAmount(organizerRevenue);
+            organizerPayment.setPaymentDate(LocalDateTime.now());
+            organizerPayment.setPaymentMethod("ESCROW_DISTRIBUTION");
+            organizerPayment.setStatus("COMPLETED");
+            organizerPayment.setPaymentType("EVENT_ORGANIZER_INCOME");
+            organizerPayment.setTransactionId("ORGANIZER_INCOME_" + event.getId() + "_" + payment.getId());
+            organizerPayment.setGroupBookingId("EVENT_" + event.getId());
+            paymentRepository.save(organizerPayment);
+
+            log.info("Distributed RM{} from escrow for event {}: Platform RM{}, Organizer RM{}", 
+                    totalAmount, event.getId(), platformFee, organizerRevenue);
+        }
+    }
+
+    /**
+     * 活動取消時退款給用戶
+     */
+    @Transactional
+    public void refundEventEscrow(User user, double amount, Event event) {
+        // 退款到用戶錢包
+        Wallet userWallet = walletRepository.findByMemberId(user.getId())
+                .orElseThrow(() -> new ResourceNotFoundException("User wallet not found"));
+
+        userWallet.setBalance(userWallet.getBalance() + amount);
+        walletRepository.save(userWallet);
+
+        // 扣除積分（全額扣除，因為活動取消通常是全額退款）
+        Member member = memberRepository.findByUserId(user.getId());
+        if (member != null) {
+            MemberService.PointDeductionResult deductionResult = memberService.deductPointsForRefund(member, amount, 1.0);
+            
+            log.info("Deducted {} tier points and {} reward points from member {} for event refund",
+                    deductionResult.getTierPointsDeducted(), deductionResult.getRewardPointsDeducted(), member.getId());
+        }
+
+        // 創建退款記錄
+        Payment refund = new Payment();
+        refund.setAmount(amount);
+        refund.setRefundDate(LocalDateTime.now());
+        refund.setPaymentMethod("ESCROW_REFUND");
+        refund.setStatus("REFUNDED");
+        refund.setPaymentType("EVENT_ESCROW_REFUND");
+        refund.setTransactionId("REFUND_EVENT_" + event.getId() + "_" + user.getId());
+        refund.setGroupBookingId("REFUND_EVENT_" + event.getId() + "_" + user.getId());
+        paymentRepository.save(refund);
+
+        log.info("Refunded RM{} from event escrow to user {} for cancelled event {}", 
+                amount, user.getId(), event.getId());
+    }
 } 
\ No newline at end of file
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Coach.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.entity;\r\n\r\nimport jakarta.persistence.*;\r\nimport lombok.Data;\r\n\r\nimport java.util.HashSet;\r\nimport java.util.Set;\r\n\r\n@Entity\r\n@Table(name = \"coach\")\r\n@Data\r\npublic class Coach {\r\n    @Id\r\n    @Column(name = \"user_id\")\r\n    private Integer id;\r\n\r\n    @OneToOne\r\n    @MapsId\r\n    @JoinColumn(name = \"user_id\")\r\n    private User user;\r\n\r\n    @Column(name = \"experience_year\")\r\n    private Integer experienceYear;\r\n\r\n    @ManyToMany\r\n    @JoinTable(\r\n        name = \"coach_venue\",\r\n        joinColumns = @JoinColumn(name = \"coach_id\"),\r\n        inverseJoinColumns = @JoinColumn(name = \"venue_id\")\r\n    )\r\n    private Set<Venue> venues = new HashSet<>();\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Coach.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Coach.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Coach.java	(revision c178c1d9e80f6815b91226b2d10f391611dcb6b4)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Coach.java	(date 1754953337368)
@@ -2,6 +2,7 @@
 
 import jakarta.persistence.*;
 import lombok.Data;
+import lombok.ToString;
 
 import java.util.HashSet;
 import java.util.Set;
@@ -17,6 +18,7 @@
     @OneToOne
     @MapsId
     @JoinColumn(name = "user_id")
+    @ToString.Exclude
     private User user;
 
     @Column(name = "experience_year")
@@ -28,5 +30,6 @@
         joinColumns = @JoinColumn(name = "coach_id"),
         inverseJoinColumns = @JoinColumn(name = "venue_id")
     )
+    @ToString.Exclude
     private Set<Venue> venues = new HashSet<>();
 }
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/ClassSession.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.entity;\r\n\r\nimport jakarta.persistence.*;\r\nimport lombok.Data;\r\n\r\nimport java.time.LocalDate;\r\nimport java.time.LocalDateTime;\r\nimport java.util.List;\r\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\r\nimport com.fasterxml.jackson.annotation.JsonBackReference;\r\nimport com.fasterxml.jackson.annotation.JsonManagedReference;\r\nimport lombok.Getter;\r\nimport lombok.NoArgsConstructor;\r\nimport lombok.Setter;\r\nimport com.fasterxml.jackson.annotation.JsonIgnore;\r\n\r\n@Entity\r\n@Getter\r\n@Setter\r\n@NoArgsConstructor\r\n@Data\r\n@Table(name = \"classsession\")\r\npublic class ClassSession {\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Integer id;\r\n\r\n    @Column(name = \"start_time\")\r\n    private LocalDateTime startTime;\r\n    private LocalDateTime endTime;\r\n    private String status; // AVAILABLE, BOOKED, CANCELLED, COMPLETED, OPEN, BOOKED_BY_COACH, BOOKED_BY_USER\r\n    private String note;\r\n    @Column(name = \"experience_year\")\r\n    private Integer experienceYear;\r\n\r\n    @Column(name = \"slot_type\")\r\n    private String slotType; // COACH_AVAILABILITY or REGULAR_BOOKING\r\n\r\n    @Column(name = \"created_at\")\r\n    private LocalDateTime createdAt;\r\n\r\n    @Column(name = \"updated_at\")\r\n    private LocalDateTime updatedAt;\r\n\r\n    @ManyToOne\r\n    @JoinColumn(name = \"coach_id\")\r\n    @com.fasterxml.jackson.annotation.JsonIgnore\r\n    private User coach;\r\n\r\n    @ManyToOne\r\n    @JoinColumn(name = \"court_id\")\r\n    @JsonIgnoreProperties(\"sessions\") // 只忽略 sessions，讓 venue 信息能傳遞\r\n    private Court court;\r\n\r\n    @ManyToOne\r\n    @JoinColumn(name = \"player_id\")\r\n    private User player;\r\n\r\n    @OneToOne\r\n    @JoinColumn(name = \"payment_id\") // 這個欄位名要和你的資料庫一致\r\n    private Payment payment;\r\n\r\n    @OneToOne(mappedBy = \"session\", cascade = CascadeType.ALL)\r\n    private CancellationRequest cancellationRequest;\r\n\r\n    // 新增欄位\r\n    @Column(name = \"max_participants\")\r\n    private Integer maxParticipants;\r\n\r\n    @Column(name = \"description\")\r\n    private String description;\r\n\r\n    @Column(name = \"price\", nullable = false)\r\n    private double price = 0.0; // 默認0，強制教練設置價格\r\n\r\n    @Column(name = \"title\", nullable = false)\r\n    private String title;\r\n\r\n    // 新增：當前參與人數\r\n    @Column(name = \"current_participants\")\r\n    private int currentParticipants = 0;\r\n\r\n    @Column(name = \"is_recurring\")\r\n    private Boolean isRecurring; // 是否為固定課程\r\n\r\n    @Column(name = \"recurrence_pattern\")\r\n    private String recurrencePattern; // 週期模式：WEEKLY/MONTHLY\r\n\r\n    @Column(name = \"recurrence_days\")\r\n    private String recurrenceDays; // 週期日：MON,WED,FRI\r\n\r\n    @Column(name = \"recurrence_end_date\")\r\n    private LocalDate recurrenceEndDate; // 週期結束日\r\n\r\n    @Column(name = \"recurring_group_id\")\r\n    private String recurringGroupId; // recurring 課程分組用\r\n\r\n    @ManyToOne\r\n    @JoinColumn(name = \"venue_id\")\r\n    private Venue venue;\r\n\r\n    // 新增：報名關聯\r\n    @OneToMany(mappedBy = \"classSession\")\r\n    private List<ClassRegistration> registrations;\r\n\r\n    // Replacement class: reference to the original cancelled session\r\n    @Column(name = \"replacement_for_session_id\")\r\n    private Integer replacementForSessionId;\r\n\r\n    // 新增：是否允許補課\r\n    @Column(name = \"allow_replacement\")\r\n    private Boolean allowReplacement = false;\r\n\r\n    @Column(name = \"revenue_distributed\")\r\n    private Boolean revenueDistributed = false; // 收入是否已分配\r\n\r\n    // 商務邏輯方法：檢查是否可報名\r\n    public boolean canRegister() {\r\n        return \"AVAILABLE\".equals(status) && currentParticipants < maxParticipants;\r\n    }\r\n\r\n    // 商務邏輯方法：增加參與者\r\n    public void addParticipant() {\r\n        if (currentParticipants < maxParticipants) {\r\n            currentParticipants++;\r\n            if (currentParticipants >= maxParticipants) {\r\n                status = \"FULL\";\r\n            }\r\n        }\r\n    }\r\n\r\n    public Boolean getRecurring() {\r\n        return isRecurring;\r\n    }\r\n\r\n    public void setRecurring(Boolean recurring) {\r\n        isRecurring = recurring;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/ClassSession.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/ClassSession.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/ClassSession.java	(revision c178c1d9e80f6815b91226b2d10f391611dcb6b4)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/ClassSession.java	(date 1754952962383)
@@ -2,6 +2,7 @@
 
 import jakarta.persistence.*;
 import lombok.Data;
+import lombok.ToString;
 
 import java.time.LocalDate;
 import java.time.LocalDateTime;
@@ -45,22 +46,27 @@
     @ManyToOne
     @JoinColumn(name = "coach_id")
     @com.fasterxml.jackson.annotation.JsonIgnore
+    @ToString.Exclude
     private User coach;
 
     @ManyToOne
     @JoinColumn(name = "court_id")
     @JsonIgnoreProperties("sessions") // 只忽略 sessions，讓 venue 信息能傳遞
+    @ToString.Exclude
     private Court court;
 
     @ManyToOne
     @JoinColumn(name = "player_id")
+    @ToString.Exclude
     private User player;
 
     @OneToOne
     @JoinColumn(name = "payment_id") // 這個欄位名要和你的資料庫一致
+    @ToString.Exclude
     private Payment payment;
 
     @OneToOne(mappedBy = "session", cascade = CascadeType.ALL)
+    @ToString.Exclude
     private CancellationRequest cancellationRequest;
 
     // 新增欄位
@@ -97,10 +103,12 @@
 
     @ManyToOne
     @JoinColumn(name = "venue_id")
+    @ToString.Exclude
     private Venue venue;
 
     // 新增：報名關聯
     @OneToMany(mappedBy = "classSession")
+    @ToString.Exclude
     private List<ClassRegistration> registrations;
 
     // Replacement class: reference to the original cancelled session
Index: pickleball-frontend/src/pages/LoginPage.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useState } from 'react';\r\nimport {\r\n  TextField,\r\n  Box,\r\n  Container,\r\n  Link,\r\n  Typography,\r\n  Button,\r\n  Paper,\r\n  InputAdornment,\r\n  IconButton,\r\n  Alert,\r\n  Divider,\r\n  Fade,\r\n  Slide,\r\n  CircularProgress\r\n} from '@mui/material';\r\nimport {\r\n  Visibility,\r\n  VisibilityOff,\r\n  Person,\r\n  Lock,\r\n  Email\r\n} from '@mui/icons-material';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport api from '../service/api';\r\nimport UserService from '../service/UserService';\r\nimport Navbar from '../components/common/Navbar';\r\nimport { useAuth } from '../context/AuthContext';\r\nimport { useTheme } from '@mui/material';\r\n\r\nconst LoginPage = () => {\r\n  const navigate = useNavigate();\r\n  const { login } = useAuth();\r\n  const theme = useTheme();\r\n  const [credentials, setCredentials] = useState({\r\n    usernameOrEmail: '',\r\n    password: '',\r\n    rememberMe: false,\r\n  });\r\n  const [error, setError] = useState('');\r\n  const [showPassword, setShowPassword] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [focusedField, setFocusedField] = useState('');\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value, type, checked } = e.target;\r\n    setCredentials(prev => ({\r\n      ...prev,\r\n      [name]: type === 'checkbox' ? checked : value,\r\n    }));\r\n    // Clear error when user starts typing\r\n    if (error) setError('');\r\n  };\r\n\r\n  // Update handleLogin function with coach and admin routing logic:\r\n  const handleLogin = async () => {\r\n    setIsLoading(true);\r\n    setError('');\r\n    \r\n    try {\r\n      // First try regular user login\r\n      try {\r\n        const response = await api.post('/auth/login', {\r\n          usernameOrEmail: credentials.usernameOrEmail,\r\n          password: credentials.password\r\n        });\r\n        \r\n        if (response.data.token) {\r\n          // 用 context 的 login 方法同步状态\r\n          login(response.data.token);\r\n          // 解析 userType\r\n          const payload = JSON.parse(atob(response.data.token.split('.')[1]));\r\n          const userType = payload.userType || payload.role || '';\r\n          if (userType === 'Coach' || userType === 'COACH') {\r\n            navigate('/coaching');\r\n          } else {\r\n            navigate('/home');\r\n          }\r\n          return;\r\n        }\r\n      } catch (userErr) {\r\n        // If user login fails, try admin login\r\n        try {\r\n          const adminResponse = await api.post('/admin/login', {\r\n            username: credentials.usernameOrEmail,\r\n            password: credentials.password\r\n          });\r\n          \r\n                  if (adminResponse.data.token) {\r\n          // Store admin credentials using UserService\r\n          UserService.adminLogin(adminResponse.data.token, credentials.usernameOrEmail);\r\n          // Also set the token in AuthContext for consistency\r\n          login(adminResponse.data.token, true); // true indicates this is an admin token\r\n          navigate('/admin/dashboard');\r\n          return;\r\n        }\r\n        } catch (adminErr) {\r\n          // Both user and admin login failed\r\n          setError('Invalid credentials. Please try again.');\r\n          console.error('Login error:', userErr, adminErr);\r\n        }\r\n      }\r\n    } catch (err) {\r\n      setError('Login failed. Please try again.');\r\n      console.error('Login error:', err);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleKeyPress = (e) => {\r\n    if (e.key === 'Enter') {\r\n      handleLogin();\r\n    }\r\n  };\r\n\r\n  const togglePasswordVisibility = () => {\r\n    setShowPassword(!showPassword);\r\n  };\r\n\r\n\r\n\r\n  return (\r\n    <Box sx={{ \r\n      minHeight: '100vh',\r\n      background: 'linear-gradient(135deg, #f5f5f9 0%, #e8eaf6 100%)',\r\n      fontFamily: \"'Roboto', 'Helvetica', 'Arial', sans-serif\",\r\n      position: 'relative',\r\n      overflow: 'hidden',\r\n      py: 4,\r\n      display: 'flex',\r\n      flexDirection: 'column'\r\n    }}>\r\n      <Navbar />\r\n      \r\n      <Box sx={{ \r\n        flexGrow: 1, \r\n        display: 'flex', \r\n        alignItems: 'center', \r\n        justifyContent: 'center',\r\n        py: 4,\r\n        pt: { xs: 10, sm: 12 },\r\n        position: 'relative',\r\n        overflow: 'hidden'\r\n      }}>\r\n\r\n\r\n        <Container maxWidth=\"lg\" sx={{ py: 4, position: 'relative', zIndex: 1 }}>\r\n          <Slide direction=\"up\" in={true} mountOnEnter unmountOnExit>\r\n            <Box sx={{ \r\n              display: 'flex', \r\n              flexDirection: { xs: 'column', lg: 'row' }, \r\n              gap: 4, \r\n              alignItems: 'center',\r\n              justifyContent: 'center'\r\n            }}>\r\n              \r\n              {/* Left Side - Login Form */}\r\n              <Box sx={{ \r\n                flex: { xs: 'none', lg: 1 }, \r\n                width: { xs: '100%', sm: '400px', lg: '450px' },\r\n                maxWidth: '450px',\r\n                order: { xs: 2, lg: 1 }\r\n              }}>\r\n                <Fade in={true} timeout={800}>\r\n                  <Paper\r\n                    elevation={24}\r\n                    sx={{\r\n                      p: 4,\r\n                      borderRadius: '24px',\r\n                      background: 'rgba(255, 255, 255, 0.95)',\r\n                      backdropFilter: 'blur(20px)',\r\n                      border: '1px solid rgba(255, 255, 255, 0.2)',\r\n                      position: 'relative',\r\n                      overflow: 'hidden',\r\n                      boxShadow: '0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)'\r\n                    }}\r\n                  >\r\n                    {/* Background Mascot with Low Opacity */}\r\n                    <Box\r\n                      component=\"img\"\r\n                      src={`${process.env.PUBLIC_URL}/mascot_lowopacity.png`}\r\n                      alt=\"Background Mascot\"\r\n                      sx={{\r\n                        position: 'absolute',\r\n                        top: '60%',\r\n                        right: '-20px',\r\n                        transform: 'translateY(-50%)',\r\n                        width: '500px',\r\n                        height: 'auto',\r\n                        opacity: 0.35,\r\n                        zIndex: 0,\r\n                        pointerEvents: 'none'\r\n                      }}\r\n                    />\r\n                    \r\n                    {/* Header */}\r\n                    <Box sx={{ textAlign: 'center', mb: 4, position: 'relative', zIndex: 1 }}>\r\n                      <Box\r\n                        component=\"img\"\r\n                        src={`${process.env.PUBLIC_URL}/web-name.png`}\r\n                        alt=\"Brand\"\r\n                        sx={{\r\n                          height: 40,\r\n                          display: 'block',\r\n                          margin: '0 auto',\r\n                          mb: 1\r\n                        }}\r\n                      />\r\n                                              <Typography variant=\"h4\" sx={{ \r\n                          fontWeight: 700, \r\n                          color: theme.palette.text.primary,\r\n                          mb: 1\r\n                        }}>\r\n                          User Login\r\n                        </Typography>\r\n                    </Box>\r\n              \r\n                    {/* Login Form */}\r\n                    <Box component=\"form\" onKeyPress={handleKeyPress} sx={{ position: 'relative', zIndex: 1 }}>\r\n                      <Box sx={{ mb: 3 }}>\r\n                        <Typography component=\"label\" sx={{ \r\n                          fontWeight: 600,\r\n                          color: theme.palette.text.primary,\r\n                          fontSize: '0.95rem',\r\n                          mb: 1,\r\n                          display: 'block'\r\n                        }}>\r\n                          Email or Username\r\n                        </Typography>\r\n                        <TextField\r\n                          fullWidth\r\n                          variant=\"outlined\"\r\n                          placeholder=\"username@gmail.com\"\r\n                          name=\"usernameOrEmail\"\r\n                          value={credentials.usernameOrEmail}\r\n                          onChange={handleChange}\r\n                          onFocus={() => setFocusedField('usernameOrEmail')}\r\n                          onBlur={() => setFocusedField('')}\r\n                          InputProps={{\r\n                            startAdornment: (\r\n                              <InputAdornment position=\"start\">\r\n                                {credentials.usernameOrEmail.includes('@') ? \r\n                                  <Email sx={{ color: focusedField === 'usernameOrEmail' ? theme.palette.primary.main : theme.palette.text.secondary }} /> :\r\n                                  <Person sx={{ color: focusedField === 'usernameOrEmail' ? theme.palette.primary.main : theme.palette.text.secondary }} />\r\n                                }\r\n                              </InputAdornment>\r\n                            ),\r\n                          }}\r\n                          sx={{ \r\n                            '& .MuiOutlinedInput-root': {\r\n                              borderRadius: '12px',\r\n                              backgroundColor: theme.palette.mode === 'dark' ? theme.palette.background.default : '#f9fafb',\r\n                              '&:focus-within': {\r\n                                backgroundColor: theme.palette.background.paper,\r\n                                boxShadow: `0 0 0 4px ${theme.palette.primary.main}20`\r\n                              }\r\n                            }\r\n                          }}\r\n                        />\r\n                      </Box>\r\n\r\n                      <Box sx={{ mb: 3 }}>\r\n                        <Typography component=\"label\" sx={{ \r\n                          fontWeight: 600,\r\n                          color: theme.palette.text.primary,\r\n                          fontSize: '0.95rem',\r\n                          mb: 1,\r\n                          display: 'block'\r\n                        }}>\r\n                          Password\r\n                        </Typography>\r\n                        <TextField\r\n                          fullWidth\r\n                          variant=\"outlined\"\r\n                          placeholder=\"Password\"\r\n                          type={showPassword ? 'text' : 'password'}\r\n                          name=\"password\"\r\n                          value={credentials.password}\r\n                          onChange={handleChange}\r\n                          onFocus={() => setFocusedField('password')}\r\n                          onBlur={() => setFocusedField('')}\r\n                          InputProps={{\r\n                            startAdornment: (\r\n                              <InputAdornment position=\"start\">\r\n                                <Lock sx={{ color: focusedField === 'password' ? theme.palette.primary.main : theme.palette.text.secondary }} />\r\n                              </InputAdornment>\r\n                            ),\r\n                            endAdornment: (\r\n                              <InputAdornment position=\"end\">\r\n                                <IconButton\r\n                                  aria-label=\"toggle password visibility\"\r\n                                  onClick={togglePasswordVisibility}\r\n                                  edge=\"end\"\r\n                                >\r\n                                  {showPassword ? <Visibility /> : <VisibilityOff />}\r\n                                </IconButton>\r\n                              </InputAdornment>\r\n                            ),\r\n                          }}\r\n                          sx={{ \r\n                            '& .MuiOutlinedInput-root': {\r\n                              borderRadius: '12px',\r\n                              backgroundColor: theme.palette.mode === 'dark' ? theme.palette.background.default : '#f9fafb',\r\n                              '&:focus-within': {\r\n                                backgroundColor: theme.palette.background.paper,\r\n                                boxShadow: `0 0 0 4px ${theme.palette.primary.main}20`\r\n                              }\r\n                            }\r\n                          }}\r\n                        />\r\n                      </Box>\r\n\r\n                      <Box sx={{ \r\n                        display: 'flex', \r\n                        justifyContent: 'flex-end',\r\n                        alignItems: 'center',\r\n                        mb: 3\r\n                      }}>\r\n                        <Link\r\n                          component=\"button\"\r\n                          type=\"button\"\r\n                          variant=\"body2\"\r\n                          sx={{ \r\n                            color: theme.palette.primary.main, \r\n                            fontWeight: 500,\r\n                            textDecoration: 'none',\r\n                            fontSize: '0.9rem',\r\n                            '&:hover': {\r\n                              textDecoration: 'underline'\r\n                            }\r\n                          }}\r\n                          onClick={() => navigate('/forgot-password')}\r\n                        >\r\n                          Forgot Password?\r\n                        </Link>\r\n                      </Box>\r\n\r\n                      {error && (\r\n                        <Fade in={!!error}>\r\n                          <Alert \r\n                            severity=\"error\" \r\n                            sx={{ \r\n                              mb: 2, \r\n                              borderRadius: 2,\r\n                              '& .MuiAlert-message': {\r\n                                fontWeight: 500\r\n                              }\r\n                            }}\r\n                          >\r\n                            {error}\r\n                          </Alert>\r\n                        </Fade>\r\n                      )}\r\n\r\n                      <Button\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        onClick={handleLogin}\r\n                        disabled={isLoading}\r\n                        sx={{\r\n                          py: 1.5,\r\n                          fontSize: '1rem',\r\n                          fontWeight: 600,\r\n                          borderRadius: '12px',\r\n                          textTransform: 'none',\r\n                          backgroundColor: theme.palette.primary.main,\r\n                          color: theme.palette.primary.contrastText,\r\n                          boxShadow: `0 4px 14px ${theme.palette.primary.main}40`,\r\n                          transition: 'all 0.3s ease',\r\n                          '&:hover': {\r\n                            backgroundColor: theme.palette.primary.dark,\r\n                            boxShadow: `0 6px 20px ${theme.palette.primary.main}60`,\r\n                            transform: 'translateY(-1px)'\r\n                          },\r\n                          '&:disabled': {\r\n                            backgroundColor: theme.palette.action.disabledBackground,\r\n                            transform: 'none'\r\n                          }\r\n                        }}\r\n                      >\r\n                        {isLoading ? (\r\n                          <CircularProgress size={24} sx={{ color: 'white' }} />\r\n                        ) : (\r\n                          'Sign in'\r\n                        )}\r\n                      </Button>\r\n\r\n\r\n\r\n                      <Box sx={{ textAlign: 'center', mt: 3 }}>\r\n                        <Typography variant=\"body2\" sx={{ color: theme.palette.text.secondary }}>\r\n                          Don't have an account yet?{' '}\r\n                          <Link \r\n                            component=\"button\"\r\n                            type=\"button\"\r\n                            variant=\"body2\"\r\n                            onClick={() => navigate('/register')}\r\n                            sx={{ \r\n                              color: theme.palette.primary.main, \r\n                              fontWeight: 600,\r\n                              textDecoration: 'none',\r\n                              '&:hover': {\r\n                                textDecoration: 'underline'\r\n                              }\r\n                            }}\r\n                          >\r\n                            Register for free\r\n                          </Link>\r\n                        </Typography>\r\n                      </Box>\r\n                      {/*<Box sx={{ my: 3, position: 'relative' }}>\r\n                        <Divider sx={{ borderColor: theme.palette.divider }}>\r\n                          <Chip \r\n                            label=\"OR\" \r\n                            size=\"small\" \r\n                            sx={{ \r\n                              backgroundColor: theme.palette.background.paper,\r\n                              color: theme.palette.primary.main,\r\n                              fontWeight: 600,\r\n                              fontSize: '0.75rem'\r\n                            }} \r\n                          />\r\n                        </Divider>\r\n                      </Box>\r\n                      {/* Social Login Buttons\r\n                    <Box sx={{ mb: 3 }}>\r\n                      <Stack spacing={2}>\r\n                        <SocialLoginButton icon={Google} provider=\"Google\" color=\"#4285f4\" />\r\n                        <SocialLoginButton icon={Facebook} provider=\"Facebook\" color=\"#1877f2\" />\r\n                      </Stack>\r\n                      \r\n                      \r\n                    </Box>*/}\r\n                    </Box>\r\n                  </Paper>\r\n                </Fade>\r\n              </Box>\r\n\r\n              {/* Right Side - Mascot */}\r\n              <Box sx={{ \r\n                flex: 1,\r\n                display: { xs: 'none', lg: 'flex' },\r\n                justifyContent: 'center',\r\n                alignItems: 'center',\r\n                order: { xs: 1, lg: 2 }\r\n              }}>\r\n                <Box\r\n                  component=\"img\"\r\n                  src={`${process.env.PUBLIC_URL}/mascot.png`}\r\n                  alt=\"Pickleball Mascot\"\r\n                  sx={{\r\n                    maxWidth: '100%',\r\n                    height: 'auto',\r\n                    maxHeight: '600px',\r\n                    filter: 'drop-shadow(0 10px 20px rgba(0, 0, 0, 0.1))'\r\n                  }}\r\n                />\r\n              </Box>\r\n            </Box>\r\n          </Slide>\r\n        </Container>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default LoginPage;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball-frontend/src/pages/LoginPage.jsx b/pickleball-frontend/src/pages/LoginPage.jsx
--- a/pickleball-frontend/src/pages/LoginPage.jsx	(revision c178c1d9e80f6815b91226b2d10f391611dcb6b4)
+++ b/pickleball-frontend/src/pages/LoginPage.jsx	(date 1754889731993)
@@ -74,6 +74,8 @@
           const userType = payload.userType || payload.role || '';
           if (userType === 'Coach' || userType === 'COACH') {
             navigate('/coaching');
+          } else if (userType === 'EventOrganizer' || userType === 'EVENTORGANIZER') {
+            navigate('/event-organizer');
           } else {
             navigate('/home');
           }
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/EventRegistrationController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.controller;\r\n\r\nimport com.pickleball_backend.pickleball.dto.EventRegistrationRequestDto;\r\nimport com.pickleball_backend.pickleball.service.EventRegistrationService;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.security.access.prepost.PreAuthorize;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\nimport java.security.Principal;\r\nimport com.pickleball_backend.pickleball.repository.EventRegistrationRepository;\r\nimport com.pickleball_backend.pickleball.entity.User;\r\nimport com.pickleball_backend.pickleball.dto.ProfileDto;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\n@RestController\r\n@RequestMapping(\"/api/event-registration\")\r\npublic class EventRegistrationController {\r\n\r\n    @Autowired\r\n    private EventRegistrationService eventRegistrationService;\r\n\r\n    @Autowired\r\n    private EventRegistrationRepository eventRegistrationRepository;\r\n\r\n    @PostMapping(\"/register\")\r\n    public ResponseEntity<?> registerForEvent(\r\n            @RequestBody EventRegistrationRequestDto request,\r\n            Principal principal) {\r\n        eventRegistrationService.registerForEvent(request, principal.getName());\r\n        return ResponseEntity.ok(\"Registered successfully!\");\r\n    }\r\n\r\n    @PostMapping(\"/cancel/{eventId}\")\r\n    @PreAuthorize(\"hasRole('USER')\")\r\n    public ResponseEntity<Void> cancel(\r\n            @PathVariable Integer eventId,\r\n            Principal principal) {\r\n        String username = principal.getName();\r\n        eventRegistrationService.cancelRegistration(eventId, username);\r\n        return ResponseEntity.ok().build();\r\n    }\r\n\r\n    @GetMapping(\"/is-registered/{eventId}\")\r\n    @PreAuthorize(\"hasRole('USER')\")\r\n    public ResponseEntity<Boolean> isRegistered(\r\n            @PathVariable Integer eventId,\r\n            Principal principal) {\r\n        String username = principal.getName();\r\n        return ResponseEntity.ok(eventRegistrationService.isUserRegistered(eventId, username));\r\n    }\r\n\r\n    @GetMapping(\"/event/{eventId}/users\")\r\n    @PreAuthorize(\"hasRole('EVENTORGANIZER')\")\r\n    public ResponseEntity<List<ProfileDto>> getRegisteredUsersForEvent(@PathVariable Integer eventId) {\r\n        List<User> users = eventRegistrationRepository.findUsersRegisteredForEvent(eventId);\r\n        // Map User to ProfileDto (adjust mapping as needed)\r\n        List<ProfileDto> profiles = users.stream()\r\n            .map(user -> new ProfileDto(\r\n                user.getId(),\r\n                user.getName(),\r\n                user.getEmail(),\r\n                user.getPhone()\r\n                // add other fields as needed\r\n            ))\r\n            .collect(Collectors.toList());\r\n        return ResponseEntity.ok(profiles);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/EventRegistrationController.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/EventRegistrationController.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/EventRegistrationController.java	(revision c178c1d9e80f6815b91226b2d10f391611dcb6b4)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/EventRegistrationController.java	(date 1754955087588)
@@ -67,4 +67,15 @@
             .collect(Collectors.toList());
         return ResponseEntity.ok(profiles);
     }
+
+    @PostMapping("/event/{eventId}/distribute-escrow")
+    @PreAuthorize("hasRole('EVENTORGANIZER')")
+    public ResponseEntity<?> distributeEventEscrow(@PathVariable Integer eventId) {
+        try {
+            eventRegistrationService.distributeEventEscrow(eventId);
+            return ResponseEntity.ok("Event escrow distributed successfully");
+        } catch (Exception e) {
+            return ResponseEntity.badRequest().body("Failed to distribute escrow: " + e.getMessage());
+        }
+    }
 }
Index: pickleball-frontend/src/service/ClassSessionService.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import axios from 'axios';\r\nconst api = axios.create({ baseURL: process.env.REACT_APP_API_BASE_URL || 'http://localhost:8081' });\r\napi.interceptors.request.use(config => {\r\n  const token = localStorage.getItem('authToken');\r\n  if (token) config.headers.Authorization = `Bearer ${token}`;\r\n  return config;\r\n});\r\nconst ClassSessionService = {\r\n  createClassSession: async (data, makeupForSessionId) => {\r\n    let url = '/api/class-sessions';\r\n    if (makeupForSessionId) {\r\n      url += `?makeupForSessionId=${makeupForSessionId}`;\r\n    }\r\n    const res = await api.post(url, data);\r\n    return res.data;\r\n  },\r\n\r\n  // 查詢所有場館（給教練/用戶建立課程時用）\r\n  getVenues: async () => {\r\n    const res = await api.get('/api/venues');\r\n    return res.data;\r\n  },\r\n\r\n  // 新增：建立 recurring 課程\r\n  createRecurringSessions: async (data) => {\r\n    const res = await api.post('/api/class-sessions/recurring', data);\r\n    return res.data;\r\n  },\r\n\r\n  // 新增：court 多日期衝突檢查\r\n  checkCourtAvailability: async (courtId, dateTimes) => {\r\n    const res = await api.post('/api/class-sessions/check-court-availability', { courtId, dateTimes });\r\n    return res.data;\r\n  },\r\n\r\n  // 新增：更新課程\r\n  updateClassSession: async (sessionId, data) => {\r\n    const res = await api.put(`/api/class-sessions/${sessionId}`, data);\r\n    return res.data;\r\n  },\r\n\r\n  // Fetch all available class sessions for users\r\n  getAllAvailableSessions: async (start, end) => {\r\n    const res = await api.get('/api/class-sessions/available', {\r\n      params: { start, end }\r\n    });\r\n    return res.data;\r\n  },\r\n\r\n  // Register for multiple sessions (group booking)\r\n  registerForMultipleSessions: async (sessionIds, paymentMethod) => {\r\n    const res = await api.post('/api/class-sessions/register-multi', {\r\n      sessionIds,\r\n      paymentMethod\r\n    });\r\n    return res.data;\r\n  },\r\n\r\n  // 批量查詢課程詳情（for receipt）\r\n  getSessionDetailsBatch: async (sessionIds) => {\r\n    const res = await api.post('/api/class-sessions/details-batch', sessionIds);\r\n    return res.data;\r\n  },\r\n\r\n  getSessionStudents: async (sessionId) => {\r\n    const res = await api.get(`/api/class-sessions/${sessionId}/students`);\r\n    return res.data;\r\n  },\r\n\r\n  registerForSession: async (sessionId, userId) => {\r\n    const res = await api.post(`/api/class-sessions/${sessionId}/register`, userId);\r\n    return res.data;\r\n  },\r\n\r\n  // 查詢 recurring class 下所有 session 及其報名名單\r\n  getRecurringClassFullDetails: async (recurringGroupId) => {\r\n    const res = await api.get(`/api/class-sessions/recurring/${recurringGroupId}/full-details`);\r\n    return res.data;\r\n  },\r\n\r\n  // 取消課程，支援 reason 和 force\r\n  cancelSession: async (sessionId, reason = '', force = false) => {\r\n    const params = [];\r\n    if (force) params.push('force=true');\r\n    if (reason) params.push('reason=' + encodeURIComponent(reason));\r\n    const query = params.length ? '?' + params.join('&') : '';\r\n    const res = await api.put(`/api/class-sessions/${sessionId}/cancel-registration${query}`);\r\n    return res.data;\r\n  },\r\n\r\n  // 查詢單一課程詳情，支援 replacement class allowedMemberIds\r\n  getSessionDetails: async (sessionId) => {\r\n    const res = await api.get(`/api/class-sessions/${sessionId}/details`);\r\n    return res.data;\r\n  },\r\n\r\n  // 查詢教練的替補課程\r\n  getReplacementClasses: async (coachId) => {\r\n    const res = await api.get('/api/class-sessions/replacements', {\r\n      params: { coachId }\r\n    });\r\n    return res.data;\r\n  },\r\n};\r\nexport default ClassSessionService; 
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball-frontend/src/service/ClassSessionService.js b/pickleball-frontend/src/service/ClassSessionService.js
--- a/pickleball-frontend/src/service/ClassSessionService.js	(revision c178c1d9e80f6815b91226b2d10f391611dcb6b4)
+++ b/pickleball-frontend/src/service/ClassSessionService.js	(date 1754898432741)
@@ -1,105 +1,99 @@
-import axios from 'axios';
-const api = axios.create({ baseURL: process.env.REACT_APP_API_BASE_URL || 'http://localhost:8081' });
-api.interceptors.request.use(config => {
-  const token = localStorage.getItem('authToken');
-  if (token) config.headers.Authorization = `Bearer ${token}`;
-  return config;
-});
+import api from '../api/axiosConfig';
+
 const ClassSessionService = {
-  createClassSession: async (data, makeupForSessionId) => {
-    let url = '/api/class-sessions';
-    if (makeupForSessionId) {
-      url += `?makeupForSessionId=${makeupForSessionId}`;
-    }
-    const res = await api.post(url, data);
+  // 獲取課程會話列表
+  getClassSessions: async (page = 0, size = 10, filters = {}) => {
+    let url = '/class-sessions';
+    const params = { page, size, ...filters };
+    const res = await api.get(url, { params });
     return res.data;
   },
 
-  // 查詢所有場館（給教練/用戶建立課程時用）
+  // 獲取場地列表
   getVenues: async () => {
-    const res = await api.get('/api/venues');
+    const res = await api.get('/venues');
     return res.data;
   },
 
-  // 新增：建立 recurring 課程
+  // 創建重複課程會話
   createRecurringSessions: async (data) => {
-    const res = await api.post('/api/class-sessions/recurring', data);
+    const res = await api.post('/class-sessions/recurring', data);
     return res.data;
   },
 
-  // 新增：court 多日期衝突檢查
+  // 檢查場地可用性
   checkCourtAvailability: async (courtId, dateTimes) => {
-    const res = await api.post('/api/class-sessions/check-court-availability', { courtId, dateTimes });
+    const res = await api.post('/class-sessions/check-court-availability', { courtId, dateTimes });
     return res.data;
   },
 
-  // 新增：更新課程
-  updateClassSession: async (sessionId, data) => {
-    const res = await api.put(`/api/class-sessions/${sessionId}`, data);
+  // 更新課程會話
+  updateSession: async (sessionId, data) => {
+    const res = await api.put(`/class-sessions/${sessionId}`, data);
     return res.data;
   },
 
-  // Fetch all available class sessions for users
-  getAllAvailableSessions: async (start, end) => {
-    const res = await api.get('/api/class-sessions/available', {
-      params: { start, end }
+  // 獲取可用的課程會話
+  getAvailableSessions: async (page = 0, size = 10, filters = {}) => {
+    const res = await api.get('/class-sessions/available', {
+      params: { page, size, ...filters }
     });
     return res.data;
   },
 
-  // Register for multiple sessions (group booking)
-  registerForMultipleSessions: async (sessionIds, paymentMethod) => {
-    const res = await api.post('/api/class-sessions/register-multi', {
+  // 批量註冊課程
+  registerMultipleSessions: async (sessionIds, userId) => {
+    const res = await api.post('/class-sessions/register-multi', {
       sessionIds,
-      paymentMethod
+      userId
     });
     return res.data;
   },
 
-  // 批量查詢課程詳情（for receipt）
-  getSessionDetailsBatch: async (sessionIds) => {
-    const res = await api.post('/api/class-sessions/details-batch', sessionIds);
+  // 獲取批量課程詳情
+  getBatchSessionDetails: async (sessionIds) => {
+    const res = await api.post('/class-sessions/details-batch', sessionIds);
     return res.data;
   },
 
+  // 獲取課程學生列表
   getSessionStudents: async (sessionId) => {
-    const res = await api.get(`/api/class-sessions/${sessionId}/students`);
+    const res = await api.get(`/class-sessions/${sessionId}/students`);
     return res.data;
   },
 
-  registerForSession: async (sessionId, userId) => {
-    const res = await api.post(`/api/class-sessions/${sessionId}/register`, userId);
+  // 註冊課程
+  registerSession: async (sessionId, userId) => {
+    const res = await api.post(`/class-sessions/${sessionId}/register`, userId);
     return res.data;
   },
 
-  // 查詢 recurring class 下所有 session 及其報名名單
-  getRecurringClassFullDetails: async (recurringGroupId) => {
-    const res = await api.get(`/api/class-sessions/recurring/${recurringGroupId}/full-details`);
+  // 獲取重複課程組詳情
+  getRecurringGroupDetails: async (recurringGroupId) => {
+    const res = await api.get(`/class-sessions/recurring/${recurringGroupId}/full-details`);
     return res.data;
   },
 
-  // 取消課程，支援 reason 和 force
-  cancelSession: async (sessionId, reason = '', force = false) => {
-    const params = [];
-    if (force) params.push('force=true');
-    if (reason) params.push('reason=' + encodeURIComponent(reason));
-    const query = params.length ? '?' + params.join('&') : '';
-    const res = await api.put(`/api/class-sessions/${sessionId}/cancel-registration${query}`);
+  // 取消課程註冊
+  cancelRegistration: async (sessionId, userId, reason = '') => {
+    const query = reason ? `?reason=${encodeURIComponent(reason)}` : '';
+    const res = await api.put(`/class-sessions/${sessionId}/cancel-registration${query}`);
     return res.data;
   },
 
-  // 查詢單一課程詳情，支援 replacement class allowedMemberIds
+  // 獲取課程詳情
   getSessionDetails: async (sessionId) => {
-    const res = await api.get(`/api/class-sessions/${sessionId}/details`);
+    const res = await api.get(`/class-sessions/${sessionId}/details`);
     return res.data;
   },
 
-  // 查詢教練的替補課程
-  getReplacementClasses: async (coachId) => {
-    const res = await api.get('/api/class-sessions/replacements', {
-      params: { coachId }
+  // 獲取替補課程
+  getReplacementSessions: async (filters = {}) => {
+    const res = await api.get('/class-sessions/replacements', {
+      params: filters
     });
     return res.data;
-  },
+  }
 };
+
 export default ClassSessionService; 
\ No newline at end of file
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/User.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.entity;\r\n\r\nimport jakarta.persistence.*;\r\nimport lombok.AllArgsConstructor;\r\nimport lombok.Data;\r\nimport lombok.NoArgsConstructor;\r\n\r\nimport java.time.LocalDate;\r\nimport java.time.LocalDateTime;\r\nimport java.util.List;\r\nimport java.util.UUID;\r\n\r\nimport com.fasterxml.jackson.annotation.JsonIgnore;\r\nimport com.fasterxml.jackson.annotation.JsonBackReference;\r\nimport com.fasterxml.jackson.annotation.JsonManagedReference;\r\n\r\n@Entity\r\n@Data\r\n@NoArgsConstructor\r\n@AllArgsConstructor\r\n@Table(name = \"user\")\r\npublic class User {\r\n\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Integer id;\r\n\r\n    @Column(nullable = false, unique = true)\r\n    private UUID uuid = UUID.randomUUID();\r\n\r\n    private String name;\r\n    private String gender;\r\n    private String email;\r\n    private String phone;\r\n\r\n    private LocalDate dob;\r\n\r\n    @Column(name = \"user_type\")\r\n    private String userType;\r\n\r\n    @Column(name = \"requested_user_type\")\r\n    private String requestedUserType;\r\n\r\n    private LocalDateTime createdAt = LocalDateTime.now();\r\n    private LocalDateTime updatedAt = LocalDateTime.now();\r\n\r\n    @Column(name = \"bookings_made\")\r\n    private int bookingsMade;\r\n\r\n    @Column(name = \"booking_hours\")\r\n    private double bookingHours;\r\n\r\n    @Column(name = \"sumos_joined\")\r\n    private int sumosJoined;\r\n\r\n    @Column(name = \"amount_spent\")\r\n    private double amountSpent;\r\n\r\n    @OneToOne(mappedBy = \"user\", cascade = CascadeType.ALL, fetch = FetchType.LAZY)\r\n    private Member member;\r\n\r\n    @OneToOne(mappedBy = \"user\", cascade = CascadeType.ALL, fetch = FetchType.EAGER)\r\n    private UserAccount userAccount;\r\n\r\n    public String getProfileImage() {\r\n        return (userAccount != null) ? userAccount.getProfileImage() : null;\r\n    }\r\n\r\n\r\n\r\n    @OneToMany(mappedBy = \"sender\", cascade = CascadeType.ALL, fetch = FetchType.LAZY)\r\n    private List<Message> sentMessages;\r\n\r\n    @OneToMany(mappedBy = \"receiver\", cascade = CascadeType.ALL, fetch = FetchType.LAZY)\r\n    private List<Message> receivedMessages;\r\n\r\n    @OneToMany(mappedBy = \"coach\", cascade = CascadeType.ALL)\r\n    @JsonIgnore // 或 @JsonBackReference\r\n    private List<ClassSession> coachSessions;\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/User.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/User.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/User.java	(revision c178c1d9e80f6815b91226b2d10f391611dcb6b4)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/User.java	(date 1754953429753)
@@ -4,6 +4,7 @@
 import lombok.AllArgsConstructor;
 import lombok.Data;
 import lombok.NoArgsConstructor;
+import lombok.ToString;
 
 import java.time.LocalDate;
 import java.time.LocalDateTime;
@@ -57,9 +58,11 @@
     private double amountSpent;
 
     @OneToOne(mappedBy = "user", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
+    @ToString.Exclude
     private Member member;
 
     @OneToOne(mappedBy = "user", cascade = CascadeType.ALL, fetch = FetchType.EAGER)
+    @ToString.Exclude
     private UserAccount userAccount;
 
     public String getProfileImage() {
@@ -69,12 +72,15 @@
 
 
     @OneToMany(mappedBy = "sender", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
+    @ToString.Exclude
     private List<Message> sentMessages;
 
     @OneToMany(mappedBy = "receiver", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
+    @ToString.Exclude
     private List<Message> receivedMessages;
 
     @OneToMany(mappedBy = "coach", cascade = CascadeType.ALL)
     @JsonIgnore // 或 @JsonBackReference
+    @ToString.Exclude
     private List<ClassSession> coachSessions;
 }
\ No newline at end of file
Index: pickleball-frontend/src/service/FriendlyMatchService.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import api from './api';\r\n\r\n// Get all open matches\r\nexport async function getOpenMatches() {\r\n  const res = await api.get('/friendly-matches/open');\r\n  return res.data;\r\n}\r\n\r\n// Create a new match (for organizer)\r\nexport async function createMatch(matchDetails, organizerId) {\r\n  const res = await api.post(`/matches?organizerId=${organizerId}`, matchDetails);\r\n  return res.data;\r\n}\r\n\r\n// Send join request (participant)\r\nexport async function joinMatch(matchId, memberId) {\r\n  const res = await api.post('/join-requests', { matchId, memberId });\r\n  return res.data;\r\n}\r\n\r\n// Cancel join request (participant)\r\nexport async function cancelJoin(requestId, memberId) {\r\n  const res = await api.delete(`/friendly-matches/requests/${requestId}`);\r\n  return res.data;\r\n}\r\n\r\n// Get match details (including status, participants, etc.)\r\nexport async function getMatch(matchId) {\r\n  const res = await api.get(`/matches/${matchId}`);\r\n  return res.data;\r\n}\r\n\r\n// Create a new friendly match (without booking)\r\nexport async function createFriendlyMatch(matchData) {\r\n  const res = await api.post('/api/friendly-matches/create', matchData);\r\n  return res.data;\r\n}\r\n\r\n// Get all invitations\r\nexport async function getInvitations() {\r\n  const res = await api.get('/api/friendly-matches/invitations');\r\n  return res.data;\r\n}\r\n\r\n// Join an invitation\r\nexport async function joinInvitation(matchId) {\r\n  const res = await api.post(`/api/friendly-matches/invitation/${matchId}/join`);\r\n  return res.data;\r\n}\r\n\r\n// Create invitation from booking\r\nexport async function createInvitation(invitationData, bookingId) {\r\n  const res = await api.post('/api/friendly-matches/invitation', invitationData, {\r\n    params: { bookingId }\r\n  });\r\n  return res.data;\r\n} 
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball-frontend/src/service/FriendlyMatchService.js b/pickleball-frontend/src/service/FriendlyMatchService.js
--- a/pickleball-frontend/src/service/FriendlyMatchService.js	(revision c178c1d9e80f6815b91226b2d10f391611dcb6b4)
+++ b/pickleball-frontend/src/service/FriendlyMatchService.js	(date 1754898551012)
@@ -1,57 +1,64 @@
-import api from './api';
-
-// Get all open matches
-export async function getOpenMatches() {
-  const res = await api.get('/friendly-matches/open');
-  return res.data;
-}
+import api from '../api/axiosConfig';
 
-// Create a new match (for organizer)
-export async function createMatch(matchDetails, organizerId) {
-  const res = await api.post(`/matches?organizerId=${organizerId}`, matchDetails);
-  return res.data;
-}
-
-// Send join request (participant)
-export async function joinMatch(matchId, memberId) {
-  const res = await api.post('/join-requests', { matchId, memberId });
-  return res.data;
-}
-
-// Cancel join request (participant)
-export async function cancelJoin(requestId, memberId) {
-  const res = await api.delete(`/friendly-matches/requests/${requestId}`);
-  return res.data;
-}
+const FriendlyMatchService = {
+  // 創建友好比賽
+  createMatch: async (matchData) => {
+    try {
+      const res = await api.post('/friendly-matches/create', matchData);
+      return res.data;
+    } catch (error) {
+      console.error('Error creating friendly match:', error);
+      throw error;
+    }
+  },
 
-// Get match details (including status, participants, etc.)
-export async function getMatch(matchId) {
-  const res = await api.get(`/matches/${matchId}`);
-  return res.data;
-}
+  // 獲取邀請列表
+  getInvitations: async () => {
+    try {
+      const res = await api.get('/friendly-matches/invitations');
+      return res.data;
+    } catch (error) {
+      console.error('Error fetching invitations:', error);
+      throw error;
+    }
+  },
 
-// Create a new friendly match (without booking)
-export async function createFriendlyMatch(matchData) {
-  const res = await api.post('/api/friendly-matches/create', matchData);
-  return res.data;
-}
+  // 加入比賽
+  joinMatch: async (matchId) => {
+    try {
+      const res = await api.post(`/friendly-matches/invitation/${matchId}/join`);
+      return res.data;
+    } catch (error) {
+      console.error('Error joining match:', error);
+      throw error;
+    }
+  },
 
-// Get all invitations
-export async function getInvitations() {
-  const res = await api.get('/api/friendly-matches/invitations');
-  return res.data;
-}
+  // 發送邀請
+  sendInvitation: async (invitationData) => {
+    try {
+      const res = await api.post('/friendly-matches/invitation', invitationData, {
+        headers: {
+          'Content-Type': 'application/json'
+        }
+      });
+      return res.data;
+    } catch (error) {
+      console.error('Error sending invitation:', error);
+      throw error;
+    }
+  },
 
-// Join an invitation
-export async function joinInvitation(matchId) {
-  const res = await api.post(`/api/friendly-matches/invitation/${matchId}/join`);
-  return res.data;
-}
+  // 取消加入請求
+  cancelJoin: async (requestId, memberId) => {
+    try {
+      const res = await api.delete(`/friendly-matches/requests/${requestId}`);
+      return res.data;
+    } catch (error) {
+      console.error('Error canceling join request:', error);
+      throw error;
+    }
+  }
+};
 
-// Create invitation from booking
-export async function createInvitation(invitationData, bookingId) {
-  const res = await api.post('/api/friendly-matches/invitation', invitationData, {
-    params: { bookingId }
-  });
-  return res.data;
-} 
\ No newline at end of file
+export default FriendlyMatchService; 
\ No newline at end of file
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/WalletTransaction.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.entity;\r\n\r\nimport jakarta.persistence.*;\r\nimport lombok.Data;\r\nimport java.time.LocalDateTime;\r\n\r\n@Entity\r\n@Data\r\n@Table(name = \"wallet_transaction\")\r\npublic class WalletTransaction {\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Integer id;\r\n\r\n    @Column(name = \"wallet_id\", nullable = false)\r\n    private Integer walletId;\r\n\r\n    @Column(name = \"transaction_type\", length = 20, nullable = false)\r\n    private String transactionType;  // DEPOSIT, WITHDRAWAL, FREEZE, UNFREEZE, REFUND\r\n\r\n    @Column(nullable = false, columnDefinition = \"DECIMAL(10,2)\")\r\n    private double amount;\r\n\r\n    @Column(name = \"balance_before\", nullable = false, columnDefinition = \"DECIMAL(10,2)\")\r\n    private double balanceBefore;\r\n\r\n    @Column(name = \"balance_after\", nullable = false, columnDefinition = \"DECIMAL(10,2)\")\r\n    private double balanceAfter;\r\n\r\n    @Column(name = \"frozen_before\", nullable = false, columnDefinition = \"DECIMAL(10,2)\")\r\n    private double frozenBefore;\r\n\r\n    @Column(name = \"frozen_after\", nullable = false, columnDefinition = \"DECIMAL(10,2)\")\r\n    private double frozenAfter;\r\n\r\n    @Column(name = \"reference_type\", length = 20)\r\n    private String referenceType;  // PAYMENT, BOOKING, REFUND, ADMIN_ADJUSTMENT\r\n\r\n    @Column(name = \"reference_id\")\r\n    private Integer referenceId;\r\n\r\n    @Column(name = \"description\", length = 500)\r\n    private String description;\r\n\r\n    @Column(name = \"status\", length = 20, nullable = false)\r\n    private String status = \"COMPLETED\";  // PENDING, COMPLETED, FAILED, CANCELLED\r\n\r\n    @Column(name = \"created_at\", nullable = false)\r\n    private LocalDateTime createdAt;\r\n\r\n    @Column(name = \"processed_at\")\r\n    private LocalDateTime processedAt;\r\n\r\n    @ManyToOne(fetch = FetchType.LAZY)\r\n    @JoinColumn(name = \"wallet_id\", insertable = false, updatable = false)\r\n    private Wallet wallet;\r\n\r\n    @PrePersist\r\n    protected void onCreate() {\r\n        createdAt = LocalDateTime.now();\r\n        if (status.equals(\"COMPLETED\")) {\r\n            processedAt = LocalDateTime.now();\r\n        }\r\n    }\r\n} 
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/WalletTransaction.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/WalletTransaction.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/WalletTransaction.java	(revision c178c1d9e80f6815b91226b2d10f391611dcb6b4)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/WalletTransaction.java	(date 1754953331978)
@@ -2,6 +2,7 @@
 
 import jakarta.persistence.*;
 import lombok.Data;
+import lombok.ToString;
 import java.time.LocalDateTime;
 
 @Entity
@@ -53,6 +54,7 @@
 
     @ManyToOne(fetch = FetchType.LAZY)
     @JoinColumn(name = "wallet_id", insertable = false, updatable = false)
+    @ToString.Exclude
     private Wallet wallet;
 
     @PrePersist
Index: pickleball-frontend/src/service/CourtService.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/**\r\n * CourtService.js\r\n * \r\n * Centralized service for interacting with Court-related endpoints.\r\n * Uses a reusable axios instance with interceptors for auth.\r\n */\r\n\r\n// Import the centralized api instance\r\nimport api from './api';\r\n\r\n// -----------------------------\r\n// CourtService Methods\r\n// -----------------------------\r\n\r\nconst CourtService = {\r\n  /**\r\n   * Fetch all courts for the member view.\r\n   * Automatically attaches auth header via axios instance.\r\n   * @returns {Promise<Array>} List of court objects\r\n   */\r\n  getAllCourts: async () => {\r\n    try {\r\n      const response = await api.get('/courts');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('[CourtService] Error in getAllCourts:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Fetch details for a single court by ID.\r\n   * @param {string|number} id - The court ID\r\n   * @returns {Promise<Object>} Court details\r\n   */\r\n  getCourtById: async (id) => {\r\n    try {\r\n      const response = await api.get(`/courts/${id}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('[CourtService] Error in getCourtById:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Fetch courts that the current user has booked.\r\n   * @returns {Promise<Array>} List of court objects\r\n   */\r\n  getBookedCourts: async () => {\r\n    try {\r\n      const response = await api.get('/courts/booked');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('[CourtService] Error in getBookedCourts:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Fetch available courts for a given date and time range.\r\n   * @param {string} date - yyyy-MM-dd\r\n   * @param {string} startTime - HH:mm\r\n   * @param {string} endTime - HH:mm\r\n   * @returns {Promise<Array>} List of available court objects\r\n   */\r\n  getAvailableCourts: async (date, startTime, endTime) => {\r\n    try {\r\n      const response = await api.get('/courts/available', {\r\n        params: { date, startTime, endTime }\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('[CourtService] Error in getAvailableCourts:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Fetch booked dates for a venue.\r\n   * @param {number} venueId - The venue ID\r\n   * @param {string} startDate - yyyy-MM-dd\r\n   * @param {string} endDate - yyyy-MM-dd (optional)\r\n   * @param {string} state - State filter (optional)\r\n   * @returns {Promise<Array>} List of booked dates\r\n   */\r\n  getBookedDates: async (venueId, startDate, endDate, state) => {\r\n    try {\r\n      const params = { venueId, startDate };\r\n      if (endDate) params.endDate = endDate;\r\n      if (state) params.state = state;\r\n      \r\n      const response = await api.get(`/admin/venues/public/${venueId}/booked-dates`, { params });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('[CourtService] Error in getBookedDates:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Fetch courts by their IDs.\r\n   * @param {Array<number>} courtIds - Array of court IDs\r\n   * @returns {Promise<Array>} List of court objects\r\n   */\r\n  getCourtsByIds: async (courtIds) => {\r\n    try {\r\n      // 由於後端沒有批量獲取 court 的端點，我們使用現有的 getAllCourts 然後過濾\r\n      const response = await api.get('/courts');\r\n      const allCourts = response.data;\r\n      return allCourts.filter(court => courtIds.includes(court.id));\r\n    } catch (error) {\r\n      console.error('[CourtService] Error in getCourtsByIds:', error);\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * 上传球场图片\r\n * @param {number} courtId\r\n * @param {File} file\r\n * @returns {Promise<Object>}\r\n */\r\nexport const uploadCourtImage = async (courtId, file) => {\r\n  const formData = new FormData();\r\n  formData.append('file', file);\r\n  \r\n  const response = await api.post(`/admin/courts/${courtId}/images`, formData, {\r\n    headers: { 'Content-Type': 'multipart/form-data' }\r\n  });\r\n  return response.data;\r\n};\r\n\r\n/**\r\n * 获取球场图片\r\n * @param {number} courtId\r\n * @returns {Promise<Array>}\r\n */\r\nexport const getCourtImages = async (courtId) => {\r\n  const response = await api.get(`/admin/courts/${courtId}/images`);\r\n  return response.data;\r\n};\r\n\r\nexport const getCourtImagesPublic = async (courtId) => {\r\n  const response = await api.get(`/admin/courts/public/${courtId}/images`);\r\n  return response.data;\r\n};\r\n\r\n\r\nexport default CourtService;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball-frontend/src/service/CourtService.js b/pickleball-frontend/src/service/CourtService.js
--- a/pickleball-frontend/src/service/CourtService.js	(revision c178c1d9e80f6815b91226b2d10f391611dcb6b4)
+++ b/pickleball-frontend/src/service/CourtService.js	(date 1754950688220)
@@ -86,11 +86,12 @@
    */
   getBookedDates: async (venueId, startDate, endDate, state) => {
     try {
-      const params = { venueId, startDate };
+      const params = {};
+      if (startDate) params.startDate = startDate;
       if (endDate) params.endDate = endDate;
-      if (state) params.state = state;
       
       const response = await api.get(`/admin/venues/public/${venueId}/booked-dates`, { params });
+      console.log('API Response for booked dates:', response.data); // Debug log
       return response.data;
     } catch (error) {
       console.error('[CourtService] Error in getBookedDates:', error);
Index: pickleball-frontend/src/context/AuthContext.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { createContext, useState, useContext, useEffect } from 'react';\r\nimport { jwtDecode } from 'jwt-decode';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [authToken, setAuthToken] = useState(() => {\r\n    // Check for both regular user token and admin token\r\n    const userToken = localStorage.getItem('authToken');\r\n    const adminToken = localStorage.getItem('adminToken');\r\n    \r\n    console.log('AuthContext initialization:', {\r\n      userToken: !!userToken,\r\n      adminToken: !!adminToken,\r\n      adminUsername: localStorage.getItem('adminUsername')\r\n    });\r\n    \r\n    // If we have an admin token, use it\r\n    if (adminToken) {\r\n      console.log('Using admin token for initialization');\r\n      return adminToken;\r\n    }\r\n    \r\n    // Otherwise use user token\r\n    console.log('Using user token for initialization');\r\n    return userToken || null;\r\n  });\r\n  \r\n  const [currentUser, setCurrentUser] = useState(() => {\r\n    // Try to restore currentUser from localStorage on initial load\r\n    const savedUser = localStorage.getItem('currentUser');\r\n    if (savedUser) {\r\n      try {\r\n        return JSON.parse(savedUser);\r\n      } catch (error) {\r\n        console.error('Failed to parse saved user:', error);\r\n        localStorage.removeItem('currentUser');\r\n      }\r\n    }\r\n    return null;\r\n  });\r\n\r\n  // Decode token and set current user on initial load and when token changes\r\n  useEffect(() => {\r\n    console.log('AuthContext useEffect triggered with authToken:', !!authToken);\r\n    \r\n    if (authToken) {\r\n      try {\r\n        // Decode JWT to get user information\r\n        const decodedToken = jwtDecode(authToken);\r\n        console.log('Decoded JWT token:', decodedToken); // 調試日誌\r\n        \r\n        // Extract user information from token\r\n        const role = decodedToken.role || '';\r\n        // Remove \"ROLE_\" prefix if present\r\n        const cleanRole = role.startsWith('ROLE_') ? role.substring(5) : role;\r\n        \r\n        const user = {\r\n          id: decodedToken.userId || decodedToken.sub, // 優先使用 userId，如果沒有則使用 sub\r\n          username: decodedToken.username || decodedToken.sub, // 優先使用 username，如果沒有則使用 sub\r\n          email: decodedToken.email,\r\n          role: cleanRole,\r\n          userType: decodedToken.userType || cleanRole, // 優先使用 userType，如果沒有則使用 role\r\n          token: authToken\r\n        };\r\n        \r\n        console.log('Created user object:', user); // 調試日誌\r\n        setCurrentUser(user);\r\n        localStorage.setItem('currentUser', JSON.stringify(user));\r\n      } catch (error) {\r\n        console.error('Failed to decode token:', error);\r\n        // Don't logout immediately on decode error, try to restore from localStorage\r\n        const savedUser = localStorage.getItem('currentUser');\r\n        if (savedUser) {\r\n          try {\r\n            const parsedUser = JSON.parse(savedUser);\r\n            setCurrentUser(parsedUser);\r\n            console.log('Restored user from localStorage:', parsedUser);\r\n          } catch (parseError) {\r\n            console.error('Failed to parse saved user:', parseError);\r\n            logout();\r\n          }\r\n        } else {\r\n          console.log('No saved user found, logging out');\r\n          logout();\r\n        }\r\n      }\r\n    } else {\r\n      console.log('No authToken, setting currentUser to null');\r\n      setCurrentUser(null);\r\n    }\r\n  }, [authToken]);\r\n\r\n  const login = (token, isAdmin = false) => {\r\n    if (isAdmin) {\r\n      localStorage.setItem('adminToken', token);\r\n    } else {\r\n      localStorage.setItem('authToken', token);\r\n    }\r\n    setAuthToken(token);\r\n  };\r\n\r\n  const logout = () => {\r\n    // Clear all authentication data\r\n    localStorage.removeItem('authToken');\r\n    localStorage.removeItem('adminToken');\r\n    localStorage.removeItem('adminUsername');\r\n    localStorage.removeItem('currentUser');\r\n    \r\n    // Clear state\r\n    setAuthToken(null);\r\n    setCurrentUser(null);\r\n    \r\n    console.log('Logged out - cleared all auth data');\r\n  };\r\n\r\n  // Check if user is authenticated\r\n  const isAuthenticated = () => {\r\n    return authToken !== null;\r\n  };\r\n\r\n  // Check if user has a specific role\r\n  const hasRole = (role) => {\r\n    if (!currentUser) return false;\r\n    // 檢查 role 和 userType\r\n    return currentUser.role === role || currentUser.userType === role;\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ \r\n      authToken, \r\n      currentUser,\r\n      login, \r\n      logout,\r\n      isAuthenticated,\r\n      hasRole\r\n    }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (context === undefined) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball-frontend/src/context/AuthContext.js b/pickleball-frontend/src/context/AuthContext.js
--- a/pickleball-frontend/src/context/AuthContext.js	(revision c178c1d9e80f6815b91226b2d10f391611dcb6b4)
+++ b/pickleball-frontend/src/context/AuthContext.js	(date 1754911554970)
@@ -9,20 +9,12 @@
     const userToken = localStorage.getItem('authToken');
     const adminToken = localStorage.getItem('adminToken');
     
-    console.log('AuthContext initialization:', {
-      userToken: !!userToken,
-      adminToken: !!adminToken,
-      adminUsername: localStorage.getItem('adminUsername')
-    });
-    
     // If we have an admin token, use it
     if (adminToken) {
-      console.log('Using admin token for initialization');
       return adminToken;
     }
     
     // Otherwise use user token
-    console.log('Using user token for initialization');
     return userToken || null;
   });
   
@@ -42,13 +34,10 @@
 
   // Decode token and set current user on initial load and when token changes
   useEffect(() => {
-    console.log('AuthContext useEffect triggered with authToken:', !!authToken);
-    
     if (authToken) {
       try {
         // Decode JWT to get user information
         const decodedToken = jwtDecode(authToken);
-        console.log('Decoded JWT token:', decodedToken); // 調試日誌
         
         // Extract user information from token
         const role = decodedToken.role || '';
@@ -59,35 +48,22 @@
           id: decodedToken.userId || decodedToken.sub, // 優先使用 userId，如果沒有則使用 sub
           username: decodedToken.username || decodedToken.sub, // 優先使用 username，如果沒有則使用 sub
           email: decodedToken.email,
+          userType: decodedToken.userType || cleanRole, // 優先使用 userType，如果沒有則使用清理後的 role
           role: cleanRole,
-          userType: decodedToken.userType || cleanRole, // 優先使用 userType，如果沒有則使用 role
-          token: authToken
+          isAdmin: decodedToken.isAdmin || false
         };
         
-        console.log('Created user object:', user); // 調試日誌
         setCurrentUser(user);
+        // Save user info to localStorage for other components
         localStorage.setItem('currentUser', JSON.stringify(user));
       } catch (error) {
-        console.error('Failed to decode token:', error);
-        // Don't logout immediately on decode error, try to restore from localStorage
-        const savedUser = localStorage.getItem('currentUser');
-        if (savedUser) {
-          try {
-            const parsedUser = JSON.parse(savedUser);
-            setCurrentUser(parsedUser);
-            console.log('Restored user from localStorage:', parsedUser);
-          } catch (parseError) {
-            console.error('Failed to parse saved user:', parseError);
-            logout();
-          }
-        } else {
-          console.log('No saved user found, logging out');
-          logout();
-        }
+        console.error('Error decoding token:', error);
+        setCurrentUser(null);
+        localStorage.removeItem('currentUser');
       }
     } else {
-      console.log('No authToken, setting currentUser to null');
       setCurrentUser(null);
+      localStorage.removeItem('currentUser');
     }
   }, [authToken]);
 
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/SlotController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.controller;\r\n\r\nimport com.pickleball_backend.pickleball.dto.SlotResponseDto;\r\nimport com.pickleball_backend.pickleball.service.SlotService;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.springframework.format.annotation.DateTimeFormat;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.security.access.prepost.PreAuthorize;\r\nimport org.springframework.web.bind.annotation.*;\r\nimport java.time.LocalDate;\r\nimport java.util.List;\r\n\r\n@RestController\r\n@RequestMapping(\"/api/member/slots\")\r\n@RequiredArgsConstructor\r\npublic class SlotController {\r\n\r\n    private final SlotService slotService;\r\n\r\n    @GetMapping\r\n    @PreAuthorize(\"hasAuthority('ROLE_ADMIN')\")\r\n    public ResponseEntity<?> getSlots(\r\n            @RequestParam(name = \"courtids\", required = false) List<Integer> courtIds,\r\n            @RequestParam(name = \"startDate\", required = false)\r\n            @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate startDate,\r\n            @RequestParam(name = \"endDate\", required = false)\r\n            @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate endDate) {\r\n\r\n        // Validation - both dates required\r\n        if (startDate == null || endDate == null) {\r\n            return ResponseEntity.badRequest().body(\"Both startDate and endDate are required\");\r\n        }\r\n\r\n        // Validation - start date must be before end date\r\n        if (startDate.isAfter(endDate)) {\r\n            return ResponseEntity.badRequest().body(\"Start date must be before end date\");\r\n        }\r\n\r\n        // Service call - already implemented correctly\r\n        List<SlotResponseDto> slots = slotService.getSlots(courtIds, startDate, endDate);\r\n\r\n        return !slots.isEmpty()\r\n                ? ResponseEntity.ok(slots)\r\n                : ResponseEntity.ok(\"No slots found for selected date range/courts\");\r\n    }\r\n\r\n    @GetMapping(\"/available\")\r\n    @PreAuthorize(\"hasRole('USER')\")\r\n    public ResponseEntity<List<SlotResponseDto>> getAvailableSlots(\r\n            @RequestParam Integer courtId) {\r\n\r\n        List<SlotResponseDto> slots = slotService.getAvailableSlotsByCourt(courtId);\r\n        return ResponseEntity.ok(slots);\r\n    }\r\n\r\n    @GetMapping(\"/all\")\r\n    public ResponseEntity<List<SlotResponseDto>> getAllSlots(\r\n            @RequestParam Integer courtId,\r\n            @RequestParam(required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate startDate,\r\n            @RequestParam(required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate endDate\r\n    ) {\r\n        LocalDate start = startDate != null ? startDate : LocalDate.now();\r\n        LocalDate end = endDate != null ? endDate : start.plusMonths(3);\r\n        List<SlotResponseDto> slots = slotService.getAllSlotsByCourt(courtId, start, end);\r\n        return ResponseEntity.ok(slots);\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/SlotController.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/SlotController.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/SlotController.java	(revision c178c1d9e80f6815b91226b2d10f391611dcb6b4)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/SlotController.java	(date 1754947853266)
@@ -9,6 +9,8 @@
 import org.springframework.web.bind.annotation.*;
 import java.time.LocalDate;
 import java.util.List;
+import java.util.Map;
+import java.util.stream.Collectors;
 
 @RestController
 @RequestMapping("/api/member/slots")
@@ -45,7 +47,7 @@
     }
 
     @GetMapping("/available")
-    @PreAuthorize("hasRole('USER')")
+    @PreAuthorize("hasAnyRole('USER', 'EVENTORGANIZER')")
     public ResponseEntity<List<SlotResponseDto>> getAvailableSlots(
             @RequestParam Integer courtId) {
 
@@ -53,7 +55,33 @@
         return ResponseEntity.ok(slots);
     }
 
+    @GetMapping("/available-range")
+    @PreAuthorize("hasAnyRole('USER', 'EVENTORGANIZER')")
+    public ResponseEntity<List<SlotResponseDto>> getAvailableSlotsForRange(
+            @RequestParam Integer courtId,
+            @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate startDate,
+            @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate endDate) {
+
+        List<SlotResponseDto> slots = slotService.getAvailableSlotsByCourtAndDateRange(courtId, startDate, endDate);
+        return ResponseEntity.ok(slots);
+    }
+
+    @GetMapping("/available/grouped")
+    @PreAuthorize("hasAnyRole('USER', 'EVENTORGANIZER')")
+    public ResponseEntity<Map<String, List<SlotResponseDto>>> getAvailableSlotsGrouped(
+            @RequestParam Integer courtId) {
+
+        List<SlotResponseDto> slots = slotService.getAvailableSlotsByCourt(courtId);
+        
+        // Group slots by date
+        Map<String, List<SlotResponseDto>> groupedSlots = slots.stream()
+            .collect(Collectors.groupingBy(slot -> slot.getDate().toString()));
+        
+        return ResponseEntity.ok(groupedSlots);
+    }
+
     @GetMapping("/all")
+    @PreAuthorize("hasAnyRole('USER', 'EVENTORGANIZER')")
     public ResponseEntity<List<SlotResponseDto>> getAllSlots(
             @RequestParam Integer courtId,
             @RequestParam(required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate startDate,
