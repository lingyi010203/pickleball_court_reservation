Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/CoachScheduleServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/CoachScheduleServiceImpl.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/CoachScheduleServiceImpl.java
deleted file mode 100644
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/CoachScheduleServiceImpl.java	(revision 97abd609899a67b781b8ace8e91358a782fc5acd)
+++ /dev/null	(revision 97abd609899a67b781b8ace8e91358a782fc5acd)
@@ -1,109 +0,0 @@
-package com.pickleball_backend.pickleball.service;
-
-import com.pickleball_backend.pickleball.dto.ClassSessionDto;
-import com.pickleball_backend.pickleball.entity.*;
-import com.pickleball_backend.pickleball.exception.*;
-import com.pickleball_backend.pickleball.repository.*;
-import lombok.RequiredArgsConstructor;
-import org.springframework.stereotype.Service;
-import org.springframework.transaction.annotation.Transactional;
-
-import java.time.LocalDate;
-import java.time.LocalDateTime;
-import java.util.List;
-
-@Service
-@RequiredArgsConstructor
-public class CoachScheduleServiceImpl implements CoachScheduleService {
-    private final ClassSessionRepository sessionRepository;
-    private final CourtRepository courtRepository;
-    private final UserRepository userRepository;
-    private final EmailService emailService;
-
-    @Override
-    public List<ClassSession> getCoachSchedule(Integer coachId, LocalDate startDate, LocalDate endDate) {
-        return sessionRepository.findByCoachIdAndStartTimeBetween(
-                coachId,
-                startDate.atStartOfDay(),
-                endDate.atTime(23, 59)
-        );
-    }
-
-    @Override
-    @Transactional
-    public ClassSession createAvailability(Integer coachId, ClassSessionDto sessionDto) {
-        // Validate court exists
-        Court court = courtRepository.findById(sessionDto.getCourtId())
-                .orElseThrow(() -> new ResourceNotFoundException("Court", "id", sessionDto.getCourtId()));
-
-        // Validate coach exists
-        User coach = userRepository.findById(coachId)
-                .orElseThrow(() -> new ResourceNotFoundException("User", "id", coachId));
-
-        // Check for time conflicts
-        if (sessionRepository.existsByCourtIdAndStartTimeBetweenAndStatusNot(
-                sessionDto.getCourtId(),
-                sessionDto.getStartTime(),
-                sessionDto.getEndTime(),
-                "CANCELLED"
-        )) {
-            throw new ConflictException("Time slot conflicts with existing session");
-        }
-
-        ClassSession session = new ClassSession();
-        session.setCoach(coach);
-        session.setCourt(court);
-        session.setStartTime(sessionDto.getStartTime());
-        session.setEndTime(sessionDto.getEndTime());
-        session.setStatus("AVAILABLE");
-
-        return sessionRepository.save(session);
-    }
-
-    @Override
-    @Transactional
-    public ClassSession updateSession(Integer coachId, Integer sessionId, ClassSessionDto sessionDto) { // Add coachId
-        ClassSession session = sessionRepository.findById(sessionId)
-                .orElseThrow(() -> new ResourceNotFoundException("ClassSession", "id", sessionId));
-
-        // Verify coach owns the session
-        if (!session.getCoach().getId().equals(coachId)) {
-            throw new UnauthorizedException("You don't own this session");
-        }
-
-        // Only allow updates to available sessions
-        if (!"AVAILABLE".equals(session.getStatus())) {
-            throw new ValidationException("Only available sessions can be modified");
-        }
-
-        session.setStartTime(sessionDto.getStartTime());
-        session.setEndTime(sessionDto.getEndTime());
-        session.setNote(sessionDto.getNote());
-
-        return sessionRepository.save(session);
-    }
-
-    @Override
-    @Transactional
-    public void removeSession(Integer coachId, Integer sessionId) { // Add coachId
-        ClassSession session = sessionRepository.findById(sessionId)
-                .orElseThrow(() -> new ResourceNotFoundException("ClassSession", "id", sessionId));
-
-        // Verify coach owns the session
-        if (!session.getCoach().getId().equals(coachId)) {
-            throw new UnauthorizedException("You don't own this session");
-        }
-
-        if ("BOOKED".equals(session.getStatus())) {
-            // Notify player about cancellation
-            emailService.sendSessionCancellation(
-                    session.getPlayer().getEmail(),
-                    session.getStartTime(),
-                    session.getCoach().getName()
-            );
-            // Refund logic would go here
-        }
-
-        sessionRepository.delete(session);
-    }
-}
\ No newline at end of file
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/CoachScheduleService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/CoachScheduleService.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/CoachScheduleService.java
deleted file mode 100644
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/CoachScheduleService.java	(revision 97abd609899a67b781b8ace8e91358a782fc5acd)
+++ /dev/null	(revision 97abd609899a67b781b8ace8e91358a782fc5acd)
@@ -1,13 +0,0 @@
-package com.pickleball_backend.pickleball.service;
-
-import com.pickleball_backend.pickleball.dto.ClassSessionDto;
-import com.pickleball_backend.pickleball.entity.ClassSession;
-import java.time.LocalDate;
-import java.util.List;
-
-public interface CoachScheduleService {
-    List<ClassSession> getCoachSchedule(Integer coachId, LocalDate startDate, LocalDate endDate);
-    ClassSession createAvailability(Integer coachId, ClassSessionDto sessionDto);
-    ClassSession updateSession(Integer coachId, Integer sessionId, ClassSessionDto sessionDto);
-    void removeSession(Integer coachId, Integer sessionId);
-}
\ No newline at end of file
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/CoachScheduleController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/CoachScheduleController.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/CoachScheduleController.java
deleted file mode 100644
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/CoachScheduleController.java	(revision 97abd609899a67b781b8ace8e91358a782fc5acd)
+++ /dev/null	(revision 97abd609899a67b781b8ace8e91358a782fc5acd)
@@ -1,70 +0,0 @@
-package com.pickleball_backend.pickleball.controller;
-
-import com.pickleball_backend.pickleball.dto.CoachSlotDto;
-import com.pickleball_backend.pickleball.entity.ClassSession;
-import com.pickleball_backend.pickleball.entity.Court;
-import com.pickleball_backend.pickleball.service.CoachCourtService;
-import org.springframework.http.HttpStatus;
-import org.springframework.http.ResponseEntity;
-import org.springframework.web.bind.annotation.*;
-
-import java.time.LocalDateTime;
-import java.util.List;
-
-@RestController
-@RequestMapping("/api/coach/schedule")
-public class CoachScheduleController {
-
-    private final CoachCourtService coachCourtService;
-
-    public CoachScheduleController(CoachCourtService coachCourtService) {
-        this.coachCourtService = coachCourtService;
-    }
-
-    @GetMapping("/courts")
-    public ResponseEntity<List<Court>> getAvailableCourtsForCoach(@RequestParam Integer coachId) {
-        List<Court> courts = coachCourtService.getAvailableCourtsForCoach(coachId);
-        return ResponseEntity.ok(courts);
-    }
-
-    @PostMapping("/slots")
-    public ResponseEntity<ClassSession> addAvailabilitySlot(
-            @RequestParam Integer coachId,
-            @RequestBody CoachSlotDto slotDto) {
-        ClassSession newSlot = coachCourtService.createCoachSlot(coachId, slotDto);
-        return ResponseEntity.status(HttpStatus.CREATED).body(newSlot);
-    }
-
-    @PutMapping("/slots/{slotId}")
-    public ResponseEntity<Void> updateAvailabilitySlot(
-            @PathVariable Integer slotId,
-            @RequestParam Integer coachId,
-            @RequestBody CoachSlotDto slotDto) {
-        coachCourtService.updateCoachSlot(coachId, slotId, slotDto);
-        return ResponseEntity.noContent().build();
-    }
-
-    @DeleteMapping("/slots/{slotId}")
-    public ResponseEntity<Void> removeAvailabilitySlot(
-            @PathVariable Integer slotId,
-            @RequestParam Integer coachId,
-            @RequestParam(required = false, defaultValue = "false") boolean forceRemove) {
-        coachCourtService.removeCoachSlot(coachId, slotId, forceRemove);
-        return ResponseEntity.noContent().build();
-    }
-
-    @GetMapping("/coach/{coachId}/schedule")
-    public List<ClassSession> getCoachSchedule(
-            @PathVariable Integer coachId,
-            @RequestParam LocalDateTime from,
-            @RequestParam LocalDateTime to) {
-        return coachCourtService.findScheduleByCoachIdAndPeriod(coachId, from, to);
-    }
-
-    @GetMapping("/coach/{coachId}/court/{courtId}/available-slots")
-    public List<ClassSession> getAvailableSlotsByCoachAndCourt(
-            @PathVariable Integer coachId,
-            @PathVariable Integer courtId) {
-        return coachCourtService.findAvailableSlotsByCoachAndCourt(coachId, courtId);
-    }
-}
\ No newline at end of file
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/config/DataInitializer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/config/DataInitializer.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/config/DataInitializer.java
deleted file mode 100644
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/config/DataInitializer.java	(revision 97abd609899a67b781b8ace8e91358a782fc5acd)
+++ /dev/null	(revision 97abd609899a67b781b8ace8e91358a782fc5acd)
@@ -1,36 +0,0 @@
-/*package com.pickleball_backend.pickleball.config;
-
-import com.pickleball_backend.pickleball.entity.MembershipTier;
-import com.pickleball_backend.pickleball.repository.MembershipTierRepository;
-import lombok.RequiredArgsConstructor;
-import lombok.extern.slf4j.Slf4j;
-import org.springframework.boot.CommandLineRunner;
-import org.springframework.stereotype.Component;
-
-@Slf4j
-@Component
-@RequiredArgsConstructor
-public class DataInitializer implements CommandLineRunner {
-
-    private final MembershipTierRepository membershipTierRepository;
-
-    @Override
-    public void run(String... args) {
-        // Create default tiers if they don't exist
-        createTierIfNotExists("Bronze");
-        createTierIfNotExists("Silver");
-        createTierIfNotExists("Gold");
-    }
-
-    private void createTierIfNotExists(String tierName) {
-        if (membershipTierRepository.findByTierName(tierName).isEmpty()) {
-            MembershipTier tier = new MembershipTier();
-            tier.setTierName(tierName);  // Ensure this matches the field name
-            tier.setBenefits("Default benefits");
-            membershipTierRepository.save(tier);
-            log.info("Created tier: {}", tierName);
-        } else {
-            log.info("Tier already exists: {}", tierName);
-        }
-    }
-}*/
\ No newline at end of file
Index: pickleball-frontend/src/components/admin/AdminDashboard.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// AdminDashboard.jsx\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport {\r\n  Box, Grid, Paper, Typography, Avatar,\r\n  Button, List, ListItem, ListItemIcon,\r\n  ListItemText, Divider, Chip, Select,\r\n  MenuItem, InputLabel, FormControl,\r\n  Checkbox, FormControlLabel, TextField,\r\n  IconButton, Backdrop, CircularProgress,\r\n  Dialog, DialogTitle, DialogContent, Rating\r\n} from '@mui/material';\r\nimport {\r\n  Dashboard as DashboardIcon,\r\n  Event as BookingsIcon,\r\n  SportsTennis as CourtsIcon,\r\n  Settings as SettingsIcon,\r\n  Notifications as NotificationsIcon,\r\n  Search as SearchIcon,\r\n  Logout as LogoutIcon,\r\n  CardMembership as TierIcon,\r\n  People as PeopleIcon,\r\n  BarChart as BarChartIcon,\r\n  EventNote as EventNoteIcon,\r\n  AttachMoney as AttachMoneyIcon,\r\n  Analytics as AnalyticsIcon,\r\n  ArrowForward as ArrowForwardIcon,\r\n  PictureAsPdf as PictureAsPdfIcon,\r\n  TableChart as TableChartIcon,\r\n  GridOn as GridOnIcon,\r\n  FileDownload as FileDownloadIcon\r\n} from '@mui/icons-material';\r\nimport { useNavigate, useLocation, Outlet } from 'react-router-dom';\r\nimport UserService from '../../service/UserService';\r\nimport axios from 'axios';\r\nimport { Chart } from 'chart.js/auto';\r\nimport dayjs from 'dayjs';\r\nimport relativeTime from 'dayjs/plugin/relativeTime';\r\nimport ReportGenerator from './ReportGenerator';\r\nimport { useTheme, alpha } from '@mui/material/styles';\r\n\r\ndayjs.extend(relativeTime);\r\n\r\nconst AdminDashboard = () => {\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  const bookingChartRef = useRef(null);\r\n  const revenueChartRef = useRef(null);\r\n  const bookingChartInstance = useRef(null);\r\n  const revenueChartInstance = useRef(null);\r\n  const theme = useTheme();\r\n\r\n  const [adminUsername, setAdminUsername] = useState(UserService.getAdminUsername() || 'Admin');\r\n  const [adminProfile, setAdminProfile] = useState(null);\r\n  const [showUserMenu, setShowUserMenu] = useState(false);\r\n  const [currentView, setCurrentView] = useState('dashboard');\r\n  const [summaryLoading, setSummaryLoading] = useState(false);\r\n  const [bookingTrendsLoading, setBookingTrendsLoading] = useState(false);\r\n  const [revenueTrendsLoading, setRevenueTrendsLoading] = useState(false);\r\n  const [dashboardData, setDashboardData] = useState({\r\n    totalUsers: 0,\r\n    totalUsersChange: 0,\r\n    totalBookings: 0,\r\n    totalBookingsChange: 0,\r\n    totalRevenue: 0,\r\n    totalRevenueChange: 0,\r\n    averageRating: 0,\r\n    averageRatingChange: 0\r\n  });\r\n\r\n\r\n  const [bookingTimeRange, setBookingTimeRange] = useState('7d');\r\n  const [revenueTimeRange, setRevenueTimeRange] = useState('7d');\r\n  const [bookingTrends, setBookingTrends] = useState({ labels: [], data: [] });\r\n  const [revenueTrends, setRevenueTrends] = useState({ labels: [], data: [] });\r\n  const [recentActivity, setRecentActivity] = useState([]);\r\n  const [activityDialogOpen, setActivityDialogOpen] = useState(false);\r\n\r\n  // Fetch Booking Trends from backend\r\n  useEffect(() => {\r\n    if (getCurrentTab() === 'dashboard') {\r\n      setBookingTrendsLoading(true);\r\n      const fetchBookingTrends = async () => {\r\n        try {\r\n          const token = UserService.getAdminToken();\r\n          const res = await axios.get(\r\n            `http://localhost:8081/api/admin/dashboard/booking-trends?range=${bookingTimeRange}`,\r\n            { headers: { Authorization: `Bearer ${token}` } }\r\n          );\r\n          setBookingTrends(res.data);\r\n        } catch (err) {\r\n          setBookingTrends({ labels: [], data: [] });\r\n        } finally {\r\n          setBookingTrendsLoading(false);\r\n        }\r\n      };\r\n      fetchBookingTrends();\r\n    }\r\n  }, [bookingTimeRange, location.pathname]);\r\n\r\n  // Fetch Revenue Trends from backend\r\n  useEffect(() => {\r\n    if (getCurrentTab() === 'dashboard') {\r\n      setRevenueTrendsLoading(true);\r\n      const fetchRevenueTrends = async () => {\r\n        try {\r\n          const token = UserService.getAdminToken();\r\n          const res = await axios.get(\r\n            `http://localhost:8081/api/admin/dashboard/revenue-trends?range=${revenueTimeRange}`,\r\n            { headers: { Authorization: `Bearer ${token}` } }\r\n          );\r\n          setRevenueTrends(res.data);\r\n        } catch (err) {\r\n          setRevenueTrends({ labels: [], data: [] });\r\n        } finally {\r\n          setRevenueTrendsLoading(false);\r\n        }\r\n      };\r\n      fetchRevenueTrends();\r\n    }\r\n  }, [revenueTimeRange, location.pathname]);\r\n\r\n  // 拆分图表初始化函数\r\n  const initBookingChart = () => {\r\n    if (bookingChartInstance.current) {\r\n      bookingChartInstance.current.destroy();\r\n    }\r\n    const ctx = bookingChartRef.current;\r\n    if (!ctx) return;\r\n    // 动态设置 canvas 宽高为父容器实际像素宽高\r\n    const parent = ctx.parentElement;\r\n    if (parent) {\r\n      ctx.width = parent.offsetWidth;\r\n      ctx.height = parent.offsetHeight;\r\n    }\r\n    bookingChartInstance.current = new Chart(ctx, {\r\n      type: 'line',\r\n      data: {\r\n        labels: formatLabels(bookingTrends.labels, bookingTimeRange),\r\n        datasets: [\r\n          {\r\n            label: 'Bookings',\r\n            data: bookingTrends.data,\r\n            borderColor: theme.palette.primary.main,\r\n            backgroundColor: alpha(theme.palette.primary.main, 0.1),\r\n            fill: true,\r\n            tension: 0.4,\r\n          },\r\n        ],\r\n      },\r\n      options: {\r\n        responsive: true,\r\n        plugins: {\r\n          legend: { display: false },\r\n        },\r\n        scales: {\r\n          x: { grid: { display: false } },\r\n          y: { beginAtZero: true },\r\n        },\r\n      },\r\n    });\r\n  };\r\n\r\n  const initRevenueChart = () => {\r\n    if (revenueChartInstance.current) {\r\n      revenueChartInstance.current.destroy();\r\n    }\r\n    const ctx = revenueChartRef.current;\r\n    if (!ctx) return;\r\n    // 动态设置 canvas 宽高为父容器实际像素宽高\r\n    const parent = ctx.parentElement;\r\n    if (parent) {\r\n      ctx.width = parent.offsetWidth;\r\n      ctx.height = parent.offsetHeight;\r\n    }\r\n    revenueChartInstance.current = new Chart(ctx, {\r\n      type: 'line',\r\n      data: {\r\n        labels: formatLabels(revenueTrends.labels, revenueTimeRange),\r\n        datasets: [\r\n          {\r\n            label: 'Revenue',\r\n            data: revenueTrends.data,\r\n            borderColor: theme.palette.success.main,\r\n            backgroundColor: alpha(theme.palette.success.main, 0.1),\r\n            fill: true,\r\n            tension: 0.4,\r\n          },\r\n        ],\r\n      },\r\n      options: {\r\n        responsive: true,\r\n        plugins: {\r\n          legend: { display: false },\r\n        },\r\n        scales: {\r\n          x: { grid: { display: false } },\r\n          y: { beginAtZero: true },\r\n        },\r\n      },\r\n    });\r\n  };\r\n\r\n  // useEffect 分别监听\r\n  useEffect(() => {\r\n    initBookingChart();\r\n    // eslint-disable-next-line\r\n  }, [bookingTrends.labels, bookingTrends.data, bookingTimeRange]);\r\n\r\n  useEffect(() => {\r\n    initRevenueChart();\r\n    // eslint-disable-next-line\r\n  }, [revenueTrends.labels, revenueTrends.data, revenueTimeRange]);\r\n\r\n  useEffect(() => {\r\n    if (getCurrentTab() === 'dashboard') {\r\n      fetchDashboardData();\r\n    }\r\n  }, [location.pathname]);\r\n\r\n  const fetchDashboardData = async () => {\r\n    try {\r\n      setSummaryLoading(true);\r\n      const token = UserService.getAdminToken();\r\n      const response = await axios.get('http://localhost:8081/api/admin/dashboard/summary', {\r\n        headers: { Authorization: `Bearer ${token}` }\r\n      });\r\n      const data = response.data;\r\n      setDashboardData({\r\n        totalUsers: data.totalUsers,\r\n        totalUsersChange: data.totalUsersChange,\r\n        totalBookings: data.totalBookings,\r\n        totalBookingsChange: data.totalBookingsChange,\r\n        totalRevenue: data.totalRevenue,\r\n        totalRevenueChange: data.totalRevenueChange,\r\n        averageRating: data.averageRating,\r\n        averageRatingChange: data.averageRatingChange\r\n      });\r\n    } catch (error) {\r\n      console.error('Error fetching dashboard summary:', error);\r\n      setDashboardData(prev => ({\r\n        ...prev,\r\n        totalBookings: 0,\r\n        totalRevenue: 0\r\n      }));\r\n    } finally {\r\n      setSummaryLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchRecentActivity = async () => {\r\n    try {\r\n      const token = UserService.getAdminToken();\r\n      const res = await axios.get('http://localhost:8081/api/admin/dashboard/recent-activity', {\r\n        headers: { Authorization: `Bearer ${token}` }\r\n      });\r\n      setRecentActivity(res.data);\r\n    } catch (err) {\r\n      setRecentActivity([]);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (getCurrentTab() === 'dashboard') {\r\n      fetchRecentActivity();\r\n    }\r\n  }, [location.pathname]);\r\n\r\n  const destroyCharts = () => {\r\n    if (bookingChartInstance.current) {\r\n      bookingChartInstance.current.destroy();\r\n      bookingChartInstance.current = null;\r\n    }\r\n    if (revenueChartInstance.current) {\r\n      revenueChartInstance.current.destroy();\r\n      revenueChartInstance.current = null;\r\n    }\r\n  };\r\n\r\n  const getBookingLabels = (timeRange) => {\r\n    switch (timeRange) {\r\n      case 'week':\r\n        return ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\r\n      case 'month':\r\n        return ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'];\r\n      case 'year':\r\n        return ['Q1', 'Q2', 'Q3', 'Q4'];\r\n      default:\r\n        return ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'];\r\n    }\r\n  };\r\n\r\n  const getBookingData = (timeRange) => {\r\n    switch (timeRange) {\r\n      case 'week':\r\n        return [40, 55, 70, 65, 85, 60, 75];\r\n      case 'month':\r\n        return [65, 59, 80, 81, 56, 55];\r\n      case 'year':\r\n        return [1200, 1900, 1500, 2100];\r\n      default:\r\n        return [65, 59, 80, 81, 56, 55];\r\n    }\r\n  };\r\n\r\n  const getEngagementData = (timeRange) => {\r\n    switch (timeRange) {\r\n      case 'week':\r\n        return [120, 190, 300, 250, 200, 150, 100];\r\n      case 'month':\r\n        return [1200, 1900, 1500, 2100, 1800, 2200];\r\n      case 'year':\r\n        return [5000, 6000, 7000, 8000];\r\n      default:\r\n        return [120, 190, 300, 250, 200, 150, 100];\r\n    }\r\n  };\r\n\r\n  // 格式化 labels 工具函数\r\n  const formatLabels = (labels, range) => {\r\n    if (range === '7d' || range === '30d') {\r\n      // yyyy-MM-dd -> MM-dd\r\n      return labels.map(dateStr => {\r\n        const parts = dateStr.split('-');\r\n        if (parts.length === 3) {\r\n          return `${parts[1]}-${parts[2]}`;\r\n        }\r\n        return dateStr;\r\n      });\r\n    } else if (range === '12m') {\r\n      // yyyy-MM -> MMM yy\r\n      return labels.map(monthStr => {\r\n        const [year, month] = monthStr.split('-');\r\n        if (year && month) {\r\n          const d = new Date(Number(year), Number(month) - 1);\r\n          return d.toLocaleString('en-US', { month: 'short', year: '2-digit' });\r\n        }\r\n        return monthStr;\r\n      });\r\n    }\r\n    return labels;\r\n  };\r\n\r\n  const handleLogout = () => {\r\n    UserService.adminLogout();\r\n    navigate('/admin/login');\r\n  };\r\n\r\n  const generateReport = async (report) => {\r\n    try {\r\n      const token = UserService.getAdminToken();\r\n      \r\n      // 从ReportGenerator的复杂数据结构中提取需要的字段\r\n      const reportRequest = {\r\n        type: report.configuration?.type || report.type,\r\n        startDate: report.metadata?.period?.start || report.startDate,\r\n        endDate: report.metadata?.period?.end || report.endDate,\r\n        format: report.configuration?.format || report.format,\r\n        filters: {\r\n          includeUsers: true,\r\n          includeBookings: true,\r\n          includeRevenue: true\r\n        },\r\n        metadata: report.metadata,\r\n        content: report.content\r\n      };\r\n      \r\n      const res = await axios.post(\r\n        'http://localhost:8081/api/admin/dashboard/generate-report',\r\n        reportRequest,\r\n        {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n          responseType: 'blob'\r\n        }\r\n      );\r\n      const url = window.URL.createObjectURL(new Blob([res.data]));\r\n      const link = document.createElement('a');\r\n      link.href = url;\r\n      link.setAttribute('download', `report.${reportRequest.format === 'excel' ? 'xlsx' : reportRequest.format}`);\r\n      document.body.appendChild(link);\r\n      link.click();\r\n      link.remove();\r\n    } catch (err) {\r\n      alert('Failed to generate report');\r\n    }\r\n  };\r\n\r\n  const usernameInitial = adminUsername.charAt(0).toUpperCase();\r\n\r\n  console.log('Dashboard data state:', dashboardData);\r\n\r\n  // Helper to determine current tab\r\n  const getCurrentTab = () => {\r\n    const path = location.pathname;\r\n    if (path.includes('/admin/dashboard')) return 'dashboard';\r\n    if (path.includes('/admin/users')) return 'users';\r\n    if (path.includes('/admin/courts')) return 'courts';\r\n    if (path.includes('/admin/tiers')) return 'tiers';\r\n    if (path.includes('/admin/bookings')) return 'bookings';\r\n    if (path.includes('/admin/settings')) return 'settings';\r\n    return 'dashboard';\r\n  };\r\n\r\n  // Fetch admin profile\r\n  const fetchAdminProfile = async () => {\r\n    try {\r\n      const token = UserService.getAdminToken();\r\n      const response = await axios.get('http://localhost:8081/api/admin/profile', {\r\n        headers: { Authorization: `Bearer ${token}` }\r\n      });\r\n      setAdminProfile(response.data);\r\n    } catch (error) {\r\n      console.error('Failed to fetch admin profile:', error);\r\n    }\r\n  };\r\n\r\n  // Fetch admin profile on component mount\r\n  useEffect(() => {\r\n    fetchAdminProfile();\r\n  }, []);\r\n\r\n  // Listen for avatar updates from AdminSettings\r\n  useEffect(() => {\r\n    const handleStorageChange = (e) => {\r\n      if (e.key === 'adminAvatarUpdated') {\r\n        fetchAdminProfile();\r\n      }\r\n    };\r\n\r\n    window.addEventListener('storage', handleStorageChange);\r\n    \r\n    // Also listen for custom event\r\n    const handleAvatarUpdate = () => {\r\n      fetchAdminProfile();\r\n    };\r\n    \r\n    window.addEventListener('adminAvatarUpdated', handleAvatarUpdate);\r\n\r\n    return () => {\r\n      window.removeEventListener('storage', handleStorageChange);\r\n      window.removeEventListener('adminAvatarUpdated', handleAvatarUpdate);\r\n    };\r\n  }, []);\r\n  // 页面主 loading 状态 - 只在dashboard页面显示\r\n  const loading = getCurrentTab() === 'dashboard' && (summaryLoading || bookingTrendsLoading || revenueTrendsLoading);\r\n\r\n  return (\r\n    <Box sx={{ display: 'flex', minHeight: '100vh', backgroundColor: theme.palette.background.default }}>\r\n      {/* Loading Backdrop */}\r\n      <Backdrop\r\n        sx={{ color: '#fff', zIndex: (theme) => theme.zIndex.drawer + 1 }}\r\n        open={loading}\r\n      >\r\n        <CircularProgress color=\"inherit\" />\r\n      </Backdrop>\r\n      {/* Sidebar */}\r\n      <Paper sx={{\r\n        width: 250,\r\n        minHeight: '100vh',\r\n        borderRadius: 0,\r\n        boxShadow: theme.shadows[2],\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        position: 'fixed',\r\n        zIndex: 100,\r\n        p: 2,\r\n        backgroundColor: theme.palette.background.paper,\r\n        color: theme.palette.text.primary\r\n      }}>\r\n        <Box sx={{ mb: 3 }}>\r\n          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1.5 }}>\r\n            <Avatar sx={{\r\n              bgcolor: theme.palette.primary.main,\r\n              width: 48,\r\n              height: 48,\r\n              fontSize: '1.25rem'\r\n            }}\r\n            src={adminProfile?.profileImage ? `http://localhost:8081/uploads/${adminProfile.profileImage}` : null}\r\n            >\r\n              {adminProfile?.name ? adminProfile.name.charAt(0).toUpperCase() : 'A'}\r\n            </Avatar>\r\n            <Typography variant=\"h6\" sx={{ fontWeight: 700, color: theme.palette.primary.main }}>\r\n              Admin Portal\r\n            </Typography>\r\n          </Box>\r\n        </Box>\r\n        <List sx={{ flexGrow: 1 }}>\r\n          <ListItem\r\n            onClick={() => navigate('/admin/dashboard')}\r\n            sx={{\r\n              borderRadius: 1,\r\n              mb: 0.5,\r\n              bgcolor: getCurrentTab() === 'dashboard' ? theme.palette.action.hover : 'inherit',\r\n              cursor: 'pointer',\r\n              '&:hover': {\r\n                backgroundColor: theme.palette.action.selected\r\n              }\r\n            }}\r\n          >\r\n            <ListItemIcon sx={{\r\n              minWidth: 40,\r\n              color: getCurrentTab() === 'dashboard' ? theme.palette.primary.main : theme.palette.text.secondary\r\n            }}>\r\n              <DashboardIcon />\r\n            </ListItemIcon>\r\n            <ListItemText\r\n              primary=\"Dashboard\"\r\n              primaryTypographyProps={{\r\n                fontWeight: getCurrentTab() === 'dashboard' ? 'bold' : 'normal'\r\n              }}\r\n            />\r\n          </ListItem>\r\n          <ListItem\r\n            onClick={() => navigate('/admin/users')}\r\n            sx={{\r\n              borderRadius: 1,\r\n              mb: 0.5,\r\n              bgcolor: getCurrentTab() === 'users' ? theme.palette.action.hover : 'inherit',\r\n              cursor: 'pointer',\r\n              '&:hover': {\r\n                backgroundColor: theme.palette.action.selected\r\n              }\r\n            }}\r\n          >\r\n            <ListItemIcon sx={{\r\n              minWidth: 40,\r\n              color: getCurrentTab() === 'users' ? theme.palette.primary.main : theme.palette.text.secondary\r\n            }}>\r\n              <PeopleIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"User Management\" />\r\n          </ListItem>\r\n          <ListItem\r\n            onClick={() => navigate('/admin/courts')}\r\n            sx={{\r\n              borderRadius: 1,\r\n              mb: 0.5,\r\n              bgcolor: getCurrentTab() === 'courts' ? theme.palette.action.hover : 'inherit',\r\n              cursor: 'pointer',\r\n              '&:hover': {\r\n                backgroundColor: theme.palette.action.selected\r\n              }\r\n            }}\r\n          >\r\n            <ListItemIcon sx={{\r\n              minWidth: 40,\r\n              color: getCurrentTab() === 'courts' ? theme.palette.primary.main : theme.palette.text.secondary\r\n            }}>\r\n              <CourtsIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Court Management\" />\r\n          </ListItem>\r\n          <ListItem\r\n            onClick={() => navigate('/admin/tiers')}\r\n            sx={{\r\n              borderRadius: 1,\r\n              mb: 0.5,\r\n              bgcolor: getCurrentTab() === 'tiers' ? theme.palette.action.hover : 'inherit',\r\n              cursor: 'pointer',\r\n              '&:hover': {\r\n                backgroundColor: theme.palette.action.selected\r\n              }\r\n            }}\r\n          >\r\n            <ListItemIcon sx={{\r\n              minWidth: 40,\r\n              color: getCurrentTab() === 'tiers' ? theme.palette.primary.main : theme.palette.text.secondary\r\n            }}>\r\n              <TierIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Membership Management\" />\r\n          </ListItem>\r\n          <ListItem\r\n            onClick={() => navigate('/admin/bookings')}\r\n            sx={{\r\n              borderRadius: 1,\r\n              mb: 0.5,\r\n              bgcolor: getCurrentTab() === 'bookings' ? theme.palette.action.hover : 'inherit',\r\n              cursor: 'pointer',\r\n              '&:hover': {\r\n                backgroundColor: theme.palette.action.selected\r\n              }\r\n            }}\r\n          >\r\n            <ListItemIcon sx={{\r\n              minWidth: 40,\r\n              color: getCurrentTab() === 'bookings' ? theme.palette.primary.main : theme.palette.text.secondary\r\n            }}>\r\n              <BookingsIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Booking Management\" />\r\n          </ListItem>\r\n          <ListItem\r\n            onClick={() => navigate('/admin/settings')}\r\n            sx={{\r\n              borderRadius: 1,\r\n              cursor: 'pointer',\r\n              bgcolor: getCurrentTab() === 'settings' ? theme.palette.action.hover : 'inherit',\r\n              '&:hover': {\r\n                backgroundColor: theme.palette.action.selected\r\n              }\r\n            }}\r\n          >\r\n            <ListItemIcon sx={{\r\n              minWidth: 40,\r\n              color: getCurrentTab() === 'settings' ? theme.palette.primary.main : theme.palette.text.secondary\r\n            }}>\r\n              <SettingsIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Settings\" />\r\n          </ListItem>\r\n        </List>\r\n      </Paper>\r\n      {/* Main Content */}\r\n      <Box sx={{ flexGrow: 1, ml: '280px', p: 3 }}>\r\n        {/* Top Bar */}\r\n        <Box sx={{\r\n          display: 'flex',\r\n          justifyContent: 'space-between',\r\n          alignItems: 'center',\r\n          mb: 3\r\n        }}>\r\n          <Paper sx={{\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            px: 2,\r\n            py: 1,\r\n            width: 300,\r\n            backgroundColor: theme.palette.background.paper,\r\n            color: theme.palette.text.primary\r\n          }}>\r\n            <SearchIcon sx={{ color: 'text.secondary', mr: 1 }} />\r\n            <TextField\r\n              placeholder=\"Search...\"\r\n              variant=\"standard\"\r\n              fullWidth\r\n              InputProps={{ disableUnderline: true }}\r\n            />\r\n          </Paper>\r\n          <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\r\n            <Box sx={{ position: 'relative' }}>\r\n              <Button\r\n                variant=\"text\"\r\n                onClick={() => setShowUserMenu(!showUserMenu)}\r\n                sx={{ display: 'flex', alignItems: 'center', gap: 1 }}\r\n              >\r\n                <Avatar sx={{ bgcolor: 'primary.main', width: 32, height: 32 }}\r\n                src={adminProfile?.profileImage ? `http://localhost:8081/uploads/${adminProfile.profileImage}` : null}\r\n                >\r\n                  {adminProfile?.name ? adminProfile.name.charAt(0).toUpperCase() : usernameInitial}\r\n                </Avatar>\r\n                <Typography>{adminProfile?.name || adminUsername}</Typography>\r\n              </Button>\r\n              {showUserMenu && (\r\n                <Paper sx={{\r\n                  position: 'absolute',\r\n                  top: '100%',\r\n                  right: 0,\r\n                  mt: 1,\r\n                  minWidth: 120,\r\n                  boxShadow: 3,\r\n                  zIndex: 10\r\n                }}>\r\n                  <Button\r\n                    fullWidth\r\n                    onClick={handleLogout}\r\n                    sx={{ justifyContent: 'flex-start', px: 2, py: 1 }}\r\n                  >\r\n                    Logout\r\n                  </Button>\r\n                </Paper>\r\n              )}\r\n            </Box>\r\n          </Box>\r\n        </Box>\r\n        {getCurrentTab() === 'dashboard' && (location.pathname === '/admin/dashboard' || location.pathname === '/admin') ? (\r\n          <>\r\n            {/* Overview Cards */}\r\n            <Grid container spacing={3} sx={{ mb: 3 }}>\r\n              <Grid item xs={12} md={6} lg={3}>\r\n                <Paper sx={{ p: 2, display: 'flex', alignItems: 'center', gap: 2, backgroundColor: theme.palette.background.paper, color: theme.palette.text.primary }}>\r\n                  <Avatar sx={{\r\n                    bgcolor: theme.palette.primary.main,\r\n                    width: 48,\r\n                    height: 48,\r\n                    fontSize: '1.25rem'\r\n                  }}>\r\n                    \uD83D\uDC65\r\n                  </Avatar>\r\n                  <Box>\r\n                    <Typography variant=\"body2\" color=\"text.secondary\">Total Users</Typography>\r\n                    <Typography variant=\"h5\" fontWeight=\"bold\">\r\n                      {dashboardData.totalUsers.toLocaleString()}\r\n                    </Typography>\r\n                    <Typography\r\n                      variant=\"caption\"\r\n                      sx={{ color: dashboardData.totalUsersChange >= 0 ? 'success.main' : 'error.main' }}\r\n                    >\r\n                      {dashboardData.totalUsersChange >= 0 ? '+' : ''}\r\n                      {dashboardData.totalUsersChange.toFixed(1)}% from last month\r\n                    </Typography>\r\n                  </Box>\r\n                </Paper>\r\n              </Grid>\r\n\r\n              <Grid item xs={12} md={6} lg={3}>\r\n                <Paper sx={{ p: 2, display: 'flex', alignItems: 'center', gap: 2, backgroundColor: theme.palette.background.paper, color: theme.palette.text.primary }}>\r\n                  <Avatar sx={{\r\n                    bgcolor: theme.palette.primary.main,\r\n                    width: 48,\r\n                    height: 48,\r\n                    fontSize: '1.25rem'\r\n                  }}>\r\n                    \uD83D\uDCC5\r\n                  </Avatar>\r\n                  <Box>\r\n                    <Typography variant=\"body2\" color=\"text.secondary\">Total Bookings</Typography>\r\n                    <Typography variant=\"h5\" fontWeight=\"bold\">\r\n                      {dashboardData.totalBookings.toLocaleString()}\r\n                    </Typography>\r\n                    <Typography\r\n                      variant=\"caption\"\r\n                      sx={{ color: dashboardData.totalBookingsChange >= 0 ? 'success.main' : 'error.main' }}\r\n                    >\r\n                      {dashboardData.totalBookingsChange >= 0 ? '+' : ''}\r\n                      {dashboardData.totalBookingsChange.toFixed(1)}% from last month\r\n                    </Typography>\r\n                  </Box>\r\n                </Paper>\r\n              </Grid>\r\n\r\n              <Grid item xs={12} md={6} lg={3}>\r\n                <Paper sx={{ p: 2, display: 'flex', alignItems: 'center', gap: 2, backgroundColor: theme.palette.background.paper, color: theme.palette.text.primary }}>\r\n                  <Avatar sx={{\r\n                    bgcolor: theme.palette.primary.main,\r\n                    width: 48,\r\n                    height: 48,\r\n                    fontSize: '1.25rem'\r\n                  }}>\r\n                    \uD83D\uDCB0\r\n                  </Avatar>\r\n                  <Box>\r\n                    <Typography variant=\"body2\" color=\"text.secondary\">Revenue</Typography>\r\n                    <Typography variant=\"h5\" fontWeight=\"bold\">\r\n                      RM {dashboardData.totalRevenue.toLocaleString()}\r\n                    </Typography>\r\n                    <Typography\r\n                      variant=\"caption\"\r\n                      sx={{ color: dashboardData.totalRevenueChange >= 0 ? 'success.main' : 'error.main' }}\r\n                    >\r\n                      {dashboardData.totalRevenueChange >= 0 ? '+' : ''}\r\n                      {dashboardData.totalRevenueChange.toFixed(1)}% from last month\r\n                    </Typography>\r\n                  </Box>\r\n                </Paper>\r\n              </Grid>\r\n\r\n              <Grid item xs={12} md={6} lg={3}>\r\n                <Paper sx={{ p: 2, display: 'flex', alignItems: 'center', gap: 2, backgroundColor: theme.palette.background.paper, color: theme.palette.text.primary }}>\r\n                  <Avatar sx={{\r\n                    bgcolor: theme.palette.primary.main,\r\n                    width: 48,\r\n                    height: 48,\r\n                    fontSize: '1.25rem'\r\n                  }}>\r\n                    ⭐\r\n                  </Avatar>\r\n                  <Box>\r\n                    <Typography variant=\"body2\" color=\"text.secondary\">Average Feedback Rating</Typography>\r\n                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n                      <Rating\r\n                        value={dashboardData.averageRating || 0}\r\n                        precision={0.1}\r\n                        readOnly\r\n                        size=\"small\"\r\n                      />\r\n                      <Typography variant=\"h6\" fontWeight=\"bold\" sx={{ ml: 1 }}>\r\n                        {dashboardData.averageRating ? dashboardData.averageRating.toFixed(2) : '-'} / 5\r\n                      </Typography>\r\n                    </Box>\r\n                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5, mt: 0.5 }}>\r\n                      {dashboardData.averageRatingChange !== 0 && (\r\n                        <span style={{\r\n                          color: dashboardData.averageRatingChange > 0 ? '#43a047' : '#e53935',\r\n                          fontWeight: 600,\r\n                          display: 'flex',\r\n                          alignItems: 'center'\r\n                        }}>\r\n                          {dashboardData.averageRatingChange > 0 ? '▲' : '▼'}\r\n                          {Math.abs(dashboardData.averageRatingChange).toFixed(1)}\r\n                        </span>\r\n                      )}\r\n                      <Typography variant=\"caption\" color=\"text.secondary\">\r\n                        {dashboardData.averageRatingChange !== 0\r\n                          ? 'from last month'\r\n                          : 'No change from last month'}\r\n                      </Typography>\r\n                    </Box>\r\n                  </Box>\r\n                </Paper>\r\n              </Grid>\r\n            </Grid>\r\n\r\n            {/* Charts Section */}\r\n            <Grid container spacing={3} sx={{ mb: 3 }}>\r\n              <Grid item xs={12} md={6} lg={6}>\r\n                <Paper sx={{ p: 2, height: 400, width: 450, minWidth: 450, maxWidth: 450, backgroundColor: theme.palette.background.paper, color: theme.palette.text.primary }}>\r\n                  <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 2 }}>\r\n                    <Typography variant=\"h6\">Booking Trends</Typography>\r\n                    <FormControl size=\"small\" sx={{ minWidth: 120 }}>\r\n                      <Select\r\n                        value={bookingTimeRange}\r\n                        onChange={(e) => setBookingTimeRange(e.target.value)}\r\n                      >\r\n                        <MenuItem value=\"7d\">Last 7 Days</MenuItem>\r\n                        <MenuItem value=\"30d\">Last 30 Days</MenuItem>\r\n                        <MenuItem value=\"12m\">Last 12 Months</MenuItem>\r\n                      </Select>\r\n                    </FormControl>\r\n                  </Box>\r\n                  <Box sx={{ height: 'calc(100% - 40px)' }}>\r\n                    <canvas ref={bookingChartRef} style={{ width: '100%', height: '100%' }} />\r\n                  </Box>\r\n                </Paper>\r\n              </Grid>\r\n\r\n              <Grid item xs={12} md={6} lg={6}>\r\n                <Paper sx={{ p: 2, height: 400, width: 450, minWidth: 450, maxWidth: 450, backgroundColor: theme.palette.background.paper, color: theme.palette.text.primary }}>\r\n                  <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 2 }}>\r\n                    <Typography variant=\"h6\">Revenue Trends</Typography>\r\n                    <FormControl size=\"small\" sx={{ minWidth: 120 }}>\r\n                      <Select\r\n                        value={revenueTimeRange}\r\n                        onChange={(e) => setRevenueTimeRange(e.target.value)}\r\n                      >\r\n                        <MenuItem value=\"7d\">Last 7 Days</MenuItem>\r\n                        <MenuItem value=\"30d\">Last 30 Days</MenuItem>\r\n                        <MenuItem value=\"12m\">Last 12 Months</MenuItem>\r\n                      </Select>\r\n                    </FormControl>\r\n                  </Box>\r\n                  <Box sx={{ height: 'calc(100% - 40px)' }}>\r\n                    <canvas ref={revenueChartRef} style={{ width: '100%', height: '100%' }} />\r\n                  </Box>\r\n                </Paper>\r\n              </Grid>\r\n            </Grid>\r\n\r\n            {/* Recent Activity */}\r\n            <Grid container spacing={3} sx={{ mb: 3 }}>\r\n              <Grid item xs={12} md={8}>\r\n                <Paper sx={{ p: 2, backgroundColor: theme.palette.background.paper, color: theme.palette.text.primary }}>\r\n                  <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 2 }}>\r\n                    <Typography variant=\"h6\">Recent Activity</Typography>\r\n                    <Button size=\"small\" onClick={() => setActivityDialogOpen(true)} disabled={recentActivity.length <= 4}>View All</Button>\r\n                  </Box>\r\n                  <List>\r\n                    {recentActivity.length === 0 ? (\r\n                      <ListItem>\r\n                        <ListItemText primary=\"No recent activity.\" />\r\n                      </ListItem>\r\n                    ) : (\r\n                      recentActivity.slice(0, 4).map((item, idx) => (\r\n                        <React.Fragment key={idx}>\r\n                          <ListItem sx={{ alignItems: 'flex-start' }}>\r\n                            <Avatar sx={{ bgcolor: 'grey.100', color: 'text.primary', mr: 2 }}>\r\n                              {item.icon}\r\n                            </Avatar>\r\n                            <Box>\r\n                              <Typography fontWeight=\"bold\">\r\n                                {item.type === 'booking' ? 'New Booking' :\r\n                                  item.type === 'user' ? 'New User Registration' :\r\n                                    item.type === 'cancellation' ? 'Booking Cancellation' :\r\n                                      'New Review'}\r\n                              </Typography>\r\n                              <Typography variant=\"body2\">{item.user} {item.detail}</Typography>\r\n                              <Typography variant=\"caption\" color=\"text.secondary\">\r\n                                {dayjs(item.timestamp).fromNow()}\r\n                              </Typography>\r\n                            </Box>\r\n                          </ListItem>\r\n                          {idx !== Math.min(recentActivity.length, 4) - 1 && <Divider component=\"li\" sx={{ my: 1 }} />}\r\n                        </React.Fragment>\r\n                      ))\r\n                    )}\r\n                  </List>\r\n                  {/* Dialog for all activity */}\r\n                  <Dialog open={activityDialogOpen} onClose={() => setActivityDialogOpen(false)} maxWidth=\"sm\" fullWidth>\r\n                    <DialogTitle>All Recent Activity</DialogTitle>\r\n                    <DialogContent>\r\n                      <List>\r\n                        {recentActivity.map((item, idx) => (\r\n                          <React.Fragment key={idx}>\r\n                            <ListItem sx={{ alignItems: 'flex-start' }}>\r\n                              <Avatar sx={{ bgcolor: 'grey.100', color: 'text.primary', mr: 2 }}>\r\n                                {item.icon}\r\n                              </Avatar>\r\n                              <Box>\r\n                                <Typography fontWeight=\"bold\">\r\n                                  {item.type === 'booking' ? 'New Booking' :\r\n                                    item.type === 'user' ? 'New User Registration' :\r\n                                      item.type === 'cancellation' ? 'Booking Cancellation' :\r\n                                        'New Review'}\r\n                                </Typography>\r\n                                <Typography variant=\"body2\">{item.user} {item.detail}</Typography>\r\n                                <Typography variant=\"caption\" color=\"text.secondary\">\r\n                                  {dayjs(item.timestamp).fromNow()}\r\n                                </Typography>\r\n                              </Box>\r\n                            </ListItem>\r\n                            {idx !== recentActivity.length - 1 && <Divider component=\"li\" sx={{ my: 1 }} />}\r\n                          </React.Fragment>\r\n                        ))}\r\n                      </List>\r\n                    </DialogContent>\r\n                  </Dialog>\r\n                </Paper>\r\n              </Grid>\r\n\r\n              <Grid item xs={12} md={8}>\r\n                <ReportGenerator onGenerateReport={generateReport} companyInfo={{ name: 'Pickleball Club' }} />\r\n              </Grid>\r\n\r\n            </Grid>\r\n          </>\r\n        ) : null}\r\n        <Outlet />\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default AdminDashboard;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball-frontend/src/components/admin/AdminDashboard.jsx b/pickleball-frontend/src/components/admin/AdminDashboard.jsx
--- a/pickleball-frontend/src/components/admin/AdminDashboard.jsx	(revision 97abd609899a67b781b8ace8e91358a782fc5acd)
+++ b/pickleball-frontend/src/components/admin/AdminDashboard.jsx	(date 1753747100468)
@@ -27,7 +27,8 @@
   PictureAsPdf as PictureAsPdfIcon,
   TableChart as TableChartIcon,
   GridOn as GridOnIcon,
-  FileDownload as FileDownloadIcon
+  FileDownload as FileDownloadIcon,
+  Assessment as AssessmentIcon
 } from '@mui/icons-material';
 import { useNavigate, useLocation, Outlet } from 'react-router-dom';
 import UserService from '../../service/UserService';
@@ -56,6 +57,7 @@
   const [summaryLoading, setSummaryLoading] = useState(false);
   const [bookingTrendsLoading, setBookingTrendsLoading] = useState(false);
   const [revenueTrendsLoading, setRevenueTrendsLoading] = useState(false);
+  const [loading, setLoading] = useState(false);
   const [dashboardData, setDashboardData] = useState({
     totalUsers: 0,
     totalUsersChange: 0,
@@ -441,14 +443,81 @@
     };
   }, []);
   // 页面主 loading 状态 - 只在dashboard页面显示
-  const loading = getCurrentTab() === 'dashboard' && (summaryLoading || bookingTrendsLoading || revenueTrendsLoading);
+  const dashboardLoading = getCurrentTab() === 'dashboard' && (summaryLoading || bookingTrendsLoading || revenueTrendsLoading);
+
+  // 新增：測試收入分配機制
+  const testRevenueDistribution = async () => {
+    try {
+      setLoading(true);
+      const response = await fetch('http://localhost:8081/api/admin/test-revenue-distribution', {
+        method: 'POST',
+        headers: {
+          'Authorization': `Bearer ${localStorage.getItem('authToken')}`,
+          'Content-Type': 'application/json'
+        }
+      });
+      
+      if (response.ok) {
+        const data = await response.json();
+        console.log('Revenue Distribution Test Results:', data);
+        
+        // 显示结果
+        alert(`收入分配测试结果：
+        
+平台托管余额: RM ${data.platformEscrowBalance}
+平台收入: RM ${data.platformRevenue}
+教练收入: RM ${data.coachRevenue}
+
+已完成课程数量: ${data.completedSessionsCount}
+托管支付记录数量: ${data.escrowedPaymentsCount}
+教练收入记录数量: ${data.coachIncomePaymentsCount}
+平台费用记录数量: ${data.platformFeePaymentsCount}
+
+支付类型统计: ${JSON.stringify(data.paymentTypeCounts, null, 2)}`);
+      } else {
+        alert('测试失败: ' + await response.text());
+      }
+    } catch (error) {
+      console.error('Error testing revenue distribution:', error);
+      alert('测试失败: ' + error.message);
+    } finally {
+      setLoading(false);
+    }
+  };
+
+  // 新增：手动结算课程
+  const manuallySettleSession = async (sessionId) => {
+    try {
+      setLoading(true);
+      const response = await fetch(`http://localhost:8081/api/class-sessions/${sessionId}/settle`, {
+        method: 'POST',
+        headers: {
+          'Authorization': `Bearer ${localStorage.getItem('authToken')}`,
+          'Content-Type': 'application/json'
+        }
+      });
+      
+      if (response.ok) {
+        const data = await response.json();
+        alert(`课程 ${sessionId} 结算成功: ${data.message}`);
+        fetchDashboardData(); // 刷新数据
+      } else {
+        alert('结算失败: ' + await response.text());
+      }
+    } catch (error) {
+      console.error('Error settling session:', error);
+      alert('结算失败: ' + error.message);
+    } finally {
+      setLoading(false);
+    }
+  };
 
   return (
     <Box sx={{ display: 'flex', minHeight: '100vh', backgroundColor: theme.palette.background.default }}>
       {/* Loading Backdrop */}
       <Backdrop
         sx={{ color: '#fff', zIndex: (theme) => theme.zIndex.drawer + 1 }}
-        open={loading}
+        open={dashboardLoading}
       >
         <CircularProgress color="inherit" />
       </Backdrop>
@@ -919,6 +988,27 @@
               <Grid item xs={12} md={8}>
                 <ReportGenerator onGenerateReport={generateReport} companyInfo={{ name: 'Pickleball Club' }} />
               </Grid>
+
+              {/* 收入分配测试区域 */}
+              <Grid item xs={12} md={4}>
+                <Paper sx={{ p: 2, backgroundColor: theme.palette.background.paper, color: theme.palette.text.primary }}>
+                  <Typography variant="h6" gutterBottom>收入分配测试</Typography>
+                  <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
+                    <Button
+                      variant="contained"
+                      color="primary"
+                      onClick={testRevenueDistribution}
+                      disabled={loading}
+                      startIcon={<AssessmentIcon />}
+                    >
+                      测试收入分配机制
+                    </Button>
+                    <Typography variant="body2" color="text.secondary">
+                      点击按钮测试托管账户、收入分配和自动结算功能
+                    </Typography>
+                  </Box>
+                </Paper>
+              </Grid>
 
             </Grid>
           </>
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/CancellationRequestRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.repository;\r\n\r\nimport com.pickleball_backend.pickleball.entity.CancellationRequest;\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\nimport org.springframework.data.jpa.repository.Query;\r\nimport org.springframework.data.repository.query.Param;\r\n\r\nimport java.util.List;\r\n\r\npublic interface CancellationRequestRepository extends JpaRepository<CancellationRequest, Integer> {\r\n    List<CancellationRequest> findByStatus(String status);\r\n\r\n    @Query(\"SELECT cr FROM CancellationRequest cr \" +\r\n            \"JOIN FETCH cr.booking b \" +\r\n            \"JOIN FETCH b.member m \" +\r\n            \"JOIN FETCH m.user u \" +\r\n            \"WHERE cr.status = :status\")\r\n    List<CancellationRequest> findByStatusWithRelations(@Param(\"status\") String status);\r\n\r\n    List<CancellationRequest> findTop3ByOrderByRequestDateDesc();\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/CancellationRequestRepository.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/CancellationRequestRepository.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/CancellationRequestRepository.java	(revision 97abd609899a67b781b8ace8e91358a782fc5acd)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/CancellationRequestRepository.java	(date 1753722675177)
@@ -18,4 +18,6 @@
     List<CancellationRequest> findByStatusWithRelations(@Param("status") String status);
 
     List<CancellationRequest> findTop3ByOrderByRequestDateDesc();
+
+    List<CancellationRequest> findByBookingId(Integer bookingId);
 }
\ No newline at end of file
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/RecurringSessionRequestDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/RecurringSessionRequestDto.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/RecurringSessionRequestDto.java
new file mode 100644
--- /dev/null	(date 1753723014870)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/RecurringSessionRequestDto.java	(date 1753723014870)
@@ -0,0 +1,30 @@
+// RecurringSessionRequest.java
+package com.pickleball_backend.pickleball.dto;
+
+import lombok.Data;
+import java.time.DayOfWeek;
+import java.time.LocalDate;
+import java.time.LocalTime;
+import java.util.List;
+import lombok.AllArgsConstructor;
+import lombok.Getter;
+import lombok.NoArgsConstructor;
+import lombok.Setter;
+
+@Getter
+@Setter
+@NoArgsConstructor
+@AllArgsConstructor
+@Data
+public class RecurringSessionRequestDto {
+    private String title;
+    private String description;
+    private Integer courtId;
+    private Double price;
+    private Integer maxParticipants;
+    private List<DayOfWeek> daysOfWeek;
+    private LocalTime startTime;
+    private LocalTime endTime;
+    private LocalDate startDate;
+    private LocalDate endDate;
+}
\ No newline at end of file
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/EventRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.repository;\r\n\r\nimport com.pickleball_backend.pickleball.entity.Event;\r\nimport org.springframework.data.domain.Page;\r\nimport org.springframework.data.domain.Pageable;\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\nimport org.springframework.data.jpa.repository.Query;\r\nimport org.springframework.data.repository.query.Param;\r\nimport org.springframework.stereotype.Repository;\r\n\r\nimport java.time.LocalDateTime;\r\nimport java.util.List;\r\n\r\n@Repository\r\npublic interface EventRepository extends JpaRepository<Event, Integer> {\r\n\r\n    // Find all events\r\n    List<Event> findAll();\r\n\r\n    // Find events by organizer\r\n    List<Event> findByOrganizerId(Integer organizerId);\r\n\r\n    // Find upcoming events\r\n    List<Event> findByStartTimeAfter(LocalDateTime date);\r\n\r\n    // Find events by location\r\n    List<Event> findByLocationContainingIgnoreCase(String location);\r\n\r\n    // Find events by title containing keyword\r\n    List<Event> findByTitleContainingIgnoreCase(String keyword);\r\n\r\n    List<Event> findByStatus(String status);\r\n    List<Event> findByStatusAndEligibilityContaining(String status, String tier);\r\n    \r\n    // New methods for browsing and filtering\r\n    List<Event> findByEventType(String eventType);\r\n    List<Event> findBySkillLevel(String skillLevel);\r\n    List<Event> findByEventTypeAndStatus(String eventType, String status);\r\n    List<Event> findBySkillLevelAndStatus(String skillLevel, String status);\r\n    \r\n    // Find published events by type\r\n    List<Event> findByEventTypeAndStatusOrderByStartTimeAsc(String eventType, String status);\r\n    \r\n    // Find published events by skill level\r\n    List<Event> findBySkillLevelAndStatusOrderByStartTimeAsc(String skillLevel, String status);\r\n    \r\n    // Find upcoming published events\r\n    List<Event> findByStatusAndStartTimeAfterOrderByStartTimeAsc(String status, LocalDateTime date);\r\n    \r\n    // Complex query for filtering\r\n    @Query(\"SELECT e FROM Event e WHERE \" +\r\n           \"(:eventType IS NULL OR e.eventType = :eventType) AND \" +\r\n           \"(:skillLevel IS NULL OR e.skillLevel = :skillLevel) AND \" +\r\n           \"(:location IS NULL OR LOWER(e.location) LIKE LOWER(CONCAT('%', :location, '%'))) AND \" +\r\n           \"(:startDate IS NULL OR e.startTime >= :startDate) AND \" +\r\n           \"(:endDate IS NULL OR e.startTime <= :endDate) AND \" +\r\n           \"(:status IS NULL OR e.status = :status) AND \" +\r\n           \"(:eligibility IS NULL OR e.eligibility LIKE CONCAT('%', :eligibility, '%')) AND \" +\r\n           \"(:searchKeyword IS NULL OR LOWER(e.title) LIKE LOWER(CONCAT('%', :searchKeyword, '%')))\")\r\n    Page<Event> findEventsWithFilters(\r\n            @Param(\"eventType\") String eventType,\r\n            @Param(\"skillLevel\") String skillLevel,\r\n            @Param(\"location\") String location,\r\n            @Param(\"startDate\") LocalDateTime startDate,\r\n            @Param(\"endDate\") LocalDateTime endDate,\r\n            @Param(\"status\") String status,\r\n            @Param(\"eligibility\") String eligibility,\r\n            @Param(\"searchKeyword\") String searchKeyword,\r\n            Pageable pageable);\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/EventRepository.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/EventRepository.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/EventRepository.java	(revision 97abd609899a67b781b8ace8e91358a782fc5acd)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/EventRepository.java	(date 1753722675185)
@@ -8,6 +8,7 @@
 import org.springframework.data.repository.query.Param;
 import org.springframework.stereotype.Repository;
 
+import java.time.LocalDate;
 import java.time.LocalDateTime;
 import java.util.List;
 
@@ -23,48 +24,41 @@
     // Find upcoming events
     List<Event> findByStartTimeAfter(LocalDateTime date);
 
-    // Find events by location
-    List<Event> findByLocationContainingIgnoreCase(String location);
-
     // Find events by title containing keyword
     List<Event> findByTitleContainingIgnoreCase(String keyword);
 
     List<Event> findByStatus(String status);
-    List<Event> findByStatusAndEligibilityContaining(String status, String tier);
     
     // New methods for browsing and filtering
     List<Event> findByEventType(String eventType);
-    List<Event> findBySkillLevel(String skillLevel);
     List<Event> findByEventTypeAndStatus(String eventType, String status);
-    List<Event> findBySkillLevelAndStatus(String skillLevel, String status);
     
     // Find published events by type
     List<Event> findByEventTypeAndStatusOrderByStartTimeAsc(String eventType, String status);
     
-    // Find published events by skill level
-    List<Event> findBySkillLevelAndStatusOrderByStartTimeAsc(String skillLevel, String status);
-    
     // Find upcoming published events
     List<Event> findByStatusAndStartTimeAfterOrderByStartTimeAsc(String status, LocalDateTime date);
     
     // Complex query for filtering
     @Query("SELECT e FROM Event e WHERE " +
            "(:eventType IS NULL OR e.eventType = :eventType) AND " +
-           "(:skillLevel IS NULL OR e.skillLevel = :skillLevel) AND " +
-           "(:location IS NULL OR LOWER(e.location) LIKE LOWER(CONCAT('%', :location, '%'))) AND " +
            "(:startDate IS NULL OR e.startTime >= :startDate) AND " +
            "(:endDate IS NULL OR e.startTime <= :endDate) AND " +
            "(:status IS NULL OR e.status = :status) AND " +
-           "(:eligibility IS NULL OR e.eligibility LIKE CONCAT('%', :eligibility, '%')) AND " +
            "(:searchKeyword IS NULL OR LOWER(e.title) LIKE LOWER(CONCAT('%', :searchKeyword, '%')))")
     Page<Event> findEventsWithFilters(
             @Param("eventType") String eventType,
-            @Param("skillLevel") String skillLevel,
-            @Param("location") String location,
             @Param("startDate") LocalDateTime startDate,
             @Param("endDate") LocalDateTime endDate,
             @Param("status") String status,
-            @Param("eligibility") String eligibility,
             @Param("searchKeyword") String searchKeyword,
             Pageable pageable);
+
+    List<Event> findByCourts_Id(Integer courtId);
+    List<Event> findByVenue_Id(Integer venueId);
+
+    @Query("SELECT DISTINCT DATE(e.startTime) FROM Event e WHERE e.venue.id = :venueId AND e.startTime BETWEEN :start AND :end")
+List<LocalDate> findEventDatesByVenueIdAndDateRange(@Param("venueId") Integer venueId,
+                                                    @Param("start") LocalDate start,
+                                                    @Param("end") LocalDate end);
 }
\ No newline at end of file
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/ClassRegistrationRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/ClassRegistrationRepository.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/ClassRegistrationRepository.java
new file mode 100644
--- /dev/null	(date 1753722380882)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/ClassRegistrationRepository.java	(date 1753722380882)
@@ -0,0 +1,29 @@
+package com.pickleball_backend.pickleball.repository;
+
+import com.pickleball_backend.pickleball.entity.ClassRegistration;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+import org.springframework.data.repository.query.Param;
+import java.util.List;
+
+public interface ClassRegistrationRepository extends JpaRepository<ClassRegistration, Integer> {
+    boolean existsByClassSessionIdAndMemberId(Integer sessionId, Integer memberId);
+
+    @Query("SELECT COUNT(r) FROM ClassRegistration r WHERE r.classSession.id = :sessionId")
+    int countByClassSessionId(@Param("sessionId") Integer sessionId);
+
+    List<ClassRegistration> findByClassSessionId(Integer sessionId);
+
+    @Query("SELECT r.member.id, r.member.user.name, r.member.user.email, COUNT(r) as sessionCount " +
+           "FROM ClassRegistration r WHERE r.classSession.coach.id = :coachId GROUP BY r.member.id, r.member.user.name, r.member.user.email")
+    List<Object[]> findStudentsByCoachId(@Param("coachId") Integer coachId);
+
+    @Query("SELECT r FROM ClassRegistration r WHERE r.member.user.id = :userId")
+    List<ClassRegistration> findByMemberUserId(@Param("userId") Integer userId);
+    
+    @Query("SELECT r FROM ClassRegistration r WHERE r.member.user.id = :userId AND r.classSession.id = :sessionId")
+    ClassRegistration findByMemberUserIdAndClassSessionId(@Param("userId") Integer userId, @Param("sessionId") Integer sessionId);
+    
+    @Query("SELECT COUNT(r) > 0 FROM ClassRegistration r WHERE r.classSession = :classSession AND r.member.user.id = :userId")
+    boolean existsByClassSessionAndMemberUserId(@Param("classSession") com.pickleball_backend.pickleball.entity.ClassSession classSession, @Param("userId") Integer userId);
+}
\ No newline at end of file
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/CourtRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.repository;\r\n\r\nimport com.pickleball_backend.pickleball.entity.Court;\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\nimport org.springframework.data.jpa.repository.Modifying;\r\nimport org.springframework.data.jpa.repository.Query;\r\nimport org.springframework.data.repository.query.Param;\r\n\r\nimport java.time.LocalDateTime;\r\nimport java.util.List;\r\nimport java.util.Optional;\r\n\r\npublic interface CourtRepository extends JpaRepository<Court, Integer> {\r\n    boolean existsByNameAndLocation(String name, String location);\r\n    List<Court> findByIsArchivedFalseOrIsArchivedIsNull();\r\n    List<Court> findAll();\r\n    @Query(\"SELECT c FROM Court c WHERE c.isArchived = false OR c.isArchived IS NULL\")\r\n    List<Court> findActiveCourts();\r\n    // Add this new method\r\n    Optional<Court> findById(Integer id);\r\n\r\n    @Modifying\r\n    @Query(\"UPDATE Court c SET c.isArchived = true, c.archiveTimestamp = :timestamp WHERE c.id = :id\")\r\n    void softDeleteCourt(@Param(\"id\") Integer id, @Param(\"timestamp\") LocalDateTime timestamp);\r\n\r\n    @Query(\"SELECT DISTINCT cs.court FROM ClassSession cs WHERE cs.coach.id = :coachId\")\r\n    List<Court> findCourtsByCoachId(@Param(\"coachId\") Integer coachId);\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/CourtRepository.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/CourtRepository.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/CourtRepository.java	(revision 97abd609899a67b781b8ace8e91358a782fc5acd)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/CourtRepository.java	(date 1753722675193)
@@ -9,6 +9,8 @@
 import java.time.LocalDateTime;
 import java.util.List;
 import java.util.Optional;
+import java.util.Set;
+import com.pickleball_backend.pickleball.entity.Venue;
 
 public interface CourtRepository extends JpaRepository<Court, Integer> {
     boolean existsByNameAndLocation(String name, String location);
@@ -25,4 +27,13 @@
 
     @Query("SELECT DISTINCT cs.court FROM ClassSession cs WHERE cs.coach.id = :coachId")
     List<Court> findCourtsByCoachId(@Param("coachId") Integer coachId);
+
+    List<Court> findByVenueIn(Set<Venue> venues);
+    
+    // 新增：根據場地ID查找球場
+    List<Court> findByVenueId(Integer venueId);
+    
+    // 新增：查找所有可用的球場
+    @Query("SELECT c FROM Court c WHERE c.isArchived = false OR c.isArchived IS NULL")
+    List<Court> findAvailableCourts();
 }
\ No newline at end of file
Index: pickleball-frontend/src/components/court/PaymentPage.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Container,\r\n  Card,\r\n  CardContent,\r\n  Typography,\r\n  Button,\r\n  Box,\r\n  Grid,\r\n  Divider,\r\n  Radio,\r\n  RadioGroup,\r\n  FormControlLabel,\r\n  FormControl,\r\n  FormLabel,\r\n  CircularProgress,\r\n  Alert,\r\n  Chip,\r\n  Paper\r\n} from '@mui/material';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport PaymentIcon from '@mui/icons-material/Payment';\r\nimport AccountBalanceWalletIcon from '@mui/icons-material/AccountBalanceWallet';\r\nimport CreditCardIcon from '@mui/icons-material/CreditCard';\r\nimport LocationOnIcon from '@mui/icons-material/LocationOn';\r\nimport AccessTimeIcon from '@mui/icons-material/AccessTime';\r\nimport SportsIcon from '@mui/icons-material/Sports';\r\nimport GroupIcon from '@mui/icons-material/Group';\r\nimport api from '../../api/axiosConfig.js';\r\nimport { getWalletBalance, initializeWallet } from '../../service/WalletService';\r\nimport { useAuth } from '../../context/AuthContext';\r\nimport ThemedCard from '../common/ThemedCard';\r\n\r\nconst PaymentPage = () => {\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n  const bookingDetails = location.state?.bookingDetails;\r\n  const [paymentMethod, setPaymentMethod] = useState('wallet');\r\n  const [walletBalance, setWalletBalance] = useState(0);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [isProcessing, setIsProcessing] = useState(false);\r\n  const { authToken } = useAuth();\r\n\r\n  useEffect(() => {\r\n    const fetchWalletBalance = async () => {\r\n      try {\r\n        setIsLoading(true);\r\n        let balance;\r\n\r\n        try {\r\n          balance = await getWalletBalance();\r\n        } catch (getError) {\r\n          console.warn('Wallet not found, initializing...', getError);\r\n          await initializeWallet();\r\n          balance = await getWalletBalance();\r\n        }\r\n\r\n        setWalletBalance(balance);\r\n      } catch (err) {\r\n        console.error('Wallet balance error:', err);\r\n        setError('Failed to load wallet balance: ' + err.message);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchWalletBalance();\r\n  }, []);\r\n\r\n  const handlePayment = async () => {\r\n    if (!bookingDetails) {\r\n      setError('Booking details missing');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setIsProcessing(true);\r\n\r\n      const bookingRequest = {\r\n        slotIds: bookingDetails.slotIds,\r\n        purpose: bookingDetails.purpose,\r\n        numberOfPlayers: bookingDetails.numberOfPlayers,\r\n        numPaddles: bookingDetails.numPaddles,\r\n        buyBallSet: bookingDetails.buyBallSet,\r\n        durationHours: bookingDetails.durationHours,\r\n        useWallet: paymentMethod === 'wallet'\r\n      };\r\n\r\n      const response = await api.post('/member/bookings', bookingRequest);\r\n\r\n      console.log('=== PaymentPage Debug ===');\r\n      console.log('API Response:', response.data);\r\n      console.log('Booking Details:', bookingDetails);\r\n\r\n      navigate('/booking/confirmation', {\r\n        state: {\r\n          booking: {\r\n            ...response.data,\r\n            slotDate: bookingDetails.date,\r\n            startTime: bookingDetails.startTime,\r\n            endTime: bookingDetails.endTime,\r\n            durationHours: bookingDetails.durationHours,\r\n            totalAmount: bookingDetails.price,\r\n            numPaddles: bookingDetails.numPaddles,\r\n            buyBallSet: bookingDetails.buyBallSet,\r\n            numberOfPlayers: bookingDetails.numberOfPlayers,\r\n            courtName: bookingDetails.courtName,\r\n            courtLocation: bookingDetails.courtLocation,\r\n            venueName: bookingDetails.venueName,\r\n            venueLocation: bookingDetails.venueLocation,\r\n            pointsEarned: response.data.pointsEarned,\r\n            currentPointBalance: response.data.currentPointBalance\r\n          }\r\n        }\r\n      });\r\n    } catch (err) {\r\n      const errorMessage = err.response?.data?.message || 'Payment failed. Please try again.';\r\n\r\n      if (errorMessage.includes('Insufficient wallet balance')) {\r\n        setError('Your wallet balance is too low. Please top up and try again.');\r\n      } else {\r\n        setError(errorMessage);\r\n      }\r\n\r\n      setIsProcessing(false);\r\n    }\r\n  };\r\n\r\n  if (!bookingDetails) {\r\n    return (\r\n      <Container sx={{ py: 4, textAlign: 'center' }}>\r\n        <Typography variant=\"h5\" gutterBottom>\r\n          Booking information not available\r\n        </Typography>\r\n        <Button variant=\"contained\" onClick={() => navigate('/courts')}>\r\n          Browse Courts\r\n        </Button>\r\n      </Container>\r\n    );\r\n  }\r\n\r\n  const formatTime = (time) => {\r\n    return new Date(`1970-01-01T${time}:00`).toLocaleTimeString([],\r\n      { hour: '2-digit', minute: '2-digit' });\r\n  };\r\n\r\n  const PADDLE_PRICE = 5;\r\n  const BALL_SET_PRICE = 12;\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\" sx={{ py: 4 }}>\r\n      {/* Header */}\r\n      <Box sx={{ textAlign: 'center', mb: 4 }}>\r\n        <PaymentIcon sx={{ fontSize: 48, color: '#1976d2', mb: 2 }} />\r\n        <Typography variant=\"h4\" gutterBottom sx={{ fontWeight: 'bold', color: '#1976d2' }}>\r\n          Complete Payment\r\n        </Typography>\r\n        <Typography variant=\"body1\" color=\"text.secondary\">\r\n          Review your booking and choose payment method\r\n        </Typography>\r\n      </Box>\r\n\r\n      <Box sx={{ \r\n        display: 'flex', \r\n        flexDirection: { xs: 'column', md: 'row' }, \r\n        gap: 3, \r\n        minHeight: '600px' \r\n      }}>\r\n        {/* Left Column - Booking Summary */}\r\n        <Box sx={{ flex: { xs: 'none', md: 1 } }}>\r\n          <ThemedCard sx={{ borderRadius: 3, boxShadow: 2, height: '100%' }}>\r\n            <CardContent sx={{ p: 4 }}>\r\n              <Typography variant=\"h5\" gutterBottom sx={{ fontWeight: 'bold', color: '#1976d2', mb: 3 }}>\r\n                \uD83D\uDCCB Booking Summary\r\n              </Typography>\r\n\r\n              {/* Court & Venue Info */}\r\n              <Box sx={{ display: 'flex', alignItems: 'center', mb: 3 }}>\r\n                <SportsIcon sx={{ color: '#1976d2', mr: 1, fontSize: 28 }} />\r\n                <Box>\r\n                  <Typography variant=\"h6\" sx={{ fontWeight: 'bold', color: '#1976d2' }}>\r\n                    {bookingDetails.courtName}\r\n                  </Typography>\r\n                  <Typography variant=\"body2\" color=\"text.secondary\">\r\n                    {bookingDetails.venueName}{bookingDetails.venueLocation ? `，${bookingDetails.venueLocation}` : ''}\r\n                  </Typography>\r\n                </Box>\r\n              </Box>\r\n\r\n              {/* Date & Time */}\r\n              <Box sx={{ display: 'flex', alignItems: 'center', mb: 3 }}>\r\n                <AccessTimeIcon sx={{ color: '#1976d2', mr: 1, fontSize: 28 }} />\r\n                <Box>\r\n                  <Typography variant=\"h6\" sx={{ fontWeight: 'bold' }}>\r\n                    {bookingDetails.date}\r\n                  </Typography>\r\n                  <Typography variant=\"body2\" color=\"text.secondary\">\r\n                    {formatTime(bookingDetails.startTime)} - {formatTime(bookingDetails.endTime)} ({bookingDetails.durationHours}h)\r\n                  </Typography>\r\n                </Box>\r\n              </Box>\r\n\r\n              {/* Players & Equipment */}\r\n              <Divider sx={{ my: 2 }} />\r\n              <Typography variant=\"h6\" gutterBottom sx={{ fontWeight: 'bold', color: '#424242' }}>\r\n                \uD83D\uDC65 Players & Equipment\r\n              </Typography>\r\n              \r\n              <Grid container spacing={2}>\r\n                <Grid item xs={12} sm={4}>\r\n                  <Box sx={{ textAlign: 'center', p: 2, backgroundColor: '#f5f5f5', borderRadius: 2 }}>\r\n                    <GroupIcon sx={{ color: '#1976d2', fontSize: 32, mb: 1 }} />\r\n                    <Typography variant=\"h6\" sx={{ fontWeight: 'bold' }}>\r\n                      {bookingDetails.numberOfPlayers}\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" color=\"text.secondary\">\r\n                      Players\r\n                    </Typography>\r\n                  </Box>\r\n                </Grid>\r\n                \r\n                <Grid item xs={12} sm={4}>\r\n                  <Box sx={{ textAlign: 'center', p: 2, backgroundColor: '#f5f5f5', borderRadius: 2 }}>\r\n                    <SportsIcon sx={{ color: '#9c27b0', fontSize: 32, mb: 1 }} />\r\n                    <Typography variant=\"h6\" sx={{ fontWeight: 'bold' }}>\r\n                      {bookingDetails.numPaddles}\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" color=\"text.secondary\">\r\n                      Paddles (RM{PADDLE_PRICE} each)\r\n                    </Typography>\r\n                  </Box>\r\n                </Grid>\r\n                \r\n                <Grid item xs={12} sm={4}>\r\n                  <Box sx={{ textAlign: 'center', p: 2, backgroundColor: '#f5f5f5', borderRadius: 2 }}>\r\n                    <SportsIcon sx={{ color: '#4caf50', fontSize: 32, mb: 1 }} />\r\n                    <Typography variant=\"h6\" sx={{ fontWeight: 'bold' }}>\r\n                      {bookingDetails.buyBallSet ? 'Yes' : 'No'}\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" color=\"text.secondary\">\r\n                      Ball Set (RM{BALL_SET_PRICE})\r\n                    </Typography>\r\n                  </Box>\r\n                </Grid>\r\n              </Grid>\r\n            </CardContent>\r\n          </ThemedCard>\r\n        </Box>\r\n\r\n        {/* Right Column - Payment */}\r\n        <Box sx={{ flex: { xs: 'none', md: 1 } }}>\r\n          <ThemedCard sx={{ borderRadius: 3, boxShadow: 2, height: '100%' }}>\r\n            <CardContent sx={{ p: 4 }}>\r\n              <Typography variant=\"h5\" gutterBottom sx={{ fontWeight: 'bold', color: '#2e7d32', mb: 3 }}>\r\n                \uD83D\uDCB3 Payment Details\r\n              </Typography>\r\n\r\n              {/* Total Amount */}\r\n              <Paper \r\n                elevation={0}\r\n                sx={{ \r\n                  background: 'linear-gradient(135deg, #e8f5e9 0%, #c8e6c9 100%)',\r\n                  p: 3,\r\n                  mb: 3,\r\n                  borderRadius: 2,\r\n                  border: '2px solid #4caf50'\r\n                }}\r\n              >\r\n                <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n                  <Typography variant=\"h6\" sx={{ fontWeight: 'bold' }}>\r\n                    Total Amount:\r\n                  </Typography>\r\n                  <Typography variant=\"h4\" sx={{ fontWeight: 'bold', color: '#2e7d32' }}>\r\n                    RM{bookingDetails.price.toFixed(2)}\r\n                  </Typography>\r\n                </Box>\r\n              </Paper>\r\n\r\n              {/* Payment Method Selection */}\r\n              <FormControl component=\"fieldset\" fullWidth sx={{ mb: 3 }}>\r\n                <FormLabel component=\"legend\" sx={{ mb: 2, fontWeight: 'bold', color: '#424242' }}>\r\n                  Select Payment Method\r\n                </FormLabel>\r\n                <RadioGroup\r\n                  value={paymentMethod}\r\n                  onChange={(e) => setPaymentMethod(e.target.value)}\r\n                >\r\n                  {/* Wallet Option */}\r\n                  <ThemedCard \r\n                    variant=\"outlined\" \r\n                    sx={{ \r\n                      mb: 2, \r\n                      borderRadius: 2,\r\n                      border: paymentMethod === 'wallet' ? '2px solid #1976d2' : '1px solid #e0e0e0',\r\n                      backgroundColor: paymentMethod === 'wallet' ? '#f3f8ff' : 'transparent'\r\n                    }}\r\n                  >\r\n                    <FormControlLabel\r\n                      value=\"wallet\"\r\n                      control={<Radio color=\"primary\" />}\r\n                      label={\r\n                        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', width: '100%', p: 1 }}>\r\n                          <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                            <AccountBalanceWalletIcon sx={{ color: '#1976d2', mr: 1 }} />\r\n                            <Typography sx={{ fontWeight: 'bold' }}>SuperBadge Wallet</Typography>\r\n                          </Box>\r\n                          {isLoading ? (\r\n                            <CircularProgress size={20} />\r\n                          ) : error ? (\r\n                            <Typography color=\"error\">Error</Typography>\r\n                          ) : (\r\n                            <Typography fontWeight=\"bold\" color=\"#1976d2\">\r\n                              RM{walletBalance.toFixed(2)}\r\n                            </Typography>\r\n                          )}\r\n                        </Box>\r\n                      }\r\n                      sx={{ p: 2, width: '100%' }}\r\n                    />\r\n                  </ThemedCard>\r\n\r\n                  {/* Credit Card Option */}\r\n                  <ThemedCard \r\n                    variant=\"outlined\" \r\n                    sx={{ \r\n                      borderRadius: 2,\r\n                      border: paymentMethod === 'card' ? '2px solid #1976d2' : '1px solid #e0e0e0',\r\n                      backgroundColor: paymentMethod === 'card' ? '#f3f8ff' : 'transparent'\r\n                    }}\r\n                  >\r\n                    <FormControlLabel\r\n                      value=\"card\"\r\n                      control={<Radio color=\"primary\" />}\r\n                      label={\r\n                        <Box sx={{ display: 'flex', alignItems: 'center', p: 1 }}>\r\n                          <CreditCardIcon sx={{ color: '#1976d2', mr: 1 }} />\r\n                          <Typography sx={{ fontWeight: 'bold' }}>Credit/Debit Card</Typography>\r\n                        </Box>\r\n                      }\r\n                      sx={{ p: 2, width: '100%' }}\r\n                    />\r\n                  </ThemedCard>\r\n                </RadioGroup>\r\n              </FormControl>\r\n\r\n              {/* Insufficient Balance Warning */}\r\n              {paymentMethod === 'wallet' && walletBalance < bookingDetails.price && !isLoading && (\r\n                <Alert severity=\"warning\" sx={{ mb: 3 }}>\r\n                  <Typography variant=\"body2\" sx={{ mb: 1 }}>\r\n                    Insufficient wallet balance. You need RM{(bookingDetails.price - walletBalance).toFixed(2)} more.\r\n                  </Typography>\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    size=\"small\"\r\n                    onClick={() => navigate('/wallet/topup')}\r\n                    sx={{\r\n                      backgroundColor: '#ff9800',\r\n                      '&:hover': {\r\n                        backgroundColor: '#f57c00'\r\n                      }\r\n                    }}\r\n                  >\r\n                    Top Up Wallet\r\n                  </Button>\r\n                </Alert>\r\n              )}\r\n\r\n              {/* Error Alert */}\r\n              {error && (\r\n                <Alert severity=\"error\" sx={{ mb: 3 }}>\r\n                  {error}\r\n                </Alert>\r\n              )}\r\n\r\n              {/* Action Buttons */}\r\n              <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  fullWidth\r\n                  size=\"large\"\r\n                  onClick={handlePayment}\r\n                  disabled={\r\n                    isProcessing ||\r\n                    (paymentMethod === 'wallet' && walletBalance < bookingDetails.price) ||\r\n                    isLoading\r\n                  }\r\n                  sx={{\r\n                    py: 2,\r\n                    backgroundColor: '#4caf50',\r\n                    borderRadius: 2,\r\n                    fontSize: '1.1rem',\r\n                    fontWeight: 'bold',\r\n                    '&:hover': {\r\n                      backgroundColor: '#2e7d32'\r\n                    },\r\n                    '&:disabled': {\r\n                      backgroundColor: '#e0e0e0'\r\n                    }\r\n                  }}\r\n                >\r\n                  {isProcessing ? (\r\n                    <CircularProgress size={24} color=\"inherit\" />\r\n                  ) : (\r\n                    `Pay RM${bookingDetails.price.toFixed(2)}`\r\n                  )}\r\n                </Button>\r\n\r\n                <Button\r\n                  variant=\"outlined\"\r\n                  fullWidth\r\n                  size=\"large\"\r\n                  onClick={() => navigate(-1)}\r\n                  sx={{ \r\n                    py: 2, \r\n                    borderRadius: 2,\r\n                    borderColor: '#757575',\r\n                    color: '#757575',\r\n                    '&:hover': {\r\n                      borderColor: '#424242',\r\n                      backgroundColor: '#f5f5f5'\r\n                    }\r\n                  }}\r\n                >\r\n                  Back to Booking\r\n                </Button>\r\n              </Box>\r\n            </CardContent>\r\n          </ThemedCard>\r\n        </Box>\r\n      </Box>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default PaymentPage;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball-frontend/src/components/court/PaymentPage.jsx b/pickleball-frontend/src/components/court/PaymentPage.jsx
--- a/pickleball-frontend/src/components/court/PaymentPage.jsx	(revision 97abd609899a67b781b8ace8e91358a782fc5acd)
+++ b/pickleball-frontend/src/components/court/PaymentPage.jsx	(date 1753732033149)
@@ -15,6 +15,7 @@
   FormLabel,
   CircularProgress,
   Alert,
+  Checkbox,
   Chip,
   Paper
 } from '@mui/material';
@@ -29,12 +30,20 @@
 import api from '../../api/axiosConfig.js';
 import { getWalletBalance, initializeWallet } from '../../service/WalletService';
 import { useAuth } from '../../context/AuthContext';
+import ClassSessionService from '../../service/ClassSessionService';
 import ThemedCard from '../common/ThemedCard';
 
 const PaymentPage = () => {
   const location = useLocation();
   const navigate = useNavigate();
   const bookingDetails = location.state?.bookingDetails;
+  const session = location.state?.session;
+  const sessionGroup = location.state?.sessionGroup;
+
+  // 新增：friendly match 相關數據
+  const paymentType = location.state?.type;
+  const matchDetails = location.state?.matchDetails;
+
   const [paymentMethod, setPaymentMethod] = useState('wallet');
   const [walletBalance, setWalletBalance] = useState(0);
   const [isLoading, setIsLoading] = useState(true);
@@ -42,6 +51,13 @@
   const [isProcessing, setIsProcessing] = useState(false);
   const { authToken } = useAuth();
 
+  // 檢查是否有補課課程支付數據
+  const [replacementSessionPayment, setReplacementSessionPayment] = useState(null);
+
+  // Friendly match add-on 狀態
+  const [numPaddles, setNumPaddles] = useState(0);
+  const [buyBallSet, setBuyBallSet] = useState(false);
+
   useEffect(() => {
     const fetchWalletBalance = async () => {
       try {
@@ -66,9 +82,27 @@
     };
 
     fetchWalletBalance();
+
+    // 檢查是否有補課課程支付數據
+    const replacementPaymentData = localStorage.getItem('replacementSessionPayment');
+    if (replacementPaymentData) {
+      try {
+        const paymentData = JSON.parse(replacementPaymentData);
+        setReplacementSessionPayment(paymentData);
+        console.log('Replacement session payment data:', paymentData);
+      } catch (error) {
+        console.error('Error parsing replacement session payment data:', error);
+      }
+    }
   }, []);
 
   const handlePayment = async () => {
+    // 檢查付款類型
+    if (paymentType === 'friendly-match') {
+      await handleFriendlyMatchPayment();
+      return;
+    }
+
     if (!bookingDetails) {
       setError('Booking details missing');
       return;
@@ -127,6 +161,613 @@
     }
   };
 
+  // Friendly match payment handler
+  const handleFriendlyMatchPayment = async () => {
+    if (!matchDetails) {
+      setError('Match details missing');
+      return;
+    }
+
+    // 檢查錢包餘額是否足夠
+    const basePrice = matchDetails.price || 0;
+    const paddlePrice = 5;
+    const ballSetPrice = 12;
+    const totalPrice = basePrice + (numPaddles * paddlePrice) + (buyBallSet ? ballSetPrice : 0);
+
+    if (paymentMethod === 'wallet' && walletBalance < totalPrice) {
+      setError('Insufficient wallet balance');
+      return;
+    }
+
+    try {
+      setIsProcessing(true);
+      console.log('Processing friendly match payment for:', matchDetails);
+      console.log('Add-ons:', { numPaddles, buyBallSet, totalPrice });
+
+      // 調用後端 API 進行付款，包含 add-on 信息
+      const paymentData = {
+        numPaddles,
+        buyBallSet,
+        totalPrice
+      };
+
+      const response = await api.post(`/friendly-matches/${matchDetails.id}/pay`, paymentData);
+      console.log('Friendly match payment response:', response.data);
+
+      // 導航到成功頁面
+      navigate('/booking/confirmation', {
+        state: {
+          type: 'friendly-match',
+          matchDetails: {
+            ...matchDetails,
+            numPaddles,
+            buyBallSet,
+            totalPrice
+          },
+          payment: response.data
+        }
+      });
+    } catch (err) {
+      console.error('Friendly match payment error:', err);
+      console.error('Error response:', err.response);
+      console.error('Error data:', err.response?.data);
+
+      let errorMessage = 'Failed to process payment';
+      if (err.response?.data) {
+        errorMessage += ': ' + err.response.data;
+      } else if (err.message) {
+        errorMessage += ': ' + err.message;
+      }
+
+      setError(errorMessage);
+    } finally {
+      setIsProcessing(false);
+    }
+  };
+
+  // Class session payment handler
+  const handleClassSessionPayment = async () => {
+    setIsProcessing(true);
+    setError(null);
+    try {
+      if (sessionGroup) {
+        for (const sess of sessionGroup) {
+          await api.post(`/class-sessions/${sess.id}/register`, { userId: JSON.parse(localStorage.getItem('currentUser'))?.id });
+        }
+      } else if (session) {
+        await api.post(`/class-sessions/${session.id}/register`, { userId: JSON.parse(localStorage.getItem('currentUser'))?.id });
+      }
+      navigate('/profile');
+    } catch (err) {
+      setError('Class session payment failed.');
+    } finally {
+      setIsProcessing(false);
+    }
+  };
+
+  // Replacement session payment handler (教練支付球場費用)
+  const handleReplacementSessionPayment = async () => {
+    setIsProcessing(true);
+    setError(null);
+    try {
+      // 這裡可以添加實際的支付邏輯
+      // 目前只是模擬支付成功
+      console.log('Processing replacement session payment:', replacementSessionPayment);
+
+      // 清除 localStorage 中的支付數據
+      localStorage.removeItem('replacementSessionPayment');
+
+      // 跳轉回教練儀表板
+      navigate('/coaching');
+
+      alert('Payment successful! Replacement session has been confirmed.');
+    } catch (err) {
+      setError('Replacement session payment failed: ' + err.message);
+    } finally {
+      setIsProcessing(false);
+    }
+  };
+
+  // If replacement session payment (教練支付球場費用)
+  if (replacementSessionPayment) {
+    return (
+      <Container maxWidth="sm" sx={{ py: 6 }}>
+        <Card sx={{ p: 4, borderRadius: '16px', boxShadow: '0 8px 24px rgba(149, 157, 165, 0.2)' }}>
+          <Typography variant="h5" gutterBottom sx={{ fontWeight: 'bold', mb: 3, textAlign: 'center' }}>
+            Replacement Session Payment
+          </Typography>
+          <Box sx={{ border: '1px solid #e0e0e0', borderRadius: '8px', mb: 4, textAlign: 'left', backgroundColor: '#f9f9f9' }}>
+            <Box sx={{ p: 3 }}>
+              <Typography variant="h6" gutterBottom sx={{ fontWeight: 'bold' }}>
+                Court Booking Summary
+              </Typography>
+              <Typography mb={1}>Court: {replacementSessionPayment.courtName}</Typography>
+              <Typography mb={1}>Duration: {replacementSessionPayment.duration} hour(s)</Typography>
+              <Typography mb={1}>Price per hour: RM {replacementSessionPayment.pricePerHour}</Typography>
+              <Typography mb={1}>Student(s): {replacementSessionPayment.studentCount}</Typography>
+              {replacementSessionPayment.studentName && (
+                <Typography mb={1}>Student: {replacementSessionPayment.studentName}</Typography>
+              )}
+              <Typography mb={2} fontWeight="bold">Total Amount: RM {replacementSessionPayment.amount}</Typography>
+              <Typography variant="body2" color="text.secondary">
+                Note: This payment is for the court booking fee. Students do not need to pay for replacement sessions.
+              </Typography>
+            </Box>
+          </Box>
+          <FormControl component="fieldset" fullWidth sx={{ mb: 3 }}>
+            <FormLabel component="legend" sx={{ mb: 2, fontWeight: 'bold' }}>
+              Select Payment Method
+            </FormLabel>
+            <RadioGroup
+              value={paymentMethod}
+              onChange={(e) => setPaymentMethod(e.target.value)}
+            >
+              <Card variant="outlined" sx={{ mb: 2, borderRadius: '8px' }}>
+                <FormControlLabel
+                  value="wallet"
+                  control={<Radio />}
+                  label={
+                    <Box sx={{ display: 'flex', justifyContent: 'space-between', width: '100%' }}>
+                      <Typography>Wallet Balance</Typography>
+                      {isLoading ? (
+                        <CircularProgress size={20} />
+                      ) : error ? (
+                        <Typography color="error">Error</Typography>
+                      ) : (
+                        <Typography fontWeight="bold">
+                          RM{walletBalance.toFixed(2)}
+                        </Typography>
+                      )}
+                    </Box>
+                  }
+                  sx={{ p: 2, width: '100%' }}
+                />
+              </Card>
+              <Card variant="outlined" sx={{ borderRadius: '8px' }}>
+                <FormControlLabel
+                  value="card"
+                  control={<Radio />}
+                  label="Credit/Debit Card"
+                  sx={{ p: 2, width: '100%' }}
+                />
+              </Card>
+            </RadioGroup>
+          </FormControl>
+          {paymentMethod === 'wallet' && walletBalance < replacementSessionPayment.amount && !isLoading && (
+            <Alert severity="error" sx={{ mb: 3 }}>
+              Insufficient wallet balance. Please add RM{(replacementSessionPayment.amount - walletBalance).toFixed(2)} or choose another payment method.
+              <Box sx={{ mt: 2 }}>
+                <Button
+                  variant="contained"
+                  size="small"
+                  onClick={() => navigate('/profile/wallet')}
+                >
+                  Top Up Wallet
+                </Button>
+              </Box>
+            </Alert>
+          )}
+          <Box sx={{ display: 'flex', gap: 2, justifyContent: 'center' }}>
+            <Button
+              variant="outlined"
+              onClick={() => {
+                localStorage.removeItem('replacementSessionPayment');
+                navigate('/coaching');
+              }}
+              disabled={isProcessing}
+              sx={{ minWidth: 120 }}
+            >
+              Cancel
+            </Button>
+            <Button
+              variant="contained"
+              onClick={handleReplacementSessionPayment}
+              disabled={isProcessing || (paymentMethod === 'wallet' && walletBalance < replacementSessionPayment.amount)}
+              sx={{ minWidth: 120 }}
+            >
+              {isProcessing ? <CircularProgress size={20} /> : `Pay RM ${replacementSessionPayment.amount}`}
+            </Button>
+          </Box>
+        </Card>
+      </Container>
+    );
+  }
+
+  // If class session payment
+  if (session || sessionGroup) {
+    const group = sessionGroup || (session ? [session] : []);
+    const totalPrice = group.reduce((sum, sess) => sum + (sess.price || 0), 0);
+    // Unified payment UI
+    return (
+      <Container maxWidth="sm" sx={{ py: 6 }}>
+        <Card sx={{ p: 4, borderRadius: '16px', boxShadow: '0 8px 24px rgba(149, 157, 165, 0.2)' }}>
+          <Typography variant="h5" gutterBottom sx={{ fontWeight: 'bold', mb: 3, textAlign: 'center' }}>
+            Class Session Payment
+          </Typography>
+          <Box sx={{ border: '1px solid #e0e0e0', borderRadius: '8px', mb: 4, textAlign: 'left', backgroundColor: '#f9f9f9' }}>
+            <Box sx={{ p: 3 }}>
+              <Typography variant="h6" gutterBottom sx={{ fontWeight: 'bold' }}>
+                Session Summary
+              </Typography>
+              <Typography mb={1}>Coach: {group[0]?.coachName || group[0]?.coach?.name || '-'}</Typography>
+              <Typography mb={1}>Venue: {group[0]?.venue || group[0]?.venueName || '-'}</Typography>
+              <Typography mb={1}>Total {group.length} sessions</Typography>
+              <Box mb={2}>
+                {group.map(sess => (
+                  <Typography key={sess.id} variant="body2" color="text.secondary">
+                    {sess.date} {sess.time} | Price: RM {sess.price}
+                  </Typography>
+                ))}
+              </Box>
+              <Typography mb={2} fontWeight="bold">Total Price: RM {totalPrice}</Typography>
+            </Box>
+          </Box>
+          <FormControl component="fieldset" fullWidth sx={{ mb: 3 }}>
+            <FormLabel component="legend" sx={{ mb: 2, fontWeight: 'bold' }}>
+              Select Payment Method
+            </FormLabel>
+            <RadioGroup
+              value={paymentMethod}
+              onChange={(e) => setPaymentMethod(e.target.value)}
+            >
+              <Card variant="outlined" sx={{ mb: 2, borderRadius: '8px' }}>
+                <FormControlLabel
+                  value="wallet"
+                  control={<Radio />}
+                  label={
+                    <Box sx={{ display: 'flex', justifyContent: 'space-between', width: '100%' }}>
+                      <Typography>Wallet Balance</Typography>
+                      {isLoading ? (
+                        <CircularProgress size={20} />
+                      ) : error ? (
+                        <Typography color="error">Error</Typography>
+                      ) : (
+                        <Typography fontWeight="bold">
+                          RM{walletBalance.toFixed(2)}
+                        </Typography>
+                      )}
+                    </Box>
+                  }
+                  sx={{ p: 2, width: '100%' }}
+                />
+              </Card>
+              <Card variant="outlined" sx={{ borderRadius: '8px' }}>
+                <FormControlLabel
+                  value="card"
+                  control={<Radio />}
+                  label="Credit/Debit Card"
+                  sx={{ p: 2, width: '100%' }}
+                />
+              </Card>
+            </RadioGroup>
+          </FormControl>
+          {paymentMethod === 'wallet' && walletBalance < totalPrice && !isLoading && (
+            <Alert severity="error" sx={{ mb: 3 }}>
+              Insufficient wallet balance. Please add RM{(totalPrice - walletBalance).toFixed(2)} or choose another payment method.
+              <Box sx={{ mt: 2 }}>
+                <Button
+                  variant="contained"
+                  size="small"
+                  onClick={() => navigate('/wallet/topup')}
+                  sx={{ backgroundColor: '#ff9800', '&:hover': { backgroundColor: '#f57c00' } }}
+                >
+                  Top Up Wallet
+                </Button>
+              </Box>
+            </Alert>
+          )}
+          {error && (
+            <Alert severity="error" sx={{ mb: 3 }}>{error}</Alert>
+          )}
+          <Button
+            variant="contained"
+            fullWidth
+            size="large"
+            onClick={async () => {
+              setIsProcessing(true);
+              setError(null);
+              try {
+                const user = JSON.parse(localStorage.getItem('currentUser'));
+                console.log('userId for payment:', user.id, typeof user.id);
+                if (paymentMethod === 'wallet' && walletBalance < totalPrice) {
+                  setError('Insufficient wallet balance.');
+                  setIsProcessing(false);
+                  return;
+                }
+                // Register for all sessions (new API)
+                if (sessionGroup) {
+                  await ClassSessionService.registerForMultipleSessions(sessionGroup.map(s => s.id), paymentMethod);
+                } else if (session) {
+                  await ClassSessionService.registerForMultipleSessions([session.id], paymentMethod);
+                }
+                // Show receipt
+                navigate('/booking/confirmation', {
+                  state: {
+                    booking: {
+                      type: 'class-session',
+                      sessions: sessionGroup || (session ? [session] : []),
+                      totalPrice,
+                      paymentMethod,
+                      paidAt: new Date().toISOString()
+                    }
+                  }
+                });
+                return;
+              } catch (err) {
+                setError('Class session payment failed.');
+              } finally {
+                setIsProcessing(false);
+              }
+            }}
+            disabled={
+              isProcessing ||
+              (paymentMethod === 'wallet' && walletBalance < totalPrice) ||
+              isLoading
+            }
+            sx={{ py: 1.5, backgroundColor: '#4caf50', '&:hover': { backgroundColor: '#2e7d32' }, '&:disabled': { backgroundColor: '#e0e0e0' } }}
+          >
+            {isProcessing ? <CircularProgress size={24} color="inherit" /> : 'Pay Now'}
+          </Button>
+          <Button
+            variant="outlined"
+            fullWidth
+            size="large"
+            onClick={() => navigate(-1)}
+            sx={{ mt: 2, py: 1.5 }}
+          >
+            Back to Booking
+          </Button>
+        </Card>
+      </Container>
+    );
+  }
+
+  // 檢查是否有 friendly match 數據
+  if (paymentType === 'friendly-match' && matchDetails) {
+    // 添加調試信息
+    console.log('=== PaymentPage Friendly Match Debug ===');
+    console.log('Match Details:', matchDetails);
+    console.log('Price from matchDetails:', matchDetails.price);
+    console.log('Payment Type:', paymentType);
+
+    // 計算 friendly match 的總價
+    const basePrice = matchDetails.price || 0;
+    const paddlePrice = 5; // 每個 paddle 租金
+    const ballSetPrice = 12; // 一組 ball set 售價
+
+    const totalPrice = basePrice + (numPaddles * paddlePrice) + (buyBallSet ? ballSetPrice : 0);
+
+    console.log('Base Price:', basePrice);
+    console.log('Total Price:', totalPrice);
+
+    return (
+      <Container maxWidth="sm" sx={{ py: 6 }}>
+        <Card sx={{ p: 4, borderRadius: '16px', boxShadow: '0 8px 24px rgba(149, 157, 165, 0.2)' }}>
+          <Typography variant="h5" gutterBottom sx={{ fontWeight: 'bold', mb: 3, textAlign: 'center' }}>
+            Friendly Match Payment
+          </Typography>
+          <Box sx={{ border: '1px solid #e0e0e0', borderRadius: '8px', mb: 4, textAlign: 'left', backgroundColor: '#f9f9f9' }}>
+            <Box sx={{ p: 3 }}>
+              <Typography variant="h6" gutterBottom sx={{ fontWeight: 'bold' }}>
+                Match Summary
+              </Typography>
+              <Typography mb={1}>Match ID: #{matchDetails.id}</Typography>
+              <Typography mb={1}>Organizer: {matchDetails.organizer}</Typography>
+              <Typography mb={1}>Players: {matchDetails.currentPlayers} / {matchDetails.maxPlayers}</Typography>
+              <Typography mb={1}>Court: {matchDetails.courtName}</Typography>
+              <Typography mb={1}>Venue: {matchDetails.venueName}</Typography>
+              <Typography mb={1}>Location: {matchDetails.location}</Typography>
+              <Typography mb={1}>Date: {new Date(matchDetails.startTime).toLocaleDateString()}</Typography>
+              <Typography mb={1}>Time: {new Date(matchDetails.startTime).toLocaleTimeString()} - {new Date(matchDetails.endTime).toLocaleTimeString()}</Typography>
+              <Typography mb={2} fontWeight="bold" color="primary">Payment Status: {matchDetails.paymentStatus}</Typography>
+
+              {/* Add-on Options */}
+              <Typography variant="h6" gutterBottom sx={{ fontWeight: 'bold', mt: 3 }}>
+                Add-on Options
+              </Typography>
+
+              <Grid container spacing={2} sx={{ mb: 2 }}>
+                <Grid item xs={6}>
+                  <Typography variant="body2" color="text.secondary">
+                    Paddles to Rent:
+                  </Typography>
+                </Grid>
+                <Grid item xs={6}>
+                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
+                    <Button
+                      size="small"
+                      variant="outlined"
+                      onClick={() => setNumPaddles(Math.max(0, numPaddles - 1))}
+                      sx={{ minWidth: '32px', height: '32px' }}
+                    >
+                      -
+                    </Button>
+                    <Typography variant="body2" sx={{ minWidth: '20px', textAlign: 'center' }}>
+                      {numPaddles}
+                    </Typography>
+                    <Button
+                      size="small"
+                      variant="outlined"
+                      onClick={() => setNumPaddles(numPaddles + 1)}
+                      sx={{ minWidth: '32px', height: '32px' }}
+                    >
+                      +
+                    </Button>
+                    <Typography variant="body2" color="text.secondary" sx={{ ml: 1 }}>
+                      (RM{paddlePrice} each)
+                    </Typography>
+                  </Box>
+                </Grid>
+
+                <Grid item xs={6}>
+                  <Typography variant="body2" color="text.secondary">
+                    Buy Ball Set:
+                  </Typography>
+                </Grid>
+                <Grid item xs={6}>
+                  <FormControlLabel
+                    control={
+                      <Checkbox
+                        checked={buyBallSet}
+                        onChange={(e) => setBuyBallSet(e.target.checked)}
+                      />
+                    }
+                    label={`Yes (RM${ballSetPrice})`}
+                  />
+                </Grid>
+              </Grid>
+
+              <Divider sx={{ my: 2 }} />
+
+              {/* Total Amount */}
+              <Grid container>
+                <Grid item xs={6}>
+                  <Typography variant="body1" fontWeight="bold">
+                    Base Price:
+                  </Typography>
+                </Grid>
+                <Grid item xs={6} textAlign="right">
+                  <Typography variant="body1">
+                    RM{basePrice.toFixed(2)}
+                  </Typography>
+                </Grid>
+
+                {numPaddles > 0 && (
+                  <>
+                    <Grid item xs={6}>
+                      <Typography variant="body2" color="text.secondary">
+                        Paddles ({numPaddles} × RM{paddlePrice}):
+                      </Typography>
+                    </Grid>
+                    <Grid item xs={6} textAlign="right">
+                      <Typography variant="body2">
+                        RM{(numPaddles * paddlePrice).toFixed(2)}
+                      </Typography>
+                    </Grid>
+                  </>
+                )}
+
+                {buyBallSet && (
+                  <>
+                    <Grid item xs={6}>
+                      <Typography variant="body2" color="text.secondary">
+                        Ball Set:
+                      </Typography>
+                    </Grid>
+                    <Grid item xs={6} textAlign="right">
+                      <Typography variant="body2">
+                        RM{ballSetPrice.toFixed(2)}
+                      </Typography>
+                    </Grid>
+                  </>
+                )}
+
+                <Grid item xs={6}>
+                  <Typography variant="h6" fontWeight="bold">
+                    Total Amount:
+                  </Typography>
+                </Grid>
+                <Grid item xs={6} textAlign="right">
+                  <Typography variant="h6" fontWeight="bold" color="#2e7d32">
+                    RM{totalPrice.toFixed(2)}
+                  </Typography>
+                </Grid>
+              </Grid>
+            </Box>
+          </Box>
+          <FormControl component="fieldset" fullWidth sx={{ mb: 3 }}>
+            <FormLabel component="legend" sx={{ mb: 2, fontWeight: 'bold' }}>
+              Select Payment Method
+            </FormLabel>
+            <RadioGroup
+              value={paymentMethod}
+              onChange={(e) => setPaymentMethod(e.target.value)}
+            >
+              <Card variant="outlined" sx={{ mb: 2, borderRadius: '8px' }}>
+                <FormControlLabel
+                  value="wallet"
+                  control={<Radio />}
+                  label={
+                    <Box sx={{ display: 'flex', justifyContent: 'space-between', width: '100%' }}>
+                      <Typography>Wallet Balance</Typography>
+                      {isLoading ? (
+                        <CircularProgress size={20} />
+                      ) : error ? (
+                        <Typography color="error">Error</Typography>
+                      ) : (
+                        <Typography fontWeight="bold">
+                          RM{walletBalance.toFixed(2)}
+                        </Typography>
+                      )}
+                    </Box>
+                  }
+                  sx={{ p: 2, width: '100%' }}
+                />
+              </Card>
+              <Card variant="outlined" sx={{ borderRadius: '8px' }}>
+                <FormControlLabel
+                  value="card"
+                  control={<Radio />}
+                  label="Credit/Debit Card"
+                  sx={{ p: 2, width: '100%' }}
+                />
+              </Card>
+            </RadioGroup>
+          </FormControl>
+          {error && (
+            <Alert severity="error" sx={{ mb: 3 }}>
+              {error}
+            </Alert>
+          )}
+          {paymentMethod === 'wallet' && walletBalance < totalPrice && !isLoading && (
+            <Alert severity="error" sx={{ mb: 3 }}>
+              Insufficient wallet balance. Please add RM{(totalPrice - walletBalance).toFixed(2)} or choose another payment method.
+              <Box sx={{ mt: 2 }}>
+                <Button
+                  variant="contained"
+                  size="small"
+                  onClick={() => navigate('/wallet/topup')}
+                  sx={{
+                    backgroundColor: '#ff9800',
+                    '&:hover': {
+                      backgroundColor: '#f57c00'
+                    }
+                  }}
+                >
+                  Top Up Wallet
+                </Button>
+              </Box>
+            </Alert>
+          )}
+
+          <Button
+            variant="contained"
+            fullWidth
+            size="large"
+            onClick={handleFriendlyMatchPayment}
+            disabled={
+              isProcessing ||
+              isLoading ||
+              (paymentMethod === 'wallet' && walletBalance < totalPrice)
+            }
+            sx={{ py: 1.5, backgroundColor: '#4caf50', '&:hover': { backgroundColor: '#2e7d32' }, '&:disabled': { backgroundColor: '#e0e0e0' } }}
+          >
+            {isProcessing ? <CircularProgress size={24} color="inherit" /> : 'Pay for Match'}
+          </Button>
+          <Button
+            variant="outlined"
+            fullWidth
+            size="large"
+            onClick={() => navigate('/friendly-matches')}
+            sx={{ mt: 2, py: 1.5 }}
+          >
+            Back to Matches
+          </Button>
+        </Card>
+      </Container>
+    );
+  }
+
   if (!bookingDetails) {
     return (
       <Container sx={{ py: 4, textAlign: 'center' }}>
@@ -161,11 +802,11 @@
         </Typography>
       </Box>
 
-      <Box sx={{ 
-        display: 'flex', 
-        flexDirection: { xs: 'column', md: 'row' }, 
-        gap: 3, 
-        minHeight: '600px' 
+      <Box sx={{
+        display: 'flex',
+        flexDirection: { xs: 'column', md: 'row' },
+        gap: 3,
+        minHeight: '600px'
       }}>
         {/* Left Column - Booking Summary */}
         <Box sx={{ flex: { xs: 'none', md: 1 } }}>
@@ -206,7 +847,7 @@
               <Typography variant="h6" gutterBottom sx={{ fontWeight: 'bold', color: '#424242' }}>
                 👥 Players & Equipment
               </Typography>
-              
+
               <Grid container spacing={2}>
                 <Grid item xs={12} sm={4}>
                   <Box sx={{ textAlign: 'center', p: 2, backgroundColor: '#f5f5f5', borderRadius: 2 }}>
@@ -219,7 +860,7 @@
                     </Typography>
                   </Box>
                 </Grid>
-                
+
                 <Grid item xs={12} sm={4}>
                   <Box sx={{ textAlign: 'center', p: 2, backgroundColor: '#f5f5f5', borderRadius: 2 }}>
                     <SportsIcon sx={{ color: '#9c27b0', fontSize: 32, mb: 1 }} />
@@ -231,7 +872,7 @@
                     </Typography>
                   </Box>
                 </Grid>
-                
+
                 <Grid item xs={12} sm={4}>
                   <Box sx={{ textAlign: 'center', p: 2, backgroundColor: '#f5f5f5', borderRadius: 2 }}>
                     <SportsIcon sx={{ color: '#4caf50', fontSize: 32, mb: 1 }} />
@@ -257,9 +898,9 @@
               </Typography>
 
               {/* Total Amount */}
-              <Paper 
+              <Paper
                 elevation={0}
-                sx={{ 
+                sx={{
                   background: 'linear-gradient(135deg, #e8f5e9 0%, #c8e6c9 100%)',
                   p: 3,
                   mb: 3,
@@ -287,10 +928,10 @@
                   onChange={(e) => setPaymentMethod(e.target.value)}
                 >
                   {/* Wallet Option */}
-                  <ThemedCard 
-                    variant="outlined" 
-                    sx={{ 
-                      mb: 2, 
+                  <ThemedCard
+                    variant="outlined"
+                    sx={{
+                      mb: 2,
                       borderRadius: 2,
                       border: paymentMethod === 'wallet' ? '2px solid #1976d2' : '1px solid #e0e0e0',
                       backgroundColor: paymentMethod === 'wallet' ? '#f3f8ff' : 'transparent'
@@ -321,9 +962,9 @@
                   </ThemedCard>
 
                   {/* Credit Card Option */}
-                  <ThemedCard 
-                    variant="outlined" 
-                    sx={{ 
+                  <ThemedCard
+                    variant="outlined"
+                    sx={{
                       borderRadius: 2,
                       border: paymentMethod === 'card' ? '2px solid #1976d2' : '1px solid #e0e0e0',
                       backgroundColor: paymentMethod === 'card' ? '#f3f8ff' : 'transparent'
@@ -411,8 +1052,8 @@
                   fullWidth
                   size="large"
                   onClick={() => navigate(-1)}
-                  sx={{ 
-                    py: 2, 
+                  sx={{
+                    py: 2,
                     borderRadius: 2,
                     borderColor: '#757575',
                     color: '#757575',
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/EventDetailDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.dto;\r\n\r\nimport lombok.Data;\r\nimport java.time.LocalDateTime;\r\nimport java.util.List;\r\n\r\n@Data\r\npublic class EventDetailDto {\r\n    private Integer id;\r\n    private String title;\r\n    private LocalDateTime startTime;\r\n    private LocalDateTime endTime;\r\n    private String eventType;\r\n    private Integer capacity;\r\n    private String location;\r\n    private String status;\r\n    private String skillLevel;\r\n    private String eligibility;\r\n    private String schedule;\r\n    private Double feeAmount;\r\n    \r\n    // Organizer information\r\n    private Integer organizerId;\r\n    private String organizerName;\r\n    private String organizerEmail;\r\n    private Double organizerRating;\r\n    \r\n    // Additional details for browsing\r\n    private boolean isUpcoming;\r\n    private boolean isEligible; // based on user's tier\r\n    private String timeUntilEvent; // e.g., \"2 days\", \"3 hours\"\r\n    private Integer currentParticipants; // if tracking participants\r\n    private List<String> availableSlots; // if applicable\r\n} 
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/EventDetailDto.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/EventDetailDto.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/EventDetailDto.java	(revision 97abd609899a67b781b8ace8e91358a782fc5acd)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/EventDetailDto.java	(date 1753722380822)
@@ -12,10 +12,7 @@
     private LocalDateTime endTime;
     private String eventType;
     private Integer capacity;
-    private String location;
     private String status;
-    private String skillLevel;
-    private String eligibility;
     private String schedule;
     private Double feeAmount;
     
@@ -27,8 +24,12 @@
     
     // Additional details for browsing
     private boolean isUpcoming;
-    private boolean isEligible; // based on user's tier
     private String timeUntilEvent; // e.g., "2 days", "3 hours"
     private Integer currentParticipants; // if tracking participants
     private List<String> availableSlots; // if applicable
+    private Integer venueId;
+    private String venueName;
+    private String venueState; // 新增
+    private String venueLocation; // 新增
+    private List<CourtDto> courts;
 } 
\ No newline at end of file
Index: pickleball-frontend/src/components/event/FriendlyMatchPage.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Box,\r\n  Container,\r\n  Typography,\r\n  Card,\r\n  CardContent,\r\n  Avatar,\r\n  Button,\r\n  Chip,\r\n  Grid,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  ListItemAvatar,\r\n  Tab,\r\n  Tabs,\r\n  Paper,\r\n  IconButton,\r\n  LinearProgress,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  Alert,\r\n  Divider,\r\n  Stack,\r\n  TextField,\r\n  useMediaQuery,\r\n  CircularProgress\r\n} from '@mui/material';\r\nimport {\r\n  CalendarToday,\r\n  LocationOn,\r\n  AttachMoney,\r\n  AccessTime,\r\n  Star,\r\n  Favorite,\r\n  FavoriteBorder,\r\n  Notifications,\r\n  NotificationsOff,\r\n  PersonAdd,\r\n  CheckCircle,\r\n  Pending,\r\n  ExitToApp,\r\n  Close,\r\n  Send,\r\n  Info\r\n} from '@mui/icons-material';\r\nimport * as FriendlyMatchService from '../../service/FriendlyMatchService';\r\nimport { useAuth } from '../../context/AuthContext';\r\nimport ThemedCard from '../common/ThemedCard';\r\nimport { useTheme, alpha } from '@mui/material/styles';\r\n\r\nconst FriendlyMatchPage = () => {\r\n  const theme = useTheme();\r\n  const isMobile = useMediaQuery(theme.breakpoints.down('md'));\r\n  const { currentUser } = useAuth();\r\n\r\n  const [activeTab, setActiveTab] = useState(0);\r\n  const [isLiked, setIsLiked] = useState(false);\r\n  const [isNotified, setIsNotified] = useState(false);\r\n  const [joinStatus, setJoinStatus] = useState('not_joined');\r\n  const [showJoinModal, setShowJoinModal] = useState(false);\r\n  const [showCancelModal, setShowCancelModal] = useState(false);\r\n  const [joinMessage, setJoinMessage] = useState('');\r\n  const [reminderSet, setReminderSet] = useState(false);\r\n  const [match, setMatch] = useState({\r\n    id: 1,\r\n    startTime: \"2025-07-10T10:00:00\",\r\n    location: \"Central Park Court 1\",\r\n    maxPlayers: 4,\r\n    currentPlayers: 2,\r\n    status: \"OPEN\",\r\n    organizer: { username: \"OrganizerName\" },\r\n    entryFee: \"Free\",\r\n    matchRules: \"Friendly competitive match between two skilled teams\",\r\n    participants: { 1: \"APPROVED\", 2: \"REQUESTED\" }\r\n  });\r\n  const [pendingRequests, setPendingRequests] = useState([\r\n    { name: \"User 2\", rating: 4.0, message: \"Looking forward to it!\" }\r\n  ]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Simulate reminder notification 24 hours before match\r\n  useEffect(() => {\r\n    if (joinStatus === 'confirmed' && !reminderSet && match) {\r\n      const reminderTimeout = setTimeout(() => {\r\n        alert('Reminder: Your match is tomorrow at ' + (match.startTime ? new Date(match.startTime).toLocaleTimeString() : '') + ' at ' + (match.location || '') + '!');\r\n        setReminderSet(true);\r\n      }, 5000);\r\n      return () => clearTimeout(reminderTimeout);\r\n    }\r\n  }, [joinStatus, reminderSet, match]);\r\n\r\n  const handleJoinRequest = () => {\r\n    if (!currentUser) {\r\n      alert('Please log in to join matches');\r\n      return;\r\n    }\r\n    setShowJoinModal(true);\r\n  };\r\n\r\n  const confirmJoinRequest = async () => {\r\n    if (!match || !currentUser) return;\r\n    try {\r\n      await FriendlyMatchService.joinMatch(match.id, currentUser.id);\r\n      setJoinStatus('pending');\r\n      setShowJoinModal(false);\r\n      setJoinMessage('');\r\n    } catch (err) {\r\n      alert('Failed to send join request.');\r\n    }\r\n  };\r\n\r\n  const handleCancelJoin = () => {\r\n    setShowCancelModal(true);\r\n  };\r\n\r\n  const confirmCancelJoin = async () => {\r\n    if (!match || !currentUser) return;\r\n    try {\r\n      await FriendlyMatchService.cancelJoin(match.id, currentUser.id);\r\n      setJoinStatus('cancelled');\r\n      setShowCancelModal(false);\r\n      alert('You have cancelled your participation. The organizer has been notified.');\r\n    } catch (err) {\r\n      alert('Failed to cancel participation.');\r\n    }\r\n  };\r\n\r\n  const getJoinButtonProps = () => {\r\n    switch (joinStatus) {\r\n      case 'not_joined':\r\n        return {\r\n          text: 'Send Join Request',\r\n          icon: <PersonAdd />,\r\n          color: 'primary',\r\n          variant: 'contained',\r\n          onClick: handleJoinRequest,\r\n          disabled: false\r\n        };\r\n      case 'pending':\r\n        return {\r\n          text: 'Request Pending',\r\n          icon: <Pending />,\r\n          color: 'warning',\r\n          variant: 'contained',\r\n          onClick: () => {},\r\n          disabled: true\r\n        };\r\n      case 'confirmed':\r\n        return {\r\n          text: 'Joined Match',\r\n          icon: <CheckCircle />,\r\n          color: 'success',\r\n          variant: 'contained',\r\n          onClick: () => {},\r\n          disabled: true\r\n        };\r\n      case 'cancelled':\r\n        return {\r\n          text: 'Send Join Request',\r\n          icon: <PersonAdd />,\r\n          color: 'primary',\r\n          variant: 'contained',\r\n          onClick: handleJoinRequest,\r\n          disabled: false\r\n        };\r\n      default:\r\n        return {\r\n          text: 'Send Join Request',\r\n          icon: <PersonAdd />,\r\n          color: 'primary',\r\n          variant: 'contained',\r\n          onClick: handleJoinRequest,\r\n          disabled: false\r\n        };\r\n    }\r\n  };\r\n\r\n  const handleTabChange = (event, newValue) => {\r\n    setActiveTab(newValue);\r\n  };\r\n\r\n  const TabPanel = ({ children, value, index }) => (\r\n    <div hidden={value !== index}>\r\n      {value === index && <Box sx={{ p: 3 }}>{children}</Box>}\r\n    </div>\r\n  );\r\n\r\n  const TeamCard = ({ team, isAway = false }) => (\r\n    <Box \r\n      display=\"flex\" \r\n      alignItems=\"center\" \r\n      gap={2} \r\n      flexDirection={isAway ? (isMobile ? 'column' : 'row-reverse') : (isMobile ? 'column' : 'row')}\r\n      textAlign={isMobile ? 'center' : (isAway ? 'right' : 'left')}\r\n    >\r\n      <Avatar \r\n        sx={{ \r\n          width: 60, \r\n          height: 60, \r\n          bgcolor: team?.color || '#1976d2', \r\n          fontSize: '2rem',\r\n          order: isAway ? 2 : 1\r\n        }}\r\n      >\r\n        {team?.logo || '\uD83C\uDFF8'}\r\n      </Avatar>\r\n      <Box sx={{ order: isAway ? 1 : 2 }}>\r\n        <Typography variant=\"h6\" fontWeight=\"bold\" color=\"white\">\r\n          {team?.name || (isAway ? 'Away Team' : 'Home Team')}\r\n        </Typography>\r\n        <Box display=\"flex\" alignItems=\"center\" gap={1} flexDirection={isAway ? 'row-reverse' : 'row'}>\r\n          <Star sx={{ color: '#ffd700', fontSize: '1rem' }} />\r\n          <Typography variant=\"body2\" color=\"rgba(255,255,255,0.8)\">\r\n            {team?.rating || 4.0} ({team?.wins || 0}W-{team?.losses || 0}L)\r\n          </Typography>\r\n        </Box>\r\n        <Typography variant=\"body2\" color=\"rgba(255,255,255,0.7)\">\r\n          {team?.players || 0} players\r\n        </Typography>\r\n      </Box>\r\n    </Box>\r\n  );\r\n\r\n  const buttonProps = getJoinButtonProps();\r\n\r\n  // Demo teams (replace with real data if available)\r\n  const homeTeam = {\r\n    name: match.organizer?.username || 'Home Team',\r\n    logo: '\uD83E\uDD85',\r\n    players: match.currentPlayers || 0,\r\n    rating: 4.2,\r\n    wins: 15,\r\n    losses: 3,\r\n    color: '#1976d2'\r\n  };\r\n  const awayTeam = {\r\n    name: 'Challengers',\r\n    logo: '⚡',\r\n    players: (match.maxPlayers || 0) - (match.currentPlayers || 0),\r\n    rating: 4.5,\r\n    wins: 18,\r\n    losses: 2,\r\n    color: '#f57c00'\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\" sx={{ py: 4 }}>\r\n      {/* Header */}\r\n      <ThemedCard \r\n        elevation={3} \r\n        sx={{ \r\n          p: 3, \r\n          mb: 3, \r\n          background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n          color: 'white'\r\n        }}\r\n      >\r\n        <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={2}>\r\n          <Typography variant=\"h4\" fontWeight=\"bold\">\r\n            Friendly Match\r\n          </Typography>\r\n          <Box display=\"flex\" gap={1}>\r\n            <IconButton \r\n              onClick={() => setIsLiked(!isLiked)}\r\n              sx={{ color: 'white' }}\r\n            >\r\n              {isLiked ? <Favorite /> : <FavoriteBorder />}\r\n            </IconButton>\r\n            <IconButton \r\n              onClick={() => setIsNotified(!isNotified)}\r\n              sx={{ color: 'white' }}\r\n            >\r\n              {isNotified ? <Notifications /> : <NotificationsOff />}\r\n            </IconButton>\r\n            <IconButton sx={{ color: 'white' }}>\r\n              {/* Share icon, no action */}\r\n            </IconButton>\r\n          </Box>\r\n        </Box>\r\n        {/* Teams */}\r\n        <Grid container spacing={3} alignItems=\"center\">\r\n          <Grid item xs={12} md={4}>\r\n            <TeamCard team={homeTeam} />\r\n          </Grid>\r\n          <Grid item xs={12} md={4}>\r\n            <Box textAlign=\"center\">\r\n              <Typography variant=\"h3\" fontWeight=\"bold\" color=\"white\">\r\n                VS\r\n              </Typography>\r\n              <Chip \r\n                label={match.status}\r\n                color={match.status === 'OPEN' ? 'success' : 'warning'}\r\n                sx={{ mt: 1, fontWeight: 'bold' }}\r\n              />\r\n            </Box>\r\n          </Grid>\r\n          <Grid item xs={12} md={4}>\r\n            <TeamCard team={awayTeam} isAway />\r\n          </Grid>\r\n        </Grid>\r\n      </ThemedCard>\r\n\r\n      {/* Match Details */}\r\n      <ThemedCard elevation={2} sx={{ mb: 3 }}>\r\n        <CardContent>\r\n          <Typography variant=\"h6\" gutterBottom>\r\n            Match Details\r\n          </Typography>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12} sm={6} md={3}>\r\n              <Box display=\"flex\" alignItems=\"center\" gap={1}>\r\n                <CalendarToday color=\"primary\" />\r\n                <Typography variant=\"body2\">\r\n                  {match.startTime ? new Date(match.startTime).toLocaleDateString() : ''}\r\n                </Typography>\r\n              </Box>\r\n            </Grid>\r\n            <Grid item xs={12} sm={6} md={3}>\r\n              <Box display=\"flex\" alignItems=\"center\" gap={1}>\r\n                <AccessTime color=\"primary\" />\r\n                <Typography variant=\"body2\">\r\n                  {match.startTime ? new Date(match.startTime).toLocaleTimeString() : ''}\r\n                </Typography>\r\n              </Box>\r\n            </Grid>\r\n            <Grid item xs={12} sm={6} md={3}>\r\n              <Box display=\"flex\" alignItems=\"center\" gap={1}>\r\n                <LocationOn color=\"primary\" />\r\n                <Typography variant=\"body2\">\r\n                  {match.location}\r\n                </Typography>\r\n              </Box>\r\n            </Grid>\r\n            <Grid item xs={12} sm={6} md={3}>\r\n              <Box display=\"flex\" alignItems=\"center\" gap={1}>\r\n                <AttachMoney color=\"primary\" />\r\n                <Typography variant=\"body2\">\r\n                  {match.entryFee || 'Free'}\r\n                </Typography>\r\n              </Box>\r\n            </Grid>\r\n          </Grid>\r\n          <Divider sx={{ my: 2 }} />\r\n          <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={2}>\r\n            <Typography variant=\"body2\">\r\n              Players: {match.currentPlayers}/{match.maxPlayers}\r\n            </Typography>\r\n            <LinearProgress \r\n              variant=\"determinate\" \r\n              value={((match.currentPlayers || 0) / (match.maxPlayers || 1)) * 100}\r\n              sx={{ width: '40%' }}\r\n            />\r\n          </Box>\r\n          <Typography variant=\"body2\" color=\"text.secondary\" mb={2}>\r\n            Organizer: {match.organizer?.username || 'Organizer'}\r\n          </Typography>\r\n          <Typography variant=\"body2\" color=\"text.secondary\">\r\n            {match.matchRules || 'Friendly competitive match between two skilled teams'}\r\n          </Typography>\r\n        </CardContent>\r\n      </ThemedCard>\r\n\r\n      {/* Join Status Alert */}\r\n      {joinStatus !== 'not_joined' && (\r\n        <Alert \r\n          severity={\r\n            joinStatus === 'confirmed' ? 'success' : \r\n            joinStatus === 'pending' ? 'warning' : 'info'\r\n          }\r\n          sx={{ mb: 3 }}\r\n          icon={<Info />}\r\n        >\r\n          {joinStatus === 'confirmed' && 'You have successfully joined this match!'}\r\n          {joinStatus === 'pending' && 'Your join request is pending organizer approval.'}\r\n          {joinStatus === 'cancelled' && 'You have cancelled your participation in this match.'}\r\n        </Alert>\r\n      )}\r\n\r\n      {/* Action Buttons */}\r\n      <Stack direction=\"row\" spacing={2} sx={{ mb: 3 }}>\r\n        <Button\r\n          {...buttonProps}\r\n          startIcon={buttonProps.icon}\r\n          size=\"large\"\r\n          fullWidth\r\n        >\r\n          {buttonProps.text}\r\n        </Button>\r\n        {joinStatus === 'confirmed' && (\r\n          <Button\r\n            variant=\"outlined\"\r\n            color=\"error\"\r\n            startIcon={<ExitToApp />}\r\n            onClick={handleCancelJoin}\r\n            size=\"large\"\r\n          >\r\n            Cancel Join\r\n          </Button>\r\n        )}\r\n      </Stack>\r\n\r\n      {/* Tabs */}\r\n      <ThemedCard elevation={2}>\r\n        <Tabs\r\n          value={activeTab}\r\n          onChange={handleTabChange}\r\n          indicatorColor=\"primary\"\r\n          textColor=\"primary\"\r\n          variant=\"fullWidth\"\r\n        >\r\n          <Tab label=\"Recent Matches\" />\r\n          <Tab label=\"Join Requests\" />\r\n          <Tab label=\"Match Rules\" />\r\n        </Tabs>\r\n        <TabPanel value={activeTab} index={0}>\r\n          <Typography variant=\"h6\" gutterBottom>\r\n            Recent Team Performance\r\n          </Typography>\r\n          <List>\r\n            {/* Demo recent matches, replace with real data if available */}\r\n            {[{ opponent: 'Fire Dragons', result: 'W', score: '3-1' }, { opponent: 'Ice Wolves', result: 'W', score: '2-0' }, { opponent: 'Storm Eagles', result: 'L', score: '1-2' }, { opponent: 'Rock Crushers', result: 'W', score: '4-2' }].map((match, index) => (\r\n              <ListItem key={index} divider>\r\n                <ListItemText\r\n                  primary={`vs ${match.opponent}`}\r\n                  secondary={match.score}\r\n                />\r\n                <Chip \r\n                  label={match.result === 'W' ? 'Win' : 'Loss'}\r\n                  color={match.result === 'W' ? 'success' : 'error'}\r\n                  size=\"small\"\r\n                />\r\n              </ListItem>\r\n            ))}\r\n          </List>\r\n        </TabPanel>\r\n        <TabPanel value={activeTab} index={1}>\r\n          <Typography variant=\"h6\" gutterBottom>\r\n            Pending Join Requests\r\n          </Typography>\r\n          <List>\r\n            {pendingRequests.map((request, index) => (\r\n              <ListItem key={index} divider>\r\n                <ListItemAvatar>\r\n                  <Avatar>{request.name[0]}</Avatar>\r\n                </ListItemAvatar>\r\n                <ListItemText\r\n                  primary={request.name}\r\n                  secondary={`Rating: ${request.rating} - \"${request.message}\"`}\r\n                />\r\n                <Stack direction=\"row\" spacing={1}>\r\n                  <Button size=\"small\" color=\"success\" variant=\"outlined\">\r\n                    Accept\r\n                  </Button>\r\n                  <Button size=\"small\" color=\"error\" variant=\"outlined\">\r\n                    Decline\r\n                  </Button>\r\n                </Stack>\r\n              </ListItem>\r\n            ))}\r\n          </List>\r\n        </TabPanel>\r\n        <TabPanel value={activeTab} index={2}>\r\n          <Typography variant=\"h6\" gutterBottom>\r\n            Match Rules & Guidelines\r\n          </Typography>\r\n          <Typography variant=\"body2\" paragraph>\r\n            • Fair play is expected from all participants\r\n          </Typography>\r\n          <Typography variant=\"body2\" paragraph>\r\n            • Entry fee must be paid before match start\r\n          </Typography>\r\n          <Typography variant=\"body2\" paragraph>\r\n            • Cancellation must be done at least 2 hours before match time\r\n          </Typography>\r\n          <Typography variant=\"body2\" paragraph>\r\n            • Players must arrive 15 minutes before match time\r\n          </Typography>\r\n          <Typography variant=\"body2\" paragraph>\r\n            • Proper sports attire required\r\n          </Typography>\r\n        </TabPanel>\r\n      </ThemedCard>\r\n\r\n      {/* Join Request Modal */}\r\n      <Dialog open={showJoinModal} onClose={() => setShowJoinModal(false)} maxWidth=\"sm\" fullWidth>\r\n        <DialogTitle>\r\n          <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\r\n            Send Join Request\r\n            <IconButton onClick={() => setShowJoinModal(false)}>\r\n              <Close />\r\n            </IconButton>\r\n          </Box>\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <Typography variant=\"body2\" color=\"text.secondary\" mb={2}>\r\n            Your request will be sent to the match organizer for approval.\r\n          </Typography>\r\n          <TextField\r\n            fullWidth\r\n            multiline\r\n            rows={3}\r\n            placeholder=\"Add a message (optional)\"\r\n            value={joinMessage}\r\n            onChange={(e) => setJoinMessage(e.target.value)}\r\n            sx={{ mt: 2 }}\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setShowJoinModal(false)}>\r\n            Cancel\r\n          </Button>\r\n          <Button \r\n            onClick={confirmJoinRequest} \r\n            variant=\"contained\" \r\n            startIcon={<Send />}\r\n          >\r\n            Send Request\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Cancel Join Modal */}\r\n      <Dialog open={showCancelModal} onClose={() => setShowCancelModal(false)} maxWidth=\"sm\">\r\n        <DialogTitle>Cancel Match Participation</DialogTitle>\r\n        <DialogContent>\r\n          <Typography>\r\n            Are you sure you want to cancel your participation in this match? \r\n            The organizer will be notified.\r\n          </Typography>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setShowCancelModal(false)}>\r\n            Keep Participation\r\n          </Button>\r\n          <Button onClick={confirmCancelJoin} color=\"error\" variant=\"contained\">\r\n            Cancel Participation\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default FriendlyMatchPage; 
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball-frontend/src/components/event/FriendlyMatchPage.jsx b/pickleball-frontend/src/components/event/FriendlyMatchPage.jsx
--- a/pickleball-frontend/src/components/event/FriendlyMatchPage.jsx	(revision 97abd609899a67b781b8ace8e91358a782fc5acd)
+++ b/pickleball-frontend/src/components/event/FriendlyMatchPage.jsx	(date 1753723014801)
@@ -1,194 +1,208 @@
-import React, { useState, useEffect } from 'react';
+import React, { useEffect, useState } from 'react';
 import {
   Box,
-  Container,
   Typography,
+  Button,
+  TextField,
+  MenuItem,
+  Select,
+  InputLabel,
+  FormControl,
   Card,
   CardContent,
-  Avatar,
-  Button,
-  Chip,
+  Alert,
+  CircularProgress,
+  Divider,
   Grid,
-  List,
-  ListItem,
-  ListItemText,
-  ListItemAvatar,
-  Tab,
-  Tabs,
+  Chip,
   Paper,
+  Avatar,
   IconButton,
-  LinearProgress,
-  Dialog,
-  DialogTitle,
-  DialogContent,
-  DialogActions,
-  Alert,
-  Divider,
+  Fade,
+  Slide,
+  Container,
+  CardActions,
   Stack,
-  TextField,
-  useMediaQuery,
-  CircularProgress
+  Badge,
+  Tooltip,
+  Tabs,
+  Tab,
+  List,
+  ListItem,
+  ListItemText
 } from '@mui/material';
+import Dialog from '@mui/material/Dialog';
+import DialogTitle from '@mui/material/DialogTitle';
+import DialogContent from '@mui/material/DialogContent';
+import DialogActions from '@mui/material/DialogActions';
 import {
-  CalendarToday,
-  LocationOn,
-  AttachMoney,
-  AccessTime,
+  Add as AddIcon,
+  SportsTennis as TennisIcon,
+  Group as GroupIcon,
+  LocationOn as LocationIcon,
+  Schedule as ScheduleIcon,
+  Person as PersonIcon,
+  Visibility as ViewIcon,
+  Close as CloseIcon,
+  CheckCircle as CheckIcon,
+  AccessTime as TimeIcon,
+  Stadium as StadiumIcon,
   Star,
   Favorite,
   FavoriteBorder,
   Notifications,
   NotificationsOff,
   PersonAdd,
-  CheckCircle,
-  Pending,
   ExitToApp,
-  Close,
-  Send,
-  Info
+  Info,
+  Delete as DeleteIcon,
+  Share as ShareIcon
 } from '@mui/icons-material';
-import * as FriendlyMatchService from '../../service/FriendlyMatchService';
+import api from '../../service/api';
 import { useAuth } from '../../context/AuthContext';
-import ThemedCard from '../common/ThemedCard';
-import { useTheme, alpha } from '@mui/material/styles';
+import { useTheme, useMediaQuery } from '@mui/material';
+import { useNavigate } from 'react-router-dom';
+import { cancelJoin } from '../../service/FriendlyMatchService';
+import MessageService from '../../service/MessageService';
+
+function formatTime(dt) {
+  if (!dt) return '';
+  // 支援 ISO string 或 Date 物件
+  const d = typeof dt === 'string' ? new Date(dt) : dt;
+  if (isNaN(d.getTime())) return '';
+  return d.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
+}
 
 const FriendlyMatchPage = () => {
+  const navigate = useNavigate();
+  // States
+  const [bookings, setBookings] = useState([]);
+  const [selectedBooking, setSelectedBooking] = useState('');
+  const [note, setNote] = useState('');
+  const [submitting, setSubmitting] = useState(false);
+  const [createSuccess, setCreateSuccess] = useState('');
+  const [createError, setCreateError] = useState('');
+
+  const [invitations, setInvitations] = useState([]);
+  const [loading, setLoading] = useState(true);
+  const [error, setError] = useState('');
+  const [joiningId, setJoiningId] = useState(null);
+  const [deletingId, setDeletingId] = useState(null);
+  const [joinSuccess, setJoinSuccess] = useState('');
+  const [viewOpen, setViewOpen] = useState(false);
+  const [viewInvite, setViewInvite] = useState(null);
+  const [currentPlayers, setCurrentPlayers] = useState(1);
+  const [matchExistsError, setMatchExistsError] = useState('');
+
+  const { currentUser } = useAuth();
+
   const theme = useTheme();
   const isMobile = useMediaQuery(theme.breakpoints.down('md'));
-  const { currentUser } = useAuth();
-
-  const [activeTab, setActiveTab] = useState(0);
   const [isLiked, setIsLiked] = useState(false);
+
+  // 分享相關狀態
+  const [shareDialogOpen, setShareDialogOpen] = useState(false);
+  const [shareMessage, setShareMessage] = useState('');
+  const [shareRecipient, setShareRecipient] = useState('');
+  const [isSharing, setIsSharing] = useState(false);
+  const [friends, setFriends] = useState([]);
+  const [searchQuery, setSearchQuery] = useState('');
+  const [searchResults, setSearchResults] = useState([]);
+  const [isSearching, setIsSearching] = useState(false);
+  const [showSearchResults, setShowSearchResults] = useState(false);
+  const [matchToShare, setMatchToShare] = useState(null);
   const [isNotified, setIsNotified] = useState(false);
   const [joinStatus, setJoinStatus] = useState('not_joined');
-  const [showJoinModal, setShowJoinModal] = useState(false);
   const [showCancelModal, setShowCancelModal] = useState(false);
-  const [joinMessage, setJoinMessage] = useState('');
   const [reminderSet, setReminderSet] = useState(false);
-  const [match, setMatch] = useState({
-    id: 1,
-    startTime: "2025-07-10T10:00:00",
-    location: "Central Park Court 1",
-    maxPlayers: 4,
-    currentPlayers: 2,
-    status: "OPEN",
-    organizer: { username: "OrganizerName" },
-    entryFee: "Free",
-    matchRules: "Friendly competitive match between two skilled teams",
-    participants: { 1: "APPROVED", 2: "REQUESTED" }
-  });
-  const [pendingRequests, setPendingRequests] = useState([
-    { name: "User 2", rating: 4.0, message: "Looking forward to it!" }
-  ]);
-  const [loading, setLoading] = useState(false);
-  const [error, setError] = useState(null);
-
-  // Simulate reminder notification 24 hours before match
-  useEffect(() => {
-    if (joinStatus === 'confirmed' && !reminderSet && match) {
-      const reminderTimeout = setTimeout(() => {
-        alert('Reminder: Your match is tomorrow at ' + (match.startTime ? new Date(match.startTime).toLocaleTimeString() : '') + ' at ' + (match.location || '') + '!');
-        setReminderSet(true);
-      }, 5000);
-      return () => clearTimeout(reminderTimeout);
-    }
-  }, [joinStatus, reminderSet, match]);
+  const [userProfileDialogOpen, setUserProfileDialogOpen] = useState(false);
+  const [selectedUserProfile, setSelectedUserProfile] = useState(null);
+  const [messageDialogOpen, setMessageDialogOpen] = useState(false);
+  const [messageContent, setMessageContent] = useState('');
+  const [sendingMessage, setSendingMessage] = useState(false);
+  const [messageError, setMessageError] = useState('');
+  const [messageSuccess, setMessageSuccess] = useState('');
+  const [cancelConfirmDialogOpen, setCancelConfirmDialogOpen] = useState(false);
 
-  const handleJoinRequest = () => {
-    if (!currentUser) {
-      alert('Please log in to join matches');
-      return;
-    }
-    setShowJoinModal(true);
-  };
-
-  const confirmJoinRequest = async () => {
-    if (!match || !currentUser) return;
+  const handleOpenUserProfile = async (username) => {
     try {
-      await FriendlyMatchService.joinMatch(match.id, currentUser.id);
-      setJoinStatus('pending');
-      setShowJoinModal(false);
-      setJoinMessage('');
+      const token = localStorage.getItem('authToken');
+      const res = await fetch(`http://localhost:8081/api/users/profile/${username}`, {
+        headers: { Authorization: `Bearer ${token}` }
+      });
+
+      if (res.ok) {
+        const data = await res.json();
+        setSelectedUserProfile(data);
+      } else {
+        // 如果 API 調用失敗，顯示基本資料
+        setSelectedUserProfile({
+          username: username,
+          name: 'User',
+          email: 'Contact info not available',
+          phone: 'Contact info not available',
+          userType: 'User'
+        });
+      }
+      setUserProfileDialogOpen(true);
     } catch (err) {
-      alert('Failed to send join request.');
+      console.error('Failed to fetch user profile:', err);
+      // 如果 API 調用失敗，顯示基本資料
+      setSelectedUserProfile({
+        username: username,
+        name: 'User',
+        email: 'Contact info not available',
+        phone: 'Contact info not available',
+        userType: 'User'
+      });
+      setUserProfileDialogOpen(true);
     }
   };
 
-  const handleCancelJoin = () => {
-    setShowCancelModal(true);
+  const handleCloseUserProfile = () => {
+    setUserProfileDialogOpen(false);
+    setSelectedUserProfile(null);
+  };
+
+  const handleSendMessage = () => {
+    setMessageDialogOpen(true);
+    setMessageContent('');
+    setMessageError('');
+    setMessageSuccess('');
+  };
+
+  const handleCloseMessageDialog = () => {
+    setMessageDialogOpen(false);
+    setMessageContent('');
+    setMessageError('');
+    setMessageSuccess('');
   };
 
-  const confirmCancelJoin = async () => {
-    if (!match || !currentUser) return;
+  const handleSubmitMessage = async () => {
+    if (!messageContent.trim()) {
+      setMessageError('Please enter a message');
+      return;
+    }
+
+    setSendingMessage(true);
+    setMessageError('');
+    setMessageSuccess('');
+
     try {
-      await FriendlyMatchService.cancelJoin(match.id, currentUser.id);
-      setJoinStatus('cancelled');
-      setShowCancelModal(false);
-      alert('You have cancelled your participation. The organizer has been notified.');
-    } catch (err) {
-      alert('Failed to cancel participation.');
-    }
-  };
+      await MessageService.sendMessage(selectedUserProfile.username, messageContent.trim());
+      setMessageSuccess('Message sent successfully!');
+      setMessageContent('');
 
-  const getJoinButtonProps = () => {
-    switch (joinStatus) {
-      case 'not_joined':
-        return {
-          text: 'Send Join Request',
-          icon: <PersonAdd />,
-          color: 'primary',
-          variant: 'contained',
-          onClick: handleJoinRequest,
-          disabled: false
-        };
-      case 'pending':
-        return {
-          text: 'Request Pending',
-          icon: <Pending />,
-          color: 'warning',
-          variant: 'contained',
-          onClick: () => {},
-          disabled: true
-        };
-      case 'confirmed':
-        return {
-          text: 'Joined Match',
-          icon: <CheckCircle />,
-          color: 'success',
-          variant: 'contained',
-          onClick: () => {},
-          disabled: true
-        };
-      case 'cancelled':
-        return {
-          text: 'Send Join Request',
-          icon: <PersonAdd />,
-          color: 'primary',
-          variant: 'contained',
-          onClick: handleJoinRequest,
-          disabled: false
-        };
-      default:
-        return {
-          text: 'Send Join Request',
-          icon: <PersonAdd />,
-          color: 'primary',
-          variant: 'contained',
-          onClick: handleJoinRequest,
-          disabled: false
-        };
+      // 自動關閉對話框
+      setTimeout(() => {
+        handleCloseMessageDialog();
+      }, 1500);
+    } catch (error) {
+      setMessageError(error.message || 'Failed to send message');
+    } finally {
+      setSendingMessage(false);
     }
   };
-
-  const handleTabChange = (event, newValue) => {
-    setActiveTab(newValue);
-  };
-
-  const TabPanel = ({ children, value, index }) => (
-    <div hidden={value !== index}>
-      {value === index && <Box sx={{ p: 3 }}>{children}</Box>}
-    </div>
-  );
 
   const TeamCard = ({ team, isAway = false }) => (
     <Box 
@@ -226,324 +240,1651 @@
     </Box>
   );
 
-  const buttonProps = getJoinButtonProps();
+  useEffect(() => {
+    fetchBookings();
+    fetchInvitations();
+  }, []);
+
+  const fetchBookings = async () => {
+    try {
+      const res = await api.get('/member/my-upcoming');
+      setBookings(res.data);
+    } catch (err) {
+      setCreateError('Failed to load your bookings');
+    }
+  };
+
+  const fetchInvitations = async () => {
+    setLoading(true);
+    setError('');
+    try {
+      // 获取所有开放的比赛（包括邀请类型和独立类型）
+      const res = await api.get('/friendly-matches/all');
+      setInvitations(res.data);
+    } catch (err) {
+      console.error('Failed to load matches:', err);
+      setError('Failed to load matches');
+    } finally {
+      setLoading(false);
+    }
+  };
+
+  // 移除自动刷新功能，避免过多的网络请求
+
+  const handleBookingChange = (e) => {
+    setSelectedBooking(e.target.value);
+    setCurrentPlayers(1); // reset current participants when booking changes
+  };
+
+  const handleCreate = async (e) => {
+    e.preventDefault();
+    setSubmitting(true);
+    setCreateError('');
+    setCreateSuccess('');
+    setMatchExistsError('');
+    try {
+      const booking = bookings.find(b => b.id === Number(selectedBooking));
+      const capacity = booking?.numberOfPlayers;
+      if (!capacity || capacity <= 0) {
+        setCreateError('Please select a booking with valid number of players.');
+        setSubmitting(false);
+        return;
+      }
+      if (currentPlayers < 1 || currentPlayers > capacity) {
+        setCreateError('Current participants must be between 1 and capacity.');
+        setSubmitting(false);
+        return;
+      }
+      await api.post('/friendly-matches/invitation', {
+        maxPlayers: capacity,
+        currentPlayers,
+        matchRules: note,
+        startTime: booking?.bookingDate,
+        status: 'OPEN',
+      }, { params: { bookingId: selectedBooking } });
+      setCreateSuccess('Invitation created successfully!');
+      setSelectedBooking('');
+      setCurrentPlayers(1);
+      setNote('');
+      fetchInvitations();
+    } catch (err) {
+      if (err.response && err.response.data && typeof err.response.data === 'string' && err.response.data.includes('already exists')) {
+        setMatchExistsError('A match for this booking/time already exists. Please select another booking or time.');
+      } else if (err.response && (err.response.status === 409 || err.response.status === 400)) {
+        setMatchExistsError(err.response.data.message || 'A match for this booking/time already exists.');
+      } else {
+        setCreateError('Failed to create invitation');
+      }
+    } finally {
+      setSubmitting(false);
+    }
+  };
+
+  const handleJoin = async (id) => {
+    setJoiningId(id);
+    setJoinSuccess('');
+    try {
+      await api.post(`/friendly-matches/invitation/${id}/join`);
+      setJoinStatus('confirmed'); // 直接設為已加入
+      setJoinSuccess('Successfully joined the match!');
+      // 立即在前端更新 invitations，讓 UI 立即反映
+      setInvitations(prevInvitations => prevInvitations.map(invite => {
+        if (invite.id === id) {
+          // 檢查是否已經有 joinRequests
+          const alreadyJoined = invite.joinRequests && invite.joinRequests.some(req => req.status === 'APPROVED' && (
+            req.memberId === currentUser?.id ||
+            req.memberName === currentUser?.name ||
+            req.username === currentUser?.username
+          ));
+          if (!alreadyJoined) {
+            const newCurrentPlayers = (invite.currentPlayers || 0) + 1;
+            const isFull = newCurrentPlayers >= invite.maxPlayers;
+            const updatedInvite = {
+              ...invite,
+              currentPlayers: newCurrentPlayers,
+              status: isFull ? 'FULL' : invite.status,
+              joinRequests: [
+                ...(invite.joinRequests || []),
+                {
+                  id: 'local-' + (currentUser?.id || currentUser?.username),
+                  status: 'APPROVED',
+                  memberId: currentUser?.id,
+                  memberName: currentUser?.name,
+                  username: currentUser?.username
+                }
+              ]
+            };
+
+            // 如果當前正在查看這個比賽，也要更新 viewInvite
+            if (viewInvite && viewInvite.id === id) {
+              setViewInvite(updatedInvite);
+            }
+
+            return updatedInvite;
+          }
+        }
+        return invite;
+      }));
+      // 也可選擇 fetchInvitations(); // 但這樣會有延遲
+    } catch (err) {
+      setError('Failed to join invitation');
+    } finally {
+      setJoiningId(null);
+    }
+  };
+
+  const handleView = (invite) => {
+    setViewInvite(invite);
+    setViewOpen(true);
+  };
+
+  const handleCloseView = () => {
+    setViewOpen(false);
+    setViewInvite(null);
+  };
+
+  const getStatusColor = (status) => {
+    switch(status) {
+      case 'OPEN': return 'success';
+      case 'FULL': return 'warning';
+      case 'CLOSED': return 'error';
+      case 'END': return 'error';
+      case 'CANCELLED': return 'error';
+      default: return 'default';
+    }
+  };
+
+  // 計算已存在 match 的 bookingId set
+  const existingMatchBookingIds = new Set(invitations.map(invite => invite.bookingId).filter(Boolean));
+
+  // 刪除這段提醒彈窗的 useEffect
+  // useEffect(() => {
+  //   if (joinStatus === 'confirmed' && !reminderSet && viewInvite) {
+  //     const reminderTimeout = setTimeout(() => {
+  //       alert('Reminder: Your match is tomorrow at ' +
+  //         (viewInvite.startTime ? new Date(viewInvite.startTime).toLocaleTimeString() : '') +
+  //         ' at ' + (viewInvite.courtLocation || '') + '!');
+  //       setReminderSet(true);
+  //     }, 5000); // 測試用 5 秒，實際可設 24 小時前
+  //     return () => clearTimeout(reminderTimeout);
+  //   }
+  // }, [joinStatus, reminderSet, viewInvite]);
+
+  useEffect(() => {
+    if (viewInvite) {
+      console.log('currentUser', currentUser);
+      console.log('viewInvite.joinRequests', viewInvite.joinRequests);
+    }
+  }, [viewInvite, currentUser]);
+
+  const handlePayForMatch = () => {
+    console.log('handlePayForMatch called'); // Debug log
+    if (!viewInvite) {
+      console.log('No viewInvite available'); // Debug log
+      return;
+    }
+
+    console.log('Navigating to payment page with match details:', viewInvite); // Debug log
+
+    // 導航到付款頁面，傳遞 friendly match 的詳細資訊
+    navigate('/payment', {
+      state: {
+        type: 'friendly-match',
+        matchId: viewInvite.id,
+        matchDetails: {
+          id: viewInvite.id,
+          title: `Friendly Match #${viewInvite.id}`,
+          organizer: viewInvite.organizerUsername,
+          maxPlayers: viewInvite.maxPlayers,
+          currentPlayers: viewInvite.currentPlayers,
+          startTime: viewInvite.startTime,
+          endTime: viewInvite.endTime,
+          courtName: viewInvite.courtName,
+          venueName: viewInvite.venueName,
+          location: viewInvite.courtLocation,
+          paymentStatus: viewInvite.paymentStatus,
+          price: viewInvite.price,
+          date: viewInvite.slotDate || viewInvite.date,
+          duration: viewInvite.durationHours || 1
+        }
+      }
+    });
+  };
+
+  const handlePayForMatchFromList = (invite) => {
+    console.log('handlePayForMatchFromList called for invite:', invite.id); // Debug log
 
-  // Demo teams (replace with real data if available)
-  const homeTeam = {
-    name: match.organizer?.username || 'Home Team',
-    logo: '🦅',
-    players: match.currentPlayers || 0,
-    rating: 4.2,
-    wins: 15,
-    losses: 3,
-    color: '#1976d2'
+    // 導航到付款頁面，傳遞 friendly match 的詳細資訊
+    navigate('/payment', {
+      state: {
+        type: 'friendly-match',
+        matchId: invite.id,
+        matchDetails: {
+          id: invite.id,
+          title: `Friendly Match #${invite.id}`,
+          organizer: invite.organizerUsername,
+          maxPlayers: invite.maxPlayers,
+          currentPlayers: invite.currentPlayers,
+          startTime: invite.startTime,
+          endTime: invite.endTime,
+          courtName: invite.courtName,
+          venueName: invite.venueName,
+          location: invite.courtLocation,
+          paymentStatus: invite.paymentStatus,
+          price: invite.price,
+          date: invite.slotDate || invite.date,
+          duration: invite.durationHours || 1
+        }
+      }
+    });
   };
-  const awayTeam = {
-    name: 'Challengers',
-    logo: '⚡',
-    players: (match.maxPlayers || 0) - (match.currentPlayers || 0),
-    rating: 4.5,
-    wins: 18,
-    losses: 2,
-    color: '#f57c00'
+
+  const handleCancelPayment = async () => {
+    if (!viewInvite) return;
+    try {
+      await api.post(`/friendly-matches/invitation/${viewInvite.id}/cancel-payment`);
+      setJoinStatus('not_joined'); // 取消付款後，狀態回到未加入
+      setJoinSuccess('Payment cancelled successfully!');
+      fetchInvitations(); // 立即刷新
+    } catch (err) {
+      setError('Failed to cancel payment');
+    }
+  };
+
+  const handleDeleteMatch = async (matchId) => {
+    console.log('=== Delete button clicked ===');
+    console.log('Match ID:', matchId);
+    console.log('Current user:', currentUser);
+
+    if (!window.confirm('Are you sure you want to delete this friendly match? This action cannot be undone.')) {
+      console.log('User cancelled deletion');
+      return;
+    }
+
+    console.log('User confirmed deletion');
+    setDeletingId(matchId);
+    try {
+      console.log('Attempting to delete match:', matchId);
+      const response = await api.delete(`/friendly-matches/${matchId}`);
+      console.log('Delete response:', response);
+
+      if (response.status === 200) {
+        // 刷新数据以移除已删除的match
+        fetchInvitations();
+        setJoinSuccess('Friendly match deleted successfully');
+        setTimeout(() => setJoinSuccess(''), 3000);
+      }
+    } catch (error) {
+      console.error('Failed to delete friendly match:', error);
+      console.error('Error response:', error.response);
+      setError('Failed to delete friendly match: ' + (error.response?.data || error.message));
+    } finally {
+      setDeletingId(null);
+    }
+  };
+
+  const handleCancelJoin = () => {
+    setCancelConfirmDialogOpen(true);
+  };
+
+  const handleConfirmCancelJoin = async () => {
+    console.log('handleConfirmCancelJoin called'); // Debug log
+    if (!viewInvite || !currentUser) {
+      console.log('Missing viewInvite or currentUser:', { viewInvite, currentUser }); // Debug log
+      return;
+    }
+
+    // 找到自己的 joinRequest
+    const myRequest = viewInvite.joinRequests && viewInvite.joinRequests.find(
+      req => req.status === 'APPROVED' && req.username === currentUser?.username
+    );
+
+    console.log('Found myRequest:', myRequest); // Debug log
+
+    if (!myRequest) {
+      console.log('No approved join request found'); // Debug log
+      return;
+    }
+
+    try {
+      console.log('Calling cancelJoin with:', { requestId: myRequest.id, memberId: currentUser.id }); // Debug log
+      await cancelJoin(myRequest.id, currentUser.id);
+
+      setJoinStatus('not_joined');
+      setJoinSuccess('You have cancelled your join!');
+
+      // 更新 invitations 和 viewInvite 狀態
+      setInvitations(prevInvitations => prevInvitations.map(invite => {
+        if (invite.id === viewInvite.id) {
+          const newJoinRequests = (invite.joinRequests || []).filter(r => r.id !== myRequest.id);
+          const newCurrentPlayers = Math.max((invite.currentPlayers || 1) - 1, 0);
+          return {
+            ...invite,
+            joinRequests: newJoinRequests,
+            currentPlayers: newCurrentPlayers,
+            status: (invite.status === 'FULL' && newCurrentPlayers < invite.maxPlayers) ? 'OPEN' : invite.status
+          };
+        }
+        return invite;
+      }));
+
+      // 更新 viewInvite
+      setViewInvite(prev => {
+        if (!prev) return prev;
+        const newJoinRequests = (prev.joinRequests || []).filter(r => r.id !== myRequest.id);
+        const newCurrentPlayers = Math.max((prev.currentPlayers || 1) - 1, 0);
+        return {
+          ...prev,
+          joinRequests: newJoinRequests,
+          currentPlayers: newCurrentPlayers,
+          status: (prev.status === 'FULL' && newCurrentPlayers < prev.maxPlayers) ? 'OPEN' : prev.status
+        };
+      });
+
+      console.log('Successfully cancelled join'); // Debug log
+
+      // 關閉確認對話框
+      setCancelConfirmDialogOpen(false);
+    } catch (err) {
+      console.error('Error in handleConfirmCancelJoin:', err); // Debug log
+      setError('Failed to cancel join');
+    }
+  };
+
+  const handleCloseCancelConfirmDialog = () => {
+    setCancelConfirmDialogOpen(false);
+  };
+
+  // 獲取朋友列表
+  const fetchFriends = async () => {
+    try {
+      const response = await api.get('/friends/accepted');
+      setFriends(response.data);
+    } catch (error) {
+      console.error('Failed to fetch friends:', error);
+    }
+  };
+
+  // 搜索用戶
+  const searchUsers = async () => {
+    if (!searchQuery.trim()) {
+      setSearchResults([]);
+      setShowSearchResults(false);
+      return;
+    }
+
+    setIsSearching(true);
+    try {
+      const response = await api.get(`/users/search?query=${encodeURIComponent(searchQuery.trim())}`);
+      setSearchResults(response.data);
+      setShowSearchResults(true);
+    } catch (error) {
+      console.error('Failed to search users:', error);
+      setSearchResults([]);
+    } finally {
+      setIsSearching(false);
+    }
+  };
+
+  // 選擇用戶
+  const selectUser = (username) => {
+    setShareRecipient(username);
+    setSearchQuery(username);
+    setShowSearchResults(false);
+  };
+
+  // 生成分享消息
+  const generateShareMessage = (match) => {
+    const formatDate = (dateString) => {
+      if (!dateString) return '';
+      const options = { year: 'numeric', month: 'long', day: 'numeric' };
+      return new Date(dateString).toLocaleDateString(undefined, options);
+    };
+
+    const formatTime = (time) => {
+      if (!time) return '';
+      if (time.includes('T') || time.includes(' ')) {
+        const date = new Date(time);
+        return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
+      }
+      return new Date(`1970-01-01T${time}:00`).toLocaleTimeString([],
+        { hour: '2-digit', minute: '2-digit' });
+    };
+
+    return `🎾 Join my Friendly Match!
+
+📅 Date: ${formatDate(match.startTime)}
+⏰ Time: ${formatTime(match.startTime)} - ${formatTime(match.endTime)}
+🏟️ Court: ${match.courtName || 'Court'}
+📍 Location: ${match.venueName || match.location || 'Location'}
+👥 Players: ${match.currentPlayers}/${match.maxPlayers}
+💰 Price: RM${match.price || 0}
+
+Come join us for a great game! 🏓
+Click here to join: [Friendly Match #${match.id}]`;
+  };
+
+  // 處理分享
+  const handleShare = (match) => {
+    console.log('handleShare called with match:', match);
+    setMatchToShare(match);
+    setShareMessage(generateShareMessage(match));
+    setShareDialogOpen(true);
+    console.log('Share dialog should be open now');
+  };
+
+  // 發送分享消息
+  const handleSendShare = async () => {
+    if (!shareRecipient.trim()) {
+      alert('Please enter a recipient username');
+      return;
+    }
+
+    setIsSharing(true);
+    try {
+      const params = new URLSearchParams({
+        recipient: shareRecipient.trim(),
+        content: shareMessage
+      });
+      await api.post(`/messages/send?${params.toString()}`);
+      alert('Invitation sent successfully!');
+      setShareDialogOpen(false);
+      setShareRecipient('');
+      setMatchToShare(null);
+    } catch (error) {
+      console.error('Failed to send invitation:', error);
+      alert('Failed to send invitation: ' + (error.response?.data || error.message));
+    } finally {
+      setIsSharing(false);
+    }
   };
 
   return (
-    <Container maxWidth="lg" sx={{ py: 4 }}>
-      {/* Header */}
-      <ThemedCard 
-        elevation={3} 
-        sx={{ 
-          p: 3, 
-          mb: 3, 
-          background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
-          color: 'white'
-        }}
-      >
-        <Box display="flex" justifyContent="space-between" alignItems="center" mb={2}>
-          <Typography variant="h4" fontWeight="bold">
-            Friendly Match
-          </Typography>
-          <Box display="flex" gap={1}>
-            <IconButton 
-              onClick={() => setIsLiked(!isLiked)}
-              sx={{ color: 'white' }}
-            >
-              {isLiked ? <Favorite /> : <FavoriteBorder />}
-            </IconButton>
-            <IconButton 
-              onClick={() => setIsNotified(!isNotified)}
-              sx={{ color: 'white' }}
-            >
-              {isNotified ? <Notifications /> : <NotificationsOff />}
-            </IconButton>
-            <IconButton sx={{ color: 'white' }}>
-              {/* Share icon, no action */}
-            </IconButton>
-          </Box>
-        </Box>
-        {/* Teams */}
-        <Grid container spacing={3} alignItems="center">
-          <Grid item xs={12} md={4}>
-            <TeamCard team={homeTeam} />
+    <Container maxWidth="lg">
+      <Box sx={{ py: 4 }}>
+        {/* Header */}
+        <Paper
+          elevation={0}
+          sx={{
+            background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
+            color: 'white',
+            p: 4,
+            mb: 4,
+            borderRadius: 3
+          }}
+        >
+          <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
+            <TennisIcon sx={{ fontSize: 48, mr: 2 }} />
+            <Box>
+              <Typography variant="h3" component="h1" fontWeight="bold">
+                Friendly Matches
+              </Typography>
+              <Typography variant="h6" sx={{ opacity: 0.9 }}>
+                Create and join tennis matches with fellow players
+              </Typography>
+            </Box>
+          </Box>
+        </Paper>
+
+        {/* Success/Error Alerts */}
+        <Stack spacing={2} sx={{ mb: 3 }}>
+          {createError && (
+            <Slide direction="down" in={!!createError}>
+              <Alert
+                severity="error"
+                onClose={() => setCreateError('')}
+                sx={{ borderRadius: 2 }}
+              >
+                {createError}
+              </Alert>
+            </Slide>
+          )}
+          {createSuccess && (
+            <Slide direction="down" in={!!createSuccess}>
+              <Alert
+                severity="success"
+                onClose={() => setCreateSuccess('')}
+                sx={{ borderRadius: 2 }}
+              >
+                {createSuccess}
+              </Alert>
+            </Slide>
+          )}
+          {joinSuccess && (
+            <Slide direction="down" in={!!joinSuccess}>
+              <Alert
+                severity="success"
+                onClose={() => setJoinSuccess('')}
+                sx={{ borderRadius: 2 }}
+              >
+                {joinSuccess}
+              </Alert>
+            </Slide>
+          )}
+          {error && (
+            <Slide direction="down" in={!!error}>
+              <Alert
+                severity="error"
+                onClose={() => setError('')}
+                sx={{ borderRadius: 2 }}
+              >
+                {error}
+              </Alert>
+            </Slide>
+          )}
+          {/* 顯示 match exists 錯誤訊息 */}
+          {matchExistsError && (
+            <Box sx={{ mb: 2 }}>
+              <Alert severity="error" onClose={() => setMatchExistsError('')} sx={{ borderRadius: 2 }}>
+                {matchExistsError}
+              </Alert>
+            </Box>
+          )}
+        </Stack>
+
+        <Grid container spacing={4}>
+          {/* Create New Match Button */}
+          <Grid item xs={12}>
+            <Box sx={{ display: 'flex', justifyContent: 'center', mb: 3 }}>
+              <Button
+                variant="contained"
+                size="large"
+                onClick={() => navigate('/friendly-matches/create')}
+                sx={{
+                  py: 2,
+                  px: 4,
+                  borderRadius: 3,
+                  background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',
+                  fontWeight: 'bold',
+                  textTransform: 'none',
+                  fontSize: '1.1rem'
+                }}
+                startIcon={<AddIcon />}
+              >
+                Create New Friendly Match (No Payment Required)
+              </Button>
+            </Box>
+          </Grid>
+
+          {/* Create Invitation Form */}
+          <Grid item xs={12} lg={4}>
+            <Paper
+              elevation={3}
+              sx={{
+                p: 0,
+                borderRadius: 3,
+                overflow: 'hidden',
+                position: 'sticky',
+                top: 20
+              }}
+            >
+              <Box sx={{
+                background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',
+                p: 3,
+                color: 'white'
+              }}>
+                <Box sx={{ display: 'flex', alignItems: 'center' }}>
+                  <AddIcon sx={{ mr: 1 }} />
+                  <Typography variant="h6" fontWeight="bold">
+                    Create New Match
+                  </Typography>
+                </Box>
+              </Box>
+
+              <CardContent sx={{ p: 3 }}>
+                <form onSubmit={handleCreate}>
+                  <FormControl fullWidth required sx={{ mb: 3 }}>
+                    <InputLabel id="booking-select-label">Select Your Booking</InputLabel>
+                    <Select
+                      labelId="booking-select-label"
+                      value={selectedBooking}
+                      onChange={handleBookingChange}
+                      label="Select Your Booking"
+                      sx={{ borderRadius: 2 }}
+                    >
+                      {bookings.filter(b => !existingMatchBookingIds.has(b.id)).map(b => (
+                        <MenuItem key={b.id} value={b.id}>
+                          <Box>
+                            <Typography variant="body1" fontWeight="medium">
+                              {b.courtName || 'Court'}
+                            </Typography>
+                            <Typography variant="body2" color="text.secondary">
+                              {b.slotDate} {b.startTime}~{b.endTime}
+                            </Typography>
+                          </Box>
+                        </MenuItem>
+                      ))}
+                    </Select>
+                  </FormControl>
+
+                  <Box sx={{ mb: 3 }}>
+                    <Typography variant="body2" color="text.secondary">
+                      <strong>Capacity:</strong> {(() => {
+                        if (!selectedBooking) return '-';
+                        const booking = bookings.find(b => b.id === Number(selectedBooking));
+                        if (booking && typeof booking.numberOfPlayers === 'number' && booking.numberOfPlayers > 0) {
+                          return booking.numberOfPlayers;
+                        }
+                        return '-';
+                      })()}
+                    </Typography>
+                  </Box>
+
+                  {/* 新增目前已參加人數輸入欄位 */}
+                  <Box sx={{ mb: 3 }}>
+                    <TextField
+                      fullWidth
+                      label="Current Participants"
+                      type="number"
+                      value={currentPlayers}
+                      onChange={e => {
+                        const booking = bookings.find(b => b.id === Number(selectedBooking));
+                        const capacity = booking?.numberOfPlayers || 1;
+                        const maxVal = Math.max(1, capacity - 1);
+                        const inputVal = Number(e.target.value);
+                        const val = Math.max(1, Math.min(inputVal, maxVal));
+                        setCurrentPlayers(val);
+                      }}
+                      required
+                      inputProps={{ min: 1, max: selectedBooking ? Math.max(1, (bookings.find(b => b.id === Number(selectedBooking))?.numberOfPlayers || 1) - 1) : 1 }}
+                      helperText={`How many participants (including yourself) are already confirmed?`}
+                    />
+                  </Box>
+
+                  <TextField
+                    fullWidth
+                    label="Match Rules & Notes"
+                    value={note}
+                    onChange={e => setNote(e.target.value)}
+                    multiline
+                    rows={3}
+                    sx={{ mb: 3, '& .MuiOutlinedInput-root': { borderRadius: 2 } }}
+                    placeholder="e.g., Friendly doubles, all levels welcome..."
+                  />
+
+                  <Button
+                    type="submit"
+                    variant="contained"
+                    size="large"
+                    disabled={submitting || !selectedBooking || !(bookings.find(b => b.id === Number(selectedBooking))?.numberOfPlayers > 0) || !!matchExistsError}
+                    fullWidth
+                    sx={{
+                      py: 1.5,
+                      borderRadius: 2,
+                      background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',
+                      fontWeight: 'bold',
+                      textTransform: 'none'
+                    }}
+                  >
+                    {submitting ? (
+                      <Box sx={{ display: 'flex', alignItems: 'center' }}>
+                        <CircularProgress size={20} color="inherit" sx={{ mr: 1 }} />
+                        Creating...
+                      </Box>
+                    ) : (
+                      <>Create Match Invitation</>
+                    )}
+                  </Button>
+                </form>
+              </CardContent>
+            </Paper>
           </Grid>
-          <Grid item xs={12} md={4}>
-            <Box textAlign="center">
-              <Typography variant="h3" fontWeight="bold" color="white">
-                VS
+
+          {/* Invitations List */}
+          <Grid item xs={12} lg={8}>
+            <Box sx={{ mb: 3 }}>
+              <Typography variant="h5" fontWeight="bold" sx={{ mb: 1 }}>
+                Available Matches
               </Typography>
-              <Chip 
-                label={match.status}
-                color={match.status === 'OPEN' ? 'success' : 'warning'}
-                sx={{ mt: 1, fontWeight: 'bold' }}
-              />
-            </Box>
-          </Grid>
-          <Grid item xs={12} md={4}>
-            <TeamCard team={awayTeam} isAway />
+              <Typography variant="body2" color="text.secondary">
+                Join exciting tennis matches organized by the community
+              </Typography>
+            </Box>
+
+            {loading ? (
+              <Box sx={{ display: 'flex', justifyContent: 'center', py: 8 }}>
+                <CircularProgress size={48} />
+              </Box>
+            ) : (
+              <Grid container spacing={3}>
+                {invitations.filter(invite => invite.status === 'OPEN' || invite.status === 'FULL' || invite.status === 'REMOVED').map((invite, index) => (
+                  <Grid item xs={12} md={6} key={invite.id}>
+                    <Fade in timeout={300 + index * 100}>
+                      <Card
+                        elevation={2}
+                        sx={{
+                          borderRadius: 3,
+                          transition: 'all 0.3s ease',
+                          bgcolor: invite.status === 'REMOVED' ? 'grey.100' : 'white',
+                          color: invite.status === 'REMOVED' ? 'grey.500' : 'inherit',
+                          '&:hover': invite.status === 'REMOVED' ? {} : {
+                            transform: 'translateY(-4px)',
+                            boxShadow: '0 8px 25px rgba(0,0,0,0.15)'
+                          }
+                        }}
+                      >
+                        <CardContent sx={{ p: 3 }}>
+                          {/* Header */}
+                          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', mb: 2 }}>
+                            <Box sx={{ display: 'flex', alignItems: 'center' }}>
+                              <Avatar sx={{
+                                bgcolor: invite.status === 'REMOVED' ? 'grey.400' : 'primary.main',
+                                width: 40,
+                                height: 40,
+                                mr: 2
+                              }}>
+                                <TennisIcon />
+                              </Avatar>
+                              <Box>
+                                <Typography variant="h6" fontWeight="bold">
+                                  Match #{invite.id}
+                                </Typography>
+                                <Typography variant="body2" color="text.secondary">
+                                  by {invite.organizerUsername}
+                                </Typography>
+                              </Box>
+                            </Box>
+                            <Chip
+                              label={invite.bookingStatus === 'CANCELLED' ? 'CANCELLED' : (invite.status === 'REMOVED' ? 'REMOVED' : invite.status)}
+                              color={invite.bookingStatus === 'CANCELLED' ? 'error' : (invite.status === 'REMOVED' ? 'default' : getStatusColor(invite.status))}
+                              size="small"
+                              sx={{ fontWeight: 'medium', bgcolor: invite.bookingStatus === 'CANCELLED' ? 'error.light' : (invite.status === 'REMOVED' ? 'grey.300' : undefined) }}
+                            />
+                          </Box>
+
+                          {/* Details */}
+                          <Stack spacing={2} sx={{ mb: 3 }}>
+                            <Box sx={{ display: 'flex', alignItems: 'center' }}>
+                              <ScheduleIcon sx={{ color: 'text.secondary', mr: 2, fontSize: 20 }} />
+                              <Typography variant="body2">
+                                {invite.slotDate || invite.date || ''} {invite.startTime && invite.endTime
+                                  ? `${formatTime(invite.startTime)} ~ ${formatTime(invite.endTime)}`
+                                  : (invite.startTime ? formatTime(invite.startTime) : '')}
+                              </Typography>
+                            </Box>
+
+                            <Box sx={{ display: 'flex', alignItems: 'center' }}>
+                              <StadiumIcon sx={{ color: 'text.secondary', mr: 2, fontSize: 20 }} />
+                              <Box>
+                                <Typography variant="body2" fontWeight="medium">
+                                  {invite.courtName || invite.court}
+                                </Typography>
+                                <Typography variant="body2" color="text.secondary">
+                                  {invite.venueName}
+                                </Typography>
+                              </Box>
+                            </Box>
+
+                            <Box sx={{ display: 'flex', alignItems: 'center' }}>
+                              <LocationIcon sx={{ color: 'text.secondary', mr: 2, fontSize: 20 }} />
+                              <Typography variant="body2">
+                                {invite.courtLocation}
+                              </Typography>
+                            </Box>
+
+                            <Box sx={{ display: 'flex', alignItems: 'center' }}>
+                              <GroupIcon sx={{ color: 'text.secondary', mr: 2, fontSize: 20 }} />
+                              <Box sx={{ display: 'flex', alignItems: 'center' }}>
+                                <Typography variant="body2" fontWeight="medium">
+                                  {invite.currentPlayers} / {invite.maxPlayers} players
+                                </Typography>
+                                <Box sx={{ ml: 1 }}>
+                                  {[...Array(invite.maxPlayers)].map((_, i) => (
+                                    <PersonIcon
+                                      key={i}
+                                      sx={{
+                                        fontSize: 16,
+                                        color: i < invite.currentPlayers ? 'primary.main' : 'action.disabled'
+                                      }}
+                                    />
+                                  ))}
+                                </Box>
+                              </Box>
+                            </Box>
+
+                            {/* Price Information */}
+                            {invite.price && invite.price > 0 && (
+                              <Box sx={{ display: 'flex', alignItems: 'center' }}>
+                                <Box sx={{
+                                  width: 16,
+                                  height: 16,
+                                  borderRadius: '50%',
+                                  bgcolor: 'success.main',
+                                  mr: 2
+                                }} />
+                                <Typography variant="body2" fontWeight="medium" color="success.main">
+                                  RM{invite.price.toFixed(2)}
+                                </Typography>
+                              </Box>
+                            )}
+
+                            {/* Payment Status - Only show for independent friendly matches (not invitation type) */}
+                            {!invite.isInvitation && invite.paymentStatus === 'PENDING' && (
+                              <Box sx={{ display: 'flex', alignItems: 'center' }}>
+                                <Box sx={{
+                                  width: 16,
+                                  height: 16,
+                                  borderRadius: '50%',
+                                  bgcolor: 'warning.main',
+                                  mr: 2
+                                }} />
+                                <Typography variant="body2" color="text.secondary">
+                                  Payment: PENDING
+                                </Typography>
+                              </Box>
+                            )}
+
+                            {/* Payment Note for PENDING status - Only for independent matches */}
+                            {!invite.isInvitation && invite.paymentStatus === 'PENDING' && invite.organizerUsername === currentUser?.username && (
+                              <Box sx={{
+                                bgcolor: 'warning.light',
+                                p: 1.5,
+                                borderRadius: 2,
+                                border: '1px solid',
+                                borderColor: 'warning.main'
+                              }}>
+                                <Typography variant="body2" color="warning.dark" sx={{ fontSize: '0.875rem' }}>
+                                  💡 Organizer will make payment when the match is full
+                                </Typography>
+                              </Box>
+                            )}
+                          </Stack>
+
+                          {invite.matchRules && (
+                            <Box sx={{
+                              bgcolor: 'grey.50',
+                              p: 2,
+                              borderRadius: 2,
+                              mb: 2
+                            }}>
+                              <Typography variant="body2" color="text.secondary">
+                                <strong>Rules:</strong> {invite.matchRules}
+                              </Typography>
+                            </Box>
+                          )}
+                        </CardContent>
+
+                        <CardActions sx={{ p: 3, pt: 0 }}>
+                          <Stack direction="row" spacing={1} sx={{ width: '100%' }}>
+                            {invite.status === 'REMOVED' || invite.status === 'END' ? (
+                              <Button
+                                variant="outlined"
+                                disabled
+                                fullWidth
+                                sx={{
+                                  py: 1.5,
+                                  borderRadius: 2,
+                                  textTransform: 'none',
+                                  color: 'grey.500',
+                                  borderColor: 'grey.300',
+                                  bgcolor: 'grey.100'
+                                }}
+                              >
+                                {invite.status === 'END' ? 'Match Ended' : 'Removed'}
+                              </Button>
+                            ) : (() => {
+                              console.log('=== Checking organizer match ===');
+                              console.log('Invite organizer:', invite.organizerUsername);
+                              console.log('Current user username:', currentUser?.username);
+                              console.log('Current user name:', currentUser?.name);
+                              console.log('Match:', invite.id);
+                              console.log('Match status:', invite.status);
+                              console.log('Match start time:', invite.startTime);
+                              console.log('Match end time:', invite.endTime);
+                              console.log('Current date:', new Date().toISOString());
+                              console.log('Is expired:', invite.status === 'END' || invite.status === 'CLOSED');
+                              return invite.organizerUsername === currentUser?.username && invite.status !== 'END';
+                            })() ? (
+                              <Stack direction="row" spacing={1} sx={{ width: '100%' }}>
+                                {/* 檢查是否滿員且需要付款 */}
+                                {invite.status === 'FULL' && invite.paymentStatus === 'PENDING' ? (
+                                  <Button
+                                    onClick={() => handlePayForMatchFromList(invite)}
+                                    variant="contained"
+                                    color="primary"
+                                    sx={{
+                                      py: 1.5,
+                                      borderRadius: 2,
+                                      textTransform: 'none',
+                                      flex: 1,
+                                      background: 'linear-gradient(45deg, #2196F3 30%, #21CBF3 90%)'
+                                    }}
+                                  >
+                                    💳 Make Payment
+                                  </Button>
+                                ) : (
+                                  <Button
+                                    variant="outlined"
+                                    disabled
+                                    sx={{
+                                      py: 1.5,
+                                      borderRadius: 2,
+                                      textTransform: 'none',
+                                      flex: 1
+                                    }}
+                                  >
+                                    You're the organizer
+                                  </Button>
+                                )}
+                                {/* 分享按鈕 - 只有 organizer 且不是 END 狀態才顯示 */}
+                                {(() => {
+                                  console.log('Share button debug:', {
+                                    inviteId: invite.id,
+                                    status: invite.status,
+                                    organizerUsername: invite.organizerUsername,
+                                    currentUser: currentUser?.username,
+                                    isOrganizer: invite.organizerUsername === currentUser?.username,
+                                    shouldShow: invite.organizerUsername === currentUser?.username && invite.status !== 'END'
+                                  });
+                                  return invite.organizerUsername === currentUser?.username && invite.status !== 'END';
+                                })() && (
+                                  <Tooltip title="Share with friends">
+                                    <Button
+                                      onClick={() => {
+                                        console.log('Share button clicked for match:', invite.id);
+                                        handleShare(invite);
+                                      }}
+                                      variant="contained"
+                                      size="small"
+                                      sx={{
+                                        backgroundColor: '#2196f3',
+                                        color: 'white',
+                                        minWidth: 'auto',
+                                        px: 2,
+                                        py: 1.5,
+                                        borderRadius: 2,
+                                        '&:hover': {
+                                          backgroundColor: '#1976d2'
+                                        }
+                                      }}
+                                    >
+                                      Share
+                                    </Button>
+                                  </Tooltip>
+                                )}
+                                <Button
+                                  onClick={() => handleDeleteMatch(invite.id)}
+                                  disabled={deletingId === invite.id}
+                                  variant="outlined"
+                                  color="error"
+                                  sx={{
+                                    py: 1.5,
+                                    borderRadius: 2,
+                                    textTransform: 'none',
+                                    minWidth: 'auto',
+                                    px: 2
+                                  }}
+                                >
+                                  {deletingId === invite.id ? (
+                                    <CircularProgress size={16} color="error" />
+                                  ) : (
+                                    <DeleteIcon />
+                                  )}
+                                </Button>
+                              </Stack>
+                            ) : (
+                              <Button
+                                onClick={() => handleJoin(invite.id)}
+                                disabled={(() => {
+                                  const hasJoined = invite.joinRequests && invite.joinRequests.some(
+                                    req => req.status === 'APPROVED' &&
+                                      req.memberName && req.memberName.toLowerCase() === ((currentUser?.name || currentUser?.username || '')).toLowerCase()
+                                  );
+                                  return joiningId === invite.id ||
+                                         invite.currentPlayers >= invite.maxPlayers ||
+                                         invite.bookingStatus === 'CANCELLED' ||
+                                         invite.status === 'END' ||
+                                         invite.status === 'CLOSED' ||
+                                         hasJoined;
+                                })()}
+                                variant="contained"
+                                fullWidth
+                                sx={{
+                                  py: 1.5,
+                                  borderRadius: 2,
+                                  background: (() => {
+                                    const hasJoined = invite.joinRequests && invite.joinRequests.some(
+                                      req => req.status === 'APPROVED' &&
+                                        req.memberName && req.memberName.toLowerCase() === ((currentUser?.name || currentUser?.username || '')).toLowerCase()
+                                    );
+                                    if (hasJoined) {
+                                      return 'linear-gradient(45deg, #4CAF50 30%, #66BB6A 90%)';
+                                    }
+                                    return (invite.bookingStatus === 'CANCELLED' || invite.status === 'END' || invite.status === 'CLOSED') ? 'grey.400' : 'linear-gradient(45deg, #2196F3 30%, #21CBF3 90%)';
+                                  })(),
+                                  fontWeight: 'medium',
+                                  textTransform: 'none'
+                                }}
+                              >
+                                {(() => {
+                                  const hasJoined = invite.joinRequests && invite.joinRequests.some(
+                                    req => req.status === 'APPROVED' &&
+                                      req.memberName && req.memberName.toLowerCase() === ((currentUser?.name || currentUser?.username || '')).toLowerCase()
+                                  );
+                                  if (hasJoined) {
+                                    return (
+                                      <Box sx={{ display: 'flex', alignItems: 'center' }}>
+                                        <CheckIcon />
+                                        Already Joined
+                                      </Box>
+                                    );
+                                  }
+                                  return (
+                                    invite.bookingStatus === 'CANCELLED' ? (
+                                      'Booking Cancelled'
+                                    ) : invite.status === 'END' || invite.status === 'CLOSED' ? (
+                                      'Match Ended'
+                                    ) : joiningId === invite.id ? (
+                                      <Box sx={{ display: 'flex', alignItems: 'center' }}>
+                                        <CircularProgress size={16} color="inherit" sx={{ mr: 1 }} />
+                                        Joining...
+                                      </Box>
+                                    ) : invite.currentPlayers >= invite.maxPlayers ? (
+                                      'Match Full'
+                                    ) : (
+                                      'Join Match'
+                                    )
+                                  );
+                                })()}
+                              </Button>
+                            )}
+
+                            <Tooltip title="View Details">
+                              <IconButton
+                                onClick={() => handleView(invite)}
+                                sx={{
+                                  border: 1,
+                                  borderColor: 'divider',
+                                  borderRadius: 2
+                                }}
+                              >
+                                <ViewIcon />
+                              </IconButton>
+                            </Tooltip>
+                          </Stack>
+                        </CardActions>
+                      </Card>
+                    </Fade>
+                  </Grid>
+                ))}
+              </Grid>
+            )}
+
+            {!loading && invitations.length === 0 && (
+              <Paper
+                elevation={0}
+                sx={{
+                  p: 8,
+                  textAlign: 'center',
+                  bgcolor: 'grey.50',
+                  borderRadius: 3
+                }}
+              >
+                <TennisIcon sx={{ fontSize: 64, color: 'grey.400', mb: 2 }} />
+                <Typography variant="h6" color="text.secondary" sx={{ mb: 1 }}>
+                  No matches available
+                </Typography>
+                <Typography variant="body2" color="text.secondary">
+                  Be the first to create a friendly match!
+                </Typography>
+              </Paper>
+            )}
           </Grid>
         </Grid>
-      </ThemedCard>
 
-      {/* Match Details */}
-      <ThemedCard elevation={2} sx={{ mb: 3 }}>
-        <CardContent>
-          <Typography variant="h6" gutterBottom>
-            Match Details
-          </Typography>
-          <Grid container spacing={2}>
-            <Grid item xs={12} sm={6} md={3}>
-              <Box display="flex" alignItems="center" gap={1}>
-                <CalendarToday color="primary" />
-                <Typography variant="body2">
-                  {match.startTime ? new Date(match.startTime).toLocaleDateString() : ''}
-                </Typography>
-              </Box>
-            </Grid>
-            <Grid item xs={12} sm={6} md={3}>
-              <Box display="flex" alignItems="center" gap={1}>
-                <AccessTime color="primary" />
-                <Typography variant="body2">
-                  {match.startTime ? new Date(match.startTime).toLocaleTimeString() : ''}
-                </Typography>
-              </Box>
-            </Grid>
-            <Grid item xs={12} sm={6} md={3}>
-              <Box display="flex" alignItems="center" gap={1}>
-                <LocationOn color="primary" />
-                <Typography variant="body2">
-                  {match.location}
-                </Typography>
-              </Box>
-            </Grid>
-            <Grid item xs={12} sm={6} md={3}>
-              <Box display="flex" alignItems="center" gap={1}>
-                <AttachMoney color="primary" />
-                <Typography variant="body2">
-                  {match.entryFee || 'Free'}
-                </Typography>
-              </Box>
-            </Grid>
-          </Grid>
-          <Divider sx={{ my: 2 }} />
-          <Box display="flex" justifyContent="space-between" alignItems="center" mb={2}>
-            <Typography variant="body2">
-              Players: {match.currentPlayers}/{match.maxPlayers}
-            </Typography>
-            <LinearProgress 
-              variant="determinate" 
-              value={((match.currentPlayers || 0) / (match.maxPlayers || 1)) * 100}
-              sx={{ width: '40%' }}
-            />
-          </Box>
-          <Typography variant="body2" color="text.secondary" mb={2}>
-            Organizer: {match.organizer?.username || 'Organizer'}
-          </Typography>
-          <Typography variant="body2" color="text.secondary">
-            {match.matchRules || 'Friendly competitive match between two skilled teams'}
-          </Typography>
-        </CardContent>
-      </ThemedCard>
-
-      {/* Join Status Alert */}
-      {joinStatus !== 'not_joined' && (
-        <Alert 
-          severity={
-            joinStatus === 'confirmed' ? 'success' : 
-            joinStatus === 'pending' ? 'warning' : 'info'
-          }
-          sx={{ mb: 3 }}
-          icon={<Info />}
-        >
-          {joinStatus === 'confirmed' && 'You have successfully joined this match!'}
-          {joinStatus === 'pending' && 'Your join request is pending organizer approval.'}
-          {joinStatus === 'cancelled' && 'You have cancelled your participation in this match.'}
-        </Alert>
-      )}
-
-      {/* Action Buttons */}
-      <Stack direction="row" spacing={2} sx={{ mb: 3 }}>
-        <Button
-          {...buttonProps}
-          startIcon={buttonProps.icon}
-          size="large"
-          fullWidth
-        >
-          {buttonProps.text}
-        </Button>
-        {joinStatus === 'confirmed' && (
-          <Button
-            variant="outlined"
-            color="error"
-            startIcon={<ExitToApp />}
-            onClick={handleCancelJoin}
-            size="large"
-          >
-            Cancel Join
-          </Button>
-        )}
-      </Stack>
-
-      {/* Tabs */}
-      <ThemedCard elevation={2}>
-        <Tabs
-          value={activeTab}
-          onChange={handleTabChange}
-          indicatorColor="primary"
-          textColor="primary"
-          variant="fullWidth"
-        >
-          <Tab label="Recent Matches" />
-          <Tab label="Join Requests" />
-          <Tab label="Match Rules" />
-        </Tabs>
-        <TabPanel value={activeTab} index={0}>
-          <Typography variant="h6" gutterBottom>
-            Recent Team Performance
-          </Typography>
-          <List>
-            {/* Demo recent matches, replace with real data if available */}
-            {[{ opponent: 'Fire Dragons', result: 'W', score: '3-1' }, { opponent: 'Ice Wolves', result: 'W', score: '2-0' }, { opponent: 'Storm Eagles', result: 'L', score: '1-2' }, { opponent: 'Rock Crushers', result: 'W', score: '4-2' }].map((match, index) => (
-              <ListItem key={index} divider>
-                <ListItemText
-                  primary={`vs ${match.opponent}`}
-                  secondary={match.score}
-                />
-                <Chip 
-                  label={match.result === 'W' ? 'Win' : 'Loss'}
-                  color={match.result === 'W' ? 'success' : 'error'}
-                  size="small"
-                />
-              </ListItem>
-            ))}
-          </List>
-        </TabPanel>
-        <TabPanel value={activeTab} index={1}>
-          <Typography variant="h6" gutterBottom>
-            Pending Join Requests
-          </Typography>
-          <List>
-            {pendingRequests.map((request, index) => (
-              <ListItem key={index} divider>
-                <ListItemAvatar>
-                  <Avatar>{request.name[0]}</Avatar>
-                </ListItemAvatar>
-                <ListItemText
-                  primary={request.name}
-                  secondary={`Rating: ${request.rating} - "${request.message}"`}
-                />
-                <Stack direction="row" spacing={1}>
-                  <Button size="small" color="success" variant="outlined">
-                    Accept
-                  </Button>
-                  <Button size="small" color="error" variant="outlined">
-                    Decline
-                  </Button>
+        {/* View Match Dialog */}
+        <Dialog
+          open={viewOpen}
+          onClose={handleCloseView}
+          maxWidth="sm"
+          fullWidth
+          PaperProps={{
+            sx: { borderRadius: 3 }
+          }}
+        >
+          <DialogTitle sx={{
+            pb: 1,
+            display: 'flex',
+            alignItems: 'center',
+            justifyContent: 'space-between'
+          }}>
+            <Box sx={{ display: 'flex', alignItems: 'center' }}>
+              <TennisIcon sx={{ mr: 2, color: 'primary.main' }} />
+              <Typography variant="h6" fontWeight="bold">
+                Match Details
+              </Typography>
+            </Box>
+            <IconButton onClick={handleCloseView} size="small">
+              <CloseIcon />
+            </IconButton>
+          </DialogTitle>
+
+          <DialogContent dividers sx={{ p: 3 }}>
+            {viewInvite && (
+              <Stack spacing={3}>
+                <Box>
+                  <Typography variant="h6" fontWeight="bold" sx={{ mb: 2 }}>
+                    Match #{viewInvite.id}
+                  </Typography>
+
+                  <Grid container spacing={2}>
+                    <Grid item xs={6}>
+                      <Typography variant="body2" color="text.secondary">
+                        Organizer
+                      </Typography>
+                      <Typography variant="body1" fontWeight="medium">
+                        {viewInvite.organizerUsername}
+                      </Typography>
+                    </Grid>
+
+                    <Grid item xs={6}>
+                      <Typography variant="body2" color="text.secondary">
+                        Status
+                      </Typography>
+                      <Chip
+                        label={viewInvite.bookingStatus === 'CANCELLED' ? 'CANCELLED' : viewInvite.status}
+                        color={viewInvite.bookingStatus === 'CANCELLED' ? 'error' : getStatusColor(viewInvite.status)}
+                        size="small"
+                      />
+                    </Grid>
+
+                    <Grid item xs={12}>
+                      <Typography variant="body2" color="text.secondary">
+                        When & Where
+                      </Typography>
+                      <Typography variant="body1" fontWeight="medium">
+                        {viewInvite.slotDate || viewInvite.date || ''} {viewInvite.startTime && viewInvite.endTime
+                          ? `${formatTime(viewInvite.startTime)} ~ ${formatTime(viewInvite.endTime)}`
+                          : (viewInvite.startTime ? formatTime(viewInvite.startTime) : '')}
+                      </Typography>
+                      <Typography variant="body2">
+                        {viewInvite.courtName} at {viewInvite.venueName}
+                      </Typography>
+                      <Typography variant="body2" color="text.secondary">
+                        {viewInvite.courtLocation}
+                      </Typography>
+                    </Grid>
+
+                    <Grid item xs={6}>
+                      <Typography variant="body2" color="text.secondary">
+                        Players
+                      </Typography>
+                      <Typography variant="body1" fontWeight="medium">
+                        {viewInvite.currentPlayers} / {viewInvite.maxPlayers}
+                      </Typography>
+                    </Grid>
+
+                    {viewInvite.price && viewInvite.price > 0 && (
+                      <Grid item xs={6}>
+                        <Typography variant="body2" color="text.secondary">
+                          Price
+                        </Typography>
+                        <Typography variant="body1" fontWeight="medium" color="success.main">
+                          RM{viewInvite.price.toFixed(2)}
+                        </Typography>
+                      </Grid>
+                    )}
+                  </Grid>
+                </Box>
+
+                {viewInvite.matchRules && (
+                  <Box>
+                    <Typography variant="body2" color="text.secondary" sx={{ mb: 1 }}>
+                      Match Rules
+                    </Typography>
+                    <Paper elevation={0} sx={{ p: 2, bgcolor: 'grey.50', borderRadius: 2 }}>
+                      <Typography variant="body2">
+                        {viewInvite.matchRules}
+                      </Typography>
+                    </Paper>
+                  </Box>
+                )}
+
+                {viewInvite.note && (
+                  <Box>
+                    <Typography variant="body2" color="text.secondary" sx={{ mb: 1 }}>
+                      Additional Notes
+                    </Typography>
+                    <Paper elevation={0} sx={{ p: 2, bgcolor: 'grey.50', borderRadius: 2 }}>
+                      <Typography variant="body2">
+                        {viewInvite.note}
+                      </Typography>
+                    </Paper>
+                  </Box>
+                )}
+
+                {viewInvite.joinRequests && viewInvite.joinRequests.length > 0 && (
+                  <Box>
+                    <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
+                      Join Members
+                    </Typography>
+                    <Stack spacing={1}>
+                      {viewInvite.joinRequests
+                        .filter(req => req.status === 'APPROVED')
+                        .map(req => (
+                          <Box
+                            key={req.id}
+                            sx={{
+                              display: 'flex',
+                              alignItems: 'center',
+                              p: 2,
+                              border: 1,
+                              borderColor: 'divider',
+                              borderRadius: 2
+                            }}
+                          >
+                            <Typography
+                              variant="body2"
+                              fontWeight="medium"
+                              sx={{ color: 'primary.main', cursor: 'pointer', textDecoration: 'underline' }}
+                              onClick={() => handleOpenUserProfile(req.username)}
+                            >
+                              {req.username}
+                            </Typography>
+                          </Box>
+                        ))}
+                    </Stack>
+                  </Box>
+                )}
+
+                {/* 如果沒有 joinRequests 或為空，顯示提示 */}
+                {(!viewInvite.joinRequests || viewInvite.joinRequests.length === 0) && (
+                  <Box>
+                    <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
+                      Join Members
+                    </Typography>
+                    <Typography variant="body2" color="text.secondary" sx={{ fontStyle: 'italic' }}>
+                      No members have joined yet.
+                    </Typography>
+                  </Box>
+                )}
+                {joinStatus === 'confirmed' && (
+                  <Alert severity="success" sx={{ mb: 3 }} icon={<Info />}>You have successfully joined this match!</Alert>
+                )}
+                <Stack direction="row" spacing={2} sx={{ mb: 3 }}>
+                  {(() => {
+                    // 強化判斷：memberId 轉字串比對，並 fallback 比對 name/username
+                    const hasJoined = viewInvite && viewInvite.joinRequests && viewInvite.joinRequests.some(
+                      req => req.status === 'APPROVED' && req.username && req.username === currentUser?.username
+                    );
+                    const isFull = viewInvite.currentPlayers >= viewInvite.maxPlayers;
+                    const isOrganizer = viewInvite.organizerUsername === currentUser?.username;
+                    const isCancelled = viewInvite.bookingStatus === 'CANCELLED';
+                    const isEnded = viewInvite.status === 'END' || viewInvite.status === 'CLOSED';
+
+                    if (hasJoined) {
+                      // 檢查是否為 organizer
+                      const isOrganizer = viewInvite.organizerUsername === currentUser?.username;
+
+                      if (isOrganizer) {
+                        // Organizer 只顯示 "Already Joined" 按鈕，沒有 Cancel Join
+                        return (
+                          <Button
+                            startIcon={<CheckIcon />}
+                            size="large"
+                            fullWidth
+                            color="success"
+                            variant="contained"
+                            disabled
+                            sx={{
+                              background: 'linear-gradient(45deg, #4CAF50 30%, #66BB6A 90%)',
+                              fontWeight: 'medium'
+                            }}
+                          >
+                            Already Joined
+                          </Button>
+                        );
+                      } else {
+                        // 一般參與者顯示兩個按鈕
+                        return (
+                          <Stack direction="row" spacing={2} sx={{ width: '100%' }}>
+                            <Button
+                              startIcon={<CheckIcon />}
+                              size="large"
+                              fullWidth
+                              color="success"
+                              variant="contained"
+                              disabled
+                              sx={{
+                                background: 'linear-gradient(45deg, #4CAF50 30%, #66BB6A 90%)',
+                                fontWeight: 'medium'
+                              }}
+                            >
+                              Already Joined
+                            </Button>
+                            <Button
+                              startIcon={<ExitToApp />}
+                              size="large"
+                              color="error"
+                              variant="outlined"
+                              onClick={handleCancelJoin}
+                              sx={{ fontWeight: 'medium', minWidth: 150 }}
+                            >
+                              Cancel Join
+                            </Button>
+                          </Stack>
+                        );
+                      }
+                    }
+                    if (isFull && !hasJoined) {
+                      return (
+                        <Button
+                          startIcon={<PersonAdd />}
+                          size="large"
+                          fullWidth
+                          color="warning"
+                          variant="contained"
+                          disabled
+                          sx={{
+                            background: 'linear-gradient(45deg, #FF9800 30%, #FFB74D 90%)',
+                            fontWeight: 'medium'
+                          }}
+                        >
+                          Match Full
+                        </Button>
+                      );
+                    }
+                    // 檢查是否為 organizer 且比賽滿員需要付款
+                    if (isOrganizer && isFull && viewInvite.paymentStatus === 'PENDING') {
+                      return (
+                        <Button
+                          startIcon={<PersonAdd />}
+                          size="large"
+                          fullWidth
+                          color="primary"
+                          variant="contained"
+                          onClick={handlePayForMatch}
+                          sx={{
+                            background: 'linear-gradient(45deg, #2196F3 30%, #21CBF3 90%)',
+                            fontWeight: 'medium'
+                          }}
+                        >
+                          💳 Make Payment
+                        </Button>
+                      );
+                    }
+
+                    return (
+                      <Button
+                        startIcon={<PersonAdd />}
+                        size="large"
+                        fullWidth
+                        color={isCancelled ? 'error' : (isOrganizer ? 'info' : 'primary')}
+                        variant="contained"
+                        onClick={isCancelled || isEnded || isOrganizer ? undefined : () => handleJoin(viewInvite.id)}
+                        disabled={isCancelled || isEnded || isOrganizer || joiningId === viewInvite.id}
+                        sx={{
+                          background: isCancelled || isEnded ? 'grey.400' : 'linear-gradient(45deg, #2196F3 30%, #21CBF3 90%)',
+                          fontWeight: 'medium'
+                        }}
+                      >
+                        {isCancelled
+                          ? 'Booking Cancelled'
+                          : isEnded
+                            ? 'Match Ended'
+                            : isOrganizer
+                              ? "You're the organizer"
+                              : joiningId === viewInvite.id ? (
+                                <Box sx={{ display: 'flex', alignItems: 'center' }}>
+                                  <CircularProgress size={16} color="inherit" sx={{ mr: 1 }} />
+                                  Joining...
+                                </Box>
+                              ) : (
+                                'Join Match'
+                              )}
+                      </Button>
+                    );
+                  })()}
                 </Stack>
-              </ListItem>
-            ))}
-          </List>
-        </TabPanel>
-        <TabPanel value={activeTab} index={2}>
-          <Typography variant="h6" gutterBottom>
-            Match Rules & Guidelines
-          </Typography>
-          <Typography variant="body2" paragraph>
-            • Fair play is expected from all participants
-          </Typography>
-          <Typography variant="body2" paragraph>
-            • Entry fee must be paid before match start
-          </Typography>
-          <Typography variant="body2" paragraph>
-            • Cancellation must be done at least 2 hours before match time
-          </Typography>
-          <Typography variant="body2" paragraph>
-            • Players must arrive 15 minutes before match time
-          </Typography>
-          <Typography variant="body2" paragraph>
-            • Proper sports attire required
-          </Typography>
-        </TabPanel>
-      </ThemedCard>
-
-      {/* Join Request Modal */}
-      <Dialog open={showJoinModal} onClose={() => setShowJoinModal(false)} maxWidth="sm" fullWidth>
-        <DialogTitle>
-          <Box display="flex" justifyContent="space-between" alignItems="center">
-            Send Join Request
-            <IconButton onClick={() => setShowJoinModal(false)}>
-              <Close />
-            </IconButton>
-          </Box>
-        </DialogTitle>
-        <DialogContent>
-          <Typography variant="body2" color="text.secondary" mb={2}>
-            Your request will be sent to the match organizer for approval.
-          </Typography>
-          <TextField
-            fullWidth
-            multiline
-            rows={3}
-            placeholder="Add a message (optional)"
-            value={joinMessage}
-            onChange={(e) => setJoinMessage(e.target.value)}
-            sx={{ mt: 2 }}
-          />
-        </DialogContent>
-        <DialogActions>
-          <Button onClick={() => setShowJoinModal(false)}>
-            Cancel
-          </Button>
-          <Button 
-            onClick={confirmJoinRequest} 
-            variant="contained" 
-            startIcon={<Send />}
-          >
-            Send Request
-          </Button>
-        </DialogActions>
-      </Dialog>
+              </Stack>
+            )}
+          </DialogContent>
+        </Dialog>
+
+        {/* User Profile Dialog */}
+        <Dialog open={userProfileDialogOpen} onClose={handleCloseUserProfile} maxWidth="xs" fullWidth>
+          <DialogTitle>User Profile</DialogTitle>
+          <DialogContent>
+            {selectedUserProfile ? (
+              <Box sx={{ p: 2 }}>
+                <Typography variant="subtitle1" fontWeight="bold">Username: {selectedUserProfile.username}</Typography>
+                <Typography variant="body2">Name: {selectedUserProfile.name || '-'}</Typography>
+                <Typography variant="body2">Email: {selectedUserProfile.email || '-'}</Typography>
+                <Typography variant="body2">Phone: {selectedUserProfile.phone || '-'}</Typography>
+
+                {/* Send Message Button - 只有當不是自己的資料時才顯示 */}
+                {selectedUserProfile.username !== currentUser?.username && (
+                  <Box sx={{ mt: 3, display: 'flex', justifyContent: 'center' }}>
+                    <Button
+                      variant="contained"
+                      color="primary"
+                      onClick={handleSendMessage}
+                      sx={{ minWidth: 150 }}
+                    >
+                      Send Message
+                    </Button>
+                  </Box>
+                )}
+              </Box>
+            ) : (
+              <Typography>Loading...</Typography>
+            )}
+          </DialogContent>
+        </Dialog>
+
+        {/* Message Dialog */}
+        <Dialog open={messageDialogOpen} onClose={handleCloseMessageDialog} maxWidth="sm" fullWidth>
+          <DialogTitle>
+            Send Message to {selectedUserProfile?.username}
+          </DialogTitle>
+          <DialogContent>
+            <Box sx={{ p: 2 }}>
+              {messageError && (
+                <Alert severity="error" sx={{ mb: 2 }}>
+                  {messageError}
+                </Alert>
+              )}
+              {messageSuccess && (
+                <Alert severity="success" sx={{ mb: 2 }}>
+                  {messageSuccess}
+                </Alert>
+              )}
+              <TextField
+                fullWidth
+                multiline
+                rows={4}
+                variant="outlined"
+                label="Message"
+                value={messageContent}
+                onChange={(e) => setMessageContent(e.target.value)}
+                placeholder="Type your message here..."
+                sx={{ mb: 2 }}
+              />
+            </Box>
+          </DialogContent>
+          <DialogActions>
+            <Button onClick={handleCloseMessageDialog} disabled={sendingMessage}>
+              Cancel
+            </Button>
+            <Button
+              onClick={handleSubmitMessage}
+              variant="contained"
+              disabled={sendingMessage || !messageContent.trim()}
+            >
+              {sendingMessage ? <CircularProgress size={20} /> : 'Send'}
+            </Button>
+          </DialogActions>
+        </Dialog>
+
+        {/* Share Dialog */}
+        <Dialog open={shareDialogOpen} onClose={() => setShareDialogOpen(false)} maxWidth="sm" fullWidth>
+          <DialogTitle>
+            Share Friendly Match
+          </DialogTitle>
+          <DialogContent>
+            <Box sx={{ mb: 3 }}>
+              <Typography variant="body2" color="text.secondary" gutterBottom>
+                Select Friend or Search User:
+              </Typography>
+
+              {/* 朋友列表下拉框 */}
+              <FormControl fullWidth size="small" sx={{ mb: 2 }}>
+                <InputLabel>Select from Friends</InputLabel>
+                <Select
+                  value=""
+                  onChange={(e) => selectUser(e.target.value)}
+                  label="Select from Friends"
+                  onClick={fetchFriends}
+                >
+                  {friends.map((friend) => (
+                    <MenuItem key={friend.id} value={friend.username}>
+                      {friend.username} {friend.name && `(${friend.name})`}
+                    </MenuItem>
+                  ))}
+                  {friends.length === 0 && (
+                    <MenuItem disabled>No friends found</MenuItem>
+                  )}
+                </Select>
+              </FormControl>
+
+              {/* 搜索用戶 */}
+              <Box sx={{ display: 'flex', gap: 1, mb: 2 }}>
+                <TextField
+                  fullWidth
+                  value={searchQuery}
+                  onChange={(e) => setSearchQuery(e.target.value)}
+                  placeholder="Search by username"
+                  variant="outlined"
+                  size="small"
+                  onKeyPress={(e) => e.key === 'Enter' && searchUsers()}
+                />
+                <Button
+                  variant="contained"
+                  onClick={searchUsers}
+                  disabled={isSearching || !searchQuery.trim()}
+                  sx={{ minWidth: '80px' }}
+                >
+                  {isSearching ? '...' : 'Search'}
+                </Button>
+              </Box>
+
+              {/* 搜索結果 */}
+              {showSearchResults && (
+                <Box sx={{ mb: 2, maxHeight: 150, overflow: 'auto', border: '1px solid #e0e0e0', borderRadius: 1 }}>
+                  {searchResults.map((user) => (
+                    <Box
+                      key={user.id}
+                      onClick={() => selectUser(user.username)}
+                      sx={{
+                        p: 1,
+                        cursor: 'pointer',
+                        '&:hover': { backgroundColor: '#f5f5f5' },
+                        borderBottom: '1px solid #f0f0f0'
+                      }}
+                    >
+                      <Typography variant="body2" fontWeight="medium">
+                        {user.username}
+                      </Typography>
+                      {user.name && (
+                        <Typography variant="body2" color="text.secondary">
+                          {user.name}
+                        </Typography>
+                      )}
+                    </Box>
+                  ))}
+                  {searchResults.length === 0 && (
+                    <Box sx={{ p: 1, textAlign: 'center' }}>
+                      <Typography variant="body2" color="text.secondary">
+                        No users found
+                      </Typography>
+                    </Box>
+                  )}
+                </Box>
+              )}
+
+              {/* 選中的用戶 */}
+              {shareRecipient && (
+                <Box sx={{ mb: 2, p: 1, backgroundColor: '#e3f2fd', borderRadius: 1 }}>
+                  <Typography variant="body2" color="text.secondary">
+                    Selected: <strong>{shareRecipient}</strong>
+                  </Typography>
+                </Box>
+              )}
+            </Box>
+
+            <Box>
+              <Typography variant="body2" color="text.secondary" gutterBottom>
+                Message Preview:
+              </Typography>
+              <TextField
+                fullWidth
+                multiline
+                rows={8}
+                value={shareMessage}
+                onChange={(e) => setShareMessage(e.target.value)}
+                variant="outlined"
+                sx={{
+                  '& .MuiOutlinedInput-root': {
+                    backgroundColor: '#f5f5f5'
+                  }
+                }}
+              />
+            </Box>
+          </DialogContent>
+          <DialogActions>
+            <Button onClick={() => setShareDialogOpen(false)}>
+              Cancel
+            </Button>
+            <Button
+              onClick={handleSendShare}
+              variant="contained"
+              disabled={isSharing || !shareRecipient.trim()}
+              sx={{
+                backgroundColor: '#2196f3',
+                '&:hover': {
+                  backgroundColor: '#1976d2'
+                }
+              }}
+            >
+              {isSharing ? 'Sending...' : 'Send Invitation'}
+            </Button>
+          </DialogActions>
+        </Dialog>
 
-      {/* Cancel Join Modal */}
-      <Dialog open={showCancelModal} onClose={() => setShowCancelModal(false)} maxWidth="sm">
-        <DialogTitle>Cancel Match Participation</DialogTitle>
-        <DialogContent>
-          <Typography>
-            Are you sure you want to cancel your participation in this match? 
-            The organizer will be notified.
-          </Typography>
-        </DialogContent>
-        <DialogActions>
-          <Button onClick={() => setShowCancelModal(false)}>
-            Keep Participation
-          </Button>
-          <Button onClick={confirmCancelJoin} color="error" variant="contained">
-            Cancel Participation
-          </Button>
-        </DialogActions>
-      </Dialog>
+        {/* Cancel Join Confirmation Dialog */}
+        <Dialog open={cancelConfirmDialogOpen} onClose={handleCloseCancelConfirmDialog} maxWidth="sm" fullWidth>
+          <DialogTitle>
+            Confirm Cancel Join
+          </DialogTitle>
+          <DialogContent>
+            <Box sx={{ p: 2 }}>
+              <Typography variant="body1" sx={{ mb: 2 }}>
+                Are you sure you want to cancel your join for this match?
+              </Typography>
+              <Typography variant="body2" color="text.secondary">
+                This action cannot be undone. You will be removed from the match.
+              </Typography>
+            </Box>
+          </DialogContent>
+          <DialogActions>
+            <Button onClick={handleCloseCancelConfirmDialog}>
+              Keep Joined
+            </Button>
+            <Button
+              onClick={() => {
+                console.log('Button clicked!'); // Debug log
+                handleConfirmCancelJoin();
+              }}
+              variant="contained"
+              color="error"
+            >
+              Yes, Cancel Join
+            </Button>
+          </DialogActions>
+        </Dialog>
+      </Box>
     </Container>
   );
 };
 
-export default FriendlyMatchPage; 
\ No newline at end of file
+export default FriendlyMatchPage;
\ No newline at end of file
Index: pickleball-frontend/src/components/profile/WalletTopUpPage.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Container,\r\n  Card,\r\n  CardContent,\r\n  Typography,\r\n  Button,\r\n  Box,\r\n  TextField,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Alert,\r\n  CircularProgress,\r\n  Grid,\r\n  useTheme,\r\n  alpha\r\n} from '@mui/material';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { ArrowBack as BackIcon } from '@mui/icons-material';\r\nimport { getWalletBalance, topUpWallet } from '../../service/WalletService';\r\n\r\nconst WalletTopUpPage = () => {\r\n  const navigate = useNavigate();\r\n  const theme = useTheme();\r\n  const [amount, setAmount] = useState('');\r\n  const [paymentSource, setPaymentSource] = useState('BANK_CARD');\r\n  const [walletBalance, setWalletBalance] = useState(0);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [isProcessing, setIsProcessing] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [success, setSuccess] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const fetchWalletBalance = async () => {\r\n      try {\r\n        const balance = await getWalletBalance();\r\n        setWalletBalance(balance);\r\n      } catch (error) {\r\n        console.error('Failed to fetch wallet balance:', error);\r\n        setError('Failed to load wallet balance');\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchWalletBalance();\r\n  }, []);\r\n\r\n  const handleTopUp = async () => {\r\n    if (!amount || parseFloat(amount) <= 0) {\r\n      setError('Please enter a valid amount');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setIsProcessing(true);\r\n      setError(null);\r\n      \r\n      await topUpWallet(parseFloat(amount), paymentSource);\r\n      \r\n      setSuccess(true);\r\n      // Refresh wallet balance\r\n      const newBalance = await getWalletBalance();\r\n      setWalletBalance(newBalance);\r\n      \r\n      // Redirect back to payment page after 2 seconds\r\n      setTimeout(() => {\r\n        navigate(-1);\r\n      }, 2000);\r\n      \r\n    } catch (error) {\r\n      setError(error.message || 'Top-up failed. Please try again.');\r\n    } finally {\r\n      setIsProcessing(false);\r\n    }\r\n  };\r\n\r\n  const predefinedAmounts = [10, 20, 50, 100, 200, 500];\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <Container sx={{ py: 4, textAlign: 'center' }}>\r\n        <CircularProgress size={60} />\r\n      </Container>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Container maxWidth=\"sm\" sx={{ py: 4 }}>\r\n      <Button\r\n        variant=\"text\"\r\n        onClick={() => navigate(-1)}\r\n        sx={{\r\n          mb: 3,\r\n          display: 'flex',\r\n          alignItems: 'center',\r\n          textTransform: 'none',\r\n          fontWeight: 500,\r\n          color: theme.palette.primary.main,\r\n          '&:hover': {\r\n            backgroundColor: 'transparent',\r\n            textDecoration: 'underline'\r\n          }\r\n        }}\r\n        startIcon={<BackIcon />}\r\n      >\r\n        Back\r\n      </Button>\r\n\r\n      <Card sx={{\r\n        borderRadius: 3,\r\n        boxShadow: theme.shadows[4],\r\n        background: `linear-gradient(135deg, ${theme.palette.background.paper}, ${theme.palette.background.paper})`\r\n      }}>\r\n        <CardContent sx={{ p: 4 }}>\r\n          <Typography variant=\"h4\" sx={{ fontWeight: 'bold', mb: 1, textAlign: 'center' }}>\r\n            Top Up Wallet\r\n          </Typography>\r\n          \r\n          <Typography variant=\"body1\" sx={{ mb: 4, textAlign: 'center', color: theme.palette.text.secondary }}>\r\n            Add money to your wallet for easy payments\r\n          </Typography>\r\n\r\n          {/* Current Balance */}\r\n          <Box sx={{ \r\n            mb: 4, \r\n            p: 3, \r\n            bgcolor: alpha(theme.palette.success.light, 0.1), \r\n            borderRadius: '12px',\r\n            border: `1px solid ${alpha(theme.palette.success.light, 0.2)}`,\r\n            textAlign: 'center'\r\n          }}>\r\n            <Typography variant=\"h6\" fontWeight=\"bold\" color={theme.palette.success.main}>\r\n              Current Balance: RM{walletBalance.toFixed(2)}\r\n            </Typography>\r\n          </Box>\r\n\r\n          {success && (\r\n            <Alert severity=\"success\" sx={{ mb: 3 }}>\r\n              Top-up successful! Redirecting back to payment...\r\n            </Alert>\r\n          )}\r\n\r\n          {error && (\r\n            <Alert severity=\"error\" sx={{ mb: 3 }}>\r\n              {error}\r\n            </Alert>\r\n          )}\r\n\r\n          {/* Amount Selection */}\r\n          <Box sx={{ mb: 4 }}>\r\n            <Typography variant=\"h6\" sx={{ mb: 2, fontWeight: 'bold' }}>\r\n              Select Amount\r\n            </Typography>\r\n            \r\n            <Grid container spacing={2} sx={{ mb: 3 }}>\r\n              {predefinedAmounts.map((predefinedAmount) => (\r\n                <Grid item xs={4} sm={2} key={predefinedAmount}>\r\n                  <Button\r\n                    fullWidth\r\n                    variant={amount === predefinedAmount.toString() ? \"contained\" : \"outlined\"}\r\n                    onClick={() => setAmount(predefinedAmount.toString())}\r\n                    sx={{\r\n                      py: 1.5,\r\n                      borderRadius: '8px',\r\n                      fontWeight: 600,\r\n                      ...(amount === predefinedAmount.toString() && {\r\n                        background: 'linear-gradient(90deg, #6a11cb 0%, #2575fc 100%)',\r\n                        color: theme.palette.common.white\r\n                      })\r\n                    }}\r\n                  >\r\n                    RM{predefinedAmount}\r\n                  </Button>\r\n                </Grid>\r\n              ))}\r\n            </Grid>\r\n\r\n            <TextField\r\n              fullWidth\r\n              label=\"Custom Amount (RM)\"\r\n              type=\"number\"\r\n              value={amount}\r\n              onChange={(e) => setAmount(e.target.value)}\r\n              placeholder=\"Enter amount\"\r\n              sx={{ mb: 2 }}\r\n              InputProps={{\r\n                startAdornment: <Typography sx={{ mr: 1 }}>RM</Typography>\r\n              }}\r\n            />\r\n          </Box>\r\n\r\n          {/* Payment Source */}\r\n          <Box sx={{ mb: 4 }}>\r\n            <Typography variant=\"h6\" sx={{ mb: 2, fontWeight: 'bold' }}>\r\n              Payment Method\r\n            </Typography>\r\n            \r\n            <FormControl fullWidth>\r\n              <InputLabel>Payment Source</InputLabel>\r\n              <Select\r\n                value={paymentSource}\r\n                onChange={(e) => setPaymentSource(e.target.value)}\r\n                label=\"Payment Source\"\r\n              >\r\n                <MenuItem value=\"BANK_CARD\">Credit/Debit Card</MenuItem>\r\n                <MenuItem value=\"BANK_TRANSFER\">Bank Transfer</MenuItem>\r\n                <MenuItem value=\"E_WALLET\">E-Wallet</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n          </Box>\r\n\r\n          {/* Top Up Button */}\r\n          <Button\r\n            fullWidth\r\n            variant=\"contained\"\r\n            size=\"large\"\r\n            onClick={handleTopUp}\r\n            disabled={isProcessing || !amount || parseFloat(amount) <= 0}\r\n            sx={{\r\n              py: 1.5,\r\n              fontWeight: 'bold',\r\n              background: 'linear-gradient(90deg, #6a11cb 0%, #2575fc 100%)',\r\n              '&:hover': {\r\n                background: 'linear-gradient(90deg, #2575fc 0%, #6a11cb 100%)',\r\n                boxShadow: theme.shadows[6]\r\n              }\r\n            }}\r\n          >\r\n            {isProcessing ? (\r\n              <CircularProgress size={24} color=\"inherit\" />\r\n            ) : (\r\n              `Top Up RM${amount || '0.00'}`\r\n            )}\r\n          </Button>\r\n        </CardContent>\r\n      </Card>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default WalletTopUpPage; 
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball-frontend/src/components/profile/WalletTopUpPage.jsx b/pickleball-frontend/src/components/profile/WalletTopUpPage.jsx
--- a/pickleball-frontend/src/components/profile/WalletTopUpPage.jsx	(revision 97abd609899a67b781b8ace8e91358a782fc5acd)
+++ b/pickleball-frontend/src/components/profile/WalletTopUpPage.jsx	(date 1753766798437)
@@ -77,7 +77,7 @@
     }
   };
 
-  const predefinedAmounts = [10, 20, 50, 100, 200, 500];
+  const predefinedAmounts = [10, 20, 50, 100, 200, 500, 1000];
 
   if (isLoading) {
     return (
Index: pickleball-frontend/src/components/event/EventEditPage.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useState, useEffect } from \"react\";\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport {\r\n  Box,\r\n  Container,\r\n  Paper,\r\n  Typography,\r\n  TextField,\r\n  Button,\r\n  Grid,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Chip,\r\n  Avatar,\r\n  IconButton,\r\n  Divider,\r\n  Alert,\r\n  Card,\r\n  CardContent,\r\n  Switch,\r\n  FormControlLabel,\r\n  InputAdornment,\r\n  Fade,\r\n  Zoom,\r\n  CircularProgress,\r\n  useTheme,\r\n  alpha\r\n} from '@mui/material';\r\nimport {\r\n  Event,\r\n  LocationOn,\r\n  AccessTime,\r\n  Person,\r\n  Category,\r\n  AttachMoney,\r\n  CalendarToday,\r\n  Public,\r\n  Lock,\r\n  Error\r\n} from '@mui/icons-material';\r\nimport { useAuth } from '../../context/AuthContext';\r\nimport api from '../../service/api';\r\nimport EventService from '../../service/EventService';\r\n\r\nexport default function EventEditPage() {\r\n  const { eventId } = useParams();\r\n  const navigate = useNavigate();\r\n  const { currentUser } = useAuth();\r\n  const theme = useTheme();\r\n\r\n  const [event, setEvent] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [submitting, setSubmitting] = useState(false);\r\n  const [message, setMessage] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n  const [notifyParticipants, setNotifyParticipants] = useState(false);\r\n  const [showSuccess, setShowSuccess] = useState(false);\r\n\r\n  const categories = [\r\n    'Tournament',\r\n    'Social Play',\r\n    'Ladder League',\r\n    'Round Robin',\r\n    'Clinic',\r\n    'Open Play',\r\n    'Youth Event',\r\n    'Senior Event',\r\n    'Charity Event',\r\n    'Skills & Drills',\r\n    'Exhibition Match',\r\n    'Club Night',\r\n    'Beginner Session',\r\n    'Advanced Play'\r\n  ];\r\n  const skillLevels = [\r\n    'Beginner', 'Intermediate', 'Advanced', 'All Levels'\r\n  ];\r\n\r\n  const [form, setForm] = useState({\r\n    title: \"\",\r\n    eventType: \"\",\r\n    skillLevel: \"\",\r\n    eligibility: \"\",\r\n    schedule: [],\r\n    date: '',\r\n    time: '',\r\n    endTime: '',\r\n    location: \"\",\r\n    capacity: \"\",\r\n    price: '',\r\n    feeAmount: '',\r\n    //description: ''\r\n  });\r\n  const [scheduleTime, setScheduleTime] = useState('');\r\n  const [scheduleActivity, setScheduleActivity] = useState('');\r\n  const [scheduleArray, setScheduleArray] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchEvent = async () => {\r\n      try {\r\n        const eventData = await EventService.getEventDetails(eventId);\r\n        if (eventData.organizerId !== currentUser?.id && currentUser?.role !== \"EVENTORGANIZER\") {\r\n          setError(\"You don't have permission to edit this event.\");\r\n          return;\r\n        }\r\n        setEvent(eventData);\r\n        // Parse start and end time\r\n        const start = new Date(eventData.startTime);\r\n        const end = new Date(eventData.endTime);\r\n        setForm({\r\n          title: eventData.title || \"\",\r\n          eventType: eventData.eventType || \"\",\r\n          skillLevel: eventData.skillLevel || \"\",\r\n          eligibility: eventData.eligibility || \"\",\r\n          schedule: eventData.schedule ? JSON.parse(eventData.schedule) : [],\r\n          date: start.getFullYear() + '-' +\r\n                String(start.getMonth() + 1).padStart(2, '0') + '-' +\r\n                String(start.getDate()).padStart(2, '0'),\r\n          time: String(start.getHours()).padStart(2, '0') + ':' +\r\n                String(start.getMinutes()).padStart(2, '0'),\r\n          endTime: String(end.getHours()).padStart(2, '0') + ':' + String(end.getMinutes()).padStart(2, '0'),\r\n          location: eventData.location || \"\",\r\n          capacity: eventData.capacity?.toString() || \"\",\r\n          price: eventData.feeAmount?.toString() || '',\r\n          feeAmount: eventData.feeAmount?.toString() || '',\r\n        //  description: eventData.description || ''\r\n        });\r\n        setScheduleArray(eventData.schedule ? JSON.parse(eventData.schedule) : []);\r\n      } catch (err) {\r\n        let msg = \"An error occurred\";\r\n        if (err?.response?.data?.message) {\r\n          msg = err.response.data.message;\r\n        } else if (typeof err?.response?.data === \"string\") {\r\n          msg = err.response.data;\r\n        } else if (typeof err?.response?.data === \"object\") {\r\n          msg = err.response.data.error || JSON.stringify(err.response.data);\r\n        } else if (err?.message) {\r\n          msg = err.message;\r\n        }\r\n        setError(msg);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    if (eventId) fetchEvent();\r\n  }, [eventId, currentUser]);\r\n\r\n  const handleInputChange = (field) => (event) => {\r\n    setForm({\r\n      ...form,\r\n      [field]: event.target.value\r\n    });\r\n    if (error) setError('');\r\n    if (message) setMessage('');\r\n  };\r\n  const handleSwitchChange = (field) => (event) => {\r\n    setForm({\r\n      ...form,\r\n      [field]: event.target.checked\r\n    });\r\n  };\r\n  const handleAddScheduleItem = () => {\r\n    if (scheduleTime && scheduleActivity) {\r\n      const newSchedule = [...scheduleArray, { time: scheduleTime, activity: scheduleActivity }];\r\n      setScheduleArray(newSchedule);\r\n      setForm({ ...form, schedule: newSchedule });\r\n      setScheduleTime('');\r\n      setScheduleActivity('');\r\n    }\r\n  };\r\n  const handleRemoveScheduleItem = (idx) => {\r\n    const newSchedule = scheduleArray.filter((_, i) => i !== idx);\r\n    setScheduleArray(newSchedule);\r\n    setForm({ ...form, schedule: newSchedule });\r\n  };\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setSubmitting(true);\r\n    setError('');\r\n    setMessage('');\r\n    try {\r\n      const eventData = {\r\n        title: form.title,\r\n        startTime: `${form.date}T${form.time}`,\r\n        endTime: `${form.date}T${form.endTime}`,\r\n        eventType: form.eventType,\r\n        skillLevel: form.skillLevel,\r\n        capacity: parseInt(form.capacity, 10),\r\n        location: form.location,\r\n        eligibility: form.eligibility,\r\n        schedule: JSON.stringify(scheduleArray),\r\n        feeAmount: form.price ? parseFloat(form.price) : 0,\r\n        status: 'PUBLISHED', // Always publish when updating\r\n       // description: form.description\r\n      };\r\n      if (notifyParticipants) {\r\n        await EventService.updateEventWithNotification(eventId, eventData);\r\n      } else {\r\n        await EventService.updateEvent(eventId, eventData);\r\n      }\r\n      setShowSuccess(true);\r\n      setMessage('Event updated successfully!');\r\n      setTimeout(() => {\r\n        navigate('/events', { state: { refresh: true } });\r\n      }, 2000);\r\n    } catch (err) {\r\n      let errorMsg = \"Failed to update event.\";\r\n      if (err.response?.data) {\r\n        if (typeof err.response.data === \"string\") {\r\n          errorMsg = err.response.data;\r\n        } else if (typeof err.response.data === \"object\") {\r\n          errorMsg = err.response.data.message || err.response.data.error || JSON.stringify(err.response.data);\r\n        }\r\n      }\r\n      setError(errorMsg);\r\n    } finally {\r\n      setSubmitting(false);\r\n    }\r\n  };\r\n  const handleDelete = async () => {\r\n    if (!window.confirm(\"Are you sure you want to delete this event? This action cannot be undone.\")) {\r\n      return;\r\n    }\r\n    setSubmitting(true);\r\n    try {\r\n      await EventService.deleteEvent(eventId);\r\n      setMessage(\"Event deleted successfully!\");\r\n      setTimeout(() => {\r\n        navigate('/events');\r\n      }, 2000);\r\n    } catch (err) {\r\n      let msg = \"An error occurred\";\r\n      if (err?.response?.data?.message) {\r\n        msg = err.response.data.message;\r\n      } else if (typeof err?.response?.data === \"string\") {\r\n        msg = err.response.data;\r\n      } else if (typeof err?.response?.data === \"object\") {\r\n        msg = err.response.data.error || JSON.stringify(err.response.data);\r\n      } else if (err?.message) {\r\n        msg = err.message;\r\n      }\r\n      setError(msg);\r\n    } finally {\r\n      setSubmitting(false);\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', minHeight: '60vh' }}><CircularProgress /></Box>;\r\n  }\r\n  if (error) {\r\n    return <Alert severity=\"error\" sx={{ mt: 4 }}>{error}</Alert>;\r\n  }\r\n\r\n  return (\r\n    <Box sx={{ minHeight: '100vh', background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)', py: 4 }}>\r\n      <Container maxWidth=\"lg\">\r\n        <Fade in timeout={800}>\r\n          <Paper elevation={24} sx={{ p: 4, borderRadius: 4, background: 'rgba(255, 255, 255, 0.95)', backdropFilter: 'blur(10px)' }}>\r\n            {/* Header */}\r\n            <Box sx={{ mb: 4, textAlign: 'center' }}>\r\n              <Avatar sx={{ width: 80, height: 80, mx: 'auto', mb: 2, background: 'linear-gradient(45deg, #667eea, #764ba2)' }}>\r\n                <Event sx={{ fontSize: 40 }} />\r\n              </Avatar>\r\n              <Typography variant=\"h3\" component=\"h1\" sx={{ fontWeight: 'bold', background: 'linear-gradient(45deg, #667eea, #764ba2)', backgroundClip: 'text', WebkitBackgroundClip: 'text', WebkitTextFillColor: 'transparent', mb: 1 }}>\r\n                Edit Event\r\n              </Typography>\r\n              <Typography variant=\"h6\" color=\"text.secondary\">\r\n                Update your event details below\r\n              </Typography>\r\n            </Box>\r\n            {showSuccess && (\r\n              <Zoom in>\r\n                <Alert severity=\"success\" sx={{ mb: 3, borderRadius: 2 }} onClose={() => setShowSuccess(false)}>\r\n                  Event updated successfully! \uD83C\uDF89\r\n                </Alert>\r\n              </Zoom>\r\n            )}\r\n            {error && (\r\n              <Zoom in>\r\n                <Alert severity=\"error\" sx={{ mb: 3, borderRadius: 2 }} onClose={() => setError('')}>\r\n                  {error}\r\n                </Alert>\r\n              </Zoom>\r\n            )}\r\n            <form onSubmit={handleSubmit}>\r\n              <Grid container spacing={4}>\r\n                {/* Basic Information */}\r\n                <Grid item xs={12}>\r\n                  <Card elevation={8} sx={{ borderRadius: 3 }}>\r\n                    <CardContent>\r\n                      <Typography variant=\"h5\" gutterBottom sx={{ color: '#667eea', fontWeight: 'bold' }}>\r\n                        Basic Information\r\n                      </Typography>\r\n                      <Grid container spacing={3}>\r\n                        <Grid item xs={12}>\r\n                          <TextField\r\n                            fullWidth\r\n                            label=\"Event Title\"\r\n                            value={form.title}\r\n                            onChange={handleInputChange('title')}\r\n                            required\r\n                            variant=\"outlined\"\r\n                            InputProps={{\r\n                              startAdornment: (\r\n                                <InputAdornment position=\"start\">\r\n                                  <Event color=\"primary\" />\r\n                                </InputAdornment>\r\n                              ),\r\n                            }}\r\n                            sx={{ '& .MuiOutlinedInput-root': { borderRadius: 2 } }}\r\n                          />\r\n                        </Grid>\r\n                        <Grid item xs={12} md={6}>\r\n                          <FormControl fullWidth required disabled>\r\n                            <InputLabel>Category</InputLabel>\r\n                            <Select\r\n                              value={form.eventType}\r\n                              onChange={handleInputChange('eventType')}\r\n                              label=\"Category\"\r\n                              startAdornment={\r\n                                <InputAdornment position=\"start\">\r\n                                  <Category color=\"primary\" />\r\n                                </InputAdornment>\r\n                              }\r\n                              sx={{ borderRadius: 2 }}\r\n                            >\r\n                              {categories.map((category) => (\r\n                                <MenuItem key={category} value={category}>\r\n                                  {category}\r\n                                </MenuItem>\r\n                              ))}\r\n                            </Select>\r\n                          </FormControl>\r\n                        </Grid>\r\n                        <Grid item xs={12} md={6}>\r\n                          <FormControl fullWidth required disabled>\r\n                            <InputLabel>Skill Level</InputLabel>\r\n                            <Select\r\n                              value={form.skillLevel}\r\n                              onChange={handleInputChange('skillLevel')}\r\n                              label=\"Skill Level\"\r\n                              sx={{ borderRadius: 2 }}\r\n                            >\r\n                              {skillLevels.map((level) => (\r\n                                <MenuItem key={level} value={level}>\r\n                                  {level}\r\n                                </MenuItem>\r\n                              ))}\r\n                            </Select>\r\n                          </FormControl>\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                          <TextField\r\n                            fullWidth\r\n                            label=\"Eligibility\"\r\n                            value={form.eligibility}\r\n                            onChange={handleInputChange('eligibility')}\r\n                            multiline\r\n                            rows={2}\r\n                            variant=\"outlined\"\r\n                            disabled={true}\r\n                            sx={{ '& .MuiOutlinedInput-root': { borderRadius: 2 } }}\r\n                          />\r\n                        </Grid>\r\n                        {/* Schedule */}\r\n                        <Grid item xs={12}>\r\n                          <Typography variant=\"subtitle1\" sx={{ fontWeight: 'bold', mb: 1 }}>Schedule</Typography>\r\n                          <Grid container spacing={2} alignItems=\"center\">\r\n                            <Grid item xs={4}>\r\n                              <TextField\r\n                                label=\"Time\"\r\n                                type=\"time\"\r\n                                value={scheduleTime}\r\n                                onChange={e => setScheduleTime(e.target.value)}\r\n                                fullWidth\r\n                                size=\"small\"\r\n                              />\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                              <TextField\r\n                                label=\"Activity\"\r\n                                value={scheduleActivity}\r\n                                onChange={e => setScheduleActivity(e.target.value)}\r\n                                fullWidth\r\n                                size=\"small\"\r\n                              />\r\n                            </Grid>\r\n                            <Grid item xs={2}>\r\n                              <Button variant=\"contained\" onClick={handleAddScheduleItem} disabled={!scheduleTime || !scheduleActivity}>Add</Button>\r\n                            </Grid>\r\n                          </Grid>\r\n                          <Box sx={{ mt: 2 }}>\r\n                            {scheduleArray.length === 0 && <Typography color=\"text.secondary\">No schedule items added.</Typography>}\r\n                            {scheduleArray.map((item, idx) => (\r\n                              <Box key={idx} sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\r\n                                <Typography sx={{ mr: 2 }}>{item.time} - {item.activity}</Typography>\r\n                                <Button color=\"error\" size=\"small\" onClick={() => handleRemoveScheduleItem(idx)}>Remove</Button>\r\n                              </Box>\r\n                            ))}\r\n                          </Box>\r\n                        </Grid>\r\n                      </Grid>\r\n                    </CardContent>\r\n                  </Card>\r\n                </Grid>\r\n                {/* Date & Time */}\r\n                <Grid item xs={12} md={6}>\r\n                  <Card elevation={8} sx={{ borderRadius: 3, height: '100%' }}>\r\n                    <CardContent>\r\n                      <Typography variant=\"h5\" gutterBottom sx={{ color: '#667eea', fontWeight: 'bold' }}>\r\n                        Date & Time\r\n                      </Typography>\r\n                      <Grid container spacing={3}>\r\n                        <Grid item xs={12}>\r\n                          <TextField\r\n                            fullWidth\r\n                            label=\"Date\"\r\n                            type=\"date\"\r\n                            value={form.date}\r\n                            onChange={handleInputChange('date')}\r\n                            required\r\n                            InputLabelProps={{ shrink: true }}\r\n                            InputProps={{\r\n                              startAdornment: (\r\n                                <InputAdornment position=\"start\">\r\n                                  <CalendarToday color=\"primary\" />\r\n                                </InputAdornment>\r\n                              ),\r\n                            }}\r\n                            sx={{ '& .MuiOutlinedInput-root': { borderRadius: 2 } }}\r\n                            disabled={true}\r\n                          />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                          <TextField\r\n                            fullWidth\r\n                            label=\"Time\"\r\n                            type=\"time\"\r\n                            value={form.time}\r\n                            onChange={handleInputChange('time')}\r\n                            required\r\n                            InputLabelProps={{ shrink: true }}\r\n                            InputProps={{\r\n                              startAdornment: (\r\n                                <InputAdornment position=\"start\">\r\n                                  <AccessTime color=\"primary\" />\r\n                                </InputAdornment>\r\n                              ),\r\n                            }}\r\n                            sx={{ '& .MuiOutlinedInput-root': { borderRadius: 2 } }}\r\n                            disabled={true}\r\n                          />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                          <TextField\r\n                            fullWidth\r\n                            label=\"End Time\"\r\n                            type=\"time\"\r\n                            value={form.endTime}\r\n                            onChange={handleInputChange('endTime')}\r\n                            required\r\n                            InputLabelProps={{ shrink: true }}\r\n                            InputProps={{\r\n                              startAdornment: (\r\n                                <InputAdornment position=\"start\">\r\n                                  <AccessTime color=\"primary\" />\r\n                                </InputAdornment>\r\n                              ),\r\n                            }}\r\n                            sx={{ '& .MuiOutlinedInput-root': { borderRadius: 2 } }}\r\n                            disabled={true}\r\n                          />\r\n                        </Grid>\r\n                      </Grid>\r\n                    </CardContent>\r\n                  </Card>\r\n                </Grid>\r\n                {/* Location & Capacity */}\r\n                <Grid item xs={12} md={6}>\r\n                  <Card elevation={8} sx={{ borderRadius: 3, height: '100%' }}>\r\n                    <CardContent>\r\n                      <Typography variant=\"h5\" gutterBottom sx={{ color: '#667eea', fontWeight: 'bold' }}>\r\n                        Location & Capacity\r\n                      </Typography>\r\n                      <Grid container spacing={3}>\r\n                        <Grid item xs={12}>\r\n                          <TextField\r\n                            fullWidth\r\n                            label=\"Location\"\r\n                            value={form.location}\r\n                            onChange={handleInputChange('location')}\r\n                            required\r\n                            variant=\"outlined\"\r\n                            InputProps={{\r\n                              startAdornment: (\r\n                                <InputAdornment position=\"start\">\r\n                                  <LocationOn color=\"primary\" />\r\n                                </InputAdornment>\r\n                              ),\r\n                            }}\r\n                            sx={{ '& .MuiOutlinedInput-root': { borderRadius: 2 } }}\r\n                            disabled={true}\r\n                          />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                          <TextField\r\n                            fullWidth\r\n                            label=\"Capacity\"\r\n                            type=\"number\"\r\n                            value={form.capacity}\r\n                            onChange={handleInputChange('capacity')}\r\n                            required\r\n                            variant=\"outlined\"\r\n                            InputProps={{\r\n                              startAdornment: (\r\n                                <InputAdornment position=\"start\">\r\n                                  <Person color=\"primary\" />\r\n                                </InputAdornment>\r\n                              ),\r\n                            }}\r\n                            sx={{ '& .MuiOutlinedInput-root': { borderRadius: 2 } }}\r\n                          />\r\n                        </Grid>\r\n                      </Grid>\r\n                    </CardContent>\r\n                  </Card>\r\n                </Grid>\r\n                {/* Pricing & Settings */}\r\n                <Grid item xs={12}>\r\n                  <Card elevation={8} sx={{ borderRadius: 3 }}>\r\n                    <CardContent>\r\n                      <Typography variant=\"h5\" gutterBottom sx={{ color: '#667eea', fontWeight: 'bold' }}>\r\n                        Pricing & Settings\r\n                      </Typography>\r\n                      <Grid container spacing={3} alignItems=\"center\">\r\n                        <Grid item xs={12} md={6}>\r\n                          <TextField\r\n                            fullWidth\r\n                            label=\"Price\"\r\n                            type=\"number\"\r\n                            value={form.price}\r\n                            onChange={handleInputChange('price')}\r\n                            variant=\"outlined\"\r\n                            InputProps={{\r\n                              startAdornment: (\r\n                                <InputAdornment position=\"start\">\r\n                                  <AttachMoney color=\"primary\" />\r\n                                </InputAdornment>\r\n                              ),\r\n                            }}\r\n                            sx={{ '& .MuiOutlinedInput-root': { borderRadius: 2 } }}\r\n                            disabled={true}\r\n                          />\r\n                        </Grid>\r\n                      </Grid>\r\n                    </CardContent>\r\n                  </Card>\r\n                </Grid>\r\n                \r\n                {/* Actions */}\r\n                <Grid item xs={12} sx={{ display: 'flex', justifyContent: 'flex-end', gap: 2 }}>\r\n                  <Button variant=\"contained\" color=\"error\" onClick={handleDelete} disabled={submitting} sx={{ px: 4, borderRadius: 2 }}>\r\n                    Delete Event\r\n                  </Button>\r\n                  <Button variant=\"contained\" type=\"submit\" disabled={submitting} sx={{ px: 4, borderRadius: 2 }}>\r\n                    Update Event\r\n                  </Button>\r\n                  <FormControlLabel\r\n                    control={\r\n                      <Switch\r\n                        checked={notifyParticipants}\r\n                        onChange={e => setNotifyParticipants(e.target.checked)}\r\n                        color=\"primary\"\r\n                      />\r\n                    }\r\n                    label=\"Notify participants about changes\"\r\n                    sx={{ ml: 2 }}\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n            </form>\r\n          </Paper>\r\n        </Fade>\r\n      </Container>\r\n    </Box>\r\n  );\r\n} 
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball-frontend/src/components/event/EventEditPage.jsx b/pickleball-frontend/src/components/event/EventEditPage.jsx
--- a/pickleball-frontend/src/components/event/EventEditPage.jsx	(revision 97abd609899a67b781b8ace8e91358a782fc5acd)
+++ b/pickleball-frontend/src/components/event/EventEditPage.jsx	(date 1753723136411)
@@ -25,8 +25,8 @@
   Fade,
   Zoom,
   CircularProgress,
-  useTheme,
-  alpha
+  Checkbox,
+  ListItemText
 } from '@mui/material';
 import {
   Event,
@@ -43,12 +43,12 @@
 import { useAuth } from '../../context/AuthContext';
 import api from '../../service/api';
 import EventService from '../../service/EventService';
+import CourtService from '../../service/CourtService';
 
 export default function EventEditPage() {
   const { eventId } = useParams();
   const navigate = useNavigate();
   const { currentUser } = useAuth();
-  const theme = useTheme();
 
   const [event, setEvent] = useState(null);
   const [loading, setLoading] = useState(true);
@@ -57,6 +57,14 @@
   const [error, setError] = useState("");
   const [notifyParticipants, setNotifyParticipants] = useState(false);
   const [showSuccess, setShowSuccess] = useState(false);
+  const [courtIds, setCourtIds] = useState([]);
+  const [courts, setCourts] = useState([]);
+  const [venues, setVenues] = useState([]); // Added state for venues
+  const [capacityError, setCapacityError] = useState('');
+  const [filteredVenues, setFilteredVenues] = useState([]);
+  const [filteredCourts, setFilteredCourts] = useState([]);
+  const [deleteSuccess, setDeleteSuccess] = useState(false);
+  const [deleteError, setDeleteError] = useState('');
 
   const categories = [
     'Tournament',
@@ -74,24 +82,19 @@
     'Beginner Session',
     'Advanced Play'
   ];
-  const skillLevels = [
-    'Beginner', 'Intermediate', 'Advanced', 'All Levels'
-  ];
 
   const [form, setForm] = useState({
     title: "",
     eventType: "",
-    skillLevel: "",
     eligibility: "",
     schedule: [],
     date: '',
     time: '',
     endTime: '',
-    location: "",
     capacity: "",
     price: '',
     feeAmount: '',
-    //description: ''
+    venueId: '', // Added venueId to form state
   });
   const [scheduleTime, setScheduleTime] = useState('');
   const [scheduleActivity, setScheduleActivity] = useState('');
@@ -112,7 +115,6 @@
         setForm({
           title: eventData.title || "",
           eventType: eventData.eventType || "",
-          skillLevel: eventData.skillLevel || "",
           eligibility: eventData.eligibility || "",
           schedule: eventData.schedule ? JSON.parse(eventData.schedule) : [],
           date: start.getFullYear() + '-' +
@@ -121,11 +123,10 @@
           time: String(start.getHours()).padStart(2, '0') + ':' +
                 String(start.getMinutes()).padStart(2, '0'),
           endTime: String(end.getHours()).padStart(2, '0') + ':' + String(end.getMinutes()).padStart(2, '0'),
-          location: eventData.location || "",
           capacity: eventData.capacity?.toString() || "",
           price: eventData.feeAmount?.toString() || '',
           feeAmount: eventData.feeAmount?.toString() || '',
-        //  description: eventData.description || ''
+          venueId: eventData.venueId || '', // Set venueId from eventData
         });
         setScheduleArray(eventData.schedule ? JSON.parse(eventData.schedule) : []);
       } catch (err) {
@@ -147,6 +148,69 @@
     if (eventId) fetchEvent();
   }, [eventId, currentUser]);
 
+  useEffect(() => {
+    // fetch all courts
+    CourtService.getAllCourts().then(setCourts);
+    // fetch all venues
+    api.get('/venues').then(response => setVenues(response.data));
+  }, []);
+
+  useEffect(() => {
+    if (event) {
+      setCourtIds(event.courts ? event.courts.map(c => c.id) : []);
+    }
+  }, [event]);
+
+  useEffect(() => {
+    if (form.capacity) {
+      const cap = parseInt(form.capacity, 10);
+      const venuesOk = venues.filter(v =>
+        courts.filter(c => c.venue && c.venue.id === v.id).length * 8 >= cap
+      );
+      setFilteredVenues(venuesOk);
+      if (form.venueId && !venuesOk.some(v => v.id === Number(form.venueId))) {
+        setForm(f => ({ ...f, venueId: '' }));
+        setCourtIds([]);
+      }
+    } else {
+      setFilteredVenues(venues);
+    }
+  }, [form.capacity, venues, courts]);
+
+  useEffect(() => {
+    if (form.venueId) {
+      let filtered = courts.filter(c => c.venue && c.venue.id === Number(form.venueId));
+      if (form.capacity) {
+        const need = Math.ceil(parseInt(form.capacity, 10) / 8);
+        if (filtered.length < need) {
+          setCapacityError('This venue does not have enough courts for your capacity. Please choose another venue.');
+          setCourtIds([]);
+        } else {
+          setCapacityError('');
+        }
+      } else {
+        setCapacityError('');
+      }
+      setFilteredCourts(filtered);
+      setCourtIds(filtered.map(c => c.id)); // 自動全選
+    } else {
+      setFilteredCourts([]);
+      setCourtIds([]);
+      setCapacityError('');
+    }
+  }, [form.venueId, courts, form.capacity]);
+
+  useEffect(() => {
+    if (form.capacity && courtIds.length > 0) {
+      const total = courtIds.length * 8;
+      if (total < parseInt(form.capacity, 10)) {
+        setCapacityError('Selected courts cannot accommodate your capacity. Please select more courts or reduce capacity.');
+      } else {
+        setCapacityError('');
+      }
+    }
+  }, [courtIds, form.capacity]);
+
   const handleInputChange = (field) => (event) => {
     setForm({
       ...form,
@@ -175,6 +239,16 @@
     setScheduleArray(newSchedule);
     setForm({ ...form, schedule: newSchedule });
   };
+  const handleCourtChange = (event) => {
+    setCourtIds(event.target.value);
+  };
+  const handleVenueChange = (event) => {
+    const selectedVenueId = Number(event.target.value);
+    setForm(f => ({ ...f, venueId: selectedVenueId }));
+    const courtsForVenue = courts.filter(c => c.venue && c.venue.id === selectedVenueId);
+    setFilteredCourts(courtsForVenue);
+    setCourtIds(courtsForVenue.map(c => c.id));
+  };
   const handleSubmit = async (e) => {
     e.preventDefault();
     setSubmitting(true);
@@ -186,14 +260,13 @@
         startTime: `${form.date}T${form.time}`,
         endTime: `${form.date}T${form.endTime}`,
         eventType: form.eventType,
-        skillLevel: form.skillLevel,
         capacity: parseInt(form.capacity, 10),
-        location: form.location,
         eligibility: form.eligibility,
         schedule: JSON.stringify(scheduleArray),
         feeAmount: form.price ? parseFloat(form.price) : 0,
-        status: 'PUBLISHED', // Always publish when updating
-       // description: form.description
+        status: 'PUBLISHED',
+        courtIds: courtIds,
+        venueId: form.venueId, // Include venueId in eventData
       };
       if (notifyParticipants) {
         await EventService.updateEventWithNotification(eventId, eventData);
@@ -220,13 +293,16 @@
     }
   };
   const handleDelete = async () => {
+    if (!([undefined, null, 0, '0'].includes(event?.registeredCount) && [undefined, null, 0, '0'].includes(event?.currentParticipants))) {
+      return;
+    }
     if (!window.confirm("Are you sure you want to delete this event? This action cannot be undone.")) {
       return;
     }
     setSubmitting(true);
     try {
       await EventService.deleteEvent(eventId);
-      setMessage("Event deleted successfully!");
+      setDeleteSuccess(true);
       setTimeout(() => {
         navigate('/events');
       }, 2000);
@@ -285,6 +361,9 @@
                 </Alert>
               </Zoom>
             )}
+            {capacityError && (
+              <Alert severity="error" sx={{ mt: 2 }}>{capacityError}</Alert>
+            )}
             <form onSubmit={handleSubmit}>
               <Grid container spacing={4}>
                 {/* Basic Information */}
@@ -334,36 +413,6 @@
                               ))}
                             </Select>
                           </FormControl>
-                        </Grid>
-                        <Grid item xs={12} md={6}>
-                          <FormControl fullWidth required disabled>
-                            <InputLabel>Skill Level</InputLabel>
-                            <Select
-                              value={form.skillLevel}
-                              onChange={handleInputChange('skillLevel')}
-                              label="Skill Level"
-                              sx={{ borderRadius: 2 }}
-                            >
-                              {skillLevels.map((level) => (
-                                <MenuItem key={level} value={level}>
-                                  {level}
-                                </MenuItem>
-                              ))}
-                            </Select>
-                          </FormControl>
-                        </Grid>
-                        <Grid item xs={12}>
-                          <TextField
-                            fullWidth
-                            label="Eligibility"
-                            value={form.eligibility}
-                            onChange={handleInputChange('eligibility')}
-                            multiline
-                            rows={2}
-                            variant="outlined"
-                            disabled={true}
-                            sx={{ '& .MuiOutlinedInput-root': { borderRadius: 2 } }}
-                          />
                         </Grid>
                         {/* Schedule */}
                         <Grid item xs={12}>
@@ -489,25 +538,6 @@
                         <Grid item xs={12}>
                           <TextField
                             fullWidth
-                            label="Location"
-                            value={form.location}
-                            onChange={handleInputChange('location')}
-                            required
-                            variant="outlined"
-                            InputProps={{
-                              startAdornment: (
-                                <InputAdornment position="start">
-                                  <LocationOn color="primary" />
-                                </InputAdornment>
-                              ),
-                            }}
-                            sx={{ '& .MuiOutlinedInput-root': { borderRadius: 2 } }}
-                            disabled={true}
-                          />
-                        </Grid>
-                        <Grid item xs={12}>
-                          <TextField
-                            fullWidth
                             label="Capacity"
                             type="number"
                             value={form.capacity}
@@ -522,7 +552,28 @@
                               ),
                             }}
                             sx={{ '& .MuiOutlinedInput-root': { borderRadius: 2 } }}
+                            disabled
                           />
+                        </Grid>
+                        {/* Venue Selection */}
+                        <Grid item xs={12}>
+                          <FormControl fullWidth required sx={{ minWidth: 300 }}>
+                            <InputLabel id="venue-select-label">Select Venue</InputLabel>
+                            <Select
+                              labelId="venue-select-label"
+                              value={form.venueId || ''}
+                              onChange={handleVenueChange}
+                              label="Select Venue"
+                              fullWidth
+                              sx={{ minWidth: 300 }}
+                              disabled
+                            >
+                              <MenuItem value=""><em>None</em></MenuItem>
+                              {filteredVenues.map((venue) => (
+                                <MenuItem key={venue.id} value={venue.id}>{venue.name}</MenuItem>
+                              ))}
+                            </Select>
+                          </FormControl>
                         </Grid>
                       </Grid>
                     </CardContent>
@@ -559,26 +610,59 @@
                     </CardContent>
                   </Card>
                 </Grid>
-                
+                {/* Courts Multi-select */}
+                <Grid item xs={12}>
+                  <FormControl fullWidth variant="outlined">
+                    <InputLabel id="court-select-label">Select Courts</InputLabel>
+                    <Select
+                      labelId="court-select-label"
+                      multiple
+                      value={courtIds}
+                      onChange={handleCourtChange}
+                      label="Select Courts"
+                      renderValue={(selected) =>
+                        filteredCourts.filter(c => selected.includes(c.id)).map(c => c.name).join(', ')
+                      }
+                      disabled
+                    >
+                      {filteredCourts.map((court) => (
+                        <MenuItem key={court.id} value={court.id}>
+                          <Checkbox checked={courtIds.indexOf(court.id) > -1} />
+                          <ListItemText primary={court.name} />
+                        </MenuItem>
+                      ))}
+                    </Select>
+                  </FormControl>
+                </Grid>
+
                 {/* Actions */}
                 <Grid item xs={12} sx={{ display: 'flex', justifyContent: 'flex-end', gap: 2 }}>
-                  <Button variant="contained" color="error" onClick={handleDelete} disabled={submitting} sx={{ px: 4, borderRadius: 2 }}>
+                  {deleteSuccess && (
+                    <Alert severity="success" sx={{ mr: 2 }}>
+                      Event deleted successfully!
+                    </Alert>
+                  )}
+                  {event && !([undefined, null, 0, '0'].includes(event.registeredCount) && [undefined, null, 0, '0'].includes(event.currentParticipants)) && (
+                    <Alert severity="error" sx={{ mr: 2 }}>
+                      Cannot delete: someone has registered for this event.
+                    </Alert>
+                  )}
+                  <Button
+                    variant="contained"
+                    color="error"
+                    onClick={handleDelete}
+                    disabled={submitting}
+                    sx={{ px: 4, borderRadius: 2 }}
+                  >
                     Delete Event
                   </Button>
-                  <Button variant="contained" type="submit" disabled={submitting} sx={{ px: 4, borderRadius: 2 }}>
+                  <Button
+                    type="submit"
+                    variant="contained"
+                    disabled={submitting || !!capacityError}
+                  >
                     Update Event
                   </Button>
-                  <FormControlLabel
-                    control={
-                      <Switch
-                        checked={notifyParticipants}
-                        onChange={e => setNotifyParticipants(e.target.checked)}
-                        color="primary"
-                      />
-                    }
-                    label="Notify participants about changes"
-                    sx={{ ml: 2 }}
-                  />
                 </Grid>
               </Grid>
             </form>
Index: pickleball-frontend/src/components/event/EventCreatePage.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useState } from 'react';\r\nimport {\r\n  Box,\r\n  Container,\r\n  Paper,\r\n  Typography,\r\n  TextField,\r\n  Button,\r\n  Grid,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Chip,\r\n  Avatar,\r\n  IconButton,\r\n  Divider,\r\n  Alert,\r\n  Card,\r\n  CardContent,\r\n  Switch,\r\n  FormControlLabel,\r\n  InputAdornment,\r\n  Fade,\r\n  Zoom,\r\n  CircularProgress,\r\n  useTheme,\r\n  alpha\r\n} from '@mui/material';\r\nimport {\r\n  Event,\r\n  LocationOn,\r\n  AccessTime,\r\n  Person,\r\n  Category,\r\n  AttachMoney,\r\n  Image,\r\n  Add,\r\n  Close,\r\n  CalendarToday,\r\n  Public,\r\n  Lock,\r\n  Error\r\n} from '@mui/icons-material';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useAuth } from '../../context/AuthContext';\r\nimport EventService from '../../service/EventService';\r\n\r\nconst EventCreatePage = () => {\r\n  const theme = useTheme();\r\n  // Removed profile and loading state\r\n  const [submitting, setSubmitting] = useState(false);\r\n  const [showSuccess, setShowSuccess] = useState(false);\r\n  const [error, setError] = useState('');\r\n  const [priceError, setPriceError] = useState('');\r\n  const navigate = useNavigate();\r\n  const { currentUser } = useAuth();\r\n\r\n  const [formData, setFormData] = useState({\r\n    title: '',\r\n    date: '',\r\n    time: '',\r\n    endTime: '',\r\n    eventType: '', // will use category for this\r\n    capacity: '',\r\n    location: '',\r\n    skillLevel: '',\r\n    eligibility: '',\r\n    price: '', // used for feeAmount\r\n    status: 'PUBLISHED'\r\n  });\r\n\r\n  // Schedule builder state\r\n  const [scheduleArray, setScheduleArray] = useState([]);\r\n  const [scheduleTime, setScheduleTime] = useState('');\r\n  const [scheduleActivity, setScheduleActivity] = useState('');\r\n\r\n  const categories = [\r\n    'Tournament',\r\n    'Social Play',\r\n    'Ladder League',\r\n    'Round Robin',\r\n    'Clinic',\r\n    'Open Play',\r\n    'Youth Event',\r\n    'Senior Event',\r\n    'Charity Event',\r\n    'Skills & Drills',\r\n    'Exhibition Match',\r\n    'Club Night',\r\n    'Beginner Session',\r\n    'Advanced Play'\r\n  ];\r\n\r\n  const skillLevels = [\r\n    'Beginner', 'Intermediate', 'Advanced', 'All Levels'\r\n  ];\r\n\r\n  // Removed useEffect for fetching profile\r\n\r\n  const handleInputChange = (field) => (event) => {\r\n    if (field === 'price') {\r\n      const value = event.target.value;\r\n      if (value !== '' && parseFloat(value) < 0) {\r\n        setPriceError('Price cannot be negative');\r\n      } else {\r\n        setPriceError('');\r\n      }\r\n    }\r\n    setFormData({\r\n      ...formData,\r\n      [field]: event.target.value\r\n    });\r\n    // Clear messages when user starts typing\r\n    if (error) setError('');\r\n  };\r\n\r\n  const handleSwitchChange = (field) => (event) => {\r\n    setFormData({\r\n      ...formData,\r\n      [field]: event.target.checked\r\n    });\r\n  };\r\n\r\n  // Add schedule item\r\n  const handleAddScheduleItem = () => {\r\n    if (scheduleTime && scheduleActivity) {\r\n      setScheduleArray([...scheduleArray, { time: scheduleTime, activity: scheduleActivity }]);\r\n      setScheduleTime('');\r\n      setScheduleActivity('');\r\n    }\r\n  };\r\n\r\n  // Remove schedule item\r\n  const handleRemoveScheduleItem = (idx) => {\r\n    setScheduleArray(scheduleArray.filter((_, i) => i !== idx));\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setSubmitting(true);\r\n    setError('');\r\n    // Price validation\r\n    if (formData.price !== '' && parseFloat(formData.price) < 0) {\r\n      setPriceError('Price cannot be negative');\r\n      setSubmitting(false);\r\n      return;\r\n    }\r\n    try {\r\n      const eventData = {\r\n        title: formData.title,\r\n        startTime: `${formData.date}T${formData.time}`,\r\n        endTime: `${formData.date}T${formData.endTime}`,\r\n        eventType: formData.eventType,\r\n        skillLevel: formData.skillLevel,\r\n        capacity: parseInt(formData.capacity, 10),\r\n        location: formData.location,\r\n        eligibility: formData.eligibility,\r\n        schedule: JSON.stringify(scheduleArray),\r\n        feeAmount: formData.price ? parseFloat(formData.price) : 0,\r\n        status: formData.status || 'PUBLISHED'\r\n      };\r\n      await EventService.createEvent(eventData);\r\n      setShowSuccess(true);\r\n      setTimeout(() => {\r\n        navigate('/events');\r\n      }, 3000);\r\n    } catch (err) {\r\n      let errorMsg = \"Failed to create event.\";\r\n      if (err.response?.data) {\r\n        if (typeof err.response.data === \"string\") {\r\n          errorMsg = err.response.data;\r\n        } else if (typeof err.response.data === \"object\") {\r\n          errorMsg = err.response.data.message || err.response.data.error || JSON.stringify(err.response.data);\r\n        }\r\n      }\r\n      setError(errorMsg);\r\n    } finally {\r\n      setSubmitting(false);\r\n    }\r\n  };\r\n\r\n  // Only check currentUser role for access\r\n  if (currentUser?.role !== \"EVENTORGANIZER\") {\r\n    return (\r\n      <Box sx={{ \r\n        minHeight: '100vh', \r\n        background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n        py: 4\r\n      }}>\r\n        <Container maxWidth=\"lg\">\r\n          <Paper \r\n            elevation={24} \r\n            sx={{ \r\n              p: 4, \r\n              borderRadius: 4,\r\n              background: 'rgba(255, 255, 255, 0.95)',\r\n              backdropFilter: 'blur(10px)',\r\n              textAlign: 'center'\r\n            }}\r\n          >\r\n            <Avatar \r\n              sx={{ \r\n                width: 80, \r\n                height: 80, \r\n                mx: 'auto', \r\n                mb: 2, \r\n                bgcolor: 'error.main'\r\n              }}\r\n            >\r\n              <Error sx={{ fontSize: 40 }} />\r\n            </Avatar>\r\n            <Typography variant=\"h4\" component=\"h1\" sx={{ color: 'error.main', fontWeight: 'bold', mb: 2 }}>\r\n              Access Denied\r\n            </Typography>\r\n            <Typography variant=\"h6\" color=\"text.secondary\" sx={{ mb: 3 }}>\r\n              You need to be an Event Organizer to create events.\r\n            </Typography>\r\n            <Button\r\n              variant=\"contained\"\r\n              onClick={() => navigate('/events')}\r\n              sx={{\r\n                background: 'linear-gradient(45deg, #667eea, #764ba2)',\r\n                borderRadius: 2,\r\n                px: 4,\r\n                py: 1.5\r\n              }}\r\n            >\r\n              Back to Events\r\n            </Button>\r\n          </Paper>\r\n        </Container>\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Box sx={{ \r\n      minHeight: '100vh', \r\n      background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n      py: 4\r\n    }}>\r\n      <Container maxWidth=\"lg\">\r\n        <Fade in timeout={800}>\r\n          <Paper \r\n            elevation={24} \r\n            sx={{ \r\n              p: 4, \r\n              borderRadius: 4,\r\n              background: 'rgba(255, 255, 255, 0.95)',\r\n              backdropFilter: 'blur(10px)'\r\n            }}\r\n          >\r\n            {/* Header */}\r\n            <Box sx={{ mb: 4, textAlign: 'center' }}>\r\n              <Avatar \r\n                sx={{ \r\n                  width: 80, \r\n                  height: 80, \r\n                  mx: 'auto', \r\n                  mb: 2, \r\n                  background: 'linear-gradient(45deg, #667eea, #764ba2)'\r\n                }}\r\n              >\r\n                <Event sx={{ fontSize: 40 }} />\r\n              </Avatar>\r\n              <Typography \r\n                variant=\"h3\" \r\n                component=\"h1\" \r\n                sx={{ \r\n                  fontWeight: 'bold',\r\n                  background: 'linear-gradient(45deg, #667eea, #764ba2)',\r\n                  backgroundClip: 'text',\r\n                  WebkitBackgroundClip: 'text',\r\n                  WebkitTextFillColor: 'transparent',\r\n                  mb: 1\r\n                }}\r\n              >\r\n                Create New Event\r\n              </Typography>\r\n              <Typography variant=\"h6\" color=\"text.secondary\">\r\n                Bring your vision to life with our event creation platform\r\n              </Typography>\r\n            </Box>\r\n\r\n            {showSuccess && (\r\n              <Zoom in>\r\n                <Alert \r\n                  severity=\"success\" \r\n                  sx={{ mb: 3, borderRadius: 2 }}\r\n                  onClose={() => setShowSuccess(false)}\r\n                >\r\n                  Event created successfully! \uD83C\uDF89\r\n                </Alert>\r\n              </Zoom>\r\n            )}\r\n\r\n            {error && (\r\n              <Zoom in>\r\n                <Alert \r\n                  severity=\"error\" \r\n                  sx={{ mb: 3, borderRadius: 2 }}\r\n                  onClose={() => setError('')}\r\n                >\r\n                  {error}\r\n                </Alert>\r\n              </Zoom>\r\n            )}\r\n\r\n            <form onSubmit={handleSubmit}>\r\n              <Grid container spacing={4}>\r\n                {/* Basic Information */}\r\n                <Grid item xs={12}>\r\n                  <Card elevation={8} sx={{ borderRadius: 3 }}>\r\n                    <CardContent>\r\n                      <Typography variant=\"h5\" gutterBottom sx={{ color: '#667eea', fontWeight: 'bold' }}>\r\n                        Basic Information\r\n                      </Typography>\r\n                      <Grid container spacing={3}>\r\n                        <Grid item xs={12}>\r\n                          <TextField\r\n                            fullWidth\r\n                            label=\"Event Title\"\r\n                            value={formData.title}\r\n                            onChange={handleInputChange('title')}\r\n                            required\r\n                            variant=\"outlined\"\r\n                            InputProps={{\r\n                              startAdornment: (\r\n                                <InputAdornment position=\"start\">\r\n                                  <Event color=\"primary\" />\r\n                                </InputAdornment>\r\n                              ),\r\n                            }}\r\n                            sx={{ '& .MuiOutlinedInput-root': { borderRadius: 2 } }}\r\n                          />\r\n                        </Grid>\r\n                        <Grid item xs={12} md={6}>\r\n                          <FormControl fullWidth required>\r\n                            <InputLabel>Category</InputLabel>\r\n                            <Select\r\n                              value={formData.eventType}\r\n                              onChange={handleInputChange('eventType')}\r\n                              label=\"Category\"\r\n                              startAdornment={\r\n                                <InputAdornment position=\"start\">\r\n                                  <Category color=\"primary\" />\r\n                                </InputAdornment>\r\n                              }\r\n                              sx={{ borderRadius: 2 }}\r\n                            >\r\n                              {categories.map((category) => (\r\n                                <MenuItem key={category} value={category}>\r\n                                  {category}\r\n                                </MenuItem>\r\n                              ))}\r\n                            </Select>\r\n                          </FormControl>\r\n                        </Grid>\r\n                        <Grid item xs={12} md={6}>\r\n                          <FormControl fullWidth required>\r\n                            <InputLabel>Skill Level</InputLabel>\r\n                            <Select\r\n                              value={formData.skillLevel}\r\n                              onChange={handleInputChange('skillLevel')}\r\n                              label=\"Skill Level\"\r\n                              sx={{ borderRadius: 2 }}\r\n                            >\r\n                              {skillLevels.map((level) => (\r\n                                <MenuItem key={level} value={level}>\r\n                                  {level}\r\n                                </MenuItem>\r\n                              ))}\r\n                            </Select>\r\n                          </FormControl>\r\n                        </Grid>\r\n                        {/* Schedule */}\r\n                        <Grid item xs={12}>\r\n                          <Typography variant=\"subtitle1\" sx={{ fontWeight: 'bold', mb: 1 }}>Schedule</Typography>\r\n                          <Grid container spacing={2} alignItems=\"center\">\r\n                            <Grid item xs={4}>\r\n                              <TextField\r\n                                label=\"Time\"\r\n                                type=\"time\"\r\n                                value={scheduleTime}\r\n                                onChange={e => setScheduleTime(e.target.value)}\r\n                                fullWidth\r\n                                size=\"small\"\r\n                              />\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                              <TextField\r\n                                label=\"Activity\"\r\n                                value={scheduleActivity}\r\n                                onChange={e => setScheduleActivity(e.target.value)}\r\n                                fullWidth\r\n                                size=\"small\"\r\n                              />\r\n                            </Grid>\r\n                            <Grid item xs={2}>\r\n                              <Button variant=\"contained\" onClick={handleAddScheduleItem} disabled={!scheduleTime || !scheduleActivity}>Add</Button>\r\n                            </Grid>\r\n                          </Grid>\r\n                          <Box sx={{ mt: 2 }}>\r\n                            {scheduleArray.length === 0 && <Typography color=\"text.secondary\">No schedule items added.</Typography>}\r\n                            {scheduleArray.map((item, idx) => (\r\n                              <Box key={idx} sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\r\n                                <Typography sx={{ mr: 2 }}>{item.time} - {item.activity}</Typography>\r\n                                <Button color=\"error\" size=\"small\" onClick={() => handleRemoveScheduleItem(idx)}>Remove</Button>\r\n                              </Box>\r\n                            ))}\r\n                          </Box>\r\n                        </Grid>\r\n                      </Grid>\r\n                    </CardContent>\r\n                  </Card>\r\n                </Grid>\r\n\r\n                {/* Date & Time */}\r\n                <Grid item xs={12} md={6}>\r\n                  <Card elevation={8} sx={{ borderRadius: 3, height: '100%' }}>\r\n                    <CardContent>\r\n                      <Typography variant=\"h5\" gutterBottom sx={{ color: '#667eea', fontWeight: 'bold' }}>\r\n                        Date & Time\r\n                      </Typography>\r\n                      <Grid container spacing={3}>\r\n                        <Grid item xs={12}>\r\n                          <TextField\r\n                            fullWidth\r\n                            label=\"Date\"\r\n                            type=\"date\"\r\n                            value={formData.date}\r\n                            onChange={handleInputChange('date')}\r\n                            required\r\n                            InputLabelProps={{ shrink: true }}\r\n                            InputProps={{\r\n                              startAdornment: (\r\n                                <InputAdornment position=\"start\">\r\n                                  <CalendarToday color=\"primary\" />\r\n                                </InputAdornment>\r\n                              ),\r\n                            }}\r\n                            sx={{ '& .MuiOutlinedInput-root': { borderRadius: 2 } }}\r\n                          />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                          <TextField\r\n                            fullWidth\r\n                            label=\"Time\"\r\n                            type=\"time\"\r\n                            value={formData.time}\r\n                            onChange={handleInputChange('time')}\r\n                            required\r\n                            InputLabelProps={{ shrink: true }}\r\n                            InputProps={{\r\n                              startAdornment: (\r\n                                <InputAdornment position=\"start\">\r\n                                  <AccessTime color=\"primary\" />\r\n                                </InputAdornment>\r\n                              ),\r\n                            }}\r\n                            sx={{ '& .MuiOutlinedInput-root': { borderRadius: 2 } }}\r\n                          />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                          <TextField\r\n                            fullWidth\r\n                            label=\"End Time\"\r\n                            type=\"time\"\r\n                            value={formData.endTime}\r\n                            onChange={handleInputChange('endTime')}\r\n                            required\r\n                            InputLabelProps={{ shrink: true }}\r\n                            InputProps={{\r\n                              startAdornment: (\r\n                                <InputAdornment position=\"start\">\r\n                                  <AccessTime color=\"primary\" />\r\n                                </InputAdornment>\r\n                              ),\r\n                            }}\r\n                            sx={{ '& .MuiOutlinedInput-root': { borderRadius: 2 } }}\r\n                          />\r\n                        </Grid>\r\n                      </Grid>\r\n                    </CardContent>\r\n                  </Card>\r\n                </Grid>\r\n\r\n                {/* Location & Capacity */}\r\n                <Grid item xs={12} md={6}>\r\n                  <Card elevation={8} sx={{ borderRadius: 3, height: '100%' }}>\r\n                    <CardContent>\r\n                      <Typography variant=\"h5\" gutterBottom sx={{ color: '#667eea', fontWeight: 'bold' }}>\r\n                        Location & Capacity\r\n                      </Typography>\r\n                      <Grid container spacing={3}>\r\n                        <Grid item xs={12}>\r\n                          <TextField\r\n                            fullWidth\r\n                            label=\"Location\"\r\n                            value={formData.location}\r\n                            onChange={handleInputChange('location')}\r\n                            required\r\n                            variant=\"outlined\"\r\n                            InputProps={{\r\n                              startAdornment: (\r\n                                <InputAdornment position=\"start\">\r\n                                  <LocationOn color=\"primary\" />\r\n                                </InputAdornment>\r\n                              ),\r\n                            }}\r\n                            sx={{ '& .MuiOutlinedInput-root': { borderRadius: 2 } }}\r\n                          />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                          <TextField\r\n                            fullWidth\r\n                            label=\"Capacity\"\r\n                            type=\"number\"\r\n                            value={formData.capacity}\r\n                            onChange={handleInputChange('capacity')}\r\n                            required\r\n                            variant=\"outlined\"\r\n                            InputProps={{\r\n                              startAdornment: (\r\n                                <InputAdornment position=\"start\">\r\n                                  <Person color=\"primary\" />\r\n                                </InputAdornment>\r\n                              ),\r\n                            }}\r\n                            sx={{ '& .MuiOutlinedInput-root': { borderRadius: 2 } }}\r\n                          />\r\n                        </Grid>\r\n                      </Grid>\r\n                    </CardContent>\r\n                  </Card>\r\n                </Grid>\r\n\r\n                {/* Pricing & Settings */}\r\n                <Grid item xs={12}>\r\n                  <Card elevation={8} sx={{ borderRadius: 3 }}>\r\n                    <CardContent>\r\n                      <Typography variant=\"h5\" gutterBottom sx={{ color: '#667eea', fontWeight: 'bold' }}>\r\n                        Pricing & Settings\r\n                      </Typography>\r\n                      <Grid container spacing={3} alignItems=\"center\">\r\n                        <Grid item xs={12} md={6}>\r\n                          <TextField\r\n                            fullWidth\r\n                            label=\"Price\"\r\n                            type=\"number\"\r\n                            value={formData.price}\r\n                            onChange={handleInputChange('price')}\r\n                            variant=\"outlined\"\r\n                            InputProps={{\r\n                              startAdornment: (\r\n                                <InputAdornment position=\"start\">\r\n                                  <AttachMoney color=\"primary\" />\r\n                                </InputAdornment>\r\n                              ),\r\n                              inputProps: { min: 0 },\r\n                            }}\r\n                            sx={{ '& .MuiOutlinedInput-root': { borderRadius: 2 } }}\r\n                            error={!!priceError}\r\n                            helperText={priceError}\r\n                          />\r\n                        </Grid>\r\n                      </Grid>\r\n                    </CardContent>\r\n                  </Card>\r\n                </Grid>\r\n\r\n                {/* Eligibility */}\r\n                <Grid item xs={12}>\r\n                  <TextField\r\n                    fullWidth\r\n                    label=\"Eligibility\"\r\n                    value={formData.eligibility}\r\n                    onChange={handleInputChange('eligibility')}\r\n                    required\r\n                    variant=\"outlined\"\r\n                    sx={{ '& .MuiOutlinedInput-root': { borderRadius: 2 } }}\r\n                  />\r\n                </Grid>\r\n\r\n                {/* Submit Button */}\r\n                <Grid item xs={12}>\r\n                  <Box sx={{ display: 'flex', justifyContent: 'center', pt: 2 }}>\r\n                    <Button\r\n                      type=\"submit\"\r\n                      variant=\"contained\"\r\n                      size=\"large\"\r\n                      disabled={submitting}\r\n                      sx={{\r\n                        px: 6,\r\n                        py: 2,\r\n                        borderRadius: 3,\r\n                        fontSize: '1.1rem',\r\n                        fontWeight: 'bold',\r\n                        background: 'linear-gradient(45deg, #667eea, #764ba2)',\r\n                        boxShadow: '0 8px 32px rgba(102, 126, 234, 0.3)',\r\n                        '&:hover': {\r\n                          background: 'linear-gradient(45deg, #5a6fd8, #6a42a0)',\r\n                          transform: 'translateY(-2px)',\r\n                          boxShadow: '0 12px 40px rgba(102, 126, 234, 0.4)',\r\n                        },\r\n                        '&:disabled': {\r\n                          background: 'rgba(0, 0, 0, 0.12)',\r\n                          transform: 'none',\r\n                          boxShadow: 'none'\r\n                        },\r\n                        transition: 'all 0.3s ease'\r\n                      }}\r\n                    >\r\n                      {submitting ? (\r\n                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n                          <CircularProgress size={20} sx={{ color: 'white' }} />\r\n                          Creating Event...\r\n                        </Box>\r\n                      ) : (\r\n                        'Create Event'\r\n                      )}\r\n                    </Button>\r\n                  </Box>\r\n                </Grid>\r\n              </Grid>\r\n            </form>\r\n          </Paper>\r\n        </Fade>\r\n      </Container>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default EventCreatePage;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball-frontend/src/components/event/EventCreatePage.jsx b/pickleball-frontend/src/components/event/EventCreatePage.jsx
--- a/pickleball-frontend/src/components/event/EventCreatePage.jsx	(revision 97abd609899a67b781b8ace8e91358a782fc5acd)
+++ b/pickleball-frontend/src/components/event/EventCreatePage.jsx	(date 1753723189095)
@@ -1,4 +1,4 @@
-import React, { useState } from 'react';
+import React, { useState, useEffect, useMemo } from 'react';
 import {
   Box,
   Container,
@@ -24,8 +24,11 @@
   Fade,
   Zoom,
   CircularProgress,
-  useTheme,
-  alpha
+  Checkbox,
+  ListItemText,
+  Stepper,
+  Step,
+  StepLabel
 } from '@mui/material';
 import {
   Event,
@@ -45,9 +48,14 @@
 import { useNavigate } from 'react-router-dom';
 import { useAuth } from '../../context/AuthContext';
 import EventService from '../../service/EventService';
+import CourtService from '../../service/CourtService';
+import VenueService from '../../service/VenueService';
+import { DatePicker } from '@mui/x-date-pickers/DatePicker';
+import dayjs from 'dayjs';
+import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
+import { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';
 
 const EventCreatePage = () => {
-  const theme = useTheme();
   // Removed profile and loading state
   const [submitting, setSubmitting] = useState(false);
   const [showSuccess, setShowSuccess] = useState(false);
@@ -63,9 +71,6 @@
     endTime: '',
     eventType: '', // will use category for this
     capacity: '',
-    location: '',
-    skillLevel: '',
-    eligibility: '',
     price: '', // used for feeAmount
     status: 'PUBLISHED'
   });
@@ -75,6 +80,15 @@
   const [scheduleTime, setScheduleTime] = useState('');
   const [scheduleActivity, setScheduleActivity] = useState('');
 
+  const [courtIds, setCourtIds] = useState([]);
+  const [courts, setCourts] = useState([]);
+  const [venues, setVenues] = useState([]);
+  const [venueId, setVenueId] = useState('');
+  const [filteredCourts, setFilteredCourts] = useState([]);
+  const [capacityError, setCapacityError] = useState('');
+  const [filteredVenues, setFilteredVenues] = useState([]);
+  const [venueMaxCapacity, setVenueMaxCapacity] = useState(0);
+
   const categories = [
     'Tournament',
     'Social Play',
@@ -92,11 +106,179 @@
     'Advanced Play'
   ];
 
-  const skillLevels = [
-    'Beginner', 'Intermediate', 'Advanced', 'All Levels'
+  const eligibilityOptions = [
+    'All',        // 所有人
+    'Beginner',
+    'Intermediate',
+    'Advanced',
+    'Gold',
+    'Silver',
+    'Platinum'
   ];
 
-  // Removed useEffect for fetching profile
+  // 在組件內部
+  const [bookedDates, setBookedDates] = useState([]);
+  // 強化禁用邏輯：bookedDates 轉成 dayjs 字串陣列，shouldDisableDate 嚴格比對
+  const bookedDateSet = useMemo(() => new Set(bookedDates.map(d => dayjs(d).format('YYYY-MM-DD'))), [bookedDates]);
+  const today = dayjs();
+  const minDate = today.add(3, 'month');
+  // 1. Stepper 狀態
+  const steps = ['Select State', 'Select Venue', 'Event Info', 'Confirm & Submit'];
+  const [activeStep, setActiveStep] = useState(0);
+  const [allStates, setAllStates] = useState([]);
+  const [selectedState, setSelectedState] = useState('');
+  const [venuesByState, setVenuesByState] = useState([]);
+  const [autoAssignedCourts, setAutoAssignedCourts] = useState([]);
+  const [checkingAvailability, setCheckingAvailability] = useState(false);
+
+  const initialFormData = {
+    title: '',
+    eventType: '',
+    date: '',
+    time: '',
+    endTime: '',
+    capacity: '',
+    price: '',
+    eligibility: '',
+    schedule: '',
+    description: '',
+  };
+
+  const handleResetForm = () => {
+    setFormData(initialFormData);
+    setScheduleArray([]);
+    setCourtIds([]);
+    setVenueId('');
+    setSelectedState('');
+    setAutoAssignedCourts([]);
+    setActiveStep(0);
+  };
+
+  // When state changes, clear venue selection
+  const handleStateChange = (e) => {
+    setSelectedState(e.target.value);
+    setVenueId('');
+  };
+
+  // 2. 取得所有 state
+  useEffect(() => {
+    VenueService.getAllVenues().then(data => {
+      const states = Array.from(new Set(data.map(v => v.state).filter(Boolean)));
+      setAllStates(states);
+    });
+  }, []);
+
+  // 3. 依 state 取得 venue
+  useEffect(() => {
+    if (selectedState) {
+      VenueService.getVenuesByState(selectedState).then(setVenuesByState);
+    } else {
+      setVenuesByState([]);
+    }
+  }, [selectedState]);
+
+  // 4. 分步驟流程的下一步/上一步
+  const handleNext = async () => {
+    // 如果目前在 Event Info 步驟（activeStep === 2），直接跳到 Confirm & Submit 步驟（activeStep = 4）
+    if (activeStep === 2) {
+      setActiveStep(3);
+      return;
+    }
+    setActiveStep((prev) => prev + 1);
+  };
+  const handleBack = () => {
+    setShowSuccess(false);
+    setActiveStep((prev) => Math.max(prev - 1, 0));
+  };
+
+  useEffect(() => {
+    // fetch all courts
+    CourtService.getAllCourts().then(setCourts);
+    VenueService.getAllVenues().then(setVenues);
+  }, []);
+
+  useEffect(() => {
+    if (formData.capacity) {
+      const cap = parseInt(formData.capacity, 10);
+      const venuesOk = venues.filter(v =>
+        courts.filter(c => c.venue && c.venue.id === v.id).length * 8 >= cap
+      );
+      setFilteredVenues(venuesOk);
+      // 如果目前 venueId 不在可用 venue，清空 venueId/courtIds
+      if (venueId && !venuesOk.some(v => v.id === venueId)) {
+        setVenueId('');
+        setCourtIds([]);
+      }
+    } else {
+      setFilteredVenues(venues);
+    }
+  }, [formData.capacity, venues, courts]);
+
+  useEffect(() => {
+    if (venueId) {
+      let filtered = courts.filter(c => c.venue && c.venue.id === Number(venueId));
+      if (formData.capacity) {
+        // 只顯示能湊到 capacity 的 court 組合
+        const need = Math.ceil(parseInt(formData.capacity, 10) / 8);
+        if (filtered.length < need) {
+          setCapacityError('This venue does not have enough courts for your capacity. Please choose another venue.');
+          setCourtIds([]);
+        } else {
+          setCapacityError('');
+        }
+        // 預設不自動選 court，讓 user 自己選
+      } else {
+        setCapacityError('');
+      }
+      setFilteredCourts(filtered);
+      setCourtIds([]);
+    } else {
+      setFilteredCourts([]);
+      setCourtIds([]);
+      setCapacityError('');
+    }
+  }, [venueId, courts, formData.capacity]);
+
+  useEffect(() => {
+    if (formData.capacity && courtIds.length > 0) {
+      const total = courtIds.length * 8;
+      if (total < parseInt(formData.capacity, 10)) {
+        setCapacityError('Selected courts cannot accommodate your capacity. Please select more courts or reduce capacity.');
+      } else {
+        setCapacityError('');
+      }
+    }
+  }, [courtIds, formData.capacity]);
+
+  // 當 venueId 改變時，計算最大容量
+  useEffect(() => {
+    if (venueId) {
+      // 假設 courts 是所有 court 的陣列
+      const courtsForVenue = courts.filter(c => c.venue && c.venue.id === Number(venueId));
+      setVenueMaxCapacity(courtsForVenue.length * 8);
+    } else {
+      setVenueMaxCapacity(0);
+    }
+  }, [venueId, courts]);
+
+  useEffect(() => {
+    if (activeStep === 3 && courtIds.length > 0) {
+      CourtService.getCourtsByIds(courtIds).then(setAutoAssignedCourts).catch(() => setAutoAssignedCourts([]));
+    }
+  }, [activeStep, courtIds]);
+
+  useEffect(() => {
+    if (venueId && selectedState) {
+      // 傳 state 參數給後端（如後端支援）
+      CourtService.getBookedDates(venueId, minDate.format('YYYY-MM-DD'), undefined, selectedState)
+        .then(dates => {
+          setBookedDates(dates);
+        })
+        .catch(() => setBookedDates([]));
+    } else {
+      setBookedDates([]);
+    }
+  }, [venueId, minDate, selectedState]);
 
   const handleInputChange = (field) => (event) => {
     if (field === 'price') {
@@ -136,8 +318,21 @@
     setScheduleArray(scheduleArray.filter((_, i) => i !== idx));
   };
 
+  const handleCourtChange = (event) => {
+    setCourtIds(event.target.value);
+  };
+
+  const handleVenueChange = (event) => {
+    const selectedVenueId = Number(event.target.value);
+    setVenueId(selectedVenueId);
+    // 自動全選該場館下所有 court
+    const courtsForVenue = courts.filter(c => c.venue && c.venue.id === selectedVenueId);
+    setFilteredCourts(courtsForVenue);
+    setCourtIds(courtsForVenue.map(c => c.id));
+  };
+
   const handleSubmit = async (e) => {
-    e.preventDefault();
+    e.preventDefault?.();
     setSubmitting(true);
     setError('');
     // Price validation
@@ -152,19 +347,16 @@
         startTime: `${formData.date}T${formData.time}`,
         endTime: `${formData.date}T${formData.endTime}`,
         eventType: formData.eventType,
-        skillLevel: formData.skillLevel,
         capacity: parseInt(formData.capacity, 10),
-        location: formData.location,
-        eligibility: formData.eligibility,
         schedule: JSON.stringify(scheduleArray),
         feeAmount: formData.price ? parseFloat(formData.price) : 0,
-        status: formData.status || 'PUBLISHED'
+        status: formData.status || 'PUBLISHED',
+        courtIds: courtIds,
+        venueId: venueId || null
       };
       await EventService.createEvent(eventData);
-      setShowSuccess(true);
-      setTimeout(() => {
-        navigate('/events');
-      }, 3000);
+      setShowSuccess(true); // 顯示成功訊息
+      // 不要自動跳頁
     } catch (err) {
       let errorMsg = "Failed to create event.";
       if (err.response?.data) {
@@ -234,401 +426,181 @@
     );
   }
 
+  // 在 return 最前面加 fallback，避免 activeStep 不在 0~3 時出現空白
+  if (activeStep < 0 || activeStep > 3) {
+    return <div style={{textAlign: 'center', marginTop: 80, color: '#667eea', fontSize: 24}}>Step error, please refresh or contact admin.</div>;
+  }
+
   return (
-    <Box sx={{ 
-      minHeight: '100vh', 
-      background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
-      py: 4
-    }}>
-      <Container maxWidth="lg">
-        <Fade in timeout={800}>
-          <Paper 
-            elevation={24} 
-            sx={{ 
-              p: 4, 
-              borderRadius: 4,
-              background: 'rgba(255, 255, 255, 0.95)',
-              backdropFilter: 'blur(10px)'
-            }}
-          >
-            {/* Header */}
-            <Box sx={{ mb: 4, textAlign: 'center' }}>
-              <Avatar 
-                sx={{ 
-                  width: 80, 
-                  height: 80, 
-                  mx: 'auto', 
-                  mb: 2, 
-                  background: 'linear-gradient(45deg, #667eea, #764ba2)'
-                }}
-              >
-                <Event sx={{ fontSize: 40 }} />
-              </Avatar>
-              <Typography 
-                variant="h3" 
-                component="h1" 
-                sx={{ 
-                  fontWeight: 'bold',
-                  background: 'linear-gradient(45deg, #667eea, #764ba2)',
-                  backgroundClip: 'text',
-                  WebkitBackgroundClip: 'text',
-                  WebkitTextFillColor: 'transparent',
-                  mb: 1
-                }}
-              >
-                Create New Event
-              </Typography>
-              <Typography variant="h6" color="text.secondary">
-                Bring your vision to life with our event creation platform
-              </Typography>
-            </Box>
-
-            {showSuccess && (
-              <Zoom in>
-                <Alert 
-                  severity="success" 
-                  sx={{ mb: 3, borderRadius: 2 }}
-                  onClose={() => setShowSuccess(false)}
-                >
-                  Event created successfully! 🎉
-                </Alert>
-              </Zoom>
-            )}
-
-            {error && (
-              <Zoom in>
-                <Alert 
-                  severity="error" 
-                  sx={{ mb: 3, borderRadius: 2 }}
-                  onClose={() => setError('')}
-                >
-                  {error}
-                </Alert>
-              </Zoom>
-            )}
-
-            <form onSubmit={handleSubmit}>
-              <Grid container spacing={4}>
-                {/* Basic Information */}
-                <Grid item xs={12}>
-                  <Card elevation={8} sx={{ borderRadius: 3 }}>
-                    <CardContent>
-                      <Typography variant="h5" gutterBottom sx={{ color: '#667eea', fontWeight: 'bold' }}>
-                        Basic Information
-                      </Typography>
-                      <Grid container spacing={3}>
-                        <Grid item xs={12}>
-                          <TextField
-                            fullWidth
-                            label="Event Title"
-                            value={formData.title}
-                            onChange={handleInputChange('title')}
-                            required
-                            variant="outlined"
-                            InputProps={{
-                              startAdornment: (
-                                <InputAdornment position="start">
-                                  <Event color="primary" />
-                                </InputAdornment>
-                              ),
-                            }}
-                            sx={{ '& .MuiOutlinedInput-root': { borderRadius: 2 } }}
-                          />
-                        </Grid>
-                        <Grid item xs={12} md={6}>
-                          <FormControl fullWidth required>
-                            <InputLabel>Category</InputLabel>
-                            <Select
-                              value={formData.eventType}
-                              onChange={handleInputChange('eventType')}
-                              label="Category"
-                              startAdornment={
-                                <InputAdornment position="start">
-                                  <Category color="primary" />
-                                </InputAdornment>
-                              }
-                              sx={{ borderRadius: 2 }}
-                            >
-                              {categories.map((category) => (
-                                <MenuItem key={category} value={category}>
-                                  {category}
-                                </MenuItem>
-                              ))}
-                            </Select>
-                          </FormControl>
-                        </Grid>
-                        <Grid item xs={12} md={6}>
-                          <FormControl fullWidth required>
-                            <InputLabel>Skill Level</InputLabel>
-                            <Select
-                              value={formData.skillLevel}
-                              onChange={handleInputChange('skillLevel')}
-                              label="Skill Level"
-                              sx={{ borderRadius: 2 }}
-                            >
-                              {skillLevels.map((level) => (
-                                <MenuItem key={level} value={level}>
-                                  {level}
-                                </MenuItem>
-                              ))}
-                            </Select>
-                          </FormControl>
-                        </Grid>
-                        {/* Schedule */}
-                        <Grid item xs={12}>
-                          <Typography variant="subtitle1" sx={{ fontWeight: 'bold', mb: 1 }}>Schedule</Typography>
-                          <Grid container spacing={2} alignItems="center">
-                            <Grid item xs={4}>
-                              <TextField
-                                label="Time"
-                                type="time"
-                                value={scheduleTime}
-                                onChange={e => setScheduleTime(e.target.value)}
-                                fullWidth
-                                size="small"
-                              />
-                            </Grid>
-                            <Grid item xs={6}>
-                              <TextField
-                                label="Activity"
-                                value={scheduleActivity}
-                                onChange={e => setScheduleActivity(e.target.value)}
-                                fullWidth
-                                size="small"
-                              />
-                            </Grid>
-                            <Grid item xs={2}>
-                              <Button variant="contained" onClick={handleAddScheduleItem} disabled={!scheduleTime || !scheduleActivity}>Add</Button>
-                            </Grid>
-                          </Grid>
-                          <Box sx={{ mt: 2 }}>
-                            {scheduleArray.length === 0 && <Typography color="text.secondary">No schedule items added.</Typography>}
-                            {scheduleArray.map((item, idx) => (
-                              <Box key={idx} sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>
-                                <Typography sx={{ mr: 2 }}>{item.time} - {item.activity}</Typography>
-                                <Button color="error" size="small" onClick={() => handleRemoveScheduleItem(idx)}>Remove</Button>
-                              </Box>
-                            ))}
-                          </Box>
-                        </Grid>
-                      </Grid>
-                    </CardContent>
-                  </Card>
-                </Grid>
-
-                {/* Date & Time */}
-                <Grid item xs={12} md={6}>
-                  <Card elevation={8} sx={{ borderRadius: 3, height: '100%' }}>
-                    <CardContent>
-                      <Typography variant="h5" gutterBottom sx={{ color: '#667eea', fontWeight: 'bold' }}>
-                        Date & Time
-                      </Typography>
-                      <Grid container spacing={3}>
-                        <Grid item xs={12}>
-                          <TextField
-                            fullWidth
-                            label="Date"
-                            type="date"
-                            value={formData.date}
-                            onChange={handleInputChange('date')}
-                            required
-                            InputLabelProps={{ shrink: true }}
-                            InputProps={{
-                              startAdornment: (
-                                <InputAdornment position="start">
-                                  <CalendarToday color="primary" />
-                                </InputAdornment>
-                              ),
-                            }}
-                            sx={{ '& .MuiOutlinedInput-root': { borderRadius: 2 } }}
-                          />
-                        </Grid>
-                        <Grid item xs={12}>
-                          <TextField
-                            fullWidth
-                            label="Time"
-                            type="time"
-                            value={formData.time}
-                            onChange={handleInputChange('time')}
-                            required
-                            InputLabelProps={{ shrink: true }}
-                            InputProps={{
-                              startAdornment: (
-                                <InputAdornment position="start">
-                                  <AccessTime color="primary" />
-                                </InputAdornment>
-                              ),
-                            }}
-                            sx={{ '& .MuiOutlinedInput-root': { borderRadius: 2 } }}
-                          />
-                        </Grid>
-                        <Grid item xs={12}>
-                          <TextField
-                            fullWidth
-                            label="End Time"
-                            type="time"
-                            value={formData.endTime}
-                            onChange={handleInputChange('endTime')}
-                            required
-                            InputLabelProps={{ shrink: true }}
-                            InputProps={{
-                              startAdornment: (
-                                <InputAdornment position="start">
-                                  <AccessTime color="primary" />
-                                </InputAdornment>
-                              ),
-                            }}
-                            sx={{ '& .MuiOutlinedInput-root': { borderRadius: 2 } }}
-                          />
-                        </Grid>
-                      </Grid>
-                    </CardContent>
-                  </Card>
-                </Grid>
-
-                {/* Location & Capacity */}
-                <Grid item xs={12} md={6}>
-                  <Card elevation={8} sx={{ borderRadius: 3, height: '100%' }}>
-                    <CardContent>
-                      <Typography variant="h5" gutterBottom sx={{ color: '#667eea', fontWeight: 'bold' }}>
-                        Location & Capacity
-                      </Typography>
-                      <Grid container spacing={3}>
-                        <Grid item xs={12}>
-                          <TextField
-                            fullWidth
-                            label="Location"
-                            value={formData.location}
-                            onChange={handleInputChange('location')}
-                            required
-                            variant="outlined"
-                            InputProps={{
-                              startAdornment: (
-                                <InputAdornment position="start">
-                                  <LocationOn color="primary" />
-                                </InputAdornment>
-                              ),
-                            }}
-                            sx={{ '& .MuiOutlinedInput-root': { borderRadius: 2 } }}
-                          />
-                        </Grid>
-                        <Grid item xs={12}>
-                          <TextField
-                            fullWidth
-                            label="Capacity"
-                            type="number"
-                            value={formData.capacity}
-                            onChange={handleInputChange('capacity')}
-                            required
-                            variant="outlined"
-                            InputProps={{
-                              startAdornment: (
-                                <InputAdornment position="start">
-                                  <Person color="primary" />
-                                </InputAdornment>
-                              ),
-                            }}
-                            sx={{ '& .MuiOutlinedInput-root': { borderRadius: 2 } }}
-                          />
-                        </Grid>
-                      </Grid>
-                    </CardContent>
-                  </Card>
-                </Grid>
-
-                {/* Pricing & Settings */}
-                <Grid item xs={12}>
-                  <Card elevation={8} sx={{ borderRadius: 3 }}>
-                    <CardContent>
-                      <Typography variant="h5" gutterBottom sx={{ color: '#667eea', fontWeight: 'bold' }}>
-                        Pricing & Settings
-                      </Typography>
-                      <Grid container spacing={3} alignItems="center">
-                        <Grid item xs={12} md={6}>
-                          <TextField
-                            fullWidth
-                            label="Price"
-                            type="number"
-                            value={formData.price}
-                            onChange={handleInputChange('price')}
-                            variant="outlined"
-                            InputProps={{
-                              startAdornment: (
-                                <InputAdornment position="start">
-                                  <AttachMoney color="primary" />
-                                </InputAdornment>
-                              ),
-                              inputProps: { min: 0 },
-                            }}
-                            sx={{ '& .MuiOutlinedInput-root': { borderRadius: 2 } }}
-                            error={!!priceError}
-                            helperText={priceError}
-                          />
-                        </Grid>
-                      </Grid>
-                    </CardContent>
-                  </Card>
-                </Grid>
-
-                {/* Eligibility */}
-                <Grid item xs={12}>
-                  <TextField
-                    fullWidth
-                    label="Eligibility"
-                    value={formData.eligibility}
-                    onChange={handleInputChange('eligibility')}
-                    required
-                    variant="outlined"
-                    sx={{ '& .MuiOutlinedInput-root': { borderRadius: 2 } }}
-                  />
-                </Grid>
-
-                {/* Submit Button */}
-                <Grid item xs={12}>
-                  <Box sx={{ display: 'flex', justifyContent: 'center', pt: 2 }}>
-                    <Button
-                      type="submit"
-                      variant="contained"
-                      size="large"
-                      disabled={submitting}
-                      sx={{
-                        px: 6,
-                        py: 2,
-                        borderRadius: 3,
-                        fontSize: '1.1rem',
-                        fontWeight: 'bold',
-                        background: 'linear-gradient(45deg, #667eea, #764ba2)',
-                        boxShadow: '0 8px 32px rgba(102, 126, 234, 0.3)',
-                        '&:hover': {
-                          background: 'linear-gradient(45deg, #5a6fd8, #6a42a0)',
-                          transform: 'translateY(-2px)',
-                          boxShadow: '0 12px 40px rgba(102, 126, 234, 0.4)',
-                        },
-                        '&:disabled': {
-                          background: 'rgba(0, 0, 0, 0.12)',
-                          transform: 'none',
-                          boxShadow: 'none'
-                        },
-                        transition: 'all 0.3s ease'
+    <LocalizationProvider dateAdapter={AdapterDayjs}>
+      <Box sx={{ minHeight: '100vh', background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)', py: 4 }}>
+        <Container maxWidth="md">
+          <Stepper activeStep={activeStep} alternativeLabel sx={{ mb: 4 }}>
+            {steps.map(label => <Step key={label}><StepLabel>{label}</StepLabel></Step>)}
+          </Stepper>
+          <Paper elevation={24} sx={{ p: 4, borderRadius: 4, background: 'rgba(255,255,255,0.95)' }}>
+            {showSuccess ? (
+              <Box textAlign="center" py={6}>
+                <Typography variant="h5" color="success.main" gutterBottom>
+                  Event created successfully!
+                </Typography>
+                <Typography variant="body1" sx={{ mb: 3 }}>
+                  Your event has been created. You can view it in the event list.
+                </Typography>
+                <Button variant="contained" color="primary" onClick={() => navigate('/events')}>
+                  Go to Event List
+                </Button>
+              </Box>
+            ) : (
+              <>
+                {activeStep === 0 && (
+                  <FormControl fullWidth>
+                    <InputLabel>Select State</InputLabel>
+                    <Select value={selectedState} onChange={handleStateChange} label="Select State">
+                      {allStates.map(state => <MenuItem key={state} value={state}>{state}</MenuItem>)}
+                    </Select>
+                    <Box mt={2}><Button variant="contained" onClick={handleNext} disabled={!selectedState}>Next</Button></Box>
+                  </FormControl>
+                )}
+                {activeStep === 1 && (
+                  <FormControl fullWidth disabled={!selectedState}>
+                    <InputLabel>Select Venue</InputLabel>
+                    <Select value={venueId} onChange={e => setVenueId(e.target.value)} label="Select Venue">
+                      {venuesByState.map(venue => <MenuItem key={venue.id} value={venue.id}>{venue.name}</MenuItem>)}
+                    </Select>
+                    <Box mt={2} display="flex" gap={2}>
+                      <Button onClick={handleBack}>Back</Button>
+                      <Button variant="contained" onClick={handleNext} disabled={!venueId}>Next</Button>
+                    </Box>
+                  </FormControl>
+                )}
+                {activeStep === 2 && (
+                  <Box component="form" noValidate autoComplete="off">
+                    {/* 保留原本所有活動欄位（活動名稱、類型、價格、資格、賽程、說明、日期、時間、容量等） */}
+                    <TextField label="Event Name" fullWidth value={formData.title} onChange={handleInputChange('title')} sx={{ mb: 2 }} />
+                    <FormControl fullWidth sx={{ mb: 2 }}>
+                      <InputLabel>Type</InputLabel>
+                      <Select value={formData.eventType} onChange={handleInputChange('eventType')} label="Type">
+                        {categories.map(category => <MenuItem key={category} value={category}>{category}</MenuItem>)}
+                      </Select>
+                    </FormControl>
+                    <TextField label="Price" type="number" fullWidth value={formData.price} onChange={handleInputChange('price')} sx={{ mb: 2 }} />
+                    {/* 賽程、說明、日期、時間、容量等欄位照原本保留 */}
+                    <Box sx={{ mb: 2 }}>
+                      <Grid container spacing={2} alignItems="center">
+                        <Grid item xs={4}>
+                          <TextField
+                            label="Time"
+                            type="time"
+                            value={scheduleTime}
+                            onChange={e => setScheduleTime(e.target.value)}
+                            fullWidth
+                            size="small"
+                          />
+                        </Grid>
+                        <Grid item xs={6}>
+                          <TextField
+                            label="Activity"
+                            value={scheduleActivity}
+                            onChange={e => setScheduleActivity(e.target.value)}
+                            fullWidth
+                            size="small"
+                          />
+                        </Grid>
+                        <Grid item xs={2}>
+                          <Button variant="contained" onClick={handleAddScheduleItem} disabled={!scheduleTime || !scheduleActivity}>Add</Button>
+                        </Grid>
+                      </Grid>
+                      <Box sx={{ mt: 2 }}>
+                        {scheduleArray.length === 0 && <Typography color="text.secondary">No schedule items added.</Typography>}
+                        {scheduleArray.map((item, idx) => (
+                          <Box key={idx} sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>
+                            <Typography sx={{ mr: 2 }}>{item.time} - {item.activity}</Typography>
+                            <Button color="error" size="small" onClick={() => handleRemoveScheduleItem(idx)}>Remove</Button>
+                          </Box>
+                        ))}
+                      </Box>
+                    </Box>
+                    <TextField label="Description" fullWidth value={formData.description} onChange={handleInputChange('description')} sx={{ mb: 2 }} />
+                    <DatePicker
+                      label="Date"
+                      value={formData.date ? dayjs(formData.date) : null}
+                      onChange={date => setFormData({ ...formData, date: date ? date.format('YYYY-MM-DD') : '' })}
+                      minDate={minDate}
+                      shouldDisableDate={date => {
+                        const formatted = date.format('YYYY-MM-DD');
+                        // console.log('Checking date:', formatted, 'booked:', bookedDateSet);
+                        return bookedDateSet.has(formatted);
+                      }}
+                      renderInput={params => (
+                        <TextField {...params} fullWidth sx={{ mb: 2 }} />
+                      )}
+                    />
+                    <TextField label="Start Time" type="time" fullWidth value={formData.time} onChange={handleInputChange('time')} sx={{ mb: 2 }} InputLabelProps={{ shrink: true }} />
+                    <TextField label="End Time" type="time" fullWidth value={formData.endTime} onChange={handleInputChange('endTime')} sx={{ mb: 2 }} InputLabelProps={{ shrink: true }} />
+                    {venueId && (
+                      <Box sx={{ mt: 2, mb: 2 }}>
+                        <Alert severity="info">
+                          This venue can accommodate up to <b>{venueMaxCapacity}</b> people.
+                        </Alert>
+                      </Box>
+                    )}
+                    <TextField
+                      label="Capacity"
+                      type="number"
+                      fullWidth
+                      value={formData.capacity}
+                      onChange={e => {
+                        let value = Number(e.target.value);
+                        if (value > venueMaxCapacity) value = venueMaxCapacity;
+                        if (value < 1) value = 1;
+                        setFormData({ ...formData, capacity: value });
                       }}
-                    >
-                      {submitting ? (
-                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
-                          <CircularProgress size={20} sx={{ color: 'white' }} />
-                          Creating Event...
-                        </Box>
-                      ) : (
-                        'Create Event'
-                      )}
-                    </Button>
+                      sx={{ mb: 2 }}
+                      inputProps={{ min: 1, max: venueMaxCapacity }}
+                      error={formData.capacity > venueMaxCapacity}
+                      helperText={
+                        formData.capacity > venueMaxCapacity
+                          ? `The maximum capacity for this venue is ${venueMaxCapacity}.`
+                          : ''
+                      }
+                      disabled={venueMaxCapacity === 0}
+                    />
+                    <Box mt={2} display="flex" gap={2}>
+                      <Button onClick={handleBack}>Back</Button>
+                      <Button variant="contained" onClick={handleNext} disabled={!(formData.title && formData.eventType && formData.date && formData.time && formData.endTime && formData.capacity && formData.capacity <= venueMaxCapacity && venueMaxCapacity > 0)}>Next</Button>
+                    </Box>
                   </Box>
-                </Grid>
-              </Grid>
-            </form>
+                )}
+                {activeStep === 3 && (
+                  <Box>
+                    <Typography variant="h6">Please confirm event information:</Typography>
+                    <ul>
+                      <li>State: {venuesByState.find(v => v.id === venueId)?.state}</li>
+                      <li>Venue: {venuesByState.find(v => v.id === venueId)?.name}</li>
+                      <li>Location: {venuesByState.find(v => v.id === venueId)?.location}</li>
+                      <li>Event Name: {formData.title}</li>
+                      <li>Type: {formData.eventType}</li>
+                      <li>Price: {formData.price}</li>
+                      <li>Schedule: {JSON.stringify(scheduleArray)}</li>
+                      <li>Description: {formData.description}</li>
+                      <li>Date: {formData.date}</li>
+                      <li>Time: {formData.time} ~ {formData.endTime}</li>
+                      <li>Capacity: {formData.capacity}</li>
+                      <li>Assigned Courts: {autoAssignedCourts.map(c => c.name).join(', ')}</li>
+                    </ul>
+                    <Box mt={2} display="flex" gap={2}>
+                      <Button onClick={handleBack}>Back</Button>
+                      <Button variant="contained" color="success" onClick={handleSubmit} disabled={submitting}>Submit</Button>
+                    </Box>
+                  </Box>
+                )}
+              </>
+            )}
           </Paper>
-        </Fade>
-      </Container>
-    </Box>
+        </Container>
+      </Box>
+    </LocalizationProvider>
   );
 };
 
Index: pickleball-frontend/src/components/common/Navbar.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useState, useEffect, useMemo, useCallback } from 'react';\r\nimport {\r\n  AppBar,\r\n  Toolbar,\r\n  Typography,\r\n  Button,\r\n  Box,\r\n  Avatar,\r\n  Container,\r\n  Divider,\r\n  useMediaQuery,\r\n  IconButton,\r\n  Skeleton,\r\n  useTheme\r\n} from '@mui/material';\r\nimport {\r\n  SportsTennis as CourtsIcon,\r\n  CalendarToday as BookIcon,\r\n  Home as HomeIcon,\r\n  LocalOffer as DealsIcon,\r\n  ExitToApp as LogoutIcon,\r\n  Group as ManageRequestsIcon,\r\n  Group,\r\n  Dashboard as DashboardIcon,\r\n  Menu as MenuIcon,\r\n  Mail as MailIcon,\r\n  Help as HelpIcon,\r\n  People as PeopleIcon,\r\n  Assignment as BookingIcon,\r\n  Event as EventIcon,\r\n  Create as CreateEventIcon\r\n} from '@mui/icons-material';\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\nimport { useAuth } from '../../context/AuthContext';\r\nimport MobileDrawer from './MobileDrawer';\r\nimport ProfileMenu from './ProfileMenu';\r\nimport { THEME } from '../../constants';\r\n\r\nfunction Navbar() {\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  const { currentUser, logout, isAuthenticated } = useAuth();\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n  const [activeTab, setActiveTab] = useState('');\r\n  const [profileImage, setProfileImage] = useState(null);\r\n  const [isAdminRoute, setIsAdminRoute] = useState(false);\r\n  const [mobileOpen, setMobileOpen] = useState(false);\r\n  const isMobile = useMediaQuery('(max-width:900px)');\r\n  const theme = useTheme();\r\n\r\n  const username = currentUser?.username || '';\r\n  const role = currentUser?.role || '';\r\n  const isLoggedIn = isAuthenticated();\r\n\r\n  const getUsernameInitial = () => {\r\n    return username ? username.charAt(0).toUpperCase() : '';\r\n  };\r\n\r\n  useEffect(() => {\r\n    const path = location.pathname;\r\n    setIsAdminRoute(path.startsWith('/admin'));\r\n\r\n    if (path === '/') setActiveTab('home');\r\n    else if (path === '/courts' || path.startsWith('/courts/')) setActiveTab('courts');\r\n    else if (path === '/book' || path.startsWith('/book/')) setActiveTab('book');\r\n    else if (path === '/events' || path.startsWith('/events/')) setActiveTab('events');\r\n    else if (path === '/deals' || path.startsWith('/deals/')) setActiveTab('deals');\r\n    else if (path === '/admin' || path.startsWith('/admin/')) setActiveTab('admin');\r\n    else if (path === '/profile' || path.startsWith('/profile/')) setActiveTab('');\r\n    else if (path === '/messages' || path.startsWith('/messages/')) setActiveTab('messages');\r\n    else if (path === '/helpdesk' || path.startsWith('/helpdesk/')) setActiveTab('helpdesk');\r\n  }, [location]);\r\n\r\n  useEffect(() => {\r\n    const handleProfileImageChange = (event) => {\r\n      setProfileImage(event.detail?.profileImage || null);\r\n    };\r\n    window.addEventListener('profileImageChanged', handleProfileImageChange);\r\n    return () => {\r\n      window.removeEventListener('profileImageChanged', handleProfileImageChange);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setProfileImage(currentUser?.profileImage || null);\r\n  }, [currentUser]);\r\n\r\n  useEffect(() => {\r\n    handleCloseMenu();\r\n    setMobileOpen(false);\r\n  }, [location]);\r\n\r\n  const navigateTo = useCallback((path, id) => {\r\n    navigate(path);\r\n    setActiveTab(id);\r\n    setMobileOpen(false);\r\n  }, [navigate]);\r\n\r\n  const handleDrawerToggle = useCallback(() => {\r\n    setMobileOpen(prev => !prev);\r\n  }, []);\r\n\r\n  const handleLogout = useCallback(() => {\r\n    logout();\r\n    navigate('/login');\r\n    handleCloseMenu();\r\n  }, [logout, navigate]);\r\n\r\n  const handleOpenMenu = useCallback((event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  }, []);\r\n\r\n  const handleCloseMenu = useCallback(() => {\r\n    setAnchorEl(null);\r\n  }, []);\r\n\r\n\r\n  const navItems = useMemo(() => {\r\n    const baseItems = [\r\n      { id: 'home', label: 'Home', icon: <HomeIcon />, path: '/' },\r\n      { id: 'book', label: 'Book', icon: <BookIcon />, path: '/book' },\r\n      { id: 'events', label: 'Events', icon: <EventIcon />, path: '/events' },\r\n      { id: 'friendly-match', label: 'Friendly Match', icon: <Group />, path: '/friendly-match' },\r\n      { id: 'courts', label: 'Courts', icon: <CourtsIcon />, path: '/courts' },\r\n      { id: 'deals', label: 'Deals', icon: <DealsIcon />, path: '/deals' },\r\n      { id: 'helpdesk', label: 'Help', icon: <HelpIcon />, path: '/helpdesk' },\r\n    ];\r\n    let items = [...baseItems];\r\n    if (isLoggedIn && (role === 'EventOrganizer' || currentUser?.userType === 'EventOrganizer')) {\r\n      items.splice(3, 0, {\r\n        id: 'create-event',\r\n        label: 'Create Event',\r\n        icon: <CreateEventIcon />,\r\n        path: '/events/create'\r\n      });\r\n    }\r\n    if (isLoggedIn && role !== 'ADMIN') {\r\n      items.push({ id: 'messages', label: 'Messages', icon: <MailIcon />, path: '/messages' });\r\n    }\r\n    if (isLoggedIn && role === 'ADMIN') {\r\n      items.push({ id: 'admin', label: 'Manage Requests', icon: <ManageRequestsIcon />, path: '/admin' });\r\n    }\r\n    return items;\r\n  }, [isLoggedIn, role, currentUser]);\r\n\r\n  const adminNavItems = useMemo(() => [\r\n    { id: 'dashboard', label: 'Dashboard', icon: <DashboardIcon />, path: '/admin/dashboard' },\r\n    { id: 'users', label: 'Users', icon: <PeopleIcon />, path: '/admin/users' },\r\n    { id: 'bookings', label: 'Bookings', icon: <BookingIcon />, path: '/admin/bookings' },\r\n    { id: 'courts-admin', label: 'Courts', icon: <CourtsIcon />, path: '/admin/courts' },\r\n  ], []);\r\n\r\n  const renderNavItems = (items) => (\r\n    <>\r\n      {items.map((item) => (\r\n        <Button\r\n          key={item.id}\r\n          startIcon={!isMobile && item.icon}\r\n          onClick={() => navigateTo(item.path, item.id)}\r\n          sx={{\r\n            mx: 1,\r\n            px: 2,\r\n            color: activeTab === item.id\r\n              ? (isAdminRoute ? THEME.colors.adminPrimary : THEME.colors.primary)\r\n              : 'text.primary',\r\n            fontWeight: activeTab === item.id ? 'bold' : 'normal',\r\n            position: 'relative',\r\n            transition: 'color 0.2s ease, font-weight 0.2s ease',\r\n            '&:after': {\r\n              content: '\"\"',\r\n              position: 'absolute',\r\n              bottom: '-10px',\r\n              left: 0,\r\n              right: 0,\r\n              height: activeTab === item.id ? '3px' : 0,\r\n              borderRadius: '3px', // 添加圆角\r\n              backgroundColor: isAdminRoute ? THEME.colors.adminPrimary : THEME.colors.primary,\r\n              transform: activeTab === item.id ? 'scaleX(1)' : 'scaleX(0.8)', // 缩放动画\r\n              transition: 'height 0.3s ease, transform 0.3s ease',\r\n            },\r\n            '&:hover': {\r\n              color: isAdminRoute ? THEME.colors.adminPrimary : THEME.colors.primary,\r\n              backgroundColor: 'transparent',\r\n              '&:after': {\r\n                height: '2px',\r\n                backgroundColor: isAdminRoute ? THEME.colors.adminPrimary : THEME.colors.primary\r\n              }\r\n            }\r\n          }}\r\n        >\r\n          {item.label}\r\n        </Button>\r\n      ))}\r\n    </>\r\n  );\r\n\r\n  if (location.pathname.startsWith('/admin/login')) {\r\n    return null;\r\n  }\r\n\r\n  const {\r\n    gradients: { admin, primary: primaryGradient },\r\n    colors: { adminPrimary, primary, primaryHover }\r\n  } = THEME;\r\n\r\n  const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8081';\r\n\r\n  return (\r\n    <AppBar\r\n      position=\"fixed\"\r\n      elevation={2}\r\n      sx={{\r\n        backgroundColor: theme.palette.background.paper,\r\n        color: theme.palette.text.primary,\r\n        boxShadow: theme.shadows[2],\r\n        borderBottom: theme.palette.mode === 'dark' ? '1px solid #23262F' : '1px solid #e0e0e0',\r\n        transition: 'background-color 0.3s, color 0.3s',\r\n        zIndex: (theme) => theme.zIndex.drawer + 1\r\n      }}\r\n    >\r\n      <Container maxWidth={false} sx={{ maxWidth: '1200px', width: '100%', mx: 'auto', px: { xs: 1, sm: 2, lg: 3 } }}>\r\n        <Toolbar sx={{\r\n          justifyContent: 'space-between',\r\n          py: { xs: 1, sm: 1.5 }, // 响应式垂直间距\r\n          px: { xs: 1, sm: 0 }    // 响应式水平间距\r\n        }}>\r\n          <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n            {isMobile && (\r\n              <IconButton\r\n                color=\"inherit\"\r\n                aria-label=\"open drawer\"\r\n                edge=\"start\"\r\n                onClick={handleDrawerToggle}\r\n                sx={{ mr: 1 }}\r\n              >\r\n                <MenuIcon />\r\n              </IconButton>\r\n            )}\r\n            <Box\r\n              onClick={() => navigateTo(isAdminRoute ? '/admin/dashboard' : '/', 'home')}\r\n              sx={{\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                cursor: 'pointer',\r\n              }}\r\n            >\r\n              <Typography\r\n                variant={isMobile ? \"h5\" : \"h4\"}\r\n                sx={{\r\n                  fontWeight: 'bold',\r\n                  background: isAdminRoute ? admin : primaryGradient,\r\n                  WebkitBackgroundClip: 'text',\r\n                  WebkitTextFillColor: 'transparent',\r\n                  letterSpacing: 1.5,\r\n                  fontFamily: '\"Roboto Condensed\", sans-serif'\r\n                }}\r\n              >\r\n                {isAdminRoute ? 'ADMIN PORTAL' : 'Picklefy'}\r\n              </Typography>\r\n            </Box>\r\n          </Box>\r\n\r\n          <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n            {!isLoggedIn ? (\r\n              <>\r\n                {!isMobile && !isAdminRoute && (\r\n                  <>\r\n                    <Button\r\n                      variant=\"outlined\"\r\n                      onClick={() => navigate('/login')}\r\n                      sx={{\r\n                        mx: 1,\r\n                        borderColor: primary,\r\n                        color: primary,\r\n                        '&:hover': {\r\n                          backgroundColor: '#f5eef8',\r\n                          borderColor: primaryHover\r\n                        }\r\n                      }}\r\n                    >\r\n                      Login\r\n                    </Button>\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      onClick={() => navigate('/register')}\r\n                      sx={{\r\n                        mx: 1,\r\n                        backgroundColor: primary,\r\n                        '&:hover': { backgroundColor: primaryHover }\r\n                      }}\r\n                    >\r\n                      Register\r\n                    </Button>\r\n                  </>\r\n                )}\r\n                {!isMobile && (\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    onClick={() => navigate('/admin/login')}\r\n                    sx={{\r\n                      mx: 1,\r\n                      backgroundColor: primary,\r\n                      '&:hover': { backgroundColor: primaryHover }\r\n                    }}\r\n                  >\r\n                    Admin Login\r\n                  </Button>\r\n                )}\r\n              </>\r\n            ) : (\r\n\r\n              <Box\r\n                onClick={handleOpenMenu}\r\n                sx={{\r\n                  display: 'flex',\r\n                  alignItems: 'center',\r\n                  cursor: 'pointer',\r\n                  '&:hover': {\r\n                    backgroundColor: '#f5f5f5',\r\n                    borderRadius: '4px'\r\n                  },\r\n                  p: 1,\r\n                  transition: 'background-color 0.3s ease',\r\n                  '&:active': {\r\n                    transform: 'scale(0.95)',\r\n                    transition: 'transform 0.1s ease'\r\n                  }\r\n                }}\r\n                role=\"button\"\r\n                aria-label=\"User menu\"\r\n                tabIndex={0}\r\n                onKeyPress={(e) => e.key === 'Enter' && handleOpenMenu(e)}\r\n              >\r\n                {profileImage === undefined ? (\r\n                  <Skeleton variant=\"circular\" width={40} height={40} />\r\n                ) : (\r\n                  <Avatar\r\n                    src={profileImage ? `http://localhost:8081/uploads/${profileImage}?ts=${Date.now()}` : null}\r\n                    onError={e => {\r\n                      e.target.onerror = null;\r\n                      e.target.src = null;\r\n                    }}\r\n                    sx={{\r\n                      width: 40,\r\n                      height: 40,\r\n                      bgcolor: isAdminRoute ? '#667eea' : '#8e44ad',\r\n                      fontSize: '1.2rem',\r\n                      fontWeight: 'bold'\r\n                    }}\r\n                  >\r\n                    {!profileImage && getUsernameInitial()}\r\n                  </Avatar>\r\n                )}\r\n                {!isMobile && (\r\n                  <Typography variant=\"body1\" sx={{ fontWeight: 500, ml: 1 }}>\r\n                    {username ? `Hi, ${username}` : 'Profile'}\r\n                  </Typography>\r\n                )}\r\n              </Box>\r\n            )}\r\n          </Box>\r\n        </Toolbar>\r\n\r\n        <Divider sx={{ backgroundColor: '#e0e0e0', mb: 1 }} />\r\n\r\n        {!isMobile && (\r\n          <Box sx={{\r\n            display: 'flex',\r\n            justifyContent: 'left',\r\n            py: 1,\r\n            position: 'relative'\r\n          }}>\r\n            {renderNavItems(isAdminRoute ? adminNavItems : navItems)}\r\n          </Box>\r\n        )}\r\n      </Container>\r\n\r\n      {isMobile && (\r\n        <MobileDrawer\r\n          isAdminRoute={isAdminRoute}\r\n          navItems={navItems}\r\n          adminNavItems={adminNavItems}\r\n          activeTab={activeTab}\r\n          navigateTo={navigateTo}\r\n          isLoggedIn={isLoggedIn}\r\n          profileImage={profileImage}\r\n          username={username}\r\n          getUsernameInitial={getUsernameInitial}\r\n          handleLogout={handleLogout}\r\n          navigate={navigate}\r\n          mobileOpen={mobileOpen}\r\n          handleDrawerToggle={handleDrawerToggle}\r\n        />\r\n      )}\r\n\r\n      <ProfileMenu\r\n        anchorEl={anchorEl}\r\n        handleCloseMenu={handleCloseMenu}\r\n        profileImage={profileImage}\r\n        isAdminRoute={isAdminRoute}\r\n        getUsernameInitial={getUsernameInitial}\r\n        navigate={navigate}\r\n        role={role}\r\n        handleLogout={handleLogout}\r\n        API_URL={API_URL}\r\n      />\r\n    </AppBar>\r\n  );\r\n}\r\n\r\nexport default Navbar;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball-frontend/src/components/common/Navbar.jsx b/pickleball-frontend/src/components/common/Navbar.jsx
--- a/pickleball-frontend/src/components/common/Navbar.jsx	(revision 97abd609899a67b781b8ace8e91358a782fc5acd)
+++ b/pickleball-frontend/src/components/common/Navbar.jsx	(date 1753723427938)
@@ -30,7 +30,7 @@
   Event as EventIcon,
   Create as CreateEventIcon
 } from '@mui/icons-material';
-import { useNavigate, useLocation } from 'react-router-dom';
+import { useNavigate, useLocation, Link } from 'react-router-dom';
 import { useAuth } from '../../context/AuthContext';
 import MobileDrawer from './MobileDrawer';
 import ProfileMenu from './ProfileMenu';
@@ -120,10 +120,11 @@
       { id: 'home', label: 'Home', icon: <HomeIcon />, path: '/' },
       { id: 'book', label: 'Book', icon: <BookIcon />, path: '/book' },
       { id: 'events', label: 'Events', icon: <EventIcon />, path: '/events' },
-      { id: 'friendly-match', label: 'Friendly Match', icon: <Group />, path: '/friendly-match' },
+       { id: 'friendly-matches', label: 'Friendly Match', icon: <Group />, path: '/friendly-matches' },
       { id: 'courts', label: 'Courts', icon: <CourtsIcon />, path: '/courts' },
       { id: 'deals', label: 'Deals', icon: <DealsIcon />, path: '/deals' },
       { id: 'helpdesk', label: 'Help', icon: <HelpIcon />, path: '/helpdesk' },
+       { id: 'coaching', label: 'Coaching', icon: <BookIcon />, path: '/coaching/browse' },
     ];
     let items = [...baseItems];
     if (isLoggedIn && (role === 'EventOrganizer' || currentUser?.userType === 'EventOrganizer')) {
Index: pickleball-frontend/src/components/event/EventPage.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useState, useEffect } from 'react';\r\nimport api from '../../service/api';\r\nimport EventService from '../../service/EventService';\r\nimport { useAuth } from '../../context/AuthContext';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport {\r\n  Container,\r\n  Typography,\r\n  Grid,\r\n  Card,\r\n  CardContent,\r\n  CardMedia,\r\n  CardActions,\r\n  Button,\r\n  Chip,\r\n  Box,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  IconButton,\r\n  Avatar,\r\n  Divider,\r\n  Paper,\r\n  CircularProgress,\r\n  Alert,\r\n  useTheme,\r\n  alpha\r\n} from '@mui/material';\r\nimport {\r\n  CalendarToday,\r\n  LocationOn,\r\n  People,\r\n  AttachMoney,\r\n  Close,\r\n  Favorite,\r\n  FavoriteBorder\r\n} from '@mui/icons-material';\r\nimport { useLocation } from 'react-router-dom';\r\nimport FriendlyMatchPage from './FriendlyMatchPage';\r\nimport ThemedCard from '../common/ThemedCard';\r\n\r\nconst EventPage = () => {\r\n  const [events, setEvents] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [selectedEvent, setSelectedEvent] = useState(null);\r\n  const [favorites, setFavorites] = useState(new Set());\r\n  const [showRegisterDialog, setShowRegisterDialog] = useState(false);\r\n  const [registering, setRegistering] = useState(false);\r\n  const [registerSuccess, setRegisterSuccess] = useState(false);\r\n  const [registerError, setRegisterError] = useState('');\r\n  const [registerEvent, setRegisterEvent] = useState(null);\r\n  const [isRegistered, setIsRegistered] = useState(false);\r\n  const [checkingRegistration, setCheckingRegistration] = useState(false);\r\n  const [detailLoading, setDetailLoading] = useState(false);\r\n  const [registeredUsers, setRegisteredUsers] = useState([]);\r\n  const [showDialog, setShowDialog] = useState(false);\r\n  const [showFriendlyMatch, setShowFriendlyMatch] = useState(false);\r\n\r\n  const { currentUser } = useAuth();\r\n  const isEventOrganizer = currentUser?.role === 'EVENTORGANIZER' || currentUser?.role === 'EventOrganizer' || currentUser?.userType === 'EventOrganizer';\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  const theme = useTheme();\r\n\r\n\r\n  const fetchEvents = async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const eventList = await EventService.getUpcomingEvents();\r\n      setEvents(eventList.content || eventList);\r\n    } catch (err) {\r\n      setError('Failed to load events.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Always fetch events on mount or path change\r\n    fetchEvents();\r\n\r\n    // If coming back from edit and refresh flag is set, fetch again\r\n    if (location.state?.refresh) {\r\n      fetchEvents();\r\n      // Clear the state so it doesn't refetch every time\r\n      window.history.replaceState({}, document.title);\r\n    }\r\n  }, [location.pathname]); // location from react-router\r\n\r\n  // Update handleEventClick to fetch event details from backend\r\n  const handleEventClick = async (event) => {\r\n    setDetailLoading(true);\r\n    setError(null); // <-- Clear error before starting\r\n    setSelectedEvent(null);\r\n    setIsRegistered(false);\r\n    setCheckingRegistration(true);\r\n    try {\r\n      const eventDetails = await EventService.getEventDetails(event.id);\r\n      setSelectedEvent(eventDetails);\r\n      setError(null); // <-- Clear error on success\r\n      const isRegistered = await EventService.isRegisteredForEvent(event.id);\r\n      setIsRegistered(isRegistered === true);\r\n    } catch {\r\n      setIsRegistered(false);\r\n      // setError('Failed to load event details.'); // This line is removed\r\n    } finally {\r\n      setCheckingRegistration(false);\r\n      setDetailLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleCloseDialog = () => {\r\n    setSelectedEvent(null);\r\n    setIsRegistered(false);\r\n  };\r\n\r\n  const toggleFavorite = (eventId) => {\r\n    const newFavorites = new Set(favorites);\r\n    if (newFavorites.has(eventId)) {\r\n      newFavorites.delete(eventId);\r\n    } else {\r\n      newFavorites.add(eventId);\r\n    }\r\n    setFavorites(newFavorites);\r\n  };\r\n\r\n  const getCategoryColor = (category) => {\r\n    const colors = {\r\n      Technology: 'primary',\r\n      Music: 'secondary',\r\n      Business: 'success',\r\n      Arts: 'warning',\r\n      Food: 'error',\r\n      Fitness: 'info',\r\n      Tournament: 'primary',\r\n      League: 'secondary',\r\n      'Friendly Match': 'success',\r\n      Workshop: 'warning',\r\n      Social: 'info',\r\n    };\r\n    return colors[category] || 'default';\r\n  };\r\n\r\n  const formatDate = (dateString) => {\r\n    if (!dateString) return '';\r\n    const d = new Date(dateString);\r\n    if (isNaN(d.getTime())) return '';\r\n    return d.toLocaleDateString('en-US', {\r\n      weekday: 'long',\r\n      year: 'numeric',\r\n      month: 'long',\r\n      day: 'numeric'\r\n    });\r\n  };\r\n\r\n  function formatTime(dateString) {\r\n    if (!dateString) return '';\r\n    const d = new Date(dateString);\r\n    if (isNaN(d.getTime())) return '';\r\n    return d.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\r\n  }\r\n\r\n  const getAvailabilityStatus = (registered, capacity) => {\r\n    const percentage = (registered / capacity) * 100;\r\n    if (percentage >= 90) return { text: 'Almost Full', color: 'error' };\r\n    if (percentage >= 70) return { text: 'Filling Fast', color: 'warning' };\r\n    return { text: 'Available', color: 'success' };\r\n  };\r\n\r\n  // Map backend event fields to UI fields\r\n  const mapEvent = (event) => {\r\n    // Ensure startTime is a string in ISO format\r\n    let startTime = event.startTime;\r\n    if (startTime && typeof startTime === 'object' && startTime.toISOString) {\r\n      startTime = startTime.toISOString();\r\n    } else if (startTime && typeof startTime === 'string' && startTime.includes(' ')) {\r\n      startTime = startTime.replace(' ', 'T');\r\n    }\r\n    return {\r\n      id: event.id,\r\n      title: event.title,\r\n      description: event.description,\r\n      fullDescription: event.fullDescription || event.description,\r\n      date: startTime,\r\n      time: formatTime(startTime),\r\n      location: event.location,\r\n      price: event.price !== undefined ? event.price : (event.feeAmount !== undefined ? event.feeAmount : 0),\r\n      capacity: event.capacity,\r\n      registered: event.registeredCount || event.registered || 0,\r\n      category: event.eventType || event.category,\r\n      image: event.imageUrl || 'https://images.unsplash.com/photo-1540575467063-178a50c2df87?w=400&h=200&fit=crop',\r\n      organizer: event.organizerName || 'Organizer',\r\n      tags: event.tags || [],\r\n    };\r\n  };\r\n\r\n  const handleRegisterClick = (event) => {\r\n    setRegisterEvent(event);\r\n    setShowRegisterDialog(true);\r\n    setRegisterSuccess(false);\r\n    setRegisterError('');\r\n  };\r\n\r\n  const handleRegisterCancel = () => {\r\n    setShowRegisterDialog(false);\r\n    setRegisterEvent(null);\r\n    setRegisterSuccess(false);\r\n    setRegisterError('');\r\n  };\r\n\r\n  const handleRegisterConfirm = async () => {\r\n    setRegistering(true);\r\n    setRegisterError('');\r\n    try {\r\n      await EventService.registerForEvent(registerEvent.id);\r\n      setRegisterSuccess(true);\r\n      setEvents(prevEvents =>\r\n        prevEvents.map(ev =>\r\n          ev.id === registerEvent.id\r\n            ? { ...ev, registered: (ev.registered || 0) + 1 }\r\n            : ev\r\n        )\r\n      );\r\n      setIsRegistered(true);\r\n      setTimeout(() => {\r\n        setShowRegisterDialog(false);\r\n        setRegisterEvent(null);\r\n        setRegisterSuccess(false);\r\n      }, 2000);\r\n    } catch (err) {\r\n      setRegisterError(\r\n        err.response?.data?.message || err.response?.data || 'Registration failed.'\r\n      );\r\n    } finally {\r\n      setRegistering(false);\r\n    }\r\n  };\r\n\r\n  const handleEditEvent = (event) => {\r\n    navigate(`/events/edit/${event.id}`);\r\n  };\r\n\r\n  const handleCancelEvent = async (event) => {\r\n    try {\r\n      await EventService.deleteEvent(event.id);\r\n      fetchEvents();\r\n      setSelectedEvent(null);\r\n    } catch (err) {\r\n      alert('Failed to cancel event.');\r\n    }\r\n  };\r\n\r\n  const handleViewRegisteredUsers = async (eventId) => {\r\n    const res = await api.get(`/api/event-registration/event/${eventId}/users`);\r\n    setRegisteredUsers(res.data);\r\n    setShowDialog(true);\r\n  };\r\n\r\n  let scheduleItems = [];\r\n  try {\r\n    if (selectedEvent?.schedule) {\r\n      scheduleItems = JSON.parse(selectedEvent.schedule);\r\n    }\r\n  } catch (e) {\r\n    scheduleItems = [];\r\n  }\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\" sx={{ py: 4 }}>\r\n      <Typography variant=\"h3\" component=\"h1\" gutterBottom align=\"center\" sx={{ mb: 4 }}>\r\n        Upcoming Events\r\n      </Typography>\r\n\r\n      {isEventOrganizer && (\r\n        <Box sx={{ display: 'flex', justifyContent: 'flex-end', mb: 2 }}>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={() => navigate('/events/create')}\r\n          >\r\n            Create Event\r\n          </Button>\r\n        </Box>\r\n      )}\r\n\r\n      {loading && (\r\n        <Box sx={{ display: 'flex', justifyContent: 'center', my: 6 }}>\r\n          <CircularProgress />\r\n        </Box>\r\n      )}\r\n      {error && (\r\n        <Alert severity=\"error\" sx={{ mb: 3 }}>{error}</Alert>\r\n      )}\r\n      {!loading && !error && events.length === 0 && (\r\n        <Typography align=\"center\" color=\"text.secondary\" sx={{ mt: 6 }}>\r\n          No upcoming events found.\r\n        </Typography>\r\n      )}\r\n\r\n      <Grid container spacing={3}>\r\n        {events.map((rawEvent) => {\r\n          const event = mapEvent(rawEvent);\r\n          const availability = getAvailabilityStatus(event.registered, event.capacity);\r\n\r\n          return (\r\n            <Grid item xs={12} md={6} lg={4} key={event.id}>\r\n              <ThemedCard\r\n                sx={{\r\n                  height: '100%',\r\n                  display: 'flex',\r\n                  flexDirection: 'column',\r\n                  cursor: 'pointer',\r\n                  transition: 'transform 0.2s, box-shadow 0.2s',\r\n                  '&:hover': {\r\n                    transform: 'translateY(-4px)',\r\n                    boxShadow: 4\r\n                  }\r\n                }}\r\n                onClick={() => handleEventClick(event)}\r\n              >\r\n                <CardMedia\r\n                  component=\"img\"\r\n                  height=\"200\"\r\n                  image={event.image}\r\n                  alt={event.title}\r\n                />\r\n                <CardContent sx={{ flexGrow: 1 }}>\r\n                  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', mb: 1 }}>\r\n                    <Chip\r\n                      label={event.category}\r\n                      color={getCategoryColor(event.category)}\r\n                      size=\"small\"\r\n                    />\r\n                    <IconButton\r\n                      size=\"small\"\r\n                      onClick={e => {\r\n                        e.stopPropagation();\r\n                        toggleFavorite(event.id);\r\n                      }}\r\n                    >\r\n                      {favorites.has(event.id) ? <Favorite color=\"error\" /> : <FavoriteBorder />}\r\n                    </IconButton>\r\n                  </Box>\r\n\r\n                  <Typography variant=\"h6\" component=\"h2\" gutterBottom>\r\n                    {event.title}\r\n                  </Typography>\r\n\r\n                  <Typography variant=\"body2\" color=\"text.secondary\" paragraph>\r\n                    {event.description}\r\n                  </Typography>\r\n\r\n                  <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\r\n                    <CalendarToday sx={{ mr: 1, fontSize: 16 }} />\r\n                    <Typography variant=\"body2\">\r\n                      {formatDate(event.date) || 'No date'} {formatTime(event.time)}\r\n                    </Typography>\r\n                  </Box>\r\n\r\n                  <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\r\n                    <LocationOn sx={{ mr: 1, fontSize: 16 }} />\r\n                    <Typography variant=\"body2\">\r\n                      {event.location}\r\n                    </Typography>\r\n                  </Box>\r\n\r\n                  <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\r\n                    <AttachMoney sx={{ mr: 1, fontSize: 16 }} />\r\n                    <Typography variant=\"body2\">\r\n                      {event.price === 0 ? 'Free' : `$${event.price}`}\r\n                    </Typography>\r\n                  </Box>\r\n\r\n                  <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\r\n                    <People sx={{ mr: 1, fontSize: 16 }} />\r\n                    <Typography variant=\"body2\">\r\n                      {event.registered}/{event.capacity} registered\r\n                    </Typography>\r\n                    <Chip\r\n                      label={availability.text}\r\n                      color={availability.color}\r\n                      size=\"small\"\r\n                      sx={{ ml: 1 }}\r\n                    />\r\n                  </Box>\r\n                </CardContent>\r\n\r\n                <CardActions sx={{ p: 2, pt: 0 }}>\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    fullWidth\r\n                    onClick={e => {\r\n                      e.stopPropagation();\r\n                      handleEventClick(event);\r\n                    }}\r\n                  >\r\n                    View Details\r\n                  </Button>\r\n                </CardActions>\r\n              </ThemedCard>\r\n            </Grid>\r\n          );\r\n        })}\r\n      </Grid>\r\n\r\n      {/* Event Detail Dialog */}\r\n      <Dialog\r\n        open={!!selectedEvent || detailLoading}\r\n        onClose={handleCloseDialog}\r\n        maxWidth=\"md\"\r\n        fullWidth\r\n      >\r\n        {detailLoading ? (\r\n          <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', minHeight: 300 }}>\r\n            <CircularProgress />\r\n          </Box>\r\n        ) : selectedEvent && (\r\n          <>\r\n            <DialogTitle>\r\n              <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n                <Typography variant=\"h5\">{selectedEvent.title}</Typography>\r\n                <IconButton onClick={handleCloseDialog}>\r\n                  <Close />\r\n                </IconButton>\r\n              </Box>\r\n            </DialogTitle>\r\n\r\n            <DialogContent>\r\n              <Box sx={{ mb: 3 }}>\r\n                <img\r\n                  src={selectedEvent.imageUrl || 'https://images.unsplash.com/photo-1540575467063-178a50c2df87?w=400&h=200&fit=crop'}\r\n                  alt={selectedEvent.title}\r\n                  style={{ width: '100%', height: '300px', objectFit: 'cover', borderRadius: '8px' }}\r\n                />\r\n              </Box>\r\n\r\n              <Box sx={{ display: 'flex', gap: 1, mb: 2 }}>\r\n                <Chip\r\n                  label={selectedEvent.eventType}\r\n                  color={getCategoryColor(selectedEvent.eventType)}\r\n                />\r\n                {selectedEvent.tags && selectedEvent.tags.map((tag, index) => (\r\n                  <Chip key={index} label={tag} variant=\"outlined\" size=\"small\" />\r\n                ))}\r\n              </Box>\r\n\r\n              <Typography variant=\"body1\" paragraph>\r\n                {selectedEvent.description || selectedEvent.title}\r\n              </Typography>\r\n\r\n              <Divider sx={{ my: 2, color: theme.palette.divider }} />\r\n\r\n              <Grid container spacing={2}>\r\n                <Grid item xs={12} md={6}>\r\n                  <Paper sx={{ p: 2, bgcolor: theme.palette.background.paper }}>\r\n                    <Typography variant=\"h6\" gutterBottom>Event Details</Typography>\r\n\r\n                    <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\r\n                      <CalendarToday sx={{ mr: 1, fontSize: 20 }} />\r\n                      <Box>\r\n                        <Typography variant=\"body2\" color=\"text.secondary\">Date & Time</Typography>\r\n                        <Typography variant=\"body1\">\r\n                          {formatDate(selectedEvent.startTime)} {formatTime(selectedEvent.startTime)} - {formatTime(selectedEvent.endTime)}\r\n                        </Typography>\r\n                      </Box>\r\n                    </Box>\r\n\r\n                    <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\r\n                      <LocationOn sx={{ mr: 1, fontSize: 20 }} />\r\n                      <Box>\r\n                        <Typography variant=\"body2\" color=\"text.secondary\">Location</Typography>\r\n                        <Typography variant=\"body1\">{selectedEvent.location}</Typography>\r\n                      </Box>\r\n                    </Box>\r\n\r\n                    <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\r\n                      <AttachMoney sx={{ mr: 1, fontSize: 20 }} />\r\n                      <Box>\r\n                        <Typography variant=\"body2\" color=\"text.secondary\">Price</Typography>\r\n                        <Typography variant=\"body1\">\r\n                          Free\r\n                        </Typography>\r\n                      </Box>\r\n                    </Box>\r\n\r\n                    {selectedEvent.skillLevel && (\r\n                      <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\r\n                        <People sx={{ mr: 1, fontSize: 20 }} />\r\n                        <Box>\r\n                          <Typography variant=\"body2\" color=\"text.secondary\">Skill Level</Typography>\r\n                          <Typography variant=\"body1\">{selectedEvent.skillLevel}</Typography>\r\n                        </Box>\r\n                      </Box>\r\n                    )}\r\n\r\n                    {selectedEvent.eligibility && (\r\n                      <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\r\n                        <People sx={{ mr: 1, fontSize: 20 }} />\r\n                        <Box>\r\n                          <Typography variant=\"body2\" color=\"text.secondary\">Eligibility</Typography>\r\n                          <Typography variant=\"body1\">{selectedEvent.eligibility}</Typography>\r\n                        </Box>\r\n                      </Box>\r\n                    )}\r\n                  </Paper>\r\n                </Grid>\r\n\r\n                <Grid item xs={12} md={6}>\r\n                  <Paper sx={{ p: 2, bgcolor: theme.palette.background.paper }}>\r\n                    <Typography variant=\"h6\" gutterBottom>Organizer</Typography>\r\n\r\n                    <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\r\n                      <Avatar sx={{ mr: 2 }}>\r\n                        {selectedEvent.organizerName?.charAt(0)}\r\n                      </Avatar>\r\n                      <Typography variant=\"body1\">{selectedEvent.organizerName || 'Unknown Organizer'}</Typography>\r\n                    </Box>\r\n\r\n                    <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\r\n                      <People sx={{ mr: 1, fontSize: 20 }} />\r\n                      <Box>\r\n                        <Typography variant=\"body2\" color=\"text.secondary\">Capacity</Typography>\r\n                        <Typography variant=\"body1\">\r\n                          {selectedEvent.capacity} participants\r\n                        </Typography>\r\n                      </Box>\r\n                    </Box>\r\n\r\n                    {selectedEvent.currentParticipants && (\r\n                      <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\r\n                        <People sx={{ mr: 1, fontSize: 20 }} />\r\n                        <Box>\r\n                          <Typography variant=\"body2\" color=\"text.secondary\">Registered</Typography>\r\n                          <Typography variant=\"body1\">\r\n                            {selectedEvent.currentParticipants} / {selectedEvent.capacity} registered\r\n                          </Typography>\r\n                        </Box>\r\n                      </Box>\r\n                    )}\r\n\r\n                    {selectedEvent.timeUntilEvent && (\r\n                      <Box sx={{ mt: 2 }}>\r\n                        <Chip\r\n                          label={selectedEvent.timeUntilEvent}\r\n                          color={selectedEvent.isUpcoming ? 'primary' : 'default'}\r\n                        />\r\n                      </Box>\r\n                    )}\r\n                  </Paper>\r\n                </Grid>\r\n              </Grid>\r\n\r\n              {selectedEvent.schedule && (\r\n                <>\r\n                  <Divider sx={{ my: 2, color: theme.palette.divider }} />\r\n                  <Paper sx={{ p: 2, bgcolor: theme.palette.background.paper }}>\r\n                    <Typography variant=\"h6\" gutterBottom>Schedule</Typography>\r\n                    {scheduleItems.length > 0 ? (\r\n                      <ul>\r\n                        {scheduleItems.map((item, idx) => (\r\n                          <li key={idx}>\r\n                            <strong>{item.time}</strong>: {item.activity}\r\n                          </li>\r\n                        ))}\r\n                      </ul>\r\n                    ) : (\r\n                      <Typography variant=\"body2\" color=\"text.secondary\">No schedule available.</Typography>\r\n                    )}\r\n                  </Paper>\r\n                </>\r\n              )}\r\n            </DialogContent>\r\n\r\n            <DialogActions sx={{ p: 3 }}>\r\n              <Button onClick={handleCloseDialog} color=\"inherit\">\r\n                Close\r\n              </Button>\r\n              {currentUser?.role === \"EVENTORGANIZER\" || currentUser?.userType === \"EventOrganizer\" ? (\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  onClick={() => handleEditEvent(selectedEvent)}\r\n                >\r\n                  Edit\r\n                </Button>\r\n              ) : (\r\n                <Button\r\n                  variant=\"contained\"\r\n                  size=\"large\"\r\n                  disabled={selectedEvent.currentParticipants >= selectedEvent.capacity || isRegistered || checkingRegistration}\r\n                  onClick={() => handleRegisterClick(selectedEvent)}\r\n                  sx={isRegistered ? { backgroundColor: theme.palette.grey[400], color: theme.palette.common.white } : {}}\r\n                >\r\n                  {selectedEvent.currentParticipants >= selectedEvent.capacity\r\n                    ? 'Event Full'\r\n                    : isRegistered\r\n                      ? 'Already Registered'\r\n                      : 'Register Now'}\r\n                </Button>\r\n              )}\r\n              {currentUser?.userType === \"EventOrganizer\" && (\r\n                <Button onClick={() => handleViewRegisteredUsers(selectedEvent.id)}>\r\n                  View Registered Users\r\n                </Button>\r\n              )}\r\n              {selectedEvent.eventType === 'Friendly Match' && (\r\n                <Button onClick={() => setShowFriendlyMatch(true)}>View Friendly Match</Button>\r\n              )}\r\n            </DialogActions>\r\n          </>\r\n        )}\r\n      </Dialog>\r\n\r\n      {/* Registration Confirmation Dialog */}\r\n      <Dialog\r\n        open={showRegisterDialog}\r\n        onClose={handleRegisterCancel}\r\n        maxWidth=\"sm\"\r\n        fullWidth\r\n        PaperProps={{\r\n          sx: {\r\n            borderRadius: 3,\r\n            boxShadow: '0 20px 40px rgba(0,0,0,0.1)'\r\n          }\r\n        }}\r\n      >\r\n        {registerSuccess ? (\r\n          <>\r\n            <DialogTitle sx={{ textAlign: 'center', pb: 1 }}>\r\n              <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\r\n                <Box\r\n                  sx={{\r\n                    width: 80,\r\n                    height: 80,\r\n                    borderRadius: '50%',\r\n                    bgcolor: theme.palette.success.main,\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    justifyContent: 'center',\r\n                    mb: 2,\r\n                    animation: 'pulse 2s infinite'\r\n                  }}\r\n                >\r\n                  <Typography variant=\"h2\" color={theme.palette.common.white}>✓</Typography>\r\n                </Box>\r\n                <Typography variant=\"h5\" color={theme.palette.success.main} fontWeight=\"bold\">\r\n                  Registration Successful!\r\n                </Typography>\r\n              </Box>\r\n            </DialogTitle>\r\n            <DialogContent sx={{ textAlign: 'center', px: 4 }}>\r\n              <Alert severity=\"success\" sx={{ mb: 3, borderRadius: 2 }}>\r\n                <Typography variant=\"body1\" sx={{ mb: 1 }}>\r\n                  <strong>Congratulations!</strong> You've successfully registered for this event.\r\n                </Typography>\r\n                <Typography variant=\"body2\">\r\n                  A confirmation email has been sent to your registered email address. \r\n                  Please check your inbox and spam folder.\r\n                </Typography>\r\n              </Alert>\r\n              \r\n              <Paper sx={{ p: 2, bgcolor: theme.palette.grey[50], borderRadius: 2, mb: 2 }}>\r\n                <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 1 }}>\r\n                  \uD83D\uDCE7 <strong>What's Next?</strong>\r\n                </Typography>\r\n                <Typography variant=\"body2\" sx={{ mb: 1 }}>\r\n                  • Check your email for event details and QR code\r\n                </Typography>\r\n                <Typography variant=\"body2\" sx={{ mb: 1 }}>\r\n                  • Add the event to your calendar\r\n                </Typography>\r\n                <Typography variant=\"body2\">\r\n                  • Arrive 15 minutes early on event day\r\n                </Typography>\r\n              </Paper>\r\n\r\n              <Alert severity=\"info\" sx={{ borderRadius: 2 }}>\r\n                <Typography variant=\"body2\">\r\n                  <strong>Cancellation Policy:</strong> You can cancel your registration up to \r\n                  <strong> 48 hours</strong> before the event starts. Contact support if you need to cancel.\r\n                </Typography>\r\n              </Alert>\r\n            </DialogContent>\r\n            <DialogActions sx={{ justifyContent: 'center', pb: 3 }}>\r\n              <Button \r\n                variant=\"contained\" \r\n                onClick={handleRegisterCancel}\r\n                sx={{ px: 4, py: 1.5, borderRadius: 2 }}\r\n              >\r\n                Got It!\r\n              </Button>\r\n            </DialogActions>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <DialogTitle sx={{ textAlign: 'center', pb: 1 }}>\r\n              <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\r\n                <Box\r\n                  sx={{\r\n                    width: 60,\r\n                    height: 60,\r\n                    borderRadius: '50%',\r\n                    bgcolor: theme.palette.primary.main,\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    justifyContent: 'center',\r\n                    mb: 2\r\n                  }}\r\n                >\r\n                  <Typography variant=\"h4\" color={theme.palette.common.white}>\uD83D\uDCDD</Typography>\r\n                </Box>\r\n                <Typography variant=\"h5\" fontWeight=\"bold\">\r\n                  Confirm Registration\r\n                </Typography>\r\n                <Typography variant=\"body2\" color=\"text.secondary\">\r\n                  You're about to register for this event\r\n                </Typography>\r\n              </Box>\r\n            </DialogTitle>\r\n            \r\n            <DialogContent sx={{ px: 4 }}>\r\n              <Paper sx={{ p: 3, bgcolor: theme.palette.grey[50], borderRadius: 2, mb: 3 }}>\r\n                <Typography variant=\"h6\" gutterBottom color={theme.palette.primary.main}>\r\n                  {registerEvent?.title}\r\n                </Typography>\r\n                <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\r\n                  {registerEvent?.description}\r\n                </Typography>\r\n                \r\n                <Box sx={{ mt: 2, display: 'flex', flexDirection: 'column', gap: 1 }}>\r\n                  <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                    <CalendarToday sx={{ mr: 1, fontSize: 16, color: 'text.secondary' }} />\r\n                    <Typography variant=\"body2\">\r\n                      <strong>Date:</strong> {formatDate(registerEvent?.startTime)}\r\n                    </Typography>\r\n                  </Box>\r\n                  <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                    <Box sx={{ width: 16, height: 16, mr: 1, display: 'flex', alignItems: 'center' }}>\r\n                      <Typography variant=\"body2\">\uD83D\uDD50</Typography>\r\n                    </Box>\r\n                    <Typography variant=\"body2\">\r\n                      <strong>Time:</strong> {formatTime(registerEvent?.startTime)}\r\n                    </Typography>\r\n                  </Box>\r\n                  <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                    <LocationOn sx={{ mr: 1, fontSize: 16, color: 'text.secondary' }} />\r\n                    <Typography variant=\"body2\">\r\n                      <strong>Location:</strong> {registerEvent?.location}\r\n                    </Typography>\r\n                  </Box>\r\n                  <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                    <AttachMoney sx={{ mr: 1, fontSize: 16, color: 'text.secondary' }} />\r\n                    <Typography variant=\"body2\">\r\n                      <strong>Price:</strong> {registerEvent?.price === 0 ? 'Free' : `$${registerEvent?.price}`}\r\n                    </Typography>\r\n                  </Box>\r\n                </Box>\r\n              </Paper>\r\n\r\n              <Alert severity=\"info\" sx={{ mb: 2, borderRadius: 2 }}>\r\n                <Typography variant=\"body2\" sx={{ mb: 1 }}>\r\n                  <strong>\uD83D\uDCCB Registration Terms:</strong>\r\n                </Typography>\r\n                <Typography variant=\"body2\" sx={{ mb: 1 }}>\r\n                  • You can cancel your registration up to <strong>48 hours</strong> before the event\r\n                </Typography>\r\n                <Typography variant=\"body2\" sx={{ mb: 1 }}>\r\n                  • A confirmation email will be sent to your registered email address\r\n                </Typography>\r\n                <Typography variant=\"body2\">\r\n                  • Please arrive 15 minutes early on the event day\r\n                </Typography>\r\n              </Alert>\r\n\r\n              <Alert severity=\"warning\" sx={{ borderRadius: 2 }}>\r\n                <Typography variant=\"body2\">\r\n                  <strong>⚠\uFE0F Important:</strong> By confirming, you agree to attend the event. \r\n                  Late cancellations may result in a no-show fee for paid events.\r\n                </Typography>\r\n              </Alert>\r\n\r\n              {registerError && (\r\n                <Alert severity=\"error\" sx={{ mt: 2, borderRadius: 2 }}>\r\n                  {registerError}\r\n                </Alert>\r\n              )}\r\n            </DialogContent>\r\n            \r\n            <DialogActions sx={{ px: 4, pb: 3, gap: 2 }}>\r\n              <Button \r\n                onClick={handleRegisterCancel} \r\n                disabled={registering}\r\n                variant=\"outlined\"\r\n                sx={{ px: 3, py: 1.5, borderRadius: 2 }}\r\n              >\r\n                Cancel\r\n              </Button>\r\n              <Button\r\n                variant=\"contained\"\r\n                onClick={handleRegisterConfirm}\r\n                disabled={registering}\r\n                sx={{ px: 3, py: 1.5, borderRadius: 2 }}\r\n              >\r\n                {registering ? (\r\n                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n                    <CircularProgress size={16} color=\"inherit\" />\r\n                    Registering...\r\n                  </Box>\r\n                ) : (\r\n                  'Confirm Registration'\r\n                )}\r\n              </Button>\r\n            </DialogActions>\r\n          </>\r\n        )}\r\n      </Dialog>\r\n\r\n      {/* Registered Users Dialog */}\r\n      <Dialog\r\n        open={showDialog}\r\n        onClose={() => setShowDialog(false)}\r\n        maxWidth=\"md\"\r\n        fullWidth\r\n      >\r\n        <DialogTitle>Registered Users</DialogTitle>\r\n        <DialogContent>\r\n          <ul>\r\n            {registeredUsers.map(user => (\r\n              <li key={user.id}>{user.name} ({user.email})</li>\r\n            ))}\r\n          </ul>\r\n        </DialogContent>\r\n      </Dialog>\r\n\r\n      {showFriendlyMatch && <FriendlyMatchPage />}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default EventPage;\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball-frontend/src/components/event/EventPage.jsx b/pickleball-frontend/src/components/event/EventPage.jsx
--- a/pickleball-frontend/src/components/event/EventPage.jsx	(revision 97abd609899a67b781b8ace8e91358a782fc5acd)
+++ b/pickleball-frontend/src/components/event/EventPage.jsx	(date 1753732051971)
@@ -24,6 +24,13 @@
   Paper,
   CircularProgress,
   Alert,
+  Pagination,
+  TextField,
+  FormControl,
+  InputLabel,
+  Select,
+  MenuItem,
+  FormHelperText,
   useTheme,
   alpha
 } from '@mui/material';
@@ -57,6 +64,25 @@
   const [registeredUsers, setRegisteredUsers] = useState([]);
   const [showDialog, setShowDialog] = useState(false);
   const [showFriendlyMatch, setShowFriendlyMatch] = useState(false);
+  const [page, setPage] = useState(1); // MUI 分頁從 1 開始
+  const [totalPages, setTotalPages] = useState(1);
+  const [venues, setVenues] = useState([]); // 新增 venues 狀態
+  const [venueMaxCapacity, setVenueMaxCapacity] = useState(0);
+  const [formData, setFormData] = useState({
+    title: '',
+    eventType: '',
+    date: '',
+    time: '',
+    endTime: '',
+    capacity: 1,
+    location: '',
+    price: 0,
+    description: '',
+    eligibility: '',
+    tags: [],
+    schedule: [],
+    venue: null,
+  });
 
   const { currentUser } = useAuth();
   const isEventOrganizer = currentUser?.role === 'EVENTORGANIZER' || currentUser?.role === 'EventOrganizer' || currentUser?.userType === 'EventOrganizer';
@@ -65,12 +91,13 @@
   const theme = useTheme();
 
 
-  const fetchEvents = async () => {
+  const fetchEvents = async (pageNum = 1) => {
     setLoading(true);
     setError(null);
     try {
-      const eventList = await EventService.getUpcomingEvents();
+      const eventList = await EventService.getUpcomingEvents(pageNum - 1, 9); // 假設每頁 9 筆
       setEvents(eventList.content || eventList);
+      setTotalPages(eventList.totalPages || 1);
     } catch (err) {
       setError('Failed to load events.');
     } finally {
@@ -78,9 +105,19 @@
     }
   };
 
+  const fetchVenues = async () => {
+    try {
+      const res = await api.get('/api/venues');
+      setVenues(res.data);
+    } catch (err) {
+      console.error('Failed to fetch venues:', err);
+    }
+  };
+
   useEffect(() => {
     // Always fetch events on mount or path change
-    fetchEvents();
+    fetchEvents(page);
+    fetchVenues(); // 在 mount 時也 fetch venues
 
     // If coming back from edit and refresh flag is set, fetch again
     if (location.state?.refresh) {
@@ -88,7 +125,7 @@
       // Clear the state so it doesn't refetch every time
       window.history.replaceState({}, document.title);
     }
-  }, [location.pathname]); // location from react-router
+  }, [location.pathname, page]); // location from react-router
 
   // Update handleEventClick to fetch event details from backend
   const handleEventClick = async (event) => {
@@ -194,6 +231,7 @@
       image: event.imageUrl || 'https://images.unsplash.com/photo-1540575467063-178a50c2df87?w=400&h=200&fit=crop',
       organizer: event.organizerName || 'Organizer',
       tags: event.tags || [],
+      venue: event.venue, // 保留 venue 欄位
     };
   };
 
@@ -363,7 +401,9 @@
                   <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>
                     <LocationOn sx={{ mr: 1, fontSize: 16 }} />
                     <Typography variant="body2">
-                      {event.location}
+                      {typeof event.venue === 'object'
+                        ? event.venue?.name
+                        : (venues?.find(v => v.id === event.venue)?.name || 'N/A')}
                     </Typography>
                   </Box>
 
@@ -380,8 +420,8 @@
                       {event.registered}/{event.capacity} registered
                     </Typography>
                     <Chip
-                      label={availability.text}
-                      color={availability.color}
+                      label={event.registered >= event.capacity ? 'Fully Booked' : availability.text}
+                      color={event.registered >= event.capacity ? 'error' : availability.color}
                       size="small"
                       sx={{ ml: 1 }}
                     />
@@ -406,6 +446,19 @@
         })}
       </Grid>
 
+      {totalPages > 1 && (
+        <Box sx={{ display: 'flex', justifyContent: 'center', mt: 4 }}>
+          <Pagination
+            count={totalPages}
+            page={page}
+            onChange={(e, value) => setPage(value)}
+            color="primary"
+            shape="rounded"
+            size="large"
+          />
+        </Box>
+      )}
+
       {/* Event Detail Dialog */}
       <Dialog
         open={!!selectedEvent || detailLoading}
@@ -471,8 +524,16 @@
                     <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>
                       <LocationOn sx={{ mr: 1, fontSize: 20 }} />
                       <Box>
-                        <Typography variant="body2" color="text.secondary">Location</Typography>
-                        <Typography variant="body1">{selectedEvent.location}</Typography>
+                        <Typography variant="body2" color="text.secondary">Venue</Typography>
+                        <Typography variant="body1">{selectedEvent.venue?.name}</Typography>
+                        {/* 新增 State */}
+                        <Typography variant="body2" color="text.secondary">
+                          State: {selectedEvent.venueState || 'N/A'}
+                        </Typography>
+                        {/* 新增 Location */}
+                        <Typography variant="body2" color="text.secondary">
+                          Location: {selectedEvent.venueLocation || 'N/A'}
+                        </Typography>
                       </Box>
                     </Box>
 
@@ -481,20 +542,14 @@
                       <Box>
                         <Typography variant="body2" color="text.secondary">Price</Typography>
                         <Typography variant="body1">
-                          Free
+                          {selectedEvent.feeAmount > 0
+                            ? `$${selectedEvent.feeAmount}`
+                            : selectedEvent.price > 0
+                              ? `$${selectedEvent.price}`
+                              : 'Free'}
                         </Typography>
                       </Box>
                     </Box>
-
-                    {selectedEvent.skillLevel && (
-                      <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>
-                        <People sx={{ mr: 1, fontSize: 20 }} />
-                        <Box>
-                          <Typography variant="body2" color="text.secondary">Skill Level</Typography>
-                          <Typography variant="body1">{selectedEvent.skillLevel}</Typography>
-                        </Box>
-                      </Box>
-                    )}
 
                     {selectedEvent.eligibility && (
                       <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>
@@ -544,7 +599,7 @@
                     {selectedEvent.timeUntilEvent && (
                       <Box sx={{ mt: 2 }}>
                         <Chip
-                          label={selectedEvent.timeUntilEvent}
+                          label={`Event starts in ${selectedEvent.timeUntilEvent}`}
                           color={selectedEvent.isUpcoming ? 'primary' : 'default'}
                         />
                       </Box>
@@ -601,6 +656,11 @@
                       : 'Register Now'}
                 </Button>
               )}
+              {selectedEvent.currentParticipants >= selectedEvent.capacity && (
+                <Alert severity="warning" sx={{ mt: 2 }}>
+                  This event is fully booked and cannot accept more registrations.
+                </Alert>
+              )}
               {currentUser?.userType === "EventOrganizer" && (
                 <Button onClick={() => handleViewRegisteredUsers(selectedEvent.id)}>
                   View Registered Users
Index: pickleball-frontend/src/App.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React from 'react';\r\nimport { Routes, Route, Navigate, Outlet } from 'react-router-dom';\r\nimport HomePage from './pages/HomePage';\r\nimport LoginPage from './pages/LoginPage';\r\nimport RegisterPage from './pages/RegisterPage';\r\nimport ProfilePage from './components/profile/ProfilePage';\r\nimport RewardsPage from './components/profile/RewardsPage';\r\nimport FeedbackPage from './components/feedback/FeedbackPage';\r\nimport MyFeedbackPage from './components/feedback/MyFeedbackPage';\r\n\r\nimport AdminLogin from './components/admin/AdminLogin';\r\nimport AdminDashboard from './components/admin/AdminDashboard';\r\nimport MainLayout from './components/layout/MainLayout';\r\nimport UserService from './service/UserService';\r\nimport ForgotPasswordPage from './pages/ForgotPasswordPage';\r\nimport ResetPasswordPage from './pages/ResetPasswordPage';\r\nimport ResetPasswordEmailSent from './pages/ResetPasswordEmailSent';\r\nimport ResetPasswordSuccess from './pages/ResetPasswordSuccess';\r\nimport { AuthProvider, useAuth } from './context/AuthContext';\r\nimport CourtListPage from './components/court/CourtListPage';\r\nimport CourtDetailPage from './components/court/CourtDetailPage'; \r\nimport BookingPage from './components/court/BookingPage'; \r\nimport BookingHistory from './components/court/BookingHistory';\r\nimport BookingConfirmationPage from './components/court/BookingConfirmationPage'; \r\nimport PaymentPage from './components/court/PaymentPage';\r\nimport WalletTopUpPage from './components/profile/WalletTopUpPage';\r\nimport EventPage from './components/event/EventPage';\r\nimport EventCreatePage from './components/event/EventCreatePage';\r\nimport EventEditPage from './components/event/EventEditPage';\r\nimport FriendlyMatchPage from './components/event/FriendlyMatchPage';\r\nimport MessagingPage from './components/messaging/MessagingPage';\r\nimport HelpdeskPage from './components/helpdesk/HelpdeskPage';\r\nimport { SocketProvider } from './context/SocketContext';\r\nimport AdminManageUsers from './components/admin/AdminManageUsers';\r\nimport AdminManageTiers from './components/admin/AdminManageTiers';\r\nimport AdminManageCourts from './components/admin/AdminManageCourts';\r\nimport AdminManageBookings from './components/admin/AdminManageBookings';\r\nimport AdminSettings from './components/admin/AdminSettings';\r\nimport CourtAvailabilityPage from './components/court/CourtAvailabilityPage';\r\nimport ProfileOverview from './components/profile/ProfileOverview';\r\nimport EditProfileForm from './components/profile/EditProfileForm';\r\n\r\nconst ProtectedRoute = ({ children }) => {\r\n  const { authToken } = useAuth();\r\n  return authToken ? children : <Navigate to=\"/login\" replace />;\r\n};\r\n\r\nconst AdminProtectedRoute = ({ children }) => {\r\n  return UserService.isAdminLoggedIn() ? children : <Navigate to=\"/admin/login\" replace />;\r\n};\r\n\r\nfunction AdminDashboardLayout() {\r\n  return <AdminDashboard><Outlet /></AdminDashboard>;\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    <SocketProvider>\r\n      <Routes>\r\n        {/* Public routes */}\r\n        <Route path=\"/login\" element={<LoginPage />} />\r\n        <Route path=\"/register\" element={<RegisterPage />} />\r\n        <Route path=\"/forgot-password\" element={<ForgotPasswordPage />} />\r\n        <Route path=\"/reset-password-email-sent\" element={<ResetPasswordEmailSent />} />\r\n        <Route path=\"/reset-password/:token\" element={<ResetPasswordPage />} />\r\n        <Route path=\"/reset-password-success\" element={<ResetPasswordSuccess />} />\r\n        <Route path=\"/admin/login\" element={<AdminLogin />} />\r\n\r\n        {/* Protected user routes with layout */}\r\n        <Route path=\"/\" element={<MainLayout />}>\r\n          <Route index element={<HomePage />} />\r\n          <Route path=\"home\" element={<HomePage />} />\r\n          <Route path=\"profile\" element={<ProfilePage />}>\r\n            <Route index element={<ProfileOverview />} />\r\n            <Route path=\"my-bookings\" element={<BookingHistory />} />\r\n            <Route path=\"edit-profile\" element={null} />\r\n            <Route path=\"notifications\" element={null} />\r\n            {/* 其它 profile 子页面可继续添加 */}\r\n          </Route>\r\n          <Route path=\"profile/rewards\" element={<RewardsPage />} />\r\n          <Route path=\"profile/my-feedback\" element={<MyFeedbackPage />} />\r\n          <Route path=\"feedback\" element={<FeedbackPage />} />\r\n          <Route path=\"courts\" element={<CourtListPage />} />\r\n          <Route path=\"courts/:id\" element={<CourtDetailPage />} />\r\n          <Route path=\"booking/:courtId\" element={<BookingPage />} />\r\n          <Route path=\"payment\" element={<PaymentPage />} />\r\n          <Route path=\"wallet/topup\" element={<WalletTopUpPage />} />\r\n          <Route path=\"booking/confirmation\" element={<BookingConfirmationPage />} />\r\n          <Route path=\"events\" element={<EventPage />} />\r\n          <Route path=\"events/create\" element={<EventCreatePage />} />\r\n          <Route path=\"events/edit/:eventId\" element={<EventEditPage />} />\r\n          <Route path=\"friendly-match\" element={<FriendlyMatchPage />} />\r\n          <Route path=\"messages\" element={<MessagingPage />} />\r\n          <Route path=\"helpdesk\" element={<HelpdeskPage />} />\r\n          <Route path=\"court-availability\" element={<CourtAvailabilityPage />} />\r\n        </Route>\r\n\r\n        {/* Admin routes with nested structure */}\r\n        <Route path=\"/admin\" element={\r\n          <AdminProtectedRoute>\r\n            <AdminDashboardLayout />\r\n          </AdminProtectedRoute>\r\n        }>\r\n          <Route path=\"dashboard\" element={<div />} /> {/* Dashboard home, content handled in AdminDashboard */}\r\n          <Route path=\"users\" element={<AdminManageUsers />} />\r\n          <Route path=\"tiers\" element={<AdminManageTiers />} />\r\n          <Route path=\"courts\" element={<AdminManageCourts />} />\r\n          <Route path=\"bookings\" element={<AdminManageBookings />} />\r\n          <Route path=\"settings\" element={<AdminSettings />} />\r\n        </Route>\r\n\r\n        {/* 404 fallback */}\r\n        <Route path=\"*\" element={<Navigate to=\"/\" replace />} />\r\n      </Routes>\r\n    </SocketProvider>\r\n  );\r\n}\r\n\r\nexport default App;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball-frontend/src/App.js b/pickleball-frontend/src/App.js
--- a/pickleball-frontend/src/App.js	(revision 97abd609899a67b781b8ace8e91358a782fc5acd)
+++ b/pickleball-frontend/src/App.js	(date 1753765578672)
@@ -28,6 +28,7 @@
 import EventCreatePage from './components/event/EventCreatePage';
 import EventEditPage from './components/event/EventEditPage';
 import FriendlyMatchPage from './components/event/FriendlyMatchPage';
+import FriendlyMatchCreatePage from './components/event/FriendlyMatchCreatePage';
 import MessagingPage from './components/messaging/MessagingPage';
 import HelpdeskPage from './components/helpdesk/HelpdeskPage';
 import { SocketProvider } from './context/SocketContext';
@@ -35,6 +36,12 @@
 import AdminManageTiers from './components/admin/AdminManageTiers';
 import AdminManageCourts from './components/admin/AdminManageCourts';
 import AdminManageBookings from './components/admin/AdminManageBookings';
+import CoachScheduleManagement from './components/coach/CoachScheduleManagement';
+import BrowseClassPage from './components/class/BrowseClassPage';
+import ClassSessionRegisterPage from './components/class/ClassSessionRegisterPage';
+import CoachingDashboard from './components/coach/CoachingDashboard';
+import StudentManagementSystem from './components/coach/StudentManagementSystem';
+import MyClassSessionsPage from './components/profile/MyClassSessionsPage';
 import AdminSettings from './components/admin/AdminSettings';
 import CourtAvailabilityPage from './components/court/CourtAvailabilityPage';
 import ProfileOverview from './components/profile/ProfileOverview';
@@ -53,7 +60,37 @@
   return <AdminDashboard><Outlet /></AdminDashboard>;
 }
 
+function HomeRedirect() {
+  const { currentUser } = useAuth();
+  if (!currentUser) return <HomePage />;
+  if (currentUser.userType === 'Admin' || currentUser.userType === 'ADMIN') {
+    return <Navigate to="/admin/dashboard" replace />;
+  }
+  if (currentUser.userType === 'Coach' || currentUser.userType === 'COACH') {
+    return <Navigate to="/coaching" replace />;
+  }
+  return <HomePage />;
+}
+
 function App() {
+  const { currentUser } = useAuth();
+
+  // Coach 專屬路由：只顯示 CoachScheduleManagement
+  if (currentUser?.userType === 'Coach' || currentUser?.userType === 'COACH') {
+    return (
+      <SocketProvider>
+        <Routes>
+          <Route path="/coaching" element={<CoachingDashboard />} />
+          <Route path="/coaching/schedulemanagement" element={<CoachScheduleManagement />} />
+          <Route path="/coaching/students" element={<StudentManagementSystem />} />
+          <Route path="/messages" element={<MessagingPage />} />
+          <Route path="*" element={<Navigate to="/coaching" replace />} />
+        </Routes>
+      </SocketProvider>
+    );
+  }
+
+  // 其他 user 正常顯示 MainLayout
   return (
     <SocketProvider>
       <Routes>
@@ -70,29 +107,136 @@
         <Route path="/" element={<MainLayout />}>
           <Route index element={<HomePage />} />
           <Route path="home" element={<HomePage />} />
+          
+          {/* Profile routes */}
           <Route path="profile" element={<ProfilePage />}>
             <Route index element={<ProfileOverview />} />
-            <Route path="my-bookings" element={<BookingHistory />} />
-            <Route path="edit-profile" element={null} />
-            <Route path="notifications" element={null} />
-            {/* 其它 profile 子页面可继续添加 */}
+            <Route path="rewards" element={
+              <ProtectedRoute>
+                <RewardsPage />
+              </ProtectedRoute>
+            } />
+            <Route path="my-bookings" element={
+              <ProtectedRoute>
+                <BookingHistory />
+              </ProtectedRoute>
+            } />
+            <Route path="my-feedback" element={
+              <ProtectedRoute>
+                <MyFeedbackPage />
+              </ProtectedRoute>
+            } />
+            <Route path="my-class-sessions" element={
+              <ProtectedRoute>
+                <MyClassSessionsPage />
+              </ProtectedRoute>
+            } />
           </Route>
-          <Route path="profile/rewards" element={<RewardsPage />} />
-          <Route path="profile/my-feedback" element={<MyFeedbackPage />} />
-          <Route path="feedback" element={<FeedbackPage />} />
-          <Route path="courts" element={<CourtListPage />} />
-          <Route path="courts/:id" element={<CourtDetailPage />} />
-          <Route path="booking/:courtId" element={<BookingPage />} />
-          <Route path="payment" element={<PaymentPage />} />
-          <Route path="wallet/topup" element={<WalletTopUpPage />} />
-          <Route path="booking/confirmation" element={<BookingConfirmationPage />} />
-          <Route path="events" element={<EventPage />} />
-          <Route path="events/create" element={<EventCreatePage />} />
-          <Route path="events/edit/:eventId" element={<EventEditPage />} />
-          <Route path="friendly-match" element={<FriendlyMatchPage />} />
-          <Route path="messages" element={<MessagingPage />} />
-          <Route path="helpdesk" element={<HelpdeskPage />} />
+
+          {/* Feedback form page */}
+          <Route path="feedback" element={
+            <ProtectedRoute>
+              <FeedbackPage />
+            </ProtectedRoute>
+          } />
+
+          {/* Court listing */}
+          <Route path="courts" element={
+            <ProtectedRoute>
+              <CourtListPage />
+            </ProtectedRoute>
+          } />
+
+          {/* Court details */}
+          <Route path="courts/:id" element={
+            <ProtectedRoute>
+              <CourtDetailPage />
+            </ProtectedRoute>
+          } />
+
+          {/* Booking flow */}
+          <Route path="booking/:courtId" element={
+            <ProtectedRoute>
+              <BookingPage />
+            </ProtectedRoute>
+          } />
+
+          {/* Payment page */}
+          <Route path="payment" element={
+            <ProtectedRoute>
+              <PaymentPage />
+            </ProtectedRoute>
+          } />
+
+          {/* Booking confirmation page */}
+          <Route path="booking/confirmation" element={
+            <ProtectedRoute>
+              <BookingConfirmationPage />
+            </ProtectedRoute>
+          } />
+
+          {/* Wallet top-up page */}
+          <Route path="wallet/topup" element={
+            <ProtectedRoute>
+              <WalletTopUpPage />
+            </ProtectedRoute>
+          } />
+
+          {/* Event listing */}
+          <Route path="events" element={
+            <ProtectedRoute>
+              <EventPage />
+            </ProtectedRoute>
+          } />
+
+          {/* Event creation */}
+          <Route path="events/create" element={
+            <ProtectedRoute>
+              <EventCreatePage />
+            </ProtectedRoute>
+          } />
+
+          {/* Event editing */}
+          <Route path="events/edit/:eventId" element={
+            <ProtectedRoute>
+              <EventEditPage />
+            </ProtectedRoute>
+          } />
+
+          {/* Friendly Match page */}
+          <Route path="friendly-matches" element={
+            <ProtectedRoute>
+              <FriendlyMatchPage />
+            </ProtectedRoute>
+          } />
+
+          {/* Friendly Match create page */}
+          <Route path="friendly-matches/create" element={
+            <ProtectedRoute>
+              <FriendlyMatchCreatePage />
+            </ProtectedRoute>
+          } />
+
+          {/* Messaging page */}
+          <Route path="messages" element={
+            <ProtectedRoute>
+              <MessagingPage />
+            </ProtectedRoute>
+          } />
+
+          {/* Helpdesk page */}
+          <Route path="helpdesk" element={
+            <ProtectedRoute>
+              <HelpdeskPage />
+            </ProtectedRoute>
+          } />
+
           <Route path="court-availability" element={<CourtAvailabilityPage />} />
+
+          {/* User-side: Browse available coaching sessions */}
+          <Route path="coaching/browse" element={<BrowseClassPage />} />
+          <Route path="class/:id" element={<ClassSessionRegisterPage />} />
+          <Route path="class/:id/register" element={<ClassSessionRegisterPage />} />
         </Route>
 
         {/* Admin routes with nested structure */}
Index: pickleball-frontend/src/components/court/BookingPage.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Container,\r\n  Grid,\r\n  Card,\r\n  CardContent,\r\n  Typography,\r\n  Button,\r\n  Box,\r\n  CircularProgress,\r\n  Divider,\r\n  Stack,\r\n  IconButton,\r\n  TextField,\r\n  Snackbar,\r\n  MenuItem,\r\n  Alert\r\n} from '@mui/material';\r\nimport {\r\n  ArrowBack as BackIcon,\r\n  CalendarToday as CalendarIcon,\r\n  ChevronLeft,\r\n  ChevronRight,\r\n  AccessTime\r\n} from '@mui/icons-material';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport { formatTime } from '../../components/court/DateUtils';\r\nimport CourtService from '../../service/CourtService';\r\nimport { getAllSlotsForCourt } from '../../service/SlotService';\r\nimport BookingService from '../../service/BookingService';\r\nimport dayjs from 'dayjs';\r\nimport ThemedCard from '../common/ThemedCard';\r\n\r\nconst PADDLE_PRICE = 5; // 每个 paddle 租金\r\nconst BALL_SET_PRICE = 12; // 一组 ball set 售价\r\n\r\nconst BookingPage = () => {\r\n  const { courtId } = useParams();\r\n  const navigate = useNavigate();\r\n  const [court, setCourt] = useState(null);\r\n  const [slots, setSlots] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [selectedDate, setSelectedDate] = useState(dayjs().date(24));\r\n  const [availableDates, setAvailableDates] = useState([]);\r\n  const [availableSlots, setAvailableSlots] = useState([]);\r\n  const [selectedSlots, setSelectedSlots] = useState([]);\r\n  const [bookingInProgress, setBookingInProgress] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [snackbarOpen, setSnackbarOpen] = useState(false);\r\n  const [activeTab, setActiveTab] = useState('Today');\r\n  const [currentMonth, setCurrentMonth] = useState(dayjs().format('MMMM YYYY'));\r\n  const [numPlayers, setNumPlayers] = useState(2);\r\n  const [numPaddles, setNumPaddles] = useState(0);\r\n  const [buyBallSet, setBuyBallSet] = useState(false);\r\n  const [purpose, setPurpose] = useState('Recreational');\r\n\r\n  // 日历数据结构\r\n  const daysOfWeek = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\n  const tabs = ['Today', 'Tomorrow', 'This Week', 'Custom Date'];\r\n\r\n  // 生成日历数据\r\n  const generateCalendar = () => {\r\n    const startOfMonth = dayjs().startOf('month');\r\n    const endOfMonth = dayjs().endOf('month');\r\n    const startDate = startOfMonth.startOf('week');\r\n    const endDate = endOfMonth.endOf('week');\r\n\r\n    const calendar = [];\r\n    let week = [];\r\n    let current = startDate;\r\n\r\n    while (current.isBefore(endDate) || current.isSame(endDate, 'day')) {\r\n      if (week.length === 7) {\r\n        calendar.push(week);\r\n        week = [];\r\n      }\r\n\r\n      week.push(current.month() === dayjs().month() ? current.date() : null);\r\n      current = current.add(1, 'day');\r\n    }\r\n\r\n    if (week.length > 0) {\r\n      calendar.push(week);\r\n    }\r\n\r\n    return calendar;\r\n  };\r\n\r\n  const calendar = generateCalendar();\r\n\r\n  // 检查日期是否可用\r\n  const isDateAvailable = (date) => {\r\n    if (!date) return false;\r\n    const dateStr = dayjs().date(date).format('YYYY-MM-DD');\r\n    return availableDates.includes(dateStr);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        setLoading(true);\r\n        const courtData = await CourtService.getCourtById(courtId);\r\n        setCourt(courtData);\r\n\r\n        const slotsData = await getAllSlotsForCourt(courtId);\r\n        setSlots(slotsData);\r\n\r\n        const dates = [...new Set(slotsData.map(slot => slot.date))];\r\n        setAvailableDates(dates);\r\n      } catch (error) {\r\n        console.error('Failed to fetch booking data:', error);\r\n        setError('Failed to load court details');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [courtId]);\r\n\r\n  useEffect(() => {\r\n    if (selectedDate) {\r\n      let filtered = slots.filter(slot => slot.date === selectedDate.format('YYYY-MM-DD'));\r\n\r\n      if (selectedDate.isSame(dayjs(), 'day')) {\r\n        const nowPlus2h = dayjs().add(2, 'hour');\r\n        filtered = filtered.filter(slot => {\r\n          const slotDateTime = dayjs(`${slot.date} ${slot.startTime}`, 'YYYY-MM-DD HH:mm');\r\n          return slotDateTime.isAfter(nowPlus2h);\r\n        });\r\n      }\r\n\r\n      setAvailableSlots(filtered);\r\n      setSelectedSlots([]);\r\n    }\r\n  }, [selectedDate, slots]);\r\n\r\n  const handleSlotSelect = (slot) => {\r\n    if (selectedSlots.some(s => s.id === slot.id)) {\r\n      setSelectedSlots(selectedSlots.filter(s => s.id !== slot.id));\r\n      return;\r\n    }\r\n\r\n    if (selectedSlots.length > 0 && slot.date !== selectedSlots[0].date) return;\r\n\r\n    const allSlots = [...selectedSlots, slot].sort((a, b) => a.startTime.localeCompare(b.startTime));\r\n    let isConsecutive = true;\r\n\r\n    for (let i = 1; i < allSlots.length; i++) {\r\n      if (allSlots[i].startTime !== allSlots[i - 1].endTime) {\r\n        isConsecutive = false;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (!isConsecutive) return;\r\n    setSelectedSlots(allSlots);\r\n  };\r\n\r\n  const handleBookNow = () => {\r\n    if (!selectedSlots.length) return;\r\n    const bookingDetails = {\r\n      slotIds: selectedSlots.map(s => s.id),\r\n      courtName: court.name,\r\n      courtLocation: court.location,\r\n      venueName: court.venue?.name,\r\n      venueLocation: court.venue?.location,\r\n      date: selectedDate.format('YYYY-MM-DD'),\r\n      startTime: selectedSlots[0].startTime,\r\n      endTime: selectedSlots[selectedSlots.length - 1].endTime,\r\n      durationHours: selectedSlots.length,\r\n      price: total, // 修正：传递总价（含paddle/ball set）\r\n      purpose: purpose,\r\n      numberOfPlayers: numPlayers, // 传递人数\r\n      numPaddles, // 传递paddle数量\r\n      buyBallSet // 传递ball set选择\r\n    };\r\n    navigate('/payment', { state: { bookingDetails } });\r\n  };\r\n\r\n  const calculatePrice = () => {\r\n    if (!selectedSlots.length || !court) return 0;\r\n\r\n    const startTime = selectedSlots[0].startTime; // Use string directly\r\n    const peakStart = court.peakStartTime || '16:00';\r\n    const peakEnd = court.peakEndTime || '20:00';\r\n\r\n    const isPeak = startTime >= peakStart && startTime <= peakEnd;\r\n\r\n    return selectedSlots.length * (isPeak ? (court.peakHourlyPrice || 80) : (court.offPeakHourlyPrice || 50));\r\n  };\r\n\r\n  const totalDuration = selectedSlots.length;\r\n  const totalPrice = totalDuration * (selectedSlots[0] && court ? (() => {\r\n    const startTime = selectedSlots[0].startTime; // Use string directly\r\n    const peakStart = court.peakStartTime || '16:00';\r\n    const peakEnd = court.peakEndTime || '20:00';\r\n    const isPeak = startTime >= peakStart && startTime <= peakEnd;\r\n    return isPeak ? (court.peakHourlyPrice || 80) : (court.offPeakHourlyPrice || 50);\r\n  })() : 0);\r\n\r\n  // 计算总价\r\n  const total =\r\n    totalPrice +\r\n    numPaddles * PADDLE_PRICE +\r\n    (buyBallSet ? BALL_SET_PRICE : 0);\r\n\r\n  const renderBookingSummary = () => {\r\n    if (!court) return null;\r\n    return (\r\n      <ThemedCard sx={{\r\n        position: 'sticky',\r\n        top: 20,\r\n        borderRadius: 3,\r\n        boxShadow: 3,\r\n        mb: 4,\r\n        background: 'linear-gradient(135deg, #f8f9ff, #ffffff)',\r\n        border: '1px solid rgba(0, 0, 0, 0.05)'\r\n      }}>\r\n        <CardContent>\r\n          <Typography variant=\"h6\" fontWeight=\"bold\" gutterBottom>\r\n            Booking Summary\r\n          </Typography>\r\n          <Divider sx={{ mb: 2 }} />\r\n\r\n          {/* 场地和场馆 */}\r\n          <Box sx={{ mb: 2 }}>\r\n            <Typography variant=\"subtitle2\" color=\"text.secondary\">Court</Typography>\r\n            <Typography variant=\"body1\" fontWeight=\"bold\">{court.name}</Typography>\r\n            <Typography variant=\"body2\" color=\"text.secondary\">\r\n              {court.venue?.name || court.location}{court.venue?.location ? `，${court.venue.location}` : ''}\r\n            </Typography>\r\n          </Box>\r\n\r\n          {/* 日期和时间 */}\r\n          {selectedDate && (\r\n            <Box sx={{ mb: 2 }}>\r\n              <Typography variant=\"subtitle2\" color=\"text.secondary\">Date</Typography>\r\n              <Typography variant=\"body1\">{selectedDate.format('dddd, MMMM D, YYYY')}</Typography>\r\n              {selectedSlots.length > 0 && (\r\n                <>\r\n                  <Typography variant=\"subtitle2\" color=\"text.secondary\" sx={{ mt: 1 }}>Time</Typography>\r\n                  <Typography variant=\"body1\">\r\n                    {formatTime(selectedSlots[0].startTime)} - {formatTime(selectedSlots[selectedSlots.length - 1].endTime)}\r\n                    <span style={{ marginLeft: 8, fontSize: 13, color: '#888' }}>({totalDuration}h)</span>\r\n                  </Typography>\r\n                </>\r\n              )}\r\n            </Box>\r\n          )}\r\n\r\n          <Divider sx={{ my: 2 }} />\r\n\r\n          {/* 玩家和装备 */}\r\n          {selectedSlots.length > 0 && (\r\n            <Box sx={{ mb: 2 }}>\r\n              <Grid container spacing={2}>\r\n                {/* Players */}\r\n                <Grid item xs={12} sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\r\n                  <Typography variant=\"subtitle2\" color=\"text.secondary\">Players</Typography>\r\n                  <TextField\r\n                    type=\"number\"\r\n                    size=\"small\"\r\n                    inputProps={{ min: 2, max: 8, style: { textAlign: 'right' } }}\r\n                    value={numPlayers}\r\n                    onChange={e => setNumPlayers(Math.max(2, Math.min(8, Number(e.target.value))))}\r\n                    sx={{ width: 80 }}\r\n                  />\r\n                </Grid>\r\n                {/* Paddles */}\r\n                <Grid item xs={12} sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\r\n                  <Typography variant=\"subtitle2\" color=\"text.secondary\">Paddles</Typography>\r\n                  <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                    <TextField\r\n                      type=\"number\"\r\n                      size=\"small\"\r\n                      inputProps={{ min: 0, max: 8, style: { textAlign: 'right' } }}\r\n                      value={numPaddles}\r\n                      onChange={e => setNumPaddles(Math.max(0, Math.min(8, Number(e.target.value))))}\r\n                      sx={{ width: 80 }}\r\n                    />\r\n                    <Typography variant=\"caption\" sx={{ ml: 1 }}>\r\n                      RM{PADDLE_PRICE} each\r\n                    </Typography>\r\n                  </Box>\r\n                </Grid>\r\n                {/* Ball Set */}\r\n                <Grid item xs={12} sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\r\n                  <Typography variant=\"subtitle2\" color=\"text.secondary\">Ball Set</Typography>\r\n                  <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      checked={buyBallSet}\r\n                      onChange={e => setBuyBallSet(e.target.checked)}\r\n                      style={{ transform: 'scale(1.3)' }}\r\n                      aria-label=\"Buy Ball Set\"\r\n                    />\r\n                    <Typography variant=\"caption\" sx={{ ml: 1 }}>\r\n                      {buyBallSet ? `Yes (RM${BALL_SET_PRICE})` : 'No'}\r\n                    </Typography>\r\n                  </Box>\r\n                </Grid>\r\n                {/* Purpose */}\r\n                <Grid item xs={12} sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\r\n                  <Typography variant=\"subtitle2\" color=\"text.secondary\">Purpose</Typography>\r\n                  <TextField\r\n                    select\r\n                    size=\"small\"\r\n                    value={purpose}\r\n                    onChange={e => setPurpose(e.target.value)}\r\n                    sx={{ width: 140 }}\r\n                  >\r\n                    <MenuItem value=\"Recreational\">Recreational</MenuItem>\r\n                    <MenuItem value=\"Training\">Training</MenuItem>\r\n                    <MenuItem value=\"Competition\">Competition</MenuItem>\r\n                    <MenuItem value=\"Social\">Social</MenuItem>\r\n                    <MenuItem value=\"Practice\">Practice</MenuItem>\r\n                    <MenuItem value=\"Tournament\">Tournament</MenuItem>\r\n                  </TextField>\r\n                </Grid>\r\n              </Grid>\r\n            </Box>\r\n          )}\r\n\r\n        {/* 价格详情 */}\r\n        {selectedSlots.length > 0 && (\r\n          <Box sx={{ mb: 2 }}>\r\n            <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 1 }}>\r\n              Pricing Details:\r\n            </Typography>\r\n            <Typography variant=\"body2\" sx={{ mb: 0.5 }}>\r\n              Off-peak: RM{court.offPeakHourlyPrice || 50}/hour\r\n            </Typography>\r\n            <Typography variant=\"body2\" sx={{ mb: 0.5 }}>\r\n              Peak: RM{court.peakHourlyPrice || 80}/hour\r\n            </Typography>\r\n            <Typography variant=\"body2\" sx={{ mb: 0.5 }}>\r\n              Paddles: RM{PADDLE_PRICE} each\r\n            </Typography>\r\n            <Typography variant=\"body2\" sx={{ mb: 0.5 }}>\r\n              Ball Set: RM{BALL_SET_PRICE} (set of 4)\r\n            </Typography>\r\n          </Box>\r\n        )}\r\n\r\n        {/* 总价 */}\r\n        {selectedSlots.length > 0 && (\r\n          <>\r\n            <Divider sx={{ my: 2 }} />\r\n            <Grid container>\r\n              <Grid item xs={7}>\r\n                <Typography variant=\"body1\" fontWeight=\"bold\">\r\n                  Total Amount:\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item xs={5} textAlign=\"right\">\r\n                <Typography variant=\"body1\" fontWeight=\"bold\" color=\"#2e7d32\">\r\n                  RM{total.toFixed(2)}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n            <Box sx={{ mt: 3, textAlign: 'center' }}>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                size=\"large\"\r\n                disabled={!selectedSlots.length || !court}\r\n                onClick={handleBookNow}\r\n                sx={{ px: 6, py: 1.5, fontWeight: 600, fontSize: '1.1rem', borderRadius: 2 }}\r\n              >\r\n                Book Now\r\n              </Button>\r\n            </Box>\r\n          </>\r\n        )}\r\n\r\n        {!selectedSlots.length && selectedDate && (\r\n          <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mt: 2 }}>\r\n            Select a time slot to complete your booking\r\n          </Typography>\r\n        )}\r\n\r\n        {!selectedDate && (\r\n          <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mt: 2 }}>\r\n            Select a date to see available time slots\r\n          </Typography>\r\n        )}\r\n      </CardContent>\r\n      </ThemedCard >\r\n    );\r\n  };\r\n\r\nif (loading || !court) {\r\n  return (\r\n    <Container style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '80vh' }}>\r\n      <CircularProgress size={60} />\r\n    </Container>\r\n  );\r\n}\r\n\r\nif (error) {\r\n  return (\r\n    <Container sx={{ py: 4, textAlign: 'center' }}>\r\n      <Typography variant=\"h5\" color=\"error\" gutterBottom>\r\n        {error}\r\n      </Typography>\r\n      <Button\r\n        variant=\"contained\"\r\n        onClick={() => window.location.reload()}\r\n        sx={{ mt: 2 }}\r\n      >\r\n        Retry\r\n      </Button>\r\n      <Button\r\n        variant=\"outlined\"\r\n        onClick={() => navigate('/courts')}\r\n        sx={{ mt: 2, ml: 2 }}\r\n      >\r\n        Back to Courts\r\n      </Button>\r\n    </Container>\r\n  );\r\n}\r\n\r\nreturn (\r\n  <Container maxWidth=\"lg\" sx={{ py: 4 }}>\r\n    <Button\r\n      variant=\"text\"\r\n      onClick={() => navigate(`/courts/${courtId}`)}\r\n      sx={{\r\n        mb: 3,\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        textTransform: 'none',\r\n        fontWeight: 500,\r\n        color: '#1976d2',\r\n        '&:hover': {\r\n          backgroundColor: 'transparent',\r\n          textDecoration: 'underline'\r\n        }\r\n      }}\r\n      startIcon={<BackIcon />}\r\n    >\r\n      Back to Court\r\n    </Button>\r\n\r\n    <Typography variant=\"h4\" sx={{ fontWeight: 'bold', mb: 1, color: '#333' }}>\r\n      Book Court: {court.name}\r\n    </Typography>\r\n\r\n    <Typography variant=\"body1\" sx={{ mb: 4, color: '#666' }}>\r\n      {court.location}\r\n    </Typography>\r\n\r\n    <Grid container spacing={4}>\r\n      <Grid item xs={12} md={8}>\r\n        <ThemedCard sx={{\r\n          borderRadius: 3,\r\n          boxShadow: '0 4px 20px rgba(0, 0, 0, 0.05)',\r\n          mb: 4,\r\n          background: 'linear-gradient(135deg, #f8f9ff, #ffffff)'\r\n        }}>\r\n          <CardContent sx={{ p: 4 }}>\r\n            {/* 头部 */}\r\n            <Box sx={{ mb: 4 }}>\r\n              <Typography variant=\"h5\" fontWeight=\"bold\" sx={{ mb: 1 }}>\r\n                Book Court\r\n              </Typography>\r\n              <Typography variant=\"body1\" color=\"text.secondary\">\r\n                Reserve a pickleball court for your next game\r\n              </Typography>\r\n            </Box>\r\n\r\n            {/* Tab导航 */}\r\n            <Box sx={{\r\n              display: 'flex',\r\n              gap: 1,\r\n              mb: 4,\r\n              p: 0.5,\r\n              bgcolor: 'rgba(0, 0, 0, 0.03)',\r\n              borderRadius: '12px',\r\n              width: 'fit-content'\r\n            }}>\r\n              {tabs.map((tab) => (\r\n                <Button\r\n                  key={tab}\r\n                  variant={activeTab === tab ? \"contained\" : \"outlined\"}\r\n                  onClick={() => {\r\n                    setActiveTab(tab);\r\n                    switch (tab) {\r\n                      case 'Today':\r\n                        setSelectedDate(dayjs());\r\n                        break;\r\n                      case 'Tomorrow':\r\n                        setSelectedDate(dayjs().add(1, 'day'));\r\n                        break;\r\n                      case 'This Week':\r\n                        setSelectedDate(dayjs().add(7, 'day'));\r\n                        break;\r\n                      case 'Custom Date':\r\n                        // Keep current date for custom selection\r\n                        break;\r\n                    }\r\n                  }}\r\n                  sx={{\r\n                    textTransform: 'none',\r\n                    fontWeight: 600,\r\n                    borderRadius: '8px',\r\n                    px: 3,\r\n                    py: 1,\r\n                    ...(activeTab === tab && {\r\n                      background: 'linear-gradient(90deg, #6a11cb 0%, #2575fc 100%)',\r\n                      color: 'white',\r\n                      boxShadow: '0 4px 8px rgba(37, 117, 252, 0.25)'\r\n                    })\r\n                  }}\r\n                >\r\n                  {tab}\r\n                </Button>\r\n              ))}\r\n            </Box>\r\n\r\n            {/* 日历头部 */}\r\n            <Box sx={{\r\n              display: 'flex',\r\n              justifyContent: 'space-between',\r\n              alignItems: 'center',\r\n              mb: 4\r\n            }}>\r\n              <IconButton\r\n                onClick={() => {\r\n                  const newMonth = dayjs().subtract(1, 'month');\r\n                  setCurrentMonth(newMonth.format('MMMM YYYY'));\r\n                }}\r\n                sx={{\r\n                  p: 1.5,\r\n                  borderRadius: '50%',\r\n                  background: 'rgba(0, 0, 0, 0.03)',\r\n                  '&:hover': {\r\n                    background: 'rgba(0, 0, 0, 0.08)'\r\n                  }\r\n                }}\r\n              >\r\n                <ChevronLeft />\r\n              </IconButton>\r\n\r\n              <Typography variant=\"h6\" fontWeight=\"bold\">\r\n                {currentMonth}\r\n              </Typography>\r\n\r\n              <IconButton\r\n                onClick={() => {\r\n                  const newMonth = dayjs().add(1, 'month');\r\n                  setCurrentMonth(newMonth.format('MMMM YYYY'));\r\n                }}\r\n                sx={{\r\n                  p: 1.5,\r\n                  borderRadius: '50%',\r\n                  background: 'rgba(0, 0, 0, 0.03)',\r\n                  '&:hover': {\r\n                    background: 'rgba(0, 0, 0, 0.08)'\r\n                  }\r\n                }}\r\n              >\r\n                <ChevronRight />\r\n              </IconButton>\r\n            </Box>\r\n\r\n            {/* 日历网格 */}\r\n            <Box sx={{ mb: 4 }}>\r\n              {/* 星期标题 */}\r\n              <Grid container spacing={0} sx={{ mb: 2 }}>\r\n                {daysOfWeek.map((day) => (\r\n                  <Grid item xs key={day}>\r\n                    <Typography\r\n                      variant=\"body2\"\r\n                      sx={{\r\n                        textAlign: 'center',\r\n                        fontWeight: 600,\r\n                        color: 'text.secondary',\r\n                        py: 1\r\n                      }}\r\n                    >\r\n                      {day}\r\n                    </Typography>\r\n                  </Grid>\r\n                ))}\r\n              </Grid>\r\n\r\n              {/* 日期网格 */}\r\n              <Grid container spacing={1}>\r\n                {calendar.map((week, weekIndex) => (\r\n                  <React.Fragment key={weekIndex}>\r\n                    {week.map((date, dateIndex) => (\r\n                      <Grid item xs key={`${weekIndex}-${dateIndex}`}>\r\n                        {date ? (\r\n                          <Button\r\n                            fullWidth\r\n                            variant={selectedDate?.date() === date ? \"contained\" : \"outlined\"}\r\n                            onClick={() => {\r\n                              if (isDateAvailable(date)) {\r\n                                const newDate = dayjs().date(date);\r\n                                setSelectedDate(newDate);\r\n                              }\r\n                            }}\r\n                            disabled={!isDateAvailable(date)}\r\n                            sx={{\r\n                              height: 56,\r\n                              minWidth: 0,\r\n                              borderRadius: '12px',\r\n                              fontWeight: 600,\r\n                              ...(selectedDate?.date() === date && {\r\n                                background: 'linear-gradient(90deg, #6a11cb 0%, #2575fc 100%)',\r\n                                color: 'white',\r\n                                boxShadow: '0 4px 12px rgba(37, 117, 252, 0.3)'\r\n                              }),\r\n                              ...(isDateAvailable(date) ? {} : {\r\n                                border: '2px solid #f44336',\r\n                                color: '#f44336',\r\n                                opacity: 0.7,\r\n                                '&:hover': {\r\n                                  border: '2px solid #f44336',\r\n                                  backgroundColor: 'rgba(244, 67, 54, 0.1)'\r\n                                }\r\n                              })\r\n                            }}\r\n                          >\r\n                            {date}\r\n                          </Button>\r\n                        ) : (\r\n                          <Box sx={{ height: 56 }} />\r\n                        )}\r\n                      </Grid>\r\n                    ))}\r\n                  </React.Fragment>\r\n                ))}\r\n              </Grid>\r\n            </Box>\r\n\r\n            {/* 时间槽位 */}\r\n            <ThemedCard sx={{\r\n              borderRadius: 3,\r\n              background: 'white',\r\n              boxShadow: '0 4px 12px rgba(0, 0, 0, 0.05)'\r\n            }}>\r\n              <CardContent>\r\n                <Box sx={{\r\n                  display: 'flex',\r\n                  alignItems: 'center',\r\n                  mb: 3\r\n                }}>\r\n                  <AccessTime sx={{\r\n                    color: 'text.secondary',\r\n                    mr: 1.5\r\n                  }} />\r\n                  <Typography variant=\"h6\" fontWeight=\"bold\">\r\n                    Available Time Slots - {selectedDate?.format('dddd, MMMM D, YYYY')}\r\n                  </Typography>\r\n                </Box>\r\n\r\n                <Grid container spacing={1.5}>\r\n                  {availableSlots.length > 0 ? (\r\n                    availableSlots.map((slot) => (\r\n                      <Grid item xs={6} sm={4} md={3} key={slot.id}>\r\n                        <Button\r\n                          fullWidth\r\n                          variant={\r\n                            selectedSlots.some(s => s.id === slot.id)\r\n                              ? \"contained\"\r\n                              : slot.status === 'BOOKED'\r\n                                ? \"outlined\"\r\n                                : \"outlined\"\r\n                          }\r\n                          onClick={() => handleSlotSelect(slot)}\r\n                          disabled={slot.status === 'BOOKED'}\r\n                          sx={{\r\n                            py: 1.5,\r\n                            borderRadius: '12px',\r\n                            fontWeight: 600,\r\n                            ...(selectedSlots.some(s => s.id === slot.id) ? {\r\n                              background: 'linear-gradient(90deg, #6a11cb 0%, #2575fc 100%)',\r\n                              color: 'white',\r\n                              boxShadow: '0 4px 8px rgba(37, 117, 252, 0.3)'\r\n                            } : {}),\r\n                            ...(slot.status === 'BOOKED' ? {\r\n                              borderColor: '#e53935',\r\n                              color: '#e53935',\r\n                              opacity: 0.7\r\n                            } : {})\r\n                          }}\r\n                        >\r\n                          {formatTime(slot.startTime)}\r\n                        </Button>\r\n                      </Grid>\r\n                    ))\r\n                  ) : (\r\n                    <Grid item xs={12}>\r\n                      <Box sx={{\r\n                        textAlign: 'center',\r\n                        py: 4,\r\n                        color: 'text.secondary'\r\n                      }}>\r\n                        <AccessTime sx={{ fontSize: '3rem', mb: 2, opacity: 0.5 }} />\r\n                        <Typography variant=\"body1\">\r\n                          No available time slots for this date\r\n                        </Typography>\r\n                      </Box>\r\n                    </Grid>\r\n                  )}\r\n                </Grid>\r\n              </CardContent>\r\n            </ThemedCard>\r\n\r\n            {/* 价格信息 */}\r\n            {court && (\r\n              <Box sx={{\r\n                mt: 3,\r\n                p: 2,\r\n                bgcolor: 'rgba(46, 125, 50, 0.1)',\r\n                borderRadius: '12px',\r\n                border: '1px solid rgba(46, 125, 50, 0.2)',\r\n                display: 'flex',\r\n                alignItems: 'center'\r\n              }}>\r\n                <Typography variant=\"body2\" fontWeight=\"600\" color=\"success.main\">\r\n                  RM{court.offPeakHourlyPrice || 50}-{court.peakHourlyPrice || 80}/hour\r\n                </Typography>\r\n              </Box>\r\n            )}\r\n          </CardContent>\r\n        </ThemedCard>\r\n      </Grid>\r\n\r\n      <Grid item xs={12} md={4}>\r\n        {renderBookingSummary()}\r\n      </Grid>\r\n    </Grid>\r\n\r\n    <Snackbar\r\n      open={snackbarOpen}\r\n      autoHideDuration={6000}\r\n      onClose={() => setSnackbarOpen(false)}\r\n    >\r\n      <Alert onClose={() => setSnackbarOpen(false)} severity=\"error\" sx={{ width: '100%' }}>\r\n        {error}\r\n      </Alert>\r\n    </Snackbar>\r\n  </Container>\r\n);\r\n};\r\n\r\nexport default BookingPage;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball-frontend/src/components/court/BookingPage.jsx b/pickleball-frontend/src/components/court/BookingPage.jsx
--- a/pickleball-frontend/src/components/court/BookingPage.jsx	(revision 97abd609899a67b781b8ace8e91358a782fc5acd)
+++ b/pickleball-frontend/src/components/court/BookingPage.jsx	(date 1753731985461)
@@ -26,7 +26,7 @@
 import { useParams, useNavigate } from 'react-router-dom';
 import { formatTime } from '../../components/court/DateUtils';
 import CourtService from '../../service/CourtService';
-import { getAllSlotsForCourt } from '../../service/SlotService';
+import { getAvailableSlotsForCourt } from '../../service/SlotService';
 import BookingService from '../../service/BookingService';
 import dayjs from 'dayjs';
 import ThemedCard from '../common/ThemedCard';
@@ -102,7 +102,8 @@
         const courtData = await CourtService.getCourtById(courtId);
         setCourt(courtData);
 
-        const slotsData = await getAllSlotsForCourt(courtId);
+        // 只拿可用 slot
+        const slotsData = await getAvailableSlotsForCourt(courtId);
         setSlots(slotsData);
 
         const dates = [...new Set(slotsData.map(slot => slot.date))];
@@ -205,6 +206,44 @@
     numPaddles * PADDLE_PRICE +
     (buyBallSet ? BALL_SET_PRICE : 0);
 
+  // 動態生成所有標準時段（根據 slots 資料自動推算範圍）
+  const getAllTimeSlots = () => {
+    if (!slots.length) return [];
+    // 找到一天內所有 slot 的最早和最晚時間
+    const times = slots
+      .filter(slot => slot.date === selectedDate.format('YYYY-MM-DD'))
+      .map(slot => [slot.startTime, slot.endTime])
+      .flat();
+    if (!times.length) return [];
+    const sorted = [...new Set(times)].sort();
+    // 以 1 小時為單位生成所有時段
+    const allSlots = [];
+    for (let i = 0; i < sorted.length - 1; i++) {
+      allSlots.push({ start: sorted[i], end: sorted[i + 1] });
+    }
+    return allSlots;
+  };
+  const allTimeSlots = getAllTimeSlots();
+  // 取得營業時間範圍，預設 8:00~22:00
+  const getHourRange = () => {
+    let open = 8, close = 22;
+    if (court && court.openingTime && court.closingTime) {
+      open = parseInt(court.openingTime.split(':')[0], 10);
+      close = parseInt(court.closingTime.split(':')[0], 10);
+      if (isNaN(open)) open = 8;
+      if (isNaN(close)) close = 22;
+    }
+    return { open, close };
+  };
+  const { open, close } = getHourRange();
+  const hourSlots = [];
+  for (let h = open; h < close; h++) {
+    const start = (h < 10 ? '0' : '') + h + ':00';
+    const end = (h + 1 < 10 ? '0' : '') + (h + 1) + ':00';
+    hourSlots.push({ start, end });
+  }
+  const availableSlotSet = new Set(availableSlots.map(s => s.startTime + '-' + s.endTime));
+
   const renderBookingSummary = () => {
     if (!court) return null;
     return (
@@ -322,431 +361,434 @@
             </Box>
           )}
 
-        {/* 价格详情 */}
-        {selectedSlots.length > 0 && (
-          <Box sx={{ mb: 2 }}>
-            <Typography variant="body2" color="text.secondary" sx={{ mb: 1 }}>
-              Pricing Details:
-            </Typography>
-            <Typography variant="body2" sx={{ mb: 0.5 }}>
-              Off-peak: RM{court.offPeakHourlyPrice || 50}/hour
-            </Typography>
-            <Typography variant="body2" sx={{ mb: 0.5 }}>
-              Peak: RM{court.peakHourlyPrice || 80}/hour
-            </Typography>
-            <Typography variant="body2" sx={{ mb: 0.5 }}>
-              Paddles: RM{PADDLE_PRICE} each
-            </Typography>
-            <Typography variant="body2" sx={{ mb: 0.5 }}>
-              Ball Set: RM{BALL_SET_PRICE} (set of 4)
-            </Typography>
-          </Box>
-        )}
+          {/* 价格详情 */}
+          {selectedSlots.length > 0 && (
+            <Box sx={{ mb: 2 }}>
+              <Typography variant="body2" color="text.secondary" sx={{ mb: 1 }}>
+                Pricing Details:
+              </Typography>
+              <Typography variant="body2" sx={{ mb: 0.5 }}>
+                Off-peak: RM{court.offPeakHourlyPrice || 50}/hour
+              </Typography>
+              <Typography variant="body2" sx={{ mb: 0.5 }}>
+                Peak: RM{court.peakHourlyPrice || 80}/hour
+              </Typography>
+              <Typography variant="body2" sx={{ mb: 0.5 }}>
+                Paddles: RM{PADDLE_PRICE} each
+              </Typography>
+              <Typography variant="body2" sx={{ mb: 0.5 }}>
+                Ball Set: RM{BALL_SET_PRICE} (set of 4)
+              </Typography>
+            </Box>
+          )}
 
-        {/* 总价 */}
-        {selectedSlots.length > 0 && (
-          <>
-            <Divider sx={{ my: 2 }} />
-            <Grid container>
-              <Grid item xs={7}>
-                <Typography variant="body1" fontWeight="bold">
-                  Total Amount:
-                </Typography>
-              </Grid>
-              <Grid item xs={5} textAlign="right">
-                <Typography variant="body1" fontWeight="bold" color="#2e7d32">
-                  RM{total.toFixed(2)}
-                </Typography>
-              </Grid>
-            </Grid>
-            <Box sx={{ mt: 3, textAlign: 'center' }}>
-              <Button
-                variant="contained"
-                color="primary"
-                size="large"
-                disabled={!selectedSlots.length || !court}
-                onClick={handleBookNow}
-                sx={{ px: 6, py: 1.5, fontWeight: 600, fontSize: '1.1rem', borderRadius: 2 }}
-              >
-                Book Now
-              </Button>
-            </Box>
-          </>
-        )}
+          {/* 总价 */}
+          {selectedSlots.length > 0 && (
+            <>
+              <Divider sx={{ my: 2 }} />
+              <Grid container>
+                <Grid item xs={7}>
+                  <Typography variant="body1" fontWeight="bold">
+                    Total Amount:
+                  </Typography>
+                </Grid>
+                <Grid item xs={5} textAlign="right">
+                  <Typography variant="body1" fontWeight="bold" color="#2e7d32">
+                    RM{total.toFixed(2)}
+                  </Typography>
+                </Grid>
+              </Grid>
+              <Box sx={{ mt: 3, textAlign: 'center' }}>
+                <Button
+                  variant="contained"
+                  color="primary"
+                  size="large"
+                  disabled={!selectedSlots.length || !court}
+                  onClick={handleBookNow}
+                  sx={{ px: 6, py: 1.5, fontWeight: 600, fontSize: '1.1rem', borderRadius: 2 }}
+                >
+                  Book Now
+                </Button>
+              </Box>
+            </>
+          )}
 
-        {!selectedSlots.length && selectedDate && (
-          <Typography variant="body2" color="text.secondary" sx={{ mt: 2 }}>
-            Select a time slot to complete your booking
-          </Typography>
-        )}
+          {!selectedSlots.length && selectedDate && (
+            <Typography variant="body2" color="text.secondary" sx={{ mt: 2 }}>
+              Select a time slot to complete your booking
+            </Typography>
+          )}
 
-        {!selectedDate && (
-          <Typography variant="body2" color="text.secondary" sx={{ mt: 2 }}>
-            Select a date to see available time slots
-          </Typography>
-        )}
-      </CardContent>
+          {!selectedDate && (
+            <Typography variant="body2" color="text.secondary" sx={{ mt: 2 }}>
+              Select a date to see available time slots
+            </Typography>
+          )}
+        </CardContent>
       </ThemedCard >
     );
   };
 
-if (loading || !court) {
-  return (
-    <Container style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '80vh' }}>
-      <CircularProgress size={60} />
-    </Container>
-  );
-}
+  if (loading || !court) {
+    return (
+      <Container style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '80vh' }}>
+        <CircularProgress size={60} />
+      </Container>
+    );
+  }
 
-if (error) {
-  return (
-    <Container sx={{ py: 4, textAlign: 'center' }}>
-      <Typography variant="h5" color="error" gutterBottom>
-        {error}
-      </Typography>
-      <Button
-        variant="contained"
-        onClick={() => window.location.reload()}
-        sx={{ mt: 2 }}
-      >
-        Retry
-      </Button>
-      <Button
-        variant="outlined"
-        onClick={() => navigate('/courts')}
-        sx={{ mt: 2, ml: 2 }}
-      >
-        Back to Courts
-      </Button>
-    </Container>
-  );
-}
+  if (error) {
+    return (
+      <Container sx={{ py: 4, textAlign: 'center' }}>
+        <Typography variant="h5" color="error" gutterBottom>
+          {error}
+        </Typography>
+        <Button
+          variant="contained"
+          onClick={() => window.location.reload()}
+          sx={{ mt: 2 }}
+        >
+          Retry
+        </Button>
+        <Button
+          variant="outlined"
+          onClick={() => navigate('/courts')}
+          sx={{ mt: 2, ml: 2 }}
+        >
+          Back to Courts
+        </Button>
+      </Container>
+    );
+  }
 
-return (
-  <Container maxWidth="lg" sx={{ py: 4 }}>
-    <Button
-      variant="text"
-      onClick={() => navigate(`/courts/${courtId}`)}
-      sx={{
-        mb: 3,
-        display: 'flex',
-        alignItems: 'center',
-        textTransform: 'none',
-        fontWeight: 500,
-        color: '#1976d2',
-        '&:hover': {
-          backgroundColor: 'transparent',
-          textDecoration: 'underline'
-        }
-      }}
-      startIcon={<BackIcon />}
-    >
-      Back to Court
-    </Button>
+  return (
+    <Container maxWidth="lg" sx={{ py: 4 }}>
+      <Button
+        variant="text"
+        onClick={() => navigate(`/courts/${courtId}`)}
+        sx={{
+          mb: 3,
+          display: 'flex',
+          alignItems: 'center',
+          textTransform: 'none',
+          fontWeight: 500,
+          color: '#1976d2',
+          '&:hover': {
+            backgroundColor: 'transparent',
+            textDecoration: 'underline'
+          }
+        }}
+        startIcon={<BackIcon />}
+      >
+        Back to Court
+      </Button>
 
-    <Typography variant="h4" sx={{ fontWeight: 'bold', mb: 1, color: '#333' }}>
-      Book Court: {court.name}
-    </Typography>
+      <Typography variant="h4" sx={{ fontWeight: 'bold', mb: 1, color: '#333' }}>
+        Book Court: {court.name}
+      </Typography>
 
-    <Typography variant="body1" sx={{ mb: 4, color: '#666' }}>
-      {court.location}
-    </Typography>
+      <Typography variant="body1" sx={{ mb: 4, color: '#666' }}>
+        {court.location}
+      </Typography>
 
-    <Grid container spacing={4}>
-      <Grid item xs={12} md={8}>
-        <ThemedCard sx={{
-          borderRadius: 3,
-          boxShadow: '0 4px 20px rgba(0, 0, 0, 0.05)',
-          mb: 4,
-          background: 'linear-gradient(135deg, #f8f9ff, #ffffff)'
-        }}>
-          <CardContent sx={{ p: 4 }}>
-            {/* 头部 */}
-            <Box sx={{ mb: 4 }}>
-              <Typography variant="h5" fontWeight="bold" sx={{ mb: 1 }}>
-                Book Court
-              </Typography>
-              <Typography variant="body1" color="text.secondary">
-                Reserve a pickleball court for your next game
-              </Typography>
-            </Box>
+      <Grid container spacing={4}>
+        <Grid item xs={12} md={8}>
+          <ThemedCard sx={{
+            borderRadius: 3,
+            boxShadow: '0 4px 20px rgba(0, 0, 0, 0.05)',
+            mb: 4,
+            background: 'linear-gradient(135deg, #f8f9ff, #ffffff)'
+          }}>
+            <CardContent sx={{ p: 4 }}>
+              {/* 头部 */}
+              <Box sx={{ mb: 4 }}>
+                <Typography variant="h5" fontWeight="bold" sx={{ mb: 1 }}>
+                  Book Court
+                </Typography>
+                <Typography variant="body1" color="text.secondary">
+                  Reserve a pickleball court for your next game
+                </Typography>
+              </Box>
 
-            {/* Tab导航 */}
-            <Box sx={{
-              display: 'flex',
-              gap: 1,
-              mb: 4,
-              p: 0.5,
-              bgcolor: 'rgba(0, 0, 0, 0.03)',
-              borderRadius: '12px',
-              width: 'fit-content'
-            }}>
-              {tabs.map((tab) => (
-                <Button
-                  key={tab}
-                  variant={activeTab === tab ? "contained" : "outlined"}
-                  onClick={() => {
-                    setActiveTab(tab);
-                    switch (tab) {
-                      case 'Today':
-                        setSelectedDate(dayjs());
-                        break;
-                      case 'Tomorrow':
-                        setSelectedDate(dayjs().add(1, 'day'));
-                        break;
-                      case 'This Week':
-                        setSelectedDate(dayjs().add(7, 'day'));
-                        break;
-                      case 'Custom Date':
-                        // Keep current date for custom selection
-                        break;
-                    }
-                  }}
-                  sx={{
-                    textTransform: 'none',
-                    fontWeight: 600,
-                    borderRadius: '8px',
-                    px: 3,
-                    py: 1,
-                    ...(activeTab === tab && {
-                      background: 'linear-gradient(90deg, #6a11cb 0%, #2575fc 100%)',
-                      color: 'white',
-                      boxShadow: '0 4px 8px rgba(37, 117, 252, 0.25)'
-                    })
-                  }}
-                >
-                  {tab}
-                </Button>
-              ))}
-            </Box>
+              {/* Tab导航 */}
+              <Box sx={{
+                display: 'flex',
+                gap: 1,
+                mb: 4,
+                p: 0.5,
+                bgcolor: 'rgba(0, 0, 0, 0.03)',
+                borderRadius: '12px',
+                width: 'fit-content'
+              }}>
+                {tabs.map((tab) => (
+                  <Button
+                    key={tab}
+                    variant={activeTab === tab ? "contained" : "outlined"}
+                    onClick={() => {
+                      setActiveTab(tab);
+                      switch (tab) {
+                        case 'Today':
+                          setSelectedDate(dayjs());
+                          break;
+                        case 'Tomorrow':
+                          setSelectedDate(dayjs().add(1, 'day'));
+                          break;
+                        case 'This Week':
+                          setSelectedDate(dayjs().add(7, 'day'));
+                          break;
+                        case 'Custom Date':
+                          // Keep current date for custom selection
+                          break;
+                      }
+                    }}
+                    sx={{
+                      textTransform: 'none',
+                      fontWeight: 600,
+                      borderRadius: '8px',
+                      px: 3,
+                      py: 1,
+                      ...(activeTab === tab && {
+                        background: 'linear-gradient(90deg, #6a11cb 0%, #2575fc 100%)',
+                        color: 'white',
+                        boxShadow: '0 4px 8px rgba(37, 117, 252, 0.25)'
+                      })
+                    }}
+                  >
+                    {tab}
+                  </Button>
+                ))}
+              </Box>
 
-            {/* 日历头部 */}
-            <Box sx={{
-              display: 'flex',
-              justifyContent: 'space-between',
-              alignItems: 'center',
-              mb: 4
-            }}>
-              <IconButton
-                onClick={() => {
-                  const newMonth = dayjs().subtract(1, 'month');
-                  setCurrentMonth(newMonth.format('MMMM YYYY'));
-                }}
-                sx={{
-                  p: 1.5,
-                  borderRadius: '50%',
-                  background: 'rgba(0, 0, 0, 0.03)',
-                  '&:hover': {
-                    background: 'rgba(0, 0, 0, 0.08)'
-                  }
-                }}
-              >
-                <ChevronLeft />
-              </IconButton>
+              {/* 日历头部 */}
+              <Box sx={{
+                display: 'flex',
+                justifyContent: 'space-between',
+                alignItems: 'center',
+                mb: 4
+              }}>
+                <IconButton
+                  onClick={() => {
+                    const newMonth = dayjs().subtract(1, 'month');
+                    setCurrentMonth(newMonth.format('MMMM YYYY'));
+                  }}
+                  sx={{
+                    p: 1.5,
+                    borderRadius: '50%',
+                    background: 'rgba(0, 0, 0, 0.03)',
+                    '&:hover': {
+                      background: 'rgba(0, 0, 0, 0.08)'
+                    }
+                  }}
+                >
+                  <ChevronLeft />
+                </IconButton>
 
-              <Typography variant="h6" fontWeight="bold">
-                {currentMonth}
-              </Typography>
+                <Typography variant="h6" fontWeight="bold">
+                  {currentMonth}
+                </Typography>
 
-              <IconButton
-                onClick={() => {
-                  const newMonth = dayjs().add(1, 'month');
-                  setCurrentMonth(newMonth.format('MMMM YYYY'));
-                }}
-                sx={{
-                  p: 1.5,
-                  borderRadius: '50%',
-                  background: 'rgba(0, 0, 0, 0.03)',
-                  '&:hover': {
-                    background: 'rgba(0, 0, 0, 0.08)'
-                  }
-                }}
-              >
-                <ChevronRight />
-              </IconButton>
-            </Box>
+                <IconButton
+                  onClick={() => {
+                    const newMonth = dayjs().add(1, 'month');
+                    setCurrentMonth(newMonth.format('MMMM YYYY'));
+                  }}
+                  sx={{
+                    p: 1.5,
+                    borderRadius: '50%',
+                    background: 'rgba(0, 0, 0, 0.03)',
+                    '&:hover': {
+                      background: 'rgba(0, 0, 0, 0.08)'
+                    }
+                  }}
+                >
+                  <ChevronRight />
+                </IconButton>
+              </Box>
 
-            {/* 日历网格 */}
-            <Box sx={{ mb: 4 }}>
-              {/* 星期标题 */}
-              <Grid container spacing={0} sx={{ mb: 2 }}>
-                {daysOfWeek.map((day) => (
-                  <Grid item xs key={day}>
-                    <Typography
-                      variant="body2"
-                      sx={{
-                        textAlign: 'center',
-                        fontWeight: 600,
-                        color: 'text.secondary',
-                        py: 1
-                      }}
-                    >
-                      {day}
-                    </Typography>
-                  </Grid>
-                ))}
-              </Grid>
+              {/* 日历网格 */}
+              <Box sx={{ mb: 4 }}>
+                {/* 星期标题 */}
+                <Grid container spacing={0} sx={{ mb: 2 }}>
+                  {daysOfWeek.map((day) => (
+                    <Grid item xs key={day}>
+                      <Typography
+                        variant="body2"
+                        sx={{
+                          textAlign: 'center',
+                          fontWeight: 600,
+                          color: 'text.secondary',
+                          py: 1
+                        }}
+                      >
+                        {day}
+                      </Typography>
+                    </Grid>
+                  ))}
+                </Grid>
 
-              {/* 日期网格 */}
-              <Grid container spacing={1}>
-                {calendar.map((week, weekIndex) => (
-                  <React.Fragment key={weekIndex}>
-                    {week.map((date, dateIndex) => (
-                      <Grid item xs key={`${weekIndex}-${dateIndex}`}>
-                        {date ? (
-                          <Button
-                            fullWidth
-                            variant={selectedDate?.date() === date ? "contained" : "outlined"}
-                            onClick={() => {
-                              if (isDateAvailable(date)) {
-                                const newDate = dayjs().date(date);
-                                setSelectedDate(newDate);
-                              }
-                            }}
-                            disabled={!isDateAvailable(date)}
-                            sx={{
-                              height: 56,
-                              minWidth: 0,
-                              borderRadius: '12px',
-                              fontWeight: 600,
-                              ...(selectedDate?.date() === date && {
-                                background: 'linear-gradient(90deg, #6a11cb 0%, #2575fc 100%)',
-                                color: 'white',
-                                boxShadow: '0 4px 12px rgba(37, 117, 252, 0.3)'
-                              }),
-                              ...(isDateAvailable(date) ? {} : {
-                                border: '2px solid #f44336',
-                                color: '#f44336',
-                                opacity: 0.7,
-                                '&:hover': {
-                                  border: '2px solid #f44336',
-                                  backgroundColor: 'rgba(244, 67, 54, 0.1)'
-                                }
-                              })
-                            }}
-                          >
-                            {date}
-                          </Button>
-                        ) : (
-                          <Box sx={{ height: 56 }} />
-                        )}
-                      </Grid>
-                    ))}
-                  </React.Fragment>
-                ))}
-              </Grid>
-            </Box>
+                {/* 日期网格 */}
+                <Grid container spacing={1}>
+                  {calendar.map((week, weekIndex) => (
+                    <React.Fragment key={weekIndex}>
+                      {week.map((date, dateIndex) => (
+                        <Grid item xs key={`${weekIndex}-${dateIndex}`}>
+                          {date ? (
+                            <Button
+                              fullWidth
+                              variant={selectedDate?.date() === date ? "contained" : "outlined"}
+                              onClick={() => {
+                                if (isDateAvailable(date)) {
+                                  const newDate = dayjs().date(date);
+                                  setSelectedDate(newDate);
+                                }
+                              }}
+                              disabled={!isDateAvailable(date)}
+                              sx={{
+                                height: 56,
+                                minWidth: 0,
+                                borderRadius: '12px',
+                                fontWeight: 600,
+                                ...(selectedDate?.date() === date && {
+                                  background: 'linear-gradient(90deg, #6a11cb 0%, #2575fc 100%)',
+                                  color: 'white',
+                                  boxShadow: '0 4px 12px rgba(37, 117, 252, 0.3)'
+                                }),
+                                ...(isDateAvailable(date) ? {} : {
+                                  border: '2px solid #f44336',
+                                  color: '#f44336',
+                                  opacity: 0.7,
+                                  '&:hover': {
+                                    border: '2px solid #f44336',
+                                    backgroundColor: 'rgba(244, 67, 54, 0.1)'
+                                  }
+                                })
+                              }}
+                            >
+                              {date}
+                            </Button>
+                          ) : (
+                            <Box sx={{ height: 56 }} />
+                          )}
+                        </Grid>
+                      ))}
+                    </React.Fragment>
+                  ))}
+                </Grid>
+              </Box>
 
-            {/* 时间槽位 */}
-            <ThemedCard sx={{
-              borderRadius: 3,
-              background: 'white',
-              boxShadow: '0 4px 12px rgba(0, 0, 0, 0.05)'
-            }}>
-              <CardContent>
-                <Box sx={{
-                  display: 'flex',
-                  alignItems: 'center',
-                  mb: 3
-                }}>
-                  <AccessTime sx={{
-                    color: 'text.secondary',
-                    mr: 1.5
-                  }} />
-                  <Typography variant="h6" fontWeight="bold">
-                    Available Time Slots - {selectedDate?.format('dddd, MMMM D, YYYY')}
-                  </Typography>
-                </Box>
-
-                <Grid container spacing={1.5}>
-                  {availableSlots.length > 0 ? (
-                    availableSlots.map((slot) => (
-                      <Grid item xs={6} sm={4} md={3} key={slot.id}>
-                        <Button
-                          fullWidth
-                          variant={
-                            selectedSlots.some(s => s.id === slot.id)
-                              ? "contained"
-                              : slot.status === 'BOOKED'
-                                ? "outlined"
-                                : "outlined"
-                          }
-                          onClick={() => handleSlotSelect(slot)}
-                          disabled={slot.status === 'BOOKED'}
-                          sx={{
-                            py: 1.5,
-                            borderRadius: '12px',
-                            fontWeight: 600,
-                            ...(selectedSlots.some(s => s.id === slot.id) ? {
-                              background: 'linear-gradient(90deg, #6a11cb 0%, #2575fc 100%)',
-                              color: 'white',
-                              boxShadow: '0 4px 8px rgba(37, 117, 252, 0.3)'
-                            } : {}),
-                            ...(slot.status === 'BOOKED' ? {
-                              borderColor: '#e53935',
-                              color: '#e53935',
-                              opacity: 0.7
-                            } : {})
-                          }}
-                        >
-                          {formatTime(slot.startTime)}
-                        </Button>
-                      </Grid>
-                    ))
-                  ) : (
-                    <Grid item xs={12}>
-                      <Box sx={{
-                        textAlign: 'center',
-                        py: 4,
-                        color: 'text.secondary'
-                      }}>
-                        <AccessTime sx={{ fontSize: '3rem', mb: 2, opacity: 0.5 }} />
-                        <Typography variant="body1">
-                          No available time slots for this date
-                        </Typography>
-                      </Box>
-                    </Grid>
-                  )}
-                </Grid>
-              </CardContent>
-            </ThemedCard>
+              {/* 时间槽位 */}
+              <ThemedCard sx={{
+                borderRadius: 3,
+                background: 'white',
+                boxShadow: '0 4px 12px rgba(0, 0, 0, 0.05)'
+              }}>
+                <CardContent>
+                  <Box sx={{
+                    display: 'flex',
+                    alignItems: 'center',
+                    mb: 3
+                  }}>
+                    <AccessTime sx={{
+                      color: 'text.secondary',
+                      mr: 1.5
+                    }} />
+                    <Typography variant="h6" fontWeight="bold">
+                      Available Time Slots - {selectedDate?.format('dddd, MMMM D, YYYY')}
+                    </Typography>
+                  </Box>
+                  <Grid container spacing={1.5}>
+                    {hourSlots.length > 0 ? (
+                      hourSlots.map((slot, idx) => {
+                        const key = slot.start + '-' + slot.end;
+                        const isAvailable = availableSlotSet.has(key);
+                        const slotObj = availableSlots.find(s => s.startTime === slot.start && s.endTime === slot.end);
+                        return (
+                          <Grid item xs={4} sm={3} md={2} key={key}>
+                            <Button
+                              fullWidth
+                              variant={
+                                selectedSlots.some(s => s.startTime === slot.start && s.endTime === slot.end)
+                                  ? "contained"
+                                  : "outlined"
+                              }
+                              onClick={() => isAvailable && slotObj && handleSlotSelect(slotObj)}
+                              disabled={!isAvailable}
+                              sx={{
+                                py: 1.5,
+                                borderRadius: '12px',
+                                fontWeight: 600,
+                                ...(selectedSlots.some(s => s.startTime === slot.start && s.endTime === slot.end) ? {
+                                  background: 'linear-gradient(90deg, #6a11cb 0%, #2575fc 100%)',
+                                  color: 'white',
+                                  boxShadow: '0 4px 8px rgba(37, 117, 252, 0.3)'
+                                } : {}),
+                                ...(!isAvailable ? {
+                                  borderColor: '#aaa',
+                                  color: '#aaa',
+                                  background: '#f5f5f5',
+                                  opacity: 0.7
+                                } : {})
+                              }}
+                            >
+                              {formatTime(slot.start)}
+                            </Button>
+                          </Grid>
+                        );
+                      })
+                    ) : (
+                      <Grid item xs={12}>
+                        <Box sx={{
+                          textAlign: 'center',
+                          py: 4,
+                          color: 'text.secondary'
+                        }}>
+                          <AccessTime sx={{ fontSize: '3rem', mb: 2, opacity: 0.5 }} />
+                          <Typography variant="body1">
+                            No available time slots for this date
+                          </Typography>
+                        </Box>
+                      </Grid>
+                    )}
+                  </Grid>
+                </CardContent>
+              </ThemedCard>
 
-            {/* 价格信息 */}
-            {court && (
-              <Box sx={{
-                mt: 3,
-                p: 2,
-                bgcolor: 'rgba(46, 125, 50, 0.1)',
-                borderRadius: '12px',
-                border: '1px solid rgba(46, 125, 50, 0.2)',
-                display: 'flex',
-                alignItems: 'center'
-              }}>
-                <Typography variant="body2" fontWeight="600" color="success.main">
-                  RM{court.offPeakHourlyPrice || 50}-{court.peakHourlyPrice || 80}/hour
-                </Typography>
-              </Box>
-            )}
-          </CardContent>
-        </ThemedCard>
-      </Grid>
+              {/* 价格信息 */}
+              {court && (
+                <Box sx={{
+                  mt: 3,
+                  p: 2,
+                  bgcolor: 'rgba(46, 125, 50, 0.1)',
+                  borderRadius: '12px',
+                  border: '1px solid rgba(46, 125, 50, 0.2)',
+                  display: 'flex',
+                  alignItems: 'center'
+                }}>
+                  <Typography variant="body2" fontWeight="600" color="success.main">
+                    RM{court.offPeakHourlyPrice || 50}-{court.peakHourlyPrice || 80}/hour
+                  </Typography>
+                </Box>
+              )}
+            </CardContent>
+          </ThemedCard>
+        </Grid>
 
-      <Grid item xs={12} md={4}>
-        {renderBookingSummary()}
-      </Grid>
-    </Grid>
+        <Grid item xs={12} md={4}>
+          {renderBookingSummary()}
+        </Grid>
+      </Grid>
 
-    <Snackbar
-      open={snackbarOpen}
-      autoHideDuration={6000}
-      onClose={() => setSnackbarOpen(false)}
-    >
-      <Alert onClose={() => setSnackbarOpen(false)} severity="error" sx={{ width: '100%' }}>
-        {error}
-      </Alert>
-    </Snackbar>
-  </Container>
-);
+      <Snackbar
+        open={snackbarOpen}
+        autoHideDuration={6000}
+        onClose={() => setSnackbarOpen(false)}
+      >
+        <Alert onClose={() => setSnackbarOpen(false)} severity="error" sx={{ width: '100%' }}>
+          {error}
+        </Alert>
+      </Snackbar>
+    </Container>
+  );
 };
 
 export default BookingPage;
\ No newline at end of file
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/TopUpRequestDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.dto;\r\n\r\nimport jakarta.validation.constraints.*;\r\nimport lombok.Data;\r\n\r\n@Data\r\npublic class TopUpRequestDto {\r\n    @NotNull(message = \"Amount is required\")\r\n    @DecimalMin(value = \"20.0\", message = \"Minimum top-up amount is RM20\")\r\n    @DecimalMax(value = \"500.0\", message = \"Maximum top-up amount is RM500\")\r\n    private Double amount;\r\n\r\n    @NotBlank(message = \"Source is required\")\r\n    @Pattern(regexp = \"CREDIT_EARNED|INTERNAL_CREDIT\",\r\n            message = \"Source must be CREDIT_EARNED or INTERNAL_CREDIT\")\r\n    private String source;\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/TopUpRequestDto.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/TopUpRequestDto.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/TopUpRequestDto.java	(revision 97abd609899a67b781b8ace8e91358a782fc5acd)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/TopUpRequestDto.java	(date 1753766825099)
@@ -7,7 +7,7 @@
 public class TopUpRequestDto {
     @NotNull(message = "Amount is required")
     @DecimalMin(value = "20.0", message = "Minimum top-up amount is RM20")
-    @DecimalMax(value = "500.0", message = "Maximum top-up amount is RM500")
+    @DecimalMax(value = "1000.0", message = "Maximum top-up amount is RM1000")
     private Double amount;
 
     @NotBlank(message = "Source is required")
Index: pickleball-frontend/src/components/court/BookingConfirmationPage.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useState } from 'react';\r\nimport {\r\n  Container,\r\n  Card,\r\n  CardContent,\r\n  Typography,\r\n  Button,\r\n  Box,\r\n  Grid,\r\n  Paper,\r\n  Divider\r\n} from '@mui/material';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport CheckCircleIcon from '@mui/icons-material/CheckCircle';\r\n\r\nconst PADDLE_PRICE = 5; // 每个 paddle 租金\r\nconst BALL_SET_PRICE = 12; // 一组 ball set 售价\r\n\r\nconst BookingConfirmationPage = () => {\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n  const booking = location.state?.booking;\r\n\r\n  // 添加调试日志\r\n  console.log('=== BookingConfirmationPage Debug ===');\r\n  console.log('Location state:', location.state);\r\n  console.log('Booking object:', booking);\r\n  console.log('slotDate:', booking?.slotDate);\r\n  console.log('startTime:', booking?.startTime);\r\n  console.log('endTime:', booking?.endTime);\r\n  console.log('durationHours:', booking?.durationHours);\r\n\r\n  const formatDate = (dateString) => {\r\n    console.log('formatDate called with:', dateString);\r\n    if (!dateString) return '';\r\n    const options = { year: 'numeric', month: 'long', day: 'numeric' };\r\n    return new Date(dateString).toLocaleDateString(undefined, options);\r\n  };\r\n\r\n  const formatTime = (time) => {\r\n    if (!time) return '';\r\n    return new Date(`1970-01-01T${time}:00`).toLocaleTimeString([],\r\n      { hour: '2-digit', minute: '2-digit' });\r\n  };\r\n\r\n  const numPlayers = booking.numberOfPlayers || 2;\r\n  const numPaddles = booking.numPaddles || 0;\r\n  const buyBallSet = !!booking.buyBallSet;\r\n  const total = booking.price !== undefined ? booking.price : booking.totalAmount;\r\n\r\n  if (!booking) {\r\n    return (\r\n      <Container sx={{ py: 4, textAlign: 'center' }}>\r\n        <Typography variant=\"h5\" gutterBottom>\r\n          Booking information not available\r\n        </Typography>\r\n        <Button variant=\"contained\" onClick={() => navigate('/courts')}>\r\n          Browse Courts\r\n        </Button>\r\n      </Container>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Container maxWidth=\"sm\" sx={{ py: 6 }}>\r\n      <Card\r\n        sx={{\r\n          textAlign: 'center',\r\n          p: 4,\r\n          borderRadius: '16px',\r\n          boxShadow: '0 8px 24px rgba(149, 157, 165, 0.2)',\r\n        }}\r\n      >\r\n        <CheckCircleIcon\r\n          sx={{\r\n            fontSize: 80,\r\n            color: '#4caf50',\r\n            mb: 2,\r\n            backgroundColor: '#e8f5e9',\r\n            borderRadius: '50%',\r\n            padding: '10px',\r\n          }}\r\n        />\r\n  \r\n        <Typography\r\n          variant=\"h4\"\r\n          gutterBottom\r\n          sx={{\r\n            fontWeight: 'bold',\r\n            color: '#2e7d32',\r\n            mb: 2,\r\n          }}\r\n        >\r\n          Booking Confirmed!\r\n        </Typography>\r\n  \r\n        <Typography variant=\"body1\" color=\"text.secondary\" sx={{ mb: 4 }}>\r\n          Your booking at {booking.courtName} has been confirmed\r\n        </Typography>\r\n  \r\n        <Box\r\n          sx={{\r\n            border: '1px solid #e0e0e0',\r\n            borderRadius: '8px',\r\n            mb: 4,\r\n            textAlign: 'left',\r\n            backgroundColor: '#f9f9f9',\r\n          }}\r\n        >\r\n          <Box sx={{ p: 3 }}>\r\n            <Typography variant=\"h6\" fontWeight=\"bold\" gutterBottom>\r\n              Booking Summary\r\n            </Typography>\r\n  \r\n            <Card variant=\"outlined\" sx={{ mb: 2 }}>\r\n              <CardContent>\r\n                <SummaryRow label=\"Number of Players\" value={numPlayers} />\r\n                <SummaryRow\r\n                  label=\"Paddles to Rent\"\r\n                  value={`${numPaddles} (RM${PADDLE_PRICE} each)`}\r\n                />\r\n                <SummaryRow\r\n                  label={`Buy Ball Set (RM${BALL_SET_PRICE})`}\r\n                  value={buyBallSet ? 'Yes' : 'No'}\r\n                  isLast\r\n                />\r\n              </CardContent>\r\n            </Card>\r\n  \r\n            <Card variant=\"outlined\" sx={{ mb: 2 }}>\r\n              <CardContent>\r\n                <SummaryRow label=\"Court\" value={booking.courtName} bold />\r\n                <SummaryRow label=\"Location\" value={booking.courtLocation} />\r\n                <SummaryRow label=\"Date\" value={formatDate(booking.slotDate)} />\r\n                <SummaryRow\r\n                  label=\"Time\"\r\n                  value={`${formatTime(booking.startTime)} - ${formatTime(booking.endTime)}`}\r\n                />\r\n                <SummaryRow\r\n                  label=\"Duration\"\r\n                  value={`${booking.durationHours} hours`}\r\n                  isLast\r\n                />\r\n              </CardContent>\r\n            </Card>\r\n  \r\n            <Card variant=\"outlined\" sx={{ mb: 2 }}>\r\n              <CardContent>\r\n                <SummaryRow\r\n                  label=\"Total Amount\"\r\n                  value={`RM${total.toFixed(2)}`}\r\n                  bold\r\n                  color=\"#2e7d32\"\r\n                />\r\n                <SummaryRow\r\n                  label=\"Payment Method\"\r\n                  value={booking.paymentMethod === 'WALLET' ? 'Wallet' : 'Credit Card'}\r\n                />\r\n                <SummaryRow\r\n                  label=\"Payment Status\"\r\n                  value={booking.paymentStatus}\r\n                  color={booking.paymentStatus === 'COMPLETED' ? '#2e7d32' : '#ff9800'}\r\n                  bold\r\n                  isLast\r\n                />\r\n              </CardContent>\r\n            </Card>\r\n  \r\n            {booking.pointsEarned && (\r\n              <Paper\r\n                elevation={2}\r\n                sx={{\r\n                  p: 2,\r\n                  backgroundColor: '#f3e5f5',\r\n                  border: '1px solid #ce93d8',\r\n                  borderRadius: '8px',\r\n                  mt: 2,\r\n                }}\r\n              >\r\n                <Typography\r\n                  variant=\"h6\"\r\n                  fontWeight=\"bold\"\r\n                  color=\"#9c27b0\"\r\n                  textAlign=\"center\"\r\n                  gutterBottom\r\n                >\r\n                  \uD83C\uDF89 Points Earned!\r\n                </Typography>\r\n  \r\n                <SummaryRow\r\n                  label=\"Points Earned\"\r\n                  value={`+${booking.pointsEarned}`}\r\n                  bold\r\n                  color=\"#9c27b0\"\r\n                />\r\n                <SummaryRow\r\n                  label=\"Current Balance\"\r\n                  value={`${booking.currentPointBalance} points`}\r\n                  isLast\r\n                />\r\n  \r\n                <Typography\r\n                  variant=\"body2\"\r\n                  color=\"text.secondary\"\r\n                  textAlign=\"center\"\r\n                  sx={{ mt: 1 }}\r\n                >\r\n                  Earn 1 point for every RM1 spent!\r\n                </Typography>\r\n              </Paper>\r\n            )}\r\n          </Box>\r\n        </Box>\r\n  \r\n        <Box sx={{ display: 'flex', justifyContent: 'center', gap: 2, mt: 3 }}>\r\n          <Button\r\n            variant=\"outlined\"\r\n            onClick={() => navigate('/profile/my-bookings')}\r\n            sx={{\r\n              px: 4,\r\n              py: 1.5,\r\n              borderColor: '#4caf50',\r\n              color: '#4caf50',\r\n              '&:hover': {\r\n                backgroundColor: '#e8f5e9',\r\n                borderColor: '#2e7d32',\r\n              },\r\n            }}\r\n          >\r\n            View My Bookings\r\n          </Button>\r\n  \r\n          <Button\r\n            variant=\"contained\"\r\n            onClick={() => navigate('/courts')}\r\n            sx={{\r\n              px: 4,\r\n              py: 1.5,\r\n              backgroundColor: '#ff6f00',\r\n              '&:hover': {\r\n                backgroundColor: '#e65100',\r\n              },\r\n            }}\r\n          >\r\n            Book Another Court\r\n          </Button>\r\n        </Box>\r\n              </Card>\r\n      </Container>\r\n    );\r\n  };\r\n  \r\nconst SummaryRow = ({ label, value, bold = false, color, isLast = false }) => (\r\n  <Grid container spacing={1} sx={{ mb: isLast ? 0 : 1 }}>\r\n    <Grid item xs={6}>\r\n      <Typography variant=\"body2\" color=\"text.secondary\">\r\n        {label}\r\n      </Typography>\r\n    </Grid>\r\n    <Grid item xs={6} textAlign=\"right\">\r\n      <Typography\r\n        variant=\"body2\"\r\n        fontWeight={bold ? 'bold' : 'normal'}\r\n        sx={{ color: color || 'inherit' }}\r\n      >\r\n        {value}\r\n      </Typography>\r\n    </Grid>\r\n  </Grid>\r\n);\r\n\r\nexport default BookingConfirmationPage;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball-frontend/src/components/court/BookingConfirmationPage.jsx b/pickleball-frontend/src/components/court/BookingConfirmationPage.jsx
--- a/pickleball-frontend/src/components/court/BookingConfirmationPage.jsx	(revision 97abd609899a67b781b8ace8e91358a782fc5acd)
+++ b/pickleball-frontend/src/components/court/BookingConfirmationPage.jsx	(date 1753725263933)
@@ -1,17 +1,31 @@
-import React, { useState } from 'react';
-import {
-  Container,
-  Card,
-  CardContent,
-  Typography,
-  Button,
-  Box,
+import React, { useState, useEffect } from 'react';
+import { 
+  Container, 
+  Card, 
+  CardContent, 
+  Typography, 
+  Button, 
+  Box, 
   Grid,
-  Paper,
-  Divider
+  Divider,
+  Dialog,
+  DialogTitle,
+  DialogContent,
+  DialogActions,
+  TextField,
+  IconButton,
+  Tooltip,
+  FormControl,
+  InputLabel,
+  Select,
+  MenuItem,
+  Paper
 } from '@mui/material';
 import { useLocation, useNavigate } from 'react-router-dom';
 import CheckCircleIcon from '@mui/icons-material/CheckCircle';
+import ShareIcon from '@mui/icons-material/Share';
+import ClassSessionService from '../../service/ClassSessionService';
+import api from '../../api/axiosConfig';
 
 const PADDLE_PRICE = 5; // 每个 paddle 租金
 const BALL_SET_PRICE = 12; // 一组 ball set 售价
@@ -20,15 +34,25 @@
   const location = useLocation();
   const navigate = useNavigate();
   const booking = location.state?.booking;
+  const matchDetails = location.state?.matchDetails;
+  const paymentType = location.state?.type;
+  const [sessionDetails, setSessionDetails] = useState(null);
+  const [shareDialogOpen, setShareDialogOpen] = useState(false);
+  const [shareMessage, setShareMessage] = useState('');
+  const [shareRecipient, setShareRecipient] = useState('');
+  const [isSharing, setIsSharing] = useState(false);
+  const [friends, setFriends] = useState([]);
+  const [searchQuery, setSearchQuery] = useState('');
+  const [searchResults, setSearchResults] = useState([]);
+  const [isSearching, setIsSearching] = useState(false);
+  const [showSearchResults, setShowSearchResults] = useState(false);
 
   // 添加调试日志
   console.log('=== BookingConfirmationPage Debug ===');
   console.log('Location state:', location.state);
   console.log('Booking object:', booking);
-  console.log('slotDate:', booking?.slotDate);
-  console.log('startTime:', booking?.startTime);
-  console.log('endTime:', booking?.endTime);
-  console.log('durationHours:', booking?.durationHours);
+  console.log('Match details:', matchDetails);
+  console.log('Payment type:', paymentType);
 
   const formatDate = (dateString) => {
     console.log('formatDate called with:', dateString);
@@ -39,16 +63,165 @@
 
   const formatTime = (time) => {
     if (!time) return '';
-    return new Date(`1970-01-01T${time}:00`).toLocaleTimeString([],
+    
+    // 如果是完整的日期時間字符串，提取時間部分
+    if (time.includes('T') || time.includes(' ')) {
+      const date = new Date(time);
+      return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
+    }
+    
+    // 如果是純時間格式（如 "08:00"），直接格式化
+    return new Date(`1970-01-01T${time}:00`).toLocaleTimeString([], 
       { hour: '2-digit', minute: '2-digit' });
   };
 
-  const numPlayers = booking.numberOfPlayers || 2;
-  const numPaddles = booking.numPaddles || 0;
-  const buyBallSet = !!booking.buyBallSet;
-  const total = booking.price !== undefined ? booking.price : booking.totalAmount;
+  // 處理 friendly match 或一般 booking 的數據
+  const isFriendlyMatch = paymentType === 'friendly-match';
+  const data = isFriendlyMatch ? matchDetails : booking;
+  
+  // 計算 duration（小時）
+  const calculateDuration = () => {
+    if (isFriendlyMatch && data?.startTime && data?.endTime) {
+      const start = new Date(data.startTime);
+      const end = new Date(data.endTime);
+      const diffMs = end - start;
+      const diffHours = diffMs / (1000 * 60 * 60);
+      return Math.round(diffHours * 10) / 10; // 保留一位小數
+    }
+    return data?.duration || booking?.durationHours || 1;
+  };
+  
+  const duration = calculateDuration();
+  
+  const numPlayers = isFriendlyMatch 
+    ? (data?.maxPlayers || 4) 
+    : (booking?.numberOfPlayers || 2);
+  const numPaddles = isFriendlyMatch ? (data?.numPaddles || 0) : (booking?.numPaddles || 0);
+  const buyBallSet = isFriendlyMatch ? !!data?.buyBallSet : !!booking?.buyBallSet;
+  const total = isFriendlyMatch
+    ? (data?.totalPrice || data?.price || 0)
+    : (booking?.price !== undefined
+        ? booking.price
+        : (booking?.totalAmount !== undefined
+            ? booking.totalAmount
+            : (booking?.totalPrice !== undefined
+                ? booking.totalPrice
+                : 0)));
+
+  useEffect(() => {
+    if (booking && booking.type === 'class-session' && booking.sessions && booking.sessions.length > 0) {
+      const sessionIds = booking.sessions.map(s => s.id);
+      ClassSessionService.getSessionDetailsBatch(sessionIds)
+        .then(data => setSessionDetails(data))
+        .catch(() => setSessionDetails(null));
+    }
+  }, [booking]);
+
+  // 獲取朋友列表
+  const fetchFriends = async () => {
+    try {
+      const response = await api.get('/friends/accepted');
+      setFriends(response.data);
+    } catch (error) {
+      console.error('Failed to fetch friends:', error);
+    }
+  };
+
+  // 搜索用戶
+  const searchUsers = async () => {
+    if (!searchQuery.trim()) {
+      setSearchResults([]);
+      setShowSearchResults(false);
+      return;
+    }
 
-  if (!booking) {
+    setIsSearching(true);
+    try {
+      const response = await api.get(`/users/search?query=${encodeURIComponent(searchQuery.trim())}`);
+      setSearchResults(response.data);
+      setShowSearchResults(true);
+    } catch (error) {
+      console.error('Failed to search users:', error);
+      setSearchResults([]);
+    } finally {
+      setIsSearching(false);
+    }
+  };
+
+  // 選擇用戶
+  const selectUser = (username) => {
+    setShareRecipient(username);
+    setSearchQuery(username);
+    setShowSearchResults(false);
+  };
+
+  // 生成分享消息內容
+  const generateShareMessage = () => {
+    if (isFriendlyMatch) {
+      return `🎾 Friendly Match Confirmed!
+
+📅 Date: ${formatDate(data?.date)}
+⏰ Time: ${formatTime(data?.startTime)} - ${formatTime(data?.endTime)}
+🏟️ Court: ${data?.courtName || 'Court'}
+📍 Location: ${data?.venueName || data?.location || 'Location'}
+👥 Players: ${data?.currentPlayers || 1}/${data?.maxPlayers || 4}
+⏱️ Duration: ${duration} hour${duration !== 1 ? 's' : ''}
+💰 Total: RM${total.toFixed(2)}
+
+${data?.numPaddles > 0 ? `🏓 Paddles: ${data.numPaddles} (RM5 each)\n` : ''}${data?.buyBallSet ? '🏐 Ball Set: Yes (RM12)\n' : ''}
+Payment Status: ✅ PAID
+
+Join me for a great game! 🏓`;
+    } else {
+      return `🏟️ Court Booking Confirmed!
+
+📅 Date: ${formatDate(booking?.slotDate)}
+⏰ Time: ${formatTime(booking?.startTime)} - ${formatTime(booking?.endTime)}
+🏟️ Court: ${booking?.courtName || 'Court'}
+📍 Location: ${booking?.courtLocation || 'Location'}
+👥 Players: ${numPlayers}
+💰 Total: RM${total.toFixed(2)}
+
+${numPaddles > 0 ? `🏓 Paddles: ${numPaddles} (RM5 each)\n` : ''}${buyBallSet ? '🏐 Ball Set: Yes (RM12)\n' : ''}
+Payment Status: ✅ ${booking?.paymentStatus || 'PAID'}
+
+Let's play! 🏓`;
+    }
+  };
+
+  // 處理分享
+  const handleShare = () => {
+    setShareMessage(generateShareMessage());
+    setShareDialogOpen(true);
+  };
+
+  // 發送分享消息
+  const handleSendShare = async () => {
+    if (!shareRecipient.trim()) {
+      alert('Please enter a recipient username');
+      return;
+    }
+
+    setIsSharing(true);
+    try {
+      const params = new URLSearchParams({
+        recipient: shareRecipient.trim(),
+        content: shareMessage
+      });
+
+      await api.post(`/messages/send?${params.toString()}`);
+      alert('Message sent successfully!');
+      setShareDialogOpen(false);
+      setShareRecipient('');
+    } catch (error) {
+      console.error('Failed to send message:', error);
+      alert('Failed to send message: ' + (error.response?.data || error.message));
+    } finally {
+      setIsSharing(false);
+    }
+  };
+
+  if (!booking && !matchDetails) {
     return (
       <Container sx={{ py: 4, textAlign: 'center' }}>
         <Typography variant="h5" gutterBottom>
@@ -63,39 +236,34 @@
 
   return (
     <Container maxWidth="sm" sx={{ py: 6 }}>
-      <Card
-        sx={{
-          textAlign: 'center',
-          p: 4,
-          borderRadius: '16px',
-          boxShadow: '0 8px 24px rgba(149, 157, 165, 0.2)',
-        }}
-      >
-        <CheckCircleIcon
-          sx={{
-            fontSize: 80,
-            color: '#4caf50',
-            mb: 2,
-            backgroundColor: '#e8f5e9',
-            borderRadius: '50%',
-            padding: '10px',
-          }}
-        />
-  
-        <Typography
-          variant="h4"
-          gutterBottom
-          sx={{
-            fontWeight: 'bold',
-            color: '#2e7d32',
-            mb: 2,
-          }}
-        >
-          Booking Confirmed!
+      <Card sx={{ 
+        textAlign: 'center', 
+        p: 4,
+        borderRadius: '16px',
+        boxShadow: '0 8px 24px rgba(149, 157, 165, 0.2)'
+      }}>
+        <CheckCircleIcon sx={{ 
+          fontSize: 80, 
+          color: '#4caf50', 
+          mb: 2,
+          backgroundColor: '#e8f5e9',
+          borderRadius: '50%',
+          padding: '10px'
+        }} />
+        
+        <Typography variant="h4" gutterBottom sx={{ 
+          fontWeight: 'bold',
+          color: '#2e7d32',
+          mb: 2
+        }}>
+           {isFriendlyMatch ? 'Payment Confirmed!' : 'Booking Confirmed!'}
         </Typography>
   
         <Typography variant="body1" color="text.secondary" sx={{ mb: 4 }}>
-          Your booking at {booking.courtName} has been confirmed
+          {isFriendlyMatch 
+            ? `Your friendly match payment has been confirmed`
+            : `Your booking at ${booking?.courtName} has been confirmed`
+          }
         </Typography>
   
         <Box
@@ -108,65 +276,139 @@
           }}
         >
           <Box sx={{ p: 3 }}>
-            <Typography variant="h6" fontWeight="bold" gutterBottom>
-              Booking Summary
+            <Typography variant="h6" gutterBottom sx={{ fontWeight: 'bold' }}>
+              {isFriendlyMatch ? 'Match Summary' : 'Booking Summary'}
             </Typography>
-  
-            <Card variant="outlined" sx={{ mb: 2 }}>
-              <CardContent>
-                <SummaryRow label="Number of Players" value={numPlayers} />
-                <SummaryRow
-                  label="Paddles to Rent"
-                  value={`${numPaddles} (RM${PADDLE_PRICE} each)`}
-                />
-                <SummaryRow
-                  label={`Buy Ball Set (RM${BALL_SET_PRICE})`}
-                  value={buyBallSet ? 'Yes' : 'No'}
-                  isLast
-                />
-              </CardContent>
-            </Card>
-  
-            <Card variant="outlined" sx={{ mb: 2 }}>
-              <CardContent>
-                <SummaryRow label="Court" value={booking.courtName} bold />
-                <SummaryRow label="Location" value={booking.courtLocation} />
-                <SummaryRow label="Date" value={formatDate(booking.slotDate)} />
-                <SummaryRow
-                  label="Time"
-                  value={`${formatTime(booking.startTime)} - ${formatTime(booking.endTime)}`}
-                />
-                <SummaryRow
-                  label="Duration"
-                  value={`${booking.durationHours} hours`}
-                  isLast
-                />
-              </CardContent>
-            </Card>
-  
+            
+            {booking && booking.type === 'class-session' && booking.sessions ? (
+              <Box mb={2}>
+                {/* 顯示 recurring group summary */}
+                <Typography variant="body2" color="text.secondary">
+                  Venue: {sessionDetails ? (sessionDetails[0]?.venueName || '-') : (booking.sessions[0]?.venue || booking.sessions[0]?.venueName || '-')}
+                </Typography>
+                <Typography variant="body2" color="text.secondary">
+                  State: {sessionDetails ? (sessionDetails[0]?.venueState || '-') : (booking.sessions[0]?.state || booking.sessions[0]?.venueState || '-')}
+                </Typography>
+                <Typography variant="body2" color="text.secondary">
+                  Court: {sessionDetails ? (sessionDetails[0]?.courtName || '-') : (booking.sessions[0]?.courtName || booking.sessions[0]?.court?.name || '-')}
+                </Typography>
+                <Typography variant="body2" color="primary" fontWeight="bold">
+                  Total Sessions: {booking.sessions.length}
+                </Typography>
+                <Typography variant="subtitle1" fontWeight="bold" color="primary" mb={1} mt={2}>
+                  Booked Class Sessions:
+                </Typography>
+                {(sessionDetails || (booking && booking.sessions)).map(sess => {
+                  const start = sess.startTime ? new Date(sess.startTime) : null;
+                  const end = sess.endTime ? new Date(sess.endTime) : null;
+                  const format = d => d ? d.toLocaleString([], { year: 'numeric', month: '2-digit', day: '2-digit', hour: '2-digit', minute: '2-digit' }) : '';
+                  return (
+                    <Typography key={sess.id} variant="body2" color="text.secondary">
+                      {format(start)} - {format(end)} {sess.type || sess.slotType || ''} | Coach: {sess.coachName} | Price: RM {sess.price}
+                    </Typography>
+                  );
+                })}
+              </Box>
+            ) : (
+              <>
+                {isFriendlyMatch ? (
+                  <>
+                    {/* Friendly Match Summary */}
+                    <Card variant="outlined" sx={{ mb: 2 }}>
+                      <CardContent>
+                        <SummaryRow label="Match Title" value={data?.title || 'Friendly Match'} bold />
+                        <SummaryRow label="Max Players" value={numPlayers} />
+                        <SummaryRow
+                          label="Paddles Rented"
+                          value={numPaddles > 0 ? `${numPaddles} (RM5 each)` : 'None'}
+                        />
+                        <SummaryRow
+                          label="Ball Set"
+                          value={buyBallSet ? 'Yes (RM12)' : 'No'}
+                          isLast
+                        />
+                      </CardContent>
+                    </Card>
+
+                    <Card variant="outlined" sx={{ mb: 2 }}>
+                      <CardContent>
+                        <SummaryRow label="Court" value={data?.courtName || 'Court'} bold />
+                        <SummaryRow label="Location" value={data?.venueName || data?.location || data?.courtLocation || 'Location'} />
+                        <SummaryRow label="Date" value={formatDate(data?.date)} />
+                        <SummaryRow
+                          label="Time"
+                          value={`${formatTime(data?.startTime)} - ${formatTime(data?.endTime)}`}
+                        />
+                        <SummaryRow
+                          label="Duration"
+                          value={`${duration} hour${duration !== 1 ? 's' : ''}`}
+                          isLast
+                        />
+                      </CardContent>
+                    </Card>
+                  </>
+                ) : (
+                  <>
+                    {/* Regular Court Booking Summary */}
+                    <Card variant="outlined" sx={{ mb: 2 }}>
+                      <CardContent>
+                        <SummaryRow label="Number of Players" value={numPlayers} />
+                        <SummaryRow
+                          label="Paddles to Rent"
+                          value={`${numPaddles} (RM${PADDLE_PRICE} each)`}
+                        />
+                        <SummaryRow
+                          label={`Buy Ball Set (RM${BALL_SET_PRICE})`}
+                          value={buyBallSet ? 'Yes' : 'No'}
+                          isLast
+                        />
+                      </CardContent>
+                    </Card>
+
+                    <Card variant="outlined" sx={{ mb: 2 }}>
+                      <CardContent>
+                        <SummaryRow label="Court" value={booking?.courtName} bold />
+                        <SummaryRow label="Location" value={booking?.courtLocation} />
+                        <SummaryRow label="Date" value={formatDate(booking?.slotDate)} />
+                        <SummaryRow
+                          label="Time"
+                          value={`${formatTime(booking?.startTime)} - ${formatTime(booking?.endTime)}`}
+                        />
+                        <SummaryRow
+                          label="Duration"
+                          value={`${booking?.durationHours} hours`}
+                          isLast
+                        />
+                      </CardContent>
+                    </Card>
+                  </>
+                )}
+              </>
+            )}
+            
             <Card variant="outlined" sx={{ mb: 2 }}>
               <CardContent>
                 <SummaryRow
                   label="Total Amount"
-                  value={`RM${total.toFixed(2)}`}
+                  value={`RM${Number(total).toFixed(2)}`}
                   bold
                   color="#2e7d32"
                 />
                 <SummaryRow
                   label="Payment Method"
-                  value={booking.paymentMethod === 'WALLET' ? 'Wallet' : 'Credit Card'}
+                  value={isFriendlyMatch ? 'Wallet' : (booking?.paymentMethod === 'WALLET' ? 'Wallet' : 'Credit Card')}
                 />
                 <SummaryRow
                   label="Payment Status"
-                  value={booking.paymentStatus}
-                  color={booking.paymentStatus === 'COMPLETED' ? '#2e7d32' : '#ff9800'}
+                  value={isFriendlyMatch ? 'PAID' : booking?.paymentStatus}
+                  color={(isFriendlyMatch ? 'PAID' : booking?.paymentStatus) === 'COMPLETED' || (isFriendlyMatch ? 'PAID' : booking?.paymentStatus) === 'PAID' ? '#2e7d32' : '#ff9800'}
                   bold
                   isLast
                 />
               </CardContent>
             </Card>
-  
-            {booking.pointsEarned && (
+
+            {booking?.pointsEarned && (
               <Paper
                 elevation={2}
                 sx={{
@@ -186,7 +428,7 @@
                 >
                   🎉 Points Earned!
                 </Typography>
-  
+
                 <SummaryRow
                   label="Points Earned"
                   value={`+${booking.pointsEarned}`}
@@ -198,7 +440,7 @@
                   value={`${booking.currentPointBalance} points`}
                   isLast
                 />
-  
+
                 <Typography
                   variant="body2"
                   color="text.secondary"
@@ -213,43 +455,306 @@
         </Box>
   
         <Box sx={{ display: 'flex', justifyContent: 'center', gap: 2, mt: 3 }}>
-          <Button
-            variant="outlined"
-            onClick={() => navigate('/profile/my-bookings')}
-            sx={{
-              px: 4,
-              py: 1.5,
-              borderColor: '#4caf50',
-              color: '#4caf50',
-              '&:hover': {
-                backgroundColor: '#e8f5e9',
-                borderColor: '#2e7d32',
-              },
-            }}
-          >
-            View My Bookings
-          </Button>
-  
-          <Button
-            variant="contained"
-            onClick={() => navigate('/courts')}
-            sx={{
-              px: 4,
-              py: 1.5,
-              backgroundColor: '#ff6f00',
-              '&:hover': {
-                backgroundColor: '#e65100',
-              },
-            }}
-          >
-            Book Another Court
-          </Button>
+          {isFriendlyMatch ? (
+            // Friendly Match 的按鈕
+            <>
+              <Tooltip title="Share confirmation with friends">
+                <IconButton
+                  onClick={handleShare}
+                  sx={{
+                    backgroundColor: '#2196f3',
+                    color: 'white',
+                    '&:hover': {
+                      backgroundColor: '#1976d2'
+                    },
+                    mb: 2
+                  }}
+                >
+                  <ShareIcon />
+                </IconButton>
+              </Tooltip>
+              
+              <Button 
+                variant="outlined" 
+                onClick={() => navigate('/events')}
+                sx={{ 
+                  px: 4,
+                  py: 1.5,
+                  borderColor: '#4caf50',
+                  color: '#4caf50',
+                  '&:hover': {
+                    backgroundColor: '#e8f5e9',
+                    borderColor: '#2e7d32'
+                  }
+                }}
+              >
+                View My Matches
+              </Button>
+              
+              <Button 
+                variant="contained" 
+                onClick={() => navigate('/events')}
+                sx={{ 
+                  px: 4,
+                  py: 1.5,
+                  backgroundColor: '#ff6f00',
+                  '&:hover': {
+                    backgroundColor: '#e65100'
+                  }
+                }}
+              >
+                Create Another Match
+              </Button>
+            </>
+          ) : (booking && booking.type === 'class-session') ? (
+            // Class Session 預訂的按鈕
+            <>
+              <Tooltip title="Share confirmation with friends">
+                <IconButton
+                  onClick={handleShare}
+                  sx={{
+                    backgroundColor: '#2196f3',
+                    color: 'white',
+                    '&:hover': {
+                      backgroundColor: '#1976d2'
+                    },
+                    mb: 2
+                  }}
+                >
+                  <ShareIcon />
+                </IconButton>
+              </Tooltip>
+              
+              <Button 
+                variant="outlined" 
+                onClick={() => navigate('/profile/my-class-sessions')}
+                sx={{ 
+                  px: 4,
+                  py: 1.5,
+                  borderColor: '#4caf50',
+                  color: '#4caf50',
+                  '&:hover': {
+                    backgroundColor: '#e8f5e9',
+                    borderColor: '#2e7d32'
+                  }
+                }}
+              >
+                View My Class Sessions
+              </Button>
+              
+              <Button 
+                variant="contained" 
+                onClick={() => navigate('/coaching/browse')}
+                sx={{ 
+                  px: 4,
+                  py: 1.5,
+                  backgroundColor: '#ff6f00',
+                  '&:hover': {
+                    backgroundColor: '#e65100'
+                  }
+                }}
+              >
+                Book Another Class Session
+              </Button>
+            </>
+          ) : (
+            // 一般球場預訂的按鈕（保持原樣）
+            <>
+              <Tooltip title="Share confirmation with friends">
+                <IconButton
+                  onClick={handleShare}
+                  sx={{
+                    backgroundColor: '#2196f3',
+                    color: 'white',
+                    '&:hover': {
+                      backgroundColor: '#1976d2'
+                    },
+                    mb: 2
+                  }}
+                >
+                  <ShareIcon />
+                </IconButton>
+              </Tooltip>
+              
+              <Button 
+                variant="outlined" 
+                onClick={() => navigate('/profile/my-bookings')}
+                sx={{ 
+                  px: 4,
+                  py: 1.5,
+                  borderColor: '#4caf50',
+                  color: '#4caf50',
+                  '&:hover': {
+                    backgroundColor: '#e8f5e9',
+                    borderColor: '#2e7d32'
+                  }
+                }}
+              >
+                View My Bookings
+              </Button>
+              
+              <Button 
+                variant="contained" 
+                onClick={() => navigate('/courts')}
+                sx={{ 
+                  px: 4,
+                  py: 1.5,
+                  backgroundColor: '#ff6f00',
+                  '&:hover': {
+                    backgroundColor: '#e65100'
+                  }
+                }}
+              >
+                Book Another Court
+              </Button>
+            </>
+          )}
         </Box>
-              </Card>
-      </Container>
-    );
-  };
-  
+      </Card>
+      
+      {/* 分享對話框 */}
+      <Dialog 
+        open={shareDialogOpen} 
+        onClose={() => setShareDialogOpen(false)}
+        maxWidth="sm"
+        fullWidth
+      >
+        <DialogTitle>
+          Share Confirmation
+        </DialogTitle>
+        <DialogContent>
+          <Box sx={{ mb: 3 }}>
+            <Typography variant="body2" color="text.secondary" gutterBottom>
+              Select Friend or Search User:
+            </Typography>
+            
+            {/* 朋友列表下拉框 */}
+            <FormControl fullWidth size="small" sx={{ mb: 2 }}>
+              <InputLabel>Select from Friends</InputLabel>
+              <Select
+                value=""
+                onChange={(e) => selectUser(e.target.value)}
+                label="Select from Friends"
+                onClick={fetchFriends}
+              >
+                {friends.map((friend) => (
+                  <MenuItem key={friend.id} value={friend.username}>
+                    {friend.username} {friend.name && `(${friend.name})`}
+                  </MenuItem>
+                ))}
+                {friends.length === 0 && (
+                  <MenuItem disabled>No friends found</MenuItem>
+                )}
+              </Select>
+            </FormControl>
+
+            {/* 搜索用戶 */}
+            <Box sx={{ display: 'flex', gap: 1, mb: 2 }}>
+              <TextField
+                fullWidth
+                value={searchQuery}
+                onChange={(e) => setSearchQuery(e.target.value)}
+                placeholder="Search by username"
+                variant="outlined"
+                size="small"
+                onKeyPress={(e) => e.key === 'Enter' && searchUsers()}
+              />
+              <Button
+                variant="contained"
+                onClick={searchUsers}
+                disabled={isSearching || !searchQuery.trim()}
+                sx={{ minWidth: '80px' }}
+              >
+                {isSearching ? '...' : 'Search'}
+              </Button>
+            </Box>
+
+            {/* 搜索結果 */}
+            {showSearchResults && (
+              <Box sx={{ mb: 2, maxHeight: 150, overflow: 'auto', border: '1px solid #e0e0e0', borderRadius: 1 }}>
+                {searchResults.map((user) => (
+                  <Box
+                    key={user.id}
+                    onClick={() => selectUser(user.username)}
+                    sx={{
+                      p: 1,
+                      cursor: 'pointer',
+                      '&:hover': { backgroundColor: '#f5f5f5' },
+                      borderBottom: '1px solid #f0f0f0'
+                    }}
+                  >
+                    <Typography variant="body2" fontWeight="medium">
+                      {user.username}
+                    </Typography>
+                    {user.name && (
+                      <Typography variant="body2" color="text.secondary">
+                        {user.name}
+                      </Typography>
+                    )}
+                  </Box>
+                ))}
+                {searchResults.length === 0 && (
+                  <Box sx={{ p: 1, textAlign: 'center' }}>
+                    <Typography variant="body2" color="text.secondary">
+                      No users found
+                    </Typography>
+                  </Box>
+                )}
+              </Box>
+            )}
+
+            {/* 選中的用戶 */}
+            {shareRecipient && (
+              <Box sx={{ mb: 2, p: 1, backgroundColor: '#e3f2fd', borderRadius: 1 }}>
+                <Typography variant="body2" color="text.secondary">
+                  Selected: <strong>{shareRecipient}</strong>
+                </Typography>
+              </Box>
+            )}
+          </Box>
+          
+          <Box>
+            <Typography variant="body2" color="text.secondary" gutterBottom>
+              Message Preview:
+            </Typography>
+            <TextField
+              fullWidth
+              multiline
+              rows={8}
+              value={shareMessage}
+              onChange={(e) => setShareMessage(e.target.value)}
+              variant="outlined"
+              sx={{
+                '& .MuiOutlinedInput-root': {
+                  backgroundColor: '#f5f5f5'
+                }
+              }}
+            />
+          </Box>
+        </DialogContent>
+        <DialogActions>
+          <Button onClick={() => setShareDialogOpen(false)}>
+            Cancel
+          </Button>
+          <Button 
+            onClick={handleSendShare}
+            variant="contained"
+            disabled={isSharing || !shareRecipient.trim()}
+            sx={{
+              backgroundColor: '#2196f3',
+              '&:hover': {
+                backgroundColor: '#1976d2'
+              }
+            }}
+          >
+            {isSharing ? 'Sending...' : 'Send Message'}
+          </Button>
+        </DialogActions>
+      </Dialog>
+    </Container>
+  );
+};
+
 const SummaryRow = ({ label, value, bold = false, color, isLast = false }) => (
   <Grid container spacing={1} sx={{ mb: isLast ? 0 : 1 }}>
     <Grid item xs={6}>
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/RegistrationDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.dto;\r\n\r\nimport lombok.*;\r\n\r\n@Data\r\npublic class RegistrationDto {\r\n    private String username;\r\n    private String name;\r\n    private String gender;\r\n    private String userType;\r\n    private String dob;\r\n    private String email;\r\n    private String phone;\r\n    private String password;\r\n    private String position;\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/RegistrationDto.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/RegistrationDto.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/RegistrationDto.java	(revision 97abd609899a67b781b8ace8e91358a782fc5acd)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/RegistrationDto.java	(date 1753722380838)
@@ -13,4 +13,5 @@
     private String phone;
     private String password;
     private String position;
+    private Integer experienceYear;
 }
\ No newline at end of file
Index: pickleball-frontend/src/components/court/BookingHistory.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Container,\r\n  Box,\r\n  Typography,\r\n  Tabs,\r\n  Tab,\r\n  Card,\r\n  CardContent,\r\n  Grid,\r\n  Chip,\r\n  Button,\r\n  Divider,\r\n  Avatar,\r\n  Paper,\r\n  Stack,\r\n  IconButton,\r\n  CircularProgress,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  TextField\r\n} from '@mui/material';\r\nimport {\r\n  SportsTennis as CourtIcon,\r\n  CalendarToday as DateIcon,\r\n  AccessTime as TimeIcon,\r\n  People as PlayersIcon,\r\n  MonetizationOn as AmountIcon,\r\n  Cancel as CancelIcon,\r\n  RateReview as ReviewIcon,\r\n  ArrowBack as BackIcon,\r\n  FilterList as FilterIcon,\r\n  Visibility as ViewIcon\r\n} from '@mui/icons-material';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { styled } from '@mui/material/styles';\r\nimport api from '../../api/axiosConfig';\r\nimport ModernBookingDetailsDialog from '../admin/ModernBookingDetailsDialog';\r\n\r\n// Modern color palette\r\nconst COLORS = {\r\n  primary: '#6366f1',        // Modern indigo\r\n  primaryHover: '#4f46e5',   // Darker indigo\r\n  primaryLight: '#f0f0ff',   // Light indigo background\r\n  success: '#10b981',        // Modern green\r\n  successHover: '#059669',   // Darker green\r\n  successLight: '#ecfdf5',   // Light green background\r\n  warning: '#f59e0b',        // Modern amber\r\n  warningHover: '#d97706',   // Darker amber\r\n  warningLight: '#fffbeb',   // Light amber background\r\n  error: '#ef4444',          // Modern red\r\n  errorHover: '#dc2626',     // Darker red\r\n  errorLight: '#fef2f2',     // Light red background\r\n  neutral: '#6b7280',        // Modern gray\r\n  neutralHover: '#4b5563',   // Darker gray\r\n  neutralLight: '#f9fafb',   // Light gray background\r\n  background: '#ffffff',     // Clean white\r\n  surface: '#f8fafc',        // Subtle surface color\r\n};\r\n\r\n// Styled components\r\nconst GradientCard = styled(Card)(({ theme }) => ({\r\n  background: `linear-gradient(145deg, ${COLORS.surface}, ${COLORS.background})`,\r\n  borderRadius: '20px',\r\n  boxShadow: '0 4px 20px rgba(0, 0, 0, 0.08)',\r\n  border: '1px solid rgba(99, 102, 241, 0.1)',\r\n  transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)',\r\n  '&:hover': {\r\n    transform: 'translateY(-8px)',\r\n    boxShadow: '0 12px 40px rgba(0, 0, 0, 0.12)',\r\n    borderColor: 'rgba(99, 102, 241, 0.2)'\r\n  },\r\n}));\r\n\r\nconst StatusChip = styled(Chip)(({ status, theme }) => {\r\n  const statusStyles = {\r\n    upcoming: {\r\n      backgroundColor: COLORS.warningLight,\r\n      color: COLORS.warning,\r\n      border: `1px solid ${COLORS.warning}20`\r\n    },\r\n    completed: {\r\n      backgroundColor: COLORS.successLight,\r\n      color: COLORS.success,\r\n      border: `1px solid ${COLORS.success}20`\r\n    },\r\n    cancelled: {\r\n      backgroundColor: COLORS.errorLight,\r\n      color: COLORS.error,\r\n      border: `1px solid ${COLORS.error}20`\r\n    },\r\n    CONFIRMED: {\r\n      backgroundColor: COLORS.warningLight,\r\n      color: COLORS.warning,\r\n      border: `1px solid ${COLORS.warning}20`\r\n    },\r\n    COMPLETED: {\r\n      backgroundColor: COLORS.successLight,\r\n      color: COLORS.success,\r\n      border: `1px solid ${COLORS.success}20`\r\n    },\r\n    CANCELLED: {\r\n      backgroundColor: COLORS.errorLight,\r\n      color: COLORS.error,\r\n      border: `1px solid ${COLORS.error}20`\r\n    },\r\n    CANCELLATION_REQUESTED: {\r\n      backgroundColor: COLORS.errorLight,\r\n      color: COLORS.error,\r\n      border: `1px solid ${COLORS.error}20`\r\n    }\r\n  };\r\n\r\n  const style = statusStyles[status] || {\r\n    backgroundColor: COLORS.neutralLight,\r\n    color: COLORS.neutral,\r\n    border: `1px solid ${COLORS.neutral}20`\r\n  };\r\n\r\n  return {\r\n    ...style,\r\n    fontWeight: 600,\r\n    borderRadius: '12px',\r\n    padding: '6px 12px',\r\n    fontSize: '0.75rem',\r\n    textTransform: 'uppercase',\r\n    letterSpacing: '0.5px'\r\n  };\r\n});\r\n\r\nconst ModernButton = styled(Button)(({ variant, color }) => {\r\n  const baseStyles = {\r\n    borderRadius: '12px',\r\n    fontWeight: 600,\r\n    textTransform: 'none',\r\n    fontSize: '0.875rem',\r\n    padding: '8px 16px',\r\n    transition: 'all 0.2s cubic-bezier(0.4, 0, 0.2, 1)',\r\n    border: 'none',\r\n    boxShadow: 'none',\r\n    '&:hover': {\r\n      transform: 'translateY(-1px)',\r\n      boxShadow: '0 4px 12px rgba(0, 0, 0, 0.15)',\r\n    }\r\n  };\r\n\r\n  if (variant === 'contained') {\r\n    if (color === 'primary') {\r\n      return {\r\n        ...baseStyles,\r\n        backgroundColor: COLORS.primary,\r\n        color: '#ffffff',\r\n        '&:hover': {\r\n          ...baseStyles['&:hover'],\r\n          backgroundColor: COLORS.primaryHover,\r\n        }\r\n      };\r\n    }\r\n    if (color === 'error') {\r\n      return {\r\n        ...baseStyles,\r\n        backgroundColor: COLORS.error,\r\n        color: '#ffffff',\r\n        '&:hover': {\r\n          ...baseStyles['&:hover'],\r\n          backgroundColor: COLORS.errorHover,\r\n        }\r\n      };\r\n    }\r\n    if (color === 'success') {\r\n      return {\r\n        ...baseStyles,\r\n        backgroundColor: COLORS.success,\r\n        color: '#ffffff',\r\n        '&:hover': {\r\n          ...baseStyles['&:hover'],\r\n          backgroundColor: COLORS.successHover,\r\n        }\r\n      };\r\n    }\r\n  }\r\n\r\n  if (variant === 'outlined') {\r\n    if (color === 'error') {\r\n      return {\r\n        ...baseStyles,\r\n        backgroundColor: 'transparent',\r\n        color: COLORS.error,\r\n        border: `2px solid ${COLORS.error}`,\r\n        '&:hover': {\r\n          ...baseStyles['&:hover'],\r\n          backgroundColor: COLORS.errorLight,\r\n          borderColor: COLORS.errorHover,\r\n          color: COLORS.errorHover,\r\n        }\r\n      };\r\n    }\r\n    if (color === 'primary') {\r\n      return {\r\n        ...baseStyles,\r\n        backgroundColor: 'transparent',\r\n        color: COLORS.primary,\r\n        border: `2px solid ${COLORS.primary}`,\r\n        '&:hover': {\r\n          ...baseStyles['&:hover'],\r\n          backgroundColor: COLORS.primaryLight,\r\n          borderColor: COLORS.primaryHover,\r\n          color: COLORS.primaryHover,\r\n        }\r\n      };\r\n    }\r\n  }\r\n\r\n  return baseStyles;\r\n});\r\n\r\n\r\nconst BookingHistory = () => {\r\n  const navigate = useNavigate();\r\n  const [tabValue, setTabValue] = useState('all');\r\n  const [showFilters, setShowFilters] = useState(false);\r\n  const [bookings, setBookings] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [cancellingId, setCancellingId] = useState(null);\r\n  const [cancelStatus, setCancelStatus] = useState({});\r\n  const [cancelDialogOpen, setCancelDialogOpen] = useState(false);\r\n  const [cancelReason, setCancelReason] = useState('');\r\n  const [cancelBookingId, setCancelBookingId] = useState(null);\r\n  const [detailsDialogOpen, setDetailsDialogOpen] = useState(false);\r\n  const [selectedBooking, setSelectedBooking] = useState(null);\r\n\r\n  const fetchBookingHistory = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      const response = await api.get('/member/bookings');\r\n      console.log(\"API Response:\", response.data);\r\n\r\n      // 数据规范化处理 - 根据实际API响应调整字段映射\r\n      const normalizedBookings = response.data.map(booking => {\r\n        console.log('Processing booking:', booking);\r\n        console.log('Court ID from API:', booking.courtId);\r\n        \r\n        const normalizedBooking = {\r\n        id: booking.id || booking.bookingId, // 确保ID字段正确\r\n        bookingId: booking.id || booking.bookingId,\r\n          courtId: booking.courtId, // 直接从API获取\r\n          courtName: booking.courtName || \"AAA Pickleball Court\",\r\n          courtLocation: booking.location || \"123 Sports Complex, Kuala Lumpur\",\r\n          slotDate: booking.date, // 使用API中的date字段\r\n          startTime: booking.startTime, // 使用API中的startTime字段\r\n          endTime: booking.endTime, // 使用API中的endTime字段\r\n        numberOfPlayers: booking.playerCount || booking.numberOfPlayers || 4,\r\n        totalAmount: booking.amount ? Number(booking.amount) : booking.price || 50.00,\r\n        status: booking.bookingStatus || booking.status || \"CONFIRMED\",\r\n        purpose: booking.purpose || \"Recreational\",\r\n        numPaddles: booking.numPaddles || 0,\r\n        buyBallSet: booking.buyBallSet || false,\r\n        bookingDate: booking.bookingDate || booking.createdAt,\r\n        // 支付相关字段\r\n        paymentMethod: booking.payment?.paymentMethod || booking.paymentMethod || \"Wallet\",\r\n        paymentType: booking.payment?.paymentType || booking.paymentType,\r\n        paymentStatus: booking.payment?.status || booking.paymentStatus || \"COMPLETED\",\r\n        transactionId: booking.payment?.transactionId || booking.transactionId,\r\n        // 会员信息\r\n        memberId: booking.memberId || booking.member?.id,\r\n        // 多slot支持\r\n        bookingSlots: booking.bookingSlots || [],\r\n        durationHours: booking.durationHours || 1,\r\n          // 评价状态\r\n          hasReviewed: booking.hasReviewed || false,\r\n        };\r\n        \r\n        console.log('Normalized booking:', normalizedBooking);\r\n        console.log('Extracted courtId:', normalizedBooking.courtId);\r\n        console.log('Extracted slotDate:', normalizedBooking.slotDate);\r\n        console.log('Extracted startTime:', normalizedBooking.startTime);\r\n        console.log('Extracted endTime:', normalizedBooking.endTime);\r\n        \r\n        return normalizedBooking;\r\n      });\r\n\r\n      console.log(\"Normalized Bookings:\", normalizedBookings);\r\n      setBookings(normalizedBookings);\r\n    } catch (err) {\r\n      console.error('Failed to fetch booking history:', err);\r\n      setError(err.response?.data?.message || 'Failed to load bookings');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchBookingHistory();\r\n  }, []);\r\n\r\n  const handleTabChange = (event, newValue) => {\r\n    setTabValue(newValue);\r\n  };\r\n\r\n  const handleBookCourt = () => {\r\n    navigate('/courts');\r\n  };\r\n\r\n  const handleCancelBooking = (id) => {\r\n    setCancelBookingId(id);\r\n    setCancelReason('');\r\n    setCancelDialogOpen(true);\r\n  };\r\n\r\n  const handleConfirmCancel = () => {\r\n    if (!cancelReason.trim()) {\r\n      alert('Please provide a reason for cancellation.');\r\n      return;\r\n    }\r\n    setCancellingId(cancelBookingId);\r\n    setCancelStatus(prev => ({ ...prev, [cancelBookingId]: 'processing' }));\r\n    api.post(`/member/bookings/${cancelBookingId}/cancel`, { reason: cancelReason })\r\n      .then(response => {\r\n        setBookings(prev => prev.map(booking =>\r\n          booking.bookingId === cancelBookingId\r\n            ? { ...booking, status: 'CANCELLATION_REQUESTED' }\r\n            : booking\r\n        ));\r\n        setCancelStatus(prev => ({ ...prev, [cancelBookingId]: 'requested' }));\r\n        alert('Cancellation request submitted successfully!');\r\n      })\r\n      .catch(error => {\r\n        console.error('Cancellation failed:', error);\r\n        setCancelStatus(prev => ({ ...prev, [cancelBookingId]: 'error' }));\r\n        let errorMsg = 'Unknown error';\r\n        if (error.response) {\r\n          errorMsg = `Server error: ${error.response.status}`;\r\n          if (error.response.data?.message) {\r\n            errorMsg += ` - ${error.response.data.message}`;\r\n          }\r\n        } else if (error.request) {\r\n          errorMsg = 'No response from server';\r\n        } else {\r\n          errorMsg = error.message;\r\n        }\r\n        alert(`Cancellation failed: ${errorMsg}`);\r\n      })\r\n      .finally(() => {\r\n        setCancellingId(null);\r\n        setCancelDialogOpen(false);\r\n        setCancelBookingId(null);\r\n      });\r\n  };\r\n\r\n  const handleCancelDialogClose = () => {\r\n    setCancelDialogOpen(false);\r\n    setCancelBookingId(null);\r\n    setCancelReason('');\r\n  };\r\n\r\n  const handleLeaveReview = (booking) => {\r\n    console.log('=== Review Button Clicked ===');\r\n    console.log('Booking data:', booking);\r\n    console.log('Booking ID:', booking.bookingId);\r\n    console.log('Court Name:', booking.courtName);\r\n    console.log('Court Location:', booking.courtLocation);\r\n    console.log('Slot Date:', booking.slotDate);\r\n    console.log('Start Time:', booking.startTime);\r\n    console.log('End Time:', booking.endTime);\r\n    console.log('Duration Hours:', booking.durationHours);\r\n    console.log('Has Reviewed:', booking.hasReviewed);\r\n    \r\n    // 检查预订是否包含必要的信息\r\n    if (!booking.bookingId) {\r\n      console.error('Missing booking ID');\r\n      console.log('Falling back to select page');\r\n      // 如果信息不全，回退到选择页面\r\n      navigate('/profile/my-bookings');\r\n      return;\r\n    }\r\n\r\n    const navigationState = {\r\n      targetType: 'COURT',\r\n      courtName: booking.courtName,\r\n      courtLocation: booking.courtLocation,\r\n      slotDate: booking.slotDate,\r\n      startTime: booking.startTime,\r\n      endTime: booking.endTime,\r\n      durationHours: booking.durationHours,\r\n      bookingId: String(booking.bookingId), // 确保bookingId是字符串类型\r\n      isEditing: false, // 新建评价\r\n      isViewReview: booking.hasReviewed // 如果已经评价过，设置为View Review模式\r\n    };\r\n\r\n    console.log('Navigation state:', navigationState);\r\n    console.log('Navigating to /feedback...');\r\n\r\n    // 直接导航到反馈页面，并传递预订信息\r\n    navigate('/feedback', {\r\n      state: navigationState\r\n    });\r\n  };\r\n\r\n  const handleViewDetails = (booking) => {\r\n    setSelectedBooking(booking);\r\n    setDetailsDialogOpen(true);\r\n  };\r\n\r\n  const handleCloseDetails = () => {\r\n    setDetailsDialogOpen(false);\r\n    setSelectedBooking(null);\r\n  };\r\n\r\n  // 日期格式化函数\r\n  const formatDate = (dateString) => {\r\n    if (!dateString) return 'N/A';\r\n\r\n    // 尝试解析日期\r\n    const date = new Date(dateString);\r\n\r\n    if (isNaN(date.getTime())) {\r\n      // 处理可能的日期格式如 \"YYYY-MM-DD\"\r\n      if (/^\\d{4}-\\d{2}-\\d{2}$/.test(dateString)) {\r\n        const [year, month, day] = dateString.split('-');\r\n        return new Date(year, month - 1, day).toLocaleDateString('en-US', {\r\n          month: 'short',\r\n          day: 'numeric',\r\n          year: 'numeric'\r\n        });\r\n      }\r\n      return 'Invalid Date';\r\n    }\r\n\r\n    return date.toLocaleDateString('en-US', {\r\n      month: 'short',\r\n      day: 'numeric',\r\n      year: 'numeric'\r\n    });\r\n  };\r\n\r\n  // 时间格式化函数\r\n  const formatTime = (timeString) => {\r\n    if (!timeString) return '';\r\n\r\n    // 处理 HH:mm 格式\r\n    if (/^\\d{2}:\\d{2}$/.test(timeString)) {\r\n      const timeParts = timeString.split(':');\r\n      let hours = parseInt(timeParts[0]);\r\n      const minutes = timeParts[1];\r\n      const period = hours >= 12 ? 'PM' : 'AM';\r\n      hours = hours % 12 || 12;\r\n      return `${hours}:${minutes} ${period}`;\r\n    }\r\n\r\n    return timeString; // 返回原始值\r\n  };\r\n\r\n  // 过滤预订\r\n  const filteredBookings = tabValue === 'all'\r\n    ? bookings\r\n    : bookings.filter(booking => {\r\n      if (tabValue === 'upcoming') return booking.status === 'CONFIRMED';\r\n      if (tabValue === 'completed') return booking.status === 'COMPLETED';\r\n      if (tabValue === 'cancelled') return booking.status === 'CANCELLED' || booking.status === 'CANCELLATION_REQUESTED';\r\n      return true;\r\n    });\r\n\r\n  if (loading) {\r\n    return (\r\n      <Container style={{\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        height: '80vh',\r\n        flexDirection: 'column'\r\n      }}>\r\n        <CircularProgress size={60} sx={{ color: COLORS.primary }} />\r\n        <Typography variant=\"h6\" sx={{ ml: 2, mt: 2, color: COLORS.neutral }}>\r\n          Loading booking history...\r\n        </Typography>\r\n      </Container>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <Container sx={{ py: 4, textAlign: 'center' }}>\r\n        <Typography variant=\"h5\" sx={{ color: COLORS.error, mb: 2 }}>\r\n          {error}\r\n        </Typography>\r\n        <ModernButton\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          onClick={fetchBookingHistory}\r\n          sx={{ mt: 2 }}\r\n        >\r\n          Retry\r\n        </ModernButton>\r\n      </Container>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\" sx={{ py: 4 }}>\r\n      <Box sx={{ display: 'flex', alignItems: 'center', mb: 4 }}>\r\n        <IconButton\r\n          onClick={() => navigate('/profile')}\r\n          sx={{\r\n            mr: 2,\r\n            backgroundColor: COLORS.neutralLight,\r\n            color: COLORS.neutral,\r\n            '&:hover': {\r\n              backgroundColor: COLORS.primary,\r\n              color: '#ffffff'\r\n            }\r\n          }}\r\n        >\r\n          <BackIcon />\r\n        </IconButton>\r\n        <Typography variant=\"h4\" component=\"h1\" sx={{\r\n          fontWeight: 700,\r\n          flexGrow: 1,\r\n          background: `linear-gradient(135deg, ${COLORS.primary}, ${COLORS.primaryHover})`,\r\n          WebkitBackgroundClip: 'text',\r\n          WebkitTextFillColor: 'transparent'\r\n        }}>\r\n          My Bookings\r\n        </Typography>\r\n        <IconButton\r\n          onClick={() => setShowFilters(!showFilters)}\r\n          sx={{\r\n            backgroundColor: showFilters ? COLORS.primaryLight : COLORS.neutralLight,\r\n            color: showFilters ? COLORS.primary : COLORS.neutral,\r\n            '&:hover': {\r\n              backgroundColor: COLORS.primary,\r\n              color: '#ffffff'\r\n            }\r\n          }}\r\n        >\r\n          <FilterIcon />\r\n        </IconButton>\r\n      </Box>\r\n\r\n      {/* Filter Tabs */}\r\n      <Paper sx={{\r\n        mb: 3,\r\n        borderRadius: 4,\r\n        boxShadow: '0 2px 10px rgba(0, 0, 0, 0.06)',\r\n        border: '1px solid rgba(99, 102, 241, 0.1)',\r\n        overflow: 'hidden'\r\n      }}>\r\n        <Tabs\r\n          value={tabValue}\r\n          onChange={handleTabChange}\r\n          variant=\"scrollable\"\r\n          scrollButtons=\"auto\"\r\n          sx={{\r\n            '& .MuiTabs-indicator': {\r\n              height: 3,\r\n              borderRadius: '3px 3px 0 0',\r\n              backgroundColor: COLORS.primary,\r\n            },\r\n            '& .MuiTab-root': {\r\n              fontWeight: 600,\r\n              color: COLORS.neutral,\r\n              '&.Mui-selected': {\r\n                color: COLORS.primary,\r\n              }\r\n            }\r\n          }}\r\n        >\r\n          <Tab label=\"All\" value=\"all\" />\r\n          <Tab label=\"Upcoming\" value=\"upcoming\" />\r\n          <Tab label=\"Completed\" value=\"completed\" />\r\n          <Tab label=\"Cancelled\" value=\"cancelled\" />\r\n        </Tabs>\r\n      </Paper>\r\n\r\n      {/* Additional Filters */}\r\n      {showFilters && (\r\n        <Paper sx={{\r\n          p: 3,\r\n          mb: 3,\r\n          borderRadius: 4,\r\n          boxShadow: '0 2px 10px rgba(0, 0, 0, 0.06)',\r\n          border: '1px solid rgba(99, 102, 241, 0.1)',\r\n          backgroundColor: COLORS.surface\r\n        }}>\r\n          <Typography variant=\"subtitle1\" sx={{ mb: 2, fontWeight: 600, color: COLORS.neutral }}>\r\n            Additional Filters\r\n          </Typography>\r\n          <Stack direction=\"row\" spacing={1} sx={{ flexWrap: 'wrap', gap: 1 }}>\r\n            <Chip\r\n              label=\"This Week\"\r\n              variant=\"outlined\"\r\n              sx={{\r\n                borderColor: COLORS.primary,\r\n                color: COLORS.primary,\r\n                '&:hover': {\r\n                  backgroundColor: COLORS.primaryLight,\r\n                }\r\n              }}\r\n            />\r\n            <Chip\r\n              label=\"This Month\"\r\n              variant=\"outlined\"\r\n              sx={{\r\n                borderColor: COLORS.primary,\r\n                color: COLORS.primary,\r\n                '&:hover': {\r\n                  backgroundColor: COLORS.primaryLight,\r\n                }\r\n              }}\r\n            />\r\n            <Chip\r\n              label=\"Past Bookings\"\r\n              variant=\"outlined\"\r\n              sx={{\r\n                borderColor: COLORS.primary,\r\n                color: COLORS.primary,\r\n                '&:hover': {\r\n                  backgroundColor: COLORS.primaryLight,\r\n                }\r\n              }}\r\n            />\r\n            <Chip\r\n              label=\"Group Bookings\"\r\n              variant=\"outlined\"\r\n              sx={{\r\n                borderColor: COLORS.primary,\r\n                color: COLORS.primary,\r\n                '&:hover': {\r\n                  backgroundColor: COLORS.primaryLight,\r\n                }\r\n              }}\r\n            />\r\n            <Chip\r\n              label=\"Solo Bookings\"\r\n              variant=\"outlined\"\r\n              sx={{\r\n                borderColor: COLORS.primary,\r\n                color: COLORS.primary,\r\n                '&:hover': {\r\n                  backgroundColor: COLORS.primaryLight,\r\n                }\r\n              }}\r\n            />\r\n          </Stack>\r\n        </Paper>\r\n      )}\r\n\r\n      {/* Bookings List */}\r\n      {filteredBookings.length > 0 ? (\r\n        <Grid container spacing={3}>\r\n          {filteredBookings.map((booking) => (\r\n            <Grid item xs={12} sm={6} md={4} key={booking.bookingId}>\r\n              <GradientCard>\r\n                <CardContent sx={{ p: 3 }}>\r\n                  <Box sx={{ display: 'flex', alignItems: 'center', mb: 3 }}>\r\n                    <Avatar sx={{\r\n                      bgcolor: COLORS.primary,\r\n                      mr: 2,\r\n                      width: 56,\r\n                      height: 56,\r\n                      boxShadow: `0 4px 12px ${COLORS.primary}30`\r\n                    }}>\r\n                      <CourtIcon sx={{ fontSize: 28 }} />\r\n                    </Avatar>\r\n                    <Box>\r\n                      <Typography variant=\"h6\" sx={{ fontWeight: 700, color: COLORS.neutral }}>\r\n                        {booking.courtName}\r\n                      </Typography>\r\n                      <Typography variant=\"body2\" sx={{ color: COLORS.neutral, opacity: 0.7 }}>\r\n                        {booking.courtLocation}\r\n                      </Typography>\r\n                    </Box>\r\n                  </Box>\r\n\r\n                  <Divider sx={{ my: 3, borderColor: `${COLORS.primary}20` }} />\r\n\r\n                  <Grid container spacing={2} sx={{ mb: 3 }}>\r\n                    <Grid item xs={6}>\r\n                      <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                        <DateIcon fontSize=\"small\" sx={{ mr: 1, color: COLORS.primary }} />\r\n                        <Typography variant=\"body2\" sx={{ color: COLORS.neutral, fontWeight: 500 }}>\r\n                          {formatDate(booking.slotDate)}\r\n                        </Typography>\r\n                      </Box>\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                      <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                        <TimeIcon fontSize=\"small\" sx={{ mr: 1, color: COLORS.primary }} />\r\n                        <Typography variant=\"body2\" sx={{ color: COLORS.neutral, fontWeight: 500 }}>\r\n                          {formatTime(booking.startTime)} - {formatTime(booking.endTime)}\r\n                        </Typography>\r\n                      </Box>\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                      <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                        <PlayersIcon fontSize=\"small\" sx={{ mr: 1, color: COLORS.primary }} />\r\n                        <Typography variant=\"body2\" sx={{ color: COLORS.neutral, fontWeight: 500 }}>\r\n                          {booking.numberOfPlayers} players\r\n                        </Typography>\r\n                      </Box>\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                      <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                        <AmountIcon fontSize=\"small\" sx={{ mr: 1, color: COLORS.primary }} />\r\n                        <Typography variant=\"body2\" sx={{ color: COLORS.neutral, fontWeight: 500 }}>\r\n                          MYR {booking.totalAmount.toFixed(2)}\r\n                        </Typography>\r\n                      </Box>\r\n                    </Grid>\r\n                  </Grid>\r\n\r\n                  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mt: 3 }}>\r\n                    <StatusChip\r\n                      label={\r\n                        booking.status === 'CONFIRMED' ? 'Upcoming' :\r\n                        booking.status === 'COMPLETED' ? 'Completed' :\r\n                        booking.status === 'CANCELLED' ? 'Cancelled' :\r\n                        booking.status === 'CANCELLATION_REQUESTED' ? 'Cancellation Requested' :\r\n                        booking.status\r\n                      }\r\n                      status={booking.status}\r\n                    />\r\n\r\n                    <Box sx={{ display: 'flex', gap: 1 }}>\r\n                      <ModernButton\r\n                        variant=\"outlined\"\r\n                        color=\"primary\"\r\n                        size=\"small\"\r\n                        startIcon={<ViewIcon />}\r\n                        onClick={() => handleViewDetails(booking)}\r\n                      >\r\n                        Details\r\n                      </ModernButton>\r\n\r\n                    {booking.status === 'CONFIRMED' && (\r\n                      cancelStatus[booking.bookingId] === 'processing' ? (\r\n                        <CircularProgress size={24} />\r\n                      ) : (\r\n                        <ModernButton\r\n                          variant=\"outlined\"\r\n                          color=\"error\"\r\n                          size=\"small\"\r\n                          startIcon={<CancelIcon />}\r\n                          onClick={() => handleCancelBooking(booking.bookingId)}\r\n                          disabled={cancelStatus[booking.bookingId] === 'requested'}\r\n                        >\r\n                          {cancelStatus[booking.bookingId] === 'requested'\r\n                            ? \"Requested\"\r\n                            : \"Cancel\"}\r\n                        </ModernButton>\r\n                      )\r\n                    )}\r\n\r\n                    {booking.status === 'COMPLETED' && (\r\n                      booking.hasReviewed ? (\r\n                        <ModernButton\r\n                          variant=\"outlined\"\r\n                          color=\"success\"\r\n                          size=\"small\"\r\n                          startIcon={<ViewIcon />}\r\n                          onClick={() => handleLeaveReview(booking)}\r\n                        >\r\n                          View Review\r\n                        </ModernButton>\r\n                      ) : (\r\n                      <ModernButton\r\n                        variant=\"outlined\"\r\n                        color=\"primary\"\r\n                        size=\"small\"\r\n                        startIcon={<ReviewIcon />}\r\n                          onClick={() => handleLeaveReview(booking)}\r\n                      >\r\n                        Review\r\n                      </ModernButton>\r\n                      )\r\n                    )}\r\n                    </Box>\r\n                  </Box>\r\n                </CardContent>\r\n              </GradientCard>\r\n            </Grid>\r\n          ))}\r\n        </Grid>\r\n      ) : (\r\n        <Box sx={{\r\n          textAlign: 'center',\r\n          py: 8,\r\n          bgcolor: COLORS.surface,\r\n          borderRadius: 6,\r\n          boxShadow: '0 4px 20px rgba(0, 0, 0, 0.08)',\r\n          border: '1px solid rgba(99, 102, 241, 0.1)'\r\n        }}>\r\n          <Box sx={{\r\n            width: 140,\r\n            height: 140,\r\n            background: `linear-gradient(135deg, ${COLORS.primaryLight}, ${COLORS.primary}20)`,\r\n            borderRadius: '50%',\r\n            display: 'inline-flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            mb: 3,\r\n            border: `2px solid ${COLORS.primary}30`\r\n          }}>\r\n            <CourtIcon sx={{ fontSize: 70, color: COLORS.primary }} />\r\n          </Box>\r\n          <Typography variant=\"h5\" sx={{ mb: 2, fontWeight: 700, color: COLORS.neutral }}>\r\n            No Bookings Found\r\n          </Typography>\r\n          <Typography variant=\"body1\" sx={{\r\n            color: COLORS.neutral,\r\n            opacity: 0.7,\r\n            maxWidth: 500,\r\n            mx: 'auto',\r\n            mb: 4,\r\n            lineHeight: 1.6\r\n          }}>\r\n            Dive into the world of sports and start booking your favorite venues.\r\n          </Typography>\r\n          <ModernButton\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            size=\"large\"\r\n            onClick={handleBookCourt}\r\n            sx={{\r\n              px: 6,\r\n              py: 1.5,\r\n              fontSize: '1.1rem',\r\n              fontWeight: 700,\r\n            }}\r\n          >\r\n            Book a Court Now\r\n          </ModernButton>\r\n        </Box>\r\n      )}\r\n\r\n      {/* Cancel Reason Dialog */}\r\n      <Dialog open={cancelDialogOpen} onClose={handleCancelDialogClose} maxWidth=\"xs\" fullWidth>\r\n        <DialogTitle>Cancel Booking</DialogTitle>\r\n        <DialogContent>\r\n          <Typography variant=\"body1\" sx={{ mb: 2 }}>\r\n            Please provide a reason for cancelling this booking:\r\n          </Typography>\r\n          <TextField\r\n            label=\"Cancellation Reason\"\r\n            value={cancelReason}\r\n            onChange={e => setCancelReason(e.target.value)}\r\n            fullWidth\r\n            required\r\n            multiline\r\n            minRows={3}\r\n            autoFocus\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleCancelDialogClose} color=\"primary\">\r\n            Back\r\n          </Button>\r\n          <Button onClick={handleConfirmCancel} color=\"error\" variant=\"contained\">\r\n            Confirm Cancel\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Booking Details Dialog */}\r\n      <ModernBookingDetailsDialog\r\n        open={detailsDialogOpen}\r\n        onClose={handleCloseDetails}\r\n        booking={selectedBooking}\r\n        loading={false}\r\n        editableRemark={false}\r\n        isAdmin={false}\r\n      />\r\n\r\n      {/* Footer */}\r\n      <Box sx={{ mt: 8, textAlign: 'center', color: COLORS.neutral, opacity: 0.6 }}>\r\n        <Typography variant=\"body2\">\r\n          © 2025 Pickleball App. All rights reserved.\r\n        </Typography>\r\n      </Box>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default BookingHistory;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball-frontend/src/components/court/BookingHistory.jsx b/pickleball-frontend/src/components/court/BookingHistory.jsx
--- a/pickleball-frontend/src/components/court/BookingHistory.jsx	(revision 97abd609899a67b781b8ace8e91358a782fc5acd)
+++ b/pickleball-frontend/src/components/court/BookingHistory.jsx	(date 1753725551702)
@@ -666,7 +666,7 @@
                     }}>
                       <CourtIcon sx={{ fontSize: 28 }} />
                     </Avatar>
-                    <Box>
+                    <Box sx={{ flexGrow: 1 }}>
                       <Typography variant="h6" sx={{ fontWeight: 700, color: COLORS.neutral }}>
                         {booking.courtName}
                       </Typography>
@@ -674,6 +674,20 @@
                         {booking.courtLocation}
                       </Typography>
                     </Box>
+                    {/* Friendly Match 標籤 */}
+                    {booking.purpose === 'Friendly Match' && (
+                      <Chip
+                        label="Friendly Match"
+                        size="small"
+                        sx={{
+                          backgroundColor: COLORS.successLight,
+                          color: COLORS.success,
+                          border: `1px solid ${COLORS.success}20`,
+                          fontWeight: 600,
+                          fontSize: '0.75rem'
+                        }}
+                      />
+                    )}
                   </Box>
 
                   <Divider sx={{ my: 3, borderColor: `${COLORS.primary}20` }} />
Index: pickleball-frontend/src/components/profile/RedeemVoucherPage.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useState, useEffect } from 'react';\r\nimport { \r\n  Box, Grid, Card, CardContent, Typography, Chip, Button, \r\n  CircularProgress, Alert, Grow, useTheme, alpha\r\n} from '@mui/material';\r\nimport { ConfirmationNumber as VoucherIcon } from '@mui/icons-material';\r\nimport axios from 'axios';\r\nimport UserService from '../../service/UserService';\r\n\r\nconst RedeemVoucherPage = ({ onSuccess, onError }) => {\r\n  const theme = useTheme();\r\n  const [redeemingId, setRedeemingId] = useState(null);\r\n  const [dashboardData, setDashboardData] = useState(null);\r\n  const [vouchers, setVouchers] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState('');\r\n  const [success, setSuccess] = useState('');\r\n\r\n  // Tier configuration\r\n  const tierConfig = {\r\n    BRONZE: { \r\n      name: 'Bronze',\r\n      gradient: 'linear-gradient(135deg, #f7e8d7, #cd7f32)',\r\n      light: '#fcf8f3'\r\n    },\r\n    SILVER: { \r\n      name: 'Silver',\r\n      gradient: 'linear-gradient(135deg, #e6e6e6, #c0c0c0)',\r\n      light: '#f8f8f8'\r\n    },\r\n    GOLD: { \r\n      name: 'Gold',\r\n      gradient: 'linear-gradient(135deg, #fdf5a6, #ffd700)',\r\n      light: '#fffdf0'\r\n    },\r\n    PLATINUM: { \r\n      name: 'Platinum',\r\n      gradient: 'linear-gradient(135deg, #f0f0f0, #e5e4e2)',\r\n      light: '#fafafa'\r\n    }\r\n  };\r\n\r\n  // Fetch data\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const token = UserService.getToken();\r\n        if (!token) return;\r\n\r\n        const dashboardResponse = await axios.get('http://localhost:8081/api/member/dashboard', {\r\n          headers: { Authorization: `Bearer ${token}` }\r\n        });\r\n\r\n        setDashboardData(dashboardResponse.data);\r\n        \r\n        // Map backend vouchers to frontend format\r\n        const backendVouchers = dashboardResponse.data.redeemableVouchers.map(voucher => {\r\n          // Handle different discount types\r\n          let title, discount;\r\n          if (voucher.discountType === 'percentage') {\r\n            title = `${voucher.discountValue}% Discount`;\r\n            discount = `${voucher.discountValue}% OFF`;\r\n          } else {\r\n            title = `RM${voucher.discountValue} Discount`;\r\n            discount = `RM${voucher.discountValue} OFF`;\r\n          }\r\n          \r\n          return {\r\n            id: voucher.id,\r\n            title: title,\r\n            description: \"Special offer for members\",\r\n            discount: discount,\r\n            expiry: voucher.expiryDate,\r\n            points: voucher.requestPoints,\r\n            discountValue: voucher.discountValue,  // Changed from discountAmount\r\n            discountType: voucher.discountType\r\n          };\r\n        });\r\n        \r\n        setVouchers(backendVouchers);\r\n      } catch (err) {\r\n        console.error('Error fetching voucher data:', err);\r\n        setError('Failed to load voucher data. Please try again later.');\r\n        if (onError) onError('Failed to load voucher data. Please try again later.');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  const handleRedeemVoucher = async (voucher) => {\r\n    setRedeemingId(voucher.id);\r\n    setError('');\r\n    setSuccess('');\r\n    \r\n    try {\r\n      const token = UserService.getToken();\r\n      if (!token) return;\r\n\r\n      const response = await axios.post(\r\n        `http://localhost:8081/api/voucher-redemption/redeem/${voucher.id}`,\r\n        {},\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      );\r\n\r\n      if (response.data) {\r\n        const successMsg = `Successfully redeemed voucher: ${response.data.voucherCode}`;\r\n        setSuccess(successMsg);\r\n        if (onSuccess) onSuccess(successMsg);\r\n        \r\n        // Refresh voucher data\r\n        const dashboardResponse = await axios.get('http://localhost:8081/api/member/dashboard', {\r\n          headers: { Authorization: `Bearer ${token}` }\r\n        });\r\n        \r\n        const updatedVouchers = dashboardResponse.data.redeemableVouchers.map(v => {\r\n          let title, discount;\r\n          if (v.discountType === 'percentage') {\r\n            title = `${v.discountValue}% Discount`;\r\n            discount = `${v.discountValue}% OFF`;\r\n          } else {\r\n            title = `RM${v.discountValue} Discount`;\r\n            discount = `RM${v.discountValue} OFF`;\r\n          }\r\n          return {\r\n            id: v.id,\r\n            title: title,\r\n            description: \"Special offer for members\",\r\n            discount: discount,\r\n            expiry: v.expiryDate,\r\n            points: v.requestPoints,\r\n            discountValue: v.discountValue,\r\n            discountType: v.discountType\r\n          };\r\n        });\r\n        \r\n        setVouchers(updatedVouchers);\r\n        setDashboardData(dashboardResponse.data);\r\n      }\r\n    } catch (err) {\r\n      console.error('Error redeeming voucher:', err);\r\n      const errorMsg = err.response?.data?.message || 'Failed to redeem voucher';\r\n      setError(errorMsg);\r\n      if (onError) onError(errorMsg);\r\n    } finally {\r\n      setRedeemingId(null);\r\n    }\r\n  };\r\n\r\n  const handleCloseSnackbar = () => {\r\n    setError('');\r\n    setSuccess('');\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <Box sx={{ display: 'flex', justifyContent: 'center', mt: 4 }}>\r\n        <CircularProgress size={60} sx={{ color: theme.palette.primary.main }} />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  // Use tier from dashboard if available\r\n  const memberTier = dashboardData?.tierName || 'GOLD';\r\n  const currentTier = tierConfig[memberTier.toUpperCase()] || tierConfig.GOLD;\r\n  const currentPoints = dashboardData?.pointBalance || 0;\r\n\r\n  return (\r\n    <Box>\r\n      {error && (\r\n        <Alert severity=\"error\" onClose={handleCloseSnackbar} sx={{ mb: 3 }}>\r\n          {error}\r\n        </Alert>\r\n      )}\r\n      \r\n      {success && (\r\n        <Alert severity=\"success\" onClose={handleCloseSnackbar} sx={{ mb: 3 }}>\r\n          {success}\r\n        </Alert>\r\n      )}\r\n\r\n      <Typography variant=\"h4\" fontWeight=\"bold\" sx={{ mb: 3 }}>\r\n        Redeem Vouchers\r\n      </Typography>\r\n      \r\n      <Box sx={{ \r\n        bgcolor: alpha(theme.palette.primary.light, 0.1), \r\n        p: 3, \r\n        borderRadius: 3,\r\n        mb: 4\r\n      }}>\r\n        <Grid container alignItems=\"center\">\r\n          <Grid item xs={12} md={8}>\r\n            <Typography variant=\"h5\" sx={{ mb: 1 }}>\r\n              {currentTier.name} Tier Benefits\r\n            </Typography>\r\n            <Typography variant=\"body1\" sx={{ mb: 2 }}>\r\n              {dashboardData?.benefits || \"Premium benefits for loyal members\"}\r\n            </Typography>\r\n            <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n              <Chip \r\n                label={`${currentPoints} Points`} \r\n                color=\"primary\"\r\n                sx={{ fontWeight: 'bold', mr: 2 }}\r\n              />\r\n              <Typography variant=\"body2\">\r\n                Available for redemption\r\n              </Typography>\r\n            </Box>\r\n          </Grid>\r\n          <Grid item xs={12} md={4} sx={{ textAlign: 'right' }}>\r\n            <Box sx={{\r\n              display: 'inline-flex',\r\n              alignItems: 'center',\r\n              justifyContent: 'center',\r\n              width: 80,\r\n              height: 80,\r\n              borderRadius: '50%',\r\n              background: currentTier.gradient,\r\n              boxShadow: 3\r\n            }}>\r\n              <Typography variant=\"h4\" fontWeight=\"bold\" color=\"white\">\r\n                {memberTier.charAt(0)}\r\n              </Typography>\r\n            </Box>\r\n          </Grid>\r\n        </Grid>\r\n      </Box>\r\n\r\n      {vouchers.length === 0 ? (\r\n        <Alert severity=\"info\" sx={{ borderRadius: 3, boxShadow: 1 }}>\r\n          No redeemable vouchers available for your tier\r\n        </Alert>\r\n      ) : (\r\n        <Grid container spacing={3}>\r\n          {vouchers.map((voucher, index) => {\r\n            const backgroundColor = voucher.discountValue > 30 \r\n              ? '#e8f5e8' \r\n              : voucher.discountValue > 15 \r\n                ? '#fff3e0' \r\n                : '#f3e5f5';\r\n            \r\n            return (\r\n              <Grid item xs={12} sm={6} md={4} key={voucher.id}>\r\n                <Grow in timeout={index * 200}>\r\n                  <Card sx={{ \r\n                    height: '100%',\r\n                    borderRadius: 3,\r\n                    overflow: 'hidden',\r\n                    boxShadow: '0 6px 16px rgba(0,0,0,0.08)',\r\n                    transition: 'transform 0.3s',\r\n                    '&:hover': {\r\n                      transform: 'translateY(-5px)',\r\n                      boxShadow: '0 12px 28px rgba(0,0,0,0.15)'\r\n                    }\r\n                  }}>\r\n                    <Box sx={{ \r\n                      height: 140,\r\n                      background: `linear-gradient(135deg, ${backgroundColor}, ${alpha(backgroundColor, 0.8)})`,\r\n                      display: 'flex',\r\n                      alignItems: 'center',\r\n                      justifyContent: 'center',\r\n                      position: 'relative',\r\n                      overflow: 'hidden'\r\n                    }}>\r\n                      <Box sx={{\r\n                        position: 'absolute',\r\n                        top: -20,\r\n                        right: -20,\r\n                        width: 80,\r\n                        height: 80,\r\n                        borderRadius: '50%',\r\n                        background: alpha(theme.palette.primary.light, 0.2)\r\n                      }} />\r\n                      <Typography variant=\"h1\" fontWeight=\"bold\" sx={{ \r\n                        fontSize: '4rem', \r\n                        opacity: 0.15,\r\n                        position: 'absolute',\r\n                        top: 10,\r\n                        left: 10,\r\n                        lineHeight: 1\r\n                      }}>\r\n                        {voucher.discountValue}%\r\n                      </Typography>\r\n                      <Typography variant=\"h2\" fontWeight=\"bold\" color=\"primary.main\">\r\n                        {voucher.discountValue}%\r\n                      </Typography>\r\n                      <Chip \r\n                        label=\"DISCOUNT\"\r\n                        size=\"small\"\r\n                        sx={{ \r\n                          position: 'absolute',\r\n                          bottom: 10,\r\n                          right: 10,\r\n                          bgcolor: 'rgba(255,255,255,0.9)',\r\n                          fontWeight: 'bold',\r\n                          letterSpacing: 0.5\r\n                        }}\r\n                      />\r\n                    </Box>\r\n                    <CardContent sx={{ p: 3, position: 'relative', zIndex: 1 }}>\r\n                      <Box sx={{ \r\n                        position: 'absolute',\r\n                        top: -20,\r\n                        right: 20,\r\n                        width: 50,\r\n                        height: 50,\r\n                        borderRadius: '50%',\r\n                        background: alpha(theme.palette.primary.light, 0.2),\r\n                        zIndex: -1\r\n                      }} />\r\n                      <Typography variant=\"h5\" fontWeight=\"bold\" sx={{ mb: 1 }}>\r\n                        {voucher.title}\r\n                      </Typography>\r\n                      <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\r\n                        {voucher.description}\r\n                      </Typography>\r\n                      <Box sx={{ \r\n                        display: 'flex', \r\n                        justifyContent: 'space-between', \r\n                        alignItems: 'center', \r\n                        mb: 2,\r\n                        bgcolor: alpha(theme.palette.background.default, 0.5),\r\n                        p: 1.5,\r\n                        borderRadius: 2\r\n                      }}>\r\n                        <Box>\r\n                          <Typography variant=\"caption\" color=\"text.secondary\">\r\n                            Expires\r\n                          </Typography>\r\n                          <Typography variant=\"body2\" fontWeight=\"medium\">\r\n                            {new Date(voucher.expiry).toLocaleDateString()}\r\n                          </Typography>\r\n                        </Box>\r\n                        <Chip \r\n                          label={`${voucher.points} pts`} \r\n                          size=\"medium\"\r\n                          sx={{ \r\n                            bgcolor: alpha(theme.palette.primary.light, 0.2),\r\n                            fontWeight: 'bold',\r\n                            color: 'primary.dark'\r\n                          }}\r\n                        />\r\n                      </Box>\r\n                      <Button\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        startIcon={<VoucherIcon />}\r\n                        onClick={() => handleRedeemVoucher(voucher)}\r\n                        disabled={redeemingId === voucher.id}\r\n                        sx={{ \r\n                          borderRadius: 3,\r\n                          py: 1.5,\r\n                          fontWeight: 'bold',\r\n                          background: 'linear-gradient(45deg, #8e44ad, #732d91)',\r\n                          boxShadow: '0 4px 12px rgba(142, 68, 173, 0.3)',\r\n                          '&:hover': {\r\n                            boxShadow: '0 6px 16px rgba(142, 68, 173, 0.4)'\r\n                          }\r\n                        }}\r\n                      >\r\n                        {redeemingId === voucher.id ? (\r\n                          <CircularProgress size={24} color=\"inherit\" />\r\n                        ) : currentPoints >= voucher.points ? (\r\n                          'Redeem Now'\r\n                        ) : (\r\n                          'Not enough points'\r\n                        )}\r\n                      </Button>\r\n                    </CardContent>\r\n                  </Card>\r\n                </Grow>\r\n              </Grid>\r\n            );\r\n          })}\r\n        </Grid>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default RedeemVoucherPage;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball-frontend/src/components/profile/RedeemVoucherPage.jsx b/pickleball-frontend/src/components/profile/RedeemVoucherPage.jsx
--- a/pickleball-frontend/src/components/profile/RedeemVoucherPage.jsx	(revision 97abd609899a67b781b8ace8e91358a782fc5acd)
+++ b/pickleball-frontend/src/components/profile/RedeemVoucherPage.jsx	(date 1753725614987)
@@ -6,6 +6,7 @@
 import { ConfirmationNumber as VoucherIcon } from '@mui/icons-material';
 import axios from 'axios';
 import UserService from '../../service/UserService';
+import api from '../../api/axiosConfig';
 
 const RedeemVoucherPage = ({ onSuccess, onError }) => {
   const theme = useTheme();
@@ -47,9 +48,7 @@
         const token = UserService.getToken();
         if (!token) return;
 
-        const dashboardResponse = await axios.get('http://localhost:8081/api/member/dashboard', {
-          headers: { Authorization: `Bearer ${token}` }
-        });
+        const dashboardResponse = await api.get('/member/dashboard');
 
         setDashboardData(dashboardResponse.data);
         
@@ -64,7 +63,7 @@
             title = `RM${voucher.discountValue} Discount`;
             discount = `RM${voucher.discountValue} OFF`;
           }
-          
+
           return {
             id: voucher.id,
             title: title,
@@ -236,9 +235,9 @@
       ) : (
         <Grid container spacing={3}>
           {vouchers.map((voucher, index) => {
-            const backgroundColor = voucher.discountValue > 30 
+            const backgroundColor = voucher.discountValue > 30
               ? '#e8f5e8' 
-              : voucher.discountValue > 15 
+              : voucher.discountValue > 15
                 ? '#fff3e0' 
                 : '#f3e5f5';
             
Index: pickleball-frontend/src/components/profile/RewardsPage.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Box,\r\n  Container,\r\n  Typography,\r\n  Tabs,\r\n  Tab,\r\n  CircularProgress,\r\n  Snackbar,\r\n  Alert,\r\n  useTheme,\r\n  alpha,\r\n  Card,\r\n  CardContent,\r\n  Grid,\r\n  Chip,\r\n  Button\r\n} from '@mui/material';\r\nimport ProfileHeader from './ProfileHeader';\r\nimport ProfileNavigation from './ProfileNavigation';\r\nimport ActiveVouchers from './ActiveVouchers';\r\nimport RedeemHistory from './RedeemHistory';\r\nimport RedeemVoucherPage from './RedeemVoucherPage';\r\nimport axios from 'axios';\r\nimport UserService from '../../service/UserService';\r\nimport Diamond from '@mui/icons-material/Diamond';\r\nimport EmojiEventsIcon from '@mui/icons-material/EmojiEvents';\r\nimport LocalOfferIcon from '@mui/icons-material/LocalOffer';\r\nimport TrendingUpIcon from '@mui/icons-material/TrendingUp';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport StarIcon from '@mui/icons-material/Star';\r\nimport WorkspacePremiumIcon from '@mui/icons-material/WorkspacePremium';\r\n\r\nconst RewardsPage = () => {\r\n  const theme = useTheme();\r\n  const [tab, setTab] = useState(0);\r\n  const [userData, setUserData] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState('');\r\n  const [success, setSuccess] = useState('');\r\n  const [dashboardData, setDashboardData] = useState(null);\r\n  const [vouchers, setVouchers] = useState([]);\r\n  const [tierInfo, setTierInfo] = useState(null);\r\n\r\n  // Tier configuration with gradient colors\r\n  const tierConfig = {\r\n    SILVER: {\r\n      color: '#C0C0C0',\r\n      name: 'Silver',\r\n      gradient: 'linear-gradient(135deg, #e6e6e6, #c0c0c0)',\r\n      light: '#f8f8f8',\r\n      discountPercentage: 10\r\n    },\r\n    GOLD: {\r\n      color: '#FFD700',\r\n      name: 'Gold',\r\n      gradient: 'linear-gradient(135deg, #fdf5a6, #ffd700)',\r\n      light: '#fffdf0',\r\n      discountPercentage: 15\r\n    },\r\n    PLATINUM: {\r\n      color: '#E5E4E2',\r\n      name: 'Platinum',\r\n      gradient: 'linear-gradient(135deg, #f0f0f0, #e5e4e2)',\r\n      light: '#fafafa',\r\n      discountPercentage: 20\r\n    },\r\n    VIP: {\r\n      color: '#FF6B6B',\r\n      name: 'VIP',\r\n      gradient: 'linear-gradient(135deg, #ffecd2 0%, #fcb69f 100%)',\r\n      light: '#fff6f0',\r\n      discountPercentage: 25\r\n    }\r\n  };\r\n\r\n  // Fetch dashboard data\r\n  const fetchDashboardData = async () => {\r\n    try {\r\n      const token = UserService.getToken();\r\n      if (!token) return;\r\n      const dashboardResponse = await axios.get('http://localhost:8081/api/member/dashboard', {\r\n        headers: { Authorization: `Bearer ${token}` }\r\n      });\r\n      setDashboardData(dashboardResponse.data);\r\n      // Map backend vouchers to frontend format\r\n      const backendVouchers = dashboardResponse.data.redeemableVouchers.map(voucher => {\r\n        let title, discount;\r\n        if (voucher.discountType === 'percentage') {\r\n          title = `${voucher.discountValue}% Discount`;\r\n          discount = `${voucher.discountValue}% OFF`;\r\n        } else {\r\n          title = `RM${voucher.discountValue} Discount`;\r\n          discount = `RM${voucher.discountValue} OFF`;\r\n        }\r\n        return {\r\n          id: voucher.id,\r\n          title: title,\r\n          description: \"Special offer for members\",\r\n          discount: discount,\r\n          expiry: voucher.expiryDate,\r\n          points: voucher.requestPoints,\r\n          discountValue: voucher.discountValue,\r\n          discountType: voucher.discountType\r\n        };\r\n      });\r\n      setVouchers(backendVouchers);\r\n    } catch (err) {\r\n      setError('Failed to load dashboard data');\r\n    }\r\n  };\r\n\r\n  // Fetch tier information\r\n  const fetchTierInfo = async () => {\r\n    try {\r\n      const token = UserService.getToken();\r\n      const response = await axios.get('http://localhost:8081/api/member/debug/tier-info', {\r\n        headers: { Authorization: `Bearer ${token}` }\r\n      });\r\n      setTierInfo(response.data);\r\n    } catch (err) {\r\n      // ignore\r\n    }\r\n  };\r\n\r\n  // Get next tier info\r\n  const getNextTierInfo = () => {\r\n    if (!tierInfo?.allTiers) return null;\r\n    const currentTier = tierInfo.allTiers.find(t => t.id === tierInfo.currentTierId);\r\n    if (!currentTier) return null;\r\n    const currentIndex = tierInfo.allTiers.findIndex(t => t.id === tierInfo.currentTierId);\r\n    const nextTier = tierInfo.allTiers[currentIndex + 1];\r\n    if (!nextTier) return null;\r\n    return {\r\n      name: nextTier.name,\r\n      minPoints: nextTier.minPoints,\r\n      pointsNeeded: nextTier.minPoints - tierInfo.pointBalance\r\n    };\r\n  };\r\n\r\n  // Calculate progress percentage\r\n  const calculateProgress = () => {\r\n    if (!tierInfo || !getNextTierInfo()) return 0;\r\n    const currentTierMinPoints = tierInfo.currentTierMinPoints || 0;\r\n    const nextTierMinPoints = getNextTierInfo().minPoints;\r\n    const currentPoints = tierInfo.pointBalance || 0;\r\n    if (nextTierMinPoints <= currentTierMinPoints) return 100;\r\n    const progress = ((currentPoints - currentTierMinPoints) / (nextTierMinPoints - currentTierMinPoints)) * 100;\r\n    return Math.min(Math.max(progress, 0), 100);\r\n  };\r\n  const progressToNextTier = calculateProgress();\r\n\r\n  // Fetch user data and dashboard data\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const token = UserService.getToken();\r\n        if (!token) return;\r\n        const profileResponse = await axios.get('http://localhost:8081/api/profile', {\r\n          headers: { Authorization: `Bearer ${token}` }\r\n        });\r\n        setUserData(profileResponse.data);\r\n        await Promise.all([\r\n          fetchDashboardData(),\r\n          fetchTierInfo()\r\n        ]);\r\n      } catch (err) {\r\n        setError('Failed to load data. Please try again later.');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, []);\r\n\r\n  // Use dashboard data if available\r\n  const currentPoints = dashboardData?.pointBalance || 0;\r\n  const memberTier = tierInfo?.currentTierName || dashboardData?.tierName || 'GOLD';\r\n  const currentTier = tierConfig[memberTier.toUpperCase()] || tierConfig.GOLD;\r\n  const nextTier = getNextTierInfo();\r\n  const pointsToNext = nextTier ? nextTier.pointsNeeded : 0;\r\n\r\n  const handleTabChange = (event, newValue) => setTab(newValue);\r\n  const handleCloseSnackbar = () => { setError(''); setSuccess(''); };\r\n\r\n  if (loading) {\r\n    return (\r\n      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '80vh' }}>\r\n        <CircularProgress size={60} sx={{ color: theme.palette.primary.main }} />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Box sx={{ minHeight: '100vh', py: 1, backgroundColor: theme.palette.background.default }}>\r\n      <Container maxWidth={false} sx={{ maxWidth: '1200px', mx: 'auto', px: { xs: 1, sm: 2, lg: 3 } }}>\r\n        <Box sx={{ display: 'flex', gap: { xs: 2, lg: 3 }, alignItems: 'flex-start', flexDirection: { xs: 'column', lg: 'row' }, width: '100%' }}>\r\n          {/* 左侧栏 */}\r\n          <Box sx={{ width: { xs: '100%', lg: '260px' }, flexShrink: 0, position: { lg: 'sticky' }, top: { lg: 20 }, height: 'fit-content', display: 'flex', flexDirection: 'column', gap: 2 }}>\r\n            <Box sx={{ backgroundColor: theme.palette.background.paper, borderRadius: 2, boxShadow: theme.shadows[1], p: 2.5, border: `1px solid ${alpha(theme.palette.divider, 0.1)}`, position: 'relative' }}>\r\n              <ProfileHeader profile={userData} />\r\n            </Box>\r\n            <Box sx={{ backgroundColor: theme.palette.background.paper, borderRadius: 2, boxShadow: theme.shadows[1], p: 1.5, border: `1px solid ${alpha(theme.palette.divider, 0.1)}` }}>\r\n              <ProfileNavigation />\r\n            </Box>\r\n          </Box>\r\n          \r\n          {/* 右侧内容区 - 改进版 */}\r\n          <Box sx={{ flex: 1, minWidth: 0, width: { xs: '100%', lg: 'calc(100% - 260px - 24px)' }, overflow: 'hidden' }}>\r\n            <Snackbar open={!!error || !!success} autoHideDuration={6000} onClose={handleCloseSnackbar} anchorOrigin={{ vertical: 'top', horizontal: 'center' }}>\r\n              <Alert severity={error ? 'error' : 'success'} onClose={handleCloseSnackbar} sx={{ width: 'auto', boxShadow: '0 4px 20px rgba(0,0,0,0.15)', backdropFilter: 'blur(10px)', background: alpha(theme.palette.background.paper, 0.9) }}>{error || success}</Alert>\r\n            </Snackbar>\r\n            \r\n            {/* 主内容卡片 */}\r\n            <Card sx={{ \r\n              borderRadius: 3, \r\n              boxShadow: '0 8px 32px rgba(0,0,0,0.08)', \r\n              border: `1px solid ${alpha(theme.palette.divider, 0.1)}`,\r\n              overflow: 'hidden',\r\n              background: `linear-gradient(145deg, ${theme.palette.background.paper} 0%, ${alpha(theme.palette.primary.main, 0.02)} 100%)`\r\n            }}>\r\n              {/* 标签栏 */}\r\n              <Box sx={{ \r\n                borderBottom: `1px solid ${alpha(theme.palette.divider, 0.1)}`,\r\n                background: alpha(theme.palette.background.paper, 0.8),\r\n                backdropFilter: 'blur(10px)'\r\n              }}>\r\n                <Tabs \r\n                  value={tab} \r\n                  onChange={handleTabChange} \r\n                  variant=\"scrollable\" \r\n                  scrollButtons=\"auto\"\r\n                  sx={{ \r\n                    px: 3,\r\n                    '& .MuiTab-root': {\r\n                      textTransform: 'none',\r\n                      fontWeight: 600,\r\n                      fontSize: '1rem',\r\n                      minHeight: 60,\r\n                      color: theme.palette.text.secondary,\r\n                      '&.Mui-selected': {\r\n                        color: theme.palette.primary.main\r\n                      }\r\n                    },\r\n                    '& .MuiTabs-indicator': {\r\n                      height: 3,\r\n                      borderRadius: '3px 3px 0 0'\r\n                    }\r\n                  }}\r\n                >\r\n                  <Tab label=\"Rewards Dashboard\" icon={<WorkspacePremiumIcon />} iconPosition=\"start\" />\r\n                  <Tab label=\"Active Vouchers\" icon={<LocalOfferIcon />} iconPosition=\"start\" />\r\n                  <Tab label=\"Redeem History\" icon={<TrendingUpIcon />} iconPosition=\"start\" />\r\n                  <Tab label=\"Redeem Voucher\" icon={<StarIcon />} iconPosition=\"start\" />\r\n                </Tabs>\r\n              </Box>\r\n\r\n              {/* 内容区域 */}\r\n              <CardContent sx={{ p: { xs: 3, md: 4 } }}>\r\n                {tab === 0 && (\r\n                  <Box\r\n                    sx={{\r\n                      backgroundColor: theme.palette.background.paper,\r\n                      borderRadius: 3,\r\n                      boxShadow: theme.shadows[2],\r\n                      border: `1px solid ${alpha(theme.palette.divider, 0.08)}`,\r\n                      p: { xs: 2, md: 4 },\r\n                      mb: 3,\r\n                      width: '100%',\r\n                      boxSizing: 'border-box',\r\n                    }}\r\n                  >\r\n                    {/* 头部徽章与积分 */}\r\n                    <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center', mb: 3 }}>\r\n                      <Box\r\n                        sx={{\r\n                          width: 80,\r\n                          height: 80,\r\n                          borderRadius: '50%',\r\n                          background: theme.palette.background.default,\r\n                          border: `5px solid ${currentTier.color}`,\r\n                          display: 'flex',\r\n                          alignItems: 'center',\r\n                          justifyContent: 'center',\r\n                          mb: 1.5,\r\n                          boxShadow: theme.shadows[2],\r\n                        }}\r\n                      >\r\n                        <Diamond sx={{ color: currentTier.color, fontSize: 44 }} />\r\n                      </Box>\r\n                      <Typography variant=\"h3\" fontWeight=\"bold\" color={theme.palette.text.primary}>\r\n                        {currentPoints}\r\n                      </Typography>\r\n                      <Chip\r\n                        label={`${currentTier.name} Tier`}\r\n                        size=\"small\"\r\n                        sx={{\r\n                          mt: 1,\r\n                          fontWeight: 600,\r\n                          color: currentTier.color,\r\n                          borderColor: currentTier.color,\r\n                          background: alpha(currentTier.color, 0.08),\r\n                          borderWidth: 1,\r\n                          borderStyle: 'solid',\r\n                          letterSpacing: 1,\r\n                        }}\r\n                        variant=\"outlined\"\r\n                      />\r\n                    </Box>\r\n                    {/* 进度条与标签 */}\r\n                    <Box sx={{ mb: 3 }}>\r\n                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n                        <Box\r\n                          sx={{\r\n                            width: 12,\r\n                            height: 12,\r\n                            borderRadius: '50%',\r\n                            background: currentTier.color,\r\n                          }}\r\n                        />\r\n                        <Box sx={{ flex: 1 }}>\r\n                          <LinearProgress\r\n                            variant=\"determinate\"\r\n                            value={progressToNextTier}\r\n                            sx={{\r\n                              height: 12,\r\n                              borderRadius: 6,\r\n                              background: alpha(currentTier.color, 0.08),\r\n                              '& .MuiLinearProgress-bar': {\r\n                                backgroundColor: currentTier.color,\r\n                              },\r\n                            }}\r\n                          />\r\n                        </Box>\r\n                        <Box\r\n                          sx={{\r\n                            width: 12,\r\n                            height: 12,\r\n                            borderRadius: '50%',\r\n                            background: nextTier ? (tierConfig[nextTier.name?.toUpperCase()]?.color || theme.palette.grey[400]) : currentTier.color,\r\n                          }}\r\n                        />\r\n                        <Typography variant=\"body2\" sx={{ ml: 2, minWidth: 60, textAlign: 'right', color: currentTier.color }}>\r\n                          {progressToNextTier.toFixed(0)}%\r\n                        </Typography>\r\n                      </Box>\r\n                      <Box sx={{ display: 'flex', justifyContent: 'center', mt: 1 }}>\r\n                        <Chip\r\n                          label={\r\n                            pointsToNext > 0\r\n                              ? `还需 ${pointsToNext} 分升级到 ${nextTier?.name || ''}`\r\n                              : '已达最高等级'\r\n                          }\r\n                          size=\"small\"\r\n                          sx={{\r\n                            background: pointsToNext > 0 ? alpha(currentTier.color, 0.12) : alpha(theme.palette.success.main, 0.12),\r\n                            color: pointsToNext > 0 ? currentTier.color : theme.palette.success.main,\r\n                            fontWeight: 500,\r\n                            fontSize: 14,\r\n                          }}\r\n                        />\r\n                      </Box>\r\n                    </Box>\r\n                    {/* 统计卡片 */}\r\n                    <Grid container spacing={2} sx={{ mt: 1 }}>\r\n                      <Grid item xs={12} md={4}>\r\n                        <Card\r\n                          sx={{\r\n                            borderRadius: 3,\r\n                            boxShadow: theme.shadows[1],\r\n                            transition: 'box-shadow 0.2s',\r\n                            '&:hover': { boxShadow: theme.shadows[4] },\r\n                            p: 2,\r\n                            textAlign: 'center',\r\n                          }}\r\n                        >\r\n                          <EmojiEventsIcon color=\"primary\" sx={{ fontSize: 36, mb: 1 }} />\r\n                          <Typography variant=\"h5\" fontWeight=\"bold\" color={theme.palette.primary.main}>\r\n                            {dashboardData?.rewardsEarned || 0}\r\n                          </Typography>\r\n                          <Typography variant=\"body2\" color=\"text.secondary\">\r\n                            Rewards Earned\r\n                          </Typography>\r\n                        </Card>\r\n                      </Grid>\r\n                      <Grid item xs={12} md={4}>\r\n                        <Card\r\n                          sx={{\r\n                            borderRadius: 3,\r\n                            boxShadow: theme.shadows[1],\r\n                            transition: 'box-shadow 0.2s',\r\n                            '&:hover': { boxShadow: theme.shadows[4] },\r\n                            p: 2,\r\n                            textAlign: 'center',\r\n                          }}\r\n                        >\r\n                          <TrendingUpIcon color=\"success\" sx={{ fontSize: 36, mb: 1 }} />\r\n                          <Typography variant=\"h5\" fontWeight=\"bold\" color={theme.palette.success.main}>\r\n                            {dashboardData?.monthsActive || 0}\r\n                          </Typography>\r\n                          <Typography variant=\"body2\" color=\"text.secondary\">\r\n                            Months Active\r\n                          </Typography>\r\n                        </Card>\r\n                      </Grid>\r\n                      <Grid item xs={12} md={4}>\r\n                        <Card\r\n                          sx={{\r\n                            borderRadius: 3,\r\n                            boxShadow: theme.shadows[1],\r\n                            transition: 'box-shadow 0.2s',\r\n                            '&:hover': { boxShadow: theme.shadows[4] },\r\n                            p: 2,\r\n                            textAlign: 'center',\r\n                          }}\r\n                        >\r\n                          <LocalOfferIcon color=\"info\" sx={{ fontSize: 36, mb: 1 }} />\r\n                          <Typography variant=\"h5\" fontWeight=\"bold\" color={theme.palette.info.main}>\r\n                            {vouchers.length}\r\n                          </Typography>\r\n                          <Typography variant=\"body2\" color=\"text.secondary\">\r\n                            Available Vouchers\r\n                          </Typography>\r\n                        </Card>\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Box>\r\n                )}\r\n                {tab === 1 && <ActiveVouchers />}\r\n                {tab === 2 && <RedeemHistory />}\r\n                {tab === 3 && <RedeemVoucherPage onSuccess={setSuccess} onError={setError} />}\r\n              </CardContent>\r\n            </Card>\r\n          </Box>\r\n        </Box>\r\n      </Container>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default RewardsPage;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball-frontend/src/components/profile/RewardsPage.jsx b/pickleball-frontend/src/components/profile/RewardsPage.jsx
--- a/pickleball-frontend/src/components/profile/RewardsPage.jsx	(revision 97abd609899a67b781b8ace8e91358a782fc5acd)
+++ b/pickleball-frontend/src/components/profile/RewardsPage.jsx	(date 1753744074211)
@@ -16,8 +16,6 @@
   Chip,
   Button
 } from '@mui/material';
-import ProfileHeader from './ProfileHeader';
-import ProfileNavigation from './ProfileNavigation';
 import ActiveVouchers from './ActiveVouchers';
 import RedeemHistory from './RedeemHistory';
 import RedeemVoucherPage from './RedeemVoucherPage';
@@ -194,31 +192,20 @@
   return (
     <Box sx={{ minHeight: '100vh', py: 1, backgroundColor: theme.palette.background.default }}>
       <Container maxWidth={false} sx={{ maxWidth: '1200px', mx: 'auto', px: { xs: 1, sm: 2, lg: 3 } }}>
-        <Box sx={{ display: 'flex', gap: { xs: 2, lg: 3 }, alignItems: 'flex-start', flexDirection: { xs: 'column', lg: 'row' }, width: '100%' }}>
-          {/* 左侧栏 */}
-          <Box sx={{ width: { xs: '100%', lg: '260px' }, flexShrink: 0, position: { lg: 'sticky' }, top: { lg: 20 }, height: 'fit-content', display: 'flex', flexDirection: 'column', gap: 2 }}>
-            <Box sx={{ backgroundColor: theme.palette.background.paper, borderRadius: 2, boxShadow: theme.shadows[1], p: 2.5, border: `1px solid ${alpha(theme.palette.divider, 0.1)}`, position: 'relative' }}>
-              <ProfileHeader profile={userData} />
-            </Box>
-            <Box sx={{ backgroundColor: theme.palette.background.paper, borderRadius: 2, boxShadow: theme.shadows[1], p: 1.5, border: `1px solid ${alpha(theme.palette.divider, 0.1)}` }}>
-              <ProfileNavigation />
-            </Box>
-          </Box>
-          
-          {/* 右侧内容区 - 改进版 */}
-          <Box sx={{ flex: 1, minWidth: 0, width: { xs: '100%', lg: 'calc(100% - 260px - 24px)' }, overflow: 'hidden' }}>
-            <Snackbar open={!!error || !!success} autoHideDuration={6000} onClose={handleCloseSnackbar} anchorOrigin={{ vertical: 'top', horizontal: 'center' }}>
-              <Alert severity={error ? 'error' : 'success'} onClose={handleCloseSnackbar} sx={{ width: 'auto', boxShadow: '0 4px 20px rgba(0,0,0,0.15)', backdropFilter: 'blur(10px)', background: alpha(theme.palette.background.paper, 0.9) }}>{error || success}</Alert>
-            </Snackbar>
-            
-            {/* 主内容卡片 */}
-            <Card sx={{ 
-              borderRadius: 3, 
-              boxShadow: '0 8px 32px rgba(0,0,0,0.08)', 
-              border: `1px solid ${alpha(theme.palette.divider, 0.1)}`,
-              overflow: 'hidden',
-              background: `linear-gradient(145deg, ${theme.palette.background.paper} 0%, ${alpha(theme.palette.primary.main, 0.02)} 100%)`
-            }}>
+        {/* 移除重复的左侧栏，直接显示内容 */}
+        <Box sx={{ width: '100%' }}>
+          <Snackbar open={!!error || !!success} autoHideDuration={6000} onClose={handleCloseSnackbar} anchorOrigin={{ vertical: 'top', horizontal: 'center' }}>
+            <Alert severity={error ? 'error' : 'success'} onClose={handleCloseSnackbar} sx={{ width: 'auto', boxShadow: '0 4px 20px rgba(0,0,0,0.15)', backdropFilter: 'blur(10px)', background: alpha(theme.palette.background.paper, 0.9) }}>{error || success}</Alert>
+          </Snackbar>
+          
+          {/* 主内容卡片 */}
+          <Card sx={{ 
+            borderRadius: 3, 
+            boxShadow: '0 8px 32px rgba(0,0,0,0.08)', 
+            border: `1px solid ${alpha(theme.palette.divider, 0.1)}`,
+            overflow: 'hidden',
+            background: `linear-gradient(145deg, ${theme.palette.background.paper} 0%, ${alpha(theme.palette.primary.main, 0.02)} 100%)`
+          }}>
               {/* 标签栏 */}
               <Box sx={{ 
                 borderBottom: `1px solid ${alpha(theme.palette.divider, 0.1)}`,
@@ -432,7 +419,6 @@
               </CardContent>
             </Card>
           </Box>
-        </Box>
       </Container>
     </Box>
   );
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/EventFilterDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.dto;\r\n\r\nimport lombok.Data;\r\nimport java.time.LocalDateTime;\r\n\r\n@Data\r\npublic class EventFilterDto {\r\n    private String eventType; // tournament, league, friendly match\r\n    private String skillLevel; // beginner, intermediate, advanced\r\n    private String location;\r\n    private LocalDateTime startDate;\r\n    private LocalDateTime endDate;\r\n    private String status; // PUBLISHED, DRAFT, CANCELLED\r\n    private String eligibility; // GOLD, SILVER, PLATINUM\r\n    private String searchKeyword; // search in title\r\n    private Integer page = 0;\r\n    private Integer size = 10;\r\n    private String sortBy = \"startTime\";\r\n    private String sortDirection = \"ASC\";\r\n} 
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/EventFilterDto.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/EventFilterDto.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/EventFilterDto.java	(revision 97abd609899a67b781b8ace8e91358a782fc5acd)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/EventFilterDto.java	(date 1753722380890)
@@ -6,12 +6,10 @@
 @Data
 public class EventFilterDto {
     private String eventType; // tournament, league, friendly match
-    private String skillLevel; // beginner, intermediate, advanced
     private String location;
     private LocalDateTime startDate;
     private LocalDateTime endDate;
     private String status; // PUBLISHED, DRAFT, CANCELLED
-    private String eligibility; // GOLD, SILVER, PLATINUM
     private String searchKeyword; // search in title
     private Integer page = 0;
     private Integer size = 10;
Index: pickleball-frontend/src/components/profile/ProfileNavigation.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React from 'react';\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\nimport {\r\n  List,\r\n  ListItem,\r\n  ListItemButton,\r\n  ListItemIcon,\r\n  ListItemText,\r\n  Divider,\r\n  Box,\r\n  useTheme,\r\n  alpha\r\n} from '@mui/material';\r\nimport {\r\n  Person as PersonIcon,\r\n  CalendarToday as BookingsIcon,\r\n  SportsTennis as GamesIcon,\r\n  Receipt as InvoicesIcon,\r\n  Redeem as RewardsIcon,\r\n  Settings as SettingsIcon,\r\n  Notifications as NotificationsIcon,\r\n  RateReview as FeedbackIcon,\r\n  Language as LanguageIcon\r\n} from '@mui/icons-material';\r\n\r\nconst ProfileNavigation = (props) => {\r\n  const theme = useTheme();\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n\r\n  const handleNavigation = (path) => {\r\n    navigate(path);\r\n    // If you have a mobile menu that needs to close, you could add:\r\n    // handleCloseMenu(); \r\n  };\r\n\r\n  const handleViewChange = (view) => {\r\n    props.setActiveView(view);\r\n  };\r\n\r\n  const handleFeedbackNavigation = () => {\r\n    // Navigate to the feedback selection page\r\n            navigate('/profile/my-bookings');\r\n  };\r\n\r\n  // Helper to check if a path is active\r\n  const isActive = (path) => location.pathname === path;\r\n\r\n  return (\r\n    <Box>\r\n      {/* ME Section */}\r\n      <List>\r\n        <ListItem disablePadding>\r\n          <ListItemButton\r\n            onClick={() => handleNavigation('/profile')}\r\n            selected={isActive('/profile')}\r\n            sx={isActive('/profile') ? {\r\n              background: alpha(theme.palette.primary.main, 0.12),\r\n              color: theme.palette.primary.main,\r\n              fontWeight: 700,\r\n              '& .MuiListItemIcon-root': { color: theme.palette.primary.main },\r\n              '&:hover': { background: alpha(theme.palette.primary.main, 0.18) }\r\n            } : {}}\r\n          >\r\n            <ListItemIcon>\r\n              <PersonIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"My Profile\" />\r\n          </ListItemButton>\r\n        </ListItem>\r\n        <ListItem disablePadding>\r\n          <ListItemButton\r\n            onClick={() => handleNavigation('/profile/my-bookings')}\r\n            selected={isActive('/profile/my-bookings')}\r\n            sx={isActive('/profile/my-bookings') ? {\r\n              background: alpha(theme.palette.primary.main, 0.12),\r\n              color: theme.palette.primary.main,\r\n              fontWeight: 700,\r\n              '& .MuiListItemIcon-root': { color: theme.palette.primary.main },\r\n              '&:hover': { background: alpha(theme.palette.primary.main, 0.18) }\r\n            } : {}}\r\n          >\r\n            <ListItemIcon>\r\n              <BookingsIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"My Bookings\" />\r\n          </ListItemButton>\r\n        </ListItem>\r\n        <ListItem disablePadding>\r\n          <ListItemButton\r\n            onClick={() => handleNavigation('/profile/my-games')}\r\n            selected={isActive('/profile/my-games')}\r\n            sx={isActive('/profile/my-games') ? {\r\n              background: alpha(theme.palette.primary.main, 0.12),\r\n              color: theme.palette.primary.main,\r\n              fontWeight: 700,\r\n              '& .MuiListItemIcon-root': { color: theme.palette.primary.main },\r\n              '&:hover': { background: alpha(theme.palette.primary.main, 0.18) }\r\n            } : {}}\r\n          >\r\n            <ListItemIcon>\r\n              <GamesIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"My Games\" />\r\n          </ListItemButton>\r\n        </ListItem>\r\n        <ListItem disablePadding>\r\n          <ListItemButton\r\n            onClick={() => handleNavigation('/profile/my-invoices')}\r\n            selected={isActive('/profile/my-invoices')}\r\n            sx={isActive('/profile/my-invoices') ? {\r\n              background: alpha(theme.palette.primary.main, 0.12),\r\n              color: theme.palette.primary.main,\r\n              fontWeight: 700,\r\n              '& .MuiListItemIcon-root': { color: theme.palette.primary.main },\r\n              '&:hover': { background: alpha(theme.palette.primary.main, 0.18) }\r\n            } : {}}\r\n          >\r\n            <ListItemIcon>\r\n              <InvoicesIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"My Invoices\" />\r\n          </ListItemButton>\r\n        </ListItem>\r\n        <ListItem disablePadding>\r\n          <ListItemButton\r\n            onClick={() => handleNavigation('/profile/rewards')}\r\n            selected={isActive('/profile/rewards')}\r\n            sx={isActive('/profile/rewards') ? {\r\n              background: alpha(theme.palette.primary.main, 0.12),\r\n              color: theme.palette.primary.main,\r\n              fontWeight: 700,\r\n              '& .MuiListItemIcon-root': { color: theme.palette.primary.main },\r\n              '&:hover': { background: alpha(theme.palette.primary.main, 0.18) }\r\n            } : {}}\r\n          >\r\n            <ListItemIcon>\r\n              <RewardsIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Rewards\" />\r\n          </ListItemButton>\r\n        </ListItem>\r\n        <ListItem disablePadding>\r\n          <ListItemButton\r\n            onClick={() => handleNavigation('/profile/my-feedback')}\r\n            selected={isActive('/profile/my-feedback')}\r\n            sx={isActive('/profile/my-feedback') ? {\r\n              background: alpha(theme.palette.primary.main, 0.12),\r\n              color: theme.palette.primary.main,\r\n              fontWeight: 700,\r\n              '& .MuiListItemIcon-root': { color: theme.palette.primary.main },\r\n              '&:hover': { background: alpha(theme.palette.primary.main, 0.18) }\r\n            } : {}}\r\n          >\r\n            <ListItemIcon>\r\n              <FeedbackIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"My Feedback\" />\r\n          </ListItemButton>\r\n        </ListItem>\r\n      </List>\r\n\r\n      <Divider sx={{ my: 1 }} />\r\n\r\n      {/* ACCOUNT SETTINGS Section */}\r\n      <List>\r\n        <ListItem disablePadding>\r\n          <ListItemButton\r\n            onClick={() => handleNavigation('/profile/edit-profile')}\r\n            selected={isActive('/profile/edit-profile')}\r\n            sx={isActive('/profile/edit-profile') ? {\r\n              background: alpha(theme.palette.primary.main, 0.12),\r\n              color: theme.palette.primary.main,\r\n              fontWeight: 700,\r\n              '& .MuiListItemIcon-root': { color: theme.palette.primary.main },\r\n              '&:hover': { background: alpha(theme.palette.primary.main, 0.18) }\r\n            } : {}}\r\n          >\r\n            <ListItemIcon>\r\n              <SettingsIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Edit Profile\" />\r\n          </ListItemButton>\r\n        </ListItem>\r\n        <ListItem disablePadding>\r\n          <ListItemButton\r\n            onClick={() => handleNavigation('/profile/notifications')}\r\n            selected={isActive('/profile/notifications')}\r\n            sx={isActive('/profile/notifications') ? {\r\n              background: alpha(theme.palette.primary.main, 0.12),\r\n              color: theme.palette.primary.main,\r\n              fontWeight: 700,\r\n              '& .MuiListItemIcon-root': { color: theme.palette.primary.main },\r\n              '&:hover': { background: alpha(theme.palette.primary.main, 0.18) }\r\n            } : {}}\r\n          >\r\n            <ListItemIcon>\r\n              <NotificationsIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Notification Preferences\" />\r\n          </ListItemButton>\r\n        </ListItem>\r\n        <ListItem disablePadding>\r\n          <ListItemButton\r\n            onClick={() => handleNavigation('/profile/language')}\r\n            selected={isActive('/profile/language')}\r\n            sx={isActive('/profile/language') ? {\r\n              background: alpha(theme.palette.primary.main, 0.12),\r\n              color: theme.palette.primary.main,\r\n              fontWeight: 700,\r\n              '& .MuiListItemIcon-root': { color: theme.palette.primary.main },\r\n              '&:hover': { background: alpha(theme.palette.primary.main, 0.18) }\r\n            } : {}}\r\n          >\r\n            <ListItemIcon>\r\n              <LanguageIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Language\" />\r\n          </ListItemButton>\r\n        </ListItem>\r\n      </List>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default ProfileNavigation;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball-frontend/src/components/profile/ProfileNavigation.jsx b/pickleball-frontend/src/components/profile/ProfileNavigation.jsx
--- a/pickleball-frontend/src/components/profile/ProfileNavigation.jsx	(revision 97abd609899a67b781b8ace8e91358a782fc5acd)
+++ b/pickleball-frontend/src/components/profile/ProfileNavigation.jsx	(date 1753725682637)
@@ -20,7 +20,8 @@
   Settings as SettingsIcon,
   Notifications as NotificationsIcon,
   RateReview as FeedbackIcon,
-  Language as LanguageIcon
+  Language as LanguageIcon,
+  School as ClassSessionsIcon
 } from '@mui/icons-material';
 
 const ProfileNavigation = (props) => {
@@ -156,6 +157,14 @@
               <FeedbackIcon />
             </ListItemIcon>
             <ListItemText primary="My Feedback" />
+          </ListItemButton>
+        </ListItem>
+        <ListItem disablePadding>
+          <ListItemButton onClick={() => handleNavigation('/profile/my-class-sessions')}>
+            <ListItemIcon>
+              <ClassSessionsIcon />
+            </ListItemIcon>
+            <ListItemText primary="My Class Sessions" />
           </ListItemButton>
         </ListItem>
       </List>
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Event.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.entity;\r\n\r\nimport jakarta.persistence.*;\r\nimport jakarta.validation.constraints.NotBlank;\r\nimport jakarta.validation.constraints.NotNull;\r\nimport jakarta.validation.constraints.Positive;\r\nimport lombok.Data;\r\n\r\nimport java.time.LocalDateTime;\r\n\r\n@Entity\r\n@Data\r\n@Table(name = \"event\")\r\npublic class Event {\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Integer id;\r\n\r\n    @NotBlank(message = \"Title is required\")\r\n    private String title;\r\n\r\n    @NotNull(message = \"Start time is required\")\r\n    @Column(name = \"start_time\")\r\n    private LocalDateTime startTime;\r\n\r\n    @NotNull(message = \"End time is required\")\r\n    @Column(name = \"end_time\")\r\n    private LocalDateTime endTime;\r\n\r\n    @NotBlank(message = \"Event type is required\")\r\n    private String eventType;\r\n    \r\n    @Positive(message = \"Capacity must be positive\")\r\n    private Integer capacity;\r\n    \r\n    @NotBlank(message = \"Location is required\")\r\n    private String location;\r\n    \r\n    private String status;\r\n\r\n    @Column(name = \"organizer_id\")\r\n    private Integer organizerId;\r\n    \r\n    @NotBlank(message = \"Skill level is required\")\r\n    private String skillLevel;\r\n\r\n    @NotBlank(message = \"Eligibility is required\")\r\n    private String eligibility;\r\n\r\n    @NotBlank(message = \"Schedule is required\")\r\n    @Column(columnDefinition = \"TEXT\")\r\n    private String schedule;\r\n\r\n    @Column(name = \"fee_amount\")\r\n    private Double feeAmount;\r\n\r\n    private int registeredCount = 0;\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Event.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Event.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Event.java	(revision 97abd609899a67b781b8ace8e91358a782fc5acd)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Event.java	(date 1753722380897)
@@ -7,6 +7,7 @@
 import lombok.Data;
 
 import java.time.LocalDateTime;
+import java.util.Set;
 
 @Entity
 @Data
@@ -33,20 +34,11 @@
     @Positive(message = "Capacity must be positive")
     private Integer capacity;
     
-    @NotBlank(message = "Location is required")
-    private String location;
-    
     private String status;
 
     @Column(name = "organizer_id")
     private Integer organizerId;
-    
-    @NotBlank(message = "Skill level is required")
-    private String skillLevel;
 
-    @NotBlank(message = "Eligibility is required")
-    private String eligibility;
-
     @NotBlank(message = "Schedule is required")
     @Column(columnDefinition = "TEXT")
     private String schedule;
@@ -56,4 +48,16 @@
 
     private int registeredCount = 0;
 
+    @ManyToMany
+    @JoinTable(
+        name = "event_court",
+        joinColumns = @JoinColumn(name = "event_id"),
+        inverseJoinColumns = @JoinColumn(name = "court_id")
+    )
+    private Set<Court> courts;
+
+    @ManyToOne
+    @JoinColumn(name = "venue_id")
+    private Venue venue; // optional, for full venue booking
+
 }
\ No newline at end of file
Index: pickleball-frontend/src/components/messaging/Conversation.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/components/messaging/Conversation.jsx\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport {\r\n  Box, Paper, Avatar, Typography, TextField,\r\n  Button, IconButton, List, CircularProgress\r\n} from '@mui/material';\r\nimport SendIcon from '@mui/icons-material/Send';\r\nimport InsertPhotoIcon from '@mui/icons-material/InsertPhoto';\r\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\r\nimport MessageBubble from './MessageBubble';\r\nimport messageService from '../../service/MessageService';\r\nimport { useSocket } from '../../context/SocketContext';\r\nimport AttachFileIcon from '@mui/icons-material/AttachFile';\r\nimport { useTheme, alpha } from '@mui/material/styles';\r\n\r\nexport default function Conversation({ otherUser, onBack }) {\r\n  const theme = useTheme();\r\n  const [messages, setMessages] = useState([]);\r\n  const [newMessage, setNewMessage] = useState('');\r\n  const [loading, setLoading] = useState(true);\r\n  const [uploading, setUploading] = useState(false);\r\n  const messagesEndRef = useRef(null);\r\n  const { stompClient } = useSocket();\r\n\r\n  // Get current user\r\n  const currentUser = JSON.parse(localStorage.getItem('currentUser')) || {};\r\n  const fileInputRef = useRef(null);\r\n\r\n  // Fetch message history\r\n  useEffect(() => {\r\n    const fetchMessages = async () => {\r\n      try {\r\n        if (!otherUser?.username) {\r\n          setLoading(false);\r\n          return;\r\n        }\r\n\r\n        const data = await messageService.getConversation(otherUser.username);\r\n\r\n        // Enhance message data\r\n        const enhancedMessages = data.map(msg => ({\r\n          ...msg,\r\n          senderUsername: msg.senderUsername ||\r\n            (msg.sender?.userAccount?.username || '') ||\r\n            (msg.sender?.username || ''),\r\n          senderProfileImage: msg.senderProfileImage ||\r\n            (msg.sender?.profileImage || '') ||\r\n            (msg.sender?.userAccount?.profileImage || ''),\r\n          // Ensure image URLs are absolute\r\n          imageUrl: msg.imageUrl ? msg.imageUrl : null\r\n        }));\r\n\r\n        setMessages(enhancedMessages);\r\n      } catch (error) {\r\n        console.error('Failed to fetch messages', error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    if (otherUser) fetchMessages();\r\n  }, [otherUser]);\r\n\r\n  // Handle WebSocket messages\r\n  useEffect(() => {\r\n    if (!stompClient || !stompClient.connected) return;\r\n\r\n    const subscription = stompClient.subscribe(\r\n      `/user/queue/messages`,\r\n      (message) => {\r\n        const data = JSON.parse(message.body);\r\n\r\n        // Handle status updates\r\n        if (data.type === 'delivered' || data.type === 'read') {\r\n          setMessages(prev =>\r\n            prev.map(msg =>\r\n              msg.id === data.messageId ? {\r\n                ...msg,\r\n                [data.type === 'delivered' ? 'delivered' : 'read']: true\r\n              } : msg\r\n            )\r\n          );\r\n          return;\r\n        }\r\n\r\n        // Enhance received message\r\n        const enhancedMessage = {\r\n          ...data,\r\n          senderUsername: data.senderUsername ||\r\n            (data.sender?.username || ''),\r\n          senderProfileImage: data.senderProfileImage ||\r\n            (data.sender?.profileImage || ''),\r\n          // Ensure image URLs are absolute\r\n          imageUrl: data.imageUrl ? `${process.env.REACT_APP_API_BASE_URL}${data.imageUrl}` : null\r\n        };\r\n\r\n        // Only add relevant messages\r\n        if (enhancedMessage.senderUsername === otherUser.username ||\r\n          enhancedMessage.recipientUsername === otherUser.username) {\r\n          setMessages(prev => [...prev, enhancedMessage]);\r\n        }\r\n      }\r\n    );\r\n\r\n    return () => subscription.unsubscribe();\r\n  }, [stompClient, otherUser]);\r\n\r\n  // Scroll to bottom and mark delivered\r\n  useEffect(() => {\r\n    scrollToBottom();\r\n\r\n    // Mark undelivered messages\r\n    const undeliveredIds = messages\r\n      .filter(msg =>\r\n        !msg.delivered &&\r\n        msg.senderUsername &&\r\n        msg.senderUsername.toLowerCase() === otherUser.username.toLowerCase()\r\n      )\r\n      .map(msg => msg.id)\r\n      .filter(id => id);\r\n\r\n    if (undeliveredIds.length > 0) {\r\n      messageService.markAsDelivered(undeliveredIds);\r\n      if (stompClient && stompClient.connected) {\r\n        stompClient.publish({\r\n          destination: '/app/chat.delivered',\r\n          body: JSON.stringify(undeliveredIds)\r\n        });\r\n      }\r\n    }\r\n  }, [messages, otherUser, stompClient]);\r\n\r\n  // Scroll to bottom\r\n  const scrollToBottom = () => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n  };\r\n\r\n  // Send text message\r\n  const handleSend = async () => {\r\n    if (!newMessage.trim()) return;\r\n\r\n    // Create message object\r\n    const messageDto = {\r\n      senderUsername: currentUser.username,\r\n      recipientUsername: otherUser.username,\r\n      content: newMessage.trim()\r\n    };\r\n\r\n    // Optimistic UI update\r\n    const tempId = Date.now();\r\n    setMessages(prev => [\r\n      ...prev,\r\n      {\r\n        ...messageDto,\r\n        id: tempId,\r\n        timestamp: new Date().toISOString(),\r\n        delivered: true,\r\n        read: false,\r\n        senderProfileImage: currentUser.profileImage\r\n      }\r\n    ]);\r\n\r\n    setNewMessage('');\r\n    scrollToBottom();\r\n\r\n    // Send via WebSocket\r\n    if (stompClient && stompClient.connected) {\r\n      stompClient.publish({\r\n        destination: '/app/chat.send',\r\n        body: JSON.stringify(messageDto)\r\n      });\r\n    }\r\n\r\n    // Persist to backend\r\n    try {\r\n      await messageService.sendMessage(otherUser.username, newMessage.trim());\r\n    } catch (error) {\r\n      console.error('Failed to store message', error);\r\n      setMessages(prev => prev.filter(msg => msg.id !== tempId));\r\n    }\r\n  };\r\n\r\n  // Handle image upload\r\n  const handleFileChange = async (e) => {\r\n    const file = e.target.files[0];\r\n    if (!file) return;\r\n\r\n    // Validate file\r\n    if (!file.type.startsWith('image/')) {\r\n      alert('Please select an image file (JPG, PNG, GIF)');\r\n      return;\r\n    }\r\n\r\n    if (file.size > 5 * 1024 * 1024) {\r\n      alert('Image size exceeds 5MB limit');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setUploading(true);\r\n\r\n      // Upload image\r\n      const imageUrl = await messageService.uploadImage(file);\r\n\r\n      // Send message with image\r\n      handleSendImage(imageUrl);\r\n    } catch (err) {\r\n      console.error('Image upload failed', err);\r\n      alert(`Image upload failed: ${err.message}`);\r\n    } finally {\r\n      if (fileInputRef.current) fileInputRef.current.value = '';\r\n      setUploading(false);\r\n    }\r\n  };\r\n\r\n  // Send image message\r\n  const handleSendImage = async (imageUrl) => {\r\n    const messageDto = {\r\n      senderUsername: currentUser.username,\r\n      recipientUsername: otherUser.username,\r\n      content: '',\r\n      imageUrl\r\n    };\r\n\r\n    // Optimistic UI update\r\n    const tempId = Date.now();\r\n    setMessages(prev => [\r\n      ...prev,\r\n      {\r\n        ...messageDto,\r\n        id: tempId,\r\n        timestamp: new Date().toISOString(),\r\n        delivered: true,\r\n        read: false,\r\n        senderProfileImage: currentUser.profileImage,\r\n        type: 'image'\r\n      }\r\n    ]);\r\n\r\n    scrollToBottom();\r\n\r\n    // Send via WebSocket\r\n    if (stompClient && stompClient.connected) {\r\n      stompClient.publish({\r\n        destination: '/app/chat.send',\r\n        body: JSON.stringify({\r\n          ...messageDto,\r\n          type: 'image'\r\n        })\r\n      });\r\n    }\r\n\r\n    // Persist to backend\r\n    try {\r\n      await messageService.sendMessage(otherUser.username, '', imageUrl);\r\n    } catch (error) {\r\n      console.error('Failed to store image message', error);\r\n      setMessages(prev => prev.filter(msg => msg.id !== tempId));\r\n    }\r\n  };\r\n\r\n  // Mark messages as read\r\n  useEffect(() => {\r\n    const unreadIds = messages\r\n      .filter(msg =>\r\n        !msg.read &&\r\n        msg.senderUsername &&\r\n        msg.senderUsername.toLowerCase() === otherUser.username.toLowerCase()\r\n      )\r\n      .map(msg => msg.id)\r\n      .filter(id => id);\r\n\r\n    if (unreadIds.length > 0) {\r\n      messageService.markAsRead(unreadIds);\r\n      if (stompClient && stompClient.connected) {\r\n        stompClient.publish({\r\n          destination: '/app/chat.read',\r\n          body: JSON.stringify(unreadIds)\r\n        });\r\n      }\r\n    }\r\n  }, [messages, otherUser, stompClient]);\r\n\r\n  if (loading) {\r\n    return (\r\n      <Box sx={{ display: 'flex', justifyContent: 'center', mt: 4 }}>\r\n        <CircularProgress />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Box sx={{ display: 'flex', flexDirection: 'column', height: '100%', bgcolor: theme.palette.background.default }}>      {/* Header */}\r\n      <Paper sx={{\r\n        p: 1.5,\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        background: theme.palette.mode === 'dark'\r\n          ? alpha(theme.palette.background.paper, 0.9)\r\n          : alpha(theme.palette.background.paper, 0.95),\r\n        color: theme.palette.text.primary,\r\n        borderRadius: 0,\r\n        boxShadow: theme.shadows[1],\r\n        position: 'sticky',\r\n        top: 0,\r\n        zIndex: 10,\r\n        borderBottom: `1px solid ${alpha(theme.palette.divider, 0.2)}`\r\n      }}>\r\n        <IconButton\r\n          onClick={onBack}\r\n          sx={{\r\n            mr: 1,\r\n            color: theme.palette.text.secondary,\r\n            '&:hover': {\r\n              background: alpha(theme.palette.primary.main, 0.1)\r\n            }\r\n          }}\r\n        >\r\n          <ArrowBackIcon />\r\n        </IconButton>\r\n        <Avatar\r\n          src={otherUser.profileImage}\r\n          sx={{\r\n            width: 42,\r\n            height: 42,\r\n            boxShadow: theme.shadows[1],\r\n            border: `1px solid ${alpha(theme.palette.divider, 0.2)}`,\r\n            mr: 2\r\n          }}\r\n        />\r\n        <Box sx={{ flex: 1 }}>\r\n          <Typography variant=\"subtitle1\" sx={{ fontWeight: 600 }}>{otherUser.name}</Typography>\r\n        </Box>\r\n      </Paper>\r\n      {/* Message list */}\r\n      <Box sx={{\r\n        flex: 1,\r\n        overflow: 'auto',\r\n        p: { xs: 1, sm: 2 },\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        minHeight: 0,\r\n        background: theme.palette.mode === 'dark'\r\n          ? `linear-gradient(${alpha(theme.palette.background.default, 0.9)}, ${alpha(theme.palette.background.default, 0.9)}), \r\n             url(\"data:image/svg+xml,%3Csvg width='100' height='100' viewBox='0 0 100 100' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M11 18c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm48 25c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm-43-7c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm63 31c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zM34 90c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm56-76c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zM12 86c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm28-65c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm23-11c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm-6 60c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm29 22c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zM32 63c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm57-13c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm-9-21c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM60 91c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM35 41c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM12 60c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2z' fill='%239C92AC' fill-opacity='0.03' fill-rule='evenodd'/%3E%3C/svg%3E\")`\r\n          : theme.palette.background.default,\r\n        backgroundSize: '300px 300px'\r\n      }}>\r\n        <List sx={{ padding: 0 }}>\r\n          {messages.map((msg) => (\r\n            <MessageBubble\r\n              key={msg.id || msg.timestamp}\r\n              message={msg}\r\n            />\r\n          ))}\r\n          <div ref={messagesEndRef} />\r\n        </List>\r\n      </Box>\r\n      {/* Input area */}\r\n      <Paper sx={{\r\n        p: 1.5,\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        position: 'sticky',\r\n        bottom: 0,\r\n        zIndex: 10,\r\n        borderTop: `1px solid ${alpha(theme.palette.divider, 0.2)}`,\r\n        background: theme.palette.background.paper,\r\n        boxShadow: theme.shadows[3]\r\n      }}>\r\n        {uploading && (\r\n          <Box sx={{\r\n            position: 'absolute',\r\n            top: -40,\r\n            left: 0,\r\n            right: 0,\r\n            display: 'flex',\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n            zIndex: 2\r\n          }}>\r\n            <CircularProgress size={20} />\r\n            <Typography variant=\"caption\" sx={{ ml: 1 }}>\r\n              Uploading image...\r\n            </Typography>\r\n          </Box>\r\n        )}\r\n        <IconButton\r\n          onClick={() => fileInputRef.current.click()}\r\n          disabled={uploading}\r\n          sx={{\r\n            color: theme.palette.text.secondary,\r\n            mx: 0.5,\r\n            '&:hover': { \r\n              color: theme.palette.primary.main,\r\n              background: alpha(theme.palette.primary.main, 0.1)\r\n            }\r\n          }}\r\n        >\r\n          <InsertPhotoIcon />\r\n        </IconButton>\r\n        <input\r\n          type=\"file\"\r\n          accept=\"image/*\"\r\n          style={{ display: 'none' }}\r\n          ref={fileInputRef}\r\n          onChange={handleFileChange}\r\n          disabled={uploading}\r\n        />\r\n        <TextField\r\n          fullWidth\r\n          variant=\"outlined\"\r\n          placeholder=\"Type a message...\"\r\n          value={newMessage}\r\n          onChange={(e) => setNewMessage(e.target.value)}\r\n          onKeyPress={(e) => e.key === 'Enter' && !e.shiftKey && handleSend()}\r\n          sx={{ \r\n            mr: 1, \r\n            bgcolor: theme.palette.background.paper,\r\n            borderRadius: 4,\r\n            '& .MuiOutlinedInput-root': { \r\n              borderRadius: 4,\r\n              bgcolor: theme.palette.mode === 'dark' \r\n                ? alpha(theme.palette.grey[800], 0.4) \r\n                : alpha(theme.palette.grey[100], 0.8)\r\n            }\r\n          }}\r\n          multiline\r\n          maxRows={4}\r\n        />\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          onClick={handleSend}\r\n          disabled={!newMessage.trim() || uploading}\r\n          sx={{\r\n            minWidth: 48,\r\n            height: 48,\r\n            borderRadius: '50%',\r\n            boxShadow: theme.shadows[2],\r\n            background: `linear-gradient(135deg, ${theme.palette.primary.main}, ${theme.palette.primary.dark})`,\r\n            '&:hover': {\r\n              background: `linear-gradient(135deg, ${theme.palette.primary.dark}, ${theme.palette.primary.dark})`,\r\n              boxShadow: theme.shadows[4]\r\n            },\r\n            '&:disabled': {\r\n              background: theme.palette.action.disabledBackground\r\n            }\r\n          }}\r\n        >\r\n          <SendIcon />\r\n        </Button>\r\n      </Paper>\r\n    </Box>\r\n  );\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball-frontend/src/components/messaging/Conversation.jsx b/pickleball-frontend/src/components/messaging/Conversation.jsx
--- a/pickleball-frontend/src/components/messaging/Conversation.jsx	(revision 97abd609899a67b781b8ace8e91358a782fc5acd)
+++ b/pickleball-frontend/src/components/messaging/Conversation.jsx	(date 1753766187804)
@@ -93,10 +93,15 @@
           // Ensure image URLs are absolute
           imageUrl: data.imageUrl ? `${process.env.REACT_APP_API_BASE_URL}${data.imageUrl}` : null
         };
+        
+        // Only add relevant messages - check if this message is part of the current conversation
+        const isFromOtherUser = enhancedMessage.senderUsername === otherUser.username;
+        const isToOtherUser = enhancedMessage.recipientUsername === otherUser.username;
+        const isFromCurrentUser = enhancedMessage.senderUsername === currentUser.username;
+        const isToCurrentUser = enhancedMessage.recipientUsername === currentUser.username;
 
-        // Only add relevant messages
-        if (enhancedMessage.senderUsername === otherUser.username ||
-          enhancedMessage.recipientUsername === otherUser.username) {
+        if ((isFromOtherUser && isToCurrentUser) || (isFromCurrentUser && isToOtherUser)) {
+          console.log('Adding message to conversation:', enhancedMessage);
           setMessages(prev => [...prev, enhancedMessage]);
         }
       }
@@ -139,11 +144,13 @@
   const handleSend = async () => {
     if (!newMessage.trim()) return;
 
+    const messageContent = newMessage.trim();
+
     // Create message object
     const messageDto = {
       senderUsername: currentUser.username,
       recipientUsername: otherUser.username,
-      content: newMessage.trim()
+      content: messageContent
     };
 
     // Optimistic UI update
@@ -173,7 +180,16 @@
 
     // Persist to backend
     try {
-      await messageService.sendMessage(otherUser.username, newMessage.trim());
+      const savedMessage = await messageService.sendMessage(otherUser.username, messageContent);
+      // 發送成功後重新獲取訊息以確保顯示正確
+      setTimeout(async () => {
+        try {
+          const data = await messageService.getConversation(otherUser.username);
+          setMessages(data);
+        } catch (error) {
+          console.error('Failed to refresh messages:', error);
+        }
+      }, 100);
     } catch (error) {
       console.error('Failed to store message', error);
       setMessages(prev => prev.filter(msg => msg.id !== tempId));
@@ -341,7 +357,7 @@
         flexDirection: 'column',
         minHeight: 0,
         background: theme.palette.mode === 'dark'
-          ? `linear-gradient(${alpha(theme.palette.background.default, 0.9)}, ${alpha(theme.palette.background.default, 0.9)}), 
+          ? `linear-gradient(${alpha(theme.palette.background.default, 0.9)}, ${alpha(theme.palette.background.default, 0.9)}),
              url("data:image/svg+xml,%3Csvg width='100' height='100' viewBox='0 0 100 100' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M11 18c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm48 25c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm-43-7c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm63 31c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zM34 90c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm56-76c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zM12 86c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm28-65c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm23-11c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm-6 60c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm29 22c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zM32 63c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm57-13c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm-9-21c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM60 91c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM35 41c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM12 60c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2z' fill='%239C92AC' fill-opacity='0.03' fill-rule='evenodd'/%3E%3C/svg%3E")`
           : theme.palette.background.default,
         backgroundSize: '300px 300px'
@@ -385,13 +401,36 @@
             </Typography>
           </Box>
         )}
-        <IconButton
+        
+        <TextField
+          fullWidth
+          variant="outlined"
+          placeholder="Type a message..."
+          value={newMessage}
+          onChange={(e) => {
+            console.log('Input changed:', e.target.value);
+            setNewMessage(e.target.value);
+          }}
+          onKeyPress={(e) => {
+            console.log('Key pressed:', e.key);
+            if (e.key === 'Enter' && !e.shiftKey) {
+              handleSend();
+            }
+          }}
+          onFocus={() => console.log('Input focused')}
+          onBlur={() => console.log('Input blurred')}
+          sx={{ mr: 1 }}
+          multiline
+          maxRows={4}
+          disabled={false}
+        />
+        <IconButton 
           onClick={() => fileInputRef.current.click()}
           disabled={uploading}
           sx={{
             color: theme.palette.text.secondary,
             mx: 0.5,
-            '&:hover': { 
+            '&:hover': {
               color: theme.palette.primary.main,
               background: alpha(theme.palette.primary.main, 0.1)
             }
@@ -407,27 +446,7 @@
           onChange={handleFileChange}
           disabled={uploading}
         />
-        <TextField
-          fullWidth
-          variant="outlined"
-          placeholder="Type a message..."
-          value={newMessage}
-          onChange={(e) => setNewMessage(e.target.value)}
-          onKeyPress={(e) => e.key === 'Enter' && !e.shiftKey && handleSend()}
-          sx={{ 
-            mr: 1, 
-            bgcolor: theme.palette.background.paper,
-            borderRadius: 4,
-            '& .MuiOutlinedInput-root': { 
-              borderRadius: 4,
-              bgcolor: theme.palette.mode === 'dark' 
-                ? alpha(theme.palette.grey[800], 0.4) 
-                : alpha(theme.palette.grey[100], 0.8)
-            }
-          }}
-          multiline
-          maxRows={4}
-        />
+
         <Button
           variant="contained"
           color="primary"
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Court.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.entity;\r\n\r\nimport com.fasterxml.jackson.annotation.JsonBackReference;\r\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\r\nimport jakarta.persistence.*;\r\nimport lombok.Data;\r\nimport java.time.LocalDateTime;\r\n\r\n@Entity\r\n@Data\r\n@Table(name = \"court\")\r\npublic class Court {\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Integer id;\r\n\r\n    private String name;\r\n    private String location;\r\n    private String status;\r\n\r\n    @Column(name = \"opening_time\")\r\n    private String openingTime;\r\n\r\n    @Column(name = \"closing_time\")\r\n    private String closingTime;\r\n\r\n    @Column(name = \"operating_days\")\r\n    private String operatingDays;\r\n\r\n    @Column(name = \"is_archived\")\r\n    private Boolean isArchived = false;\r\n\r\n    @Column(name = \"archive_timestamp\")\r\n    private LocalDateTime archiveTimestamp;\r\n\r\n    @Column(name = \"peak_hourly_price\")\r\n    private Double peakHourlyPrice;\r\n\r\n    @Column(name = \"off_peak_hourly_price\")\r\n    private Double offPeakHourlyPrice;\r\n\r\n    @Column(name = \"daily_price\")\r\n    private Double dailyPrice;\r\n\r\n    @Column(name = \"peak_start_time\")\r\n    private String peakStartTime;\r\n\r\n    @Column(name = \"peak_end_time\")\r\n    private String peakEndTime;\r\n\r\n    @ManyToOne\r\n    @JoinColumn(name = \"venue_id\")\r\n    @JsonIgnoreProperties(\"courts\")  // 防止 venue 再序列化它的 courts\r\n    private Venue venue;\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Court.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Court.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Court.java	(revision 97abd609899a67b781b8ace8e91358a782fc5acd)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Court.java	(date 1753737455557)
@@ -5,6 +5,9 @@
 import jakarta.persistence.*;
 import lombok.Data;
 import java.time.LocalDateTime;
+import com.fasterxml.jackson.annotation.JsonIgnore;
+import java.util.List;
+import com.pickleball_backend.pickleball.entity.ClassSession;
 
 @Entity
 @Data
@@ -50,6 +53,10 @@
 
     @ManyToOne
     @JoinColumn(name = "venue_id")
-    @JsonIgnoreProperties("courts")  // 防止 venue 再序列化它的 courts
+    @JsonIgnoreProperties("courts")  // 只忽略 courts，讓 venue 的基本信息能傳遞
     private Venue venue;
+
+    @OneToMany(mappedBy = "court", cascade = CascadeType.ALL)
+    @JsonIgnore
+    private List<ClassSession> sessions;
 }
\ No newline at end of file
Index: pickleball-frontend/src/components/messaging/MessagingHub.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/components/messaging/MessagingHub.jsx\r\nimport React, { useState } from 'react';\r\nimport { Box, Tabs, Tab, Paper } from '@mui/material';\r\nimport FriendList from './FriendList';\r\nimport FriendRequestList from './FriendRequestList';\r\nimport UserSearch from './UserSearch';\r\nimport Conversation from './Conversation';\r\nimport { useTheme, alpha } from '@mui/material/styles';\r\n\r\nexport default function MessagingHub() {\r\n  const theme = useTheme();\r\n  const [activeTab, setActiveTab] = useState(0);\r\n  const [selectedConversation, setSelectedConversation] = useState(null);\r\n\r\n  const handleTabChange = (event, newValue) => {\r\n    setActiveTab(newValue);\r\n  };\r\n\r\n  const handleSelectConversation = (user) => {\r\n    setSelectedConversation(user);\r\n  };\r\n\r\n  const handleBack = () => {\r\n    setSelectedConversation(null);\r\n  };\r\n\r\n  if (selectedConversation) {\r\n    return (\r\n      <Conversation \r\n        otherUser={selectedConversation} \r\n        onBack={handleBack} \r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Box sx={{ display: 'flex', flexDirection: 'column', height: '100%' }}>\r\n      <Paper square sx={{\r\n        borderRadius: 0,\r\n        background: theme.palette.background.paper,\r\n        color: theme.palette.text.primary,\r\n        boxShadow: theme.shadows[1],\r\n        mb: 0.5,\r\n        borderBottom: `1px solid ${alpha(theme.palette.divider, 0.2)}`\r\n      }}>\r\n        <Tabs\r\n          value={activeTab}\r\n          onChange={handleTabChange}\r\n          variant=\"fullWidth\"\r\n          TabIndicatorProps={{\r\n            style: {\r\n              background: theme.palette.primary.main,\r\n              height: 3,\r\n              borderRadius: 2\r\n            }\r\n          }}\r\n          textColor=\"inherit\"\r\n          sx={{\r\n            '& .MuiTab-root': {\r\n              fontWeight: 600,\r\n              fontSize: '0.95rem',\r\n              color: theme.palette.text.secondary,\r\n              transition: 'color 0.2s',\r\n              '&.Mui-selected': {\r\n                color: theme.palette.primary.main,\r\n              }\r\n            }\r\n          }}\r\n        >\r\n          <Tab label=\"Messages\" />\r\n          <Tab label=\"Requests\" />\r\n          <Tab label=\"Find People\" />\r\n        </Tabs>\r\n      </Paper>\r\n      <Box sx={{ \r\n        flex: 1, \r\n        overflow: 'auto', \r\n        bgcolor: theme.palette.background.default, \r\n        p: { xs: 1, sm: 2 },\r\n        background: theme.palette.mode === 'dark'\r\n          ? `linear-gradient(${alpha(theme.palette.background.default, 0.9)}, ${alpha(theme.palette.background.default, 0.9)}), \r\n             url(\"data:image/svg+xml,%3Csvg width='100' height='100' viewBox='0 0 100 100' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M11 18c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm48 25c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm-43-7c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm63 31c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zM34 90c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm56-76c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zM12 86c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm28-65c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm23-11c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm-6 60c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm29 22c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zM32 63c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm57-13c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm-9-21c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM60 91c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM35 41c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM12 60c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2z' fill='%239C92AC' fill-opacity='${theme.palette.mode === 'dark' ? '0.05' : '0.03'}' fill-rule='evenodd'/%3E%3C/svg%3E\")`\r\n          : theme.palette.background.default,\r\n        backgroundSize: '300px 300px'\r\n      }}>\r\n        {activeTab === 0 && (\r\n          <FriendList onSelectFriend={handleSelectConversation} />\r\n        )}\r\n        {activeTab === 1 && (\r\n          <FriendRequestList />\r\n        )}\r\n        {activeTab === 2 && (\r\n          <UserSearch />\r\n        )}\r\n      </Box>\r\n    </Box>\r\n  );\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball-frontend/src/components/messaging/MessagingHub.jsx b/pickleball-frontend/src/components/messaging/MessagingHub.jsx
--- a/pickleball-frontend/src/components/messaging/MessagingHub.jsx	(revision 97abd609899a67b781b8ace8e91358a782fc5acd)
+++ b/pickleball-frontend/src/components/messaging/MessagingHub.jsx	(date 1753765635833)
@@ -1,16 +1,137 @@
 // src/components/messaging/MessagingHub.jsx
-import React, { useState } from 'react';
-import { Box, Tabs, Tab, Paper } from '@mui/material';
+import React, { useState, useEffect } from 'react';
+import { Box, Tabs, Tab, Paper, List, ListItem, ListItemAvatar, Avatar, ListItemText, Typography } from '@mui/material';
+import { useLocation } from 'react-router-dom';
 import FriendList from './FriendList';
 import FriendRequestList from './FriendRequestList';
 import UserSearch from './UserSearch';
 import Conversation from './Conversation';
+import { useAuth } from '../../context/AuthContext';
 import { useTheme, alpha } from '@mui/material/styles';
 
 export default function MessagingHub() {
   const theme = useTheme();
   const [activeTab, setActiveTab] = useState(0);
   const [selectedConversation, setSelectedConversation] = useState(null);
+  const [coachesWithChats, setCoachesWithChats] = useState([]);
+  const [studentsWithChats, setStudentsWithChats] = useState([]);
+  const location = useLocation();
+  const { currentUser } = useAuth();
+  const isCoach = currentUser?.userType === 'Coach' || currentUser?.userType === 'COACH';
+
+  // 獲取對話預覽
+  useEffect(() => {
+    const fetchConversations = async () => {
+      try {
+        const token = localStorage.getItem('authToken');
+        const response = await fetch('http://localhost:8081/api/messages/previews', {
+          headers: {
+            'Authorization': `Bearer ${token}`,
+            'Content-Type': 'application/json'
+          }
+        });
+
+        if (response.ok) {
+          const previewsData = await response.json();
+          console.log('Conversation previews:', previewsData);
+
+          if (isCoach) {
+            // 教練視角：篩選出學生的對話
+            const studentsInChats = [];
+            for (const preview of previewsData) {
+              if (preview.otherUser && preview.otherUser.userType === 'USER') {
+                studentsInChats.push(preview.otherUser);
+              }
+            }
+            console.log('Students with chats:', studentsInChats);
+            setStudentsWithChats(studentsInChats);
+          } else {
+            // 普通用戶視角：篩選出教練的對話
+            const coachesInChats = [];
+            for (const preview of previewsData) {
+              if (preview.otherUser && preview.otherUser.userType === 'COACH') {
+                coachesInChats.push(preview.otherUser);
+              }
+            }
+            console.log('Coaches with chats:', coachesInChats);
+            setCoachesWithChats(coachesInChats);
+          }
+        } else {
+          console.error('Failed to fetch conversation previews:', response.status);
+        }
+      } catch (error) {
+        console.error('Error fetching conversations:', error);
+      }
+    };
+
+    fetchConversations();
+  }, [isCoach]);
+
+  // 處理 URL 參數，自動選擇教練
+  useEffect(() => {
+    const searchParams = new URLSearchParams(location.search);
+    const coachId = searchParams.get('coach');
+    const coachName = searchParams.get('name');
+
+    if (coachId && coachName) {
+      console.log('Auto-selecting coach from URL params:', coachId, coachName);
+
+      // 從後端獲取教練的實際用戶信息
+      const fetchCoachInfo = async () => {
+        try {
+          const token = localStorage.getItem('authToken');
+          const response = await fetch(`http://localhost:8081/api/users/${coachId}`, {
+            headers: {
+              'Authorization': `Bearer ${token}`,
+              'Content-Type': 'application/json'
+            }
+          });
+
+          if (response.ok) {
+            const coachData = await response.json();
+            console.log('Coach data from backend:', coachData);
+
+            // 檢查是否有有效的 username
+            const username = coachData.userAccount?.username || coachData.email;
+            if (!username) {
+              console.error('No valid username found for coach:', coachData);
+              alert('教練信息不完整，無法發送消息。請聯繫管理員。');
+              return;
+            }
+
+            // 創建教練對象，使用實際的用戶信息
+            const coachUser = {
+              id: parseInt(coachId),
+              name: decodeURIComponent(coachName),
+              username: username,
+              userType: 'COACH',
+              email: coachData.email
+            };
+            console.log('Created coach user object:', coachUser);
+            setSelectedConversation(coachUser);
+          } else {
+            console.error('Failed to fetch coach info:', response.status);
+            // 如果無法獲取教練信息，顯示錯誤
+            alert('無法獲取教練信息，請稍後再試或聯繫管理員。');
+          }
+        } catch (error) {
+          console.error('Error fetching coach info:', error);
+          // 如果出錯，顯示錯誤
+          alert('無法獲取教練信息，請稍後再試或聯繫管理員。');
+        }
+      };
+
+      fetchCoachInfo();
+    }
+  }, [location.search]);
+
+  // 處理從路由狀態傳遞的用戶信息
+  useEffect(() => {
+    if (location.state?.selectedUser) {
+      console.log('Auto-selecting user from location state:', location.state.selectedUser);
+      setSelectedConversation(location.state.selectedUser);
+    }
+  }, [location.state]);
 
   const handleTabChange = (event, newValue) => {
     setActiveTab(newValue);
@@ -72,19 +193,94 @@
           <Tab label="Find People" />
         </Tabs>
       </Paper>
-      <Box sx={{ 
-        flex: 1, 
-        overflow: 'auto', 
-        bgcolor: theme.palette.background.default, 
+      <Box sx={{
+        flex: 1,
+        overflow: 'auto',
+        bgcolor: theme.palette.background.default,
         p: { xs: 1, sm: 2 },
         background: theme.palette.mode === 'dark'
-          ? `linear-gradient(${alpha(theme.palette.background.default, 0.9)}, ${alpha(theme.palette.background.default, 0.9)}), 
+          ? `linear-gradient(${alpha(theme.palette.background.default, 0.9)}, ${alpha(theme.palette.background.default, 0.9)}),
              url("data:image/svg+xml,%3Csvg width='100' height='100' viewBox='0 0 100 100' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M11 18c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm48 25c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm-43-7c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm63 31c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zM34 90c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm56-76c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zM12 86c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm28-65c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm23-11c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm-6 60c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm29 22c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zM32 63c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm57-13c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm-9-21c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM60 91c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM35 41c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM12 60c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2z' fill='%239C92AC' fill-opacity='${theme.palette.mode === 'dark' ? '0.05' : '0.03'}' fill-rule='evenodd'/%3E%3C/svg%3E")`
           : theme.palette.background.default,
         backgroundSize: '300px 300px'
       }}>
         {activeTab === 0 && (
-          <FriendList onSelectFriend={handleSelectConversation} />
+          <Box>
+            {isCoach ? (
+              // 教練視角：顯示學生列表
+              <>
+                {/* 有聊天記錄的學生 */}
+                {studentsWithChats.length > 0 && (
+                  <Box sx={{ mb: 3 }}>
+                    <Typography variant="h6" sx={{ mb: 2, color: 'primary.main' }}>Students</Typography>
+                    <List>
+                      {studentsWithChats.map(student => (
+                        <ListItem
+                          key={student.id}
+                          button
+                          onClick={() => handleSelectConversation({
+                            id: student.id,
+                            name: student.name || student.username || 'Student',
+                            username: student.username || student.email,
+                            userType: 'USER',
+                            email: student.email
+                          })}
+                        >
+                          <ListItemAvatar>
+                            <Avatar src={student.profileImage}>
+                              {student.name?.substring(0, 2)?.toUpperCase() || 'S'}
+                            </Avatar>
+                          </ListItemAvatar>
+                          <ListItemText
+                            primary={student.name || student.username || 'Student'}
+                            secondary={`@${student.username || student.email}`}
+                          />
+                        </ListItem>
+                      ))}
+                    </List>
+                  </Box>
+                )}
+              </>
+            ) : (
+              // 普通用戶視角：顯示教練和朋友列表
+              <>
+                {/* 有聊天記錄的教練 */}
+                {coachesWithChats.length > 0 && (
+                  <Box sx={{ mb: 3 }}>
+                    <Typography variant="h6" sx={{ mb: 2, color: 'primary.main' }}>Coaches</Typography>
+                    <List>
+                      {coachesWithChats.map(coach => (
+                        <ListItem
+                          key={coach.id}
+                          button
+                          onClick={() => handleSelectConversation({
+                            id: coach.id,
+                            name: coach.name || coach.username || 'Coach',
+                            username: coach.username || coach.email,
+                            userType: 'COACH',
+                            email: coach.email
+                          })}
+                        >
+                          <ListItemAvatar>
+                            <Avatar src={coach.profileImage}>
+                              {coach.name?.substring(0, 2)?.toUpperCase() || 'C'}
+                            </Avatar>
+                          </ListItemAvatar>
+                          <ListItemText
+                            primary={coach.name || coach.username || 'Coach'}
+                            secondary={`@${coach.username || coach.email}`}
+                          />
+                        </ListItem>
+                      ))}
+                    </List>
+                  </Box>
+                )}
+
+                {/* 朋友列表 */}
+   <FriendList onSelectFriend={handleSelectConversation} />
+              </>
+            )}
+          </Box>
         )}
         {activeTab === 1 && (
           <FriendRequestList />
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Venue.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.entity;\r\n\r\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\r\nimport com.fasterxml.jackson.annotation.JsonManagedReference;\r\nimport jakarta.persistence.*;\r\nimport lombok.Data;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n@Entity\r\n@Data\r\n@Table(name = \"venue\")\r\npublic class Venue {\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Integer id;\r\n\r\n    private String name;\r\n\r\n    private String location;\r\n\r\n    private String description;\r\n\r\n    private Boolean isArchived = false;\r\n\r\n    @OneToMany(mappedBy = \"venue\", cascade = CascadeType.ALL)\r\n    @JsonIgnoreProperties(\"venue\")\r\n    private List<Court> courts = new ArrayList<>();}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Venue.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Venue.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Venue.java	(revision 97abd609899a67b781b8ace8e91358a782fc5acd)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Venue.java	(date 1753722380915)
@@ -1,6 +1,6 @@
 package com.pickleball_backend.pickleball.entity;
 
-import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
+import com.fasterxml.jackson.annotation.JsonIgnore;
 import com.fasterxml.jackson.annotation.JsonManagedReference;
 import jakarta.persistence.*;
 import lombok.Data;
@@ -20,11 +20,14 @@
 
     private String location;
 
+    @Column(name = "state", length = 100)
+    private String state;
+
     private String description;
 
     private Boolean isArchived = false;
 
     @OneToMany(mappedBy = "venue", cascade = CascadeType.ALL)
-    @JsonIgnoreProperties("venue")
+    @JsonIgnore
     private List<Court> courts = new ArrayList<>();}
 
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Member.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.entity;\r\n\r\nimport jakarta.persistence.*;\r\nimport lombok.*;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n@Entity\r\n@Table(name = \"member\")\r\n@Getter\r\n@Setter\r\n@NoArgsConstructor\r\n@EqualsAndHashCode(onlyExplicitlyIncluded = true)\r\npublic class Member {\r\n    @Id\r\n    @Column(name = \"user_id\")\r\n    private Integer id;\r\n\r\n    @Column(name = \"point_balance\", nullable = false, columnDefinition = \"int default 0\")\r\n    private int pointBalance = 0;\r\n\r\n    @OneToMany(mappedBy = \"member\", cascade = CascadeType.ALL)\r\n    private List<Voucher> vouchers = new ArrayList<>();\r\n\r\n    @Column(name = \"credit_earned\", columnDefinition = \"DECIMAL(10,2) DEFAULT 0.00\")\r\n    private Double creditEarned = 0.00;\r\n\r\n    @Column(name = \"internal_credit\", columnDefinition = \"DECIMAL(10,2) DEFAULT 0.00\")\r\n    private Double internalCredit = 0.00;\r\n\r\n    @OneToOne\r\n    @MapsId\r\n    @JoinColumn(name = \"user_id\")\r\n    private User user;\r\n\r\n    @ManyToOne\r\n    @JoinColumn(name = \"tier_id\")\r\n    private MembershipTier tier;\r\n\r\n    @OneToOne(mappedBy = \"member\", cascade = CascadeType.ALL)\r\n    private Wallet wallet;\r\n\r\n    @OneToMany(mappedBy = \"member\", cascade = CascadeType.ALL, orphanRemoval = true)\r\n    private List<Registration> registrations = new ArrayList<>();\r\n\r\n    @OneToMany(mappedBy = \"organizer\")\r\n    private List<FriendlyMatch> organizedMatches;\r\n\r\n    @OneToMany(mappedBy = \"member\")\r\n    private List<JoinRequest> joinRequests;\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Member.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Member.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Member.java	(revision 97abd609899a67b781b8ace8e91358a782fc5acd)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Member.java	(date 1753722380921)
@@ -1,5 +1,6 @@
 package com.pickleball_backend.pickleball.entity;
 
+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
 import jakarta.persistence.*;
 import lombok.*;
 
@@ -32,6 +33,7 @@
     @OneToOne
     @MapsId
     @JoinColumn(name = "user_id")
+    @JsonIgnoreProperties({"member", "userAccount", "sentMessages", "receivedMessages", "coachSessions"})
     private User user;
 
     @ManyToOne
Index: pickleball/pickleball/src/main/resources/application.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>spring.application.name=pickleball\r\n\r\n# JWT Configuration\r\njwt.secret=404E635266556A586E3272357538782F413F4428472B4B6250645367566B5970\r\njwt.expiration=86400000\r\njwt.refresh-expiration=604800000\r\n\r\n# Server Configuration\r\nserver.port=8081\r\n\r\n# Database Configuration\r\nspring.datasource.url=jdbc:mysql://localhost:3306/pickleball\r\nspring.datasource.username=root\r\nspring.datasource.password=Lingyi@2025\r\nspring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver\r\n\r\napp.admin.email=sitxy-wp22@student.tarc.edu.my\r\nspring.mail.host=smtp.gmail.com\r\nspring.mail.port=587\r\nspring.mail.username=sitxy-wp22@student.tarc.edu.my\r\nspring.mail.password=ebylkwzsnprkpoos\r\nspring.mail.properties.mail.smtp.ssl.trust=smtp.gmail.com\r\nspring.mail.properties.mail.smtp.ssl.protocols=TLSv1.2\r\nspring.mail.properties.mail.smtp.auth=true\r\nspring.mail.properties.mail.smtp.starttls.enable=true\r\nspring.mail.properties.mail.smtp.starttls.required=true\r\nspring.mail.properties.mail.smtp.connectiontimeout=5000\r\nspring.mail.properties.mail.smtp.timeout=5000\r\nspring.mail.properties.mail.smtp.writetimeout=5000\r\n\r\n# JPA Configuration\r\nspring.jpa.hibernate.ddl-auto=update\r\nspring.jpa.show-sql=true\r\nspring.jpa.properties.hibernate.format_sql=true\r\nspring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect\r\n\r\n# Date format configuration\r\nspring.jackson.date-format=dd-MM-yyyy\r\nspring.jackson.time-zone=UTC\r\n\r\n# Enable WebSocket\r\nspring.websocket.enabled=true\r\n\r\n# STOMP endpoint\r\napp.websocket.endpoint=/ws-messaging\r\napp.websocket.allowed-origins=*\r\n\r\n# Message retention\r\napp.messages.retention-days=90\r\n\r\n# File upload settings\r\nspring.servlet.multipart.max-file-size=5MB\r\nspring.servlet.multipart.max-request-size=5MB\r\nfile.upload-dir=uploads/\r\n\r\nlogging.level.org.springframework.security=INFo\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/pickleball/pickleball/src/main/resources/application.properties b/pickleball/pickleball/src/main/resources/application.properties
--- a/pickleball/pickleball/src/main/resources/application.properties	(revision 97abd609899a67b781b8ace8e91358a782fc5acd)
+++ b/pickleball/pickleball/src/main/resources/application.properties	(date 1753722380928)
@@ -11,7 +11,7 @@
 # Database Configuration
 spring.datasource.url=jdbc:mysql://localhost:3306/pickleball
 spring.datasource.username=root
-spring.datasource.password=Lingyi@2025
+spring.datasource.password=Xingyusit0917s.
 spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
 
 app.admin.email=sitxy-wp22@student.tarc.edu.my
Index: pickleball-frontend/src/components/feedback/MyFeedbackPage.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Box,\r\n  Container,\r\n  Typography,\r\n  CircularProgress,\r\n  Snackbar,\r\n  Alert,\r\n  useTheme,\r\n  alpha,\r\n  Card,\r\n  CardContent,\r\n  Grid,\r\n  Chip,\r\n  Button,\r\n  Avatar,\r\n  IconButton,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  TextField,\r\n  Select,\r\n  MenuItem,\r\n  FormControl,\r\n  InputLabel,\r\n  Divider\r\n} from '@mui/material';\r\nimport { useAuth } from '../../context/AuthContext';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport api from '../../service/api';\r\nimport StarRating from './StarRating';\r\nimport CourtService from '../../service/CourtService';\r\nimport ProfileHeader from '../profile/ProfileHeader';\r\nimport ProfileNavigation from '../profile/ProfileNavigation';\r\nimport axios from 'axios';\r\nimport UserService from '../../service/UserService';\r\nimport EditIcon from '@mui/icons-material/Edit';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport RateReviewIcon from '@mui/icons-material/RateReview';\r\nimport StarIcon from '@mui/icons-material/Star';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\n\r\nconst MyFeedbackPage = () => {\r\n  const theme = useTheme();\r\n  const { currentUser, isAuthenticated } = useAuth();\r\n  const navigate = useNavigate();\r\n  const [feedbackList, setFeedbackList] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState('');\r\n  const [success, setSuccess] = useState('');\r\n  const [userData, setUserData] = useState(null);\r\n  const [openDialog, setOpenDialog] = useState(false);\r\n  const [formData, setFormData] = useState({\r\n    targetType: '',\r\n    targetId: '',\r\n    rating: 0,\r\n    review: '',\r\n    tags: []\r\n  });\r\n  const [courtOptions, setCourtOptions] = useState([]);\r\n  const [submitting, setSubmitting] = useState(false);\r\n  const [tagInput, setTagInput] = useState('');\r\n  const [editMode, setEditMode] = useState(false);\r\n  const [editingId, setEditingId] = useState(null);\r\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\r\n  const [deleteId, setDeleteId] = useState(null);\r\n  const [deletedFeedback, setDeletedFeedback] = useState(null);\r\n  const [feedbackErrorDialog, setFeedbackErrorDialog] = useState({ open: false, message: '' });\r\n\r\n  // Fetch user data\r\n  useEffect(() => {\r\n    const fetchUserData = async () => {\r\n      try {\r\n        const token = UserService.getToken();\r\n        if (!token) return;\r\n        const profileResponse = await axios.get('http://localhost:8081/api/profile', {\r\n          headers: { Authorization: `Bearer ${token}` }\r\n        });\r\n        setUserData(profileResponse.data);\r\n      } catch (err) {\r\n        console.error('Failed to load user data:', err);\r\n      }\r\n    };\r\n    fetchUserData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!isAuthenticated()) return;\r\n\r\n    const fetchFeedback = async () => {\r\n      try {\r\n        setLoading(true);\r\n          const response = await api.get('/feedback/user');\r\n        setFeedbackList(response.data);\r\n      } catch (err) {\r\n        setError('Failed to load your feedback');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchFeedback();\r\n  }, [isAuthenticated]);\r\n\r\n  // Fetch courts when dialog opens and type is 'COURT'\r\n  useEffect(() => {\r\n    if (openDialog && formData.targetType === 'COURT') {\r\n      CourtService.getAllCourts().then(setCourtOptions).catch(() => setCourtOptions([]));\r\n    }\r\n  }, [openDialog, formData.targetType]);\r\n\r\n  const handleOpenDialog = (feedback = null) => {\r\n    if (feedback) {\r\n      setFormData({\r\n        targetType: feedback.targetType,\r\n        targetId: feedback.targetId,\r\n        rating: feedback.rating,\r\n        review: feedback.review || '',\r\n        tags: feedback.tags || []\r\n      });\r\n      setEditMode(true);\r\n      setEditingId(feedback.id);\r\n    } else {\r\n      setFormData({ targetType: '', targetId: '', rating: 0, review: '', tags: [] });\r\n      setEditMode(false);\r\n      setEditingId(null);\r\n    }\r\n    setTagInput('');\r\n    setOpenDialog(true);\r\n  };\r\n\r\n  const handleCloseDialog = () => {\r\n    setOpenDialog(false);\r\n    setFormData({ targetType: '', targetId: '', rating: 0, review: '', tags: [] });\r\n    setEditMode(false);\r\n    setEditingId(null);\r\n    setTagInput('');\r\n  };\r\n\r\n  const handleFormChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData((prev) => ({ ...prev, [name]: value }));\r\n  };\r\n\r\n  const handleTagInputChange = (e) => {\r\n    setTagInput(e.target.value);\r\n  };\r\n\r\n  const handleTagInputKeyDown = (e) => {\r\n    if ((e.key === 'Enter' || e.key === ',') && tagInput.trim()) {\r\n      e.preventDefault();\r\n      if (!formData.tags.includes(tagInput.trim())) {\r\n        setFormData((prev) => ({ ...prev, tags: [...prev.tags, tagInput.trim()] }));\r\n      }\r\n      setTagInput('');\r\n    }\r\n  };\r\n\r\n  const handleRemoveTag = (tagToRemove) => {\r\n    setFormData((prev) => ({ ...prev, tags: prev.tags.filter(tag => tag !== tagToRemove) }));\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    \r\n    if (!isFormValid()) {\r\n      setFeedbackErrorDialog({ \r\n        open: true, \r\n        message: 'Please fill in all required fields (Target Type, Target, Rating, and Review).' \r\n      });\r\n      return;\r\n    }\r\n    \r\n    if (editMode && !isFormChanged()) {\r\n      setFeedbackErrorDialog({ \r\n        open: true, \r\n        message: 'No changes detected. Please make changes before updating.' \r\n      });\r\n      return;\r\n    }\r\n    \r\n    setSubmitting(true);\r\n    try {\r\n      const payload = {\r\n        targetType: formData.targetType,\r\n        targetId: formData.targetId,\r\n        rating: formData.rating,\r\n        review: formData.review,\r\n        tags: formData.tags\r\n      };\r\n      \r\n      if (editMode && editingId) {\r\n        await api.put(`/feedback/${editingId}`, payload);\r\n      } else {\r\n        await api.post('/feedback', payload);\r\n      }\r\n      \r\n      handleCloseDialog();\r\n      \r\n      // Refresh feedback list\r\n      const response = await api.get('/feedback/user');\r\n      setFeedbackList(response.data);\r\n      \r\n      // Show success message\r\n      setFeedbackErrorDialog({ \r\n        open: true, \r\n        message: editMode ? 'Review updated successfully!' : 'Review submitted successfully!' \r\n      });\r\n    } catch (err) {\r\n      let msg = 'Failed to submit feedback. Please try again.';\r\n      if (err.response && err.response.data) {\r\n        if (typeof err.response.data === 'string') {\r\n          msg = err.response.data;\r\n        } else if (err.response.data.message) {\r\n          msg = err.response.data.message;\r\n        } else if (err.response.data.error) {\r\n          msg = err.response.data.error;\r\n        }\r\n      } else if (err.message) {\r\n        msg = err.message;\r\n      }\r\n      setFeedbackErrorDialog({ open: true, message: msg });\r\n    } finally {\r\n      setSubmitting(false);\r\n    }\r\n  };\r\n\r\n  const handleDeleteClick = (feedback) => {\r\n    setDeleteId(feedback.id);\r\n    setDeletedFeedback(feedback);\r\n    setDeleteDialogOpen(true);\r\n  };\r\n\r\n  const handleDeleteConfirm = async () => {\r\n    try {\r\n      await api.delete(`/feedback/${deleteId}`);\r\n      setDeleteDialogOpen(false);\r\n      setDeleteId(null);\r\n      const response = await api.get('/feedback/user');\r\n      setFeedbackList(response.data);\r\n      \r\n      setFeedbackErrorDialog({ \r\n        open: true, \r\n        message: 'Review deleted successfully! You can now leave a new review for this booking.' \r\n      });\r\n    } catch (err) {\r\n      setError('Failed to delete feedback. Please try again.');\r\n      setDeleteId(null);\r\n      setDeletedFeedback(null);\r\n    }\r\n  };\r\n\r\n  const handleDeleteCancel = () => {\r\n    setDeleteDialogOpen(false);\r\n    setDeleteId(null);\r\n    setDeletedFeedback(null);\r\n  };\r\n\r\n  const calculateAverageRating = (items) => {\r\n    if (items.length === 0) return 0;\r\n    const sum = items.reduce((acc, item) => acc + (item.rating || 0), 0);\r\n    return (sum / items.length).toFixed(1);\r\n  };\r\n\r\n  const isFormValid = () => {\r\n    return formData.targetType && formData.targetId && formData.rating > 0 && formData.review.trim();\r\n  };\r\n\r\n  const isFormChanged = () => {\r\n    if (!editMode || !editingId) return true;\r\n    \r\n    const originalFeedback = feedbackList.find(f => f.id === editingId);\r\n    if (!originalFeedback) return true;\r\n    \r\n    return (\r\n      formData.rating !== originalFeedback.rating ||\r\n      formData.review !== (originalFeedback.review || '') ||\r\n      JSON.stringify(formData.tags) !== JSON.stringify(originalFeedback.tags || [])\r\n    );\r\n  };\r\n\r\n  const handleCloseSnackbar = () => { setError(''); setSuccess(''); };\r\n\r\n  if (!isAuthenticated()) {\r\n    return (\r\n      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '80vh' }}>\r\n        <Typography variant=\"h6\" color=\"text.secondary\">\r\n          You need to log in to view your feedback.\r\n        </Typography>\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  if (loading) {\r\n    return (\r\n      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '80vh' }}>\r\n        <CircularProgress size={60} sx={{ color: theme.palette.primary.main }} />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Box sx={{ minHeight: '100vh', py: 1, backgroundColor: theme.palette.background.default }}>\r\n      <Container maxWidth={false} sx={{ maxWidth: '1200px', mx: 'auto', px: { xs: 1, sm: 2, lg: 3 } }}>\r\n        <Box sx={{ display: 'flex', gap: { xs: 2, lg: 3 }, alignItems: 'flex-start', flexDirection: { xs: 'column', lg: 'row' }, width: '100%' }}>\r\n          {/* 左侧栏 */}\r\n          <Box sx={{ width: { xs: '100%', lg: '260px' }, flexShrink: 0, position: { lg: 'sticky' }, top: { lg: 20 }, height: 'fit-content', display: 'flex', flexDirection: 'column', gap: 2 }}>\r\n            <Box sx={{ backgroundColor: theme.palette.background.paper, borderRadius: 2, boxShadow: theme.shadows[1], p: 2.5, border: `1px solid ${alpha(theme.palette.divider, 0.1)}`, position: 'relative' }}>\r\n              <ProfileHeader profile={userData} />\r\n            </Box>\r\n            <Box sx={{ backgroundColor: theme.palette.background.paper, borderRadius: 2, boxShadow: theme.shadows[1], p: 1.5, border: `1px solid ${alpha(theme.palette.divider, 0.1)}` }}>\r\n              <ProfileNavigation />\r\n            </Box>\r\n          </Box>\r\n          \r\n          {/* 右侧内容区 */}\r\n          <Box sx={{ flex: 1, minWidth: 0, width: { xs: '100%', lg: 'calc(100% - 260px - 24px)' }, overflow: 'hidden' }}>\r\n            <Snackbar open={!!error || !!success} autoHideDuration={6000} onClose={handleCloseSnackbar} anchorOrigin={{ vertical: 'top', horizontal: 'center' }}>\r\n              <Alert severity={error ? 'error' : 'success'} onClose={handleCloseSnackbar} sx={{ width: 'auto', boxShadow: '0 4px 20px rgba(0,0,0,0.15)', backdropFilter: 'blur(10px)', background: alpha(theme.palette.background.paper, 0.9) }}>{error || success}</Alert>\r\n            </Snackbar>\r\n            \r\n            {/* 主内容卡片 */}\r\n            <Card sx={{ \r\n              borderRadius: 3, \r\n              boxShadow: '0 8px 32px rgba(0,0,0,0.08)', \r\n              border: `1px solid ${alpha(theme.palette.divider, 0.1)}`,\r\n              overflow: 'hidden',\r\n              background: `linear-gradient(145deg, ${theme.palette.background.paper} 0%, ${alpha(theme.palette.primary.main, 0.02)} 100%)`\r\n            }}>\r\n              <CardContent sx={{ p: { xs: 3, md: 4 } }}>\r\n                {/* 页面标题 */}\r\n                <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, mb: 3 }}>\r\n                  <RateReviewIcon sx={{ fontSize: 32, color: theme.palette.primary.main }} />\r\n                  <Typography variant=\"h4\" fontWeight=\"bold\">\r\n                    My Feedback\r\n                  </Typography>\r\n                </Box>\r\n\r\n                {/* 统计卡片 */}\r\n                <Grid container spacing={3} sx={{ mb: 4 }}>\r\n                  <Grid item xs={12} md={6}>\r\n                    <Card sx={{ \r\n                      borderRadius: 3,\r\n                      background: `linear-gradient(135deg, ${alpha(theme.palette.primary.main, 0.1)} 0%, ${alpha(theme.palette.primary.main, 0.05)} 100%)`\r\n                    }}>\r\n                      <CardContent sx={{ p: 3, textAlign: 'center' }}>\r\n                        <RateReviewIcon sx={{ fontSize: 48, color: theme.palette.primary.main, mb: 1 }} />\r\n                        <Typography variant=\"h3\" fontWeight=\"bold\" color={theme.palette.primary.main}>\r\n            {feedbackList.length}\r\n                        </Typography>\r\n                        <Typography variant=\"body1\" color=\"text.secondary\">\r\n                          Total Feedback\r\n                        </Typography>\r\n                      </CardContent>\r\n                    </Card>\r\n                  </Grid>\r\n                  <Grid item xs={12} md={6}>\r\n                    <Card sx={{ \r\n                      borderRadius: 3,\r\n                      background: `linear-gradient(135deg, ${alpha(theme.palette.warning.main, 0.1)} 0%, ${alpha(theme.palette.warning.main, 0.05)} 100%)`\r\n                    }}>\r\n                      <CardContent sx={{ p: 3, textAlign: 'center' }}>\r\n                        <StarIcon sx={{ fontSize: 48, color: theme.palette.warning.main, mb: 1 }} />\r\n                        <Typography variant=\"h3\" fontWeight=\"bold\" color={theme.palette.warning.main}>\r\n                          {calculateAverageRating(feedbackList)}\r\n                        </Typography>\r\n                        <Typography variant=\"body1\" color=\"text.secondary\">\r\n                          Average Rating\r\n                        </Typography>\r\n                      </CardContent>\r\n                    </Card>\r\n                  </Grid>\r\n                </Grid>\r\n\r\n                {/* 删除后提示 */}\r\n      {deletedFeedback && (\r\n                  <Card sx={{ \r\n                    mb: 3,\r\n                    background: `linear-gradient(135deg, ${alpha(theme.palette.success.main, 0.1)} 0%, ${alpha(theme.palette.success.main, 0.05)} 100%)`,\r\n                    border: `2px solid ${theme.palette.success.main}`\r\n                  }}>\r\n                    <CardContent sx={{ p: 3, textAlign: 'center' }}>\r\n                      <Typography variant=\"h6\" fontWeight=\"bold\" color={theme.palette.success.main} sx={{ mb: 1 }}>\r\n            ✨ Ready to review again?\r\n                      </Typography>\r\n                      <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\r\n            You just deleted a review for {deletedFeedback.targetName}. You can now leave a new review!\r\n                      </Typography>\r\n                      <Box sx={{ display: 'flex', gap: 2, justifyContent: 'center', flexWrap: 'wrap' }}>\r\n                        <Button\r\n                          variant=\"contained\"\r\n                          color=\"success\"\r\n              onClick={() => {\r\n                setDeletedFeedback(null);\r\n                navigate('/profile/my-bookings');\r\n              }}\r\n            >\r\n              Leave New Review\r\n                        </Button>\r\n                        <Button\r\n                          variant=\"outlined\"\r\n                          color=\"success\"\r\n              onClick={() => setDeletedFeedback(null)}\r\n            >\r\n              Dismiss\r\n                        </Button>\r\n                      </Box>\r\n                    </CardContent>\r\n                  </Card>\r\n      )}\r\n\r\n      {/* Feedback List */}\r\n                {feedbackList.length === 0 ? (\r\n                  <Card sx={{ \r\n                    borderRadius: 3,\r\n                    background: alpha(theme.palette.grey[50], 0.5),\r\n                    border: `2px dashed ${alpha(theme.palette.divider, 0.3)}`\r\n                  }}>\r\n                    <CardContent sx={{ p: 6, textAlign: 'center' }}>\r\n                      <Typography variant=\"h1\" sx={{ fontSize: 80, mb: 2, opacity: 0.3 }}>\uD83D\uDCAC</Typography>\r\n                      <Typography variant=\"h6\" color=\"text.secondary\" sx={{ mb: 1 }}>\r\n                        No feedback yet\r\n                      </Typography>\r\n                      <Typography variant=\"body2\" color=\"text.secondary\">\r\n                        Be the first to share your thoughts!\r\n                      </Typography>\r\n                    </CardContent>\r\n                  </Card>\r\n                ) : (\r\n                  <Box sx={{ display: 'flex', flexDirection: 'column', gap: 3 }}>\r\n                    {feedbackList.map(item => (\r\n                      <Card key={item.id} sx={{ \r\n                        borderRadius: 3,\r\n                        boxShadow: theme.shadows[1],\r\n                        transition: 'box-shadow 0.2s',\r\n                        '&:hover': { boxShadow: theme.shadows[3] }\r\n                      }}>\r\n                        <CardContent sx={{ p: 3 }}>\r\n                          <Box sx={{ display: 'flex', alignItems: 'flex-start', gap: 2, mb: 2 }}>\r\n                            <Avatar sx={{ \r\n                              bgcolor: theme.palette.primary.main,\r\n                              width: 50,\r\n                              height: 50\r\n                            }}>\r\n                              {item.userName ? item.userName.charAt(0).toUpperCase() : '?'}\r\n                            </Avatar>\r\n                            <Box sx={{ flex: 1, minWidth: 0 }}>\r\n                              <Typography variant=\"h6\" fontWeight=\"bold\" sx={{ mb: 0.5 }}>\r\n                                {item.targetName || 'Untitled'}\r\n                              </Typography>\r\n                              <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, mb: 1, flexWrap: 'wrap' }}>\r\n                                <Chip \r\n                                  label={item.targetType} \r\n                                  size=\"small\" \r\n                                  color=\"primary\" \r\n                                  variant=\"outlined\"\r\n                                />\r\n                                <Typography variant=\"body2\" color=\"text.secondary\">\r\n                                  {item.createdAt ? new Date(item.createdAt).toLocaleDateString() : ''}\r\n                                </Typography>\r\n                                <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\r\n                  <StarRating rating={item.rating} />\r\n                                  <Typography variant=\"body2\" color=\"text.secondary\">\r\n                                    ({item.rating}/5)\r\n                                  </Typography>\r\n                                </Box>\r\n                              </Box>\r\n                              <Typography variant=\"body1\" sx={{ lineHeight: 1.6, mb: 2 }}>\r\n                                {item.review}\r\n                              </Typography>\r\n                {item.tags && item.tags.length > 0 && (\r\n                                <Box sx={{ display: 'flex', gap: 1, flexWrap: 'wrap', mb: 2 }}>\r\n                    {item.tags.map(tag => (\r\n                                    <Chip \r\n                                      key={tag} \r\n                                      label={tag} \r\n                                      size=\"small\" \r\n                                      color=\"primary\" \r\n                                      variant=\"outlined\"\r\n                                    />\r\n                                  ))}\r\n                                </Box>\r\n                )}\r\n                {/* Edit status indicator */}\r\n                {editMode && editingId === item.id && (\r\n                                <Chip\r\n                                  label=\"Currently editing this review\"\r\n                                  color=\"success\"\r\n                                  icon={<EditIcon />}\r\n                                  sx={{ mb: 2 }}\r\n                                />\r\n                              )}\r\n                              {/* Action buttons */}\r\n                {currentUser && item.userUsername === currentUser.username && (\r\n                                <Box sx={{ display: 'flex', gap: 1 }}>\r\n                                  <Button\r\n                                    variant=\"outlined\"\r\n                                    size=\"small\"\r\n                                    startIcon={<EditIcon />}\r\n                      onClick={() => handleOpenDialog(item)}\r\n                    >\r\n                                    Edit\r\n                                  </Button>\r\n                                  <Button\r\n                                    variant=\"outlined\"\r\n                                    size=\"small\"\r\n                                    color=\"error\"\r\n                                    startIcon={<DeleteIcon />}\r\n                      onClick={() => handleDeleteClick(item)}\r\n                    >\r\n                                    Delete\r\n                                  </Button>\r\n                                </Box>\r\n                              )}\r\n                            </Box>\r\n                          </Box>\r\n                        </CardContent>\r\n                      </Card>\r\n                    ))}\r\n                  </Box>\r\n                )}\r\n              </CardContent>\r\n            </Card>\r\n          </Box>\r\n        </Box>\r\n      </Container>\r\n\r\n      {/* Floating Action Button */}\r\n      <Box\r\n        sx={{\r\n          position: 'fixed',\r\n          bottom: 30,\r\n          right: 30,\r\n          zIndex: 1000\r\n        }}\r\n      >\r\n        <Button\r\n          variant=\"contained\"\r\n          sx={{\r\n            borderRadius: '50%',\r\n            width: 60,\r\n            height: 60,\r\n            minWidth: 60,\r\n            boxShadow: theme.shadows[8]\r\n          }}\r\n          onClick={() => handleOpenDialog()}\r\n        >\r\n          <AddIcon />\r\n        </Button>\r\n      </Box>\r\n\r\n      {/* Feedback Form Dialog */}\r\n      <Dialog \r\n        open={openDialog} \r\n        onClose={handleCloseDialog}\r\n        maxWidth=\"md\"\r\n        fullWidth\r\n        PaperProps={{\r\n          sx: { borderRadius: 3 }\r\n        }}\r\n      >\r\n        <DialogTitle sx={{ pb: 1 }}>\r\n          <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\r\n            <Typography variant=\"h6\" fontWeight=\"bold\">\r\n              {editMode ? 'Edit Feedback' : 'Add New Feedback'}\r\n            </Typography>\r\n            <IconButton onClick={handleCloseDialog}>\r\n              <CloseIcon />\r\n            </IconButton>\r\n          </Box>\r\n        </DialogTitle>\r\n        <Divider />\r\n        <DialogContent sx={{ pt: 3 }}>\r\n          <Box component=\"form\" onSubmit={handleSubmit} sx={{ display: 'flex', flexDirection: 'column', gap: 3 }}>\r\n            <FormControl fullWidth>\r\n              <InputLabel>Target Type</InputLabel>\r\n              <Select\r\n                name=\"targetType\"\r\n                value={formData.targetType}\r\n                onChange={handleFormChange}\r\n                label=\"Target Type\"\r\n                required\r\n              >\r\n                <MenuItem value=\"\">Select Type</MenuItem>\r\n                <MenuItem value=\"COURT\">Court</MenuItem>\r\n                <MenuItem value=\"EVENT\">Event</MenuItem>\r\n                <MenuItem value=\"COACH\">Coach</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n\r\n            {formData.targetType === 'COURT' && (\r\n              <FormControl fullWidth>\r\n                <InputLabel>Court</InputLabel>\r\n                <Select\r\n                  name=\"targetId\"\r\n                  value={formData.targetId}\r\n                  onChange={handleFormChange}\r\n                  label=\"Court\"\r\n                  required\r\n                >\r\n                  <MenuItem value=\"\">Select Court</MenuItem>\r\n                  {courtOptions.map(court => (\r\n                    <MenuItem key={court.id} value={court.id}>\r\n                      {court.name} ({court.location})\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n            )}\r\n\r\n            {formData.targetType === 'EVENT' && (\r\n              <Alert severity=\"warning\">\r\n                Event selection not available yet.\r\n              </Alert>\r\n            )}\r\n\r\n            {formData.targetType === 'COACH' && (\r\n              <Alert severity=\"warning\">\r\n                Coach selection not available yet.\r\n              </Alert>\r\n            )}\r\n\r\n            <Box>\r\n              <Typography variant=\"subtitle2\" sx={{ mb: 1 }}>Rating</Typography>\r\n              <StarRating \r\n                rating={formData.rating} \r\n                interactive \r\n                onRatingChange={r => setFormData(f => ({ ...f, rating: r }))} \r\n              />\r\n            </Box>\r\n\r\n            <TextField\r\n              name=\"review\"\r\n              label=\"Review\"\r\n              value={formData.review}\r\n              onChange={handleFormChange}\r\n              multiline\r\n              rows={4}\r\n              fullWidth\r\n              required\r\n            />\r\n\r\n            <Box>\r\n              <Typography variant=\"subtitle2\" sx={{ mb: 1 }}>Tags (optional)</Typography>\r\n              <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1, mb: 1 }}>\r\n                {formData.tags.map(tag => (\r\n                  <Chip\r\n                    key={tag}\r\n                    label={tag}\r\n                    onDelete={() => handleRemoveTag(tag)}\r\n                    color=\"primary\"\r\n                    variant=\"outlined\"\r\n                  />\r\n                ))}\r\n              </Box>\r\n              <TextField\r\n                  value={tagInput}\r\n                  onChange={handleTagInputChange}\r\n                  onKeyDown={handleTagInputKeyDown}\r\n                placeholder=\"Type and press Enter to add tags\"\r\n                fullWidth\r\n                size=\"small\"\r\n              />\r\n            </Box>\r\n          </Box>\r\n        </DialogContent>\r\n        <Divider />\r\n        <DialogActions sx={{ p: 3 }}>\r\n          <Button onClick={handleCloseDialog} variant=\"outlined\">\r\n                Cancel\r\n          </Button>\r\n          <Button\r\n            onClick={handleSubmit}\r\n            variant=\"contained\"\r\n                disabled={submitting || !isFormValid() || (editMode && !isFormChanged())}\r\n            startIcon={submitting ? <CircularProgress size={16} /> : null}\r\n          >\r\n            {submitting ? (editMode ? 'Updating...' : 'Submitting...') : (editMode ? 'Update' : 'Submit')}\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Delete Confirmation Dialog */}\r\n      <Dialog\r\n        open={deleteDialogOpen}\r\n        onClose={handleDeleteCancel}\r\n        PaperProps={{\r\n          sx: { borderRadius: 3 }\r\n        }}\r\n      >\r\n        <DialogTitle>Confirm Deletion</DialogTitle>\r\n        <DialogContent>\r\n          <Typography>\r\n            Are you sure you want to delete this feedback? You can leave a new review after deletion.\r\n          </Typography>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleDeleteCancel} variant=\"outlined\">\r\n            Cancel\r\n          </Button>\r\n          <Button onClick={handleDeleteConfirm} variant=\"contained\" color=\"error\">\r\n                Delete\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Error/Success Dialog */}\r\n      <Dialog\r\n        open={feedbackErrorDialog.open}\r\n        onClose={() => setFeedbackErrorDialog({ open: false, message: '' })}\r\n        PaperProps={{\r\n          sx: { borderRadius: 3 }\r\n        }}\r\n      >\r\n        <DialogTitle>\r\n          {feedbackErrorDialog.message.includes('successfully') ? 'Success' : 'Error'}\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <Typography>\r\n            {feedbackErrorDialog.message}\r\n          </Typography>\r\n        </DialogContent>\r\n        <DialogActions>\r\n              {feedbackErrorDialog.message.includes('deleted successfully') && (\r\n                <>\r\n              <Button\r\n                    onClick={() => {\r\n                      setFeedbackErrorDialog({ open: false, message: '' });\r\n                      navigate('/profile/my-bookings');\r\n                    }}\r\n                variant=\"contained\"\r\n                  >\r\n                    Review Again\r\n              </Button>\r\n              <Button\r\n                    onClick={() => {\r\n                      setFeedbackErrorDialog({ open: false, message: '' });\r\n                      setDeletedFeedback(null);\r\n                    }}\r\n                variant=\"outlined\"\r\n                  >\r\n                    Great!\r\n              </Button>\r\n                </>\r\n              )}\r\n              {!feedbackErrorDialog.message.includes('deleted successfully') && (\r\n            <Button\r\n                  onClick={() => {\r\n                    setFeedbackErrorDialog({ open: false, message: '' });\r\n                    if (feedbackErrorDialog.message.includes('successfully')) {\r\n                      setOpenDialog(false);\r\n                    } else {\r\n                      setFormData({ targetType: '', targetId: '', rating: 0, review: '', tags: [] });\r\n                      setEditMode(false);\r\n                      setEditingId(null);\r\n                    }\r\n                  }}\r\n              variant=\"contained\"\r\n                >\r\n                  {feedbackErrorDialog.message.includes('successfully') ? 'Great!' : 'OK'}\r\n            </Button>\r\n          )}\r\n        </DialogActions>\r\n      </Dialog>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default MyFeedbackPage;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball-frontend/src/components/feedback/MyFeedbackPage.jsx b/pickleball-frontend/src/components/feedback/MyFeedbackPage.jsx
--- a/pickleball-frontend/src/components/feedback/MyFeedbackPage.jsx	(revision 97abd609899a67b781b8ace8e91358a782fc5acd)
+++ b/pickleball-frontend/src/components/feedback/MyFeedbackPage.jsx	(date 1753743953018)
@@ -31,8 +31,6 @@
 import api from '../../service/api';
 import StarRating from './StarRating';
 import CourtService from '../../service/CourtService';
-import ProfileHeader from '../profile/ProfileHeader';
-import ProfileNavigation from '../profile/ProfileNavigation';
 import axios from 'axios';
 import UserService from '../../service/UserService';
 import EditIcon from '@mui/icons-material/Edit';
@@ -59,15 +57,17 @@
     review: '',
     tags: []
   });
-  const [courtOptions, setCourtOptions] = useState([]);
+  const [tagInput, setTagInput] = useState('');
   const [submitting, setSubmitting] = useState(false);
-  const [tagInput, setTagInput] = useState('');
   const [editMode, setEditMode] = useState(false);
   const [editingId, setEditingId] = useState(null);
-  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);
   const [deleteId, setDeleteId] = useState(null);
   const [deletedFeedback, setDeletedFeedback] = useState(null);
+  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);
   const [feedbackErrorDialog, setFeedbackErrorDialog] = useState({ open: false, message: '' });
+  const [courtOptions, setCourtOptions] = useState([]);
+  const [coachOptions, setCoachOptions] = useState([]);
+  const [coachMap, setCoachMap] = useState({});
 
   // Fetch user data
   useEffect(() => {
@@ -92,7 +92,7 @@
     const fetchFeedback = async () => {
       try {
         setLoading(true);
-          const response = await api.get('/feedback/user');
+        const response = await api.get('/feedback/user');
         setFeedbackList(response.data);
       } catch (err) {
         setError('Failed to load your feedback');
@@ -111,6 +111,38 @@
     }
   }, [openDialog, formData.targetType]);
 
+  // Fetch coaches when dialog opens and type is 'COACH'
+  useEffect(() => {
+    const fetchCoaches = async () => {
+      try {
+        const response = await api.get('/class-sessions/coaches');
+        setCoachOptions(response.data);
+        // 构建id到name的映射
+        const map = {};
+        response.data.forEach(coach => {
+          map[coach.id] = coach.name;
+        });
+        setCoachMap(map);
+      } catch (err) {
+        setCoachOptions([]);
+        setCoachMap({});
+      }
+    };
+    fetchCoaches();
+  }, []);
+
+  // 辅助函数：根据targetType和targetId获取目标名字
+  const getTargetName = (feedback) => {
+    if (feedback.targetType === 'COACH') {
+      return coachMap[feedback.targetId] || 'Unknown Coach';
+    }
+    if (feedback.targetType === 'COURT') {
+      const court = courtOptions.find(c => c.id === feedback.targetId);
+      return court ? court.name : 'Unknown Court';
+    }
+    return 'Unknown Target';
+  };
+
   const handleOpenDialog = (feedback = null) => {
     if (feedback) {
       setFormData({
@@ -166,62 +198,30 @@
     e.preventDefault();
     
     if (!isFormValid()) {
-      setFeedbackErrorDialog({ 
-        open: true, 
-        message: 'Please fill in all required fields (Target Type, Target, Rating, and Review).' 
-      });
-      return;
-    }
-    
-    if (editMode && !isFormChanged()) {
-      setFeedbackErrorDialog({ 
-        open: true, 
-        message: 'No changes detected. Please make changes before updating.' 
-      });
+      setError('Please fill in all required fields');
       return;
     }
-    
+
     setSubmitting(true);
+    setError('');
+
     try {
-      const payload = {
-        targetType: formData.targetType,
-        targetId: formData.targetId,
-        rating: formData.rating,
-        review: formData.review,
-        tags: formData.tags
-      };
+      const endpoint = editMode ? `/feedback/${editingId}` : '/feedback';
+      const method = editMode ? 'PUT' : 'POST';
       
-      if (editMode && editingId) {
-        await api.put(`/feedback/${editingId}`, payload);
-      } else {
-        await api.post('/feedback', payload);
-      }
+      const response = await api[method.toLowerCase()](endpoint, formData);
       
-      handleCloseDialog();
-      
-      // Refresh feedback list
-      const response = await api.get('/feedback/user');
-      setFeedbackList(response.data);
-      
-      // Show success message
-      setFeedbackErrorDialog({ 
-        open: true, 
-        message: editMode ? 'Review updated successfully!' : 'Review submitted successfully!' 
-      });
+      if (response.status === 200 || response.status === 201) {
+        setSuccess(editMode ? 'Feedback updated successfully!' : 'Feedback submitted successfully!');
+        setOpenDialog(false);
+        
+        // Refresh feedback list
+        const refreshResponse = await api.get('/feedback/user');
+        setFeedbackList(refreshResponse.data);
+      }
     } catch (err) {
-      let msg = 'Failed to submit feedback. Please try again.';
-      if (err.response && err.response.data) {
-        if (typeof err.response.data === 'string') {
-          msg = err.response.data;
-        } else if (err.response.data.message) {
-          msg = err.response.data.message;
-        } else if (err.response.data.error) {
-          msg = err.response.data.error;
-        }
-      } else if (err.message) {
-        msg = err.message;
-      }
-      setFeedbackErrorDialog({ open: true, message: msg });
+      console.error('Error submitting feedback:', err);
+      setError(err.response?.data?.message || 'Failed to submit feedback');
     } finally {
       setSubmitting(false);
     }
@@ -236,19 +236,15 @@
   const handleDeleteConfirm = async () => {
     try {
       await api.delete(`/feedback/${deleteId}`);
+      setSuccess('Feedback deleted successfully!');
       setDeleteDialogOpen(false);
-      setDeleteId(null);
+      setDeletedFeedback(null);
+      
+      // Refresh feedback list
       const response = await api.get('/feedback/user');
       setFeedbackList(response.data);
-      
-      setFeedbackErrorDialog({ 
-        open: true, 
-        message: 'Review deleted successfully! You can now leave a new review for this booking.' 
-      });
     } catch (err) {
-      setError('Failed to delete feedback. Please try again.');
-      setDeleteId(null);
-      setDeletedFeedback(null);
+      setError('Failed to delete feedback');
     }
   };
 
@@ -260,7 +256,7 @@
 
   const calculateAverageRating = (items) => {
     if (items.length === 0) return 0;
-    const sum = items.reduce((acc, item) => acc + (item.rating || 0), 0);
+    const sum = items.reduce((acc, item) => acc + item.rating, 0);
     return (sum / items.length).toFixed(1);
   };
 
@@ -304,227 +300,226 @@
   return (
     <Box sx={{ minHeight: '100vh', py: 1, backgroundColor: theme.palette.background.default }}>
       <Container maxWidth={false} sx={{ maxWidth: '1200px', mx: 'auto', px: { xs: 1, sm: 2, lg: 3 } }}>
-        <Box sx={{ display: 'flex', gap: { xs: 2, lg: 3 }, alignItems: 'flex-start', flexDirection: { xs: 'column', lg: 'row' }, width: '100%' }}>
-          {/* 左侧栏 */}
-          <Box sx={{ width: { xs: '100%', lg: '260px' }, flexShrink: 0, position: { lg: 'sticky' }, top: { lg: 20 }, height: 'fit-content', display: 'flex', flexDirection: 'column', gap: 2 }}>
-            <Box sx={{ backgroundColor: theme.palette.background.paper, borderRadius: 2, boxShadow: theme.shadows[1], p: 2.5, border: `1px solid ${alpha(theme.palette.divider, 0.1)}`, position: 'relative' }}>
-              <ProfileHeader profile={userData} />
-            </Box>
-            <Box sx={{ backgroundColor: theme.palette.background.paper, borderRadius: 2, boxShadow: theme.shadows[1], p: 1.5, border: `1px solid ${alpha(theme.palette.divider, 0.1)}` }}>
-              <ProfileNavigation />
-            </Box>
-          </Box>
-          
-          {/* 右侧内容区 */}
-          <Box sx={{ flex: 1, minWidth: 0, width: { xs: '100%', lg: 'calc(100% - 260px - 24px)' }, overflow: 'hidden' }}>
-            <Snackbar open={!!error || !!success} autoHideDuration={6000} onClose={handleCloseSnackbar} anchorOrigin={{ vertical: 'top', horizontal: 'center' }}>
-              <Alert severity={error ? 'error' : 'success'} onClose={handleCloseSnackbar} sx={{ width: 'auto', boxShadow: '0 4px 20px rgba(0,0,0,0.15)', backdropFilter: 'blur(10px)', background: alpha(theme.palette.background.paper, 0.9) }}>{error || success}</Alert>
-            </Snackbar>
-            
-            {/* 主内容卡片 */}
-            <Card sx={{ 
-              borderRadius: 3, 
-              boxShadow: '0 8px 32px rgba(0,0,0,0.08)', 
-              border: `1px solid ${alpha(theme.palette.divider, 0.1)}`,
-              overflow: 'hidden',
-              background: `linear-gradient(145deg, ${theme.palette.background.paper} 0%, ${alpha(theme.palette.primary.main, 0.02)} 100%)`
-            }}>
-              <CardContent sx={{ p: { xs: 3, md: 4 } }}>
-                {/* 页面标题 */}
-                <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, mb: 3 }}>
-                  <RateReviewIcon sx={{ fontSize: 32, color: theme.palette.primary.main }} />
-                  <Typography variant="h4" fontWeight="bold">
-                    My Feedback
-                  </Typography>
-                </Box>
+        <Snackbar open={!!error || !!success} autoHideDuration={6000} onClose={handleCloseSnackbar} anchorOrigin={{ vertical: 'top', horizontal: 'center' }}>
+          <Alert severity={error ? 'error' : 'success'} onClose={handleCloseSnackbar} sx={{ width: 'auto', boxShadow: '0 4px 20px rgba(0,0,0,0.15)', backdropFilter: 'blur(10px)', background: alpha(theme.palette.background.paper, 0.9) }}>{error || success}</Alert>
+        </Snackbar>
+        
+        {/* 主内容卡片 */}
+        <Card sx={{ 
+          borderRadius: 3, 
+          boxShadow: '0 8px 32px rgba(0,0,0,0.08)', 
+          border: `1px solid ${alpha(theme.palette.divider, 0.1)}`,
+          overflow: 'hidden',
+          background: `linear-gradient(145deg, ${theme.palette.background.paper} 0%, ${alpha(theme.palette.primary.main, 0.02)} 100%)`
+        }}>
+          <CardContent sx={{ p: { xs: 3, md: 4 } }}>
+            {/* 页面标题 */}
+            <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, mb: 3 }}>
+              <RateReviewIcon sx={{ fontSize: 32, color: theme.palette.primary.main }} />
+              <Typography variant="h4" fontWeight="bold">
+                My Feedback
+              </Typography>
+            </Box>
 
-                {/* 统计卡片 */}
-                <Grid container spacing={3} sx={{ mb: 4 }}>
-                  <Grid item xs={12} md={6}>
-                    <Card sx={{ 
-                      borderRadius: 3,
-                      background: `linear-gradient(135deg, ${alpha(theme.palette.primary.main, 0.1)} 0%, ${alpha(theme.palette.primary.main, 0.05)} 100%)`
-                    }}>
-                      <CardContent sx={{ p: 3, textAlign: 'center' }}>
-                        <RateReviewIcon sx={{ fontSize: 48, color: theme.palette.primary.main, mb: 1 }} />
-                        <Typography variant="h3" fontWeight="bold" color={theme.palette.primary.main}>
-            {feedbackList.length}
-                        </Typography>
-                        <Typography variant="body1" color="text.secondary">
-                          Total Feedback
-                        </Typography>
-                      </CardContent>
-                    </Card>
-                  </Grid>
-                  <Grid item xs={12} md={6}>
-                    <Card sx={{ 
-                      borderRadius: 3,
-                      background: `linear-gradient(135deg, ${alpha(theme.palette.warning.main, 0.1)} 0%, ${alpha(theme.palette.warning.main, 0.05)} 100%)`
-                    }}>
-                      <CardContent sx={{ p: 3, textAlign: 'center' }}>
-                        <StarIcon sx={{ fontSize: 48, color: theme.palette.warning.main, mb: 1 }} />
-                        <Typography variant="h3" fontWeight="bold" color={theme.palette.warning.main}>
-                          {calculateAverageRating(feedbackList)}
-                        </Typography>
-                        <Typography variant="body1" color="text.secondary">
-                          Average Rating
-                        </Typography>
-                      </CardContent>
-                    </Card>
-                  </Grid>
-                </Grid>
+            {/* 统计卡片 */}
+            <Grid container spacing={3} sx={{ mb: 4 }}>
+              <Grid item xs={12} md={6}>
+                <Card sx={{ 
+                  borderRadius: 3,
+                  background: `linear-gradient(135deg, ${alpha(theme.palette.primary.main, 0.1)} 0%, ${alpha(theme.palette.primary.main, 0.05)} 100%)`
+                }}>
+                  <CardContent sx={{ p: 3, textAlign: 'center' }}>
+                    <RateReviewIcon sx={{ fontSize: 48, color: theme.palette.primary.main, mb: 1 }} />
+                    <Typography variant="h3" fontWeight="bold" color={theme.palette.primary.main}>
+                      {feedbackList.length}
+                    </Typography>
+                    <Typography variant="body1" color="text.secondary">
+                      Total Feedback
+                    </Typography>
+                  </CardContent>
+                </Card>
+              </Grid>
+              <Grid item xs={12} md={6}>
+                <Card sx={{ 
+                  borderRadius: 3,
+                  background: `linear-gradient(135deg, ${alpha(theme.palette.warning.main, 0.1)} 0%, ${alpha(theme.palette.warning.main, 0.05)} 100%)`
+                }}>
+                  <CardContent sx={{ p: 3, textAlign: 'center' }}>
+                    <StarIcon sx={{ fontSize: 48, color: theme.palette.warning.main, mb: 1 }} />
+                    <Typography variant="h3" fontWeight="bold" color={theme.palette.warning.main}>
+                      {calculateAverageRating(feedbackList)}
+                    </Typography>
+                    <Typography variant="body1" color="text.secondary">
+                      Average Rating
+                    </Typography>
+                  </CardContent>
+                </Card>
+              </Grid>
+            </Grid>
 
-                {/* 删除后提示 */}
-      {deletedFeedback && (
-                  <Card sx={{ 
-                    mb: 3,
-                    background: `linear-gradient(135deg, ${alpha(theme.palette.success.main, 0.1)} 0%, ${alpha(theme.palette.success.main, 0.05)} 100%)`,
-                    border: `2px solid ${theme.palette.success.main}`
-                  }}>
-                    <CardContent sx={{ p: 3, textAlign: 'center' }}>
-                      <Typography variant="h6" fontWeight="bold" color={theme.palette.success.main} sx={{ mb: 1 }}>
-            ✨ Ready to review again?
-                      </Typography>
-                      <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
-            You just deleted a review for {deletedFeedback.targetName}. You can now leave a new review!
-                      </Typography>
-                      <Box sx={{ display: 'flex', gap: 2, justifyContent: 'center', flexWrap: 'wrap' }}>
-                        <Button
-                          variant="contained"
-                          color="success"
-              onClick={() => {
-                setDeletedFeedback(null);
-                navigate('/profile/my-bookings');
-              }}
-            >
-              Leave New Review
-                        </Button>
-                        <Button
-                          variant="outlined"
-                          color="success"
-              onClick={() => setDeletedFeedback(null)}
-            >
-              Dismiss
-                        </Button>
-                      </Box>
-                    </CardContent>
-                  </Card>
-      )}
+            {/* 删除后提示 */}
+            {deletedFeedback && (
+              <Card sx={{ 
+                mb: 3,
+                background: `linear-gradient(135deg, ${alpha(theme.palette.success.main, 0.1)} 0%, ${alpha(theme.palette.success.main, 0.05)} 100%)`,
+                border: `2px solid ${theme.palette.success.main}`
+              }}>
+                <CardContent sx={{ p: 3, textAlign: 'center' }}>
+                  <Typography variant="h6" fontWeight="bold" color={theme.palette.success.main} sx={{ mb: 1 }}>
+                    ✨ Ready to review again?
+                  </Typography>
+                  <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
+                    You just deleted a review for {deletedFeedback.targetName}. You can now leave a new review!
+                  </Typography>
+                  <Box sx={{ display: 'flex', gap: 2, justifyContent: 'center', flexWrap: 'wrap' }}>
+                    <Button
+                      variant="contained"
+                      color="success"
+                      onClick={() => {
+                        setDeletedFeedback(null);
+                        navigate('/profile/my-bookings');
+                      }}
+                    >
+                      Leave New Review
+                    </Button>
+                    <Button
+                      variant="outlined"
+                      color="success"
+                      onClick={() => setDeletedFeedback(null)}
+                    >
+                      Dismiss
+                    </Button>
+                  </Box>
+                </CardContent>
+              </Card>
+            )}
 
-      {/* Feedback List */}
-                {feedbackList.length === 0 ? (
-                  <Card sx={{ 
-                    borderRadius: 3,
-                    background: alpha(theme.palette.grey[50], 0.5),
-                    border: `2px dashed ${alpha(theme.palette.divider, 0.3)}`
-                  }}>
-                    <CardContent sx={{ p: 6, textAlign: 'center' }}>
-                      <Typography variant="h1" sx={{ fontSize: 80, mb: 2, opacity: 0.3 }}>💬</Typography>
-                      <Typography variant="h6" color="text.secondary" sx={{ mb: 1 }}>
-                        No feedback yet
-                      </Typography>
-                      <Typography variant="body2" color="text.secondary">
-                        Be the first to share your thoughts!
-                      </Typography>
-                    </CardContent>
-                  </Card>
-                ) : (
-                  <Box sx={{ display: 'flex', flexDirection: 'column', gap: 3 }}>
-                    {feedbackList.map(item => (
-                      <Card key={item.id} sx={{ 
-                        borderRadius: 3,
-                        boxShadow: theme.shadows[1],
-                        transition: 'box-shadow 0.2s',
-                        '&:hover': { boxShadow: theme.shadows[3] }
-                      }}>
-                        <CardContent sx={{ p: 3 }}>
-                          <Box sx={{ display: 'flex', alignItems: 'flex-start', gap: 2, mb: 2 }}>
-                            <Avatar sx={{ 
-                              bgcolor: theme.palette.primary.main,
-                              width: 50,
-                              height: 50
-                            }}>
-                              {item.userName ? item.userName.charAt(0).toUpperCase() : '?'}
-                            </Avatar>
-                            <Box sx={{ flex: 1, minWidth: 0 }}>
-                              <Typography variant="h6" fontWeight="bold" sx={{ mb: 0.5 }}>
-                                {item.targetName || 'Untitled'}
-                              </Typography>
-                              <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, mb: 1, flexWrap: 'wrap' }}>
-                                <Chip 
-                                  label={item.targetType} 
-                                  size="small" 
-                                  color="primary" 
-                                  variant="outlined"
-                                />
-                                <Typography variant="body2" color="text.secondary">
-                                  {item.createdAt ? new Date(item.createdAt).toLocaleDateString() : ''}
-                                </Typography>
-                                <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>
-                  <StarRating rating={item.rating} />
-                                  <Typography variant="body2" color="text.secondary">
-                                    ({item.rating}/5)
-                                  </Typography>
-                                </Box>
-                              </Box>
-                              <Typography variant="body1" sx={{ lineHeight: 1.6, mb: 2 }}>
-                                {item.review}
-                              </Typography>
-                {item.tags && item.tags.length > 0 && (
-                                <Box sx={{ display: 'flex', gap: 1, flexWrap: 'wrap', mb: 2 }}>
-                    {item.tags.map(tag => (
-                                    <Chip 
-                                      key={tag} 
-                                      label={tag} 
-                                      size="small" 
-                                      color="primary" 
-                                      variant="outlined"
-                                    />
-                                  ))}
-                                </Box>
-                )}
-                {/* Edit status indicator */}
-                {editMode && editingId === item.id && (
-                                <Chip
-                                  label="Currently editing this review"
-                                  color="success"
-                                  icon={<EditIcon />}
-                                  sx={{ mb: 2 }}
-                                />
-                              )}
-                              {/* Action buttons */}
-                {currentUser && item.userUsername === currentUser.username && (
-                                <Box sx={{ display: 'flex', gap: 1 }}>
-                                  <Button
-                                    variant="outlined"
-                                    size="small"
-                                    startIcon={<EditIcon />}
-                      onClick={() => handleOpenDialog(item)}
-                    >
-                                    Edit
-                                  </Button>
-                                  <Button
-                                    variant="outlined"
-                                    size="small"
-                                    color="error"
-                                    startIcon={<DeleteIcon />}
-                      onClick={() => handleDeleteClick(item)}
-                    >
-                                    Delete
-                                  </Button>
-                                </Box>
-                              )}
-                            </Box>
-                          </Box>
-                        </CardContent>
-                      </Card>
-                    ))}
-                  </Box>
-                )}
-              </CardContent>
-            </Card>
-          </Box>
-        </Box>
+            {/* Feedback List */}
+            {feedbackList.length === 0 ? (
+              <Card sx={{ 
+                borderRadius: 3,
+                background: `linear-gradient(135deg, ${alpha(theme.palette.grey[100], 0.5)} 0%, ${alpha(theme.palette.grey[50], 0.5)} 100%)`,
+                border: `2px dashed ${theme.palette.grey[300]}`
+              }}>
+                <CardContent sx={{ p: 6, textAlign: 'center' }}>
+                  <RateReviewIcon sx={{ fontSize: 64, color: theme.palette.grey[400], mb: 2 }} />
+                  <Typography variant="h5" color="text.secondary" sx={{ mb: 1 }}>
+                    No feedback yet
+                  </Typography>
+                  <Typography variant="body1" color="text.secondary" sx={{ mb: 3 }}>
+                    Start sharing your experiences by leaving feedback for courts, coaches, or events!
+                  </Typography>
+                  <Button
+                    variant="contained"
+                    startIcon={<AddIcon />}
+                    onClick={() => handleOpenDialog()}
+                    sx={{ borderRadius: 2 }}
+                  >
+                    Leave Your First Review
+                  </Button>
+                </CardContent>
+              </Card>
+            ) : (
+              <Box sx={{ display: 'flex', flexDirection: 'column', gap: 3 }}>
+                {feedbackList.map((item) => (
+                  <Card key={item.id} sx={{ 
+                    borderRadius: 3,
+                    boxShadow: '0 4px 20px rgba(0,0,0,0.08)',
+                    border: `1px solid ${alpha(theme.palette.divider, 0.1)}`,
+                    transition: 'all 0.3s ease',
+                    '&:hover': {
+                      boxShadow: '0 8px 32px rgba(0,0,0,0.12)',
+                      transform: 'translateY(-2px)'
+                    }
+                  }}>
+                    <CardContent sx={{ p: 3 }}>
+                      <Box sx={{ display: 'flex', alignItems: 'flex-start', gap: 2 }}>
+                        <Avatar sx={{ 
+                          bgcolor: theme.palette.primary.main,
+                          width: 48,
+                          height: 48
+                        }}>
+                          {getTargetName(item).charAt(0).toUpperCase()}
+                        </Avatar>
+                        <Box sx={{ flex: 1, minWidth: 0 }}>
+                          <Typography variant="h6" fontWeight="bold" sx={{ mb: 0.5 }}>
+                            {getTargetName(item)}
+                          </Typography>
+                          <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, mb: 1, flexWrap: 'wrap' }}>
+                            <Chip 
+                              label={item.targetType} 
+                              size="small" 
+                              color="primary" 
+                              variant="outlined"
+                            />
+                            <Typography variant="body2" color="text.secondary">
+                              {new Date(item.createdAt).toLocaleDateString()}
+                            </Typography>
+                          </Box>
+                          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 2 }}>
+                            <StarRating rating={item.rating} />
+                            <Typography variant="body2" color="text.secondary">
+                              ({item.rating}/5)
+                            </Typography>
+                          </Box>
+                          {item.review && (
+                            <Typography variant="body1" sx={{ mb: 2, lineHeight: 1.6 }}>
+                              {item.review}
+                            </Typography>
+                          )}
+                          {item.tags && item.tags.length > 0 && (
+                            <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1, mb: 2 }}>
+                              {item.tags.map(tag => (
+                                <Chip 
+                                  key={tag} 
+                                  label={tag} 
+                                  size="small" 
+                                  color="primary" 
+                                  variant="outlined"
+                                />
+                              ))}
+                            </Box>
+                          )}
+                          {/* Edit status indicator */}
+                          {editMode && editingId === item.id && (
+                            <Chip
+                              label="Currently editing this review"
+                              color="success"
+                              icon={<EditIcon />}
+                              sx={{ mb: 2 }}
+                            />
+                          )}
+                          {/* Action buttons */}
+                          {currentUser && item.userUsername === currentUser.username && (
+                            <Box sx={{ display: 'flex', gap: 1 }}>
+                              <Button
+                                variant="outlined"
+                                size="small"
+                                startIcon={<EditIcon />}
+                                onClick={() => handleOpenDialog(item)}
+                              >
+                                Edit
+                              </Button>
+                              <Button
+                                variant="outlined"
+                                size="small"
+                                color="error"
+                                startIcon={<DeleteIcon />}
+                                onClick={() => handleDeleteClick(item)}
+                              >
+                                Delete
+                              </Button>
+                            </Box>
+                          )}
+                        </Box>
+                      </Box>
+                    </CardContent>
+                  </Card>
+                ))}
+              </Box>
+            )}
+          </CardContent>
+        </Card>
       </Container>
 
       {/* Floating Action Button */}
@@ -617,9 +612,23 @@
             )}
 
             {formData.targetType === 'COACH' && (
-              <Alert severity="warning">
-                Coach selection not available yet.
-              </Alert>
+              <FormControl fullWidth>
+                <InputLabel>Coach</InputLabel>
+                <Select
+                  name="targetId"
+                  value={formData.targetId}
+                  onChange={handleFormChange}
+                  label="Coach"
+                  required
+                >
+                  <MenuItem value="">Select Coach</MenuItem>
+                  {coachOptions.map(coach => (
+                    <MenuItem key={coach.id} value={coach.id}>
+                      {coach.name} ({coach.venue || 'Unknown Venue'})
+                    </MenuItem>
+                  ))}
+                </Select>
+              </FormControl>
             )}
 
             <Box>
@@ -656,9 +665,9 @@
                 ))}
               </Box>
               <TextField
-                  value={tagInput}
-                  onChange={handleTagInputChange}
-                  onKeyDown={handleTagInputKeyDown}
+                value={tagInput}
+                onChange={handleTagInputChange}
+                onKeyDown={handleTagInputKeyDown}
                 placeholder="Type and press Enter to add tags"
                 fullWidth
                 size="small"
@@ -669,12 +678,12 @@
         <Divider />
         <DialogActions sx={{ p: 3 }}>
           <Button onClick={handleCloseDialog} variant="outlined">
-                Cancel
+            Cancel
           </Button>
           <Button
             onClick={handleSubmit}
             variant="contained"
-                disabled={submitting || !isFormValid() || (editMode && !isFormChanged())}
+            disabled={submitting || !isFormValid() || (editMode && !isFormChanged())}
             startIcon={submitting ? <CircularProgress size={16} /> : null}
           >
             {submitting ? (editMode ? 'Updating...' : 'Submitting...') : (editMode ? 'Update' : 'Submit')}
@@ -701,7 +710,7 @@
             Cancel
           </Button>
           <Button onClick={handleDeleteConfirm} variant="contained" color="error">
-                Delete
+            Delete
           </Button>
         </DialogActions>
       </Dialog>
@@ -723,43 +732,43 @@
           </Typography>
         </DialogContent>
         <DialogActions>
-              {feedbackErrorDialog.message.includes('deleted successfully') && (
-                <>
+          {feedbackErrorDialog.message.includes('deleted successfully') && (
+            <>
               <Button
-                    onClick={() => {
-                      setFeedbackErrorDialog({ open: false, message: '' });
-                      navigate('/profile/my-bookings');
-                    }}
+                onClick={() => {
+                  setFeedbackErrorDialog({ open: false, message: '' });
+                  navigate('/profile/my-bookings');
+                }}
                 variant="contained"
-                  >
-                    Review Again
+              >
+                Review Again
               </Button>
               <Button
-                    onClick={() => {
-                      setFeedbackErrorDialog({ open: false, message: '' });
-                      setDeletedFeedback(null);
-                    }}
+                onClick={() => {
+                  setFeedbackErrorDialog({ open: false, message: '' });
+                  setDeletedFeedback(null);
+                }}
                 variant="outlined"
-                  >
-                    Great!
+              >
+                Great!
               </Button>
-                </>
-              )}
-              {!feedbackErrorDialog.message.includes('deleted successfully') && (
+            </>
+          )}
+          {!feedbackErrorDialog.message.includes('deleted successfully') && (
             <Button
-                  onClick={() => {
-                    setFeedbackErrorDialog({ open: false, message: '' });
-                    if (feedbackErrorDialog.message.includes('successfully')) {
-                      setOpenDialog(false);
-                    } else {
-                      setFormData({ targetType: '', targetId: '', rating: 0, review: '', tags: [] });
-                      setEditMode(false);
-                      setEditingId(null);
-                    }
-                  }}
+              onClick={() => {
+                setFeedbackErrorDialog({ open: false, message: '' });
+                if (feedbackErrorDialog.message.includes('successfully')) {
+                  setOpenDialog(false);
+                } else {
+                  setFormData({ targetType: '', targetId: '', rating: 0, review: '', tags: [] });
+                  setEditMode(false);
+                  setEditingId(null);
+                }
+              }}
               variant="contained"
-                >
-                  {feedbackErrorDialog.message.includes('successfully') ? 'Great!' : 'OK'}
+            >
+              {feedbackErrorDialog.message.includes('successfully') ? 'Great!' : 'OK'}
             </Button>
           )}
         </DialogActions>
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Booking.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.entity;\r\n\r\nimport jakarta.persistence.*;\r\nimport lombok.Data;\r\nimport java.time.LocalDate;\r\n\r\n@Entity\r\n@Data\r\n@Table(name = \"booking\")\r\npublic class Booking {\r\n\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Integer id;\r\n\r\n    @Column(name = \"booking_date\")\r\n    private java.time.LocalDateTime bookingDate;\r\n\r\n    @Column(name = \"total_amount\", nullable = false, columnDefinition = \"double(5,2)\")\r\n    private double totalAmount;\r\n\r\n    @Column( length = 50)\r\n    private String status;\r\n\r\n    @ManyToOne(fetch = FetchType.LAZY)\r\n    @JoinColumn(name = \"member_id\", nullable = false, referencedColumnName = \"user_id\")\r\n    private Member member;\r\n\r\n    @ManyToOne(fetch = FetchType.LAZY)\r\n    @JoinColumn(name = \"payment_id\", nullable = false)\r\n    private Payment payment;\r\n\r\n    @Column(name = \"purpose\")\r\n    private String purpose;\r\n\r\n    @Column(name = \"number_of_players\")\r\n    private Integer numberOfPlayers;\r\n\r\n    @Column(name = \"num_paddles\")\r\n    private Integer numPaddles; // 新增：租借球拍数量\r\n\r\n    @Column(name = \"buy_ball_set\")\r\n    private Boolean buyBallSet; // 新增：购买球组\r\n\r\n    @OneToMany(mappedBy = \"booking\", cascade = CascadeType.ALL)\r\n    private java.util.List<BookingSlot> bookingSlots;\r\n\r\n    @OneToOne(mappedBy = \"booking\", cascade = CascadeType.ALL)\r\n    private CancellationRequest cancellationRequest;\r\n\r\n    public enum status {\r\n        CONFIRMED, CANCELLED, PENDING\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Booking.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Booking.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Booking.java	(revision 97abd609899a67b781b8ace8e91358a782fc5acd)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Booking.java	(date 1753722380937)
@@ -42,6 +42,9 @@
     @Column(name = "buy_ball_set")
     private Boolean buyBallSet; // 新增：购买球组
 
+    @Column(name = "purpose_id")
+    private Integer purposeId;
+
     @OneToMany(mappedBy = "booking", cascade = CascadeType.ALL)
     private java.util.List<BookingSlot> bookingSlots;
 
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Payment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.entity;\r\n\r\nimport jakarta.persistence.*;\r\nimport lombok.Data;\r\nimport java.time.LocalDateTime;\r\n\r\n@Entity\r\n@Data\r\n@Table(name = \"payment\")\r\npublic class Payment {\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Integer id;\r\n\r\n    @Column(nullable = false, columnDefinition = \"double(5,2)\")\r\n    private double amount;\r\n\r\n    @Column(name = \"payment_date\")\r\n    private LocalDateTime paymentDate;\r\n\r\n    @Column(name = \"refund_date\")\r\n    private LocalDateTime refundDate;\r\n\r\n    @Column(name = \"status\", length = 50)\r\n    private String status = \"PENDING\";  // PENDING, PROCESSING, COMPLETED, FAILED, CANCELLED, REFUNDED\r\n\r\n    @Column(name = \"payment_type\", length = 20)\r\n    private String paymentType;  // TOP_UP, BOOKING, REFUND\r\n\r\n    @Column(name = \"payment_method\", length = 50)\r\n    private String paymentMethod;  // BANK_CARD, BANK_TRANSFER, E_WALLET, WALLET, INTERNAL_CREDIT\r\n\r\n    @Column(name = \"transaction_id\", length = 50)\r\n    private String transactionId;\r\n\r\n    @Column(name = \"reference_id\", length = 50)\r\n    private String referenceId;  // For external payment references\r\n\r\n    @Column(name = \"failure_reason\", length = 500)\r\n    private String failureReason;\r\n\r\n    @Column(name = \"retry_count\", nullable = false)\r\n    private Integer retryCount = 0;\r\n\r\n    @Column(name = \"max_retries\", nullable = false)\r\n    private Integer maxRetries = 3;\r\n\r\n    @Column(name = \"expires_at\")\r\n    private LocalDateTime expiresAt;  // For pending payments\r\n\r\n    @Column(name = \"processed_at\")\r\n    private LocalDateTime processedAt;\r\n\r\n    @Column(name = \"created_at\", nullable = false)\r\n    private LocalDateTime createdAt;\r\n\r\n    @Column(name = \"updated_at\")\r\n    private LocalDateTime updatedAt;\r\n\r\n    @OneToOne(mappedBy = \"payment\")\r\n    private Booking booking;\r\n\r\n    @OneToOne(mappedBy = \"payment\")\r\n    private ClassSession session;\r\n\r\n    @PrePersist\r\n    protected void onCreate() {\r\n        createdAt = LocalDateTime.now();\r\n        updatedAt = LocalDateTime.now();\r\n        if (paymentDate == null) {\r\n            paymentDate = LocalDateTime.now();\r\n        }\r\n    }\r\n\r\n    @PreUpdate\r\n    protected void onUpdate() {\r\n        updatedAt = LocalDateTime.now();\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Payment.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Payment.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Payment.java	(revision 97abd609899a67b781b8ace8e91358a782fc5acd)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Payment.java	(date 1753722380946)
@@ -12,7 +12,7 @@
     @GeneratedValue(strategy = GenerationType.IDENTITY)
     private Integer id;
 
-    @Column(nullable = false, columnDefinition = "double(5,2)")
+    @Column(nullable = false, columnDefinition = "decimal(10,2)")
     private double amount;
 
     @Column(name = "payment_date")
@@ -57,6 +57,9 @@
     @Column(name = "updated_at")
     private LocalDateTime updatedAt;
 
+    @Column(name = "group_booking_id")
+    private String groupBookingId; // UUID字串
+
     @OneToOne(mappedBy = "payment")
     private Booking booking;
 
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/BookingService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.service;\r\n\r\nimport com.pickleball_backend.pickleball.dto.*;\r\nimport com.pickleball_backend.pickleball.entity.*;\r\nimport com.pickleball_backend.pickleball.exception.ResourceNotFoundException;\r\nimport com.pickleball_backend.pickleball.exception.ValidationException;\r\nimport com.pickleball_backend.pickleball.repository.*;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.springframework.security.core.context.SecurityContextHolder;\r\nimport org.springframework.stereotype.Service;\r\nimport org.springframework.transaction.annotation.Transactional;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\nimport java.time.Duration;\r\nimport java.time.LocalDate;\r\nimport java.time.LocalDateTime;\r\nimport java.time.LocalTime;\r\nimport java.time.format.DateTimeParseException;\r\nimport java.util.List;\r\nimport java.util.Objects;\r\nimport java.util.Optional;\r\nimport java.util.stream.Collectors;\r\n\r\n@Service\r\n@RequiredArgsConstructor\r\npublic class BookingService {\r\n\r\n    private final BookingRepository bookingRepository;\r\n    private final SlotRepository slotRepository;\r\n    private final CourtRepository courtRepository;\r\n    private final MemberRepository memberRepository;\r\n    private final PaymentRepository paymentRepository;\r\n    private final UserAccountRepository userAccountRepository;\r\n    private final EmailService emailService;\r\n    private final CancellationRequestRepository cancellationRequestRepository;\r\n    private final BookingSlotRepository bookingSlotRepository;\r\n    private final UserRepository userRepository;\r\n    private final WalletRepository walletRepository;\r\n    private final FeedbackRepository feedbackRepository;\r\n    private final TierService tierService;\r\n    private static final Logger log = LoggerFactory.getLogger(BookingService.class);\r\n\r\n    private static final String CANCELLED_STATUS = \"CANCELLED\";\r\n\r\n    @Transactional\r\n    public BookingResponseDto bookCourt(BookingRequestDto request) {\r\n        // 1. Get authenticated user\r\n        String username = SecurityContextHolder.getContext().getAuthentication().getName();\r\n        UserAccount account = userAccountRepository.findByUsername(username)\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"User account not found\"));\r\n\r\n        // 2. Get member\r\n        Member member = memberRepository.findByUserId(account.getUser().getId());\r\n        if (member == null) {\r\n            throw new ResourceNotFoundException(\"Member not found\");\r\n        }\r\n\r\n        // 3. Get wallet (create if missing)\r\n        Wallet wallet = getOrCreateWallet(member);\r\n\r\n        // 4. 多 slot 合并逻辑\r\n        List<Integer> slotIds = request.getSlotIds() != null && !request.getSlotIds().isEmpty()\r\n            ? request.getSlotIds()\r\n            : (request.getSlotId() != null ? List.of(request.getSlotId()) : List.of());\r\n        \r\n        // 添加调试日志\r\n        log.info(\"Booking request - slotId: {}, slotIds: {}, final slotIds: {}\", \r\n                request.getSlotId(), request.getSlotIds(), slotIds);\r\n        \r\n        if (slotIds.isEmpty()) {\r\n            throw new ValidationException(\"No slot selected\");\r\n        }\r\n\r\n        // 5. 获取所有 slot，校验连续性、可用性\r\n        List<Slot> slots = slotRepository.findAllById(slotIds);\r\n        log.info(\"Found {} slots out of {} requested slotIds\", slots.size(), slotIds.size());\r\n        \r\n        if (slots.size() != slotIds.size()) {\r\n            throw new ResourceNotFoundException(\"Some slots not found\");\r\n        }\r\n        // 按时间排序\r\n        slots.sort((a, b) -> a.getStartTime().compareTo(b.getStartTime()));\r\n        // 校验连续性\r\n        for (int i = 1; i < slots.size(); i++) {\r\n            if (!slots.get(i).getStartTime().equals(slots.get(i-1).getEndTime())) {\r\n                throw new ValidationException(\"Selected slots are not consecutive\");\r\n            }\r\n        }\r\n        // 校验全部可用\r\n        for (Slot slot : slots) {\r\n            if (!slot.isAvailable() || isSlotBooked(slot.getId())) {\r\n                throw new IllegalStateException(\"Slot \" + slot.getId() + \" is not available\");\r\n            }\r\n        }\r\n\r\n        // 6. Get court and calculate price\r\n        Court court = courtRepository.findById(slots.get(0).getCourtId())\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"Court not found\"));\r\n        int totalDuration = slots.stream().mapToInt(Slot::getDurationHours).sum();\r\n        double baseAmount = calculateBookingAmount(court, slots.get(0), totalDuration); // 以第一个slot为基准\r\n\r\n        // 新增：加上 paddle/ball set\r\n        int numPaddles = request.getNumPaddles() != null ? request.getNumPaddles() : 0;\r\n        boolean buyBallSet = request.getBuyBallSet() != null && request.getBuyBallSet();\r\n        double paddleFee = numPaddles * 5.0;\r\n        double ballSetFee = buyBallSet ? 12.0 : 0.0;\r\n        double amount = baseAmount + paddleFee + ballSetFee;\r\n\r\n        // 7. Process wallet payment if requested\r\n        Payment payment = new Payment();\r\n        payment.setAmount(amount);\r\n        payment.setPaymentDate(LocalDateTime.now());\r\n        payment.setPaymentType(\"BOOKING\");\r\n\r\n        if (request.isUseWallet()) {\r\n            if (wallet.getBalance() < amount) {\r\n                throw new ValidationException(\"Insufficient wallet balance. Available: \" + wallet.getBalance());\r\n            }\r\n            wallet.setBalance(wallet.getBalance() - amount);\r\n            walletRepository.save(wallet);\r\n            payment.setPaymentMethod(\"WALLET\");\r\n            payment.setStatus(\"COMPLETED\");\r\n        } else {\r\n            payment.setPaymentMethod(\"OTHER\");\r\n            payment.setStatus(\"PENDING\");\r\n        }\r\n        payment = paymentRepository.save(payment);\r\n\r\n        // 8. Create booking\r\n        Booking booking = new Booking();\r\n        booking.setBookingDate(LocalDateTime.now());\r\n        booking.setTotalAmount(amount);\r\n        String bookingStatus = \"CONFIRMED\";\r\n        if (bookingStatus.length() > 50) {\r\n            bookingStatus = bookingStatus.substring(0, 50);\r\n        }\r\n        booking.setStatus(bookingStatus);\r\n        booking.setMember(member);\r\n        booking.setPayment(payment);\r\n        booking.setPurpose(request.getPurpose());\r\n        booking.setNumberOfPlayers(request.getNumberOfPlayers());\r\n        booking.setNumPaddles(request.getNumPaddles());\r\n        booking.setBuyBallSet(request.getBuyBallSet());\r\n        booking = bookingRepository.save(booking);\r\n\r\n        // 9. Create BookingSlot records\r\n        log.info(\"Creating {} BookingSlot records for booking {}\", slots.size(), booking.getId());\r\n        for (Slot slot : slots) {\r\n            // Check for existing booking slot to prevent duplicates\r\n            boolean existingBookingSlot = bookingSlotRepository.existsByBookingIdAndSlotId(booking.getId(), slot.getId());\r\n            if (existingBookingSlot) {\r\n                log.warn(\"BookingSlot already exists for bookingId={}, slotId={}\", booking.getId(), slot.getId());\r\n                continue;\r\n            }\r\n            \r\n            BookingSlot bookingSlot = new BookingSlot();\r\n            bookingSlot.setBooking(booking);\r\n            bookingSlot.setSlot(slot);\r\n            String statusValue = \"BOOKED\";\r\n            if (statusValue.length() > 50) {\r\n                statusValue = statusValue.substring(0, 50);\r\n            }\r\n            bookingSlot.setStatus(statusValue);\r\n            bookingSlotRepository.save(bookingSlot);\r\n            log.info(\"Created BookingSlot: bookingId={}, slotId={}\", booking.getId(), slot.getId());\r\n            // 10. Update slot availability\r\n            slot.setAvailable(false);\r\n            slotRepository.save(slot);\r\n        }\r\n\r\n        // 11. Generate receipt\r\n        emailService.sendBookingConfirmation(account.getUser().getEmail(), booking, court, slots.get(0));\r\n\r\n        // 11.5. Add points reward (1 point per RM1 spent)\r\n        int pointsEarned = (int) Math.round(amount);\r\n        \r\n        // Store old tier for comparison\r\n        String oldTierName = member.getTier() != null ? member.getTier().getTierName() : \"NONE\";\r\n        \r\n        member.setPointBalance(member.getPointBalance() + pointsEarned);\r\n        memberRepository.save(member);\r\n        log.info(\"Added {} points to member {} for booking {}\", pointsEarned, member.getId(), booking.getId());\r\n\r\n        // Automatic tier upgrade check after booking\r\n        tierService.recalculateMemberTier(member);\r\n        \r\n        // Refresh member data to get updated tier\r\n        member = memberRepository.findByUserId(member.getUser().getId());\r\n        String newTierName = member.getTier() != null ? member.getTier().getTierName() : \"NONE\";\r\n        \r\n        // Log tier upgrade if it occurred\r\n        if (!oldTierName.equals(newTierName)) {\r\n            log.info(\"\uD83C\uDF89 Automatic tier upgrade after booking: {} -> {} (Points: {} -> {})\", \r\n                    oldTierName, newTierName, member.getPointBalance() - pointsEarned, member.getPointBalance());\r\n        }\r\n\r\n        // 12. Create response with updated balance\r\n        BookingResponseDto response = mapToBookingResponse(booking, court, slots.get(0));\r\n        response.setDurationHours(totalDuration);\r\n        response.setWalletBalance(wallet.getBalance());\r\n\r\n        // 13. 更新用户统计数据\r\n        User user = member.getUser();\r\n        if (user != null) {\r\n            List<Booking> userBookings = bookingRepository.findByMemberId(member.getId());\r\n            user.setBookingsMade(userBookings.size());\r\n            // 统计所有预订的总时长（小时）\r\n            double totalHours = userBookings.stream().mapToDouble(b -> {\r\n                if (b.getBookingSlots() != null && !b.getBookingSlots().isEmpty()) {\r\n                    return b.getBookingSlots().stream().mapToInt(bs -> bs.getSlot().getDurationHours()).sum();\r\n                } else if (b.getNumberOfPlayers() != null) {\r\n                    return 0; // 这里不能用 numberOfPlayers，老数据无 duration 时记为0\r\n                } else {\r\n                    return 0;\r\n                }\r\n            }).sum();\r\n            user.setBookingHours(totalHours);\r\n            user.setAmountSpent(userBookings.stream().mapToDouble(Booking::getTotalAmount).sum());\r\n            userRepository.save(user);\r\n        }\r\n\r\n        return response;\r\n    }\r\n\r\n    private boolean isSlotBooked(Integer slotId) {\r\n        if (slotId == null) return false;\r\n        return bookingSlotRepository.existsBySlotIdAndStatus(slotId, \"BOOKED\");\r\n    }\r\n\r\n    private double calculateBookingAmount(Court court, Slot slot, int durationHours) {\r\n        LocalTime startTime = slot.getStartTime();\r\n        LocalTime endTime = slot.getEndTime();\r\n\r\n        // Handle null pricing safely\r\n        double peakHourlyPrice = court.getPeakHourlyPrice() != null ?\r\n                court.getPeakHourlyPrice() : 0.0;\r\n        double offPeakHourlyPrice = court.getOffPeakHourlyPrice() != null ?\r\n                court.getOffPeakHourlyPrice() : 0.0;\r\n\r\n        // Default to off-peak rate\r\n        double hourlyRate = offPeakHourlyPrice;\r\n\r\n        // Only check peak times if defined\r\n        if (court.getPeakStartTime() != null && court.getPeakEndTime() != null) {\r\n            try {\r\n                LocalTime peakStart = LocalTime.parse(court.getPeakStartTime());\r\n                LocalTime peakEnd = LocalTime.parse(court.getPeakEndTime());\r\n\r\n                // Check if slot falls entirely within peak hours\r\n                if (!startTime.isBefore(peakStart) && !endTime.isAfter(peakEnd)) {\r\n                    hourlyRate = peakHourlyPrice;\r\n                }\r\n            } catch (DateTimeParseException e) {\r\n                log.error(\"Invalid peak time format: {}\", e.getMessage());\r\n                // Maintain off-peak rate if parsing fails\r\n            }\r\n        }\r\n\r\n        return hourlyRate * durationHours;\r\n    }\r\n\r\n    // 生成响应时，slot 相关信息通过 booking.getBookingSlots().get(0).getSlot()\r\n    private BookingResponseDto mapToBookingResponse(Booking booking, Court court, Slot slot) {\r\n        BookingResponseDto response = new BookingResponseDto();\r\n        response.setBookingId(booking.getId());\r\n        response.setCourtName(court.getName());\r\n        response.setCourtLocation(court.getLocation());\r\n        // Slot slot = booking.getSlot();\r\n        Slot slot0 = booking.getBookingSlots() != null && !booking.getBookingSlots().isEmpty() ? booking.getBookingSlots().get(0).getSlot() : null;\r\n        if (slot0 != null) {\r\n            response.setSlotDate(slot0.getDate());\r\n            response.setStartTime(slot0.getStartTime());\r\n            response.setEndTime(slot0.getEndTime());\r\n        }\r\n        response.setTotalAmount(booking.getTotalAmount());\r\n        response.setBookingStatus(booking.getStatus());\r\n        response.setPurpose(booking.getPurpose());\r\n        response.setNumberOfPlayers(booking.getNumberOfPlayers());\r\n\r\n        // Add payment details\r\n        if (booking.getPayment() != null) {\r\n            response.setPaymentMethod(booking.getPayment().getPaymentMethod());\r\n            response.setPaymentStatus(booking.getPayment().getStatus());\r\n        } else {\r\n            response.setPaymentMethod(\"N/A\");\r\n            response.setPaymentStatus(\"N/A\");\r\n        }\r\n        \r\n        // Add points information\r\n        int pointsEarned = (int) Math.round(booking.getTotalAmount());\r\n        response.setPointsEarned(pointsEarned);\r\n        response.setCurrentPointBalance(booking.getMember().getPointBalance());\r\n        \r\n        return response;\r\n    }\r\n\r\n\r\n\r\n    @Transactional\r\n    public CancellationResponse cancelBooking(Integer bookingId, String username, String reason) {\r\n        // 1. 获取用户账户\r\n        UserAccount account = userAccountRepository.findByUsername(username)\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"User account not found\"));\r\n\r\n        // 2. 获取预订信息\r\n        Booking booking = bookingRepository.findById(bookingId)\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"Booking not found\"));\r\n\r\n        // 3. 验证预订所有权\r\n        if (!booking.getMember().getUser().getId().equals(account.getUser().getId())) {\r\n            throw new ValidationException(\"You can only cancel your own bookings\");\r\n        }\r\n\r\n        // 4. 获取时间段信息\r\n        Slot slot = booking.getBookingSlots() != null && !booking.getBookingSlots().isEmpty() ? booking.getBookingSlots().get(0).getSlot() : null;\r\n        if (slot == null) {\r\n            throw new ValidationException(\"No slot found for this booking\");\r\n        }\r\n        LocalDateTime slotDateTime = LocalDateTime.of(slot.getDate(), slot.getStartTime());\r\n        long hours = java.time.temporal.ChronoUnit.HOURS.between(LocalDateTime.now(), slotDateTime);\r\n\r\n        // 5. 自动批准逻辑\r\n        if (hours > 24) {\r\n            // 1. Free up the slot\r\n            slot.setAvailable(true);\r\n            slotRepository.save(slot);\r\n\r\n            // 2. Update booking status\r\n            String bookingStatus = \"CANCELLED\";\r\n            if (bookingStatus.length() > 50) {\r\n                bookingStatus = bookingStatus.substring(0, 50);\r\n            }\r\n            booking.setStatus(bookingStatus);\r\n            bookingRepository.save(booking);\r\n\r\n            // 3. Update booking slot status\r\n            BookingSlot bookingSlot = booking.getBookingSlots() != null && !booking.getBookingSlots().isEmpty() ? booking.getBookingSlots().get(0) : null;\r\n            if (bookingSlot != null) {\r\n                String slotStatus = \"CANCELLED\";\r\n                if (slotStatus.length() > 50) {\r\n                    slotStatus = slotStatus.substring(0, 50);\r\n                }\r\n                bookingSlot.setStatus(slotStatus);\r\n                bookingSlotRepository.save(bookingSlot);\r\n            }\r\n\r\n            // 4. Update or create cancellation request\r\n            CancellationRequest request = booking.getCancellationRequest();\r\n            if (request == null) {\r\n                request = new CancellationRequest();\r\n                request.setBooking(booking);\r\n                request.setRequestDate(LocalDateTime.now());\r\n            }\r\n            request.setStatus(\"APPROVED\");\r\n            request.setReason(reason != null ? reason : \"User requested cancellation\");\r\n            request.setAdminRemark(\"Auto-approved by system (more than 24h before slot)\");\r\n            cancellationRequestRepository.save(request);\r\n\r\n            // 5. 退款50%到钱包\r\n            double refund = booking.getTotalAmount() * 0.5;\r\n            Wallet wallet = walletRepository.findByMemberId(booking.getMember().getId())\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"Wallet not found\"));\r\n            wallet.setBalance(wallet.getBalance() + refund);\r\n            walletRepository.save(wallet);\r\n            // 可选：记录退款流水\r\n\r\n            // 6. 更新支付状态\r\n            Payment payment = booking.getPayment();\r\n            if (payment != null) {\r\n                payment.setStatus(\"REFUNDED\");\r\n                paymentRepository.save(payment);\r\n            }\r\n\r\n            // 7. 发送邮件通知\r\n            Court court = courtRepository.findById(slot.getCourtId())\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"Court not found\"));\r\n            emailService.sendCancellationDecision(\r\n                booking.getMember().getUser().getEmail(),\r\n                booking,\r\n                slot,\r\n                court != null ? court.getName() : \"Court not found\",\r\n                true\r\n            );\r\n\r\n            return new CancellationResponse(\r\n                request.getId(),\r\n                booking.getId(),\r\n                request.getStatus(),\r\n                request.getRequestDate(),\r\n                \"Cancellation auto-approved and 50% refunded to wallet\"\r\n            );\r\n        }\r\n\r\n        // 6. 原有流程（<=24小时，人工审核）\r\n        // 检查1小时限制\r\n        if (LocalDateTime.now().plusHours(1).isAfter(slotDateTime)) {\r\n            throw new ValidationException(\"Cannot cancel within 1 hour of booking\");\r\n        }\r\n\r\n        // 更新预订状态\r\n        booking.setStatus(\"CANCELLATION_REQUESTED\");\r\n        bookingRepository.save(booking);\r\n\r\n        // 创建取消请求\r\n        CancellationRequest request = new CancellationRequest();\r\n        request.setBooking(booking);\r\n        request.setRequestDate(LocalDateTime.now());\r\n        request.setStatus(\"PENDING\");\r\n        request.setReason(reason != null ? reason : \"User requested cancellation\");\r\n        cancellationRequestRepository.save(request);\r\n\r\n        // 获取场馆信息\r\n        Court court = courtRepository.findById(slot.getCourtId())\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"Court not found\"));\r\n\r\n        // 发送确认邮件\r\n        emailService.sendCancellationConfirmation(\r\n                booking.getMember().getUser().getEmail(),\r\n                booking,\r\n                slot,\r\n                court\r\n        );\r\n\r\n        return new CancellationResponse(\r\n                request.getId(),\r\n                booking.getId(),\r\n                request.getStatus(),\r\n                request.getRequestDate(),\r\n                \"Cancellation request submitted\"\r\n        );\r\n    }\r\n\r\n    public List<SlotResponseDto> getAvailableSlots(LocalDate date) {\r\n        return slotRepository.findByDateAndIsAvailableTrue(date).stream()\r\n                .map(slot -> {\r\n                    SlotResponseDto dto = new SlotResponseDto();\r\n                    dto.setId(slot.getId());\r\n                    dto.setCourtId(slot.getCourtId());\r\n                    dto.setDate(slot.getDate());\r\n                    dto.setStartTime(slot.getStartTime());\r\n                    dto.setEndTime(slot.getEndTime());\r\n                    dto.setStatus(\"AVAILABLE\");\r\n                    return dto;\r\n                })\r\n                .collect(Collectors.toList());\r\n    }\r\n\r\n    @Transactional(readOnly = true)\r\n    public List<PendingCancellationRequestDto> getPendingCancellationRequests() {\r\n        return cancellationRequestRepository.findByStatus(\"PENDING\").stream()\r\n                .map(request -> {\r\n                    // Safe navigation through relationships\r\n                    Booking booking = request.getBooking();\r\n                    if (booking == null) return null;\r\n\r\n                    Slot slot = booking.getBookingSlots() != null && !booking.getBookingSlots().isEmpty() ? booking.getBookingSlots().get(0).getSlot() : null;\r\n                    if (slot == null) return null;\r\n\r\n                    // Get court safely\r\n                    Court court = courtRepository.findById(slot.getCourtId()).orElse(null);\r\n\r\n                    // Get member name safely\r\n                    String memberName = Optional.ofNullable(booking.getMember())\r\n                            .map(Member::getUser)\r\n                            .map(User::getName)\r\n                            .orElse(\"Unknown Member\");\r\n\r\n                    return new PendingCancellationRequestDto(\r\n                            request.getId(),\r\n                            booking.getId(),\r\n                            memberName,\r\n                            slot != null ? slot.getDate() : null,\r\n                            slot != null ? slot.getStartTime() : null,\r\n                            court != null ? court.getName() : \"Court not found\",\r\n                            request.getReason()\r\n                    );\r\n                })\r\n                .filter(Objects::nonNull)  // Requires java.util.Objects import\r\n                .collect(Collectors.toList());\r\n    }\r\n\r\n    @Transactional\r\n    public CancellationResponse processCancellation(Integer requestId, boolean approve, String adminRemark) {\r\n        CancellationRequest request = cancellationRequestRepository.findById(requestId)\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"Cancellation request not found\"));\r\n\r\n        if (!\"PENDING\".equals(request.getStatus())) {\r\n            throw new ValidationException(\"Request already processed\");\r\n        }\r\n\r\n        Booking booking = request.getBooking();\r\n        BookingSlot bookingSlot = booking.getBookingSlots() != null && !booking.getBookingSlots().isEmpty() ? booking.getBookingSlots().get(0) : null;\r\n        Slot slot = bookingSlot != null ? bookingSlot.getSlot() : null;\r\n        Court court = slot != null ? courtRepository.findById(slot.getCourtId())\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"Court not found\")) : null;\r\n\r\n        if (approve) {\r\n            // 1. Free up the slot\r\n            slot.setAvailable(true);\r\n            slotRepository.save(slot);\r\n\r\n            // 2. Update booking status\r\n            String bookingStatus = \"CANCELLED\";\r\n            if (bookingStatus.length() > 50) {\r\n                bookingStatus = bookingStatus.substring(0, 50);\r\n            }\r\n            booking.setStatus(bookingStatus);\r\n            bookingRepository.save(booking);\r\n\r\n            // 3. Update booking slot status\r\n            String slotStatus = \"CANCELLED\";\r\n            if (slotStatus.length() > 50) {\r\n                slotStatus = slotStatus.substring(0, 50);\r\n            }\r\n            bookingSlot.setStatus(slotStatus);\r\n            bookingSlotRepository.save(bookingSlot);\r\n\r\n            // 4. Update request\r\n            request.setStatus(\"APPROVED\");\r\n\r\n            // Get current admin ID\r\n            String username = SecurityContextHolder.getContext().getAuthentication().getName();\r\n            User adminUser = userRepository.findByUserAccount_Username(username)\r\n                    .orElseThrow(() -> new ResourceNotFoundException(\"Admin user not found\"));\r\n            request.setApprovedBy(adminUser.getId());\r\n        } else {\r\n            // Reject request - revert changes\r\n            String bookingStatus = \"CONFIRMED\";\r\n            if (bookingStatus.length() > 50) {\r\n                bookingStatus = bookingStatus.substring(0, 50);\r\n            }\r\n            booking.setStatus(bookingStatus);\r\n            bookingRepository.save(booking);\r\n\r\n            // Keep booking slot as booked\r\n            String slotStatus = \"BOOKED\";\r\n            if (slotStatus.length() > 50) {\r\n                slotStatus = slotStatus.substring(0, 50);\r\n            }\r\n            bookingSlot.setStatus(slotStatus);\r\n\r\n            request.setStatus(\"REJECTED\");\r\n        }\r\n\r\n        // 新增：保存 adminRemark\r\n        if (adminRemark != null) {\r\n            request.setAdminRemark(adminRemark);\r\n        }\r\n        cancellationRequestRepository.save(request);\r\n\r\n        // Send decision email\r\n        emailService.sendCancellationDecision(\r\n                booking.getMember().getUser().getEmail(),\r\n                booking,\r\n                slot,\r\n                court != null ? court.getName() : \"Court not found\",\r\n                approve\r\n        );\r\n\r\n        return new CancellationResponse(\r\n                request.getId(),\r\n                booking.getId(),\r\n                request.getStatus(),\r\n                request.getRequestDate(),\r\n                approve ? \"Cancellation approved\" : \"Cancellation rejected\"\r\n        );\r\n    }\r\n\r\n    public List<BookingHistoryDto> getBookingHistory(Integer memberId, String status) {\r\n        try {\r\n        List<Booking> bookings = bookingRepository.findByMemberId(memberId);\r\n            log.info(\"Found {} bookings for member {}\", bookings.size(), memberId);\r\n\r\n        // 自动修正已过期的CONFIRMED预订为COMPLETED\r\n        LocalDateTime now = LocalDateTime.now();\r\n        boolean updated = false;\r\n        for (Booking booking : bookings) {\r\n            if (\"CONFIRMED\".equalsIgnoreCase(booking.getStatus())) {\r\n                    // 检查所有 slots 是否都已过期\r\n                    boolean allSlotsExpired = true;\r\n                    if (booking.getBookingSlots() != null && !booking.getBookingSlots().isEmpty()) {\r\n                        for (BookingSlot bookingSlot : booking.getBookingSlots()) {\r\n                            Slot slot = bookingSlot.getSlot();\r\n                if (slot != null && slot.getDate() != null && slot.getEndTime() != null) {\r\n                    LocalDateTime endDateTime = LocalDateTime.of(slot.getDate(), slot.getEndTime());\r\n                                if (endDateTime.isAfter(now)) {\r\n                                    allSlotsExpired = false;\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                        if (allSlotsExpired) {\r\n                        booking.setStatus(\"COMPLETED\");\r\n                        bookingRepository.save(booking);\r\n                        updated = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // 重新获取最新状态\r\n        if (updated) {\r\n            bookings = bookingRepository.findByMemberId(memberId);\r\n        }\r\n\r\n        return bookings.stream()\r\n                .filter(booking -> status == null || booking.getStatus().equalsIgnoreCase(status))\r\n                .map(booking -> {\r\n                        try {\r\n                            log.debug(\"Processing booking {} with {} booking slots\", \r\n                                    booking.getId(), \r\n                                    booking.getBookingSlots() != null ? booking.getBookingSlots().size() : 0);\r\n                            \r\n                            // 获取第一个和最后一个 slot 来显示时间范围\r\n                            Slot firstSlot = null;\r\n                            Slot lastSlot = null;\r\n                            int totalDuration = 0;\r\n                            \r\n                            if (booking.getBookingSlots() != null && !booking.getBookingSlots().isEmpty()) {\r\n                                // 按时间排序\r\n                                List<BookingSlot> sortedSlots = booking.getBookingSlots().stream()\r\n                                        .sorted((a, b) -> a.getSlot().getStartTime().compareTo(b.getSlot().getStartTime()))\r\n                                        .collect(Collectors.toList());\r\n                                \r\n                                firstSlot = sortedSlots.get(0).getSlot();\r\n                                lastSlot = sortedSlots.get(sortedSlots.size() - 1).getSlot();\r\n                                \r\n                                // 计算总时长\r\n                                totalDuration = sortedSlots.stream()\r\n                                        .mapToInt(bs -> bs.getSlot().getDurationHours() != null ? bs.getSlot().getDurationHours() : 1)\r\n                                        .sum();\r\n                                \r\n                                log.debug(\"Booking {} has {} slots, total duration: {}\", \r\n                                        booking.getId(), sortedSlots.size(), totalDuration);\r\n                            } else {\r\n                                log.warn(\"Booking {} has no booking slots!\", booking.getId());\r\n                            }\r\n                            \r\n                            Court court = null;\r\n                            if (firstSlot != null) {\r\n                                court = courtRepository.findById(firstSlot.getCourtId()).orElse(new Court());\r\n                            } else {\r\n                                // 如果没有slots，尝试从booking的其他信息获取court\r\n                                log.warn(\"No slots found for booking {}, trying to get court info from booking\", booking.getId());\r\n                                // 尝试通过查询数据库获取court信息\r\n                                try {\r\n                                    // 查询这个booking的所有bookingSlots\r\n                                    List<BookingSlot> bookingSlots = bookingSlotRepository.findByBookingId(booking.getId());\r\n                                    if (!bookingSlots.isEmpty()) {\r\n                                        Slot slot = bookingSlots.get(0).getSlot();\r\n                                        if (slot != null) {\r\n                                            court = courtRepository.findById(slot.getCourtId()).orElse(new Court());\r\n                                            log.info(\"Found court info for booking {} through direct query: {}\", booking.getId(), court.getName());\r\n                                        }\r\n                                    } else {\r\n                                        log.error(\"No booking slots found in database for booking {}\", booking.getId());\r\n                                        court = new Court();\r\n                                    }\r\n                                } catch (Exception e) {\r\n                                    log.error(\"Error getting court info for booking {}: {}\", booking.getId(), e.getMessage());\r\n                                    court = new Court();\r\n                                }\r\n                            }\r\n\r\n                    BookingHistoryDto dto = new BookingHistoryDto();\r\n                    dto.setId(booking.getId());\r\n                    dto.setCourtId(court.getId()); // 设置court ID\r\n                    dto.setCourtName(court.getName());\r\n                    dto.setLocation(court.getLocation());\r\n                            dto.setDate(firstSlot != null ? firstSlot.getDate() : null);\r\n                            dto.setStartTime(firstSlot != null ? firstSlot.getStartTime() : null);\r\n                            dto.setEndTime(lastSlot != null ? lastSlot.getEndTime() : null);\r\n                    dto.setAmount(booking.getTotalAmount());\r\n                    dto.setStatus(booking.getStatus());\r\n                    dto.setCreatedAt(booking.getBookingDate());\r\n                    dto.setPurpose(booking.getPurpose());\r\n                    dto.setNumberOfPlayers(booking.getNumberOfPlayers());\r\n                            // 新增：设置球拍和球组信息\r\n                            dto.setNumPaddles(booking.getNumPaddles());\r\n                            dto.setBuyBallSet(booking.getBuyBallSet());\r\n                            // 设置总时长\r\n                            dto.setDurationHours(totalDuration);\r\n                            \r\n                            // 检查用户是否已经评价过这个预订\r\n                            boolean hasReviewed = false;\r\n                            if (booking.getMember() != null && booking.getMember().getUser() != null) {\r\n                                hasReviewed = feedbackRepository.findByUserId(booking.getMember().getUser().getId()).stream()\r\n                                        .anyMatch(feedback -> feedback.getBooking() != null \r\n                                                && feedback.getBooking().getId().equals(booking.getId()));\r\n                            }\r\n                            dto.setHasReviewed(hasReviewed);\r\n                            \r\n                            log.debug(\"Created DTO for booking {}: courtName={}, date={}, startTime={}, endTime={}\", \r\n                                    booking.getId(), dto.getCourtName(), dto.getDate(), dto.getStartTime(), dto.getEndTime());\r\n                            \r\n                            return dto;\r\n                        } catch (Exception e) {\r\n                            log.error(\"Error processing booking {}: {}\", booking.getId(), e.getMessage());\r\n                            // 返回一个基本的 DTO，避免整个请求失败\r\n                            BookingHistoryDto dto = new BookingHistoryDto();\r\n                            dto.setId(booking.getId());\r\n                            dto.setStatus(booking.getStatus());\r\n                            dto.setAmount(booking.getTotalAmount());\r\n                            dto.setCreatedAt(booking.getBookingDate());\r\n                            // 尝试从第一个slot获取courtId\r\n                            if (booking.getBookingSlots() != null && !booking.getBookingSlots().isEmpty()) {\r\n                                Slot firstSlot = booking.getBookingSlots().get(0).getSlot();\r\n                                if (firstSlot != null) {\r\n                                    dto.setCourtId(firstSlot.getCourtId());\r\n                                }\r\n                            }\r\n                    return dto;\r\n                        }\r\n                })\r\n                .collect(Collectors.toList());\r\n        } catch (Exception e) {\r\n            log.error(\"Error in getBookingHistory for member {}: {}\", memberId, e.getMessage(), e);\r\n            throw new RuntimeException(\"Failed to load booking history\", e);\r\n        }\r\n    }\r\n\r\n    private Wallet getOrCreateWallet(Member member) {\r\n        return walletRepository.findByMemberId(member.getId())\r\n                .orElseGet(() -> {\r\n                    Wallet newWallet = new Wallet();\r\n                    newWallet.setMember(member);\r\n                    newWallet.setBalance(0.00);\r\n                    return walletRepository.save(newWallet);\r\n                });\r\n    }\r\n\r\n    /**\r\n     * 清理重复的 BookingSlot 记录\r\n     * 这个方法应该只在需要时手动调用\r\n     */\r\n    @Transactional\r\n    public void cleanupDuplicateBookingSlots() {\r\n        log.info(\"Starting cleanup of duplicate booking slots...\");\r\n        \r\n        // 使用原生 SQL 查询找到重复记录\r\n        String findDuplicatesSql = \"\"\"\r\n            SELECT booking_id, slot_id, COUNT(*) as count \r\n            FROM bookingslot \r\n            GROUP BY booking_id, slot_id \r\n            HAVING COUNT(*) > 1\r\n            \"\"\";\r\n        \r\n        // 这里需要注入 JdbcTemplate 来执行原生 SQL\r\n        // 暂时用日志记录，实际清理需要手动执行 SQL\r\n        \r\n        log.warn(\"Duplicate booking slots detected. Please run the following SQL manually:\");\r\n        log.warn(\"DELETE bs1 FROM bookingslot bs1\");\r\n        log.warn(\"INNER JOIN bookingslot bs2\");\r\n        log.warn(\"WHERE bs1.id > bs2.id\");\r\n        log.warn(\"AND bs1.booking_id = bs2.booking_id\");\r\n        log.warn(\"AND bs1.slot_id = bs2.slot_id;\");\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/BookingService.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/BookingService.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/BookingService.java	(revision 97abd609899a67b781b8ace8e91358a782fc5acd)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/BookingService.java	(date 1753722416008)
@@ -38,6 +38,7 @@
     private final UserRepository userRepository;
     private final WalletRepository walletRepository;
     private final FeedbackRepository feedbackRepository;
+    private final FriendlyMatchService friendlyMatchService;
     private final TierService tierService;
     private static final Logger log = LoggerFactory.getLogger(BookingService.class);
 
@@ -153,7 +154,7 @@
                 log.warn("BookingSlot already exists for bookingId={}, slotId={}", booking.getId(), slot.getId());
                 continue;
             }
-            
+
             BookingSlot bookingSlot = new BookingSlot();
             bookingSlot.setBooking(booking);
             bookingSlot.setSlot(slot);
@@ -174,24 +175,24 @@
 
         // 11.5. Add points reward (1 point per RM1 spent)
         int pointsEarned = (int) Math.round(amount);
-        
+
         // Store old tier for comparison
         String oldTierName = member.getTier() != null ? member.getTier().getTierName() : "NONE";
-        
+
         member.setPointBalance(member.getPointBalance() + pointsEarned);
         memberRepository.save(member);
         log.info("Added {} points to member {} for booking {}", pointsEarned, member.getId(), booking.getId());
 
         // Automatic tier upgrade check after booking
         tierService.recalculateMemberTier(member);
-        
+
         // Refresh member data to get updated tier
         member = memberRepository.findByUserId(member.getUser().getId());
         String newTierName = member.getTier() != null ? member.getTier().getTierName() : "NONE";
-        
+
         // Log tier upgrade if it occurred
         if (!oldTierName.equals(newTierName)) {
-            log.info("🎉 Automatic tier upgrade after booking: {} -> {} (Points: {} -> {})", 
+            log.info("🎉 Automatic tier upgrade after booking: {} -> {} (Points: {} -> {})",
                     oldTierName, newTierName, member.getPointBalance() - pointsEarned, member.getPointBalance());
         }
 
@@ -286,12 +287,12 @@
             response.setPaymentMethod("N/A");
             response.setPaymentStatus("N/A");
         }
-        
+
         // Add points information
         int pointsEarned = (int) Math.round(booking.getTotalAmount());
         response.setPointsEarned(pointsEarned);
         response.setCurrentPointBalance(booking.getMember().getPointBalance());
-        
+
         return response;
     }
 
@@ -334,6 +335,9 @@
             booking.setStatus(bookingStatus);
             bookingRepository.save(booking);
 
+            // 新增：同步取消 FriendlyMatch
+            friendlyMatchService.cancelReservationAndMatch(bookingId);
+
             // 3. Update booking slot status
             BookingSlot bookingSlot = booking.getBookingSlots() != null && !booking.getBookingSlots().isEmpty() ? booking.getBookingSlots().get(0) : null;
             if (bookingSlot != null) {
@@ -433,6 +437,17 @@
 
     public List<SlotResponseDto> getAvailableSlots(LocalDate date) {
         return slotRepository.findByDateAndIsAvailableTrue(date).stream()
+                .filter(slot -> {
+                    // 檢查是否有課程預約佔用這個時段
+                    LocalDateTime startDateTime = LocalDateTime.of(date, slot.getStartTime());
+                    LocalDateTime endDateTime = LocalDateTime.of(date, slot.getEndTime());
+
+                    // 檢查是否有 type="class" 的 Booking 在這個時段
+                    long classBookings = bookingRepository.countClassBookingsInTimeRange(
+                        slot.getCourtId(), startDateTime, endDateTime);
+
+                    return classBookings == 0; // 只有沒有課程預約的時段才可用
+                })
                 .map(slot -> {
                     SlotResponseDto dto = new SlotResponseDto();
                     dto.setId(slot.getId());
@@ -508,6 +523,9 @@
             booking.setStatus(bookingStatus);
             bookingRepository.save(booking);
 
+            // 新增：同步取消 FriendlyMatch
+            friendlyMatchService.cancelReservationAndMatch(booking.getId());
+
             // 3. Update booking slot status
             String slotStatus = "CANCELLED";
             if (slotStatus.length() > 50) {
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/JoinRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.entity;\r\n\r\nimport jakarta.persistence.*;\r\nimport lombok.Data;\r\nimport java.time.LocalDateTime;\r\n\r\n@Entity\r\n@Data\r\n@Table(name = \"joinrequest\")\r\npublic class JoinRequest {\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Integer id;\r\n\r\n    @Enumerated(EnumType.STRING)\r\n    private Status status = Status.PENDING; // PENDING, APPROVED, REJECTED\r\n\r\n    @Column(name = \"request_date\")\r\n    private LocalDateTime requestDate = LocalDateTime.now();\r\n\r\n    @ManyToOne\r\n    @JoinColumn(name = \"member_id\")\r\n    private Member member;\r\n\r\n    @ManyToOne\r\n    @JoinColumn(name = \"friendly_match_id\")\r\n    private FriendlyMatch friendlyMatch;\r\n\r\n    public enum Status {\r\n        PENDING, APPROVED, REJECTED\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/JoinRequest.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/JoinRequest.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/JoinRequest.java	(revision 97abd609899a67b781b8ace8e91358a782fc5acd)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/JoinRequest.java	(date 1753722416036)
@@ -15,15 +15,25 @@
     @Enumerated(EnumType.STRING)
     private Status status = Status.PENDING; // PENDING, APPROVED, REJECTED
 
-    @Column(name = "request_date")
-    private LocalDateTime requestDate = LocalDateTime.now();
+    @Column(name = "request_date", nullable = false)
+    private LocalDateTime requestDate;
+
+    @PrePersist
+    public void prePersist() {
+        if (this.requestDate == null) {
+            this.requestDate = LocalDateTime.now();
+        }
+    }
+
+    @Column(name = "request_time")
+    private java.time.LocalDateTime requestTime;
 
     @ManyToOne
     @JoinColumn(name = "member_id")
     private Member member;
 
     @ManyToOne
-    @JoinColumn(name = "friendly_match_id")
+    @JoinColumn(name = "match_id", nullable = false)
     private FriendlyMatch friendlyMatch;
 
     public enum Status {
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/MatchReminderService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.service;\r\n\r\nimport com.pickleball_backend.pickleball.entity.FriendlyMatch;\r\nimport com.pickleball_backend.pickleball.entity.JoinRequest;\r\nimport com.pickleball_backend.pickleball.entity.Member;\r\nimport com.pickleball_backend.pickleball.entity.User;\r\nimport com.pickleball_backend.pickleball.repository.FriendlyMatchRepository;\r\nimport com.pickleball_backend.pickleball.repository.JoinRequestRepository;\r\nimport com.pickleball_backend.pickleball.repository.UserRepository;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.springframework.scheduling.annotation.Scheduled;\r\nimport org.springframework.stereotype.Service;\r\nimport org.springframework.transaction.annotation.Transactional;\r\nimport java.time.LocalDateTime;\r\nimport java.util.List;\r\n\r\n@Service\r\n@RequiredArgsConstructor\r\npublic class MatchReminderService {\r\n\r\n    private final FriendlyMatchRepository matchRepository;\r\n    private final UserRepository userRepository;\r\n    private final EmailService emailService;\r\n    private final JoinRequestRepository joinRequestRepository;  // Added repository\r\n\r\n    @Scheduled(cron = \"0 0 10 * * ?\") // Run daily at 10 AM\r\n    @Transactional  // Added for lazy loading\r\n    public void sendMatchReminders() {\r\n        LocalDateTime tomorrow = LocalDateTime.now().plusDays(1);\r\n        LocalDateTime start = tomorrow.withHour(0).withMinute(0);\r\n        LocalDateTime end = tomorrow.withHour(23).withMinute(59);\r\n\r\n        List<FriendlyMatch> matches = matchRepository.findByStartTimeBetween(start, end);\r\n\r\n        for (FriendlyMatch match : matches) {\r\n            // Notify organizer\r\n            Member organizer = match.getOrganizer();\r\n            if (organizer != null && organizer.getUser() != null) {\r\n                String organizerEmail = organizer.getUser().getEmail();\r\n                if (organizerEmail != null && !organizerEmail.isEmpty()) {\r\n                    emailService.sendReminderNotification(\r\n                            organizerEmail,\r\n                            match.getId(),\r\n                            match.getStartTime()\r\n                    );\r\n                }\r\n            }\r\n\r\n            // Notify approved participants\r\n            List<JoinRequest> approvedRequests = joinRequestRepository.findByFriendlyMatchIdAndStatus(\r\n                    match.getId(),\r\n                    JoinRequest.Status.APPROVED\r\n            );\r\n\r\n            for (JoinRequest request : approvedRequests) {\r\n                Member member = request.getMember();\r\n                if (member != null && member.getUser() != null) {\r\n                    String playerEmail = member.getUser().getEmail();\r\n                    if (playerEmail != null && !playerEmail.isEmpty()) {\r\n                        emailService.sendReminderNotification(\r\n                                playerEmail,\r\n                                match.getId(),\r\n                                match.getStartTime()\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/MatchReminderService.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/MatchReminderService.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/MatchReminderService.java	(revision 97abd609899a67b781b8ace8e91358a782fc5acd)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/MatchReminderService.java	(date 1753722416062)
@@ -46,13 +46,9 @@
                 }
             }
 
-            // Notify approved participants
-            List<JoinRequest> approvedRequests = joinRequestRepository.findByFriendlyMatchIdAndStatus(
-                    match.getId(),
-                    JoinRequest.Status.APPROVED
-            );
-
-            for (JoinRequest request : approvedRequests) {
+            // Notify all participants
+            List<JoinRequest> allRequests = match.getJoinRequests();
+            for (JoinRequest request : allRequests) {
                 Member member = request.getMember();
                 if (member != null && member.getUser() != null) {
                     String playerEmail = member.getUser().getEmail();
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/FriendlyMatchService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.service;\r\n\r\nimport com.pickleball_backend.pickleball.entity.*;\r\nimport com.pickleball_backend.pickleball.exception.*;\r\nimport com.pickleball_backend.pickleball.repository.*;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.stereotype.Service;\r\nimport org.springframework.transaction.annotation.Transactional;\r\nimport java.time.LocalDateTime;\r\nimport java.util.List;\r\n\r\n@Service\r\npublic class FriendlyMatchService {\r\n\r\n    @Autowired private FriendlyMatchRepository matchRepository;\r\n    @Autowired private JoinRequestRepository joinRequestRepository;\r\n    @Autowired private MemberRepository memberRepository;\r\n    @Autowired private EmailService emailService;\r\n\r\n    public List<FriendlyMatch> getOpenMatches() {\r\n        return matchRepository.findByStatus(\"OPEN\");\r\n    }\r\n\r\n    @Transactional\r\n    public FriendlyMatch createMatch(FriendlyMatch match, Integer organizerId) {\r\n        Member organizer = memberRepository.findById(organizerId)\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"Member not found\"));\r\n\r\n        match.setOrganizer(organizer);\r\n        return matchRepository.save(match);\r\n    }\r\n\r\n    @Transactional\r\n    public JoinRequest sendJoinRequest(Integer matchId, Integer memberId) {\r\n        FriendlyMatch match = matchRepository.findById(matchId)\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"Match not found\"));\r\n\r\n        if (!\"OPEN\".equals(match.getStatus())) {\r\n            throw new ValidationException(\"Match is not open for joining\");\r\n        }\r\n\r\n        Member member = memberRepository.findById(memberId)\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"Member not found\"));\r\n\r\n        // Check for existing request\r\n        if (joinRequestRepository.findByMemberIdAndFriendlyMatchId(memberId, matchId).isPresent()) {\r\n            throw new ValidationException(\"Join request already exists\");\r\n        }\r\n\r\n        JoinRequest request = new JoinRequest();\r\n        request.setMember(member);\r\n        request.setFriendlyMatch(match);\r\n        request.setStatus(JoinRequest.Status.PENDING);\r\n\r\n        joinRequestRepository.save(request);\r\n\r\n        // Notify organizer\r\n        emailService.sendEmail(\r\n                match.getOrganizer().getUser().getEmail(),\r\n                \"New Join Request for Your Match\",\r\n                member.getUser().getName() + \" wants to join your match on \" +\r\n                        match.getStartTime() + \"\\n\\nPlease approve or reject in the app.\"\r\n        );\r\n\r\n        return request;\r\n    }\r\n\r\n    @Transactional\r\n    public void approveRequest(Integer requestId, Integer organizerId) {\r\n        JoinRequest request = joinRequestRepository.findById(requestId)\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"Request not found\"));\r\n\r\n        if (!request.getFriendlyMatch().getOrganizer().getId().equals(organizerId)) {\r\n            throw new UnauthorizedException(\"Only organizer can approve requests\");\r\n        }\r\n\r\n        FriendlyMatch match = request.getFriendlyMatch();\r\n\r\n        // Added validation for full match\r\n        if (match.getCurrentPlayers() >= match.getMaxPlayers()) {\r\n            throw new ValidationException(\"Match is already full\");\r\n        }\r\n\r\n        request.setStatus(JoinRequest.Status.APPROVED);\r\n        joinRequestRepository.save(request);\r\n\r\n        match.setCurrentPlayers(match.getCurrentPlayers() + 1);\r\n        if (match.getCurrentPlayers() >= match.getMaxPlayers()) {\r\n            match.setStatus(\"FULL\");\r\n        }\r\n        matchRepository.save(match);\r\n\r\n        // Send confirmation to member\r\n        emailService.sendEmail(\r\n                request.getMember().getUser().getEmail(),\r\n                \"Join Request Approved\",\r\n                \"Your request to join the match on \" + match.getStartTime() +\r\n                        \" has been approved!\\n\\nLocation: \" + match.getLocation()\r\n        );\r\n    }\r\n\r\n    @Transactional\r\n    public void cancelJoinRequest(Integer requestId, Integer memberId) {\r\n        JoinRequest request = joinRequestRepository.findById(requestId)\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"Request not found\"));\r\n\r\n        if (!request.getMember().getId().equals(memberId)) {\r\n            throw new UnauthorizedException(\"Only requester can cancel request\");\r\n        }\r\n\r\n        if (JoinRequest.Status.APPROVED.equals(request.getStatus())) {\r\n            FriendlyMatch match = request.getFriendlyMatch();\r\n            match.setCurrentPlayers(match.getCurrentPlayers() - 1);\r\n\r\n            if (\"FULL\".equals(match.getStatus())) {\r\n                match.setStatus(\"OPEN\");\r\n            }\r\n\r\n            matchRepository.save(match);\r\n        }\r\n\r\n        joinRequestRepository.delete(request);\r\n\r\n        // Notify organizer\r\n        emailService.sendEmail(\r\n                request.getFriendlyMatch().getOrganizer().getUser().getEmail(),\r\n                \"Join Request Cancelled\",\r\n                request.getMember().getUser().getName() + \" has cancelled their request to join your match\"\r\n        );\r\n    }\r\n\r\n    private void scheduleReminder(FriendlyMatch match, Member member) {\r\n        // Implementation would use a task scheduler\r\n        LocalDateTime reminderTime = match.getStartTime().minusHours(24);\r\n        // Actual scheduling implementation would go here\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/FriendlyMatchService.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/FriendlyMatchService.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/FriendlyMatchService.java	(revision 97abd609899a67b781b8ace8e91358a782fc5acd)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/FriendlyMatchService.java	(date 1753722416052)
@@ -3,11 +3,23 @@
 import com.pickleball_backend.pickleball.entity.*;
 import com.pickleball_backend.pickleball.exception.*;
 import com.pickleball_backend.pickleball.repository.*;
+import com.pickleball_backend.pickleball.dto.FriendlyMatchInvitationDto;
+import com.pickleball_backend.pickleball.dto.JoinRequestDto;
+import com.pickleball_backend.pickleball.dto.FriendlyMatchResponseDto;
+import com.pickleball_backend.pickleball.dto.BookingResponseDto;
+import com.pickleball_backend.pickleball.dto.FriendlyMatchPaymentDto;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Service;
 import org.springframework.transaction.annotation.Transactional;
 import java.time.LocalDateTime;
 import java.util.List;
+import java.util.Objects;
+import com.pickleball_backend.pickleball.repository.CourtRepository;
+import com.pickleball_backend.pickleball.repository.VenueRepository;
+import com.pickleball_backend.pickleball.repository.BookingRepository;
+import com.pickleball_backend.pickleball.repository.PaymentRepository;
+import com.pickleball_backend.pickleball.repository.WalletRepository;
+import org.springframework.scheduling.annotation.Scheduled;
 
 @Service
 public class FriendlyMatchService {
@@ -16,8 +28,17 @@
     @Autowired private JoinRequestRepository joinRequestRepository;
     @Autowired private MemberRepository memberRepository;
     @Autowired private EmailService emailService;
+    @Autowired private CourtRepository courtRepository;
+    @Autowired private VenueRepository venueRepository;
+    @Autowired private BookingRepository bookingRepository;
+    @Autowired private SlotRepository slotRepository;
+    @Autowired private PaymentRepository paymentRepository;
+    @Autowired private WalletRepository walletRepository;
+    @Autowired
+    private CancellationRequestRepository cancellationRequestRepository;
 
     public List<FriendlyMatch> getOpenMatches() {
+        // 获取所有状态为OPEN的比赛，包括邀请类型和独立类型
         return matchRepository.findByStatus("OPEN");
     }
 
@@ -30,73 +51,316 @@
         return matchRepository.save(match);
     }
 
+    @Transactional
+    public FriendlyMatchResponseDto createFriendlyMatch(FriendlyMatch match, Integer organizerId) {
+        Member organizer = memberRepository.findById(organizerId)
+                .orElseThrow(() -> new ResourceNotFoundException("Member not found"));
+
+        match.setOrganizer(organizer);
+        match.setIsInvitation(false);
+        match.setInvitationType("FRIENDLY_MATCH");
+        match.setStatus("OPEN");
+        match.setPaymentStatus("PENDING");
+        match.setCurrentPlayers(1); // Organizer is first player
+
+        // 验证courtId是否存在並計算價格
+        if (match.getCourtId() != null) {
+            Court court = courtRepository.findById(match.getCourtId()).orElse(null);
+            if (court == null) {
+                throw new ResourceNotFoundException("Court not found with ID: " + match.getCourtId());
+            }
+            
+            // 計算價格：根據時間判斷使用 peak 或 off-peak 價格
+            if (match.getDurationHours() != null && match.getStartTime() != null) {
+                double pricePerHour = 0.0;
+                String priceType = "Unknown";
+                
+                // 判斷是否為 peak hour
+                if (court.getPeakStartTime() != null && court.getPeakEndTime() != null) {
+                    try {
+                        int peakStartHour = Integer.parseInt(court.getPeakStartTime().split(":")[0]);
+                        int peakEndHour = Integer.parseInt(court.getPeakEndTime().split(":")[0]);
+                        int matchStartHour = match.getStartTime().getHour();
+                        
+                        boolean isPeakHour;
+                        // 處理跨日的情況（例如 22:00 - 02:00）
+                        if (peakStartHour > peakEndHour) {
+                            isPeakHour = matchStartHour >= peakStartHour || matchStartHour <= peakEndHour;
+                        } else {
+                            isPeakHour = matchStartHour >= peakStartHour && matchStartHour < peakEndHour;
+                        }
+                        
+                        if (isPeakHour) {
+                            pricePerHour = court.getPeakHourlyPrice() != null ? court.getPeakHourlyPrice() : 0.0;
+                            priceType = "Peak";
+                        } else {
+                            pricePerHour = court.getOffPeakHourlyPrice() != null ? court.getOffPeakHourlyPrice() : 0.0;
+                            priceType = "Off-Peak";
+                        }
+                    } catch (Exception e) {
+                        // 如果解析失敗，使用 peak price 作為默認值
+                        pricePerHour = court.getPeakHourlyPrice() != null ? court.getPeakHourlyPrice() : 0.0;
+                        priceType = "Default (Peak)";
+                    }
+                } else {
+                    // 如果沒有設置 peak 時間，使用 peak price 作為默認值
+                    pricePerHour = court.getPeakHourlyPrice() != null ? court.getPeakHourlyPrice() : 0.0;
+                    priceType = "Default (Peak)";
+                }
+                
+                double totalPrice = pricePerHour * match.getDurationHours();
+                match.setPrice(totalPrice);
+                
+                System.out.println("=== Price calculation ===");
+                System.out.println("Match start time: " + match.getStartTime());
+                System.out.println("Peak start time: " + court.getPeakStartTime());
+                System.out.println("Peak end time: " + court.getPeakEndTime());
+                System.out.println("Price type: " + priceType);
+                System.out.println("Court price per hour: " + pricePerHour);
+                System.out.println("Duration hours: " + match.getDurationHours());
+                System.out.println("Total price: " + totalPrice);
+            }
+        }
+
+        // Lock the court slot by setting it to pending status
+        if (match.getStartTime() != null && match.getCourtId() != null) {
+            // 锁定对应的时间段，防止其他人预订
+            LocalDateTime startTime = match.getStartTime();
+            LocalDateTime endTime = match.getEndTime();
+            
+            System.out.println("=== Locking slots for friendly match ===");
+            System.out.println("Court ID: " + match.getCourtId());
+            System.out.println("Start Time: " + startTime);
+            System.out.println("End Time: " + endTime);
+            
+            // 查找并更新对应时间段的slot状态为PENDING
+            List<Slot> slotsToLock = slotRepository.findByCourtIdAndDateAndIsAvailableTrue(
+                match.getCourtId(),
+                startTime.toLocalDate()
+            );
+            
+            System.out.println("Total slots found for date: " + slotsToLock.size());
+            
+            // 过滤出在时间范围内的slots
+            List<Slot> slotsInTimeRange = slotsToLock.stream()
+                .filter(slot -> !slot.getStartTime().isBefore(startTime.toLocalTime()) && 
+                               !slot.getEndTime().isAfter(endTime.toLocalTime()))
+                .toList();
+            
+            System.out.println("Slots in time range: " + slotsInTimeRange.size());
+            
+            for (Slot slot : slotsInTimeRange) {
+                System.out.println("Locking slot: " + slot.getId() + 
+                    ", Time: " + slot.getStartTime() + "-" + slot.getEndTime() + 
+                    ", Status: " + slot.getStatus() + " -> PENDING");
+                slot.setStatus("PENDING");
+                slot.setAvailable(false);
+                slotRepository.save(slot);
+            }
+            System.out.println("=== End locking slots ===");
+        }
+
+        FriendlyMatch savedMatch = matchRepository.save(match);
+        
+        // 為 organizer 創建一個 join request，確保他們被計算為參與者
+        JoinRequest organizerJoinRequest = new JoinRequest();
+        organizerJoinRequest.setFriendlyMatch(savedMatch);
+        organizerJoinRequest.setMember(organizer);
+        organizerJoinRequest.setStatus(JoinRequest.Status.APPROVED);
+        organizerJoinRequest.setRequestTime(LocalDateTime.now());
+        joinRequestRepository.save(organizerJoinRequest);
+        
+        // Convert to DTO to avoid serialization issues
+        return convertToResponseDto(savedMatch, "Friendly match created successfully! The court is now temporarily locked.");
+    }
+
+    /**
+     * 确定match的状态
+     * 如果时间已过期，返回"END"
+     * 如果match状态是CANCELLED，返回"CANCELLED"
+     * 否则返回原始状态
+     */
+    private String determineMatchStatus(FriendlyMatch match) {
+        System.out.println("=== Checking match status ===");
+        System.out.println("Match ID: " + match.getId());
+        System.out.println("Original status: " + match.getStatus());
+        System.out.println("Start time: " + match.getStartTime());
+        System.out.println("End time: " + match.getEndTime());
+        System.out.println("Current players: " + match.getCurrentPlayers());
+        System.out.println("Max players: " + match.getMaxPlayers());
+        
+        // 如果match已经被取消，直接返回CANCELLED
+        if ("CANCELLED".equals(match.getStatus())) {
+            System.out.println("Match is CANCELLED, returning CANCELLED");
+            return "CANCELLED";
+        }
+        
+        // 检查时间是否已过期
+        LocalDateTime now = LocalDateTime.now();
+        System.out.println("Current time: " + now);
+        System.out.println("Current date: " + now.toLocalDate());
+        LocalDateTime matchEndTime = null;
+        
+        if (match.getEndTime() != null) {
+            matchEndTime = match.getEndTime();
+            System.out.println("Using end time: " + matchEndTime);
+            System.out.println("End date: " + matchEndTime.toLocalDate());
+        } else if (match.getStartTime() != null) {
+            // 如果没有endTime，使用startTime + 1小时作为结束时间
+            matchEndTime = match.getStartTime().plusHours(1);
+            System.out.println("Using start time + 1 hour: " + matchEndTime);
+            System.out.println("Calculated end date: " + matchEndTime.toLocalDate());
+        }
+        
+        if (matchEndTime != null) {
+            boolean isExpired = now.isAfter(matchEndTime);
+            System.out.println("Is expired: " + isExpired);
+            System.out.println("Time difference: " + java.time.Duration.between(matchEndTime, now));
+            if (isExpired) {
+                System.out.println("Match is expired, returning END");
+                return "END";
+            }
+        } else {
+            System.out.println("No end time available, cannot determine if expired");
+        }
+        
+        // 检查是否满员
+        if (match.getCurrentPlayers() >= match.getMaxPlayers()) {
+            System.out.println("Match is full, returning FULL");
+            return "FULL";
+        }
+        
+        System.out.println("Match is not expired and not full, returning original status: " + match.getStatus());
+        return match.getStatus();
+    }
+
+    @Transactional
+    public void deleteFriendlyMatch(Integer matchId, Integer organizerId) {
+        FriendlyMatch match = matchRepository.findById(matchId)
+                .orElseThrow(() -> new ResourceNotFoundException("Match not found"));
+
+        // 只有发起人才能删除match
+        if (!match.getOrganizer().getId().equals(organizerId)) {
+            throw new UnauthorizedException("Only the organizer can delete this match");
+        }
+
+        // 解锁对应的时间段
+        if (match.getStartTime() != null && match.getCourtId() != null) {
+            LocalDateTime startTime = match.getStartTime();
+            LocalDateTime endTime = match.getEndTime();
+            
+            System.out.println("=== Unlocking slots for deleted friendly match ===");
+            System.out.println("Court ID: " + match.getCourtId());
+            System.out.println("Start Time: " + startTime);
+            System.out.println("End Time: " + endTime);
+            
+            // 查找并更新对应时间段的slot状态为AVAILABLE
+            List<Slot> slotsToUnlock = slotRepository.findByCourtIdAndDateAndStatus(
+                match.getCourtId(),
+                startTime.toLocalDate(),
+                "PENDING"
+            );
+            
+            System.out.println("Total PENDING slots found for date: " + slotsToUnlock.size());
+            
+            // 过滤出在时间范围内的slots
+            List<Slot> slotsInTimeRange = slotsToUnlock.stream()
+                .filter(slot -> !slot.getStartTime().isBefore(startTime.toLocalTime()) && 
+                               !slot.getEndTime().isAfter(endTime.toLocalTime()))
+                .toList();
+            
+            System.out.println("Slots in time range to unlock: " + slotsInTimeRange.size());
+            
+            for (Slot slot : slotsInTimeRange) {
+                System.out.println("Unlocking slot: " + slot.getId() + 
+                    ", Time: " + slot.getStartTime() + "-" + slot.getEndTime() + 
+                    ", Status: " + slot.getStatus() + " -> AVAILABLE");
+                slot.setStatus("AVAILABLE");
+                slot.setAvailable(true);
+                slotRepository.save(slot);
+            }
+            System.out.println("=== End unlocking slots ===");
+        }
+
+        // 删除相关的join requests
+        if (match.getJoinRequests() != null) {
+            joinRequestRepository.deleteAll(match.getJoinRequests());
+        }
+
+        // 删除match
+        matchRepository.delete(match);
+    }
+
     @Transactional
     public JoinRequest sendJoinRequest(Integer matchId, Integer memberId) {
         FriendlyMatch match = matchRepository.findById(matchId)
                 .orElseThrow(() -> new ResourceNotFoundException("Match not found"));
 
-        if (!"OPEN".equals(match.getStatus())) {
-            throw new ValidationException("Match is not open for joining");
+        // 检查match状态
+        String currentStatus = determineMatchStatus(match);
+        if (!"OPEN".equals(currentStatus)) {
+            throw new ValidationException("Match is not open for joining. Current status: " + currentStatus);
+        }
+        
+        // 检查是否已经满员
+        if (match.getCurrentPlayers() >= match.getMaxPlayers()) {
+            throw new ValidationException("Match is already full. Cannot join.");
         }
 
         Member member = memberRepository.findById(memberId)
                 .orElseThrow(() -> new ResourceNotFoundException("Member not found"));
 
         // Check for existing request
-        if (joinRequestRepository.findByMemberIdAndFriendlyMatchId(memberId, matchId).isPresent()) {
+        boolean alreadyJoined = match.getJoinRequests() != null && match.getJoinRequests().stream()
+            .anyMatch(r -> r.getMember() != null && r.getMember().getId().equals(memberId));
+        if (alreadyJoined) {
             throw new ValidationException("Join request already exists");
         }
 
-        JoinRequest request = new JoinRequest();
-        request.setMember(member);
-        request.setFriendlyMatch(match);
-        request.setStatus(JoinRequest.Status.PENDING);
-
-        joinRequestRepository.save(request);
-
-        // Notify organizer
-        emailService.sendEmail(
-                match.getOrganizer().getUser().getEmail(),
-                "New Join Request for Your Match",
-                member.getUser().getName() + " wants to join your match on " +
-                        match.getStartTime() + "\n\nPlease approve or reject in the app."
-        );
-
-        return request;
-    }
-
-    @Transactional
-    public void approveRequest(Integer requestId, Integer organizerId) {
-        JoinRequest request = joinRequestRepository.findById(requestId)
-                .orElseThrow(() -> new ResourceNotFoundException("Request not found"));
-
-        if (!request.getFriendlyMatch().getOrganizer().getId().equals(organizerId)) {
-            throw new UnauthorizedException("Only organizer can approve requests");
-        }
-
-        FriendlyMatch match = request.getFriendlyMatch();
-
-        // Added validation for full match
-        if (match.getCurrentPlayers() >= match.getMaxPlayers()) {
-            throw new ValidationException("Match is already full");
-        }
-
-        request.setStatus(JoinRequest.Status.APPROVED);
-        joinRequestRepository.save(request);
-
+        JoinRequest req = new JoinRequest();
+        req.setMember(member);
+        req.setFriendlyMatch(match);
+        // 直接設為 APPROVED
+        req.setStatus(JoinRequest.Status.APPROVED);
+        joinRequestRepository.save(req);
+        // 增加 currentPlayers
         match.setCurrentPlayers(match.getCurrentPlayers() + 1);
+        matchRepository.save(match);
+
+        // 检查是否满员
         if (match.getCurrentPlayers() >= match.getMaxPlayers()) {
+            // 满员时将状态设为FULL
             match.setStatus("FULL");
-        }
-        matchRepository.save(match);
+            matchRepository.save(match);
+            
+            // 满员时通知organizer
+            emailService.sendEmail(
+                    match.getOrganizer().getUser().getEmail(),
+                    "Match is Full - Payment Required",
+                    "Your match on " + match.getStartTime() + " is now full with " + 
+                    match.getCurrentPlayers() + "/" + match.getMaxPlayers() + " players.\n\n" +
+                    "Please complete the payment within 24 hours to confirm the court booking and match arrangement.\n\n" +
+                    "If payment is not completed within 24 hours, the match will be automatically cancelled and the court will be released."
+            );
+        } else {
+            // 未满员时通知organizer有新玩家加入
+            emailService.sendEmail(
+                    match.getOrganizer().getUser().getEmail(),
+                    "New Player Joined Your Match",
+                    member.getUser().getName() + " has joined your match on " +
+                            match.getStartTime() + "\n\nPlease check the app for details."
+            );
+        }
 
-        // Send confirmation to member
+        // Notify participant
         emailService.sendEmail(
-                request.getMember().getUser().getEmail(),
-                "Join Request Approved",
-                "Your request to join the match on " + match.getStartTime() +
-                        " has been approved!\n\nLocation: " + match.getLocation()
+                member.getUser().getEmail(),
+                "Successfully Joined Match",
+                "You have successfully joined the match on " + match.getStartTime() +
+                        "\n\nLocation: " + match.getLocation()
         );
+
+        return req;
     }
 
     @Transactional
@@ -108,17 +372,7 @@
             throw new UnauthorizedException("Only requester can cancel request");
         }
 
-        if (JoinRequest.Status.APPROVED.equals(request.getStatus())) {
-            FriendlyMatch match = request.getFriendlyMatch();
-            match.setCurrentPlayers(match.getCurrentPlayers() - 1);
-
-            if ("FULL".equals(match.getStatus())) {
-                match.setStatus("OPEN");
-            }
-
-            matchRepository.save(match);
-        }
-
+        // 直接刪除 join request，不需要判斷狀態
         joinRequestRepository.delete(request);
 
         // Notify organizer
@@ -129,9 +383,648 @@
         );
     }
 
+    // 建立由 booking 產生的 FriendlyMatch invitation
+    @Transactional
+    public FriendlyMatch createInvitation(FriendlyMatch match, Integer bookingId, Integer organizerId) {
+        Member organizer = memberRepository.findById(organizerId)
+                .orElseThrow(() -> new ResourceNotFoundException("Member not found"));
+        match.setOrganizer(organizer);
+        match.setIsInvitation(true);
+        match.setInvitationType("FRIENDLY_MATCH_INVITE");
+        match.setPaymentStatus("CONFIRMED"); // 邀请类型基于已确认付款的booking，所以设置为CONFIRMED
+        Booking booking = bookingRepository.findById(bookingId)
+                .orElseThrow(() -> new ResourceNotFoundException("Booking not found"));
+        match.setBooking(booking);
+        
+        // 从booking中获取时间信息并设置到match中
+        if (booking.getBookingSlots() != null && !booking.getBookingSlots().isEmpty()) {
+            List<BookingSlot> slots = booking.getBookingSlots();
+            Slot firstSlot = slots.get(0).getSlot();
+            Slot lastSlot = slots.get(slots.size() - 1).getSlot();
+            
+            if (firstSlot != null && firstSlot.getDate() != null && firstSlot.getStartTime() != null) {
+                LocalDateTime startTime = LocalDateTime.of(firstSlot.getDate(), firstSlot.getStartTime());
+                match.setStartTime(startTime);
+            }
+            
+            if (lastSlot != null && lastSlot.getDate() != null && lastSlot.getEndTime() != null) {
+                LocalDateTime endTime = LocalDateTime.of(lastSlot.getDate(), lastSlot.getEndTime());
+                match.setEndTime(endTime);
+            }
+        }
+        
+        if (Objects.equals(match.getMaxPlayers(), null)) {
+            throw new ValidationException("maxPlayers is required");
+        }
+        // 檢查同一個 booking/court/time 是否已經有 OPEN/FULL match
+        List<FriendlyMatch> existing = matchRepository.findByBookingIdAndStatusIn(bookingId, List.of("OPEN", "FULL"));
+        if (!existing.isEmpty()) {
+            throw new ValidationException("A match for this booking/time already exists.");
+        }
+        return matchRepository.save(match);
+    }
+
+    // 每天凌晨2點清理過期 reservation 和 match
+    @Scheduled(cron = "0 0 2 * * *")
+    @Transactional
+    public void cleanupExpiredReservationsAndMatches() {
+        // 清理過期 booking
+        List<Booking> expiredBookings = bookingRepository.findAllExpired(LocalDateTime.now());
+        for (Booking b : expiredBookings) {
+            bookingRepository.delete(b);
+        }
+        // 清理過期 match
+        List<FriendlyMatch> expiredMatches = matchRepository.findAllExpired(LocalDateTime.now());
+        for (FriendlyMatch m : expiredMatches) {
+            matchRepository.delete(m);
+        }
+    }
+
+    // 每小时检查一次未付款的满员match（24小时自动清除）
+    @Scheduled(cron = "0 0 * * * *")
+    @Transactional
+    public void cleanupUnpaidFullMatches() {
+        System.out.println("=== Checking for unpaid full matches ===");
+        LocalDateTime twentyFourHoursAgo = LocalDateTime.now().minusHours(24);
+        
+        // 查找所有OPEN状态且PENDING付款的match
+        List<FriendlyMatch> allMatches = matchRepository.findAll();
+        List<FriendlyMatch> unpaidFullMatches = allMatches.stream()
+            .filter(match -> "OPEN".equals(match.getStatus()) && "PENDING".equals(match.getPaymentStatus()))
+            .toList();
+        
+        for (FriendlyMatch match : unpaidFullMatches) {
+            // 检查是否满员
+            if (match.getCurrentPlayers() >= match.getMaxPlayers()) {
+                // 使用startTime作为创建时间的替代（简化逻辑）
+                if (match.getStartTime() != null && match.getStartTime().isBefore(twentyFourHoursAgo)) {
+                    System.out.println("Cancelling unpaid full match: " + match.getId());
+                    
+                    // 解锁对应的时间段
+                    if (match.getStartTime() != null && match.getCourtId() != null) {
+                        LocalDateTime startTime = match.getStartTime();
+                        LocalDateTime endTime = match.getEndTime();
+                        
+                        List<Slot> slotsToUnlock = slotRepository.findByCourtIdAndDateAndStatus(
+                            match.getCourtId(),
+                            startTime.toLocalDate(),
+                            "PENDING"
+                        );
+                        
+                        List<Slot> slotsInTimeRange = slotsToUnlock.stream()
+                            .filter(slot -> !slot.getStartTime().isBefore(startTime.toLocalTime()) && 
+                                           !slot.getEndTime().isAfter(endTime.toLocalTime()))
+                            .toList();
+                        
+                        for (Slot slot : slotsInTimeRange) {
+                            slot.setStatus("AVAILABLE");
+                            slot.setAvailable(true);
+                            slotRepository.save(slot);
+                        }
+                    }
+                    
+                    // 删除相关的join requests
+                    if (match.getJoinRequests() != null) {
+                        joinRequestRepository.deleteAll(match.getJoinRequests());
+                    }
+                    
+                    // 通知organizer
+                    emailService.sendEmail(
+                        match.getOrganizer().getUser().getEmail(),
+                        "Match Cancelled - Payment Timeout",
+                        "Your match on " + match.getStartTime() + " has been automatically cancelled " +
+                        "due to non-payment within 24 hours. The court has been released for other bookings."
+                    );
+                    
+                    // 删除match
+                    matchRepository.delete(match);
+                }
+            }
+        }
+    }
+
+    // 每小時檢查一次所有過期的 PENDING matches（24小時自動清除）
+    @Scheduled(cron = "0 0 * * * *")
+    @Transactional
+    public void cleanupExpiredPendingMatches() {
+        System.out.println("=== Checking for expired pending matches ===");
+        LocalDateTime twentyFourHoursAgo = LocalDateTime.now().minusHours(24);
+        
+        // 查找所有 PENDING 付款的 match
+        List<FriendlyMatch> allMatches = matchRepository.findAll();
+        List<FriendlyMatch> expiredPendingMatches = allMatches.stream()
+            .filter(match -> "PENDING".equals(match.getPaymentStatus()) && 
+                           match.getStartTime() != null && 
+                           match.getStartTime().isBefore(twentyFourHoursAgo))
+            .toList();
+        
+        for (FriendlyMatch match : expiredPendingMatches) {
+            System.out.println("Cancelling expired pending match: " + match.getId());
+            
+            // 解锁对应的时间段
+            if (match.getStartTime() != null && match.getCourtId() != null) {
+                LocalDateTime startTime = match.getStartTime();
+                LocalDateTime endTime = match.getEndTime();
+                
+                List<Slot> slotsToUnlock = slotRepository.findByCourtIdAndDateAndStatus(
+                    match.getCourtId(),
+                    startTime.toLocalDate(),
+                    "PENDING"
+                );
+                
+                List<Slot> slotsInTimeRange = slotsToUnlock.stream()
+                    .filter(slot -> !slot.getStartTime().isBefore(startTime.toLocalTime()) && 
+                                   !slot.getEndTime().isAfter(endTime.toLocalTime()))
+                    .toList();
+                
+                for (Slot slot : slotsInTimeRange) {
+                    slot.setStatus("AVAILABLE");
+                    slot.setAvailable(true);
+                    slotRepository.save(slot);
+                }
+            }
+            
+            // 删除相关的join requests
+            if (match.getJoinRequests() != null) {
+                joinRequestRepository.deleteAll(match.getJoinRequests());
+            }
+            
+            // 通知organizer
+            emailService.sendEmail(
+                match.getOrganizer().getUser().getEmail(),
+                "Match Cancelled - Timeout",
+                "Your match on " + match.getStartTime() + " has been automatically cancelled " +
+                "due to timeout (24 hours). The court has been released for other bookings."
+            );
+            
+            // 删除match
+            matchRepository.delete(match);
+        }
+    }
+
+    // 當建立者取消 reservation 時，對應 match 一併取消
+    @Transactional
+    public void cancelReservationAndMatch(Integer bookingId) {
+        // 先解除 match 的 booking 关联
+        List<FriendlyMatch> matches = matchRepository.findByBookingId(bookingId);
+        for (FriendlyMatch m : matches) {
+            m.setStatus("CANCELLED");
+            m.setBooking(null);
+            matchRepository.save(m);
+        }
+        // 删除所有关联的取消请求
+        List<CancellationRequest> requests = cancellationRequestRepository.findByBookingId(bookingId);
+        for (CancellationRequest req : requests) {
+            cancellationRequestRepository.delete(req);
+        }
+        // 再删除 booking
+        Booking booking = bookingRepository.findById(bookingId).orElse(null);
+        if (booking != null) {
+            bookingRepository.delete(booking);
+        }
+    }
+
+    // 查詢所有 invitation 型的 OPEN match
+    public List<FriendlyMatch> getOpenInvitations() {
+        return matchRepository.findByIsInvitationAndStatus(true, "OPEN");
+    }
+
+    public List<FriendlyMatchInvitationDto> getOpenInvitationsDto() {
+        List<FriendlyMatch> invitations = getOpenInvitations();
+        return invitations.stream().map(this::toInvitationDto).toList();
+    }
+
+    public List<FriendlyMatchInvitationDto> getAllMatchesDto() {
+        // 查询所有match，不仅仅是OPEN状态的
+        List<FriendlyMatch> allMatches = matchRepository.findAll();
+        System.out.println("=== getAllMatchesDto ===");
+        System.out.println("Total matches found: " + allMatches.size());
+        
+        // 修复现有邀请类型match的时间信息
+        fixExistingInvitationMatches(allMatches);
+        
+        return allMatches.stream().map(this::toInvitationDto).toList();
+    }
+    
+    /**
+     * 修复现有邀请类型match的时间信息
+     */
+    private void fixExistingInvitationMatches(List<FriendlyMatch> matches) {
+        for (FriendlyMatch match : matches) {
+            // 只处理邀请类型且没有时间信息的match
+            if (match.isInvitation() && match.getBooking() != null && 
+                (match.getStartTime() == null || match.getEndTime() == null)) {
+                
+                Booking booking = match.getBooking();
+                if (booking.getBookingSlots() != null && !booking.getBookingSlots().isEmpty()) {
+                    List<BookingSlot> slots = booking.getBookingSlots();
+                    Slot firstSlot = slots.get(0).getSlot();
+                    Slot lastSlot = slots.get(slots.size() - 1).getSlot();
+                    
+                    boolean needsUpdate = false;
+                    
+                    if (match.getStartTime() == null && firstSlot != null && 
+                        firstSlot.getDate() != null && firstSlot.getStartTime() != null) {
+                        LocalDateTime startTime = LocalDateTime.of(firstSlot.getDate(), firstSlot.getStartTime());
+                        match.setStartTime(startTime);
+                        needsUpdate = true;
+                    }
+                    
+                    if (match.getEndTime() == null && lastSlot != null && 
+                        lastSlot.getDate() != null && lastSlot.getEndTime() != null) {
+                        LocalDateTime endTime = LocalDateTime.of(lastSlot.getDate(), lastSlot.getEndTime());
+                        match.setEndTime(endTime);
+                        needsUpdate = true;
+                    }
+                    
+                    // 修复paymentStatus
+                    if (match.getPaymentStatus() == null) {
+                        match.setPaymentStatus("CONFIRMED");
+                        needsUpdate = true;
+                    }
+                    
+                    if (needsUpdate) {
+                        System.out.println("Fixing match " + match.getId() + " with booking " + booking.getId());
+                        matchRepository.save(match);
+                    }
+                }
+            }
+            
+            // 修復：為所有 match 檢查是否有 organizer 的 join request
+            if (match.getOrganizer() != null) {
+                // 檢查是否已經有 organizer 的 join request
+                boolean hasOrganizerJoinRequest = match.getJoinRequests() != null && 
+                    match.getJoinRequests().stream()
+                        .anyMatch(req -> req.getMember().getId().equals(match.getOrganizer().getId()) && 
+                                       req.getStatus() == JoinRequest.Status.APPROVED);
+                
+                if (!hasOrganizerJoinRequest) {
+                    System.out.println("Fixing match " + match.getId() + ": Adding organizer join request");
+                    
+                    // 為 organizer 創建 join request
+                    JoinRequest organizerJoinRequest = new JoinRequest();
+                    organizerJoinRequest.setFriendlyMatch(match);
+                    organizerJoinRequest.setMember(match.getOrganizer());
+                    organizerJoinRequest.setStatus(JoinRequest.Status.APPROVED);
+                    organizerJoinRequest.setRequestTime(LocalDateTime.now());
+                    joinRequestRepository.save(organizerJoinRequest);
+                    
+                    // 確保 currentPlayers 至少為 1
+                    if (match.getCurrentPlayers() < 1) {
+                        match.setCurrentPlayers(1);
+                        matchRepository.save(match);
+                    }
+                }
+            }
+            
+            // 修復：為現有的 matches 設置價格
+            if (match.getPrice() == null || match.getPrice() == 0) {
+                System.out.println("Fixing match " + match.getId() + ": Setting price");
+                if (match.getCourtId() != null && match.getStartTime() != null && match.getDurationHours() != null) {
+                    Court court = courtRepository.findById(match.getCourtId()).orElse(null);
+                    if (court != null) {
+                        double pricePerHour = 0.0;
+                        String priceType = "Unknown";
+                        
+                        // 判斷是否為 peak hour
+                        if (court.getPeakStartTime() != null && court.getPeakEndTime() != null) {
+                            try {
+                                int peakStartHour = Integer.parseInt(court.getPeakStartTime().split(":")[0]);
+                                int peakEndHour = Integer.parseInt(court.getPeakEndTime().split(":")[0]);
+                                int matchStartHour = match.getStartTime().getHour();
+                                
+                                boolean isPeakHour;
+                                // 處理跨日的情況（例如 22:00 - 02:00）
+                                if (peakStartHour > peakEndHour) {
+                                    isPeakHour = matchStartHour >= peakStartHour || matchStartHour <= peakEndHour;
+                                } else {
+                                    isPeakHour = matchStartHour >= peakStartHour && matchStartHour < peakEndHour;
+                                }
+                                
+                                if (isPeakHour) {
+                                    pricePerHour = court.getPeakHourlyPrice() != null ? court.getPeakHourlyPrice() : 0.0;
+                                    priceType = "Peak";
+                                } else {
+                                    pricePerHour = court.getOffPeakHourlyPrice() != null ? court.getOffPeakHourlyPrice() : 0.0;
+                                    priceType = "Off-Peak";
+                                }
+                            } catch (Exception e) {
+                                // 如果解析失敗，使用 peak price 作為默認值
+                                pricePerHour = court.getPeakHourlyPrice() != null ? court.getPeakHourlyPrice() : 0.0;
+                                priceType = "Default (Peak)";
+                            }
+                        } else {
+                            // 如果沒有設置 peak 時間，使用 peak price 作為默認值
+                            pricePerHour = court.getPeakHourlyPrice() != null ? court.getPeakHourlyPrice() : 0.0;
+                            priceType = "Default (Peak)";
+                        }
+                        
+                        double totalPrice = pricePerHour * match.getDurationHours();
+                        match.setPrice(totalPrice);
+                        matchRepository.save(match);
+                        System.out.println("Set price for match " + match.getId() + ": " + totalPrice + " (" + priceType + ")");
+                    }
+                }
+            }
+        }
+    }
+
+    private FriendlyMatchInvitationDto toInvitationDto(FriendlyMatch match) {
+        FriendlyMatchInvitationDto dto = new FriendlyMatchInvitationDto();
+        dto.setId(match.getId());
+        dto.setBookingId(match.getBooking() != null ? match.getBooking().getId() : null);
+        dto.setOrganizerId(match.getOrganizer() != null ? match.getOrganizer().getId() : null);
+        dto.setMaxPlayers(match.getMaxPlayers());
+        dto.setCurrentPlayers(match.getCurrentPlayers());
+        dto.setPrice(match.getPrice());
+        
+        // 添加價格調試信息
+        System.out.println("=== Price Debug for Match " + match.getId() + " ===");
+        System.out.println("Match Price: " + match.getPrice());
+        System.out.println("DTO Price: " + dto.getPrice());
+        System.out.println("=== End Price Debug ===");
+        
+        // 检查时间是否已过期，确定状态 - 在设置时间之前先确定状态
+        String status = determineMatchStatus(match);
+        dto.setStatus(status);
+        
+        dto.setInvitationType(match.getInvitationType());
+        dto.setPaymentStatus(match.getPaymentStatus());
+        dto.setIsInvitation(match.isInvitation());
+        
+        // 调试信息
+        System.out.println("=== DTO Debug for Match " + match.getId() + " ===");
+        System.out.println("IsInvitation: " + match.isInvitation());
+        System.out.println("PaymentStatus: " + match.getPaymentStatus());
+        System.out.println("Has Booking: " + (match.getBooking() != null));
+        System.out.println("Final Status: " + status);
+        System.out.println("Original Match Status: " + match.getStatus());
+        System.out.println("Current Players: " + match.getCurrentPlayers());
+        System.out.println("Max Players: " + match.getMaxPlayers());
+        System.out.println("Join Requests Count: " + (match.getJoinRequests() != null ? match.getJoinRequests().size() : 0));
+        if (match.getJoinRequests() != null) {
+            System.out.println("Join Requests: " + match.getJoinRequests().stream()
+                .map(req -> req.getMember().getUser().getUserAccount().getUsername() + "(" + req.getStatus() + ")")
+                .collect(java.util.stream.Collectors.joining(", ")));
+        }
+        System.out.println("=== End DTO Debug ===");
+        
+        // 处理邀请类型的比赛（有booking）
+        if (match.getBooking() != null) {
+            Booking booking = bookingRepository.findById(match.getBooking().getId()).orElse(null);
+            if (booking != null && booking.getBookingSlots() != null && !booking.getBookingSlots().isEmpty()) {
+                // 取第一個 slot 的 startTime，最後一個 slot 的 endTime
+                List<BookingSlot> slots = booking.getBookingSlots();
+                Slot firstSlot = slots.get(0).getSlot();
+                Slot lastSlot = slots.get(slots.size() - 1).getSlot();
+                if (firstSlot != null) {
+                    dto.setSlotDate(firstSlot.getDate());
+                    // 设置时间，但不影响已确定的状态
+                    dto.setStartTime(firstSlot.getStartTime() != null && firstSlot.getDate() != null
+                        ? java.time.LocalDateTime.of(firstSlot.getDate(), firstSlot.getStartTime())
+                        : null);
+                }
+                if (lastSlot != null) {
+                    dto.setEndTime(lastSlot.getEndTime() != null && lastSlot.getDate() != null
+                        ? java.time.LocalDateTime.of(lastSlot.getDate(), lastSlot.getEndTime())
+                        : null);
+                }
+                if (firstSlot != null && firstSlot.getCourtId() != null) {
+                    Court court = courtRepository.findById(firstSlot.getCourtId()).orElse(null);
+                    if (court != null) {
+                        dto.setCourtName(court.getName());
+                        dto.setCourtLocation(court.getLocation());
+                        if (court.getVenue() != null) {
+                            dto.setVenueName(court.getVenue().getName());
+                        }
+                    }
+                }
+            }
+            // 新增：設置 booking 狀態
+            dto.setBookingStatus(booking.getStatus());
+        }
+        // 处理独立friendly match（没有booking，直接从match获取信息）
+        else {
+            // 设置时间信息
+            if (match.getStartTime() != null) {
+                dto.setSlotDate(match.getStartTime().toLocalDate());
+                dto.setStartTime(match.getStartTime());
+            }
+            if (match.getEndTime() != null) {
+                dto.setEndTime(match.getEndTime());
+            }
+            
+            // 通过courtId获取真实的Court信息
+            System.out.println("=== Debug: Processing independent friendly match ===");
+            System.out.println("Match ID: " + match.getId());
+            System.out.println("Court ID: " + match.getCourtId());
+            System.out.println("Location: " + match.getLocation());
+            
+            if (match.getCourtId() != null) {
+                Court court = courtRepository.findById(match.getCourtId()).orElse(null);
+                System.out.println("Found Court: " + (court != null ? court.getName() + " at " + court.getLocation() : "null"));
+                if (court != null) {
+                    dto.setCourtName(court.getName());
+                    dto.setCourtLocation(court.getLocation());
+                    if (court.getVenue() != null) {
+                        dto.setVenueName(court.getVenue().getName());
+                    }
+                } else {
+                    // 如果找不到court，使用location字段作为fallback
+                    System.out.println("Court not found, using location fallback");
+                    dto.setCourt(match.getLocation());
+                    if (match.getLocation() != null) {
+                        String[] parts = match.getLocation().split(" at ");
+                        if (parts.length >= 2) {
+                            dto.setCourtName(parts[0].trim());
+                            dto.setVenueName(parts[1].trim());
+                        } else {
+                            dto.setCourtName(match.getLocation());
+                        }
+                    }
+                    dto.setCourtLocation(match.getLocation());
+                }
+            } else {
+                // 如果没有courtId，尝试通过location字段查找对应的Court
+                System.out.println("No courtId, trying to find court by location");
+                if (match.getLocation() != null) {
+                    String[] parts = match.getLocation().split(" at ");
+                    if (parts.length >= 2) {
+                        String courtName = parts[0].trim();
+                        String venueName = parts[1].trim();
+                        
+                        // 尝试通过court name查找
+                        List<Court> courts = courtRepository.findAll();
+                        Court foundCourt = courts.stream()
+                            .filter(c -> c.getName().equals(courtName))
+                            .findFirst()
+                            .orElse(null);
+                        
+                        if (foundCourt != null) {
+                            System.out.println("Found court by name: " + foundCourt.getName() + " at " + foundCourt.getLocation());
+                            dto.setCourtName(foundCourt.getName());
+                            dto.setCourtLocation(foundCourt.getLocation());
+                            if (foundCourt.getVenue() != null) {
+                                dto.setVenueName(foundCourt.getVenue().getName());
+                            }
+                        } else {
+                            System.out.println("Court not found by name, using location fallback");
+                            dto.setCourtName(courtName);
+                            dto.setVenueName(venueName);
+                            dto.setCourtLocation(match.getLocation());
+                        }
+                    } else {
+                        dto.setCourtName(match.getLocation());
+                        dto.setCourtLocation(match.getLocation());
+                    }
+                } else {
+                    dto.setCourt(match.getLocation());
+                    dto.setCourtLocation(match.getLocation());
+                }
+            }
+            
+            System.out.println("Final DTO values:");
+            System.out.println("  Court Name: " + dto.getCourtName());
+            System.out.println("  Venue Name: " + dto.getVenueName());
+            System.out.println("  Court Location: " + dto.getCourtLocation());
+            System.out.println("=== End Debug ===");
+            
+            // 设置booking状态为null，因为这是独立比赛
+            dto.setBookingStatus(null);
+        }
+        
+        if (match.getOrganizer() != null && match.getOrganizer().getUser() != null && match.getOrganizer().getUser().getUserAccount() != null) {
+            dto.setOrganizerUsername(match.getOrganizer().getUser().getUserAccount().getUsername());
+        }
+        if (match.getJoinRequests() != null) {
+            dto.setJoinRequests(match.getJoinRequests().stream().map(this::toJoinRequestDto).toList());
+        }
+        return dto;
+    }
+    private JoinRequestDto toJoinRequestDto(JoinRequest req) {
+        JoinRequestDto dto = new JoinRequestDto();
+        dto.setId(req.getId());
+        dto.setMemberId(req.getMember() != null ? req.getMember().getId() : null);
+        dto.setMemberName(req.getMember() != null ? req.getMember().getUser().getName() : null);
+        // 添加 username 欄位
+        if (req.getMember() != null && req.getMember().getUser() != null && req.getMember().getUser().getUserAccount() != null) {
+            dto.setUsername(req.getMember().getUser().getUserAccount().getUsername());
+        }
+        dto.setStatus(req.getStatus() != null ? req.getStatus().name() : null);
+        dto.setRequestTime(req.getRequestTime());
+        return dto;
+    }
+
+    // 加入 invitation
+    @Transactional
+    public JoinRequest joinInvitation(Integer matchId, Integer memberId) {
+        return sendJoinRequest(matchId, memberId);
+    }
+
     private void scheduleReminder(FriendlyMatch match, Member member) {
         // Implementation would use a task scheduler
         LocalDateTime reminderTime = match.getStartTime().minusHours(24);
         // Actual scheduling implementation would go here
     }
+    
+    public FriendlyMatchResponseDto convertToResponseDto(FriendlyMatch match, String message) {
+        FriendlyMatchResponseDto dto = new FriendlyMatchResponseDto();
+        dto.setId(match.getId());
+        dto.setMaxPlayers(match.getMaxPlayers());
+        dto.setCurrentPlayers(match.getCurrentPlayers());
+        dto.setSkillLevel(match.getSkillLevel());
+        dto.setMatchRules(match.getMatchRules());
+        dto.setStatus(match.getStatus());
+        dto.setPaymentStatus(match.getPaymentStatus());
+        dto.setStartTime(match.getStartTime());
+        dto.setEndTime(match.getEndTime());
+        dto.setDurationHours(match.getDurationHours());
+        dto.setLocation(match.getLocation());
+        dto.setOrganizerId(match.getOrganizer() != null ? match.getOrganizer().getId() : null);
+        dto.setOrganizerName(match.getOrganizer() != null && match.getOrganizer().getUser() != null ? 
+            match.getOrganizer().getUser().getName() : null);
+        dto.setInvitation(match.isInvitation());
+        dto.setInvitationType(match.getInvitationType());
+        dto.setMessage(message);
+        return dto;
+    }
+
+    @Transactional
+    public BookingResponseDto processFriendlyMatchPayment(FriendlyMatch match, Member member, FriendlyMatchPaymentDto paymentDto) {
+        // 1. 獲取或創建 wallet
+        Wallet wallet = getOrCreateWallet(member);
+        
+        // 2. 計算總金額
+        double baseAmount = match.getPrice() != null ? match.getPrice() : 0.0;
+        int numPaddles = paymentDto != null && paymentDto.getNumPaddles() != null ? paymentDto.getNumPaddles() : 0;
+        boolean buyBallSet = paymentDto != null && paymentDto.getBuyBallSet() != null && paymentDto.getBuyBallSet();
+        double paddleFee = numPaddles * 5.0;
+        double ballSetFee = buyBallSet ? 12.0 : 0.0;
+        double totalAmount = baseAmount + paddleFee + ballSetFee;
+        
+        // 3. 檢查 wallet balance
+        if (wallet.getBalance() < totalAmount) {
+            throw new InsufficientBalanceException("Insufficient wallet balance. Available: " + wallet.getBalance() + ", Required: " + totalAmount);
+        }
+        
+        // 4. 扣除 wallet balance
+        wallet.setBalance(wallet.getBalance() - totalAmount);
+        walletRepository.save(wallet);
+        
+        // 5. 創建 payment 記錄
+        Payment payment = new Payment();
+        payment.setAmount(totalAmount);
+        payment.setPaymentDate(LocalDateTime.now());
+        payment.setPaymentType("FRIENDLY_MATCH");
+        payment.setPaymentMethod("WALLET");
+        payment.setStatus("COMPLETED");
+        payment = paymentRepository.save(payment);
+        
+        // 6. 創建 booking 記錄
+        Booking booking = new Booking();
+        booking.setBookingDate(LocalDateTime.now());
+        booking.setTotalAmount(totalAmount);
+        booking.setStatus("CONFIRMED");
+        booking.setMember(member);
+        booking.setPayment(payment);
+        booking.setPurpose("Friendly Match");
+        booking.setNumberOfPlayers(match.getMaxPlayers());
+        booking.setNumPaddles(numPaddles);
+        booking.setBuyBallSet(buyBallSet);
+        // Booking entity 沒有 durationHours 字段，所以不設置
+        booking = bookingRepository.save(booking);
+        
+        // 7. 更新 friendly match 付款狀態
+        match.setPaymentStatus("PAID");
+        matchRepository.save(match);
+        
+        // 8. 創建 BookingResponseDto
+        BookingResponseDto response = new BookingResponseDto();
+        response.setBookingId(booking.getId());
+        response.setCourtName(match.getLocation()); // FriendlyMatch 使用 location 字段
+        response.setCourtLocation(match.getLocation()); // FriendlyMatch 使用 location 字段
+        response.setSlotDate(match.getStartTime().toLocalDate()); // 使用 slotDate 而不是 date
+        response.setStartTime(match.getStartTime().toLocalTime());
+        response.setEndTime(match.getEndTime().toLocalTime());
+        response.setNumberOfPlayers(match.getMaxPlayers());
+        response.setTotalAmount(totalAmount);
+        response.setPaymentStatus("COMPLETED");
+        response.setPaymentMethod("WALLET");
+        response.setDurationHours(match.getDurationHours());
+        response.setWalletBalance(wallet.getBalance());
+        // BookingResponseDto 沒有 numPaddles, buyBallSet, bookingType 字段
+        
+        return response;
+    }
+    
+    private Wallet getOrCreateWallet(Member member) {
+        Wallet wallet = walletRepository.findByMemberId(member.getId()).orElse(null);
+        if (wallet == null) {
+            wallet = new Wallet();
+            wallet.setMember(member);
+            wallet.setBalance(0.0);
+            wallet = walletRepository.save(wallet);
+        }
+        return wallet;
+    }
 }
\ No newline at end of file
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/CoachCourtServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.service;\r\n\r\nimport com.pickleball_backend.pickleball.dto.CoachSlotDto;\r\nimport com.pickleball_backend.pickleball.entity.*;\r\nimport com.pickleball_backend.pickleball.exception.*;\r\nimport com.pickleball_backend.pickleball.repository.*;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.springframework.stereotype.Service;\r\nimport org.springframework.transaction.annotation.Transactional;\r\n\r\nimport java.time.LocalDateTime;\r\nimport java.util.List;\r\n\r\n@Service\r\n@RequiredArgsConstructor\r\npublic class CoachCourtServiceImpl implements CoachCourtService {\r\n\r\n    private static final Logger log = LoggerFactory.getLogger(CoachCourtServiceImpl.class);\r\n\r\n    private final CourtRepository courtRepository;\r\n    private final ClassSessionRepository sessionRepository;\r\n    private final UserRepository userRepository;\r\n    private final PaymentRepository paymentRepository;\r\n    private final WalletRepository walletRepository;\r\n    private final CancellationRequestRepository cancellationRequestRepository;\r\n    private final EmailService emailService;\r\n\r\n    @Override\r\n    public List<Court> getAvailableCourtsForCoach(Integer coachId) {\r\n        return courtRepository.findCourtsByCoachId(coachId);\r\n    }\r\n\r\n    @Override\r\n    public List<ClassSession> findScheduleByCoachIdAndPeriod(Integer coachId, LocalDateTime from, LocalDateTime to) {\r\n        return sessionRepository.findScheduleByCoachIdAndPeriod(coachId, from, to);\r\n    }\r\n\r\n    @Transactional\r\n    @Override\r\n    public ClassSession createCoachSlot(Integer coachId, CoachSlotDto slotDto) {\r\n        User coach = userRepository.findById(coachId)\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"Coach not found with ID: \" + coachId));\r\n\r\n        Court court = courtRepository.findById(slotDto.getCourtId())\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"Court not found with ID: \" + slotDto.getCourtId()));\r\n\r\n        if (sessionRepository.existsByCoachIdAndStartTimeBetweenAndStatusNot(\r\n                coachId, slotDto.getStartTime(), slotDto.getEndTime(), \"CANCELLED\")) {\r\n            throw new ConflictException(\"Coach has scheduling conflict at this time\");\r\n        }\r\n\r\n        if (sessionRepository.existsByCourtIdAndStartTimeBetweenAndStatusNot(\r\n                slotDto.getCourtId(), slotDto.getStartTime(), slotDto.getEndTime(), \"CANCELLED\")) {\r\n            throw new ConflictException(\"Court is already booked at this time\");\r\n        }\r\n\r\n        ClassSession session = new ClassSession();\r\n        session.setCoach(coach);\r\n        session.setCourt(court);\r\n        session.setStartTime(slotDto.getStartTime());\r\n        session.setEndTime(slotDto.getEndTime());\r\n        session.setStatus(\"AVAILABLE\");\r\n        session.setSlotType(\"COACH_AVAILABILITY\");\r\n        session.setCreatedAt(LocalDateTime.now());\r\n\r\n        log.info(\"Coach {} created new availability slot on court {} from {} to {}\",\r\n                coachId, court.getId(), slotDto.getStartTime(), slotDto.getEndTime());\r\n\r\n        return sessionRepository.save(session);\r\n    }\r\n\r\n    @Transactional\r\n    @Override\r\n    public void updateCoachSlot(Integer coachId, Integer sessionId, CoachSlotDto slotDto) {\r\n        ClassSession session = sessionRepository.findById(sessionId)\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"Slot not found with ID: \" + sessionId));\r\n\r\n        if (!session.getCoach().getId().equals(coachId)) {\r\n            throw new UnauthorizedException(\"You don't have permission to modify this slot\");\r\n        }\r\n\r\n        if (\"BOOKED\".equals(session.getStatus())) {\r\n            throw new ValidationException(\"Cannot modify a booked slot. Please cancel booking first.\");\r\n        }\r\n\r\n        if (sessionRepository.existsConflictForUpdate(\r\n                sessionId,\r\n                slotDto.getCourtId(),\r\n                slotDto.getStartTime(),\r\n                slotDto.getEndTime())) {\r\n            throw new ConflictException(\"New time slot conflicts with existing sessions\");\r\n        }\r\n\r\n        session.setStartTime(slotDto.getStartTime());\r\n        session.setEndTime(slotDto.getEndTime());\r\n        session.setUpdatedAt(LocalDateTime.now());\r\n        sessionRepository.save(session);\r\n\r\n        log.info(\"Coach {} updated slot {}: new time {} to {}\",\r\n                coachId, sessionId, slotDto.getStartTime(), slotDto.getEndTime());\r\n    }\r\n\r\n    @Transactional\r\n    @Override\r\n    public void removeCoachSlot(Integer coachId, Integer sessionId, boolean forceRemove) {\r\n        ClassSession session = sessionRepository.findById(sessionId)\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"Slot not found with ID: \" + sessionId));\r\n\r\n        if (!session.getCoach().getId().equals(coachId)) {\r\n            throw new UnauthorizedException(\"You don't have permission to delete this slot\");\r\n        }\r\n\r\n        if (\"BOOKED\".equals(session.getStatus())) {\r\n            if (forceRemove) {\r\n                handleBookedSlotRemoval(session);\r\n            } else {\r\n                throw new ConflictException(\"Slot is booked. Use forceRemove=true to cancel booking\");\r\n            }\r\n        }\r\n\r\n        sessionRepository.delete(session);\r\n        log.info(\"Coach {} deleted slot {}\", coachId, sessionId);\r\n    }\r\n\r\n    private void handleBookedSlotRemoval(ClassSession session) {\r\n        User player = session.getPlayer();\r\n        if (player == null) {\r\n            log.error(\"Booked session {} has no associated player\", session.getId());\r\n            throw new IllegalStateException(\"No player associated with this booking\");\r\n        }\r\n\r\n        // 1. Send cancellation notification\r\n        emailService.sendSessionCancellation(\r\n                player.getEmail(),\r\n                session.getStartTime(),\r\n                session.getCoach().getName(),\r\n                session.getCourt().getName()\r\n        );\r\n\r\n        // 2. Process refund\r\n        refundBooking(session);\r\n\r\n        // 3. Create cancellation request\r\n        createCancellationRequest(session, \"Coach initiated cancellation\");\r\n\r\n        log.warn(\"Coach {} force-removed booked session {}. Player {} notified and refunded.\",\r\n                session.getCoach().getId(), session.getId(), player.getId());\r\n    }\r\n\r\n    private void refundBooking(ClassSession session) {\r\n        Payment payment = session.getPayment();\r\n        if (payment == null) {\r\n            log.error(\"No payment found for session {}\", session.getId());\r\n            throw new ResourceNotFoundException(\"Payment record not found\");\r\n        }\r\n\r\n        // 1. Update payment status\r\n        payment.setStatus(\"REFUNDED\");\r\n        payment.setRefundDate(LocalDateTime.now());\r\n        paymentRepository.save(payment);\r\n\r\n        // 2. Refund to player's wallet\r\n        Wallet playerWallet = walletRepository.findByMemberId(session.getPlayer().getId())\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"Player wallet not found\"));\r\n\r\n        playerWallet.setBalance(playerWallet.getBalance() + payment.getAmount());\r\n        walletRepository.save(playerWallet);\r\n\r\n        log.info(\"Refund processed for session {}: ${} refunded to player {}\",\r\n                session.getId(), payment.getAmount(), session.getPlayer().getId());\r\n    }\r\n\r\n    private void createCancellationRequest(ClassSession session, String reason) {\r\n        CancellationRequest request = new CancellationRequest();\r\n        request.setSession(session);\r\n        request.setReason(reason);\r\n        request.setRequestDate(LocalDateTime.now());\r\n        request.setStatus(\"APPROVED\");\r\n        request.setInitiatedByCoach(true);\r\n        cancellationRequestRepository.save(request);\r\n    }\r\n\r\n    @Override\r\npublic List<ClassSession> findAvailableSlotsByCoachAndCourt(Integer coachId, Integer courtId) {\r\n    return sessionRepository.findAvailableSlotsByCoachAndCourt(coachId, courtId);\r\n}\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/CoachCourtServiceImpl.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/CoachCourtServiceImpl.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/CoachCourtServiceImpl.java	(revision 97abd609899a67b781b8ace8e91358a782fc5acd)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/CoachCourtServiceImpl.java	(date 1753725850298)
@@ -1,6 +1,7 @@
 package com.pickleball_backend.pickleball.service;
 
 import com.pickleball_backend.pickleball.dto.CoachSlotDto;
+import com.pickleball_backend.pickleball.dto.RecurringSessionRequestDto;
 import com.pickleball_backend.pickleball.entity.*;
 import com.pickleball_backend.pickleball.exception.*;
 import com.pickleball_backend.pickleball.repository.*;
@@ -12,6 +13,8 @@
 
 import java.time.LocalDateTime;
 import java.util.List;
+import java.util.Set;
+import java.time.LocalDate;
 
 @Service
 @RequiredArgsConstructor
@@ -20,21 +23,31 @@
     private static final Logger log = LoggerFactory.getLogger(CoachCourtServiceImpl.class);
 
     private final CourtRepository courtRepository;
+    private final CoachRepository coachRepository;
     private final ClassSessionRepository sessionRepository;
     private final UserRepository userRepository;
     private final PaymentRepository paymentRepository;
     private final WalletRepository walletRepository;
     private final CancellationRequestRepository cancellationRequestRepository;
     private final EmailService emailService;
+    private final ClassRegistrationRepository classRegistrationRepository;
 
     @Override
     public List<Court> getAvailableCourtsForCoach(Integer coachId) {
-        return courtRepository.findCourtsByCoachId(coachId);
+        Coach coach = coachRepository.findById(coachId)
+                .orElseThrow(() -> new ResourceNotFoundException("Coach not found with ID: " + coachId));
+        Set<Venue> venues = coach.getVenues();
+        if (venues == null || venues.isEmpty()) return List.of();
+        return courtRepository.findByVenueIn(venues);
     }
-
     @Override
     public List<ClassSession> findScheduleByCoachIdAndPeriod(Integer coachId, LocalDateTime from, LocalDateTime to) {
-        return sessionRepository.findScheduleByCoachIdAndPeriod(coachId, from, to);
+        return sessionRepository.findScheduleByCoachIdAndPeriodWithVenue(coachId, from, to);
+    }
+
+    @Override
+    public List<ClassSession> findScheduleByCoachIdAndPeriodWithVenue(Integer coachId, LocalDateTime from, LocalDateTime to) {
+        return sessionRepository.findScheduleByCoachIdAndPeriodWithVenue(coachId, from, to);
     }
 
     @Transactional
@@ -56,6 +69,9 @@
             throw new ConflictException("Court is already booked at this time");
         }
 
+        // 防呆：title 不可為 null
+        String title = (slotDto.getTitle() == null || slotDto.getTitle().trim().isEmpty()) ? "Coaching Session" : slotDto.getTitle();
+
         ClassSession session = new ClassSession();
         session.setCoach(coach);
         session.setCourt(court);
@@ -64,6 +80,11 @@
         session.setStatus("AVAILABLE");
         session.setSlotType("COACH_AVAILABILITY");
         session.setCreatedAt(LocalDateTime.now());
+        session.setExperienceYear(slotDto.getExperienceYear());
+        session.setTitle(title); // <--- 這裡一定要設
+        session.setDescription(slotDto.getDescription());
+        session.setMaxParticipants(slotDto.getMaxParticipants());
+        session.setPrice(slotDto.getPrice());
 
         log.info("Coach {} created new availability slot on court {} from {} to {}",
                 coachId, court.getId(), slotDto.getStartTime(), slotDto.getEndTime());
@@ -96,6 +117,7 @@
         session.setStartTime(slotDto.getStartTime());
         session.setEndTime(slotDto.getEndTime());
         session.setUpdatedAt(LocalDateTime.now());
+        session.setExperienceYear(slotDto.getExperienceYear());
         sessionRepository.save(session);
 
         log.info("Coach {} updated slot {}: new time {} to {}",
@@ -145,7 +167,7 @@
         // 3. Create cancellation request
         createCancellationRequest(session, "Coach initiated cancellation");
 
-        log.warn("Coach {} force-removed booked session {}. Player {} notified and refunded.",
+        log.warn("Coach {} force-cancelled booked session {}. Player {} notified and refunded.",
                 session.getCoach().getId(), session.getId(), player.getId());
     }
 
@@ -186,4 +208,38 @@
 public List<ClassSession> findAvailableSlotsByCoachAndCourt(Integer coachId, Integer courtId) {
     return sessionRepository.findAvailableSlotsByCoachAndCourt(coachId, courtId);
 }
+
+    @Override
+    public List<Object[]> getAllStudentsForCoach(Integer coachId) {
+        return classRegistrationRepository.findStudentsByCoachId(coachId);
+    }
+
+    @Transactional
+    public void createRecurringClass(Integer coachId, RecurringSessionRequestDto dto) {
+        // Defensive: ensure title is not null or blank
+        String title = (dto.getTitle() == null || dto.getTitle().trim().isEmpty()) ? "Recurring Class" : dto.getTitle();
+        LocalDate current = dto.getStartDate();
+        while (!current.isAfter(dto.getEndDate())) {
+            if (dto.getDaysOfWeek().contains(current.getDayOfWeek())) {
+                LocalDateTime start = LocalDateTime.of(current, dto.getStartTime());
+                LocalDateTime end = LocalDateTime.of(current, dto.getEndTime());
+                if (!sessionRepository.existsByCourtIdAndStartTimeBetweenAndStatusNot(
+                        dto.getCourtId(), start, end, "CANCELLED")) {
+                    ClassSession session = new ClassSession();
+                    session.setCoach(coachRepository.findById(coachId).orElseThrow().getUser());
+                    session.setCourt(courtRepository.findById(dto.getCourtId()).orElseThrow());
+                    session.setStartTime(start);
+                    session.setEndTime(end);
+                    session.setStatus("AVAILABLE");
+                    session.setSlotType("COACH_SESSION");
+                    session.setTitle(title);
+                    session.setDescription(dto.getDescription());
+                    session.setMaxParticipants(dto.getMaxParticipants());
+                    session.setPrice(dto.getPrice());
+                    sessionRepository.save(session);
+                }
+            }
+            current = current.plusDays(1);
+        }
+    }
 }
\ No newline at end of file
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/VenueService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.service;\r\n\r\nimport com.pickleball_backend.pickleball.dto.VenueDto;\r\nimport com.pickleball_backend.pickleball.entity.Venue;\r\nimport com.pickleball_backend.pickleball.repository.VenueRepository;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.stereotype.Service;\r\n\r\n@Service\r\npublic class VenueService {\r\n    @Autowired\r\n    private VenueRepository venueRepository;\r\n\r\n    public Venue createVenue(VenueDto venueDto) {\r\n        if (venueRepository.existsByNameAndLocation(venueDto.getName(), venueDto.getAddress())) {\r\n            throw new IllegalArgumentException(\"Venue with the same name and location already exists\");\r\n        }\r\n\r\n        Venue venue = new Venue();\r\n        venue.setName(venueDto.getName());\r\n        venue.setLocation(venueDto.getAddress());\r\n        venue.setDescription(venueDto.getDescription());\r\n        return venueRepository.save(venue);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/VenueService.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/VenueService.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/VenueService.java	(revision 97abd609899a67b781b8ace8e91358a782fc5acd)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/VenueService.java	(date 1753722416072)
@@ -2,24 +2,62 @@
 
 import com.pickleball_backend.pickleball.dto.VenueDto;
 import com.pickleball_backend.pickleball.entity.Venue;
+import com.pickleball_backend.pickleball.entity.Court;
 import com.pickleball_backend.pickleball.repository.VenueRepository;
+import com.pickleball_backend.pickleball.repository.CourtRepository;
+import com.pickleball_backend.pickleball.repository.SlotRepository;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Service;
+import java.time.LocalDate;
+import java.time.LocalTime;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.HashSet;
 
 @Service
 public class VenueService {
     @Autowired
     private VenueRepository venueRepository;
+    @Autowired
+    private CourtRepository courtRepository;
+    @Autowired
+    private SlotRepository slotRepository;
 
     public Venue createVenue(VenueDto venueDto) {
-        if (venueRepository.existsByNameAndLocation(venueDto.getName(), venueDto.getAddress())) {
+        // 若需要檢查重複場地，請根據現有欄位自行實作，否則直接建立
+        // 例如：可用 name + location + state 作為唯一性檢查
+        List<Venue> existing = venueRepository.findAll();
+        boolean duplicate = existing.stream().anyMatch(v ->
+            v.getName().equalsIgnoreCase(venueDto.getName()) &&
+            v.getLocation().equalsIgnoreCase(venueDto.getAddress())
+        );
+        if (duplicate) {
             throw new IllegalArgumentException("Venue with the same name and location already exists");
         }
-
         Venue venue = new Venue();
         venue.setName(venueDto.getName());
         venue.setLocation(venueDto.getAddress());
         venue.setDescription(venueDto.getDescription());
         return venueRepository.save(venue);
     }
+
+    /**
+     * 查詢 venue 在指定日期、時間區間、所需人數下的可用 court
+     */
+    public List<Court> getAvailableCourts(Integer venueId, LocalDate date, LocalTime startTime, LocalTime endTime, int peopleCount) {
+        List<Court> courts = courtRepository.findByVenueIn(new HashSet<>(List.of(venueRepository.findById(venueId).orElseThrow())));
+        List<Court> availableCourts = new ArrayList<>();
+        for (Court court : courts) {
+            // 查詢該 court 在此時段是否有可用 slot
+            var slots = slotRepository.findByCourtIdAndDateAndIsAvailableTrue(court.getId(), date);
+            boolean hasAvailable = slots.stream().anyMatch(slot ->
+                !slot.getStartTime().isAfter(endTime) && !slot.getEndTime().isBefore(startTime)
+            );
+            if (hasAvailable) {
+                availableCourts.add(court);
+            }
+        }
+        // 直接返回所有可用場地，不再根據人數裁剪
+        return availableCourts;
+    }
 }
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"0c3ded6e-9290-4208-bf86-f2c4e1aa2374\" name=\"Changes\" comment=\"admin setting, dark mode done\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball-frontend/src/App.js\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball-frontend/src/App.js\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball-frontend/src/components/admin/AdminDashboard.jsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball-frontend/src/components/admin/AdminDashboard.jsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball-frontend/src/components/admin/AdminInviteForm.jsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball-frontend/src/components/admin/AdminInviteForm.jsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball-frontend/src/components/admin/AdminManageBookings.jsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball-frontend/src/components/admin/AdminManageBookings.jsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball-frontend/src/components/admin/AdminManageCourts.jsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball-frontend/src/components/admin/AdminManageCourts.jsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball-frontend/src/components/admin/AdminManageTiers.jsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball-frontend/src/components/admin/AdminManageTiers.jsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball-frontend/src/components/admin/AdminManageUsers.jsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball-frontend/src/components/admin/AdminManageUsers.jsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball-frontend/src/components/admin/AdminSettings.jsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball-frontend/src/components/admin/AdminSettings.jsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball-frontend/src/components/admin/AdminUserForm.jsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball-frontend/src/components/admin/AdminUserForm.jsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball-frontend/src/components/admin/ReportGenerator.jsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball-frontend/src/components/admin/ReportGenerator.jsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball-frontend/src/components/admin/statusConfig.js\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball-frontend/src/components/admin/statusConfig.js\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball-frontend/src/components/feedback/MyFeedbackPage.jsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball-frontend/src/components/feedback/MyFeedbackPage.jsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball-frontend/src/context/ThemeContext.js\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball-frontend/src/context/ThemeContext.js\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball-frontend/src/index.js\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball-frontend/src/index.js\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball-frontend/src/pages/ForgotPasswordPage.jsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball-frontend/src/pages/ForgotPasswordPage.jsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball-frontend/src/pages/LoginPage.jsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball-frontend/src/pages/LoginPage.jsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball-frontend/src/pages/RegisterPage.jsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball-frontend/src/pages/RegisterPage.jsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball-frontend/src/pages/ResetPasswordEmailSent.jsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball-frontend/src/pages/ResetPasswordEmailSent.jsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball-frontend/src/pages/ResetPasswordPage.jsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball-frontend/src/pages/ResetPasswordPage.jsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball-frontend/src/pages/ResetPasswordSuccess.jsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball-frontend/src/pages/ResetPasswordSuccess.jsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball/pickleball/pom.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball/pickleball/pom.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/AdminController.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/AdminController.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/AdminProfileController.java\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/AdminProfileDto.java\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/VoucherDto.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/VoucherDto.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/UserAccount.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/UserAccount.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Voucher.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Voucher.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/BookingRepository.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/BookingRepository.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/AdminDashboardServiceImpl.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/AdminDashboardServiceImpl.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/AdminService.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/AdminService.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/AdminServiceImpl.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/AdminServiceImpl.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/MemberService.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/MemberService.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/TierService.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/TierService.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/TierServiceImpl.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/TierServiceImpl.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/VoucherRedemptionServiceImpl.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/VoucherRedemptionServiceImpl.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/resources/application.properties\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/resources/application.properties\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"fix-court\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\r\n  &quot;lastFilter&quot;: {\r\n    &quot;state&quot;: &quot;OPEN&quot;,\r\n    &quot;assignee&quot;: &quot;lingyi010203&quot;\r\n  }\r\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\">{\r\n  &quot;selectedUrlAndAccountId&quot;: {\r\n    &quot;url&quot;: &quot;https://github.com/lingyi010203/pickleball_court_reservation.git&quot;,\r\n    &quot;accountId&quot;: &quot;9f485822-26e4-4c6b-9a46-fe7d37d48793&quot;\r\n  }\r\n}</component>\r\n  <component name=\"ProblemsViewState\">\r\n    <option name=\"selectedTabId\" value=\"CurrentFile\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 3\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2zJOWIlZQeOJcEKgpbdiTlxKL0G\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;Application.PickleballApplication.executor&quot;: &quot;Debug&quot;,\r\n    &quot;Application.run.executor&quot;: &quot;Debug&quot;,\r\n    &quot;Application.zzz.executor&quot;: &quot;Run&quot;,\r\n    &quot;ModuleVcsDetector.initialDetectionPerformed&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.git.unshallow&quot;: &quot;true&quot;,\r\n    &quot;git-widget-placeholder&quot;: &quot;master&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;C:/Users/lingy/FYP2/pickleball_court_reservation&quot;,\r\n    &quot;project.structure.last.edited&quot;: &quot;SDKs&quot;,\r\n    &quot;project.structure.proportion&quot;: &quot;0.15&quot;,\r\n    &quot;project.structure.side.proportion&quot;: &quot;0.21079959&quot;,\r\n    &quot;settings.editor.selected.configurable&quot;: &quot;reference.projectsettings.compiler.annotationProcessors&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"run\" type=\"Application\" factoryName=\"Application\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"com.pickleball_backend.pickleball.PickleballApplication\" />\r\n      <module name=\"pickleball\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n  </component>\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"0c3ded6e-9290-4208-bf86-f2c4e1aa2374\" name=\"Changes\" comment=\"\" />\r\n      <created>1751445739450</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1751445739450</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"court fixed\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1752479821667</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1752479821667</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"Booking fixed\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1752578761777</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1752578761777</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"Booking fixed\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1752578799651</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1752578799651</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"admin dashboard updated\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1752636329567</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1752636329572</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"admin dashboard updated\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1752674934808</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1752674934808</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"court bug fixed\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1752777506350</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1752777506350</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"admin booking updated\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1752910787475</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1752910787475</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"admin booking updated\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1752910799800</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1752910799800</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"booking history redirect to feedback done\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1752936178325</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1752936178325</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"booking confirmation solved\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1752940514141</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1752940514141</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"point and voucher redemption done\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1753005993987</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1753005993987</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"point and voucher redemption done\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1753006004014</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1753006004014</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00013\" summary=\"rewards page ok\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1753009932754</created>\r\n      <option name=\"number\" value=\"00013\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1753009932754</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00014\" summary=\"rewards page ok\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1753009956442</created>\r\n      <option name=\"number\" value=\"00014\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1753009956442</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00015\" summary=\"homepage initialized\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1753097246899</created>\r\n      <option name=\"number\" value=\"00015\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1753097246899</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00016\" summary=\"court image uploaded\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1753126384809</created>\r\n      <option name=\"number\" value=\"00016\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1753126384809</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00017\" summary=\"court image uploaded\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1753128005836</created>\r\n      <option name=\"number\" value=\"00017\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00017\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1753128005836</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00018\" summary=\"court image uploaded\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1753128125937</created>\r\n      <option name=\"number\" value=\"00018\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00018\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1753128125937</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00019\" summary=\"home page done\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1753249711528</created>\r\n      <option name=\"number\" value=\"00019\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00019\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1753249711528</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00020\" summary=\"admin setting initialized\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1753370349395</created>\r\n      <option name=\"number\" value=\"00020\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00020\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1753370349395</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00021\" summary=\"admin setting initialized\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1753370392315</created>\r\n      <option name=\"number\" value=\"00021\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00021\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1753370392315</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00022\" summary=\"admin setting initialized\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1753370403315</created>\r\n      <option name=\"number\" value=\"00022\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00022\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1753370403315</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00023\" summary=\"admin setting, dark mode done\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1753418680148</created>\r\n      <option name=\"number\" value=\"00023\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00023\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1753418680148</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00024\" summary=\"admin setting, dark mode done\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1753418682718</created>\r\n      <option name=\"number\" value=\"00024\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00024\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1753418682718</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00025\" summary=\"admin setting, dark mode done\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1753418716730</created>\r\n      <option name=\"number\" value=\"00025\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00025\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1753418716730</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"26\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State>\r\n              <option name=\"FILTERS\">\r\n                <map>\r\n                  <entry key=\"branch\">\r\n                    <value>\r\n                      <list>\r\n                        <option value=\"fix-court\" />\r\n                      </list>\r\n                    </value>\r\n                  </entry>\r\n                </map>\r\n              </option>\r\n            </State>\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"court fixed\" />\r\n    <MESSAGE value=\"Booking fixed\" />\r\n    <MESSAGE value=\"admin dashboard updated\" />\r\n    <MESSAGE value=\"court bug fixed\" />\r\n    <MESSAGE value=\"admin booking updated\" />\r\n    <MESSAGE value=\"booking history redirect to feedback done\" />\r\n    <MESSAGE value=\"booking confirmation solved\" />\r\n    <MESSAGE value=\"point and voucher redemption done\" />\r\n    <MESSAGE value=\"rewards page ok\" />\r\n    <MESSAGE value=\"homepage initialized\" />\r\n    <MESSAGE value=\"court image uploaded\" />\r\n    <MESSAGE value=\"home page done\" />\r\n    <MESSAGE value=\"admin setting initialized\" />\r\n    <MESSAGE value=\"admin setting, dark mode done\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"admin setting, dark mode done\" />\r\n  </component>\r\n  <component name=\"XDebuggerManager\">\r\n    <breakpoint-manager>\r\n      <breakpoints>\r\n        <line-breakpoint enabled=\"true\" type=\"java-line\">\r\n          <url>file://$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/security/JwtAuthFilter.java</url>\r\n          <line>32</line>\r\n          <option name=\"timeStamp\" value=\"1\" />\r\n        </line-breakpoint>\r\n      </breakpoints>\r\n    </breakpoint-manager>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 97abd609899a67b781b8ace8e91358a782fc5acd)
+++ b/.idea/workspace.xml	(date 1753782355213)
@@ -94,7 +94,6 @@
     &quot;ModuleVcsDetector.initialDetectionPerformed&quot;: &quot;true&quot;,
     &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
     &quot;RunOnceActivity.git.unshallow&quot;: &quot;true&quot;,
-    &quot;git-widget-placeholder&quot;: &quot;master&quot;,
     &quot;last_opened_file_path&quot;: &quot;C:/Users/lingy/FYP2/pickleball_court_reservation&quot;,
     &quot;project.structure.last.edited&quot;: &quot;SDKs&quot;,
     &quot;project.structure.proportion&quot;: &quot;0.15&quot;,
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/CoachCourtService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.service;\r\n\r\nimport com.pickleball_backend.pickleball.dto.CoachSlotDto;\r\nimport com.pickleball_backend.pickleball.entity.ClassSession;\r\nimport com.pickleball_backend.pickleball.entity.Court;\r\nimport com.pickleball_backend.pickleball.exception.ConflictException;\r\nimport com.pickleball_backend.pickleball.exception.ResourceNotFoundException;\r\nimport java.time.LocalDateTime;\r\nimport java.util.List;\r\n\r\npublic interface CoachCourtService {\r\n    List<Court> getAvailableCourtsForCoach(Integer coachId);\r\n    ClassSession createCoachSlot(Integer coachId, CoachSlotDto slotDto) throws ConflictException;\r\n    void updateCoachSlot(Integer coachId, Integer sessionId, CoachSlotDto slotDto) throws ResourceNotFoundException;\r\n    void removeCoachSlot(Integer coachId, Integer sessionId, boolean forceRemove) throws ResourceNotFoundException;\r\n    List<ClassSession> findScheduleByCoachIdAndPeriod(Integer coachId, LocalDateTime from, LocalDateTime to);\r\n    List<ClassSession> findAvailableSlotsByCoachAndCourt(Integer coachId, Integer courtId);\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/CoachCourtService.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/CoachCourtService.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/CoachCourtService.java	(revision 97abd609899a67b781b8ace8e91358a782fc5acd)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/CoachCourtService.java	(date 1753725850306)
@@ -7,6 +7,7 @@
 import com.pickleball_backend.pickleball.exception.ResourceNotFoundException;
 import java.time.LocalDateTime;
 import java.util.List;
+import com.pickleball_backend.pickleball.dto.RecurringSessionRequestDto;
 
 public interface CoachCourtService {
     List<Court> getAvailableCourtsForCoach(Integer coachId);
@@ -15,4 +16,7 @@
     void removeCoachSlot(Integer coachId, Integer sessionId, boolean forceRemove) throws ResourceNotFoundException;
     List<ClassSession> findScheduleByCoachIdAndPeriod(Integer coachId, LocalDateTime from, LocalDateTime to);
     List<ClassSession> findAvailableSlotsByCoachAndCourt(Integer coachId, Integer courtId);
+    void createRecurringClass(Integer coachId, RecurringSessionRequestDto dto);
+    List<ClassSession> findScheduleByCoachIdAndPeriodWithVenue(Integer coachId, LocalDateTime from, LocalDateTime to);
+    List<Object[]> getAllStudentsForCoach(Integer coachId);
 }
\ No newline at end of file
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/FriendlyMatchRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.repository;\r\n\r\nimport com.pickleball_backend.pickleball.entity.FriendlyMatch;\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\n\r\nimport java.time.LocalDateTime;\r\nimport java.util.List;\r\n\r\npublic interface FriendlyMatchRepository extends JpaRepository<FriendlyMatch, Integer> {\r\n    List<FriendlyMatch> findByStatus(String status);\r\n    List<FriendlyMatch> findByOrganizerId(Integer organizerId);\r\n    List<FriendlyMatch> findByStartTimeBetween(LocalDateTime start, LocalDateTime end);\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/FriendlyMatchRepository.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/FriendlyMatchRepository.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/FriendlyMatchRepository.java	(revision 97abd609899a67b781b8ace8e91358a782fc5acd)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/FriendlyMatchRepository.java	(date 1753722416084)
@@ -2,6 +2,8 @@
 
 import com.pickleball_backend.pickleball.entity.FriendlyMatch;
 import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+import org.springframework.data.repository.query.Param;
 
 import java.time.LocalDateTime;
 import java.util.List;
@@ -10,4 +12,9 @@
     List<FriendlyMatch> findByStatus(String status);
     List<FriendlyMatch> findByOrganizerId(Integer organizerId);
     List<FriendlyMatch> findByStartTimeBetween(LocalDateTime start, LocalDateTime end);
+    List<FriendlyMatch> findByIsInvitationAndStatus(boolean isInvitation, String status);
+    List<FriendlyMatch> findByBookingIdAndStatusIn(Integer bookingId, List<String> statusList);
+    List<FriendlyMatch> findByBookingId(Integer bookingId);
+    @Query("SELECT m FROM FriendlyMatch m WHERE m.startTime < :now AND (m.status = 'OPEN' OR m.status = 'FULL')")
+    List<FriendlyMatch> findAllExpired(@Param("now") LocalDateTime now);
 }
\ No newline at end of file
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/CoachSlotDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.dto;\r\n\r\nimport java.time.LocalDateTime;\r\n\r\nimport lombok.*;\r\n\r\n@Getter\r\n@Setter\r\n@NoArgsConstructor\r\n@AllArgsConstructor\r\n@Data\r\npublic class CoachSlotDto {\r\n    private Integer courtId;\r\n    private LocalDateTime startTime;\r\n    private LocalDateTime endTime;\r\n\r\n    // Getters and setters\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/CoachSlotDto.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/CoachSlotDto.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/CoachSlotDto.java	(revision 97abd609899a67b781b8ace8e91358a782fc5acd)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/CoachSlotDto.java	(date 1753725850316)
@@ -13,6 +13,11 @@
     private Integer courtId;
     private LocalDateTime startTime;
     private LocalDateTime endTime;
+    private Integer experienceYear;
+    private String title;
+    private String description;
+    private Integer maxParticipants;
+    private Double price;
 
     // Getters and setters
 }
\ No newline at end of file
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/UserAccount.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.entity;\r\n\r\nimport jakarta.persistence.*;\r\nimport lombok.*;\r\nimport java.time.LocalDateTime;\r\n\r\n@Entity\r\n@Data\r\n@Table(name = \"useraccount\")\r\npublic class UserAccount {\r\n\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Integer id;\r\n\r\n    private String username;\r\n    private String password;\r\n    private String status = \"ACTIVE\";\r\n    private int failedLoginAttempts = 0;\r\n    private LocalDateTime lockedUntil;\r\n    private LocalDateTime lastLogin;\r\n    private LocalDateTime passwordChangedAt = LocalDateTime.now();\r\n    private LocalDateTime createdAt = LocalDateTime.now();\r\n    private LocalDateTime updatedAt = LocalDateTime.now();\r\n    private String resetPasswordToken;\r\n    private LocalDateTime resetPasswordTokenExpiry;\r\n    @Column(name = \"profile_image\", length = 255, nullable = true)\r\n    private String profileImage;\r\n    private String theme = \"light\";\r\n    private boolean emailNotifications = true;\r\n    private boolean pushNotifications = true;\r\n\r\n    // FIXED RELATIONSHIP: Changed to OneToOne\r\n    @OneToOne(fetch = FetchType.LAZY)\r\n    @JoinColumn(name = \"user_id\")\r\n    private User user;\r\n\r\n    public boolean isLocked() {\r\n        return lockedUntil != null && lockedUntil.isAfter(LocalDateTime.now());\r\n    }\r\n\r\n    public String getProfileImage() {\r\n        return profileImage;\r\n    }\r\n\r\n    public void setProfileImage(String profileImage) {\r\n        this.profileImage = profileImage;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/UserAccount.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/UserAccount.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/UserAccount.java	(revision 97abd609899a67b781b8ace8e91358a782fc5acd)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/UserAccount.java	(date 1753732622115)
@@ -29,6 +29,7 @@
     private String theme = "light";
     private boolean emailNotifications = true;
     private boolean pushNotifications = true;
+    private boolean requireReauthForSensitiveActions = false;
 
     // FIXED RELATIONSHIP: Changed to OneToOne
     @OneToOne(fetch = FetchType.LAZY)
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/EventRegistrationServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.service;\r\n\r\nimport com.pickleball_backend.pickleball.dto.EventRegistrationRequestDto;\r\nimport com.pickleball_backend.pickleball.dto.EventRegistrationResponseDto;\r\nimport com.pickleball_backend.pickleball.entity.*;\r\nimport com.pickleball_backend.pickleball.repository.*;\r\nimport jakarta.transaction.Transactional;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport java.time.LocalDateTime;\r\n\r\n@Service\r\npublic class EventRegistrationServiceImpl implements EventRegistrationService {\r\n\r\n    @Autowired\r\n    private RegistrationRepository registrationRepository;\r\n\r\n    @Autowired\r\n    private EventRegistrationRepository eventRegistrationRepository;\r\n\r\n    @Autowired\r\n    private UserAccountRepository userAccountRepository;\r\n\r\n    @Autowired\r\n    private EventRepository eventRepository;\r\n\r\n    @Autowired\r\n    private UserRepository userRepository;\r\n\r\n    @Autowired\r\n    private MemberRepository memberRepository;\r\n\r\n    @Autowired\r\n    private MembershipTierRepository membershipTierRepository;\r\n\r\n    @Autowired\r\n    private EmailService emailService;\r\n\r\n    @Override\r\n    @Transactional\r\n    public EventRegistrationResponseDto registerForEvent(EventRegistrationRequestDto request, String username) {\r\n        UserAccount userAccount = userAccountRepository.findByUsername(username)\r\n                .orElseThrow(() -> new RuntimeException(\"User not found\"));\r\n        User user = userAccount.getUser();\r\n\r\n        // FIX: Get member by USER ID instead of member ID\r\n        Member member = memberRepository.findByUserId(user.getId());\r\n\r\n        // Handle missing member record\r\n        if (member == null) {\r\n            // Create default tier if missing\r\n            MembershipTier defaultTier = membershipTierRepository.findByTierName(\"SILVER\");\r\n            if (defaultTier == null) {\r\n                defaultTier = new MembershipTier();\r\n                defaultTier.setTierName(\"SILVER\");\r\n                defaultTier.setMinPoints(0);\r\n                defaultTier.setMaxPoints(2000);\r\n                defaultTier.setBenefits(\"10% discount\");\r\n                defaultTier.setActive(true);\r\n                defaultTier = membershipTierRepository.save(defaultTier);\r\n            }\r\n\r\n            // Create new member record\r\n            member = new Member();\r\n            member.setUser(user);\r\n            member.setTier(defaultTier);\r\n            member.setPointBalance(0);  // Changed back to 0\r\n            member = memberRepository.save(member);\r\n        }\r\n\r\n        // 1. Create Registration and link to member\r\n        Registration registration = new Registration();\r\n        registration.setMember(member);\r\n        member.getRegistrations().add(registration);\r\n        registrationRepository.save(registration);\r\n\r\n        // 2. Fetch the event\r\n        Event event = eventRepository.findById(request.getEventId())\r\n                .orElseThrow(() -> new RuntimeException(\"Event not found\"));\r\n        Double feeAmount = event.getFeeAmount();\r\n\r\n        // 3. Create EventRegistration\r\n        EventRegistration eventRegistration = new EventRegistration();\r\n        eventRegistration.setRegistrationId(registration.getId());\r\n        eventRegistration.setEvent(event); // set the Event object\r\n        eventRegistration.setUser(user);   // set the User object\r\n        eventRegistration.setRegistrationDate(LocalDateTime.now());\r\n        eventRegistration.setPaymentStatus(\"PAID\");\r\n        eventRegistration.setFeeAmount(feeAmount);\r\n        eventRegistration.setStatus(\"REGISTERED\");\r\n        eventRegistrationRepository.save(eventRegistration);\r\n\r\n        // Update event's registered count\r\n        event.setRegisteredCount(event.getRegisteredCount() + 1);\r\n        eventRepository.save(event);\r\n\r\n        // Send confirmation email to the user\r\n        String userEmail = user.getEmail();\r\n        if (userEmail != null && !userEmail.isEmpty()) {\r\n            String subject = \"Event Registration Confirmation: \" + event.getTitle();\r\n            String content = String.format(\r\n                \"Dear %s,\\n\\nYou have successfully registered for the event \\\"%s\\\".\\n\\nDate: %s\\nLocation: %s\\n\\nThank you for registering!\\n\\nPickleball Team\",\r\n                user.getName(),\r\n                event.getTitle(),\r\n                event.getStartTime(),\r\n                event.getLocation()\r\n            );\r\n            emailService.sendEmail(userEmail, subject, content);\r\n        }\r\n\r\n        // 4. Build and return response\r\n        EventRegistrationResponseDto response = new EventRegistrationResponseDto();\r\n        response.setRegistrationId(eventRegistration.getRegistrationId());\r\n        response.setEventId(event.getId());\r\n        response.setUserId(user.getId());\r\n        response.setRegistrationDate(eventRegistration.getRegistrationDate());\r\n        response.setPaymentStatus(eventRegistration.getPaymentStatus());\r\n        response.setFeeAmount(eventRegistration.getFeeAmount());\r\n        response.setStatus(eventRegistration.getStatus());\r\n        return response;\r\n    }\r\n\r\n    @Override\r\n    public void cancelRegistration(Integer eventId, String username) {\r\n        UserAccount userAccount = userAccountRepository.findByUsername(username)\r\n                .orElseThrow(() -> new RuntimeException(\"User not found\"));\r\n\r\n        EventRegistration registration = eventRegistrationRepository.findByEvent_IdAndUser_Id(eventId, userAccount.getUser().getId())\r\n                .orElseThrow(() -> new RuntimeException(\"Registration not found\"));\r\n\r\n        registration.setStatus(\"CANCELLED\");\r\n        eventRegistrationRepository.save(registration);\r\n\r\n        // TODO: Send cancellation email here\r\n    }\r\n\r\n    @Override\r\n    public boolean isUserRegistered(Integer eventId, String username) {\r\n        System.out.println(\"Checking registration for user: \" + username + \", event: \" + eventId);\r\n        UserAccount userAccount = userAccountRepository.findByUsername(username)\r\n                .orElseThrow(() -> new RuntimeException(\"User not found\"));\r\n        return eventRegistrationRepository.findByEvent_IdAndUser_Id(eventId, userAccount.getUser().getId()).isPresent();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/EventRegistrationServiceImpl.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/EventRegistrationServiceImpl.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/EventRegistrationServiceImpl.java	(revision 97abd609899a67b781b8ace8e91358a782fc5acd)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/EventRegistrationServiceImpl.java	(date 1753722506133)
@@ -103,8 +103,8 @@
                 "Dear %s,\n\nYou have successfully registered for the event \"%s\".\n\nDate: %s\nLocation: %s\n\nThank you for registering!\n\nPickleball Team",
                 user.getName(),
                 event.getTitle(),
-                event.getStartTime(),
-                event.getLocation()
+                event.getStartTime() != null ? event.getStartTime().toString() : "N/A",
+                event.getVenue() != null ? event.getVenue().getName() : "N/A"
             );
             emailService.sendEmail(userEmail, subject, content);
         }
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/SlotServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.service;\r\n\r\nimport com.pickleball_backend.pickleball.dto.SlotDto;\r\nimport com.pickleball_backend.pickleball.dto.SlotResponseDto;\r\nimport com.pickleball_backend.pickleball.entity.Court;\r\nimport com.pickleball_backend.pickleball.entity.Slot;\r\nimport com.pickleball_backend.pickleball.exception.ResourceNotFoundException;\r\nimport com.pickleball_backend.pickleball.exception.ValidationException;\r\nimport com.pickleball_backend.pickleball.repository.CourtRepository;\r\nimport com.pickleball_backend.pickleball.repository.SlotRepository;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.springframework.stereotype.Service;\r\nimport org.springframework.transaction.annotation.Transactional;\r\n\r\nimport java.time.DayOfWeek;\r\nimport java.time.Duration;\r\nimport java.time.LocalDate;\r\nimport java.time.LocalTime;\r\nimport java.util.*;\r\nimport java.util.stream.Collectors;\r\n\r\n@Service\r\n@RequiredArgsConstructor\r\npublic class SlotServiceImpl implements SlotService {\r\n\r\n    private final SlotRepository slotRepository;\r\n    private final CourtRepository courtRepository;\r\n\r\n    @Override\r\n    public List<SlotResponseDto> getSlots(List<Integer> courtIds, LocalDate startDate, LocalDate endDate) {\r\n        List<Slot> slots;\r\n\r\n        if (courtIds == null || courtIds.isEmpty()) {\r\n            slots = slotRepository.findByDateBetween(startDate, endDate);\r\n        } else {\r\n            slots = new ArrayList<>();\r\n            for (Integer courtId : courtIds) {\r\n                slots.addAll(slotRepository.findByCourtIdAndDateBetween(courtId, startDate, endDate));\r\n            }\r\n        }\r\n\r\n        if (slots.isEmpty()) {\r\n            return Collections.emptyList();\r\n        }\r\n\r\n        // Get court details in bulk\r\n        Set<Integer> courtIdsInSlots = slots.stream()\r\n                .map(Slot::getCourtId)\r\n                .collect(Collectors.toSet());\r\n\r\n        Map<Integer, Court> courts = courtIdsInSlots.isEmpty()\r\n                ? Collections.emptyMap()\r\n                : courtRepository.findAllById(courtIdsInSlots).stream()\r\n                .collect(Collectors.toMap(Court::getId, court -> court));\r\n\r\n        return slots.stream().map(slot -> {\r\n            SlotResponseDto dto = new SlotResponseDto();\r\n            dto.setId(slot.getId());\r\n            dto.setCourtId(slot.getCourtId());\r\n            dto.setDate(slot.getDate());\r\n            dto.setStartTime(slot.getStartTime());\r\n            dto.setEndTime(slot.getEndTime());\r\n\r\n            // 动态计算持续时间\r\n            dto.setDurationHours(calculateDurationHours(slot));\r\n\r\n            Court court = courts.get(slot.getCourtId());\r\n            if (court != null) {\r\n                dto.setCourtName(court.getName());\r\n                dto.setCourtLocation(court.getLocation());\r\n                dto.setStatus(determineSlotStatus(slot, court));\r\n            } else {\r\n                dto.setStatus(\"UNKNOWN\");\r\n            }\r\n\r\n            return dto;\r\n        }).collect(Collectors.toList());\r\n    }\r\n\r\n    @Override\r\n    @Transactional\r\n    public void createSlots(List<SlotDto> slotDtos) {\r\n        slotDtos.forEach(dto -> {\r\n            if (dto.getStartTime() == null) {\r\n                throw new ValidationException(\"Start time is required for slot creation\");\r\n            }\r\n            if (dto.getEndTime() == null) {\r\n                throw new ValidationException(\"End time is required for slot creation\");\r\n            }\r\n\r\n            Slot slot = new Slot();\r\n            slot.setCourtId(dto.getCourtId());\r\n            slot.setDate(dto.getDate());\r\n            slot.setStartTime(dto.getStartTime());\r\n            slot.setEndTime(dto.getEndTime());\r\n            slot.setAvailable(dto.isAvailable());\r\n\r\n            // 设置持续时间（如果提供）\r\n            if (dto.getDurationHours() != null) {\r\n                slot.setDurationHours(dto.getDurationHours());\r\n            }\r\n\r\n            slotRepository.save(slot);\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public List<SlotResponseDto> getAvailableSlotsByCourt(Integer courtId) {\r\n        LocalDate today = LocalDate.now();\r\n        LocalDate endDate = today.plusMonths(3); // Next 3 months\r\n\r\n        Court court = courtRepository.findById(courtId)\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"Court not found with id: \" + courtId));\r\n\r\n        List<Slot> slots = slotRepository.findByCourtIdAndDateBetweenAndIsAvailableTrue(\r\n                courtId, today, endDate);\r\n\r\n        return slots.stream().map(slot -> {\r\n            SlotResponseDto dto = new SlotResponseDto();\r\n            dto.setId(slot.getId());\r\n            dto.setCourtId(slot.getCourtId());\r\n            dto.setDate(slot.getDate());\r\n            dto.setStartTime(slot.getStartTime());\r\n            dto.setEndTime(slot.getEndTime());\r\n            dto.setStatus(\"AVAILABLE\");\r\n            dto.setDurationHours(calculateDurationHours(slot));\r\n            dto.setCourtName(court.getName());\r\n            dto.setCourtLocation(court.getLocation());\r\n\r\n            return dto;\r\n        }).collect(Collectors.toList());\r\n    }\r\n\r\n    public List<SlotResponseDto> getAllSlotsByCourt(Integer courtId, LocalDate startDate, LocalDate endDate) {\r\n        Court court = courtRepository.findById(courtId)\r\n            .orElseThrow(() -> new ResourceNotFoundException(\"Court not found with id: \" + courtId));\r\n\r\n        List<Slot> slots = slotRepository.findByCourtIdAndDateBetween(courtId, startDate, endDate);\r\n\r\n        return slots.stream().map(slot -> {\r\n            SlotResponseDto dto = new SlotResponseDto();\r\n            dto.setId(slot.getId());\r\n            dto.setCourtId(slot.getCourtId());\r\n            dto.setDate(slot.getDate());\r\n            dto.setStartTime(slot.getStartTime());\r\n            dto.setEndTime(slot.getEndTime());\r\n            dto.setDurationHours(slot.getDurationHours());\r\n            dto.setCourtName(court.getName());\r\n            dto.setCourtLocation(court.getLocation());\r\n            dto.setStatus(slot.isAvailable() ? \"AVAILABLE\" : \"BOOKED\");\r\n            return dto;\r\n        }).collect(Collectors.toList());\r\n    }\r\n\r\n    private int calculateDurationHours(Slot slot) {\r\n        if (slot.getDurationHours() != null) {\r\n            return slot.getDurationHours();\r\n        }\r\n\r\n        LocalTime start = slot.getStartTime();\r\n        LocalTime end = slot.getEndTime();\r\n\r\n        long hours = Duration.between(start, end).toHours();\r\n\r\n        if (hours < 0) {\r\n            hours = 24 + hours;\r\n        }\r\n\r\n        return (int) hours;\r\n    }\r\n\r\n    private String determineSlotStatus(Slot slot, Court court) {\r\n        if (!slot.isAvailable()) {\r\n            return \"BOOKED\";\r\n        }\r\n        if (\"MAINTENANCE\".equals(court.getStatus())) {\r\n            return \"MAINTENANCE\";\r\n        }\r\n        if (!isOperatingDay(slot, court)) {\r\n            return \"CLOSED\";\r\n        }\r\n        if (!isDuringOperatingHours(slot, court)) {\r\n            return \"CLOSED\";\r\n        }\r\n        return \"AVAILABLE\";\r\n    }\r\n\r\n    private boolean isOperatingDay(Slot slot, Court court) {\r\n        if (court.getOperatingDays() == null) return false;\r\n\r\n        DayOfWeek slotDay = slot.getDate().getDayOfWeek();\r\n        String[] operatingDays = court.getOperatingDays().split(\",\");\r\n\r\n        for (String day : operatingDays) {\r\n            try {\r\n                DayOfWeek courtDay = DayOfWeek.valueOf(day.trim().toUpperCase());\r\n                if (courtDay == slotDay) {\r\n                    return true;\r\n                }\r\n            } catch (IllegalArgumentException ignored) {\r\n                // 忽略无效日期格式\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private boolean isDuringOperatingHours(Slot slot, Court court) {\r\n        try {\r\n            LocalTime opening = LocalTime.parse(court.getOpeningTime());\r\n            LocalTime closing = LocalTime.parse(court.getClosingTime());\r\n            return !slot.getStartTime().isBefore(opening) &&\r\n                    !slot.getEndTime().isAfter(closing);\r\n        } catch (Exception e) {\r\n            return false;\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/SlotServiceImpl.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/SlotServiceImpl.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/SlotServiceImpl.java	(revision 97abd609899a67b781b8ace8e91358a782fc5acd)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/SlotServiceImpl.java	(date 1753722506145)
@@ -4,10 +4,13 @@
 import com.pickleball_backend.pickleball.dto.SlotResponseDto;
 import com.pickleball_backend.pickleball.entity.Court;
 import com.pickleball_backend.pickleball.entity.Slot;
+
 import com.pickleball_backend.pickleball.exception.ResourceNotFoundException;
 import com.pickleball_backend.pickleball.exception.ValidationException;
 import com.pickleball_backend.pickleball.repository.CourtRepository;
 import com.pickleball_backend.pickleball.repository.SlotRepository;
+import com.pickleball_backend.pickleball.repository.ClassSessionRepository;
+
 import lombok.RequiredArgsConstructor;
 import org.springframework.stereotype.Service;
 import org.springframework.transaction.annotation.Transactional;
@@ -16,6 +19,7 @@
 import java.time.Duration;
 import java.time.LocalDate;
 import java.time.LocalTime;
+import java.time.LocalDateTime;
 import java.util.*;
 import java.util.stream.Collectors;
 
@@ -25,6 +29,7 @@
 
     private final SlotRepository slotRepository;
     private final CourtRepository courtRepository;
+    private final ClassSessionRepository classSessionRepository;
 
     @Override
     public List<SlotResponseDto> getSlots(List<Integer> courtIds, LocalDate startDate, LocalDate endDate) {
@@ -112,10 +117,49 @@
         Court court = courtRepository.findById(courtId)
                 .orElseThrow(() -> new ResourceNotFoundException("Court not found with id: " + courtId));
 
-        List<Slot> slots = slotRepository.findByCourtIdAndDateBetweenAndIsAvailableTrue(
-                courtId, today, endDate);
+        // 查找所有slots，包括isAvailable=false的，然后过滤掉PENDING状态的
+        List<Slot> allSlots = slotRepository.findByCourtIdAndDateBetween(courtId, today, endDate);
+        List<Slot> slots = allSlots.stream()
+            .filter(slot -> !"PENDING".equals(slot.getStatus()))
+            .collect(Collectors.toList());
+        
+        System.out.println("=== getAvailableSlotsByCourt Debug ===");
+        System.out.println("Court ID: " + courtId);
+        System.out.println("Total slots found: " + allSlots.size());
+        System.out.println("Slots after PENDING filter: " + slots.size());
+        
+        // 显示被过滤掉的PENDING slots
+        List<Slot> pendingSlots = allSlots.stream()
+            .filter(slot -> "PENDING".equals(slot.getStatus()))
+            .collect(Collectors.toList());
+        
+        if (!pendingSlots.isEmpty()) {
+            System.out.println("PENDING slots found:");
+            for (Slot slot : pendingSlots) {
+                System.out.println("  - Slot ID: " + slot.getId() + 
+                    ", Date: " + slot.getDate() + 
+                    ", Time: " + slot.getStartTime() + "-" + slot.getEndTime() + 
+                    ", Status: " + slot.getStatus());
+            }
+        }
+        System.out.println("=== End Debug ===");
 
-        return slots.stream().map(slot -> {
+        // 查詢所有未取消的 class session
+        final List<com.pickleball_backend.pickleball.entity.ClassSession> filteredSessions = classSessionRepository.findByCourtIdAndStartTimeBetween(
+            courtId,
+            today.atStartOfDay(),
+            endDate.atTime(23, 59, 59)
+        ).stream().filter(s -> !"CANCELLED".equalsIgnoreCase(s.getStatus())).toList();
+
+        return slots.stream().filter(slot -> {
+            LocalDateTime slotStart = LocalDateTime.of(slot.getDate(), slot.getStartTime());
+            LocalDateTime slotEnd = LocalDateTime.of(slot.getDate(), slot.getEndTime());
+            // 只要有任何 class session 時間重疊，該 slot 就不能預約
+            boolean overlap = filteredSessions.stream().anyMatch(s ->
+                slotStart.isBefore(s.getEndTime()) && slotEnd.isAfter(s.getStartTime())
+            );
+            return !overlap;
+        }).map(slot -> {
             SlotResponseDto dto = new SlotResponseDto();
             dto.setId(slot.getId());
             dto.setCourtId(slot.getCourtId());
@@ -126,7 +170,6 @@
             dto.setDurationHours(calculateDurationHours(slot));
             dto.setCourtName(court.getName());
             dto.setCourtLocation(court.getLocation());
-
             return dto;
         }).collect(Collectors.toList());
     }
@@ -214,4 +257,5 @@
             return false;
         }
     }
+
 }
\ No newline at end of file
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/ProfileController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.controller;\r\n\r\nimport com.pickleball_backend.pickleball.dto.ProfileDto;\r\nimport com.pickleball_backend.pickleball.dto.UserSearchDto;\r\nimport com.pickleball_backend.pickleball.entity.User;\r\nimport com.pickleball_backend.pickleball.entity.UserAccount;\r\nimport com.pickleball_backend.pickleball.repository.UserAccountRepository;\r\nimport com.pickleball_backend.pickleball.repository.UserRepository;\r\nimport com.pickleball_backend.pickleball.service.ProfileService;\r\nimport com.pickleball_backend.pickleball.service.FileStorageService;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.springframework.http.HttpStatus;\r\nimport org.springframework.http.MediaType; // Add this import\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.security.core.Authentication;\r\nimport org.springframework.security.access.prepost.PreAuthorize;\r\nimport org.springframework.web.bind.annotation.*;\r\nimport org.springframework.web.multipart.MultipartFile;\r\n\r\nimport java.util.Collections;\r\nimport java.util.List;\r\nimport java.security.Principal;\r\nimport java.util.stream.Collectors;\r\n\r\n@RestController\r\n@RequestMapping(\"/api/profile\")\r\n@RequiredArgsConstructor\r\npublic class ProfileController {\r\n\r\n    private static final Logger logger = LoggerFactory.getLogger(ProfileController.class);\r\n    private final ProfileService profileService;\r\n    private final FileStorageService fileStorageService; // Add this\r\n    private final UserAccountRepository userAccountRepository;\r\n    private final UserRepository userRepository;\r\n\r\n    @GetMapping\r\n    public ResponseEntity<ProfileDto> getProfile(Authentication authentication) {\r\n        String username = authentication.getName();\r\n        ProfileDto profile = profileService.getProfile(username);\r\n        return ResponseEntity.ok(profile);\r\n    }\r\n\r\n    @PutMapping\r\n    public ResponseEntity<?> updateProfile(\r\n            Authentication authentication,\r\n            @RequestBody ProfileDto profileDto\r\n    ) {\r\n        String username = authentication.getName();\r\n        try {\r\n            ProfileDto updatedProfile = profileService.updateProfile(username, profileDto);\r\n            return ResponseEntity.ok(updatedProfile);\r\n        } catch (Exception e) {\r\n            return ResponseEntity.badRequest().body(e.getMessage());\r\n        }\r\n    }\r\n\r\n    // Modify the photo upload endpoint to return filename\r\n    @PostMapping(value = \"/photo\", consumes = MediaType.MULTIPART_FORM_DATA_VALUE)\r\n    public ResponseEntity<?> updateProfilePhoto(\r\n            Authentication authentication,\r\n            @RequestParam(\"profileImage\") MultipartFile file) {\r\n        try {\r\n            String username = authentication.getName();\r\n            String filename = fileStorageService.store(file);\r\n            profileService.updateProfilePhoto(username, filename);\r\n\r\n            // Return filename as string\r\n            return ResponseEntity.ok().body(filename);\r\n        } catch (Exception e) {\r\n            return ResponseEntity.badRequest().body(e.getMessage());\r\n        }\r\n    }\r\n\r\n    @DeleteMapping(\"/photo\")\r\n    public ResponseEntity<?> removeProfilePhoto(Authentication authentication) {\r\n        String username = authentication.getName();\r\n        try {\r\n            profileService.removeProfilePhoto(username);\r\n            return ResponseEntity.ok().build();\r\n        } catch (Exception e) {\r\n            // Add this logging statement to see the actual error\r\n            logger.error(\"Failed to remove profile photo for user: {}\", username, e);\r\n            return ResponseEntity\r\n                    .status(HttpStatus.INTERNAL_SERVER_ERROR)\r\n                    .body(\"Failed to remove profile photo: \" + e.getMessage());\r\n        }\r\n    }\r\n\r\n    @PutMapping(\"/preferences\")\r\n    public ResponseEntity<?> updatePreferences(\r\n            Authentication authentication,\r\n            @RequestBody ProfileDto preferencesDto) {\r\n        try {\r\n            String username = authentication.getName();\r\n            ProfileDto updatedPreferences = profileService.updatePreferences(username, preferencesDto);\r\n            return ResponseEntity.ok(updatedPreferences);\r\n        } catch (Exception e) {\r\n            return ResponseEntity.badRequest().body(e.getMessage());\r\n        }\r\n    }\r\n\r\n    // In UserController.java\r\n    @GetMapping(\"/search\")\r\n    public ResponseEntity<List<UserSearchDto>> searchUsers(@RequestParam String q) {\r\n        List<User> users = userRepository.findByNameContainingIgnoreCaseOrUserAccount_UsernameContainingIgnoreCase(q, q);\r\n        List<UserSearchDto> dtos = users.stream()\r\n                .map(user -> new UserSearchDto(\r\n                        user.getId(),\r\n                        user.getUserAccount().getUsername(),\r\n                        user.getName(),\r\n                        user.getUserAccount().getProfileImage()\r\n                ))\r\n                .collect(Collectors.toList());\r\n        return ResponseEntity.ok(dtos);\r\n    }\r\n\r\n  /*  @PostMapping(\"/upload-documents\")\r\n    public ResponseEntity<String> uploadDocument(\r\n            @RequestParam(\"file\") MultipartFile file,\r\n            Authentication authentication\r\n    ) {\r\n        String username = authentication.getName();\r\n        try {\r\n            String filename = fileStorageService.store(file);\r\n            UserAccount account = userAccountRepository.findByUsername(username)\r\n                    .orElseThrow(() -> new RuntimeException(\"User account not found\"));\r\n\r\n            // Append new document\r\n            String existingDocs = account.getVerificationDocuments();\r\n            account.setVerificationDocuments(\r\n                    existingDocs == null ? filename : existingDocs + \",\" + filename\r\n            );\r\n            userAccountRepository.save(account);\r\n\r\n            return ResponseEntity.ok(\"File uploaded successfully\");\r\n        } catch (Exception e) {\r\n            return ResponseEntity.status(500).body(\"Upload failed: \" + e.getMessage());\r\n        }\r\n    }\r\n\r\n   @PutMapping(\"/user-type\")\r\n    public ResponseEntity<String> requestUserTypeChange(\r\n            @RequestBody UserTypeRequestDto requestDto,\r\n            Authentication authentication\r\n    ) {\r\n        String username = authentication.getName();\r\n        User user = userRepository.findByUserAccount_Username(username)\r\n                .orElseThrow(() -> new RuntimeException(\"User not found\"));\r\n        UserAccount account = userAccountRepository.findByUsername(username)\r\n                .orElseThrow(() -> new RuntimeException(\"User account not found\"));\r\n\r\n        // Validate document exists\r\n        if (account.getVerificationDocuments() == null ||\r\n                account.getVerificationDocuments().isEmpty()) {\r\n            return ResponseEntity.badRequest().body(\"Please upload verification documents first\");\r\n        }\r\n\r\n        // Set requested type and status\r\n        user.setRequestedUserType(requestDto.getRequestedUserType());\r\n        account.setVerificationStatus(\"PENDING\");\r\n\r\n        userRepository.save(user);\r\n        userAccountRepository.save(account);\r\n\r\n        return ResponseEntity.ok(\"User type change requested successfully\");\r\n    }*/\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/ProfileController.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/ProfileController.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/ProfileController.java	(revision 97abd609899a67b781b8ace8e91358a782fc5acd)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/ProfileController.java	(date 1753722506155)
@@ -101,6 +101,24 @@
         }
     }
 
+    @PutMapping("/user-type")
+    public ResponseEntity<String> requestUserTypeChange(
+            @RequestBody ProfileDto profileDto,
+            Authentication authentication
+    ) {
+        String username = authentication.getName();
+        User user = userRepository.findByUserAccount_Username(username)
+                .orElseThrow(() -> new RuntimeException("User not found"));
+        UserAccount account = userAccountRepository.findByUsername(username)
+                .orElseThrow(() -> new RuntimeException("User account not found"));
+
+        // 直接設置 requestedUserType
+        user.setRequestedUserType(profileDto.getRequestedUserType());
+        userRepository.save(user);
+
+        return ResponseEntity.ok("User type change requested successfully");
+    }
+
     // In UserController.java
     @GetMapping("/search")
     public ResponseEntity<List<UserSearchDto>> searchUsers(@RequestParam String q) {
@@ -116,6 +134,8 @@
         return ResponseEntity.ok(dtos);
     }
 
+    
+
   /*  @PostMapping("/upload-documents")
     public ResponseEntity<String> uploadDocument(
             @RequestParam("file") MultipartFile file,
@@ -138,32 +158,5 @@
         } catch (Exception e) {
             return ResponseEntity.status(500).body("Upload failed: " + e.getMessage());
         }
-    }
-
-   @PutMapping("/user-type")
-    public ResponseEntity<String> requestUserTypeChange(
-            @RequestBody UserTypeRequestDto requestDto,
-            Authentication authentication
-    ) {
-        String username = authentication.getName();
-        User user = userRepository.findByUserAccount_Username(username)
-                .orElseThrow(() -> new RuntimeException("User not found"));
-        UserAccount account = userAccountRepository.findByUsername(username)
-                .orElseThrow(() -> new RuntimeException("User account not found"));
-
-        // Validate document exists
-        if (account.getVerificationDocuments() == null ||
-                account.getVerificationDocuments().isEmpty()) {
-            return ResponseEntity.badRequest().body("Please upload verification documents first");
-        }
-
-        // Set requested type and status
-        user.setRequestedUserType(requestDto.getRequestedUserType());
-        account.setVerificationStatus("PENDING");
-
-        userRepository.save(user);
-        userAccountRepository.save(account);
-
-        return ResponseEntity.ok("User type change requested successfully");
     }*/
 }
\ No newline at end of file
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/FriendlyMatchController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.controller;\r\n\r\nimport com.pickleball_backend.pickleball.entity.*;\r\nimport com.pickleball_backend.pickleball.exception.ResourceNotFoundException;\r\nimport com.pickleball_backend.pickleball.repository.MemberRepository;\r\nimport com.pickleball_backend.pickleball.repository.UserAccountRepository;\r\nimport com.pickleball_backend.pickleball.service.FriendlyMatchService;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.security.access.prepost.PreAuthorize;\r\nimport org.springframework.web.bind.annotation.*;\r\nimport java.security.Principal;\r\nimport java.util.List;\r\n\r\n@RestController\r\n@RequestMapping(\"/api/friendly-matches\")\r\npublic class FriendlyMatchController {\r\n\r\n    @Autowired\r\n    private FriendlyMatchService friendlyMatchService;\r\n\r\n    @Autowired\r\n    private MemberRepository memberRepository;\r\n\r\n    @Autowired\r\n    private UserAccountRepository userAccountRepository;\r\n\r\n    @PostMapping\r\n    @PreAuthorize(\"hasRole('USER')\")\r\n    public ResponseEntity<FriendlyMatch> createMatch(\r\n            @RequestBody FriendlyMatch match,\r\n            Principal principal) {\r\n\r\n        Member organizer = getCurrentMember(principal);\r\n        return ResponseEntity.ok(friendlyMatchService.createMatch(match, organizer.getId()));\r\n    }\r\n\r\n    @GetMapping(\"/open\")\r\n    public List<FriendlyMatch> getOpenMatches() {\r\n        return friendlyMatchService.getOpenMatches();\r\n    }\r\n\r\n    @PostMapping(\"/{matchId}/join\")\r\n    @PreAuthorize(\"hasRole('USER')\")\r\n    public ResponseEntity<JoinRequest> sendJoinRequest(\r\n            @PathVariable Integer matchId,\r\n            Principal principal) {\r\n\r\n        Member member = getCurrentMember(principal);\r\n        return ResponseEntity.ok(friendlyMatchService.sendJoinRequest(matchId, member.getId()));\r\n    }\r\n\r\n    @PostMapping(\"/requests/{requestId}/approve\")\r\n    @PreAuthorize(\"hasRole('USER')\")\r\n    public ResponseEntity<?> approveRequest(\r\n            @PathVariable Integer requestId,\r\n            Principal principal) {\r\n\r\n        Member organizer = getCurrentMember(principal);\r\n        friendlyMatchService.approveRequest(requestId, organizer.getId());\r\n        return ResponseEntity.ok().build();\r\n    }\r\n\r\n    @DeleteMapping(\"/requests/{requestId}\")\r\n    @PreAuthorize(\"hasRole('USER')\")\r\n    public ResponseEntity<?> cancelJoinRequest(\r\n            @PathVariable Integer requestId,\r\n            Principal principal) {\r\n\r\n        Member member = getCurrentMember(principal);\r\n        friendlyMatchService.cancelJoinRequest(requestId, member.getId());\r\n        return ResponseEntity.noContent().build();\r\n    }\r\n\r\n    private Member getCurrentMember(Principal principal) {\r\n        String username = principal.getName();\r\n        // Get UserAccount first\r\n        UserAccount userAccount = userAccountRepository.findByUsername(username)\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"User account not found\"));\r\n\r\n        // Then get Member through the User\r\n        return memberRepository.findByUserId(userAccount.getUser().getId());\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/FriendlyMatchController.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/FriendlyMatchController.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/FriendlyMatchController.java	(revision 97abd609899a67b781b8ace8e91358a782fc5acd)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/FriendlyMatchController.java	(date 1753722506212)
@@ -5,12 +5,20 @@
 import com.pickleball_backend.pickleball.repository.MemberRepository;
 import com.pickleball_backend.pickleball.repository.UserAccountRepository;
 import com.pickleball_backend.pickleball.service.FriendlyMatchService;
+import com.pickleball_backend.pickleball.dto.FriendlyMatchInvitationDto;
+import com.pickleball_backend.pickleball.dto.FriendlyMatchPaymentDto;
+import com.pickleball_backend.pickleball.dto.BookingResponseDto;
+import com.pickleball_backend.pickleball.dto.JoinRequestDto;
+import com.pickleball_backend.pickleball.dto.FriendlyMatchResponseDto;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.http.ResponseEntity;
 import org.springframework.security.access.prepost.PreAuthorize;
 import org.springframework.web.bind.annotation.*;
 import java.security.Principal;
 import java.util.List;
+import org.springframework.security.core.annotation.AuthenticationPrincipal;
+import org.springframework.security.core.userdetails.UserDetails;
+import com.pickleball_backend.pickleball.repository.FriendlyMatchRepository;
 
 @RestController
 @RequestMapping("/api/friendly-matches")
@@ -25,19 +33,64 @@
     @Autowired
     private UserAccountRepository userAccountRepository;
 
+    @Autowired
+    private FriendlyMatchRepository friendlyMatchRepository;
+
     @PostMapping
     @PreAuthorize("hasRole('USER')")
-    public ResponseEntity<FriendlyMatch> createMatch(
+    public ResponseEntity<FriendlyMatchResponseDto> createMatch(
             @RequestBody FriendlyMatch match,
             Principal principal) {
 
         Member organizer = getCurrentMember(principal);
-        return ResponseEntity.ok(friendlyMatchService.createMatch(match, organizer.getId()));
+        FriendlyMatch createdMatch = friendlyMatchService.createMatch(match, organizer.getId());
+        return ResponseEntity.ok(friendlyMatchService.convertToResponseDto(createdMatch, "Match created successfully"));
+    }
+
+    @PostMapping("/create")
+    @PreAuthorize("hasRole('USER')")
+    public ResponseEntity<FriendlyMatchResponseDto> createFriendlyMatch(
+            @RequestBody FriendlyMatch match,
+            Principal principal) {
+
+        Member organizer = getCurrentMember(principal);
+        return ResponseEntity.ok(friendlyMatchService.createFriendlyMatch(match, organizer.getId()));
     }
 
     @GetMapping("/open")
-    public List<FriendlyMatch> getOpenMatches() {
-        return friendlyMatchService.getOpenMatches();
+    public List<FriendlyMatchResponseDto> getOpenMatches() {
+        List<FriendlyMatch> matches = friendlyMatchService.getOpenMatches();
+        return matches.stream()
+                .map(match -> friendlyMatchService.convertToResponseDto(match, null))
+                .toList();
+    }
+
+    @GetMapping("/all")
+    public List<FriendlyMatchInvitationDto> getAllMatches() {
+        return friendlyMatchService.getAllMatchesDto();
+    }
+
+    @DeleteMapping("/{matchId}")
+    @PreAuthorize("hasRole('USER')")
+    public ResponseEntity<String> deleteFriendlyMatch(@PathVariable Integer matchId, Principal principal) {
+        try {
+            System.out.println("=== Delete Friendly Match Request ===");
+            System.out.println("Match ID: " + matchId);
+            System.out.println("Principal: " + principal.getName());
+            
+            Member member = getCurrentMember(principal);
+            System.out.println("Member ID: " + member.getId());
+            System.out.println("Member Name: " + member.getUser().getName());
+            
+            friendlyMatchService.deleteFriendlyMatch(matchId, member.getId());
+            System.out.println("=== Delete Successful ===");
+            return ResponseEntity.ok("Friendly match deleted successfully");
+        } catch (Exception e) {
+            System.out.println("=== Delete Failed ===");
+            System.out.println("Error: " + e.getMessage());
+            e.printStackTrace();
+            return ResponseEntity.badRequest().body("Failed to delete friendly match: " + e.getMessage());
+        }
     }
 
     @PostMapping("/{matchId}/join")
@@ -50,17 +103,6 @@
         return ResponseEntity.ok(friendlyMatchService.sendJoinRequest(matchId, member.getId()));
     }
 
-    @PostMapping("/requests/{requestId}/approve")
-    @PreAuthorize("hasRole('USER')")
-    public ResponseEntity<?> approveRequest(
-            @PathVariable Integer requestId,
-            Principal principal) {
-
-        Member organizer = getCurrentMember(principal);
-        friendlyMatchService.approveRequest(requestId, organizer.getId());
-        return ResponseEntity.ok().build();
-    }
-
     @DeleteMapping("/requests/{requestId}")
     @PreAuthorize("hasRole('USER')")
     public ResponseEntity<?> cancelJoinRequest(
@@ -72,6 +114,63 @@
         return ResponseEntity.noContent().build();
     }
 
+    @PostMapping("/invitation")
+    @PreAuthorize("hasRole('USER')")
+    public ResponseEntity<FriendlyMatchResponseDto> createInvitation(@RequestBody FriendlyMatch match, @RequestParam Integer bookingId, Principal principal) {
+        Member organizer = getCurrentMember(principal);
+        FriendlyMatch createdMatch = friendlyMatchService.createInvitation(match, bookingId, organizer.getId());
+        return ResponseEntity.ok(friendlyMatchService.convertToResponseDto(createdMatch, "Invitation created successfully"));
+    }
+
+    @GetMapping("/invitations")
+    public List<FriendlyMatchInvitationDto> getOpenInvitations() {
+        return friendlyMatchService.getOpenInvitationsDto();
+    }
+
+    @PostMapping("/invitation/{matchId}/join")
+    @PreAuthorize("hasRole('USER')")
+    public ResponseEntity<JoinRequest> joinInvitation(@PathVariable Integer matchId, Principal principal) {
+        Member member = getCurrentMember(principal);
+        return ResponseEntity.ok(friendlyMatchService.joinInvitation(matchId, member.getId()));
+    }
+
+    // 新增：為 match 付款
+    @PostMapping("/{id}/pay")
+    @PreAuthorize("hasRole('USER')")
+    public ResponseEntity<?> payForMatch(@PathVariable Integer id, @RequestBody(required = false) FriendlyMatchPaymentDto paymentDto, Principal principal) {
+        try {
+            Member member = getCurrentMember(principal);
+            if (member == null) {
+                return ResponseEntity.badRequest().body("Member not found");
+            }
+            
+            FriendlyMatch match = friendlyMatchRepository.findById(id)
+                    .orElseThrow(() -> new RuntimeException("Match not found"));
+            
+            // 檢查是否為 organizer
+            if (!match.getOrganizer().getId().equals(member.getId())) {
+                return ResponseEntity.badRequest().body("Only organizer can pay for the match");
+            }
+            
+            // 檢查是否已滿員
+            if (match.getCurrentPlayers() < match.getMaxPlayers()) {
+                return ResponseEntity.badRequest().body("Match is not full yet");
+            }
+            
+            // 檢查是否已付款
+            if ("PAID".equals(match.getPaymentStatus())) {
+                return ResponseEntity.badRequest().body("Payment already completed");
+            }
+            
+            // 處理付款並創建 booking 記錄
+            BookingResponseDto bookingResponse = friendlyMatchService.processFriendlyMatchPayment(match, member, paymentDto);
+            
+            return ResponseEntity.ok().body(bookingResponse);
+        } catch (Exception e) {
+            return ResponseEntity.badRequest().body("Payment failed: " + e.getMessage());
+        }
+    }
+
     private Member getCurrentMember(Principal principal) {
         String username = principal.getName();
         // Get UserAccount first
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/WalletService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// WalletService.java\r\npackage com.pickleball_backend.pickleball.service;\r\n\r\nimport com.pickleball_backend.pickleball.dto.TopUpRequestDto;\r\nimport com.pickleball_backend.pickleball.dto.WalletTransactionDto;\r\nimport com.pickleball_backend.pickleball.entity.*;\r\nimport com.pickleball_backend.pickleball.exception.*;\r\nimport com.pickleball_backend.pickleball.repository.*;\r\nimport lombok.RequiredArgsConstructor;\r\nimport com.pickleball_backend.pickleball.exception.ResourceNotFoundException;\r\nimport org.hibernate.service.spi.ServiceException;\r\nimport org.springframework.dao.DataAccessException;\r\nimport org.springframework.data.domain.Page;\r\nimport org.springframework.data.domain.Pageable;\r\nimport org.springframework.security.core.context.SecurityContextHolder;\r\nimport org.springframework.stereotype.Service;\r\nimport org.springframework.transaction.annotation.Transactional;\r\n\r\nimport java.time.LocalDateTime;\r\nimport java.util.List;\r\nimport java.util.Optional;\r\nimport java.util.UUID;\r\nimport java.util.stream.Collectors;\r\nimport lombok.extern.slf4j.Slf4j;\r\n\r\n@Service\r\n@Slf4j\r\n@RequiredArgsConstructor\r\npublic class WalletService {\r\n\r\n    private final WalletRepository walletRepository;\r\n    private final WalletTransactionRepository walletTransactionRepository;\r\n    private final PaymentRepository paymentRepository;\r\n    private final UserAccountRepository userAccountRepository;\r\n    private final MemberRepository memberRepository;\r\n    private final EmailService emailService;\r\n\r\n    // Wallet balance limit (RM1000)\r\n    private static final double WALLET_LIMIT = 1000.00;\r\n    private static final double MIN_TOPUP_AMOUNT = 20.00;\r\n    private static final double MAX_TOPUP_AMOUNT = 500.00;\r\n    private static final int PAYMENT_TIMEOUT_MINUTES = 30;\r\n\r\n    @Transactional\r\n    public Double topUpWallet(TopUpRequestDto request) {\r\n        // 1. Get authenticated user\r\n        String username = SecurityContextHolder.getContext().getAuthentication().getName();\r\n        UserAccount account = userAccountRepository.findByUsername(username)\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"User account not found\"));\r\n\r\n        // 2. Get member\r\n        Member member = memberRepository.findByUserId(account.getUser().getId());\r\n        if (member == null) {\r\n            throw new ResourceNotFoundException(\"Member not found\");\r\n        }\r\n\r\n        // 3. Get wallet (create if missing)\r\n        Wallet wallet = getOrCreateWallet(member);\r\n\r\n        // 4. Validate wallet status\r\n        if (!\"ACTIVE\".equals(wallet.getStatus())) {\r\n            throw new ValidationException(\"Wallet is not active. Status: \" + wallet.getStatus());\r\n        }\r\n\r\n        // 5. Validate amount\r\n        validateTopUpAmount(request.getAmount());\r\n\r\n        // 6. Check wallet limit\r\n        double newBalance = wallet.getBalance() + request.getAmount();\r\n        if (newBalance > WALLET_LIMIT) {\r\n            throw new ValidationException(\r\n                    \"Top-up exceeds maximum wallet balance allowed (RM\" + WALLET_LIMIT + \")\"\r\n            );\r\n        }\r\n\r\n        // 7. Create payment record first\r\n        Payment payment = createPaymentRecord(request, \"TOP_UP\");\r\n\r\n        try {\r\n            // 8. Process payment based on source\r\n            if (\"INTERNAL_CREDIT\".equals(request.getSource())) {\r\n                processInternalCreditPayment(member, request.getAmount());\r\n            } else {\r\n                // For external payments, we would integrate with payment gateway here\r\n                // For now, we'll simulate successful payment\r\n                simulateExternalPayment(payment);\r\n            }\r\n\r\n            // 9. Update wallet balance\r\n            double oldBalance = wallet.getBalance();\r\n        wallet.setBalance(newBalance);\r\n            wallet.setTotalDeposited(wallet.getTotalDeposited() + request.getAmount());\r\n        walletRepository.save(wallet);\r\n\r\n            // 10. Create transaction record\r\n            createWalletTransaction(wallet, \"DEPOSIT\", request.getAmount(), oldBalance, newBalance, \r\n                                  \"PAYMENT\", payment.getId(), \"Top-up via \" + request.getSource());\r\n\r\n            // 11. Update payment status\r\n        payment.setStatus(\"COMPLETED\");\r\n            payment.setProcessedAt(LocalDateTime.now());\r\n        paymentRepository.save(payment);\r\n\r\n            // 12. Send confirmation email\r\n        emailService.sendTopUpConfirmation(\r\n                account.getUser().getEmail(),\r\n                request.getAmount(),\r\n                newBalance,\r\n                request.getSource(),\r\n                payment.getTransactionId()\r\n        );\r\n\r\n            log.info(\"Top-up successful for user {}: RM{}\", username, request.getAmount());\r\n        return newBalance;\r\n\r\n        } catch (Exception e) {\r\n            // Rollback payment status\r\n            payment.setStatus(\"FAILED\");\r\n            payment.setFailureReason(e.getMessage());\r\n            paymentRepository.save(payment);\r\n            \r\n            log.error(\"Top-up failed for user {}: {}\", username, e.getMessage());\r\n            throw new ValidationException(\"Top-up failed: \" + e.getMessage());\r\n        }\r\n    }\r\n\r\n    @Transactional\r\n    public Double getWalletBalance(String username) {\r\n        log.info(\"Fetching wallet balance for user: {}\", username);\r\n\r\n        try {\r\n            UserAccount account = userAccountRepository.findByUsername(username)\r\n                    .orElseThrow(() -> {\r\n                        log.error(\"User account not found: {}\", username);\r\n                        return new ResourceNotFoundException(\"User account not found\");\r\n                    });\r\n\r\n            Member member = memberRepository.findByUserId(account.getUser().getId());\r\n            if (member == null) {\r\n                log.error(\"Member not found for user: {}\", username);\r\n                throw new ResourceNotFoundException(\"Member not found\");\r\n            }\r\n\r\n            Optional<Wallet> walletOpt = walletRepository.findByMemberId(member.getId());\r\n\r\n            if (walletOpt.isEmpty()) {\r\n                log.info(\"Creating new wallet for member: {}\", member.getId());\r\n                Wallet newWallet = new Wallet();\r\n                newWallet.setMember(member);\r\n                newWallet.setBalance(0.00);\r\n                newWallet.setTotalDeposited(0.00);\r\n\r\n                try {\r\n                    Wallet savedWallet = walletRepository.save(newWallet);\r\n                    log.info(\"Created new wallet with balance: {}\", savedWallet.getBalance());\r\n                    return savedWallet.getBalance();\r\n                } catch (DataAccessException e) {\r\n                    log.error(\"Failed to create wallet for member {}: {}\", member.getId(), e.getMessage());\r\n                    throw new ServiceException(\"Failed to create wallet\");\r\n                }\r\n            }\r\n\r\n            Wallet wallet = walletOpt.get();\r\n            log.info(\"Found existing wallet balance: {} for user: {}\", wallet.getBalance(), username);\r\n            return wallet.getBalance();\r\n\r\n        } catch (Exception e) {\r\n            log.error(\"Error fetching wallet balance for user {}: {}\", username, e.getMessage());\r\n            throw new ServiceException(\"Failed to fetch wallet balance\");\r\n        }\r\n    }\r\n\r\n    @Transactional\r\n    public WalletTransactionDto getWalletTransactions(String username, Pageable pageable) {\r\n        String currentUsername = SecurityContextHolder.getContext().getAuthentication().getName();\r\n        if (!username.equals(currentUsername)) {\r\n            throw new ValidationException(\"Unauthorized access to wallet transactions\");\r\n        }\r\n\r\n        UserAccount account = userAccountRepository.findByUsername(username)\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"User account not found\"));\r\n\r\n        Member member = memberRepository.findByUserId(account.getUser().getId());\r\n        if (member == null) {\r\n            throw new ResourceNotFoundException(\"Member not found\");\r\n        }\r\n\r\n        Wallet wallet = walletRepository.findByMemberId(member.getId())\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"Wallet not found\"));\r\n\r\n        Page<WalletTransaction> transactions = walletTransactionRepository\r\n                .findByWalletIdOrderByCreatedAtDesc(wallet.getId(), pageable);\r\n\r\n        return WalletTransactionDto.builder()\r\n                .walletId(wallet.getId())\r\n                .balance(wallet.getBalance())\r\n                .frozenBalance(wallet.getFrozenBalance())\r\n                .totalDeposited(wallet.getTotalDeposited())\r\n                .totalSpent(wallet.getTotalSpent())\r\n                .transactions(transactions.getContent().stream()\r\n                        .map(this::mapToTransactionDto)\r\n                        .collect(Collectors.toList()))\r\n                .totalElements(transactions.getTotalElements())\r\n                .totalPages(transactions.getTotalPages())\r\n                .build();\r\n    }\r\n\r\n    @Transactional\r\n    public void freezeBalance(Integer walletId, double amount, String referenceType, Integer referenceId, String description) {\r\n        Wallet wallet = walletRepository.findById(walletId)\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"Wallet not found\"));\r\n\r\n        if (wallet.getBalance() < amount) {\r\n            throw new InsufficientBalanceException(\"Insufficient balance to freeze\");\r\n        }\r\n\r\n        double oldBalance = wallet.getBalance();\r\n        double oldFrozen = wallet.getFrozenBalance();\r\n\r\n        wallet.setBalance(oldBalance - amount);\r\n        wallet.setFrozenBalance(oldFrozen + amount);\r\n        walletRepository.save(wallet);\r\n\r\n        createWalletTransaction(wallet, \"FREEZE\", amount, oldBalance, wallet.getBalance(), \r\n                              oldFrozen, wallet.getFrozenBalance(), referenceType, referenceId, description);\r\n\r\n        log.info(\"Frozen RM{} from wallet {}\", amount, walletId);\r\n    }\r\n\r\n    @Transactional\r\n    public void unfreezeBalance(Integer walletId, double amount, String referenceType, Integer referenceId, String description) {\r\n        Wallet wallet = walletRepository.findById(walletId)\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"Wallet not found\"));\r\n\r\n        if (wallet.getFrozenBalance() < amount) {\r\n            throw new ValidationException(\"Insufficient frozen balance to unfreeze\");\r\n        }\r\n\r\n        double oldBalance = wallet.getBalance();\r\n        double oldFrozen = wallet.getFrozenBalance();\r\n\r\n        wallet.setBalance(oldBalance + amount);\r\n        wallet.setFrozenBalance(oldFrozen - amount);\r\n        walletRepository.save(wallet);\r\n\r\n        createWalletTransaction(wallet, \"UNFREEZE\", amount, oldBalance, wallet.getBalance(), \r\n                              oldFrozen, wallet.getFrozenBalance(), referenceType, referenceId, description);\r\n\r\n        log.info(\"Unfrozen RM{} from wallet {}\", amount, walletId);\r\n    }\r\n\r\n    @Transactional\r\n    public void processRefund(Integer paymentId, double amount, String reason) {\r\n        Payment payment = paymentRepository.findById(paymentId)\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"Payment not found\"));\r\n\r\n        if (!\"COMPLETED\".equals(payment.getStatus())) {\r\n            throw new ValidationException(\"Payment is not completed\");\r\n        }\r\n\r\n        // Find the booking to get the wallet\r\n        Booking booking = payment.getBooking();\r\n        if (booking == null) {\r\n            throw new ValidationException(\"Payment is not associated with a booking\");\r\n        }\r\n\r\n        Member member = booking.getMember();\r\n        Wallet wallet = walletRepository.findByMemberId(member.getId())\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"Wallet not found\"));\r\n\r\n        double oldBalance = wallet.getBalance();\r\n        wallet.setBalance(oldBalance + amount);\r\n        wallet.setTotalSpent(wallet.getTotalSpent() - amount);\r\n        walletRepository.save(wallet);\r\n\r\n        // Create refund payment record\r\n        Payment refundPayment = new Payment();\r\n        refundPayment.setAmount(amount);\r\n        refundPayment.setPaymentType(\"REFUND\");\r\n        refundPayment.setPaymentMethod(\"WALLET_REFUND\");\r\n        refundPayment.setStatus(\"COMPLETED\");\r\n        refundPayment.setTransactionId(\"REF-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase());\r\n        refundPayment.setReferenceId(payment.getTransactionId());\r\n        refundPayment.setProcessedAt(LocalDateTime.now());\r\n        paymentRepository.save(refundPayment);\r\n\r\n        // Create transaction record\r\n        createWalletTransaction(wallet, \"REFUND\", amount, oldBalance, wallet.getBalance(), \r\n                              \"PAYMENT\", refundPayment.getId(), \"Refund: \" + reason);\r\n\r\n        // Update original payment\r\n        payment.setStatus(\"REFUNDED\");\r\n        payment.setRefundDate(LocalDateTime.now());\r\n        paymentRepository.save(payment);\r\n\r\n        log.info(\"Refund processed: RM{} for payment {}\", amount, paymentId);\r\n    }\r\n\r\n    // Helper methods\r\n    private Wallet getOrCreateWallet(Member member) {\r\n        return walletRepository.findByMemberId(member.getId())\r\n                .orElseGet(() -> {\r\n                    Wallet newWallet = new Wallet();\r\n                    newWallet.setMember(member);\r\n                    newWallet.setBalance(0.00);\r\n                    newWallet.setTotalDeposited(0.00);\r\n                    return walletRepository.save(newWallet);\r\n                });\r\n    }\r\n\r\n    private void validateTopUpAmount(double amount) {\r\n        if (amount < MIN_TOPUP_AMOUNT) {\r\n            throw new ValidationException(\"Minimum top-up amount is RM\" + MIN_TOPUP_AMOUNT);\r\n        }\r\n        if (amount > MAX_TOPUP_AMOUNT) {\r\n            throw new ValidationException(\"Maximum top-up amount is RM\" + MAX_TOPUP_AMOUNT);\r\n        }\r\n    }\r\n\r\n    private Payment createPaymentRecord(TopUpRequestDto request, String paymentType) {\r\n        Payment payment = new Payment();\r\n        payment.setAmount(request.getAmount());\r\n        payment.setPaymentType(paymentType);\r\n        payment.setPaymentMethod(request.getSource());\r\n        payment.setStatus(\"PENDING\");\r\n        payment.setTransactionId(\"TX-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase());\r\n        payment.setExpiresAt(LocalDateTime.now().plusMinutes(PAYMENT_TIMEOUT_MINUTES));\r\n        return paymentRepository.save(payment);\r\n    }\r\n\r\n    private void processInternalCreditPayment(Member member, double amount) {\r\n        int pointsToDeduct = (int) Math.round(amount);\r\n        if (member.getPointBalance() < pointsToDeduct) {\r\n            throw new ValidationException(\r\n                    \"Insufficient internal credit. Available: \" + member.getPointBalance()\r\n            );\r\n        }\r\n        member.setPointBalance(member.getPointBalance() - pointsToDeduct);\r\n        memberRepository.save(member);\r\n    }\r\n\r\n    private void simulateExternalPayment(Payment payment) {\r\n        // In a real implementation, this would integrate with payment gateway\r\n        // For now, we'll simulate a successful payment\r\n        log.info(\"Simulating external payment for transaction: {}\", payment.getTransactionId());\r\n    }\r\n\r\n    private void createWalletTransaction(Wallet wallet, String transactionType, double amount, \r\n                                       double balanceBefore, double balanceAfter, \r\n                                       String referenceType, Integer referenceId, String description) {\r\n        WalletTransaction transaction = new WalletTransaction();\r\n        transaction.setWalletId(wallet.getId());\r\n        transaction.setTransactionType(transactionType);\r\n        transaction.setAmount(amount);\r\n        transaction.setBalanceBefore(balanceBefore);\r\n        transaction.setBalanceAfter(balanceAfter);\r\n        transaction.setFrozenBefore(wallet.getFrozenBalance());\r\n        transaction.setFrozenAfter(wallet.getFrozenBalance());\r\n        transaction.setReferenceType(referenceType);\r\n        transaction.setReferenceId(referenceId);\r\n        transaction.setDescription(description);\r\n        transaction.setStatus(\"COMPLETED\");\r\n        transaction.setProcessedAt(LocalDateTime.now());\r\n        \r\n        walletTransactionRepository.save(transaction);\r\n    }\r\n\r\n    private void createWalletTransaction(Wallet wallet, String transactionType, double amount, \r\n                                       double balanceBefore, double balanceAfter, \r\n                                       double frozenBefore, double frozenAfter,\r\n                                       String referenceType, Integer referenceId, String description) {\r\n        WalletTransaction transaction = new WalletTransaction();\r\n        transaction.setWalletId(wallet.getId());\r\n        transaction.setTransactionType(transactionType);\r\n        transaction.setAmount(amount);\r\n        transaction.setBalanceBefore(balanceBefore);\r\n        transaction.setBalanceAfter(balanceAfter);\r\n        transaction.setFrozenBefore(frozenBefore);\r\n        transaction.setFrozenAfter(frozenAfter);\r\n        transaction.setReferenceType(referenceType);\r\n        transaction.setReferenceId(referenceId);\r\n        transaction.setDescription(description);\r\n        transaction.setStatus(\"COMPLETED\");\r\n        transaction.setProcessedAt(LocalDateTime.now());\r\n        \r\n        walletTransactionRepository.save(transaction);\r\n    }\r\n\r\n    private com.pickleball_backend.pickleball.dto.WalletTransactionDto.TransactionDto mapToTransactionDto(WalletTransaction transaction) {\r\n        return com.pickleball_backend.pickleball.dto.WalletTransactionDto.TransactionDto.builder()\r\n                .id(transaction.getId())\r\n                .transactionType(transaction.getTransactionType())\r\n                .amount(transaction.getAmount())\r\n                .balanceBefore(transaction.getBalanceBefore())\r\n                .balanceAfter(transaction.getBalanceAfter())\r\n                .frozenBefore(transaction.getFrozenBefore())\r\n                .frozenAfter(transaction.getFrozenAfter())\r\n                .referenceType(transaction.getReferenceType())\r\n                .referenceId(transaction.getReferenceId())\r\n                .description(transaction.getDescription())\r\n                .status(transaction.getStatus())\r\n                .createdAt(transaction.getCreatedAt())\r\n                .processedAt(transaction.getProcessedAt())\r\n                .build();\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/WalletService.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/WalletService.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/WalletService.java	(revision 97abd609899a67b781b8ace8e91358a782fc5acd)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/WalletService.java	(date 1753766765316)
@@ -35,8 +35,8 @@
     private final MemberRepository memberRepository;
     private final EmailService emailService;
 
-    // Wallet balance limit (RM1000)
-    private static final double WALLET_LIMIT = 1000.00;
+    // Wallet balance limit (RM2000)
+    private static final double WALLET_LIMIT = 2000.00;
     private static final double MIN_TOPUP_AMOUNT = 20.00;
     private static final double MAX_TOPUP_AMOUNT = 500.00;
     private static final int PAYMENT_TIMEOUT_MINUTES = 30;
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/AdminController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.controller;\r\n\r\nimport com.pickleball_backend.pickleball.dto.*;\r\nimport com.pickleball_backend.pickleball.entity.*;\r\nimport com.pickleball_backend.pickleball.repository.*;\r\nimport com.pickleball_backend.pickleball.service.AdminService;\r\nimport com.pickleball_backend.pickleball.service.BookingService;\r\nimport com.pickleball_backend.pickleball.service.EmailService;\r\nimport com.pickleball_backend.pickleball.service.TierService;\r\nimport com.pickleball_backend.pickleball.service.FileStorageService;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.springframework.http.HttpStatus;\r\nimport org.springframework.http.MediaType;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.security.access.prepost.PreAuthorize;\r\nimport org.springframework.security.core.AuthenticationException;\r\nimport org.springframework.transaction.annotation.Transactional;\r\nimport org.springframework.web.bind.annotation.*;\r\nimport org.springframework.web.multipart.MultipartFile;\r\n\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.stream.Collectors;\r\nimport org.springframework.security.core.context.SecurityContextHolder;\r\nimport com.pickleball_backend.pickleball.exception.ResourceNotFoundException;\r\nimport com.pickleball_backend.pickleball.service.TierAutoUpgradeService;\r\nimport com.pickleball_backend.pickleball.repository.MemberRepository;\r\n\r\n@RestController\r\n@RequestMapping(\"/api/admin\")\r\n@RequiredArgsConstructor\r\n@CrossOrigin\r\n@Transactional\r\npublic class AdminController {\r\n\r\n    private final UserRepository userRepository;\r\n    private final UserAccountRepository userAccountRepository;\r\n    private final AdminRepository adminRepository;\r\n    private final AdminService adminService;\r\n    private final BookingService bookingService;\r\n    private final TierService tierService;\r\n    private final EmailService emailService;\r\n    private final MemberRepository memberRepository;\r\n    private final TierAutoUpgradeService tierAutoUpgradeService;\r\n    private final FileStorageService fileStorageService;\r\n\r\n    // User Type Change Management\r\n    @GetMapping(\"/pending-type-changes\")\r\n    @PreAuthorize(\"hasRole('ADMIN')\")\r\n    public ResponseEntity<List<UserTypeChangeResponse>> getPendingTypeChanges() {\r\n        List<User> users = userRepository.findByRequestedUserTypeIsNotNull();\r\n        List<UserTypeChangeResponse> response = users.stream()\r\n                .map(user -> new UserTypeChangeResponse(\r\n                        user.getId(),\r\n                        user.getName(),\r\n                        user.getUserType(),\r\n                        user.getRequestedUserType()\r\n                ))\r\n                .collect(Collectors.toList());\r\n        return ResponseEntity.ok(response);\r\n    }\r\n\r\n    @PutMapping(\"/approve-user-type/{userId}\")\r\n    @PreAuthorize(\"hasRole('ADMIN')\")\r\n    public ResponseEntity<String> approveUserTypeChange(\r\n            @PathVariable Integer userId,\r\n            @RequestParam String newType\r\n    ) {\r\n        User user = userRepository.findById(userId)\r\n                .orElseThrow(() -> new RuntimeException(\"User not found\"));\r\n\r\n        if (!\"User\".equals(newType) && !\"Coach\".equals(newType) && !\"EventOrganizer\".equals(newType)) {\r\n            return ResponseEntity.badRequest().body(\"Invalid user type. Only 'User', 'Coach' or 'EventOrganizer' allowed.\");\r\n        }\r\n\r\n        if (!newType.equals(user.getRequestedUserType())) {\r\n            return ResponseEntity.badRequest().body(\"User has not requested this type\");\r\n        }\r\n\r\n        user.setUserType(newType);\r\n        user.setRequestedUserType(null);\r\n        userRepository.save(user);\r\n\r\n        UserAccount account = userAccountRepository.findByUser_Id(userId)\r\n                .orElseThrow(() -> new RuntimeException(\"User account not found\"));\r\n        account.setStatus(\"ACTIVE\");\r\n        userAccountRepository.save(account);\r\n\r\n        return ResponseEntity.ok(\"User type updated successfully to \" + newType);\r\n    }\r\n\r\n    @PutMapping(\"/reject-user-type/{userId}\")\r\n    @PreAuthorize(\"hasRole('ADMIN')\")\r\n    public ResponseEntity<String> rejectUserTypeChange(\r\n            @PathVariable Integer userId,\r\n            @RequestParam String reason\r\n    ) {\r\n        User user = userRepository.findById(userId)\r\n                .orElseThrow(() -> new RuntimeException(\"User not found\"));\r\n\r\n        if (user.getRequestedUserType() == null) {\r\n            return ResponseEntity.badRequest().body(\"No pending type change request\");\r\n        }\r\n\r\n        user.setRequestedUserType(null);\r\n        userRepository.save(user);\r\n\r\n        UserAccount account = userAccountRepository.findByUser_Id(userId)\r\n                .orElseThrow(() -> new RuntimeException(\"User account not found\"));\r\n        account.setStatus(\"ACTIVE\");\r\n        userAccountRepository.save(account);\r\n\r\n        return ResponseEntity.ok(\"User type change request rejected\");\r\n    }\r\n\r\n    // Admin Registration & Authentication\r\n    @PostMapping(\"/register\")\r\n    @PreAuthorize(\"hasRole('ADMIN')\")\r\n    public ResponseEntity<?> register(@RequestBody AdminRegistrationDTO registrationDTO) {\r\n        try {\r\n            Admin admin = adminService.register(registrationDTO);\r\n            return ResponseEntity.ok(admin);\r\n        } catch (RuntimeException e) {\r\n            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(e.getMessage());\r\n        }\r\n    }\r\n\r\n    @PostMapping(\"/login\")\r\n    public ResponseEntity<?> login(@RequestBody Map<String, String> payload) {\r\n        String username = payload.get(\"username\");\r\n        String password = payload.get(\"password\");\r\n\r\n        try {\r\n            String token = adminService.loginAndGetToken(username, password);\r\n            return ResponseEntity.ok(Map.of(\"token\", token));\r\n        } catch (AuthenticationException e) {\r\n            return ResponseEntity.status(HttpStatus.UNAUTHORIZED)\r\n                    .body(Map.of(\"message\", \"Invalid credentials\"));\r\n        }\r\n    }\r\n\r\n    @PutMapping(\"/tiers/{id}\")\r\n    @PreAuthorize(\"hasRole('ADMIN')\")\r\n    public ResponseEntity<MembershipTier> updateTier(\r\n            @PathVariable Integer id,\r\n            @RequestBody MembershipTier tier) {\r\n        tier.setId(id); // Ensure ID matches path\r\n        return ResponseEntity.ok(tierService.createOrUpdateTier(tier));\r\n    }\r\n\r\n    // Tier Management Endpoints\r\n    @PostMapping(\"/tiers\")\r\n    @PreAuthorize(\"hasRole('ADMIN')\")\r\n    public ResponseEntity<MembershipTier> createTier(@RequestBody TierDto tierDto) {\r\n        return ResponseEntity.ok(tierService.createTier(tierDto));\r\n    }\r\n\r\n    @DeleteMapping(\"/tiers/{id}\")\r\n    @PreAuthorize(\"hasRole('ADMIN')\")\r\n    public ResponseEntity<Void> deleteTier(@PathVariable Integer id) {\r\n        tierService.deleteTier(id);\r\n        return ResponseEntity.noContent().build();\r\n    }\r\n\r\n    @GetMapping(\"/tiers\")\r\n    @PreAuthorize(\"hasRole('ADMIN')\")\r\n    public ResponseEntity<List<TierDto>> getAllTiers() {\r\n        return ResponseEntity.ok(tierService.getAllTiers().stream()\r\n                .map(tier -> new TierDto(\r\n                        tier.getId(),\r\n                        tier.getTierName(),\r\n                        tier.getBenefits(),\r\n                        tier.getMinPoints(),\r\n                        tier.getMaxPoints(),\r\n                        tier.isActive()\r\n                ))\r\n                .collect(Collectors.toList()));\r\n    }\r\n\r\n    @GetMapping(\"/vouchers\")\r\n    @PreAuthorize(\"hasRole('ADMIN')\")\r\n    public ResponseEntity<List<VoucherDto>> getAllVouchers() {\r\n        return ResponseEntity.ok(tierService.getAllVouchers().stream()\r\n                .map(voucher -> new VoucherDto(\r\n                        voucher.getId(),\r\n                        voucher.getCode(),\r\n                        voucher.getDiscountValue(),\r\n                        voucher.getDiscountType(),\r\n                        voucher.getRequestPoints(),\r\n                        voucher.getTier() != null ? voucher.getTier().getTierName() : null,\r\n                        voucher.getExpiryDate()\r\n                ))\r\n                .collect(Collectors.toList()));\r\n    }\r\n\r\n    @PostMapping(\"/{tierName}/vouchers\")\r\n    @PreAuthorize(\"hasRole('ADMIN')\")\r\n    public ResponseEntity<MembershipTier> addVoucher(\r\n            @PathVariable String tierName,\r\n            @RequestBody VoucherDto voucherDto) {\r\n        return ResponseEntity.ok(tierService.addVoucherToTier(tierName, voucherDto));\r\n    }\r\n\r\n    @PostMapping(\"/vouchers\")\r\n    @PreAuthorize(\"hasRole('ADMIN')\")\r\n    public ResponseEntity<Voucher> addGeneralVoucher(@RequestBody VoucherDto voucherDto) {\r\n        return ResponseEntity.ok(tierService.addGeneralVoucher(voucherDto));\r\n    }\r\n\r\n    @PutMapping(\"/vouchers/{id}\")\r\n    @PreAuthorize(\"hasRole('ADMIN')\")\r\n    public ResponseEntity<Voucher> updateVoucher(\r\n            @PathVariable Integer id,\r\n            @RequestBody VoucherDto voucherDto) {\r\n        return ResponseEntity.ok(tierService.updateVoucher(id, voucherDto));\r\n    }\r\n\r\n    @DeleteMapping(\"/vouchers/{id}\")\r\n    @PreAuthorize(\"hasRole('ADMIN')\")\r\n    public ResponseEntity<Void> deleteVoucher(@PathVariable Integer id) {\r\n        tierService.deleteVoucher(id);\r\n        return ResponseEntity.noContent().build();\r\n    }\r\n\r\n    @PutMapping(\"/tiers/{id}/status\")\r\n    @PreAuthorize(\"hasRole('ADMIN')\")\r\n    public ResponseEntity<Void> toggleTierStatus(\r\n            @PathVariable Integer id,\r\n            @RequestParam boolean active) {\r\n        tierService.toggleTierStatus(id, active);\r\n        return ResponseEntity.ok().build();\r\n    }\r\n\r\n    @GetMapping(\"/cancellation-requests/pending\")\r\n    @PreAuthorize(\"hasAuthority('ROLE_ADMIN')\")\r\n    public ResponseEntity<List<PendingCancellationRequestDto>> getPendingCancellations() {\r\n        return ResponseEntity.ok(bookingService.getPendingCancellationRequests());\r\n    }\r\n\r\n    @PutMapping(\"/cancellation-requests/{requestId}/approve\")\r\n    @PreAuthorize(\"hasAuthority('ROLE_ADMIN')\")\r\n    public ResponseEntity<CancellationResponse> approveCancellation(\r\n            @PathVariable Integer requestId,\r\n            @RequestBody(required = false) java.util.Map<String, Object> body) {\r\n        String adminRemark = body != null && body.get(\"adminRemark\") != null ? body.get(\"adminRemark\").toString() : null;\r\n        return ResponseEntity.ok(bookingService.processCancellation(requestId, true, adminRemark));\r\n    }\r\n\r\n    @PutMapping(\"/cancellation-requests/{requestId}/reject\")\r\n    @PreAuthorize(\"hasAuthority('ROLE_ADMIN')\")\r\n    public ResponseEntity<CancellationResponse> rejectCancellation(\r\n            @PathVariable Integer requestId,\r\n            @RequestBody(required = false) java.util.Map<String, Object> body) {\r\n        String adminRemark = body != null && body.get(\"adminRemark\") != null ? body.get(\"adminRemark\").toString() : null;\r\n        return ResponseEntity.ok(bookingService.processCancellation(requestId, false, adminRemark));\r\n    }\r\n\r\n    @GetMapping(\"/user-profile/{username}\")\r\n    public ProfileDto getUserProfile(@PathVariable String username) {\r\n        User user = userRepository.findByUserAccount_Username(username)\r\n                .orElseThrow(() -> new RuntimeException(\"User not found\"));\r\n        return convertToProfileDto(user);\r\n    }\r\n\r\n    @GetMapping(\"/profile\")\r\n    @PreAuthorize(\"hasRole('ADMIN')\")\r\n    public ResponseEntity<ProfileDto> getAdminProfile() {\r\n        try {\r\n            String username = SecurityContextHolder.getContext().getAuthentication().getName();\r\n            User user = userRepository.findByUserAccount_Username(username)\r\n                    .orElseThrow(() -> new RuntimeException(\"Admin not found\"));\r\n            return ResponseEntity.ok(convertToProfileDto(user));\r\n        } catch (Exception e) {\r\n            return ResponseEntity.badRequest().body(null);\r\n        }\r\n    }\r\n\r\n    @PutMapping(\"/profile\")\r\n    @PreAuthorize(\"hasRole('ADMIN')\")\r\n    public ResponseEntity<ProfileDto> updateAdminProfile(@RequestBody ProfileDto profileDto) {\r\n        try {\r\n            String username = SecurityContextHolder.getContext().getAuthentication().getName();\r\n            User user = userRepository.findByUserAccount_Username(username)\r\n                    .orElseThrow(() -> new RuntimeException(\"Admin not found\"));\r\n            \r\n            // Update user information\r\n            user.setName(profileDto.getName());\r\n            user.setEmail(profileDto.getEmail());\r\n            user.setPhone(profileDto.getPhone());\r\n            userRepository.save(user);\r\n            \r\n            return ResponseEntity.ok(convertToProfileDto(user));\r\n        } catch (Exception e) {\r\n            return ResponseEntity.badRequest().body(null);\r\n        }\r\n    }\r\n\r\n    @PostMapping(\"/change-password\")\r\n    @PreAuthorize(\"hasRole('ADMIN')\")\r\n    public ResponseEntity<?> changePassword(@RequestBody Map<String, String> request) {\r\n        try {\r\n            String username = SecurityContextHolder.getContext().getAuthentication().getName();\r\n            String currentPassword = request.get(\"currentPassword\");\r\n            String newPassword = request.get(\"newPassword\");\r\n            \r\n            // 验证输入\r\n            if (currentPassword == null || newPassword == null) {\r\n                return ResponseEntity.badRequest().body(\"Current password and new password are required\");\r\n            }\r\n            \r\n            // 密码复杂度验证\r\n            String passwordValidation = validatePassword(newPassword);\r\n            if (passwordValidation != null) {\r\n                return ResponseEntity.badRequest().body(\"Password requirements not met: \" + passwordValidation);\r\n            }\r\n            \r\n            UserAccount account = userAccountRepository.findByUsername(username)\r\n                    .orElseThrow(() -> new RuntimeException(\"Admin account not found\"));\r\n            \r\n            // Verify current password\r\n            if (!account.getPassword().equals(currentPassword)) {\r\n                return ResponseEntity.badRequest().body(\"Current password is incorrect\");\r\n            }\r\n            \r\n            // Update password\r\n            account.setPassword(newPassword);\r\n            account.setPasswordChangedAt(java.time.LocalDateTime.now());\r\n            userAccountRepository.save(account);\r\n            \r\n            return ResponseEntity.ok().build();\r\n        } catch (Exception e) {\r\n            return ResponseEntity.badRequest().body(\"Failed to change password: \" + e.getMessage());\r\n        }\r\n    }\r\n\r\n    private String validatePassword(String password) {\r\n        if (password == null || password.length() < 8) {\r\n            return \"Minimum 8 characters required\";\r\n        }\r\n        \r\n        if (!password.matches(\".*[A-Z].*\")) {\r\n            return \"Requires uppercase letter\";\r\n        }\r\n        \r\n        if (!password.matches(\".*[a-z].*\")) {\r\n            return \"Requires lowercase letter\";\r\n        }\r\n        \r\n        if (!password.matches(\".*[0-9].*\")) {\r\n            return \"Requires number\";\r\n        }\r\n        \r\n        if (!password.matches(\".*[!@#$%^&*(),.?\\\":{}|<>].*\")) {\r\n            return \"Requires special character\";\r\n        }\r\n        \r\n        return null;\r\n    }\r\n\r\n    private ProfileDto convertToProfileDto(User user) {\r\n        ProfileDto dto = new ProfileDto();\r\n        dto.setId(user.getId());\r\n        dto.setName(user.getName());\r\n        dto.setEmail(user.getEmail());\r\n        dto.setGender(user.getGender());\r\n        dto.setPhone(user.getPhone());\r\n        dto.setDob(user.getDob());\r\n        dto.setUserType(user.getUserType());\r\n        dto.setProfileImage(user.getProfileImage()); // Use correct field name\r\n        // Add more fields as needed\r\n        return dto;\r\n    }\r\n\r\n   /* @GetMapping(\"/pending-verifications\")\r\n    @PreAuthorize(\"hasRole('ADMIN')\")\r\n    public ResponseEntity<List<VerificationDto>> getPendingVerifications() {\r\n        List<UserAccount> accounts = userAccountRepository.findByVerificationStatus(\"PENDING\");\r\n\r\n        List<VerificationDto> response = accounts.stream()\r\n                .filter(account -> \"EventOrganizer\".equals(account.getUser().getRequestedUserType()))\r\n                .map(account -> new VerificationDto(\r\n                        account.getUser().getId(),\r\n                        account.getUsername(),\r\n                        account.getUser().getName(),\r\n                        account.getVerificationDocuments(),\r\n                        account.getUser().getRequestedUserType()\r\n                ))\r\n                .collect(Collectors.toList());\r\n\r\n        return ResponseEntity.ok(response);\r\n    }\r\n\r\n    // Approve/reject event organizer\r\n    @PatchMapping(\"/verify-organizer/{userId}\")\r\n    @PreAuthorize(\"hasRole('ADMIN')\")\r\n    public ResponseEntity<?> verifyEventOrganizer(\r\n            @PathVariable Integer userId,\r\n            @RequestParam String status) {\r\n\r\n        UserAccount account = userAccountRepository.findByUser_Id(userId)\r\n                .orElseThrow(() -> new RuntimeException(\"User account not found\"));\r\n\r\n        if (!\"PENDING\".equals(account.getVerificationStatus())) {\r\n            return ResponseEntity.badRequest().body(\"No pending verification\");\r\n        }\r\n\r\n        if (\"APPROVED\".equals(status)) {\r\n            // Update user type and status\r\n            User user = account.getUser();\r\n            user.setUserType(\"EventOrganizer\");\r\n            user.setRequestedUserType(null);\r\n\r\n            account.setVerificationStatus(\"APPROVED\");\r\n            account.setStatus(\"ACTIVE\");\r\n\r\n            userRepository.save(user);\r\n        } else if (\"REJECTED\".equals(status)) {\r\n            account.setVerificationStatus(\"REJECTED\");\r\n            // Keep status as PENDING for resubmission\r\n        }\r\n\r\n        userAccountRepository.save(account);\r\n        return ResponseEntity.ok(\"Verification status updated\");\r\n    }*/\r\n\r\n    @PostMapping(\"/debug/recalculate-tier\")\r\n    @PreAuthorize(\"hasRole('ADMIN')\")\r\n    public ResponseEntity<String> recalculateTier() {\r\n        String username = SecurityContextHolder.getContext().getAuthentication().getName();\r\n        UserAccount account = userAccountRepository.findByUsername(username)\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"User account not found\"));\r\n\r\n        Member member = memberRepository.findByUserId(account.getUser().getId());\r\n        if (member == null) {\r\n            throw new ResourceNotFoundException(\"Member not found\");\r\n        }\r\n\r\n        // Get current tier before recalculation\r\n        String oldTierName = member.getTier() != null ? member.getTier().getTierName() : \"NULL\";\r\n        \r\n        // Trigger tier recalculation\r\n        tierService.recalculateMemberTier(member);\r\n        \r\n        // Refresh member data\r\n        member = memberRepository.findByUserId(account.getUser().getId());\r\n        String newTierName = member.getTier() != null ? member.getTier().getTierName() : \"NULL\";\r\n        \r\n        return ResponseEntity.ok(\"Tier recalculated: \" + oldTierName + \" -> \" + newTierName);\r\n    }\r\n\r\n    @PostMapping(\"/tier/upgrade-all\")\r\n    @PreAuthorize(\"hasRole('ADMIN')\")\r\n    public ResponseEntity<String> upgradeAllMemberTiers() {\r\n        tierAutoUpgradeService.manualUpgradeCheck();\r\n        return ResponseEntity.ok(\"Manual tier upgrade check completed. Check logs for details.\");\r\n    }\r\n\r\n    @PostMapping(\"/tier/upgrade-member/{memberId}\")\r\n    @PreAuthorize(\"hasRole('ADMIN')\")\r\n    public ResponseEntity<String> upgradeSpecificMember(@PathVariable Integer memberId) {\r\n        try {\r\n            tierAutoUpgradeService.upgradeSpecificMember(memberId);\r\n            return ResponseEntity.ok(\"Member tier upgraded successfully\");\r\n        } catch (Exception e) {\r\n            return ResponseEntity.badRequest().body(\"Failed to upgrade member tier: \" + e.getMessage());\r\n        }\r\n    }\r\n\r\n    // Avatar upload and management\r\n    @PostMapping(value = \"/avatar\", consumes = MediaType.MULTIPART_FORM_DATA_VALUE)\r\n    @PreAuthorize(\"hasRole('ADMIN')\")\r\n    public ResponseEntity<?> uploadAvatar(@RequestParam(\"avatar\") MultipartFile file) {\r\n        try {\r\n            String username = SecurityContextHolder.getContext().getAuthentication().getName();\r\n            String filename = fileStorageService.store(file);\r\n            \r\n            // Update admin's profile image\r\n            UserAccount account = userAccountRepository.findByUsername(username)\r\n                    .orElseThrow(() -> new RuntimeException(\"Admin account not found\"));\r\n            account.setProfileImage(filename);\r\n            userAccountRepository.save(account);\r\n\r\n            return ResponseEntity.ok().body(filename);\r\n        } catch (Exception e) {\r\n            return ResponseEntity.badRequest().body(e.getMessage());\r\n        }\r\n    }\r\n\r\n    @DeleteMapping(\"/avatar\")\r\n    @PreAuthorize(\"hasRole('ADMIN')\")\r\n    public ResponseEntity<?> removeAvatar() {\r\n        try {\r\n            String username = SecurityContextHolder.getContext().getAuthentication().getName();\r\n            UserAccount account = userAccountRepository.findByUsername(username)\r\n                    .orElseThrow(() -> new RuntimeException(\"Admin account not found\"));\r\n            \r\n            // Delete old file if exists\r\n            if (account.getProfileImage() != null) {\r\n                fileStorageService.delete(account.getProfileImage());\r\n            }\r\n            \r\n            account.setProfileImage(null);\r\n            userAccountRepository.save(account);\r\n            \r\n            return ResponseEntity.ok().build();\r\n        } catch (Exception e) {\r\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\r\n                    .body(\"Failed to remove avatar: \" + e.getMessage());\r\n        }\r\n    }\r\n\r\n    @DeleteMapping(\"/delete-account\")\r\n    @PreAuthorize(\"hasRole('ADMIN')\")\r\n    public ResponseEntity<?> deleteAccount() {\r\n        try {\r\n            String username = SecurityContextHolder.getContext().getAuthentication().getName();\r\n            \r\n            // Find admin account\r\n            Admin admin = adminRepository.findByUser_UserAccount_Username(username)\r\n                    .orElseThrow(() -> new RuntimeException(\"Admin not found\"));\r\n            \r\n            User user = admin.getUser();\r\n            UserAccount userAccount = user.getUserAccount();\r\n            \r\n            // Delete profile image if exists\r\n            if (userAccount.getProfileImage() != null) {\r\n                fileStorageService.delete(userAccount.getProfileImage());\r\n            }\r\n            \r\n            // Delete admin first (due to foreign key constraints)\r\n            adminRepository.delete(admin);\r\n            \r\n            // Delete user account\r\n            userAccountRepository.delete(userAccount);\r\n            \r\n            // Delete user\r\n            userRepository.delete(user);\r\n            \r\n            return ResponseEntity.ok().body(\"Account deleted successfully\");\r\n        } catch (Exception e) {\r\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\r\n                    .body(\"Failed to delete account: \" + e.getMessage());\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/AdminController.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/AdminController.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/AdminController.java	(revision 97abd609899a67b781b8ace8e91358a782fc5acd)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/AdminController.java	(date 1753746483909)
@@ -25,6 +25,10 @@
 import com.pickleball_backend.pickleball.exception.ResourceNotFoundException;
 import com.pickleball_backend.pickleball.service.TierAutoUpgradeService;
 import com.pickleball_backend.pickleball.repository.MemberRepository;
+import com.pickleball_backend.pickleball.service.EscrowAccountService;
+import com.pickleball_backend.pickleball.repository.ClassSessionRepository;
+import com.pickleball_backend.pickleball.repository.PaymentRepository;
+import java.util.HashMap;
 
 @RestController
 @RequestMapping("/api/admin")
@@ -43,6 +47,9 @@
     private final MemberRepository memberRepository;
     private final TierAutoUpgradeService tierAutoUpgradeService;
     private final FileStorageService fileStorageService;
+    private final EscrowAccountService escrowAccountService;
+    private final ClassSessionRepository classSessionRepository;
+    private final PaymentRepository paymentRepository;
 
     // User Type Change Management
     @GetMapping("/pending-type-changes")
@@ -282,13 +289,13 @@
             String username = SecurityContextHolder.getContext().getAuthentication().getName();
             User user = userRepository.findByUserAccount_Username(username)
                     .orElseThrow(() -> new RuntimeException("Admin not found"));
-            
+
             // Update user information
             user.setName(profileDto.getName());
             user.setEmail(profileDto.getEmail());
             user.setPhone(profileDto.getPhone());
             userRepository.save(user);
-            
+
             return ResponseEntity.ok(convertToProfileDto(user));
         } catch (Exception e) {
             return ResponseEntity.badRequest().body(null);
@@ -302,31 +309,31 @@
             String username = SecurityContextHolder.getContext().getAuthentication().getName();
             String currentPassword = request.get("currentPassword");
             String newPassword = request.get("newPassword");
-            
+
             // 验证输入
             if (currentPassword == null || newPassword == null) {
                 return ResponseEntity.badRequest().body("Current password and new password are required");
             }
-            
+
             // 密码复杂度验证
             String passwordValidation = validatePassword(newPassword);
             if (passwordValidation != null) {
                 return ResponseEntity.badRequest().body("Password requirements not met: " + passwordValidation);
             }
-            
+
             UserAccount account = userAccountRepository.findByUsername(username)
                     .orElseThrow(() -> new RuntimeException("Admin account not found"));
-            
+
             // Verify current password
             if (!account.getPassword().equals(currentPassword)) {
                 return ResponseEntity.badRequest().body("Current password is incorrect");
             }
-            
+
             // Update password
             account.setPassword(newPassword);
             account.setPasswordChangedAt(java.time.LocalDateTime.now());
             userAccountRepository.save(account);
-            
+
             return ResponseEntity.ok().build();
         } catch (Exception e) {
             return ResponseEntity.badRequest().body("Failed to change password: " + e.getMessage());
@@ -337,23 +344,23 @@
         if (password == null || password.length() < 8) {
             return "Minimum 8 characters required";
         }
-        
+
         if (!password.matches(".*[A-Z].*")) {
             return "Requires uppercase letter";
         }
-        
+
         if (!password.matches(".*[a-z].*")) {
             return "Requires lowercase letter";
         }
-        
+
         if (!password.matches(".*[0-9].*")) {
             return "Requires number";
         }
-        
+
         if (!password.matches(".*[!@#$%^&*(),.?\":{}|<>].*")) {
             return "Requires special character";
         }
-        
+
         return null;
     }
 
@@ -437,14 +444,14 @@
 
         // Get current tier before recalculation
         String oldTierName = member.getTier() != null ? member.getTier().getTierName() : "NULL";
-        
+
         // Trigger tier recalculation
         tierService.recalculateMemberTier(member);
-        
+
         // Refresh member data
         member = memberRepository.findByUserId(account.getUser().getId());
         String newTierName = member.getTier() != null ? member.getTier().getTierName() : "NULL";
-        
+
         return ResponseEntity.ok("Tier recalculated: " + oldTierName + " -> " + newTierName);
     }
 
@@ -473,7 +480,7 @@
         try {
             String username = SecurityContextHolder.getContext().getAuthentication().getName();
             String filename = fileStorageService.store(file);
-            
+
             // Update admin's profile image
             UserAccount account = userAccountRepository.findByUsername(username)
                     .orElseThrow(() -> new RuntimeException("Admin account not found"));
@@ -493,15 +500,15 @@
             String username = SecurityContextHolder.getContext().getAuthentication().getName();
             UserAccount account = userAccountRepository.findByUsername(username)
                     .orElseThrow(() -> new RuntimeException("Admin account not found"));
-            
+
             // Delete old file if exists
             if (account.getProfileImage() != null) {
                 fileStorageService.delete(account.getProfileImage());
             }
-            
+
             account.setProfileImage(null);
             userAccountRepository.save(account);
-            
+
             return ResponseEntity.ok().build();
         } catch (Exception e) {
             return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
@@ -514,32 +521,95 @@
     public ResponseEntity<?> deleteAccount() {
         try {
             String username = SecurityContextHolder.getContext().getAuthentication().getName();
-            
+
             // Find admin account
             Admin admin = adminRepository.findByUser_UserAccount_Username(username)
                     .orElseThrow(() -> new RuntimeException("Admin not found"));
-            
+
             User user = admin.getUser();
             UserAccount userAccount = user.getUserAccount();
-            
+
             // Delete profile image if exists
             if (userAccount.getProfileImage() != null) {
                 fileStorageService.delete(userAccount.getProfileImage());
             }
-            
+
             // Delete admin first (due to foreign key constraints)
             adminRepository.delete(admin);
-            
+
             // Delete user account
             userAccountRepository.delete(userAccount);
-            
+
             // Delete user
             userRepository.delete(user);
-            
+
             return ResponseEntity.ok().body("Account deleted successfully");
         } catch (Exception e) {
             return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                     .body("Failed to delete account: " + e.getMessage());
         }
     }
+
+    // 新增：測試收入分配機制
+    @PostMapping("/test-revenue-distribution")
+    @PreAuthorize("hasAuthority('ROLE_ADMIN')")
+    public ResponseEntity<?> testRevenueDistribution() {
+        try {
+            Map<String, Object> result = new HashMap<>();
+            
+            // 1. 檢查託管餘額
+            double platformEscrowBalance = escrowAccountService.getPlatformEscrowBalance();
+            result.put("platformEscrowBalance", platformEscrowBalance);
+            
+            // 2. 檢查平台收入
+            double platformRevenue = escrowAccountService.getPlatformRevenue();
+            result.put("platformRevenue", platformRevenue);
+            
+            // 3. 檢查教練收入
+            double coachRevenue = escrowAccountService.getCoachRevenue();
+            result.put("coachRevenue", coachRevenue);
+            
+            // 4. 檢查所有支付記錄
+            List<Payment> allPayments = paymentRepository.findAll();
+            Map<String, Long> paymentTypeCounts = allPayments.stream()
+                .collect(Collectors.groupingBy(Payment::getPaymentType, Collectors.counting()));
+            result.put("paymentTypeCounts", paymentTypeCounts);
+            
+            // 5. 檢查COMPLETED課程
+            List<ClassSession> completedSessions = classSessionRepository.findByStatus("COMPLETED");
+            result.put("completedSessionsCount", completedSessions.size());
+            result.put("completedSessions", completedSessions.stream()
+                .map(s -> Map.of(
+                    "id", s.getId(),
+                    "title", s.getTitle(),
+                    "startTime", s.getStartTime(),
+                    "price", s.getPrice(),
+                    "currentParticipants", s.getCurrentParticipants(),
+                    "note", s.getNote()
+                ))
+                .collect(Collectors.toList()));
+            
+            // 6. 檢查託管支付記錄
+            List<Payment> escrowedPayments = paymentRepository.findByPaymentTypeAndStatus("CLASS_SESSION_ESCROW", "ESCROWED");
+            result.put("escrowedPaymentsCount", escrowedPayments.size());
+            result.put("escrowedPayments", escrowedPayments.stream()
+                .map(p -> Map.of(
+                    "id", p.getId(),
+                    "amount", p.getAmount(),
+                    "transactionId", p.getTransactionId(),
+                    "paymentDate", p.getPaymentDate()
+                ))
+                .collect(Collectors.toList()));
+            
+            // 7. 檢查結算記錄
+            List<Payment> coachIncomePayments = paymentRepository.findByPaymentTypeAndStatus("COACH_INCOME", "COMPLETED");
+            List<Payment> platformFeePayments = paymentRepository.findByPaymentTypeAndStatus("PLATFORM_FEE", "COMPLETED");
+            result.put("coachIncomePaymentsCount", coachIncomePayments.size());
+            result.put("platformFeePaymentsCount", platformFeePayments.size());
+            
+            return ResponseEntity.ok(result);
+        } catch (Exception e) {
+            return ResponseEntity.internalServerError().body("Error testing revenue distribution: " + e.getMessage());
+        }
+    }
 }
\ No newline at end of file
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/FriendlyMatch.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.entity;\r\n\r\nimport jakarta.persistence.*;\r\nimport lombok.Data;\r\nimport java.time.LocalDateTime;\r\nimport java.util.List;\r\n\r\n@Entity\r\n@Data\r\n@Table(name = \"friendlymatch\")\r\npublic class FriendlyMatch {\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Integer id;\r\n\r\n    @Column(name = \"max_players\")\r\n    private int maxPlayers;\r\n\r\n    @Column(name = \"current_players\")\r\n    private int currentPlayers = 1; // Organizer is first player\r\n\r\n    private String skillLevel;\r\n\r\n    @Column(columnDefinition = \"TEXT\")\r\n    private String matchRules;\r\n\r\n    private String status = \"OPEN\"; // OPEN, FULL, CANCELLED\r\n\r\n    @Column(name = \"start_time\")\r\n    private LocalDateTime startTime;\r\n\r\n    private String location;\r\n\r\n    @ManyToOne\r\n    @JoinColumn(name = \"organizer_id\")\r\n    private Member organizer;\r\n\r\n    @OneToMany(mappedBy = \"friendlyMatch\", cascade = CascadeType.ALL)\r\n    private List<JoinRequest> joinRequests;\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/FriendlyMatch.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/FriendlyMatch.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/FriendlyMatch.java	(revision 97abd609899a67b781b8ace8e91358a782fc5acd)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/FriendlyMatch.java	(date 1753722506223)
@@ -13,8 +13,8 @@
     @GeneratedValue(strategy = GenerationType.IDENTITY)
     private Integer id;
 
-    @Column(name = "max_players")
-    private int maxPlayers;
+    @Column(name = "max_players", nullable = false)
+    private Integer maxPlayers;
 
     @Column(name = "current_players")
     private int currentPlayers = 1; // Organizer is first player
@@ -26,15 +26,47 @@
 
     private String status = "OPEN"; // OPEN, FULL, CANCELLED
 
+    // 付款狀態：PENDING, PAID, CANCELLED
+    @Column(name = "payment_status")
+    private String paymentStatus = "PENDING";
+
     @Column(name = "start_time")
     private LocalDateTime startTime;
 
+    @Column(name = "end_time")
+    private LocalDateTime endTime;
+
+    @Column(name = "duration_hours")
+    private Integer durationHours;
+
+    @Column(name = "price")
+    private Double price;
+
     private String location;
 
+    @Column(name = "court_id")
+    private Integer courtId;
+
     @ManyToOne
     @JoinColumn(name = "organizer_id")
     private Member organizer;
 
+    @ManyToOne(fetch = FetchType.LAZY)
+    @JoinColumn(name = "booking_id")
+    private Booking booking; // 對應已預約的場地
+
+    // 是否為邀請型（由 booking 產生的 invitation）
+    @Column(name = "is_invitation")
+    private boolean isInvitation = false;
+
+    // 邀請型態（可擴充：FRIENDLY_MATCH_INVITE, TOURNAMENT_INVITE...）
+    @Column(name = "invitation_type")
+    private String invitationType = "FRIENDLY_MATCH_INVITE";
+
     @OneToMany(mappedBy = "friendlyMatch", cascade = CascadeType.ALL)
     private List<JoinRequest> joinRequests;
+
+    public void setIsInvitation(boolean isInvitation) {
+        this.isInvitation = isInvitation;
+    }
 }
\ No newline at end of file
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/security/JwtService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.security;\r\n\r\nimport io.jsonwebtoken.*;\r\nimport io.jsonwebtoken.io.Decoders;\r\nimport io.jsonwebtoken.security.Keys;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport javax.crypto.SecretKey;\r\nimport java.util.Date;\r\n\r\n@Service\r\npublic class JwtService {\r\n    private final String SECRET = \"picSecKey123picSecKey123picSecKey123\";\r\n    private final SecretKey key = Keys.hmacShaKeyFor(Decoders.BASE64.decode(java.util.Base64.getEncoder().encodeToString(SECRET.getBytes())));\r\n\r\n    public String generateToken(String subject, String role) {\r\n        String cleanedRole = role.toUpperCase().replace(\"ROLE_\", \"\");\r\n        return Jwts.builder()\r\n                .subject(subject)\r\n                .claim(\"role\", cleanedRole)\r\n                .issuedAt(new Date())\r\n                .expiration(new Date(System.currentTimeMillis() + 1000 * 60 * 60 * 24))\r\n                .signWith(key, Jwts.SIG.HS256)\r\n                .compact();\r\n    }\r\n\r\n    public String extractUsername(String token) {\r\n        return Jwts.parser().verifyWith(key).build().parseSignedClaims(token).getPayload().getSubject();\r\n    }\r\n\r\n    public boolean isValid(String token) {\r\n        try {\r\n            extractUsername(token);\r\n            return true;\r\n        } catch (Exception e) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public String extractRole(String token) {\r\n        Claims claims = Jwts.parser()\r\n                .verifyWith(key)\r\n                .build()\r\n                .parseSignedClaims(token)\r\n                .getPayload();\r\n\r\n        String role = claims.get(\"role\", String.class);\r\n        return role != null ? role.toUpperCase() : null;\r\n    }\r\n\r\n    public Claims extractAllClaims(String token) {\r\n        return Jwts.parser()\r\n                .verifyWith(key)\r\n                .build()\r\n                .parseSignedClaims(token)\r\n                .getPayload();\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/security/JwtService.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/security/JwtService.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/security/JwtService.java	(revision 97abd609899a67b781b8ace8e91358a782fc5acd)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/security/JwtService.java	(date 1753722506233)
@@ -24,6 +24,18 @@
                 .compact();
     }
 
+    public String generateTokenWithUserId(String subject, String role, Integer userId) {
+        String cleanedRole = role.toUpperCase().replace("ROLE_", "");
+        return Jwts.builder()
+                .subject(subject)
+                .claim("role", cleanedRole)
+                .claim("userId", userId)
+                .issuedAt(new Date())
+                .expiration(new Date(System.currentTimeMillis() + 1000 * 60 * 60 * 24))
+                .signWith(key, Jwts.SIG.HS256)
+                .compact();
+    }
+
     public String extractUsername(String token) {
         return Jwts.parser().verifyWith(key).build().parseSignedClaims(token).getPayload().getSubject();
     }
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/security/JwtAuthFilter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.security;\r\n\r\nimport jakarta.servlet.*;\r\nimport jakarta.servlet.http.*;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.springframework.security.authentication.*;\r\nimport org.springframework.security.core.Authentication;\r\nimport org.springframework.security.core.GrantedAuthority;\r\nimport org.springframework.security.core.authority.SimpleGrantedAuthority;\r\nimport org.springframework.security.core.context.SecurityContextHolder;\r\nimport org.springframework.security.web.authentication.WebAuthenticationDetailsSource;\r\nimport org.springframework.stereotype.Component;\r\nimport org.springframework.web.filter.OncePerRequestFilter;\r\n\r\nimport java.io.IOException;\r\nimport java.util.Collections;\r\nimport java.util.List;\r\n\r\n@Component\r\n@RequiredArgsConstructor\r\npublic class JwtAuthFilter extends OncePerRequestFilter {\r\n\r\n    private final JwtService jwtService;\r\n\r\n    @Override\r\n    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)\r\n            throws ServletException, IOException {\r\n\r\n        String authHeader = request.getHeader(\"Authorization\");\r\n        if (authHeader == null || !authHeader.startsWith(\"Bearer \")) {\r\n            filterChain.doFilter(request, response);\r\n            return;\r\n        }\r\n\r\n        String jwt = authHeader.substring(7);\r\n\r\n        if (!jwtService.isValid(jwt)) {\r\n            filterChain.doFilter(request, response);\r\n            return;\r\n        }\r\n\r\n        String username = jwtService.extractUsername(jwt);\r\n        String role = jwtService.extractRole(jwt);\r\n\r\n        if (username != null && role != null && SecurityContextHolder.getContext().getAuthentication() == null) {\r\n            // 防止重复前缀\r\n            String authority = role.startsWith(\"ROLE_\") ? role : \"ROLE_\" + role;\r\n\r\n            List<GrantedAuthority> authorities = Collections.singletonList(\r\n                    new SimpleGrantedAuthority(authority)\r\n            );\r\n\r\n            UsernamePasswordAuthenticationToken authToken =\r\n                    new UsernamePasswordAuthenticationToken(username, null, authorities);\r\n\r\n            authToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));\r\n            SecurityContextHolder.getContext().setAuthentication(authToken);\r\n        }\r\n\r\n        filterChain.doFilter(request, response);\r\n    }\r\n\r\n    public Authentication getAuthentication(String token) {\r\n        String username = jwtService.extractUsername(token);\r\n        String role = jwtService.extractRole(token);\r\n\r\n        List<GrantedAuthority> authorities = Collections.singletonList(\r\n                new SimpleGrantedAuthority(role)\r\n        );\r\n\r\n        return new UsernamePasswordAuthenticationToken(username, null, authorities);\r\n    }\r\n\r\n    public boolean isValid(String token) {\r\n        try {\r\n            jwtService.extractUsername(token);\r\n            return true;\r\n        } catch (Exception e) {\r\n            return false;\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/security/JwtAuthFilter.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/security/JwtAuthFilter.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/security/JwtAuthFilter.java	(revision 97abd609899a67b781b8ace8e91358a782fc5acd)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/security/JwtAuthFilter.java	(date 1753722506243)
@@ -1,5 +1,7 @@
 package com.pickleball_backend.pickleball.security;
 
+import com.pickleball_backend.pickleball.entity.User;
+import com.pickleball_backend.pickleball.repository.UserRepository;
 import jakarta.servlet.*;
 import jakarta.servlet.http.*;
 import lombok.RequiredArgsConstructor;
@@ -8,6 +10,7 @@
 import org.springframework.security.core.GrantedAuthority;
 import org.springframework.security.core.authority.SimpleGrantedAuthority;
 import org.springframework.security.core.context.SecurityContextHolder;
+import org.springframework.security.core.userdetails.UsernameNotFoundException;
 import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
 import org.springframework.stereotype.Component;
 import org.springframework.web.filter.OncePerRequestFilter;
@@ -21,6 +24,8 @@
 public class JwtAuthFilter extends OncePerRequestFilter {
 
     private final JwtService jwtService;
+    private final UserRepository userRepository;
+
 
     @Override
     protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
@@ -79,4 +84,9 @@
             return false;
         }
     }
+
+    public User getCurrentUser(String username) {
+        return userRepository.findByUserAccount_Username(username)
+                .orElseThrow(() -> new UsernameNotFoundException("User not found"));
+    }
 }
\ No newline at end of file
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/VenueController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.controller;\r\n\r\nimport com.pickleball_backend.pickleball.dto.VenueDto;\r\nimport com.pickleball_backend.pickleball.entity.Venue;\r\nimport com.pickleball_backend.pickleball.service.VenueService;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.http.HttpStatus;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.security.access.prepost.PreAuthorize;\r\nimport org.springframework.web.bind.annotation.*;\r\nimport com.pickleball_backend.pickleball.repository.VenueRepository;\r\n\r\nimport java.util.List;\r\n\r\n@RestController\r\n@RequestMapping(\"/api/admin/venues\")\r\npublic class VenueController {\r\n    @Autowired\r\n    private VenueService venueService;\r\n    \r\n    @Autowired\r\n    private VenueRepository venueRepository;\r\n\r\n    @PostMapping\r\n    @PreAuthorize(\"hasAuthority('ROLE_ADMIN')\")\r\n    public ResponseEntity<?> createVenue(@RequestBody VenueDto venueDto) {\r\n        try {\r\n            Venue venue = venueService.createVenue(venueDto);\r\n            return new ResponseEntity<>(venue, HttpStatus.CREATED);\r\n        } catch (Exception e) {\r\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(\"Error creating venue\");\r\n        }\r\n}\r\n\r\n    @PostMapping(\"/add\")\r\n    @PreAuthorize(\"hasAuthority('ROLE_ADMIN')\")\r\n    public Integer addVenue(@RequestBody VenueDto venueDto) {\r\n        Venue venue = new Venue();\r\n        venue.setName(venueDto.getName());\r\n        venue.setLocation(venueDto.getAddress());\r\n        venue.setDescription(venueDto.getDescription());\r\n        venue = venueRepository.save(venue);\r\n        return venue.getId();\r\n    }\r\n\r\n    @GetMapping\r\n    @PreAuthorize(\"hasAuthority('ROLE_ADMIN')\")\r\n    public ResponseEntity<List<Venue>> getAllVenues() {\r\n        List<Venue> venues = venueRepository.findAll();\r\n        return ResponseEntity.ok(venues);\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/VenueController.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/VenueController.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/VenueController.java	(revision 97abd609899a67b781b8ace8e91358a782fc5acd)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/VenueController.java	(date 1753722506252)
@@ -10,7 +10,18 @@
 import org.springframework.web.bind.annotation.*;
 import com.pickleball_backend.pickleball.repository.VenueRepository;
 
+import java.time.LocalDate;
+import java.time.LocalTime;
 import java.util.List;
+import com.pickleball_backend.pickleball.entity.Court;
+import com.pickleball_backend.pickleball.repository.BookingRepository;
+import com.pickleball_backend.pickleball.entity.Booking;
+import java.util.Set;
+import java.util.ArrayList;
+import java.util.stream.Collectors;
+import com.pickleball_backend.pickleball.repository.BookingSlotRepository;
+import com.pickleball_backend.pickleball.repository.EventRepository;
+import java.util.HashSet;
 
 @RestController
 @RequestMapping("/api/admin/venues")
@@ -21,6 +32,15 @@
     @Autowired
     private VenueRepository venueRepository;
 
+    @Autowired
+    private BookingRepository bookingRepository;
+
+    @Autowired
+    private BookingSlotRepository bookingSlotRepository;
+
+    @Autowired
+    private EventRepository eventRepository;
+
     @PostMapping
     @PreAuthorize("hasAuthority('ROLE_ADMIN')")
     public ResponseEntity<?> createVenue(@RequestBody VenueDto venueDto) {
@@ -49,5 +69,49 @@
         List<Venue> venues = venueRepository.findAll();
         return ResponseEntity.ok(venues);
     }
-}
+
+    @GetMapping("/bystate")
+    public ResponseEntity<List<Venue>> getVenuesByState(@RequestParam String state) {
+        List<Venue> venues = venueRepository.findByState(state);
+        return ResponseEntity.ok(venues);
+    }
 
+    @GetMapping("/check-availability")
+    public ResponseEntity<?> checkVenueAvailability(@RequestParam Integer venueId,
+                                                    @RequestParam String date,
+                                                    @RequestParam String startTime,
+                                                    @RequestParam String endTime,
+                                                    @RequestParam int peopleCount) {
+        LocalDate localDate = LocalDate.parse(date);
+        LocalTime localStartTime = LocalTime.parse(startTime);
+        LocalTime localEndTime = LocalTime.parse(endTime);
+        List<Court> availableCourts = venueService.getAvailableCourts(venueId, localDate, localStartTime, localEndTime, peopleCount);
+        int courtsNeeded = (int)Math.ceil(peopleCount / 4.0);
+        if (availableCourts.size() >= courtsNeeded) {
+            return ResponseEntity.ok(availableCourts);
+        } else {
+            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("此場地容量不足");
+        }
+    }
+
+    @GetMapping("/{venueId}/booked-dates")
+    public ResponseEntity<List<String>> getBookedDates(@PathVariable Integer venueId,
+                                                  @RequestParam(required = false) String startDate,
+                                                  @RequestParam(required = false) String endDate) {
+        LocalDate start = startDate != null ? LocalDate.parse(startDate) : LocalDate.now();
+        LocalDate end = endDate != null ? LocalDate.parse(endDate) : start.plusYears(1);
+
+        // 1. 查詢已被 booking 的日期
+        List<LocalDate> bookedDates = bookingSlotRepository.findBookedDatesByVenueIdAndDateRange(venueId, start, end);
+
+        // 2. 查詢該 venue 下所有 event 的日期
+        List<LocalDate> eventDates = eventRepository.findEventDatesByVenueIdAndDateRange(venueId, start, end);
+
+        // 3. 合併去重
+        Set<String> allDates = new HashSet<>();
+        bookedDates.forEach(d -> allDates.add(d.toString()));
+        eventDates.forEach(d -> allDates.add(d.toString()));
+
+        return ResponseEntity.ok(new ArrayList<>(allDates));
+    }
+}
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/ProfileService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.service;\r\n\r\nimport com.pickleball_backend.pickleball.dto.ProfileDto;\r\nimport com.pickleball_backend.pickleball.entity.User;\r\nimport com.pickleball_backend.pickleball.entity.UserAccount;\r\nimport com.pickleball_backend.pickleball.repository.UserAccountRepository;\r\nimport com.pickleball_backend.pickleball.repository.UserRepository;\r\nimport lombok.RequiredArgsConstructor;\r\nimport lombok.extern.slf4j.Slf4j;\r\nimport org.springframework.security.core.userdetails.UsernameNotFoundException;\r\nimport org.springframework.stereotype.Service;\r\nimport org.springframework.transaction.annotation.Transactional;\r\n\r\nimport java.util.List;\r\n\r\n@Service\r\n@RequiredArgsConstructor\r\n@Transactional\r\n@Slf4j\r\npublic class ProfileService {\r\n\r\n    private final UserAccountRepository userAccountRepository;\r\n    private final UserRepository userRepository;\r\n    private final FileStorageService fileStorageService;\r\n\r\n    public ProfileDto getProfile(String username) {\r\n        UserAccount account = userAccountRepository.findByUsername(username)\r\n                .orElseThrow(() -> new UsernameNotFoundException(\"User not found\"));\r\n\r\n        User user = account.getUser();\r\n\r\n        return ProfileDto.builder()\r\n                .username(account.getUsername())\r\n                .name(user.getName())\r\n                .email(user.getEmail())\r\n                .phone(user.getPhone())\r\n                .dob(user.getDob())\r\n                .gender(user.getGender())\r\n                .userType(user.getUserType())\r\n                .requestedUserType(user.getRequestedUserType())\r\n                .bookingsMade(user.getBookingsMade())\r\n                .bookingHours(user.getBookingHours())\r\n                .sumosJoined(user.getSumosJoined())\r\n                .amountSpent(user.getAmountSpent())\r\n                .status(account.getStatus())\r\n                .theme(account.getTheme())\r\n                .emailNotifications(account.isEmailNotifications())\r\n                .pushNotifications(account.isPushNotifications())\r\n                .profileImage(account.getProfileImage())\r\n                .build();\r\n    }\r\n\r\n    public ProfileDto updateProfile(String username, ProfileDto profileDto) {\r\n        UserAccount account = userAccountRepository.findByUsername(username)\r\n                .orElseThrow(() -> new UsernameNotFoundException(\"User not found\"));\r\n\r\n        User user = account.getUser();\r\n\r\n        // Update basic profile information\r\n        user.setName(profileDto.getName());\r\n        user.setGender(profileDto.getGender());\r\n        user.setPhone(profileDto.getPhone());\r\n        user.setDob(profileDto.getDob());\r\n\r\n        // Handle user type change request\r\n        boolean typeChangeRequested = false;\r\n        if (profileDto.getRequestedUserType() != null &&\r\n                !profileDto.getRequestedUserType().equals(user.getUserType()) &&\r\n                (\"User\".equals(profileDto.getRequestedUserType()) ||\r\n                        \"Coach\".equals(profileDto.getRequestedUserType()) ||\r\n                        \"EventOrganizer\".equals(profileDto.getRequestedUserType()))) {\r\n\r\n            user.setRequestedUserType(profileDto.getRequestedUserType());\r\n            typeChangeRequested = true;\r\n            log.info(\"User type change requested: {} -> {}\",\r\n                    user.getUserType(), profileDto.getRequestedUserType());\r\n        }\r\n\r\n        // Update username if changed\r\n        if (profileDto.getUsername() != null &&\r\n                !profileDto.getUsername().equals(username)) {\r\n            if (userAccountRepository.findByUsername(profileDto.getUsername()).isPresent()) {\r\n                throw new RuntimeException(\"Username already exists\");\r\n            }\r\n            account.setUsername(profileDto.getUsername());\r\n        }\r\n\r\n        // Set status to PENDING if type change was requested\r\n        if (typeChangeRequested) {\r\n            account.setStatus(\"PENDING\");\r\n            log.info(\"Account status set to PENDING for user: {}\", username);\r\n        }\r\n\r\n        if (profileDto.getTheme() != null) {\r\n            account.setTheme(profileDto.getTheme());\r\n        }\r\n        account.setEmailNotifications(profileDto.isEmailNotifications());\r\n        account.setPushNotifications(profileDto.isPushNotifications());\r\n\r\n        // Save changes\r\n        userRepository.save(user);\r\n        userAccountRepository.save(account);\r\n\r\n        // Return updated profile DTO\r\n        return ProfileDto.builder()\r\n                .username(account.getUsername())\r\n                .name(user.getName())\r\n                .email(user.getEmail())\r\n                .phone(user.getPhone())\r\n                .dob(user.getDob())\r\n                .gender(user.getGender())\r\n                .userType(user.getUserType())\r\n                .requestedUserType(user.getRequestedUserType())\r\n                .bookingsMade(user.getBookingsMade())\r\n                .bookingHours(user.getBookingHours())\r\n                .sumosJoined(user.getSumosJoined())\r\n                .amountSpent(user.getAmountSpent())\r\n                .status(account.getStatus())\r\n                .theme(account.getTheme())\r\n                .emailNotifications(account.isEmailNotifications())\r\n                .pushNotifications(account.isPushNotifications())\r\n                .profileImage(account.getProfileImage())\r\n                .build();\r\n    }\r\n    public void updateProfilePhoto(String username, String filename) {\r\n        UserAccount account = userAccountRepository.findByUsername(username)\r\n                .orElseThrow(() -> new UsernameNotFoundException(\"User not found\"));\r\n\r\n        account.setProfileImage(filename);\r\n        userAccountRepository.save(account);\r\n    }\r\n\r\n    public void removeProfilePhoto(String username) {\r\n        UserAccount account = userAccountRepository.findByUsername(username)\r\n                .orElseThrow(() -> new UsernameNotFoundException(\"User not found\"));\r\n\r\n        // Get current filename before removal\r\n        String currentImage = account.getProfileImage();\r\n\r\n        // Remove reference from database\r\n        account.setProfileImage(null);\r\n        userAccountRepository.save(account);\r\n\r\n        // Delete physical file\r\n        if (currentImage != null && !currentImage.isEmpty()) {\r\n            try {\r\n                fileStorageService.delete(currentImage);\r\n            } catch (Exception e) {\r\n                log.error(\"Failed to delete profile image file: {}\", currentImage, e);\r\n            }\r\n        }\r\n    }\r\n\r\n    @Transactional\r\n    public ProfileDto updatePreferences(String username, ProfileDto preferencesDto) {\r\n        // Retrieve user account\r\n        UserAccount account = userAccountRepository.findByUsername(username)\r\n                .orElseThrow(() -> new UsernameNotFoundException(\"User not found\"));\r\n\r\n        log.info(\"Updating preferences for user: {}\", username);\r\n\r\n        // Update theme preference\r\n        if (preferencesDto.getTheme() != null) {\r\n            account.setTheme(preferencesDto.getTheme());\r\n            log.debug(\"Updated theme to: {}\", preferencesDto.getTheme());\r\n        }\r\n\r\n        // Update notification preferences\r\n        account.setEmailNotifications(preferencesDto.isEmailNotifications());\r\n        account.setPushNotifications(preferencesDto.isPushNotifications());\r\n\r\n        log.debug(\"Email notifications: {}\", preferencesDto.isEmailNotifications());\r\n        log.debug(\"Push notifications: {}\", preferencesDto.isPushNotifications());\r\n\r\n        // Save updated preferences\r\n        userAccountRepository.save(account);\r\n\r\n        // Return updated preferences\r\n        return ProfileDto.builder()\r\n                .theme(account.getTheme())\r\n                .emailNotifications(account.isEmailNotifications())\r\n                .pushNotifications(account.isPushNotifications())\r\n                .build();\r\n    }\r\n\r\n  /*  public void uploadVerificationDocuments(String username, List<String> filenames) {\r\n        UserAccount account = userAccountRepository.findByUsername(username)\r\n                .orElseThrow(() -> new UsernameNotFoundException(\"User not found\"));\r\n\r\n        String existingDocs = account.getVerificationDocuments();\r\n        String newDocs = String.join(\",\", filenames);\r\n\r\n        account.setVerificationDocuments(\r\n                existingDocs == null ? newDocs : existingDocs + \",\" + newDocs\r\n        );\r\n        account.setVerificationStatus(\"PENDING\");\r\n\r\n        userAccountRepository.save(account);\r\n    }*/\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/ProfileService.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/ProfileService.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/ProfileService.java	(revision 97abd609899a67b781b8ace8e91358a782fc5acd)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/ProfileService.java	(date 1753722506263)
@@ -30,6 +30,7 @@
         User user = account.getUser();
 
         return ProfileDto.builder()
+                .id(user.getId())
                 .username(account.getUsername())
                 .name(user.getName())
                 .email(user.getEmail())
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/EventService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.service;\r\n\r\nimport com.pickleball_backend.pickleball.dto.EventDetailDto;\r\nimport com.pickleball_backend.pickleball.dto.EventFilterDto;\r\nimport com.pickleball_backend.pickleball.entity.Event;\r\nimport org.springframework.data.domain.Page;\r\n\r\npublic interface EventService {\r\n    Event createEvent(Event event, String organizerUsername);\r\n    Event updateEvent(Integer id, Event event, String organizerUsername, boolean notifyParticipants);\r\n    void deleteEvent(Integer id);\r\n    Event publishEvent(Integer id, String organizerUsername);\r\n    \r\n    // New methods for browsing events\r\n    Page<Event> browseEvents(EventFilterDto filterDto, String username);\r\n    EventDetailDto getEventDetails(Integer eventId, String username);\r\n    Page<Event> getUpcomingEvents(String username);\r\n    Page<Event> getEventsByType(String eventType, String username);\r\n    Page<Event> getEventsBySkillLevel(String skillLevel, String username);\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/EventService.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/EventService.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/EventService.java	(revision 97abd609899a67b781b8ace8e91358a782fc5acd)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/EventService.java	(date 1753722506273)
@@ -2,19 +2,20 @@
 
 import com.pickleball_backend.pickleball.dto.EventDetailDto;
 import com.pickleball_backend.pickleball.dto.EventFilterDto;
+import com.pickleball_backend.pickleball.dto.EventCreateDto;
+import com.pickleball_backend.pickleball.dto.EventUpdateDto;
 import com.pickleball_backend.pickleball.entity.Event;
 import org.springframework.data.domain.Page;
 
 public interface EventService {
-    Event createEvent(Event event, String organizerUsername);
-    Event updateEvent(Integer id, Event event, String organizerUsername, boolean notifyParticipants);
+    Event createEvent(EventCreateDto eventDto, String organizerUsername);
+    Event updateEvent(Integer id, EventUpdateDto eventDto, String organizerUsername, boolean notifyParticipants);
     void deleteEvent(Integer id);
     Event publishEvent(Integer id, String organizerUsername);
     
     // New methods for browsing events
     Page<Event> browseEvents(EventFilterDto filterDto, String username);
     EventDetailDto getEventDetails(Integer eventId, String username);
-    Page<Event> getUpcomingEvents(String username);
+    Page<Event> getUpcomingEvents(String username, int page, int size);
     Page<Event> getEventsByType(String eventType, String username);
-    Page<Event> getEventsBySkillLevel(String skillLevel, String username);
 }
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/CourtServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.service;\r\n\r\nimport com.pickleball_backend.pickleball.dto.CourtDto;\r\nimport com.pickleball_backend.pickleball.dto.CourtPricingDto;\r\nimport com.pickleball_backend.pickleball.dto.SlotDto;\r\nimport com.pickleball_backend.pickleball.entity.*;\r\nimport com.pickleball_backend.pickleball.exception.ValidationException;\r\nimport com.pickleball_backend.pickleball.repository.*;\r\nimport jakarta.persistence.EntityNotFoundException;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.stereotype.Service;\r\nimport org.springframework.transaction.annotation.Transactional;\r\n\r\nimport java.time.*;\r\nimport java.time.format.DateTimeParseException;\r\nimport java.util.*;\r\nimport java.util.stream.Collectors;\r\n\r\n@Service\r\n@RequiredArgsConstructor\r\npublic class CourtServiceImpl implements CourtService {\r\n    private static final Logger log = LoggerFactory.getLogger(CourtServiceImpl.class);\r\n    private final CourtRepository courtRepository;\r\n    private final SlotService slotService;\r\n    private final BookingRepository bookingRepository;\r\n    private final MemberRepository memberRepository;\r\n    private final SlotRepository slotRepository;\r\n    private final EmailService emailService;\r\n    private final PaymentRepository paymentRepository;\r\n    private final BookingSlotRepository bookingSlotRepository;\r\n    @Autowired\r\n    private VenueRepository venueRepository;\r\n    private static final Map<String, DayOfWeek> DAY_OF_WEEK_MAP = Map.of(\r\n        \"MON\", DayOfWeek.MONDAY,\r\n        \"TUE\", DayOfWeek.TUESDAY,\r\n        \"WED\", DayOfWeek.WEDNESDAY,\r\n        \"THU\", DayOfWeek.THURSDAY,\r\n        \"FRI\", DayOfWeek.FRIDAY,\r\n        \"SAT\", DayOfWeek.SATURDAY,\r\n        \"SUN\", DayOfWeek.SUNDAY\r\n    );\r\n\r\n    @Override\r\n    public Court createCourt(CourtDto courtDto) {\r\n        try {\r\n            System.out.println(\"==> createCourt called, dto=\" + courtDto);\r\n            Venue venue = venueRepository.findById(courtDto.getVenueId())\r\n                    .orElseThrow(() -> new EntityNotFoundException(\"Venue not found with id: \" + courtDto.getVenueId()));\r\n\r\n            if (courtRepository.existsByNameAndLocation(courtDto.getName(), courtDto.getLocation())) {\r\n                throw new IllegalArgumentException(\"Court with the same name and location already exists\");\r\n            }\r\n\r\n            Court court = new Court();\r\n            court.setVenue(venue);\r\n            saveOrUpdateCourt(court, courtDto);\r\n\r\n            generateSlotsForNewCourt(court);\r\n\r\n            System.out.println(\"==> createCourt success, id=\" + court.getId());\r\n            return court;\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            throw e;\r\n        }\r\n    }\r\n\r\n\r\n    private void generateSlotsForNewCourt(Court court) {\r\n        try {\r\n            if (court.getOpeningTime() == null || court.getClosingTime() == null) {\r\n                throw new ValidationException(\"Court operating hours not defined\");\r\n            }\r\n            LocalTime opening = LocalTime.parse(court.getOpeningTime());\r\n            LocalTime closing = LocalTime.parse(court.getClosingTime());\r\n            if (opening.isAfter(closing)) {\r\n                throw new ValidationException(\"Opening time must be before closing time\");\r\n            }\r\n            Set<DayOfWeek> operatingDaySet = parseOperatingDays(court.getOperatingDays());\r\n            LocalDate start = LocalDate.now();\r\n            LocalDate end = start.plusMonths(3);\r\n            List<SlotDto> slots = new ArrayList<>();\r\n            for (LocalDate date = start; date.isBefore(end); date = date.plusDays(1)) {\r\n                if (!operatingDaySet.isEmpty() && !operatingDaySet.contains(date.getDayOfWeek())) {\r\n                    continue;\r\n                }\r\n                LocalTime slotStart = opening;\r\n                while (slotStart.isBefore(closing)) {\r\n                    LocalTime slotEnd = slotStart.plusHours(1);\r\n                    if (slotEnd.isAfter(closing)) {\r\n                        break;\r\n                    }\r\n                    SlotDto slot = new SlotDto();\r\n                    slot.setCourtId(court.getId());\r\n                    slot.setDate(date);\r\n                    slot.setStartTime(slotStart);\r\n                    slot.setEndTime(slotEnd);\r\n                    slot.setAvailable(true);\r\n                    slot.setDurationHours(1);\r\n                    slots.add(slot);\r\n                    slotStart = slotStart.plusHours(1);\r\n                }\r\n            }\r\n            slotService.createSlots(slots);\r\n        } catch (DateTimeParseException e) {\r\n            throw new ValidationException(\"Invalid time format: \" + e.getMessage());\r\n        }\r\n    }\r\n\r\n    private Set<DayOfWeek> parseOperatingDays(String operatingDaysStr) {\r\n        if (operatingDaysStr == null || operatingDaysStr.trim().isEmpty()) {\r\n            return EnumSet.allOf(DayOfWeek.class);\r\n        }\r\n        return Arrays.stream(operatingDaysStr.split(\",\"))\r\n                .map(String::trim)\r\n                .map(this::parseDayOfWeek)\r\n                .collect(Collectors.toSet());\r\n    }\r\n\r\n    private DayOfWeek parseDayOfWeek(String dayStr) {\r\n        String upper = dayStr.trim().toUpperCase();\r\n        if (DAY_OF_WEEK_MAP.containsKey(upper)) {\r\n            return DAY_OF_WEEK_MAP.get(upper);\r\n        }\r\n        try {\r\n            return DayOfWeek.valueOf(upper);\r\n        } catch (IllegalArgumentException e) {\r\n            throw new ValidationException(\"Invalid day in operating days: \" + dayStr);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    @Transactional\r\n    public Court updateCourt(Integer id, CourtDto courtDto) {\r\n        Court existingCourt = courtRepository.findById(id)\r\n                .orElseThrow(() -> new IllegalArgumentException(\"Court not found with id: \" + id));\r\n\r\n        // Check for duplicate name/location only if they're being changed\r\n        if (!existingCourt.getName().equals(courtDto.getName()) ||\r\n                !existingCourt.getLocation().equals(courtDto.getLocation())) {\r\n\r\n            if (courtRepository.existsByNameAndLocation(courtDto.getName(), courtDto.getLocation())) {\r\n                throw new IllegalArgumentException(\"Another court with the same name and location already exists\");\r\n            }\r\n        }\r\n\r\n        return saveOrUpdateCourt(existingCourt, courtDto);\r\n    }\r\n\r\n    private Court saveOrUpdateCourt(Court court, CourtDto courtDto) {\r\n        try {\r\n            System.out.println(\"==> saveOrUpdateCourt called, dto=\" + courtDto);\r\n            court.setName(courtDto.getName());\r\n            court.setLocation(courtDto.getLocation());\r\n            court.setStatus(courtDto.getStatus().toUpperCase());\r\n            court.setOpeningTime(courtDto.getOpeningTime());\r\n            court.setClosingTime(courtDto.getClosingTime());\r\n            // operatingDays 统一大写并去重\r\n            if (courtDto.getOperatingDays() != null && !courtDto.getOperatingDays().isEmpty()) {\r\n                String normalizedDays = Arrays.stream(courtDto.getOperatingDays().split(\",\"))\r\n                    .map(String::trim)\r\n                    .map(String::toUpperCase)\r\n                    .distinct()\r\n                    .collect(Collectors.joining(\",\"));\r\n                court.setOperatingDays(normalizedDays);\r\n            } else {\r\n                court.setOperatingDays(null);\r\n            }\r\n            court.setPeakHourlyPrice(courtDto.getPeakHourlyPrice());\r\n            court.setOffPeakHourlyPrice(courtDto.getOffPeakHourlyPrice());\r\n            court.setDailyPrice(courtDto.getDailyPrice());\r\n            court.setPeakStartTime(courtDto.getPeakStartTime());\r\n            court.setPeakEndTime(courtDto.getPeakEndTime());\r\n\r\n            validatePeakTimes(courtDto);\r\n            Court saved = courtRepository.save(court);\r\n            System.out.println(\"==> saveOrUpdateCourt success, id=\" + saved.getId());\r\n            return saved;\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    private void validatePeakTimes(CourtDto courtDto) {\r\n        if (courtDto.getPeakStartTime() != null && courtDto.getPeakEndTime() != null) {\r\n            LocalTime start = LocalTime.parse(courtDto.getPeakStartTime());\r\n            LocalTime end = LocalTime.parse(courtDto.getPeakEndTime());\r\n\r\n            if (!start.isBefore(end)) {\r\n                throw new IllegalArgumentException(\"Peak start time must be before end time\");\r\n            }\r\n\r\n            // Check against operating hours\r\n            if (courtDto.getOpeningTime() != null && courtDto.getClosingTime() != null) {\r\n                LocalTime opening = LocalTime.parse(courtDto.getOpeningTime());\r\n                LocalTime closing = LocalTime.parse(courtDto.getClosingTime());\r\n\r\n                if (start.isBefore(opening) || end.isAfter(closing)) {\r\n                    throw new IllegalArgumentException(\r\n                            \"Peak hours must be within operating hours\"\r\n                    );\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    @Override\r\n    @Transactional\r\n    public void deleteCourt(Integer id) {\r\n        Court court = courtRepository.findById(id)\r\n                .orElseThrow(() -> new IllegalArgumentException(\"Court not found with id: \" + id));\r\n\r\n        if (court.getIsArchived() != null && court.getIsArchived()) {\r\n            throw new IllegalStateException(\"Court already deleted\");\r\n        }\r\n\r\n        // List<Booking> activeBookings = bookingRepository.findActiveBookingsByCourtId(id);\r\n        // 替换为通过 BookingSlotRepository 查询所有该 courtId 下的 bookingSlot，且 booking 状态为有效\r\n        List<BookingSlot> activeBookingSlots = bookingSlotRepository.findActiveByCourtId(id);\r\n        List<Booking> activeBookings = activeBookingSlots.stream()\r\n            .map(BookingSlot::getBooking)\r\n            .filter(Objects::nonNull)\r\n            .filter(b -> !\"CANCELLED\".equalsIgnoreCase(b.getStatus()) && !\"COMPLETED\".equalsIgnoreCase(b.getStatus()) && !\"CANCELLED_DUE_TO_COURT_DELETION\".equalsIgnoreCase(b.getStatus()))\r\n            .collect(Collectors.toList());\r\n\r\n        if (!activeBookings.isEmpty()) {\r\n            for (Booking booking : activeBookings) {\r\n                try {\r\n                    refundBooking(booking);\r\n                    // Slot slot = booking.getSlot();\r\n                    Slot slot = booking.getBookingSlots() != null && !booking.getBookingSlots().isEmpty() ? booking.getBookingSlots().get(0).getSlot() : null;\r\n                    emailService.sendCourtDeletionNotification(\r\n                            booking.getMember().getUser().getEmail(),\r\n                            court.getName(),\r\n                            slot != null ? slot.getDate() : null,\r\n                            slot != null ? slot.getStartTime() : null,\r\n                            booking.getTotalAmount()\r\n                    );\r\n                    updateBookingStatus(booking);\r\n\r\n                    addCompensationPoints(booking.getMember());\r\n                } catch (Exception e) {\r\n                    log.error(\"Error processing booking {} during court deletion: {}\", booking.getId(), e.getMessage());\r\n                }\r\n            }\r\n        }\r\n\r\n        // 軟刪除球場\r\n        courtRepository.softDeleteCourt(id, LocalDateTime.now());\r\n        log.info(\"Court {} has been soft deleted\", id);\r\n    }\r\n\r\n    private void refundBooking(Booking booking) {\r\n        log.info(\"Processing refund for booking ID: {}, Amount: ${}\",\r\n                booking.getId(), booking.getTotalAmount());\r\n\r\n        Payment payment = booking.getPayment();\r\n        payment.setStatus(\"REFUNDED\");\r\n        paymentRepository.save(payment);\r\n\r\n        // Slot slot = booking.getSlot();\r\n        Slot slot = booking.getBookingSlots() != null && !booking.getBookingSlots().isEmpty() ? booking.getBookingSlots().get(0).getSlot() : null;\r\n        if (slot != null) {\r\n            slot.setAvailable(true);\r\n            slotRepository.save(slot);\r\n        }\r\n\r\n        // BookingSlot bookingSlot = booking.getBookingSlot();\r\n        BookingSlot bookingSlot = booking.getBookingSlots() != null && !booking.getBookingSlots().isEmpty() ? booking.getBookingSlots().get(0) : null;\r\n        if (bookingSlot != null) {\r\n            bookingSlot.setStatus(\"CANCELLED\");\r\n            bookingSlotRepository.save(bookingSlot);\r\n        }\r\n    }\r\n\r\n    private void updateBookingStatus(Booking booking) {\r\n        booking.setStatus(\"CANCELLED_DUE_TO_COURT_DELETION\");\r\n        bookingRepository.save(booking);\r\n    }\r\n\r\n    private void addCompensationPoints(Member member) {\r\n        int currentPoints = member.getPointBalance();\r\n        member.setPointBalance(currentPoints + 200); // 添加200積分作為補償\r\n        memberRepository.save(member);\r\n        log.info(\"Added 200 compensation points to member ID: {}\", member.getId());\r\n    }\r\n\r\n    @Override\r\n    @Transactional\r\n    public void updateCourtPricing(Integer id, CourtPricingDto pricingDto) {\r\n        Court court = courtRepository.findById(id)\r\n                .orElseThrow(() -> new IllegalArgumentException(\"Court not found with id: \" + id));\r\n\r\n        // Validate peak times\r\n        if (pricingDto.getPeakStartTime() != null && pricingDto.getPeakEndTime() != null) {\r\n            LocalTime start = LocalTime.parse(pricingDto.getPeakStartTime());\r\n            LocalTime end = LocalTime.parse(pricingDto.getPeakEndTime());\r\n\r\n            if (!start.isBefore(end)) {\r\n                throw new IllegalArgumentException(\"Peak start time must be before end time\");\r\n            }\r\n\r\n            // Check against operating hours only if they exist\r\n            if (court.getOpeningTime() != null && court.getClosingTime() != null) {\r\n                try {\r\n                    LocalTime opening = LocalTime.parse(court.getOpeningTime());\r\n                    LocalTime closing = LocalTime.parse(court.getClosingTime());\r\n\r\n                    if (start.isBefore(opening) || end.isAfter(closing)) {\r\n                        throw new IllegalArgumentException(\r\n                                \"Peak hours must be within operating hours\"\r\n                        );\r\n                    }\r\n                } catch (DateTimeParseException e) {\r\n                    throw new IllegalArgumentException(\"Invalid operating hours format\");\r\n                }\r\n            }\r\n        }\r\n\r\n        // Update pricing fields\r\n        court.setPeakHourlyPrice(pricingDto.getPeakHourlyPrice());\r\n        court.setOffPeakHourlyPrice(pricingDto.getOffPeakHourlyPrice());\r\n        court.setDailyPrice(pricingDto.getDailyPrice());\r\n        court.setPeakStartTime(pricingDto.getPeakStartTime());\r\n        court.setPeakEndTime(pricingDto.getPeakEndTime());\r\n\r\n        courtRepository.save(court);\r\n    }\r\n\r\n    //slot\r\n    @Override\r\n    public List<Court> getAllCourts() {\r\n        return courtRepository.findActiveCourts(); // Use the new query\r\n    }\r\n\r\n    @Override\r\n    public List<Court> findAvailableCourts(LocalDate date, String startTime, String endTime) {\r\n        // 1. 获取所有未归档球场\r\n        List<Court> allCourts = courtRepository.findActiveCourts();\r\n\r\n        // 2. 解析时间\r\n        java.time.LocalTime start = java.time.LocalTime.parse(startTime);\r\n        java.time.LocalTime end = java.time.LocalTime.parse(endTime);\r\n\r\n        // 3. 查询该日期、时间段有冲突的预订（只查有效状态）\r\n        List<Booking> bookings = bookingRepository.findAll();\r\n        Set<Integer> bookedCourtIds = new HashSet<>();\r\n        for (Booking booking : bookings) {\r\n            if (booking.getStatus() != null && booking.getStatus().equalsIgnoreCase(\"CANCELLED\")) continue;\r\n            if (booking.getBookingSlots() == null) continue;\r\n            for (BookingSlot bs : booking.getBookingSlots()) {\r\n                Slot slot = bs.getSlot();\r\n                if (slot == null) continue;\r\n                if (!date.equals(slot.getDate())) continue;\r\n                // 判断时间段是否有重叠\r\n                if (!(end.isBefore(slot.getStartTime()) || start.isAfter(slot.getEndTime()))) {\r\n                    bookedCourtIds.add(slot.getCourtId());\r\n                }\r\n            }\r\n        }\r\n        // 4. 过滤出未被预订的球场\r\n        return allCourts.stream()\r\n                .filter(court -> !bookedCourtIds.contains(court.getId()))\r\n                .collect(Collectors.toList());\r\n    }\r\n\r\n    @Override\r\n    public Court getCourtByIdForMember(Integer id) {\r\n        return courtRepository.findById(id)\r\n                .filter(court ->\r\n                        court.getIsArchived() == null ||\r\n                                !court.getIsArchived()\r\n                )\r\n                .orElse(null);\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/CourtServiceImpl.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/CourtServiceImpl.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/CourtServiceImpl.java	(revision 97abd609899a67b781b8ace8e91358a782fc5acd)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/CourtServiceImpl.java	(date 1753722506283)
@@ -31,6 +31,7 @@
     private final EmailService emailService;
     private final PaymentRepository paymentRepository;
     private final BookingSlotRepository bookingSlotRepository;
+    private final FriendlyMatchService friendlyMatchService;
     @Autowired
     private VenueRepository venueRepository;
     private static final Map<String, DayOfWeek> DAY_OF_WEEK_MAP = Map.of(
@@ -230,6 +231,8 @@
         if (!activeBookings.isEmpty()) {
             for (Booking booking : activeBookings) {
                 try {
+                    // 新增：同步取消 FriendlyMatch
+                    friendlyMatchService.cancelReservationAndMatch(booking.getId());
                     refundBooking(booking);
                     // Slot slot = booking.getSlot();
                     Slot slot = booking.getBookingSlots() != null && !booking.getBookingSlots().isEmpty() ? booking.getBookingSlots().get(0).getSlot() : null;
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/EventServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.service;\r\n\r\nimport com.pickleball_backend.pickleball.dto.EventDetailDto;\r\nimport com.pickleball_backend.pickleball.dto.EventFilterDto;\r\nimport com.pickleball_backend.pickleball.entity.Event;\r\nimport com.pickleball_backend.pickleball.entity.EventOrganizer;\r\nimport com.pickleball_backend.pickleball.entity.User;\r\nimport com.pickleball_backend.pickleball.entity.UserAccount;\r\nimport com.pickleball_backend.pickleball.repository.EventOrganizerRepository;\r\nimport com.pickleball_backend.pickleball.repository.EventRepository;\r\nimport com.pickleball_backend.pickleball.repository.EventRegistrationRepository;\r\nimport com.pickleball_backend.pickleball.repository.UserAccountRepository;\r\nimport com.pickleball_backend.pickleball.repository.UserRepository;\r\nimport com.pickleball_backend.pickleball.service.EmailService;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.data.domain.Page;\r\nimport org.springframework.data.domain.PageRequest;\r\nimport org.springframework.data.domain.Pageable;\r\nimport org.springframework.data.domain.Sort;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport java.time.LocalDateTime;\r\nimport java.time.temporal.ChronoUnit;\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\nimport java.util.Optional;\r\n\r\n@Service\r\npublic class EventServiceImpl implements EventService {\r\n\r\n    private static final Logger log = LoggerFactory.getLogger(EventServiceImpl.class);\r\n\r\n    @Autowired\r\n    private EventRepository eventRepository;\r\n\r\n    @Autowired\r\n    private UserAccountRepository userAccountRepository;\r\n\r\n    @Autowired\r\n    private UserRepository userRepository;\r\n\r\n    @Autowired\r\n    private EmailService emailService;\r\n\r\n    @Autowired\r\n    private EventOrganizerRepository eventOrganizerRepository;\r\n\r\n    @Autowired\r\n    private EventRegistrationRepository eventRegistrationRepository;\r\n\r\n    @Override\r\n    public Event createEvent(Event event, String organizerUsername) {\r\n        UserAccount organizer = userAccountRepository.findByUsername(organizerUsername)\r\n                .orElseThrow(() -> new RuntimeException(\"Organizer not found\"));\r\n\r\n        // Check organizer status\r\n        if (!(\"ACTIVE\".equals(organizer.getStatus()) ||\r\n                \"PENDING\".equals(organizer.getStatus()))) {\r\n            throw new RuntimeException(\"Account not active or pending approval\");\r\n        }\r\n\r\n        // Validate event times\r\n        if (event.getStartTime() != null && event.getEndTime() != null) {\r\n            if (event.getStartTime().isAfter(event.getEndTime())) {\r\n                throw new RuntimeException(\"Start time must be before end time\");\r\n            }\r\n            if (event.getStartTime().isBefore(LocalDateTime.now())) {\r\n                throw new RuntimeException(\"Start time cannot be in the past\");\r\n            }\r\n        }\r\n\r\n        event.setOrganizerId(organizer.getUser().getId());\r\n        event.setStatus(\"PUBLISHED\");\r\n        Event savedEvent = eventRepository.save(event);\r\n\r\n        // Notification logic\r\n        String[] eligibleTiers = event.getEligibility().split(\",\");\r\n        log.info(\"Event eligibility tiers: {}\", Arrays.toString(eligibleTiers));\r\n        \r\n        // Clean up tier names (remove whitespace and convert to uppercase)\r\n        List<String> cleanTierNames = Arrays.stream(eligibleTiers)\r\n                .map(String::trim)\r\n                .map(String::toUpperCase)\r\n                .filter(tier -> !tier.isEmpty())\r\n                .toList();\r\n        \r\n        log.info(\"Cleaned tier names: {}\", cleanTierNames);\r\n        \r\n        // Find eligible users by membership tier\r\n        List<User> eligibleUsers = userRepository.findByMembershipTierNameIn(cleanTierNames);\r\n        log.info(\"Total eligible users found: {}\", eligibleUsers.size());\r\n        \r\n        // Fallback: if no users found by membership tier, try userType\r\n        if (eligibleUsers.isEmpty()) {\r\n            log.info(\"No users found by membership tier, trying userType fallback...\");\r\n            eligibleUsers = userRepository.findByUserTypeIn(cleanTierNames);\r\n            log.info(\"Fallback: {} users found by userType\", eligibleUsers.size());\r\n        }\r\n        \r\n        int emailsSent = 0;\r\n        int emailsSkipped = 0;\r\n        \r\n        for (User user : eligibleUsers) {\r\n            String userEmail = user.getEmail();\r\n            String userTier = user.getMember() != null && user.getMember().getTier() != null ? \r\n                    user.getMember().getTier().getTierName().toString() : \"NO_TIER\";\r\n            String userType = user.getUserType();\r\n            \r\n            log.info(\"Processing user: {} | Email: {} | Tier: {} | UserType: {}\", \r\n                    user.getName(), userEmail, userTier, userType);\r\n            \r\n            if (userEmail == null || userEmail.trim().isEmpty()) {\r\n                log.warn(\"Skipping user {} - no valid email address\", user.getName());\r\n                emailsSkipped++;\r\n                continue;\r\n            }\r\n            \r\n            try {\r\n                emailService.sendEventNotification(userEmail, savedEvent);\r\n                emailsSent++;\r\n                log.info(\"Event notification sent successfully to: {}\", userEmail);\r\n            } catch (Exception e) {\r\n                log.error(\"Failed to send event notification to {}: {}\", userEmail, e.getMessage());\r\n                emailsSkipped++;\r\n            }\r\n        }\r\n        \r\n        log.info(\"Event notification summary - Sent: {}, Skipped: {}, Total processed: {}\", \r\n                emailsSent, emailsSkipped, eligibleUsers.size());\r\n\r\n        return savedEvent;\r\n    }\r\n\r\n    @Override\r\n    public Event updateEvent(Integer id, Event event, String organizerUsername, boolean notifyParticipants) {\r\n        Optional<Event> existingOpt = eventRepository.findById(id);\r\n        if (existingOpt.isEmpty()) {\r\n            throw new RuntimeException(\"Event not found\");\r\n        }\r\n        Event existing = existingOpt.get();\r\n\r\n        // Get the organizer's user id\r\n        UserAccount organizerAccount = userAccountRepository.findByUsername(organizerUsername)\r\n            .orElseThrow(() -> new RuntimeException(\"Organizer not found\"));\r\n        Integer organizerId = organizerAccount.getUser().getId();\r\n\r\n        // Check if the current user is the organizer of this event\r\n        if (!existing.getOrganizerId().equals(organizerId)) {\r\n            throw new RuntimeException(\"You are not authorized to edit this event.\");\r\n        }\r\n\r\n        // Validate event times\r\n        if (event.getStartTime() != null && event.getEndTime() != null) {\r\n            if (event.getStartTime().isAfter(event.getEndTime())) {\r\n                throw new RuntimeException(\"Start time must be before end time\");\r\n            }\r\n        }\r\n        \r\n        // Update fields as needed\r\n        existing.setTitle(event.getTitle());\r\n        existing.setStartTime(event.getStartTime());\r\n        existing.setEndTime(event.getEndTime());\r\n        existing.setEventType(event.getEventType());\r\n        existing.setCapacity(event.getCapacity());\r\n        existing.setLocation(event.getLocation());\r\n        existing.setStatus(event.getStatus());\r\n        existing.setEligibility(event.getEligibility());\r\n        existing.setSchedule(event.getSchedule());\r\n        // OrganizerId should not change\r\n        \r\n        Event updatedEvent = eventRepository.save(existing);\r\n        \r\n        // Send notifications if requested\r\n        if (notifyParticipants) {\r\n            log.info(\"Sending event update notifications for event: {}\", updatedEvent.getTitle());\r\n            sendEventUpdateNotifications(updatedEvent);\r\n        } else {\r\n            log.info(\"Event updated without sending notifications: {}\", updatedEvent.getTitle());\r\n        }\r\n        \r\n        return updatedEvent;\r\n    }\r\n\r\n    @Override\r\n    public void deleteEvent(Integer id) {\r\n        Optional<Event> eventOpt = eventRepository.findById(id);\r\n        if (eventOpt.isEmpty()) {\r\n            throw new RuntimeException(\"Event not found\");\r\n        }\r\n        \r\n        Event event = eventOpt.get();\r\n        \r\n        // Send cancellation notifications before deleting\r\n        log.info(\"Sending event cancellation notifications for event: {}\", event.getTitle());\r\n        sendEventCancellationNotifications(event);\r\n        \r\n        eventRepository.deleteById(id);\r\n        log.info(\"Event deleted successfully: {}\", event.getTitle());\r\n    }\r\n\r\n    @Override\r\n    public Event publishEvent(Integer id, String organizerUsername) {\r\n        Event event = eventRepository.findById(id)\r\n                .orElseThrow(() -> new RuntimeException(\"Event not found\"));\r\n\r\n        UserAccount organizer = userAccountRepository.findByUsername(organizerUsername)\r\n                .orElseThrow(() -> new RuntimeException(\"Organizer not found\"));\r\n\r\n        // Verify ownership\r\n        if (!event.getOrganizerId().equals(organizer.getUser().getId())) {\r\n            throw new RuntimeException(\"Not authorized to publish this event\");\r\n        }\r\n\r\n        event.setStatus(\"PUBLISHED\");\r\n        eventRepository.save(event);\r\n\r\n        // Notification logic\r\n        String[] eligibleTiers = event.getEligibility().split(\",\");\r\n        log.info(\"Event eligibility tiers: {}\", Arrays.toString(eligibleTiers));\r\n        \r\n        // Clean up tier names (remove whitespace and convert to uppercase)\r\n        List<String> cleanTierNames = Arrays.stream(eligibleTiers)\r\n                .map(String::trim)\r\n                .map(String::toUpperCase)\r\n                .filter(tier -> !tier.isEmpty())\r\n                .toList();\r\n        \r\n        log.info(\"Cleaned tier names: {}\", cleanTierNames);\r\n        \r\n        // Find eligible users by membership tier\r\n        List<User> eligibleUsers = userRepository.findByMembershipTierNameIn(cleanTierNames);\r\n        log.info(\"Total eligible users found: {}\", eligibleUsers.size());\r\n        \r\n        // Fallback: if no users found by membership tier, try userType\r\n        if (eligibleUsers.isEmpty()) {\r\n            log.info(\"No users found by membership tier, trying userType fallback...\");\r\n            eligibleUsers = userRepository.findByUserTypeIn(cleanTierNames);\r\n            log.info(\"Fallback: {} users found by userType\", eligibleUsers.size());\r\n        }\r\n        \r\n        int emailsSent = 0;\r\n        int emailsSkipped = 0;\r\n        \r\n        for (User user : eligibleUsers) {\r\n            String userEmail = user.getEmail();\r\n            String userTier = user.getMember() != null && user.getMember().getTier() != null ? \r\n                    user.getMember().getTier().getTierName().toString() : \"NO_TIER\";\r\n            String userType = user.getUserType();\r\n            \r\n            log.info(\"Processing user: {} | Email: {} | Tier: {} | UserType: {}\", \r\n                    user.getName(), userEmail, userTier, userType);\r\n            \r\n            if (userEmail == null || userEmail.trim().isEmpty()) {\r\n                log.warn(\"Skipping user {} - no valid email address\", user.getName());\r\n                emailsSkipped++;\r\n                continue;\r\n            }\r\n            \r\n            try {\r\n                emailService.sendEventNotification(userEmail, event);\r\n                emailsSent++;\r\n                log.info(\"Event notification sent successfully to: {}\", userEmail);\r\n            } catch (Exception e) {\r\n                log.error(\"Failed to send event notification to {}: {}\", userEmail, e.getMessage());\r\n                emailsSkipped++;\r\n            }\r\n        }\r\n        \r\n        log.info(\"Event notification summary - Sent: {}, Skipped: {}, Total processed: {}\", \r\n                emailsSent, emailsSkipped, eligibleUsers.size());\r\n        return event;\r\n    }\r\n    \r\n    /**\r\n     * Sends event update notifications to eligible users\r\n     */\r\n    private void sendEventUpdateNotifications(Event event) {\r\n        List<User> registeredUsers = eventRegistrationRepository.findUsersRegisteredForEvent(event.getId());\r\n        log.info(\"Event update - total registered users found: {}\", registeredUsers.size());\r\n\r\n        int emailsSent = 0;\r\n        int emailsSkipped = 0;\r\n\r\n        for (User user : registeredUsers) {\r\n            String userEmail = user.getEmail();\r\n            if (userEmail == null || userEmail.trim().isEmpty()) {\r\n                log.warn(\"Skipping user {} - no valid email address\", user.getName());\r\n                emailsSkipped++;\r\n                continue;\r\n            }\r\n            try {\r\n                emailService.sendEventUpdateNotification(userEmail, event);\r\n                emailsSent++;\r\n                log.info(\"Event update notification sent successfully to: {}\", userEmail);\r\n            } catch (Exception e) {\r\n                log.error(\"Failed to send event update notification to {}: {}\", userEmail, e.getMessage());\r\n                emailsSkipped++;\r\n            }\r\n        }\r\n        log.info(\"Event update notification summary - Sent: {}, Skipped: {}, Total processed: {}\", \r\n                emailsSent, emailsSkipped, registeredUsers.size());\r\n    }\r\n    \r\n    /**\r\n     * Sends event cancellation notifications to eligible users\r\n     */\r\n    private void sendEventCancellationNotifications(Event event) {\r\n        // Notification logic\r\n        String[] eligibleTiers = event.getEligibility().split(\",\");\r\n        log.info(\"Event cancellation - eligibility tiers: {}\", Arrays.toString(eligibleTiers));\r\n        \r\n        // Clean up tier names (remove whitespace and convert to uppercase)\r\n        List<String> cleanTierNames = Arrays.stream(eligibleTiers)\r\n                .map(String::trim)\r\n                .map(String::toUpperCase)\r\n                .filter(tier -> !tier.isEmpty())\r\n                .toList();\r\n        \r\n        log.info(\"Event cancellation - cleaned tier names: {}\", cleanTierNames);\r\n        \r\n        // Find eligible users by membership tier\r\n        List<User> eligibleUsers = userRepository.findByMembershipTierNameIn(cleanTierNames);\r\n        log.info(\"Event cancellation - total eligible users found: {}\", eligibleUsers.size());\r\n        \r\n        // Fallback: if no users found by membership tier, try userType\r\n        if (eligibleUsers.isEmpty()) {\r\n            log.info(\"Event cancellation - no users found by membership tier, trying userType fallback...\");\r\n            eligibleUsers = userRepository.findByUserTypeIn(cleanTierNames);\r\n            log.info(\"Event cancellation - fallback: {} users found by userType\", eligibleUsers.size());\r\n        }\r\n        \r\n        int emailsSent = 0;\r\n        int emailsSkipped = 0;\r\n        \r\n        for (User user : eligibleUsers) {\r\n            String userEmail = user.getEmail();\r\n            String userTier = user.getMember() != null && user.getMember().getTier() != null ? \r\n                    user.getMember().getTier().getTierName().toString() : \"NO_TIER\";\r\n            String userType = user.getUserType();\r\n            \r\n            log.info(\"Event cancellation - processing user: {} | Email: {} | Tier: {} | UserType: {}\", \r\n                    user.getName(), userEmail, userTier, userType);\r\n            \r\n            if (userEmail == null || userEmail.trim().isEmpty()) {\r\n                log.warn(\"Event cancellation - skipping user {} - no valid email address\", user.getName());\r\n                emailsSkipped++;\r\n                continue;\r\n            }\r\n            \r\n            try {\r\n                emailService.sendEventCancellationNotification(userEmail, event);\r\n                emailsSent++;\r\n                log.info(\"Event cancellation notification sent successfully to: {}\", userEmail);\r\n            } catch (Exception e) {\r\n                log.error(\"Failed to send event cancellation notification to {}: {}\", userEmail, e.getMessage());\r\n                emailsSkipped++;\r\n            }\r\n        }\r\n        \r\n        log.info(\"Event cancellation notification summary - Sent: {}, Skipped: {}, Total processed: {}\", \r\n                emailsSent, emailsSkipped, eligibleUsers.size());\r\n    }\r\n    \r\n    // New methods for browsing events\r\n    \r\n    @Override\r\n    public Page<Event> browseEvents(EventFilterDto filterDto, String username) {\r\n        // Create pageable with sorting\r\n        Sort sort = Sort.by(\r\n            filterDto.getSortDirection().equalsIgnoreCase(\"DESC\") ? \r\n            Sort.Direction.DESC : Sort.Direction.ASC, \r\n            filterDto.getSortBy()\r\n        );\r\n        Pageable pageable = PageRequest.of(filterDto.getPage(), filterDto.getSize(), sort);\r\n        \r\n        // Set default status to PUBLISHED if not specified\r\n        String status = filterDto.getStatus() != null ? filterDto.getStatus() : \"PUBLISHED\";\r\n        \r\n        log.info(\"Browsing events with filters: eventType={}, skillLevel={}, location={}, status={}\", \r\n                filterDto.getEventType(), filterDto.getSkillLevel(), filterDto.getLocation(), status);\r\n        \r\n        return eventRepository.findEventsWithFilters(\r\n            filterDto.getEventType(),\r\n            filterDto.getSkillLevel(),\r\n            filterDto.getLocation(),\r\n            filterDto.getStartDate(),\r\n            filterDto.getEndDate(),\r\n            status,\r\n            filterDto.getEligibility(),\r\n            filterDto.getSearchKeyword(),\r\n            pageable\r\n        );\r\n    }\r\n    \r\n    @Override\r\n    public EventDetailDto getEventDetails(Integer eventId, String username) {\r\n        Event event = eventRepository.findById(eventId)\r\n                .orElseThrow(() -> new RuntimeException(\"Event not found\"));\r\n        \r\n        EventDetailDto detailDto = new EventDetailDto();\r\n        detailDto.setId(event.getId());\r\n        detailDto.setTitle(event.getTitle());\r\n        detailDto.setStartTime(event.getStartTime());\r\n        detailDto.setEndTime(event.getEndTime());\r\n        detailDto.setEventType(event.getEventType());\r\n        detailDto.setCapacity(event.getCapacity());\r\n        detailDto.setLocation(event.getLocation());\r\n        detailDto.setStatus(event.getStatus());\r\n        detailDto.setSkillLevel(event.getSkillLevel());\r\n        detailDto.setEligibility(event.getEligibility());\r\n        detailDto.setSchedule(event.getSchedule());\r\n        detailDto.setFeeAmount(event.getFeeAmount());\r\n        detailDto.setOrganizerId(event.getOrganizerId());\r\n        \r\n        // Get organizer details\r\n        try {\r\n            UserAccount organizerAccount = userAccountRepository.findById(event.getOrganizerId())\r\n                    .orElse(null);\r\n            if (organizerAccount != null) {\r\n                detailDto.setOrganizerName(organizerAccount.getUser().getName());\r\n                detailDto.setOrganizerEmail(organizerAccount.getUser().getEmail());\r\n                \r\n                // Get organizer rating\r\n                Optional<EventOrganizer> organizerOpt = eventOrganizerRepository.findByUserId(event.getOrganizerId());\r\n                if (organizerOpt.isPresent()) {\r\n                    detailDto.setOrganizerRating(organizerOpt.get().getOrganizerRating());\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            log.warn(\"Could not fetch organizer details for event {}: {}\", eventId, e.getMessage());\r\n        }\r\n        \r\n        // Calculate time until event\r\n        LocalDateTime now = LocalDateTime.now();\r\n        if (event.getStartTime().isAfter(now)) {\r\n            long days = ChronoUnit.DAYS.between(now, event.getStartTime());\r\n            long hours = ChronoUnit.HOURS.between(now, event.getStartTime()) % 24;\r\n            \r\n            if (days > 0) {\r\n                detailDto.setTimeUntilEvent(days + \" day\" + (days > 1 ? \"s\" : \"\"));\r\n            } else if (hours > 0) {\r\n                detailDto.setTimeUntilEvent(hours + \" hour\" + (hours > 1 ? \"s\" : \"\"));\r\n            } else {\r\n                detailDto.setTimeUntilEvent(\"Less than 1 hour\");\r\n            }\r\n            detailDto.setUpcoming(true);\r\n        } else {\r\n            detailDto.setUpcoming(false);\r\n            detailDto.setTimeUntilEvent(\"Event has passed\");\r\n        }\r\n        \r\n        // Check if user is eligible (based on membership tier)\r\n        try {\r\n            UserAccount userAccount = userAccountRepository.findByUsername(username)\r\n                    .orElse(null);\r\n            if (userAccount != null) {\r\n                User user = userAccount.getUser();\r\n                String userTier = user.getMember() != null && user.getMember().getTier() != null ? \r\n                        user.getMember().getTier().getTierName().toString() : \"NO_TIER\";\r\n                \r\n                detailDto.setEligible(event.getEligibility().toUpperCase().contains(userTier));\r\n            }\r\n        } catch (Exception e) {\r\n            log.warn(\"Could not check eligibility for user {}: {}\", username, e.getMessage());\r\n            detailDto.setEligible(false);\r\n        }\r\n        \r\n        return detailDto;\r\n    }\r\n    \r\n    @Override\r\n    public Page<Event> getUpcomingEvents(String username) {\r\n        Pageable pageable = PageRequest.of(0, 10, Sort.by(Sort.Direction.ASC, \"startTime\"));\r\n        LocalDateTime now = LocalDateTime.now();\r\n        \r\n        log.info(\"Getting upcoming events for user: {}\", username);\r\n        \r\n        return eventRepository.findEventsWithFilters(\r\n            null, // eventType\r\n            null, // skillLevel\r\n            null, // location\r\n            now,  // startDate (from now)\r\n            null, // endDate\r\n            \"PUBLISHED\", // status\r\n            null, // eligibility\r\n            null, // searchKeyword\r\n            pageable\r\n        );\r\n    }\r\n    \r\n    @Override\r\n    public Page<Event> getEventsByType(String eventType, String username) {\r\n        Pageable pageable = PageRequest.of(0, 10, Sort.by(Sort.Direction.ASC, \"startTime\"));\r\n        \r\n        log.info(\"Getting events by type: {} for user: {}\", eventType, username);\r\n        \r\n        return eventRepository.findEventsWithFilters(\r\n            eventType, // eventType\r\n            null, // skillLevel\r\n            null, // location\r\n            null, // startDate\r\n            null, // endDate\r\n            \"PUBLISHED\", // status\r\n            null, // eligibility\r\n            null, // searchKeyword\r\n            pageable\r\n        );\r\n    }\r\n    \r\n    @Override\r\n    public Page<Event> getEventsBySkillLevel(String skillLevel, String username) {\r\n        Pageable pageable = PageRequest.of(0, 10, Sort.by(Sort.Direction.ASC, \"startTime\"));\r\n        \r\n        log.info(\"Getting events by skill level: {} for user: {}\", skillLevel, username);\r\n        \r\n        return eventRepository.findEventsWithFilters(\r\n            null, // eventType\r\n            skillLevel, // skillLevel\r\n            null, // location\r\n            null, // startDate\r\n            null, // endDate\r\n            \"PUBLISHED\", // status\r\n            null, // eligibility\r\n            null, // searchKeyword\r\n            pageable\r\n        );\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/EventServiceImpl.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/EventServiceImpl.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/EventServiceImpl.java	(revision 97abd609899a67b781b8ace8e91358a782fc5acd)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/EventServiceImpl.java	(date 1753722506298)
@@ -2,16 +2,23 @@
 
 import com.pickleball_backend.pickleball.dto.EventDetailDto;
 import com.pickleball_backend.pickleball.dto.EventFilterDto;
+import com.pickleball_backend.pickleball.dto.EventCreateDto;
+import com.pickleball_backend.pickleball.dto.EventUpdateDto;
 import com.pickleball_backend.pickleball.entity.Event;
 import com.pickleball_backend.pickleball.entity.EventOrganizer;
 import com.pickleball_backend.pickleball.entity.User;
 import com.pickleball_backend.pickleball.entity.UserAccount;
+import com.pickleball_backend.pickleball.entity.Court;
+import com.pickleball_backend.pickleball.entity.Venue;
 import com.pickleball_backend.pickleball.repository.EventOrganizerRepository;
 import com.pickleball_backend.pickleball.repository.EventRepository;
 import com.pickleball_backend.pickleball.repository.EventRegistrationRepository;
 import com.pickleball_backend.pickleball.repository.UserAccountRepository;
 import com.pickleball_backend.pickleball.repository.UserRepository;
+import com.pickleball_backend.pickleball.repository.CourtRepository;
+import com.pickleball_backend.pickleball.repository.VenueRepository;
 import com.pickleball_backend.pickleball.service.EmailService;
+import com.pickleball_backend.pickleball.service.VenueService;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Autowired;
@@ -26,6 +33,9 @@
 import java.util.Arrays;
 import java.util.List;
 import java.util.Optional;
+import java.util.Set;
+import java.time.LocalDate;
+import java.time.LocalTime;
 
 @Service
 public class EventServiceImpl implements EventService {
@@ -50,8 +60,15 @@
     @Autowired
     private EventRegistrationRepository eventRegistrationRepository;
 
+    @Autowired
+    private CourtRepository courtRepository;
+    @Autowired
+    private VenueRepository venueRepository;
+    @Autowired
+    private VenueService venueService;
+
     @Override
-    public Event createEvent(Event event, String organizerUsername) {
+    public Event createEvent(EventCreateDto eventDto, String organizerUsername) {
         UserAccount organizer = userAccountRepository.findByUsername(organizerUsername)
                 .orElseThrow(() -> new RuntimeException("Organizer not found"));
 
@@ -62,84 +79,90 @@
         }
 
         // Validate event times
-        if (event.getStartTime() != null && event.getEndTime() != null) {
-            if (event.getStartTime().isAfter(event.getEndTime())) {
+        if (eventDto.getStartTime() != null && eventDto.getEndTime() != null) {
+            if (eventDto.getStartTime().isAfter(eventDto.getEndTime())) {
                 throw new RuntimeException("Start time must be before end time");
             }
-            if (event.getStartTime().isBefore(LocalDateTime.now())) {
+            if (eventDto.getStartTime().isBefore(LocalDateTime.now())) {
                 throw new RuntimeException("Start time cannot be in the past");
             }
         }
 
+        Event event = new Event();
+        event.setTitle(eventDto.getTitle());
+        event.setStartTime(eventDto.getStartTime());
+        event.setEndTime(eventDto.getEndTime());
+        event.setEventType(eventDto.getEventType());
+        event.setStatus(eventDto.getStatus());
+        event.setSchedule(eventDto.getSchedule());
+        event.setFeeAmount(eventDto.getFeeAmount());
         event.setOrganizerId(organizer.getUser().getId());
+        // [全場地自動分配]：當自動分配時，會直接分配所有可用場地給活動，不再根據人數裁剪，也不檢查總容量是否足夠。
+        Set<Court> courts;
+        if ((eventDto.getCourtIds() == null || eventDto.getCourtIds().isEmpty()) && eventDto.getVenueId() != null && eventDto.getCapacity() != null) {
+            // 自動分配 court
+            LocalDate date = eventDto.getStartTime().toLocalDate();
+            LocalTime startTime = eventDto.getStartTime().toLocalTime();
+            LocalTime endTime = eventDto.getEndTime().toLocalTime();
+            int peopleCount = eventDto.getCapacity();
+            List<Court> availableCourts = venueService.getAvailableCourts(eventDto.getVenueId(), date, startTime, endTime, peopleCount);
+            // 直接分配所有可用場地，不再根據人數裁剪，也不再丟出『此場地容量不足』
+            courts = new java.util.HashSet<>(availableCourts);
+        } else if (eventDto.getCourtIds() != null && !eventDto.getCourtIds().isEmpty()) {
+            courts = new java.util.HashSet<>(courtRepository.findAllById(eventDto.getCourtIds()));
+        } else {
+            courts = new java.util.HashSet<>();
+        }
+        event.setCourts(courts);
+        // capacity = courts.size() * 8 (每場8人)
+        if (eventDto.getCapacity() != null) {
+            event.setCapacity(eventDto.getCapacity());
+        } else {
+            event.setCapacity(courts.size() * 8);
+        }
+        // venue
+        if (eventDto.getVenueId() != null) {
+            Venue venue = venueRepository.findById(eventDto.getVenueId()).orElse(null);
+            event.setVenue(venue);
+        }
+        else {
+            event.setVenue(null);
+        }
+        event.setRegisteredCount(0);
         event.setStatus("PUBLISHED");
         Event savedEvent = eventRepository.save(event);
 
         // Notification logic
-        String[] eligibleTiers = event.getEligibility().split(",");
-        log.info("Event eligibility tiers: {}", Arrays.toString(eligibleTiers));
-        
-        // Clean up tier names (remove whitespace and convert to uppercase)
-        List<String> cleanTierNames = Arrays.stream(eligibleTiers)
-                .map(String::trim)
-                .map(String::toUpperCase)
-                .filter(tier -> !tier.isEmpty())
-                .toList();
-        
-        log.info("Cleaned tier names: {}", cleanTierNames);
-        
-        // Find eligible users by membership tier
-        List<User> eligibleUsers = userRepository.findByMembershipTierNameIn(cleanTierNames);
-        log.info("Total eligible users found: {}", eligibleUsers.size());
-        
-        // Fallback: if no users found by membership tier, try userType
-        if (eligibleUsers.isEmpty()) {
-            log.info("No users found by membership tier, trying userType fallback...");
-            eligibleUsers = userRepository.findByUserTypeIn(cleanTierNames);
-            log.info("Fallback: {} users found by userType", eligibleUsers.size());
-        }
-        
+        List<User> allUsers = userRepository.findAll();
         int emailsSent = 0;
         int emailsSkipped = 0;
-        
-        for (User user : eligibleUsers) {
+        for (User user : allUsers) {
             String userEmail = user.getEmail();
-            String userTier = user.getMember() != null && user.getMember().getTier() != null ? 
-                    user.getMember().getTier().getTierName().toString() : "NO_TIER";
-            String userType = user.getUserType();
-            
-            log.info("Processing user: {} | Email: {} | Tier: {} | UserType: {}", 
-                    user.getName(), userEmail, userTier, userType);
-            
             if (userEmail == null || userEmail.trim().isEmpty()) {
-                log.warn("Skipping user {} - no valid email address", user.getName());
                 emailsSkipped++;
                 continue;
             }
-            
             try {
                 emailService.sendEventNotification(userEmail, savedEvent);
                 emailsSent++;
-                log.info("Event notification sent successfully to: {}", userEmail);
             } catch (Exception e) {
-                log.error("Failed to send event notification to {}: {}", userEmail, e.getMessage());
                 emailsSkipped++;
             }
         }
         
         log.info("Event notification summary - Sent: {}, Skipped: {}, Total processed: {}", 
-                emailsSent, emailsSkipped, eligibleUsers.size());
+                emailsSent, emailsSkipped, allUsers.size());
 
         return savedEvent;
     }
 
     @Override
-    public Event updateEvent(Integer id, Event event, String organizerUsername, boolean notifyParticipants) {
+    public Event updateEvent(Integer id, EventUpdateDto eventDto, String organizerUsername, boolean notifyParticipants) {
         Optional<Event> existingOpt = eventRepository.findById(id);
         if (existingOpt.isEmpty()) {
             throw new RuntimeException("Event not found");
         }
-        Event existing = existingOpt.get();
+        Event event = existingOpt.get();
 
         // Get the organizer's user id
         UserAccount organizerAccount = userAccountRepository.findByUsername(organizerUsername)
@@ -147,30 +170,41 @@
         Integer organizerId = organizerAccount.getUser().getId();
 
         // Check if the current user is the organizer of this event
-        if (!existing.getOrganizerId().equals(organizerId)) {
+        if (!event.getOrganizerId().equals(organizerId)) {
             throw new RuntimeException("You are not authorized to edit this event.");
         }
 
         // Validate event times
-        if (event.getStartTime() != null && event.getEndTime() != null) {
-            if (event.getStartTime().isAfter(event.getEndTime())) {
+        if (eventDto.getStartTime() != null && eventDto.getEndTime() != null) {
+            if (eventDto.getStartTime().isAfter(eventDto.getEndTime())) {
                 throw new RuntimeException("Start time must be before end time");
             }
         }
         
         // Update fields as needed
-        existing.setTitle(event.getTitle());
-        existing.setStartTime(event.getStartTime());
-        existing.setEndTime(event.getEndTime());
-        existing.setEventType(event.getEventType());
-        existing.setCapacity(event.getCapacity());
-        existing.setLocation(event.getLocation());
-        existing.setStatus(event.getStatus());
-        existing.setEligibility(event.getEligibility());
-        existing.setSchedule(event.getSchedule());
-        // OrganizerId should not change
+        event.setTitle(eventDto.getTitle());
+        event.setStartTime(eventDto.getStartTime());
+        event.setEndTime(eventDto.getEndTime());
+        event.setEventType(eventDto.getEventType());
+        event.setStatus(eventDto.getStatus());
+        event.setSchedule(eventDto.getSchedule());
+        event.setFeeAmount(eventDto.getFeeAmount());
+        // courts
+        if (eventDto.getCourtIds() != null && !eventDto.getCourtIds().isEmpty()) {
+            Set<Court> courts = new java.util.HashSet<>(courtRepository.findAllById(eventDto.getCourtIds()));
+            event.setCourts(courts);
+            int totalCapacity = courts.size() * 8;
+            event.setCapacity(totalCapacity);
+        }
+        // venue
+        if (eventDto.getVenueId() != null) {
+            Venue venue = venueRepository.findById(eventDto.getVenueId()).orElse(null);
+            event.setVenue(venue);
+        } else {
+            event.setVenue(null);
+        }
         
-        Event updatedEvent = eventRepository.save(existing);
+        Event updatedEvent = eventRepository.save(event);
         
         // Send notifications if requested
         if (notifyParticipants) {
@@ -216,60 +250,24 @@
         event.setStatus("PUBLISHED");
         eventRepository.save(event);
 
-        // Notification logic
-        String[] eligibleTiers = event.getEligibility().split(",");
-        log.info("Event eligibility tiers: {}", Arrays.toString(eligibleTiers));
-        
-        // Clean up tier names (remove whitespace and convert to uppercase)
-        List<String> cleanTierNames = Arrays.stream(eligibleTiers)
-                .map(String::trim)
-                .map(String::toUpperCase)
-                .filter(tier -> !tier.isEmpty())
-                .toList();
-        
-        log.info("Cleaned tier names: {}", cleanTierNames);
-        
-        // Find eligible users by membership tier
-        List<User> eligibleUsers = userRepository.findByMembershipTierNameIn(cleanTierNames);
-        log.info("Total eligible users found: {}", eligibleUsers.size());
-        
-        // Fallback: if no users found by membership tier, try userType
-        if (eligibleUsers.isEmpty()) {
-            log.info("No users found by membership tier, trying userType fallback...");
-            eligibleUsers = userRepository.findByUserTypeIn(cleanTierNames);
-            log.info("Fallback: {} users found by userType", eligibleUsers.size());
-        }
-        
+        // 通知所有 user
+        List<User> allUsers = userRepository.findAll();
         int emailsSent = 0;
         int emailsSkipped = 0;
-        
-        for (User user : eligibleUsers) {
+        for (User user : allUsers) {
             String userEmail = user.getEmail();
-            String userTier = user.getMember() != null && user.getMember().getTier() != null ? 
-                    user.getMember().getTier().getTierName().toString() : "NO_TIER";
-            String userType = user.getUserType();
-            
-            log.info("Processing user: {} | Email: {} | Tier: {} | UserType: {}", 
-                    user.getName(), userEmail, userTier, userType);
-            
             if (userEmail == null || userEmail.trim().isEmpty()) {
-                log.warn("Skipping user {} - no valid email address", user.getName());
                 emailsSkipped++;
                 continue;
             }
-            
             try {
                 emailService.sendEventNotification(userEmail, event);
                 emailsSent++;
-                log.info("Event notification sent successfully to: {}", userEmail);
             } catch (Exception e) {
-                log.error("Failed to send event notification to {}: {}", userEmail, e.getMessage());
                 emailsSkipped++;
             }
         }
-        
-        log.info("Event notification summary - Sent: {}, Skipped: {}, Total processed: {}", 
-                emailsSent, emailsSkipped, eligibleUsers.size());
+        log.info("Event notification summary - Sent: {}, Skipped: {}, Total processed: {}", emailsSent, emailsSkipped, allUsers.size());
         return event;
     }
     
@@ -308,59 +306,23 @@
      */
     private void sendEventCancellationNotifications(Event event) {
         // Notification logic
-        String[] eligibleTiers = event.getEligibility().split(",");
-        log.info("Event cancellation - eligibility tiers: {}", Arrays.toString(eligibleTiers));
-        
-        // Clean up tier names (remove whitespace and convert to uppercase)
-        List<String> cleanTierNames = Arrays.stream(eligibleTiers)
-                .map(String::trim)
-                .map(String::toUpperCase)
-                .filter(tier -> !tier.isEmpty())
-                .toList();
-        
-        log.info("Event cancellation - cleaned tier names: {}", cleanTierNames);
-        
-        // Find eligible users by membership tier
-        List<User> eligibleUsers = userRepository.findByMembershipTierNameIn(cleanTierNames);
-        log.info("Event cancellation - total eligible users found: {}", eligibleUsers.size());
-        
-        // Fallback: if no users found by membership tier, try userType
-        if (eligibleUsers.isEmpty()) {
-            log.info("Event cancellation - no users found by membership tier, trying userType fallback...");
-            eligibleUsers = userRepository.findByUserTypeIn(cleanTierNames);
-            log.info("Event cancellation - fallback: {} users found by userType", eligibleUsers.size());
-        }
-        
+        List<User> allUsers = userRepository.findAll();
         int emailsSent = 0;
         int emailsSkipped = 0;
-        
-        for (User user : eligibleUsers) {
+        for (User user : allUsers) {
             String userEmail = user.getEmail();
-            String userTier = user.getMember() != null && user.getMember().getTier() != null ? 
-                    user.getMember().getTier().getTierName().toString() : "NO_TIER";
-            String userType = user.getUserType();
-            
-            log.info("Event cancellation - processing user: {} | Email: {} | Tier: {} | UserType: {}", 
-                    user.getName(), userEmail, userTier, userType);
-            
             if (userEmail == null || userEmail.trim().isEmpty()) {
-                log.warn("Event cancellation - skipping user {} - no valid email address", user.getName());
                 emailsSkipped++;
                 continue;
             }
-            
             try {
                 emailService.sendEventCancellationNotification(userEmail, event);
                 emailsSent++;
-                log.info("Event cancellation notification sent successfully to: {}", userEmail);
             } catch (Exception e) {
-                log.error("Failed to send event cancellation notification to {}: {}", userEmail, e.getMessage());
                 emailsSkipped++;
             }
         }
-        
-        log.info("Event cancellation notification summary - Sent: {}, Skipped: {}, Total processed: {}", 
-                emailsSent, emailsSkipped, eligibleUsers.size());
+        log.info("Event cancellation notification summary - Sent: {}, Skipped: {}, Total processed: {}", emailsSent, emailsSkipped, allUsers.size());
     }
     
     // New methods for browsing events
@@ -378,17 +340,14 @@
         // Set default status to PUBLISHED if not specified
         String status = filterDto.getStatus() != null ? filterDto.getStatus() : "PUBLISHED";
         
-        log.info("Browsing events with filters: eventType={}, skillLevel={}, location={}, status={}", 
-                filterDto.getEventType(), filterDto.getSkillLevel(), filterDto.getLocation(), status);
+        log.info("Browsing events with filters: eventType={}, location={}, status={}", 
+                filterDto.getEventType(), filterDto.getLocation(), status);
         
         return eventRepository.findEventsWithFilters(
             filterDto.getEventType(),
-            filterDto.getSkillLevel(),
-            filterDto.getLocation(),
             filterDto.getStartDate(),
             filterDto.getEndDate(),
             status,
-            filterDto.getEligibility(),
             filterDto.getSearchKeyword(),
             pageable
         );
@@ -406,10 +365,11 @@
         detailDto.setEndTime(event.getEndTime());
         detailDto.setEventType(event.getEventType());
         detailDto.setCapacity(event.getCapacity());
-        detailDto.setLocation(event.getLocation());
+        detailDto.setVenueId(event.getVenue() != null ? event.getVenue().getId() : null);
+        detailDto.setVenueName(event.getVenue() != null ? event.getVenue().getName() : "N/A");
+        detailDto.setVenueState(event.getVenue() != null ? event.getVenue().getState() : "N/A");
+        detailDto.setVenueLocation(event.getVenue() != null ? event.getVenue().getLocation() : "N/A");
         detailDto.setStatus(event.getStatus());
-        detailDto.setSkillLevel(event.getSkillLevel());
-        detailDto.setEligibility(event.getEligibility());
         detailDto.setSchedule(event.getSchedule());
         detailDto.setFeeAmount(event.getFeeAmount());
         detailDto.setOrganizerId(event.getOrganizerId());
@@ -451,40 +411,19 @@
             detailDto.setTimeUntilEvent("Event has passed");
         }
         
-        // Check if user is eligible (based on membership tier)
-        try {
-            UserAccount userAccount = userAccountRepository.findByUsername(username)
-                    .orElse(null);
-            if (userAccount != null) {
-                User user = userAccount.getUser();
-                String userTier = user.getMember() != null && user.getMember().getTier() != null ? 
-                        user.getMember().getTier().getTierName().toString() : "NO_TIER";
-                
-                detailDto.setEligible(event.getEligibility().toUpperCase().contains(userTier));
-            }
-        } catch (Exception e) {
-            log.warn("Could not check eligibility for user {}: {}", username, e.getMessage());
-            detailDto.setEligible(false);
-        }
-        
         return detailDto;
     }
     
     @Override
-    public Page<Event> getUpcomingEvents(String username) {
-        Pageable pageable = PageRequest.of(0, 10, Sort.by(Sort.Direction.ASC, "startTime"));
+    public Page<Event> getUpcomingEvents(String username, int page, int size) {
+        Pageable pageable = PageRequest.of(page, size, Sort.by(Sort.Direction.ASC, "startTime"));
         LocalDateTime now = LocalDateTime.now();
-        
-        log.info("Getting upcoming events for user: {}", username);
-        
+        log.info("Getting upcoming events for user: {} page: {} size: {}", username, page, size);
         return eventRepository.findEventsWithFilters(
             null, // eventType
-            null, // skillLevel
-            null, // location
-            now,  // startDate (from now)
+            null, // startDate
             null, // endDate
             "PUBLISHED", // status
-            null, // eligibility
             null, // searchKeyword
             pageable
         );
@@ -498,31 +437,9 @@
         
         return eventRepository.findEventsWithFilters(
             eventType, // eventType
-            null, // skillLevel
-            null, // location
-            null, // startDate
-            null, // endDate
-            "PUBLISHED", // status
-            null, // eligibility
-            null, // searchKeyword
-            pageable
-        );
-    }
-    
-    @Override
-    public Page<Event> getEventsBySkillLevel(String skillLevel, String username) {
-        Pageable pageable = PageRequest.of(0, 10, Sort.by(Sort.Direction.ASC, "startTime"));
-        
-        log.info("Getting events by skill level: {} for user: {}", skillLevel, username);
-        
-        return eventRepository.findEventsWithFilters(
-            null, // eventType
-            skillLevel, // skillLevel
-            null, // location
             null, // startDate
             null, // endDate
             "PUBLISHED", // status
-            null, // eligibility
             null, // searchKeyword
             pageable
         );
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/ClassSessionRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.repository;\r\n\r\nimport com.pickleball_backend.pickleball.entity.ClassSession;\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\nimport org.springframework.data.jpa.repository.Query;\r\nimport org.springframework.data.repository.query.Param;\r\nimport org.springframework.stereotype.Repository;\r\nimport java.time.LocalDateTime;\r\nimport java.util.List;\r\n\r\n@Repository\r\npublic interface ClassSessionRepository extends JpaRepository<ClassSession, Integer> {\r\n    List<ClassSession> findByCoachIdAndStartTimeBetween(\r\n            Integer coachId,\r\n            LocalDateTime start,\r\n            LocalDateTime end\r\n    );\r\n\r\n    boolean existsByCoachIdAndStartTimeBetweenAndStatusNot(\r\n            Integer coachId,\r\n            LocalDateTime start,\r\n            LocalDateTime end,\r\n            String status\r\n    );\r\n\r\n    boolean existsByCourtIdAndStartTimeBetweenAndStatusNot(\r\n            Integer courtId,\r\n            LocalDateTime start,\r\n            LocalDateTime end,\r\n            String status\r\n    );\r\n\r\n    @Query(\"SELECT COUNT(s) > 0 FROM ClassSession s \" +\r\n            \"WHERE s.id <> :sessionId \" +\r\n            \"AND s.court.id = :courtId \" +\r\n            \"AND s.status <> 'CANCELLED' \" +\r\n            \"AND ((s.startTime < :endTime AND s.endTime > :startTime))\")\r\n    boolean existsConflictForUpdate(\r\n            @Param(\"sessionId\") Integer sessionId,\r\n            @Param(\"courtId\") Integer courtId,\r\n            @Param(\"startTime\") LocalDateTime startTime,\r\n            @Param(\"endTime\") LocalDateTime endTime);\r\n\r\n    // 查詢某個教練的所有課程（可加上狀態、時間區間等條件）\r\n    @Query(\"SELECT cs FROM ClassSession cs WHERE cs.coach.id = :coachId ORDER BY cs.startTime\")\r\n    List<ClassSession> findScheduleByCoachId(@Param(\"coachId\") Integer coachId);\r\n\r\n    @Query(\"SELECT cs FROM ClassSession cs WHERE cs.coach.id = :coachId AND cs.startTime >= :from AND cs.endTime <= :to ORDER BY cs.startTime\")\r\n    List<ClassSession> findScheduleByCoachIdAndPeriod(@Param(\"coachId\") Integer coachId, @Param(\"from\") LocalDateTime from, @Param(\"to\") LocalDateTime to);\r\n\r\n    @Query(\"SELECT cs FROM ClassSession cs WHERE cs.coach.id = :coachId AND cs.court.id = :courtId AND cs.slotType = 'COACH_AVAILABILITY' AND cs.status = 'AVAILABLE' ORDER BY cs.startTime\")\r\n    List<ClassSession> findAvailableSlotsByCoachAndCourt(@Param(\"coachId\") Integer coachId, @Param(\"courtId\") Integer courtId);\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/ClassSessionRepository.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/ClassSessionRepository.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/ClassSessionRepository.java	(revision 97abd609899a67b781b8ace8e91358a782fc5acd)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/ClassSessionRepository.java	(date 1753722506307)
@@ -5,6 +5,7 @@
 import org.springframework.data.jpa.repository.Query;
 import org.springframework.data.repository.query.Param;
 import org.springframework.stereotype.Repository;
+
 import java.time.LocalDateTime;
 import java.util.List;
 
@@ -45,9 +46,68 @@
     @Query("SELECT cs FROM ClassSession cs WHERE cs.coach.id = :coachId ORDER BY cs.startTime")
     List<ClassSession> findScheduleByCoachId(@Param("coachId") Integer coachId);
 
-    @Query("SELECT cs FROM ClassSession cs WHERE cs.coach.id = :coachId AND cs.startTime >= :from AND cs.endTime <= :to ORDER BY cs.startTime")
-    List<ClassSession> findScheduleByCoachIdAndPeriod(@Param("coachId") Integer coachId, @Param("from") LocalDateTime from, @Param("to") LocalDateTime to);
+    @Query("SELECT cs FROM ClassSession cs LEFT JOIN FETCH cs.venue LEFT JOIN FETCH cs.court c LEFT JOIN FETCH c.venue LEFT JOIN FETCH cs.registrations r LEFT JOIN FETCH r.member m LEFT JOIN FETCH m.user u LEFT JOIN FETCH u.userAccount WHERE cs.coach.id = :coachId AND cs.startTime >= :from AND cs.startTime <= :to ORDER BY cs.startTime")
+    List<ClassSession> findScheduleByCoachIdAndPeriodWithVenue(@Param("coachId") Integer coachId, @Param("from") LocalDateTime from, @Param("to") LocalDateTime to);
+
+    @Query("SELECT DISTINCT cs FROM ClassSession cs " +
+           "LEFT JOIN FETCH cs.venue " +
+           "LEFT JOIN FETCH cs.court c " +
+           "LEFT JOIN FETCH c.venue " +
+           "LEFT JOIN FETCH cs.registrations r " +
+           "LEFT JOIN FETCH r.member m " +
+           "LEFT JOIN FETCH m.user u " +
+           "LEFT JOIN FETCH u.userAccount " +
+           "LEFT JOIN FETCH r.payment " +
+           "WHERE cs.coach.id = :coachId AND cs.startTime >= :from AND cs.startTime <= :to " +
+           "ORDER BY cs.startTime")
+    List<ClassSession> findScheduleByCoachIdAndPeriodWithFullRegistrations(@Param("coachId") Integer coachId, @Param("from") LocalDateTime from, @Param("to") LocalDateTime to);
 
     @Query("SELECT cs FROM ClassSession cs WHERE cs.coach.id = :coachId AND cs.court.id = :courtId AND cs.slotType = 'COACH_AVAILABILITY' AND cs.status = 'AVAILABLE' ORDER BY cs.startTime")
     List<ClassSession> findAvailableSlotsByCoachAndCourt(@Param("coachId") Integer coachId, @Param("courtId") Integer courtId);
+
+    @Query("SELECT COUNT(r) FROM ClassRegistration r WHERE r.classSession.id = :classSessionId")
+    int countRegistrations(@Param("classSessionId") int classSessionId);
+
+    List<ClassSession> findByStatus(String status);
+
+    @Query("SELECT cs FROM ClassSession cs WHERE (:courtId IS NULL OR cs.court.id = :courtId) AND cs.status IN ('AVAILABLE', 'FULL', 'CONFIRMED') AND cs.startTime >= :start AND cs.endTime <= :end")
+    List<ClassSession> findAvailableSessions(
+            @Param("courtId") Integer courtId,
+            @Param("start") LocalDateTime start,
+            @Param("end") LocalDateTime end);
+
+    @Query("SELECT DISTINCT cs FROM ClassSession cs " +
+           "LEFT JOIN FETCH cs.venue " +
+           "LEFT JOIN FETCH cs.court c " +
+           "LEFT JOIN FETCH c.venue " +
+           "LEFT JOIN FETCH cs.registrations r " +
+           "LEFT JOIN FETCH r.member m " +
+           "LEFT JOIN FETCH m.user u " +
+           "LEFT JOIN FETCH u.userAccount " +
+           "WHERE (:courtId IS NULL OR cs.court.id = :courtId) AND cs.status IN ('AVAILABLE', 'FULL', 'CONFIRMED') AND cs.startTime >= :start AND cs.endTime <= :end " +
+           "ORDER BY cs.startTime")
+    List<ClassSession> findAvailableSessionsWithRegistrations(
+            @Param("courtId") Integer courtId,
+            @Param("start") LocalDateTime start,
+            @Param("end") LocalDateTime end);
+
+    List<ClassSession> findByCourtIdAndStartTimeBetween(
+        Integer courtId,
+        LocalDateTime start,
+        LocalDateTime end
+    );
+
+    @Query("SELECT cs FROM ClassSession cs WHERE cs.status = 'AVAILABLE' AND cs.startTime > CURRENT_TIMESTAMP AND cs.currentParticipants = 0")
+    List<ClassSession> findUpcomingSessionsWithoutParticipants();
+
+    @Query("SELECT cs FROM ClassSession cs LEFT JOIN FETCH cs.court c LEFT JOIN FETCH c.venue WHERE cs.id IN :ids")
+    List<ClassSession> findAllByIdWithCourt(@Param("ids") List<Integer> ids);
+
+    List<ClassSession> findByRecurringGroupId(String recurringGroupId);
+
+    // 查詢所有 replacement class（replacementForSessionId 不為 null）for 某教練
+    List<ClassSession> findByReplacementForSessionIdNotNullAndCoachId(Integer coachId);
+    
+    // 查詢指定狀態和時間範圍內的課程
+    List<ClassSession> findByStatusAndStartTimeBetween(String status, LocalDateTime start, LocalDateTime end);
 }
\ No newline at end of file
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/EventController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.controller;\r\n\r\nimport com.pickleball_backend.pickleball.dto.EventDetailDto;\r\nimport com.pickleball_backend.pickleball.dto.EventFilterDto;\r\nimport com.pickleball_backend.pickleball.entity.Event;\r\nimport com.pickleball_backend.pickleball.repository.EventRepository;\r\nimport com.pickleball_backend.pickleball.service.EventService;\r\nimport jakarta.validation.Valid;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.springframework.data.domain.Page;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.security.access.prepost.PreAuthorize;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\nimport java.security.Principal;\r\nimport java.util.List;\r\n\r\n@RestController\r\n@RequestMapping(\"/api/events\")\r\n@RequiredArgsConstructor\r\npublic class EventController {\r\n\r\n    private final EventService eventService;\r\n    private final EventRepository eventRepository;\r\n\r\n    @PostMapping\r\n    @PreAuthorize(\"hasRole('EVENTORGANIZER')\")\r\n    public ResponseEntity<Event> createEvent(@Valid @RequestBody Event event, Principal principal) {\r\n        String username = principal.getName();\r\n        return ResponseEntity.ok(eventService.createEvent(event, username));\r\n    }\r\n\r\n    @PutMapping(\"/{id}\")\r\n    @PreAuthorize(\"hasRole('EVENTORGANIZER')\")\r\n    public ResponseEntity<Event> updateEvent(\r\n            @PathVariable Integer id,\r\n            @Valid @RequestBody Event event,\r\n            @RequestParam(defaultValue = \"false\") boolean notifyParticipants,\r\n            Principal principal) {\r\n        String username = principal.getName();\r\n        return ResponseEntity.ok(eventService.updateEvent(id, event, username, notifyParticipants));\r\n    }\r\n\r\n    /**\r\n     * Update event with notifications enabled\r\n     * Use this endpoint when you want to notify participants about event changes\r\n     * Example: PUT /api/events/1?notifyParticipants=true\r\n     */\r\n    @PutMapping(\"/{id}/notify\")\r\n    @PreAuthorize(\"hasRole('EVENTORGANIZER')\")\r\n    public ResponseEntity<Event> updateEventWithNotification(\r\n            @PathVariable Integer id,\r\n            @Valid @RequestBody Event event,\r\n            Principal principal) {\r\n        String username = principal.getName();\r\n        return ResponseEntity.ok(eventService.updateEvent(id, event, username, true));\r\n    }\r\n\r\n    @DeleteMapping(\"/{id}\")\r\n    @PreAuthorize(\"hasRole('EVENTORGANIZER')\")\r\n    public ResponseEntity<Void> deleteEvent(@PathVariable Integer id) {\r\n        eventService.deleteEvent(id);\r\n        return ResponseEntity.noContent().build();\r\n    }\r\n\r\n    @PostMapping(\"/{id}/publish\")\r\n    @PreAuthorize(\"hasRole('EVENTORGANIZER')\")\r\n    public ResponseEntity<Event> publishEvent(\r\n            @PathVariable Integer id,\r\n            Principal principal\r\n    ) {\r\n        String username = principal.getName();\r\n        Event publishedEvent = eventService.publishEvent(id, username);\r\n        return ResponseEntity.ok(publishedEvent);\r\n    }\r\n\r\n    @GetMapping(\"/published\")\r\n    public List<Event> getPublishedEvents(@RequestParam String tier) {\r\n        return eventRepository.findByStatusAndEligibilityContaining(\"PUBLISHED\", tier);\r\n    }\r\n\r\n    // New endpoints for browsing events\r\n    \r\n    /**\r\n     * Browse events with advanced filtering\r\n     * Supports filtering by event type, skill level, location, date range, etc.\r\n     */\r\n    @GetMapping(\"/browse\")\r\n    public ResponseEntity<Page<Event>> browseEvents(\r\n            @ModelAttribute EventFilterDto filterDto,\r\n            Principal principal) {\r\n        String username = principal.getName();\r\n        Page<Event> events = eventService.browseEvents(filterDto, username);\r\n        return ResponseEntity.ok(events);\r\n    }\r\n    \r\n    /**\r\n     * Get detailed information about a specific event\r\n     * Includes organizer details, eligibility check, and time calculations\r\n     */\r\n    @GetMapping(\"/{id}/details\")\r\n    public ResponseEntity<EventDetailDto> getEventDetails(\r\n            @PathVariable Integer id,\r\n            Principal principal) {\r\n        String username = principal.getName();\r\n        EventDetailDto eventDetails = eventService.getEventDetails(id, username);\r\n        return ResponseEntity.ok(eventDetails);\r\n    }\r\n    \r\n    /**\r\n     * Get all upcoming events\r\n     */\r\n    @GetMapping(\"/upcoming\")\r\n    public ResponseEntity<Page<Event>> getUpcomingEvents(Principal principal) {\r\n        String username = principal.getName();\r\n        Page<Event> events = eventService.getUpcomingEvents(username);\r\n        return ResponseEntity.ok(events);\r\n    }\r\n    \r\n    /**\r\n     * Get events by type (tournament, league, friendly match)\r\n     */\r\n    @GetMapping(\"/type/{eventType}\")\r\n    public ResponseEntity<Page<Event>> getEventsByType(\r\n            @PathVariable String eventType,\r\n            Principal principal) {\r\n        String username = principal.getName();\r\n        Page<Event> events = eventService.getEventsByType(eventType, username);\r\n        return ResponseEntity.ok(events);\r\n    }\r\n    \r\n    /**\r\n     * Get events by skill level (beginner, intermediate, advanced)\r\n     */\r\n    @GetMapping(\"/skill/{skillLevel}\")\r\n    public ResponseEntity<Page<Event>> getEventsBySkillLevel(\r\n            @PathVariable String skillLevel,\r\n            Principal principal) {\r\n        String username = principal.getName();\r\n        Page<Event> events = eventService.getEventsBySkillLevel(skillLevel, username);\r\n        return ResponseEntity.ok(events);\r\n    }\r\n    \r\n    /**\r\n     * Get friendly matches specifically\r\n     */\r\n    @GetMapping(\"/friendly-matches\")\r\n    public ResponseEntity<Page<Event>> getFriendlyMatches(Principal principal) {\r\n        String username = principal.getName();\r\n        Page<Event> events = eventService.getEventsByType(\"friendly match\", username);\r\n        return ResponseEntity.ok(events);\r\n    }\r\n    \r\n    /**\r\n     * Get tournaments specifically\r\n     */\r\n    @GetMapping(\"/tournaments\")\r\n    public ResponseEntity<Page<Event>> getTournaments(Principal principal) {\r\n        String username = principal.getName();\r\n        Page<Event> events = eventService.getEventsByType(\"tournament\", username);\r\n        return ResponseEntity.ok(events);\r\n    }\r\n    \r\n    /**\r\n     * Get leagues specifically\r\n     */\r\n    @GetMapping(\"/leagues\")\r\n    public ResponseEntity<Page<Event>> getLeagues(Principal principal) {\r\n        String username = principal.getName();\r\n        Page<Event> events = eventService.getEventsByType(\"league\", username);\r\n        return ResponseEntity.ok(events);\r\n    }\r\n    \r\n    /**\r\n     * Get available event types for filtering\r\n     */\r\n    @GetMapping(\"/types\")\r\n    public ResponseEntity<List<String>> getAvailableEventTypes() {\r\n        List<String> eventTypes = List.of(\"tournament\", \"league\", \"friendly match\", \"workshop\", \"social\");\r\n        return ResponseEntity.ok(eventTypes);\r\n    }\r\n    \r\n    /**\r\n     * Get available skill levels for filtering\r\n     */\r\n    @GetMapping(\"/skill-levels\")\r\n    public ResponseEntity<List<String>> getAvailableSkillLevels() {\r\n        List<String> skillLevels = List.of(\"beginner\", \"intermediate\", \"advanced\", \"all levels\");\r\n        return ResponseEntity.ok(skillLevels);\r\n    }\r\n    \r\n    /**\r\n     * Get event statistics (count by type, upcoming events, etc.)\r\n     */\r\n    @GetMapping(\"/stats\")\r\n    public ResponseEntity<Object> getEventStats(Principal principal) {\r\n        String username = principal.getName();\r\n        \r\n        // Get counts for different event types\r\n        Page<Event> tournaments = eventService.getEventsByType(\"tournament\", username);\r\n        Page<Event> leagues = eventService.getEventsByType(\"league\", username);\r\n        Page<Event> friendlyMatches = eventService.getEventsByType(\"friendly match\", username);\r\n        Page<Event> upcomingEvents = eventService.getUpcomingEvents(username);\r\n        \r\n        var stats = new Object() {\r\n            public final long totalTournaments = tournaments.getTotalElements();\r\n            public final long totalLeagues = leagues.getTotalElements();\r\n            public final long totalFriendlyMatches = friendlyMatches.getTotalElements();\r\n            public final long totalUpcomingEvents = upcomingEvents.getTotalElements();\r\n        };\r\n        \r\n        return ResponseEntity.ok(stats);\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/EventController.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/EventController.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/EventController.java	(revision 97abd609899a67b781b8ace8e91358a782fc5acd)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/EventController.java	(date 1753722506317)
@@ -2,6 +2,8 @@
 
 import com.pickleball_backend.pickleball.dto.EventDetailDto;
 import com.pickleball_backend.pickleball.dto.EventFilterDto;
+import com.pickleball_backend.pickleball.dto.EventCreateDto;
+import com.pickleball_backend.pickleball.dto.EventUpdateDto;
 import com.pickleball_backend.pickleball.entity.Event;
 import com.pickleball_backend.pickleball.repository.EventRepository;
 import com.pickleball_backend.pickleball.service.EventService;
@@ -25,20 +27,20 @@
 
     @PostMapping
     @PreAuthorize("hasRole('EVENTORGANIZER')")
-    public ResponseEntity<Event> createEvent(@Valid @RequestBody Event event, Principal principal) {
+    public ResponseEntity<Event> createEvent(@Valid @RequestBody EventCreateDto eventDto, Principal principal) {
         String username = principal.getName();
-        return ResponseEntity.ok(eventService.createEvent(event, username));
+        return ResponseEntity.ok(eventService.createEvent(eventDto, username));
     }
 
     @PutMapping("/{id}")
     @PreAuthorize("hasRole('EVENTORGANIZER')")
     public ResponseEntity<Event> updateEvent(
             @PathVariable Integer id,
-            @Valid @RequestBody Event event,
+            @Valid @RequestBody EventUpdateDto eventDto,
             @RequestParam(defaultValue = "false") boolean notifyParticipants,
             Principal principal) {
         String username = principal.getName();
-        return ResponseEntity.ok(eventService.updateEvent(id, event, username, notifyParticipants));
+        return ResponseEntity.ok(eventService.updateEvent(id, eventDto, username, notifyParticipants));
     }
 
     /**
@@ -50,10 +52,10 @@
     @PreAuthorize("hasRole('EVENTORGANIZER')")
     public ResponseEntity<Event> updateEventWithNotification(
             @PathVariable Integer id,
-            @Valid @RequestBody Event event,
+            @Valid @RequestBody EventUpdateDto eventDto,
             Principal principal) {
         String username = principal.getName();
-        return ResponseEntity.ok(eventService.updateEvent(id, event, username, true));
+        return ResponseEntity.ok(eventService.updateEvent(id, eventDto, username, true));
     }
 
     @DeleteMapping("/{id}")
@@ -74,11 +76,6 @@
         return ResponseEntity.ok(publishedEvent);
     }
 
-    @GetMapping("/published")
-    public List<Event> getPublishedEvents(@RequestParam String tier) {
-        return eventRepository.findByStatusAndEligibilityContaining("PUBLISHED", tier);
-    }
-
     // New endpoints for browsing events
     
     /**
@@ -111,9 +108,12 @@
      * Get all upcoming events
      */
     @GetMapping("/upcoming")
-    public ResponseEntity<Page<Event>> getUpcomingEvents(Principal principal) {
+    public ResponseEntity<Page<Event>> getUpcomingEvents(
+            Principal principal,
+            @RequestParam(defaultValue = "0") int page,
+            @RequestParam(defaultValue = "9") int size) {
         String username = principal.getName();
-        Page<Event> events = eventService.getUpcomingEvents(username);
+        Page<Event> events = eventService.getUpcomingEvents(username, page, size);
         return ResponseEntity.ok(events);
     }
     
@@ -129,18 +129,6 @@
         return ResponseEntity.ok(events);
     }
     
-    /**
-     * Get events by skill level (beginner, intermediate, advanced)
-     */
-    @GetMapping("/skill/{skillLevel}")
-    public ResponseEntity<Page<Event>> getEventsBySkillLevel(
-            @PathVariable String skillLevel,
-            Principal principal) {
-        String username = principal.getName();
-        Page<Event> events = eventService.getEventsBySkillLevel(skillLevel, username);
-        return ResponseEntity.ok(events);
-    }
-    
     /**
      * Get friendly matches specifically
      */
@@ -180,15 +168,6 @@
         return ResponseEntity.ok(eventTypes);
     }
     
-    /**
-     * Get available skill levels for filtering
-     */
-    @GetMapping("/skill-levels")
-    public ResponseEntity<List<String>> getAvailableSkillLevels() {
-        List<String> skillLevels = List.of("beginner", "intermediate", "advanced", "all levels");
-        return ResponseEntity.ok(skillLevels);
-    }
-    
     /**
      * Get event statistics (count by type, upcoming events, etc.)
      */
@@ -200,7 +179,7 @@
         Page<Event> tournaments = eventService.getEventsByType("tournament", username);
         Page<Event> leagues = eventService.getEventsByType("league", username);
         Page<Event> friendlyMatches = eventService.getEventsByType("friendly match", username);
-        Page<Event> upcomingEvents = eventService.getUpcomingEvents(username);
+        Page<Event> upcomingEvents = eventService.getUpcomingEvents(username, 0, 9);
         
         var stats = new Object() {
             public final long totalTournaments = tournaments.getTotalElements();
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/ClassSession.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.entity;\r\n\r\nimport jakarta.persistence.*;\r\nimport lombok.Data;\r\nimport java.time.LocalDateTime;\r\n\r\n@Entity\r\n@Data\r\n@Table(name = \"classsession\")\r\npublic class ClassSession {\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Integer id;\r\n\r\n    private LocalDateTime startTime;\r\n    private LocalDateTime endTime;\r\n    private String status; // AVAILABLE, BOOKED, CANCELLED, COMPLETED\r\n    private String note;\r\n\r\n    @Column(name = \"slot_type\")\r\n    private String slotType; // COACH_AVAILABILITY or REGULAR_BOOKING\r\n\r\n    @Column(name = \"created_at\")\r\n    private LocalDateTime createdAt;\r\n\r\n    @Column(name = \"updated_at\")\r\n    private LocalDateTime updatedAt;\r\n\r\n    @ManyToOne\r\n    @JoinColumn(name = \"coach_id\")\r\n    private User coach;\r\n\r\n    @ManyToOne\r\n    @JoinColumn(name = \"court_id\")\r\n    private Court court;\r\n\r\n    @ManyToOne\r\n    @JoinColumn(name = \"player_id\")\r\n    private User player;\r\n\r\n    @OneToOne\r\n    @JoinColumn(name = \"payment_id\") // 這個欄位名要和你的資料庫一致\r\n    private Payment payment;\r\n\r\n    @OneToOne(mappedBy = \"session\", cascade = CascadeType.ALL)\r\n    private CancellationRequest cancellationRequest;\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/ClassSession.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/ClassSession.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/ClassSession.java	(revision 97abd609899a67b781b8ace8e91358a782fc5acd)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/ClassSession.java	(date 1753737447769)
@@ -2,9 +2,22 @@
 
 import jakarta.persistence.*;
 import lombok.Data;
+
+import java.time.LocalDate;
 import java.time.LocalDateTime;
+import java.util.List;
+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
+import com.fasterxml.jackson.annotation.JsonBackReference;
+import com.fasterxml.jackson.annotation.JsonManagedReference;
+import lombok.Getter;
+import lombok.NoArgsConstructor;
+import lombok.Setter;
+import com.fasterxml.jackson.annotation.JsonIgnore;
 
 @Entity
+@Getter
+@Setter
+@NoArgsConstructor
 @Data
 @Table(name = "classsession")
 public class ClassSession {
@@ -12,10 +25,13 @@
     @GeneratedValue(strategy = GenerationType.IDENTITY)
     private Integer id;
 
+    @Column(name = "start_time")
     private LocalDateTime startTime;
     private LocalDateTime endTime;
-    private String status; // AVAILABLE, BOOKED, CANCELLED, COMPLETED
+    private String status; // AVAILABLE, BOOKED, CANCELLED, COMPLETED, OPEN, BOOKED_BY_COACH, BOOKED_BY_USER
     private String note;
+    @Column(name = "experience_year")
+    private Integer experienceYear;
 
     @Column(name = "slot_type")
     private String slotType; // COACH_AVAILABILITY or REGULAR_BOOKING
@@ -28,10 +44,12 @@
 
     @ManyToOne
     @JoinColumn(name = "coach_id")
+    @com.fasterxml.jackson.annotation.JsonIgnore
     private User coach;
 
     @ManyToOne
     @JoinColumn(name = "court_id")
+    @JsonIgnoreProperties("sessions") // 只忽略 sessions，讓 venue 信息能傳遞
     private Court court;
 
     @ManyToOne
@@ -45,4 +63,70 @@
     @OneToOne(mappedBy = "session", cascade = CascadeType.ALL)
     private CancellationRequest cancellationRequest;
 
+    // 新增欄位
+    @Column(name = "max_participants")
+    private Integer maxParticipants;
+
+    @Column(name = "description")
+    private String description;
+
+    @Column(name = "price", nullable = false)
+    private double price = 0.0; // 默認0，強制教練設置價格
+
+    @Column(name = "title", nullable = false)
+    private String title;
+
+    // 新增：當前參與人數
+    @Column(name = "current_participants")
+    private int currentParticipants = 0;
+
+    @Column(name = "is_recurring")
+    private Boolean isRecurring; // 是否為固定課程
+
+    @Column(name = "recurrence_pattern")
+    private String recurrencePattern; // 週期模式：WEEKLY/MONTHLY
+
+    @Column(name = "recurrence_days")
+    private String recurrenceDays; // 週期日：MON,WED,FRI
+
+    @Column(name = "recurrence_end_date")
+    private LocalDate recurrenceEndDate; // 週期結束日
+
+    @Column(name = "recurring_group_id")
+    private String recurringGroupId; // recurring 課程分組用
+
+    @ManyToOne
+    @JoinColumn(name = "venue_id")
+    private Venue venue;
+
+    // 新增：報名關聯
+    @OneToMany(mappedBy = "classSession")
+    private List<ClassRegistration> registrations;
+
+    // Replacement class: reference to the original cancelled session
+    @Column(name = "replacement_for_session_id")
+    private Integer replacementForSessionId;
+
+    // 商務邏輯方法：檢查是否可報名
+    public boolean canRegister() {
+        return "AVAILABLE".equals(status) && currentParticipants < maxParticipants;
+    }
+
+    // 商務邏輯方法：增加參與者
+    public void addParticipant() {
+        if (currentParticipants < maxParticipants) {
+            currentParticipants++;
+            if (currentParticipants >= maxParticipants) {
+                status = "FULL";
+            }
+        }
+    }
+
+    public Boolean getRecurring() {
+        return isRecurring;
+    }
+
+    public void setRecurring(Boolean recurring) {
+        isRecurring = recurring;
+    }
 }
\ No newline at end of file
Index: pickleball-frontend/src/pages/LoginPage.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useState } from 'react';\r\nimport {\r\n  TextField,\r\n  Box,\r\n  Container,\r\n  Link,\r\n  FormControlLabel,\r\n  Checkbox,\r\n  Typography,\r\n  Button,\r\n  Paper,\r\n  InputAdornment,\r\n  IconButton,\r\n  Alert,\r\n  Divider,\r\n  Chip,\r\n  Card,\r\n  CardContent,\r\n  Fade,\r\n  Slide,\r\n  CircularProgress,\r\n  Stack,\r\n  Avatar\r\n} from '@mui/material';\r\nimport {\r\n  Visibility,\r\n  VisibilityOff,\r\n  Person,\r\n  Lock,\r\n  Email,\r\n  SportsTennis,\r\n  Login as LoginIcon,\r\n  ArrowForward,\r\n  Security,\r\n  CheckCircle,\r\n  Google,\r\n  Facebook,\r\n  Apple\r\n} from '@mui/icons-material';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport UserService from '../service/UserService';\r\nimport Navbar from '../components/common/Navbar';\r\nimport { useAuth } from '../context/AuthContext';\r\nimport { useTheme, alpha } from '@mui/material';\r\n\r\nconst LoginPage = () => {\r\n  const navigate = useNavigate();\r\n  const { login } = useAuth();\r\n  const theme = useTheme();\r\n  const [credentials, setCredentials] = useState({\r\n    usernameOrEmail: '',\r\n    password: '',\r\n    rememberMe: false,\r\n  });\r\n  const [error, setError] = useState('');\r\n  const [showPassword, setShowPassword] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [focusedField, setFocusedField] = useState('');\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value, type, checked } = e.target;\r\n    setCredentials(prev => ({\r\n      ...prev,\r\n      [name]: type === 'checkbox' ? checked : value,\r\n    }));\r\n    // Clear error when user starts typing\r\n    if (error) setError('');\r\n  };\r\n\r\n  const handleLogin = async () => {\r\n    setIsLoading(true);\r\n    setError('');\r\n    \r\n    try {\r\n      const response = await axios.post('http://localhost:8081/api/auth/login', {\r\n        usernameOrEmail: credentials.usernameOrEmail,\r\n        password: credentials.password\r\n      });\r\n      \r\n      if (response.data.token) {\r\n        login(response.data.token);\r\n        navigate('/home');\r\n      }\r\n    } catch (err) {\r\n      setError(err.response?.data?.message || 'Invalid credentials. Please try again.');\r\n      console.error('Login error:', err);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleKeyPress = (e) => {\r\n    if (e.key === 'Enter') {\r\n      handleLogin();\r\n    }\r\n  };\r\n\r\n  const togglePasswordVisibility = () => {\r\n    setShowPassword(!showPassword);\r\n  };\r\n\r\n  const SocialLoginButton = ({ icon: Icon, provider, color }) => (\r\n    <Button\r\n      variant=\"outlined\"\r\n      fullWidth\r\n      startIcon={<Icon />}\r\n      sx={{\r\n        py: 1.5,\r\n        borderColor: theme.palette.divider,\r\n        color: theme.palette.text.primary,\r\n        '&:hover': {\r\n          borderColor: color,\r\n          backgroundColor: `${color}10`,\r\n          transform: 'translateY(-1px)',\r\n        },\r\n        transition: 'all 0.3s ease',\r\n        borderRadius: 2,\r\n        textTransform: 'none',\r\n        fontWeight: 500\r\n      }}\r\n    >\r\n      Continue with {provider}\r\n    </Button>\r\n  );\r\n\r\n  const FeatureCard = ({ icon: Icon, title, description }) => (\r\n    <Card \r\n      elevation={0} \r\n      sx={{ \r\n        backgroundColor: alpha(theme.palette.background.paper, 0.85),\r\n        border: `1px solid ${theme.palette.divider}`,\r\n        borderRadius: 3,\r\n        p: 2,\r\n        height: '100%',\r\n        transition: 'transform 0.3s ease',\r\n        '&:hover': {\r\n          transform: 'translateY(-4px)'\r\n        }\r\n      }}\r\n    >\r\n      <CardContent sx={{ textAlign: 'center', color: theme.palette.text.primary }}>\r\n        <Box sx={{\r\n          width: 60,\r\n          height: 60,\r\n          borderRadius: '50%',\r\n          backgroundColor: theme.palette.primary.light,\r\n          display: 'flex',\r\n          alignItems: 'center',\r\n          justifyContent: 'center',\r\n          mx: 'auto',\r\n          mb: 2\r\n        }}>\r\n          <Icon sx={{ fontSize: 30, color: theme.palette.primary.main }} />\r\n        </Box>\r\n        <Typography variant=\"h6\" fontWeight=\"bold\" gutterBottom>\r\n          {title}\r\n        </Typography>\r\n        <Typography variant=\"body2\" sx={{ color: theme.palette.text.secondary }}>\r\n          {description}\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n\r\n  return (\r\n    <Box sx={{ display: 'flex', flexDirection: 'column', minHeight: '100vh' }}>\r\n      <Navbar />\r\n      \r\n      <Box sx={{ \r\n        flexGrow: 1, \r\n        display: 'flex', \r\n        alignItems: 'center', \r\n        py: 4,\r\n        pt: { xs: 10, sm: 12 },\r\n        backgroundColor: theme.palette.background.default,\r\n        position: 'relative',\r\n        overflow: 'hidden'\r\n      }}>\r\n        {/* Removed decorative background circles for clarity and theme consistency */}\r\n\r\n        <Container maxWidth=\"lg\" sx={{ position: 'relative', zIndex: 1 }}>\r\n          <Slide direction=\"up\" in={true} mountOnEnter unmountOnExit>\r\n            <Box sx={{ display: 'flex', flexDirection: { xs: 'column', lg: 'row' }, gap: 4, alignItems: 'center', pt: 10 }}>\r\n              \r\n              {/* Left Side - Welcome Content */}\r\n              <Box sx={{ \r\n                flex: 1, \r\n                color: theme.palette.text.primary,\r\n                textAlign: { xs: 'center', lg: 'left' },\r\n                mb: { xs: 4, lg: 0 }\r\n              }}>\r\n                <Box sx={{ mb: 4 }}>\r\n                  <Typography variant=\"h2\" sx={{ \r\n                    fontWeight: 800, \r\n                    mb: 2,\r\n                    color: theme.palette.primary.main,\r\n                    fontSize: { xs: '2.5rem', md: '3.5rem' }\r\n                  }}>\r\n                    Welcome Back!\r\n                  </Typography>\r\n                  <Typography variant=\"h5\" sx={{ \r\n                    opacity: 0.9, \r\n                    fontWeight: 400,\r\n                    mb: 4\r\n                  }}>\r\n                    Continue your pickleball journey with us\r\n                  </Typography>\r\n                  \r\n                  <Stack direction={{ xs: 'column', sm: 'row' }} spacing={2} sx={{ mb: 4 }}>\r\n                    <Chip \r\n                      icon={<CheckCircle />} \r\n                      label=\"Trusted by 10,000+ players\" \r\n                      sx={{ \r\n                        backgroundColor: alpha(theme.palette.primary.main, 0.12),\r\n                        color: theme.palette.primary.main,\r\n                        fontWeight: 500\r\n                      }} \r\n                    />\r\n                    <Chip \r\n                      icon={<Security />} \r\n                      label=\"Secure & Safe\" \r\n                      sx={{ \r\n                        backgroundColor: alpha(theme.palette.success.main, 0.12),\r\n                        color: theme.palette.success.main,\r\n                        fontWeight: 500\r\n                      }} \r\n                    />\r\n                  </Stack>\r\n                </Box>\r\n\r\n                {/* Feature Cards */}\r\n                <Box sx={{ \r\n                  display: { xs: 'none', lg: 'grid' },\r\n                  gridTemplateColumns: 'repeat(2, 1fr)',\r\n                  gap: 2,\r\n                  mt: 4\r\n                }}>\r\n                  <FeatureCard \r\n                    icon={SportsTennis}\r\n                    title=\"Book Courts\"\r\n                    description=\"Reserve your favorite courts instantly\"\r\n                  />\r\n                  <FeatureCard \r\n                    icon={Person}\r\n                    title=\"Find Partners\"\r\n                    description=\"Connect with players at your level\"\r\n                  />\r\n                </Box>\r\n              </Box>\r\n\r\n              {/* Right Side - Login Form */}\r\n              <Box sx={{ \r\n                flex: { xs: 'none', lg: 1 }, \r\n                width: { xs: '100%', sm: '400px', lg: '450px' },\r\n                maxWidth: '450px'\r\n              }}>\r\n                <Fade in={true} timeout={800}>\r\n                  <Paper\r\n                    elevation={4}\r\n                    sx={{\r\n                      p: 4,\r\n                      pt: 6,\r\n                      borderRadius: 4,\r\n                      backgroundColor: theme.palette.background.paper,\r\n                      border: `1px solid ${theme.palette.divider}`,\r\n                      position: 'relative',\r\n                      overflow: 'hidden'\r\n                    }}\r\n                  >\r\n                    {/* Header */}\r\n                    <Box sx={{ textAlign: 'center', mb: 4 }}>\r\n                    \r\n                      <Typography variant=\"h4\" sx={{ \r\n                        fontWeight: 700, \r\n                        color: theme.palette.text.primary,\r\n                        mb: 1\r\n                      }}>\r\n                        Sign In\r\n                      </Typography>\r\n                      <Typography variant=\"body1\" color=\"text.secondary\">\r\n                        Enter your credentials to access your account\r\n                      </Typography>\r\n                    </Box>\r\n              \r\n                    {/* Login Form */}\r\n                    <Box component=\"form\" onKeyPress={handleKeyPress}>\r\n                      <TextField\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        label=\"Username or Email\"\r\n                        name=\"usernameOrEmail\"\r\n                        value={credentials.usernameOrEmail}\r\n                        onChange={handleChange}\r\n                        onFocus={() => setFocusedField('usernameOrEmail')}\r\n                        onBlur={() => setFocusedField('')}\r\n                        InputProps={{\r\n                          startAdornment: (\r\n                            <InputAdornment position=\"start\">\r\n                              {credentials.usernameOrEmail.includes('@') ? \r\n                                <Email color={focusedField === 'usernameOrEmail' ? 'primary' : 'action'} /> :\r\n                                <Person color={focusedField === 'usernameOrEmail' ? 'primary' : 'action'} />\r\n                              }\r\n                            </InputAdornment>\r\n                          ),\r\n                        }}\r\n                        sx={{ \r\n                          mb: 2,\r\n                          '& .MuiOutlinedInput-root': {\r\n                            borderRadius: 2,\r\n                            transition: 'all 0.3s ease',\r\n                            '&:hover': {\r\n                              transform: 'translateY(-1px)',\r\n                              boxShadow: theme.shadows[4]\r\n                            }\r\n                          }\r\n                        }}\r\n                      />\r\n\r\n                      <TextField\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        name=\"password\"\r\n                        label=\"Password\"\r\n                        type={showPassword ? 'text' : 'password'}\r\n                        value={credentials.password}\r\n                        onChange={handleChange}\r\n                        onFocus={() => setFocusedField('password')}\r\n                        onBlur={() => setFocusedField('')}\r\n                        InputProps={{\r\n                          startAdornment: (\r\n                            <InputAdornment position=\"start\">\r\n                              <Lock color={focusedField === 'password' ? 'primary' : 'action'} />\r\n                            </InputAdornment>\r\n                          ),\r\n                          endAdornment: (\r\n                            <InputAdornment position=\"end\">\r\n                              <IconButton\r\n                                aria-label=\"toggle password visibility\"\r\n                                onClick={togglePasswordVisibility}\r\n                                edge=\"end\"\r\n                              >\r\n                                {showPassword ? <VisibilityOff /> : <Visibility />}\r\n                              </IconButton>\r\n                            </InputAdornment>\r\n                          ),\r\n                        }}\r\n                        sx={{ \r\n                          mb: 2,\r\n                          '& .MuiOutlinedInput-root': {\r\n                            borderRadius: 2,\r\n                            transition: 'all 0.3s ease',\r\n                            '&:hover': {\r\n                              transform: 'translateY(-1px)',\r\n                              boxShadow: theme.shadows[4]\r\n                            }\r\n                          }\r\n                        }}\r\n                      />\r\n\r\n                      <Box sx={{ \r\n                        display: 'flex', \r\n                        justifyContent: 'space-between',\r\n                        alignItems: 'center',\r\n                        mb: 3\r\n                      }}>\r\n                        <FormControlLabel\r\n                          control={\r\n                            <Checkbox\r\n                              checked={credentials.rememberMe}\r\n                              onChange={handleChange}\r\n                              name=\"rememberMe\"\r\n                              color=\"primary\"\r\n                            />\r\n                          }\r\n                          label={\r\n                            <Typography variant=\"body2\" fontWeight={500}>\r\n                              Remember Me\r\n                            </Typography>\r\n                          }\r\n                        />\r\n                        <Link\r\n                          component=\"button\"\r\n                          type=\"button\"\r\n                          variant=\"body2\"\r\n                          sx={{ \r\n                            color: theme.palette.primary.main, \r\n                            fontWeight: 600,\r\n                            textDecoration: 'none',\r\n                            '&:hover': {\r\n                              textDecoration: 'underline'\r\n                            }\r\n                          }}\r\n                          onClick={() => navigate('/forgot-password')}\r\n                        >\r\n                          Forgot password?\r\n                        </Link>\r\n                      </Box>\r\n\r\n                      {error && (\r\n                        <Fade in={!!error}>\r\n                          <Alert \r\n                            severity=\"error\" \r\n                            sx={{ \r\n                              mb: 2, \r\n                              borderRadius: 2,\r\n                              '& .MuiAlert-message': {\r\n                                fontWeight: 500\r\n                              }\r\n                            }}\r\n                          >\r\n                            {error}\r\n                          </Alert>\r\n                        </Fade>\r\n                      )}\r\n\r\n                      <Button\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        onClick={handleLogin}\r\n                        disabled={isLoading}\r\n                        endIcon={isLoading ? <CircularProgress size={20} color=\"inherit\" /> : <ArrowForward />}\r\n                        sx={{\r\n                          mt: 1,\r\n                          mb: 3,\r\n                          py: 1.8,\r\n                          fontSize: '1rem',\r\n                          fontWeight: 700,\r\n                          borderRadius: 2,\r\n                          textTransform: 'none',\r\n                          backgroundColor: theme.palette.primary.main,\r\n                          boxShadow: theme.shadows[8],\r\n                          transition: 'all 0.3s ease',\r\n                          '&:hover': {\r\n                            transform: 'translateY(-2px)',\r\n                            boxShadow: theme.shadows[12],\r\n                            backgroundColor: theme.palette.primary.dark,\r\n                          },\r\n                          '&:disabled': {\r\n                            transform: 'none',\r\n                            boxShadow: theme.shadows[4]\r\n                          }\r\n                        }}\r\n                      >\r\n                        {isLoading ? 'Signing In...' : 'Sign In'}\r\n                      </Button>\r\n\r\n                      <Box sx={{ textAlign: 'center' }}>\r\n                        <Typography variant=\"body2\" color=\"text.secondary\">\r\n                          Don't have an account?{' '}\r\n                          <Link \r\n                            component=\"button\"\r\n                            type=\"button\"\r\n                            variant=\"body2\"\r\n                            onClick={() => navigate('/register')}\r\n                            sx={{ \r\n                              color: theme.palette.primary.main, \r\n                              fontWeight: 700,\r\n                              textDecoration: 'none',\r\n                              '&:hover': {\r\n                                textDecoration: 'underline'\r\n                              }\r\n                            }}\r\n                          >\r\n                            Create Account\r\n                          </Link>\r\n                        </Typography>\r\n                      </Box>\r\n                      <Box sx={{ my: 3, position: 'relative' }}>\r\n                        <Divider sx={{ borderColor: theme.palette.divider }}>\r\n                          <Chip \r\n                            label=\"OR\" \r\n                            size=\"small\" \r\n                            sx={{ \r\n                              backgroundColor: theme.palette.background.paper,\r\n                              color: theme.palette.primary.main,\r\n                              fontWeight: 600,\r\n                              fontSize: '0.75rem'\r\n                            }} \r\n                          />\r\n                        </Divider>\r\n                      </Box>\r\n                      {/* Social Login Buttons */}\r\n                    <Box sx={{ mb: 3 }}>\r\n                      <Stack spacing={2}>\r\n                        <SocialLoginButton icon={Google} provider=\"Google\" color=\"#4285f4\" />\r\n                        <SocialLoginButton icon={Facebook} provider=\"Facebook\" color=\"#1877f2\" />\r\n                      </Stack>\r\n                      \r\n                      \r\n                    </Box>\r\n                    </Box>\r\n                  </Paper>\r\n                </Fade>\r\n              </Box>\r\n            </Box>\r\n          </Slide>\r\n        </Container>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default LoginPage;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball-frontend/src/pages/LoginPage.jsx b/pickleball-frontend/src/pages/LoginPage.jsx
--- a/pickleball-frontend/src/pages/LoginPage.jsx	(revision 97abd609899a67b781b8ace8e91358a782fc5acd)
+++ b/pickleball-frontend/src/pages/LoginPage.jsx	(date 1753722627249)
@@ -71,18 +71,26 @@
   const handleLogin = async () => {
     setIsLoading(true);
     setError('');
-    
+
     try {
       const response = await axios.post('http://localhost:8081/api/auth/login', {
         usernameOrEmail: credentials.usernameOrEmail,
         password: credentials.password
       });
-      
+
       if (response.data.token) {
-        login(response.data.token);
-        navigate('/home');
-      }
-    } catch (err) {
+            // 用 context 的 login 方法同步状态
+            login(response.data.token);
+            // 解析 userType
+            const payload = JSON.parse(atob(response.data.token.split('.')[1]));
+            const userType = payload.userType || payload.role || '';
+            if (userType === 'Coach' || userType === 'COACH') {
+              navigate('/coaching');
+            } else {
+            navigate('/home');
+            }
+          }
+        } catch (err) {
       setError(err.response?.data?.message || 'Invalid credentials. Please try again.');
       console.error('Login error:', err);
     } finally {
@@ -125,9 +133,9 @@
   );
 
   const FeatureCard = ({ icon: Icon, title, description }) => (
-    <Card 
-      elevation={0} 
-      sx={{ 
+    <Card
+      elevation={0}
+      sx={{
         backgroundColor: alpha(theme.palette.background.paper, 0.85),
         border: `1px solid ${theme.palette.divider}`,
         borderRadius: 3,
@@ -182,66 +190,66 @@
         <Container maxWidth="lg" sx={{ position: 'relative', zIndex: 1 }}>
           <Slide direction="up" in={true} mountOnEnter unmountOnExit>
             <Box sx={{ display: 'flex', flexDirection: { xs: 'column', lg: 'row' }, gap: 4, alignItems: 'center', pt: 10 }}>
-              
+
               {/* Left Side - Welcome Content */}
-              <Box sx={{ 
-                flex: 1, 
+              <Box sx={{
+                flex: 1,
                 color: theme.palette.text.primary,
                 textAlign: { xs: 'center', lg: 'left' },
                 mb: { xs: 4, lg: 0 }
               }}>
                 <Box sx={{ mb: 4 }}>
-                  <Typography variant="h2" sx={{ 
-                    fontWeight: 800, 
+                  <Typography variant="h2" sx={{
+                    fontWeight: 800,
                     mb: 2,
                     color: theme.palette.primary.main,
                     fontSize: { xs: '2.5rem', md: '3.5rem' }
                   }}>
                     Welcome Back!
                   </Typography>
-                  <Typography variant="h5" sx={{ 
-                    opacity: 0.9, 
+                  <Typography variant="h5" sx={{
+                    opacity: 0.9,
                     fontWeight: 400,
                     mb: 4
                   }}>
                     Continue your pickleball journey with us
                   </Typography>
-                  
+
                   <Stack direction={{ xs: 'column', sm: 'row' }} spacing={2} sx={{ mb: 4 }}>
-                    <Chip 
-                      icon={<CheckCircle />} 
-                      label="Trusted by 10,000+ players" 
-                      sx={{ 
+                    <Chip
+                      icon={<CheckCircle />}
+                      label="Trusted by 10,000+ players"
+                      sx={{
                         backgroundColor: alpha(theme.palette.primary.main, 0.12),
                         color: theme.palette.primary.main,
                         fontWeight: 500
-                      }} 
+                      }}
                     />
-                    <Chip 
-                      icon={<Security />} 
-                      label="Secure & Safe" 
-                      sx={{ 
+                    <Chip
+                      icon={<Security />}
+                      label="Secure & Safe"
+                      sx={{
                         backgroundColor: alpha(theme.palette.success.main, 0.12),
                         color: theme.palette.success.main,
                         fontWeight: 500
-                      }} 
+                      }}
                     />
                   </Stack>
                 </Box>
 
                 {/* Feature Cards */}
-                <Box sx={{ 
+                <Box sx={{
                   display: { xs: 'none', lg: 'grid' },
                   gridTemplateColumns: 'repeat(2, 1fr)',
                   gap: 2,
                   mt: 4
                 }}>
-                  <FeatureCard 
+                  <FeatureCard
                     icon={SportsTennis}
                     title="Book Courts"
                     description="Reserve your favorite courts instantly"
                   />
-                  <FeatureCard 
+                  <FeatureCard
                     icon={Person}
                     title="Find Partners"
                     description="Connect with players at your level"
@@ -250,8 +258,8 @@
               </Box>
 
               {/* Right Side - Login Form */}
-              <Box sx={{ 
-                flex: { xs: 'none', lg: 1 }, 
+              <Box sx={{
+                flex: { xs: 'none', lg: 1 },
                 width: { xs: '100%', sm: '400px', lg: '450px' },
                 maxWidth: '450px'
               }}>
@@ -270,9 +278,9 @@
                   >
                     {/* Header */}
                     <Box sx={{ textAlign: 'center', mb: 4 }}>
-                    
-                      <Typography variant="h4" sx={{ 
-                        fontWeight: 700, 
+
+                      <Typography variant="h4" sx={{
+                        fontWeight: 700,
                         color: theme.palette.text.primary,
                         mb: 1
                       }}>
@@ -282,7 +290,7 @@
                         Enter your credentials to access your account
                       </Typography>
                     </Box>
-              
+
                     {/* Login Form */}
                     <Box component="form" onKeyPress={handleKeyPress}>
                       <TextField
@@ -298,14 +306,14 @@
                         InputProps={{
                           startAdornment: (
                             <InputAdornment position="start">
-                              {credentials.usernameOrEmail.includes('@') ? 
+                              {credentials.usernameOrEmail.includes('@') ?
                                 <Email color={focusedField === 'usernameOrEmail' ? 'primary' : 'action'} /> :
                                 <Person color={focusedField === 'usernameOrEmail' ? 'primary' : 'action'} />
                               }
                             </InputAdornment>
                           ),
                         }}
-                        sx={{ 
+                        sx={{
                           mb: 2,
                           '& .MuiOutlinedInput-root': {
                             borderRadius: 2,
@@ -347,7 +355,7 @@
                             </InputAdornment>
                           ),
                         }}
-                        sx={{ 
+                        sx={{
                           mb: 2,
                           '& .MuiOutlinedInput-root': {
                             borderRadius: 2,
@@ -360,8 +368,8 @@
                         }}
                       />
 
-                      <Box sx={{ 
-                        display: 'flex', 
+                      <Box sx={{
+                        display: 'flex',
                         justifyContent: 'space-between',
                         alignItems: 'center',
                         mb: 3
@@ -385,8 +393,8 @@
                           component="button"
                           type="button"
                           variant="body2"
-                          sx={{ 
-                            color: theme.palette.primary.main, 
+                          sx={{
+                            color: theme.palette.primary.main,
                             fontWeight: 600,
                             textDecoration: 'none',
                             '&:hover': {
@@ -401,10 +409,10 @@
 
                       {error && (
                         <Fade in={!!error}>
-                          <Alert 
-                            severity="error" 
-                            sx={{ 
-                              mb: 2, 
+                          <Alert
+                            severity="error"
+                            sx={{
+                              mb: 2,
                               borderRadius: 2,
                               '& .MuiAlert-message': {
                                 fontWeight: 500
@@ -450,13 +458,13 @@
                       <Box sx={{ textAlign: 'center' }}>
                         <Typography variant="body2" color="text.secondary">
                           Don't have an account?{' '}
-                          <Link 
+                          <Link
                             component="button"
                             type="button"
                             variant="body2"
                             onClick={() => navigate('/register')}
-                            sx={{ 
-                              color: theme.palette.primary.main, 
+                            sx={{
+                              color: theme.palette.primary.main,
                               fontWeight: 700,
                               textDecoration: 'none',
                               '&:hover': {
@@ -470,15 +478,15 @@
                       </Box>
                       <Box sx={{ my: 3, position: 'relative' }}>
                         <Divider sx={{ borderColor: theme.palette.divider }}>
-                          <Chip 
-                            label="OR" 
-                            size="small" 
-                            sx={{ 
+                          <Chip
+                            label="OR"
+                            size="small"
+                            sx={{
                               backgroundColor: theme.palette.background.paper,
                               color: theme.palette.primary.main,
                               fontWeight: 600,
                               fontSize: '0.75rem'
-                            }} 
+                            }}
                           />
                         </Divider>
                       </Box>
@@ -488,8 +496,8 @@
                         <SocialLoginButton icon={Google} provider="Google" color="#4285f4" />
                         <SocialLoginButton icon={Facebook} provider="Facebook" color="#1877f2" />
                       </Stack>
-                      
-                      
+
+
                     </Box>
                     </Box>
                   </Paper>
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/UserController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.controller;\r\n\r\nimport com.pickleball_backend.pickleball.dto.UserDto;\r\nimport com.pickleball_backend.pickleball.entity.User;\r\nimport com.pickleball_backend.pickleball.repository.UserRepository;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.web.bind.annotation.*;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\n@RestController\r\n@RequestMapping(\"/api/users\")\r\npublic class UserController {\r\n\r\n    @Autowired\r\n    private UserRepository userRepository;\r\n\r\n    @GetMapping(\"/search\")\r\n    public ResponseEntity<List<UserDto>> searchUsers(@RequestParam String query) {\r\n        List<User> users = userRepository.searchActiveUsers(query);\r\n        List<UserDto> result = users.stream()\r\n                .map(user -> new UserDto(\r\n                        // FIX: Get username from UserAccount\r\n                        user.getUserAccount() != null ? user.getUserAccount().getUsername() : null,\r\n                        user.getName(),\r\n                        // FIX: Use existing getProfileImage() method\r\n                        user.getProfileImage()\r\n                ))\r\n                .collect(Collectors.toList());\r\n        return ResponseEntity.ok(result);\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/UserController.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/UserController.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/UserController.java	(revision 97abd609899a67b781b8ace8e91358a782fc5acd)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/UserController.java	(date 1753722627303)
@@ -2,11 +2,15 @@
 
 import com.pickleball_backend.pickleball.dto.UserDto;
 import com.pickleball_backend.pickleball.entity.User;
+import com.pickleball_backend.pickleball.entity.UserAccount;
 import com.pickleball_backend.pickleball.repository.UserRepository;
+import com.pickleball_backend.pickleball.repository.UserAccountRepository;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.http.ResponseEntity;
 import org.springframework.web.bind.annotation.*;
+import java.util.HashMap;
 import java.util.List;
+import java.util.Map;
 import java.util.stream.Collectors;
 
 @RestController
@@ -15,6 +19,9 @@
 
     @Autowired
     private UserRepository userRepository;
+    
+    @Autowired
+    private UserAccountRepository userAccountRepository;
 
     @GetMapping("/search")
     public ResponseEntity<List<UserDto>> searchUsers(@RequestParam String query) {
@@ -30,4 +37,87 @@
                 .collect(Collectors.toList());
         return ResponseEntity.ok(result);
     }
+
+    @GetMapping("/{userId}")
+    public ResponseEntity<?> getUserById(@PathVariable Integer userId) {
+        try {
+            System.out.println("=== getUserById called for userId: " + userId + " ===");
+            
+            User user = userRepository.findById(userId).orElse(null);
+            if (user == null) {
+                System.out.println("User not found for ID: " + userId);
+                return ResponseEntity.notFound().build();
+            }
+            
+            System.out.println("Found user: " + user.getName() + " (Type: " + user.getUserType() + ")");
+            System.out.println("User email: " + user.getEmail());
+            System.out.println("UserAccount: " + (user.getUserAccount() != null ? "exists" : "null"));
+            if (user.getUserAccount() != null) {
+                System.out.println("UserAccount username: " + user.getUserAccount().getUsername());
+            }
+            
+            // 返回用戶信息，包括 username
+            Map<String, Object> result = new HashMap<>();
+            result.put("id", user.getId());
+            result.put("name", user.getName());
+            result.put("email", user.getEmail());
+            result.put("userType", user.getUserType());
+            
+            if (user.getUserAccount() != null) {
+                result.put("username", user.getUserAccount().getUsername());
+                result.put("profileImage", user.getUserAccount().getProfileImage());
+            } else {
+                result.put("username", null);
+                result.put("profileImage", null);
+            }
+            
+            System.out.println("Returning user data: " + result);
+            return ResponseEntity.ok(result);
+            
+        } catch (Exception e) {
+            System.out.println("Error in getUserById: " + e.getMessage());
+            e.printStackTrace();
+            return ResponseEntity.badRequest().body(Map.of("error", e.getMessage()));
+        }
+    }
+
+    @GetMapping("/profile/{username}")
+    public ResponseEntity<?> getUserProfileByUsername(@PathVariable String username) {
+        try {
+            System.out.println("=== getUserProfileByUsername called for username: " + username + " ===");
+            
+            // 先根據 username 找到 UserAccount
+            UserAccount userAccount = userAccountRepository.findByUsername(username).orElse(null);
+            if (userAccount == null) {
+                System.out.println("UserAccount not found for username: " + username);
+                return ResponseEntity.notFound().build();
+            }
+            
+            // 再找到對應的 User
+            User user = userAccount.getUser();
+            if (user == null) {
+                System.out.println("User not found for UserAccount: " + username);
+                return ResponseEntity.notFound().build();
+            }
+            
+            System.out.println("Found user: " + user.getName() + " (Type: " + user.getUserType() + ")");
+            
+            // 返回用戶基本資料（不包含敏感資訊）
+            Map<String, Object> result = new HashMap<>();
+            result.put("username", username);
+            result.put("name", user.getName());
+            result.put("email", user.getEmail());
+            result.put("phone", user.getPhone());
+            result.put("userType", user.getUserType());
+            result.put("profileImage", userAccount.getProfileImage());
+            
+            System.out.println("Returning user profile data: " + result);
+            return ResponseEntity.ok(result);
+            
+        } catch (Exception e) {
+            System.out.println("Error in getUserProfileByUsername: " + e.getMessage());
+            e.printStackTrace();
+            return ResponseEntity.badRequest().body(Map.of("error", e.getMessage()));
+        }
+    }
 }
\ No newline at end of file
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/MessageService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.service;\r\n\r\nimport com.pickleball_backend.pickleball.dto.MessageDto;\r\nimport com.pickleball_backend.pickleball.dto.MessageResponseDto;\r\nimport com.pickleball_backend.pickleball.entity.*;\r\nimport com.pickleball_backend.pickleball.repository.*;\r\nimport org.hibernate.Hibernate;\r\nimport lombok.extern.slf4j.Slf4j;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.stereotype.Service;\r\nimport org.springframework.transaction.annotation.Transactional;\r\n\r\n\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\nimport java.util.Comparator;\r\nimport java.util.Map;\r\nimport java.util.Objects;\r\n\r\n@Service\r\npublic class MessageService {\r\n    private final MessageRepository messageRepository;\r\n    private final UserRepository userRepository;\r\n    private final FriendshipService friendshipService;\r\n    private static final Logger logger = LoggerFactory.getLogger(MessageService.class);\r\n\r\n    @Autowired\r\n    public MessageService(MessageRepository messageRepository,\r\n                          UserRepository userRepository,\r\n                          FriendshipService friendshipService) {\r\n        this.messageRepository = messageRepository;\r\n        this.userRepository = userRepository;\r\n        this.friendshipService = friendshipService;\r\n    }\r\n\r\n    @Autowired\r\n    private EmailService emailService; // Add this if not present\r\n\r\n    @Transactional\r\n    public MessageDto sendMessage(String senderUsername, String recipientUsername, String content, String imageUrl) {\r\n        User sender = userRepository.findByUsernameCaseInsensitive(senderUsername)\r\n                .orElseThrow(() -> new IllegalArgumentException(\"Sender not found: \" + senderUsername));\r\n        User recipient = userRepository.findByUsernameCaseInsensitive(recipientUsername)\r\n                .orElseThrow(() -> new IllegalArgumentException(\"Receiver not found: \" + recipientUsername));\r\n\r\n        // Ensure friendship\r\n        if (!friendshipService.areFriends(sender.getId(), recipient.getId())) {\r\n            throw new SecurityException(\"You can only message friends\");\r\n        }\r\n\r\n        Message message = new Message();\r\n        message.setSender(sender);\r\n        message.setReceiver(recipient);\r\n        message.setContent(content);\r\n        message.setImageUrl(imageUrl); // Ensure imageUrl is set\r\n\r\n        // Rely on @PrePersist to generate conversationId\r\n        Message savedMessage = messageRepository.save(message);\r\n\r\n        // Send email notification to recipient\r\n        if (recipient.getEmail() != null && !recipient.getEmail().isEmpty()) {\r\n            String preview = (content != null && !content.isEmpty()) ? content : \"[Image]\";\r\n            emailService.sendMessageNotification(\r\n                recipient.getEmail(),\r\n                senderUsername,\r\n                preview\r\n            );\r\n        }\r\n\r\n        return convertToDto(savedMessage);\r\n    }\r\n\r\n    public List<MessageResponseDto> getConversation(String username1, String username2) {\r\n        User user1 = userRepository.findByUsernameCaseInsensitive(username1)\r\n                .orElseThrow(() -> new IllegalArgumentException(\"User not found: \" + username1));\r\n        User user2 = userRepository.findByUsernameCaseInsensitive(username2)\r\n                .orElseThrow(() -> new IllegalArgumentException(\"User not found: \" + username2));\r\n\r\n        int minId = Math.min(user1.getId(), user2.getId());\r\n        int maxId = Math.max(user1.getId(), user2.getId());\r\n        String conversationId = minId + \"-\" + maxId;\r\n\r\n        return messageRepository.findByConversationId(conversationId).stream()\r\n                .map(this::convertToResponseDto)\r\n                .collect(Collectors.toList());\r\n    }\r\n\r\n    private MessageResponseDto convertToResponseDto(Message message) {\r\n        MessageResponseDto dto = new MessageResponseDto();\r\n        dto.setId(message.getId());\r\n        dto.setContent(message.getContent());\r\n        dto.setTimestamp(message.getTimestamp());\r\n        dto.setDelivered(message.isDelivered());\r\n        dto.setRead(message.isRead());\r\n        dto.setConversationId(message.getConversationId());\r\n        dto.setImageUrl(message.getImageUrl());\r\n\r\n        // 处理发送者信息\r\n        processUserInfo(message.getSender(), dto, true);\r\n\r\n        // 处理接收者信息\r\n        processUserInfo(message.getReceiver(), dto, false);\r\n\r\n        return dto;\r\n    }\r\n\r\n    private void processUserInfo(User user, MessageResponseDto dto, boolean isSender) {\r\n        if (user == null) {\r\n            logger.warn(\"User is null for message: {}\", dto.getId());\r\n            return;\r\n        }\r\n\r\n        try {\r\n            // 初始化关联实体\r\n            Hibernate.initialize(user);\r\n\r\n            // 确保 UserAccount 被加载\r\n            if (user.getUserAccount() != null) {\r\n                Hibernate.initialize(user.getUserAccount());\r\n            }\r\n        } catch (Exception e) {\r\n            logger.error(\"Error initializing user: {}\", e.getMessage());\r\n        }\r\n\r\n        if (isSender) {\r\n            // 使用安全的方法获取用户名\r\n            dto.setSenderUsername(getSafeUsername(user));\r\n\r\n            // 使用安全的方法获取头像\r\n            dto.setSenderProfileImage(getSafeProfileImage(user));\r\n        } else {\r\n            dto.setReceiverUsername(getSafeUsername(user));\r\n        }\r\n    }\r\n\r\n    // 安全获取用户名的方法\r\n    private String getSafeUsername(User user) {\r\n        // 优先从 UserAccount 获取\r\n        if (user.getUserAccount() != null && user.getUserAccount().getUsername() != null) {\r\n            return user.getUserAccount().getUsername();\r\n        }\r\n\r\n        // 其次从 User 实体获取\r\n        if (user.getName() != null) {\r\n            return user.getName();\r\n        }\r\n\r\n        // 最后从邮箱生成\r\n        if (user.getEmail() != null) {\r\n            return user.getEmail().split(\"@\")[0];\r\n        }\r\n\r\n        // 最终回退方案\r\n        return \"user\" + user.getId();\r\n    }\r\n\r\n    // 安全获取头像的方法\r\n    private String getSafeProfileImage(User user) {\r\n        // 优先从 UserAccount 获取\r\n        if (user.getUserAccount() != null && user.getUserAccount().getProfileImage() != null) {\r\n            return user.getUserAccount().getProfileImage();\r\n        }\r\n\r\n        // 其次从 User 实体获取\r\n        if (user.getProfileImage() != null) {\r\n            return user.getProfileImage();\r\n        }\r\n\r\n        // 默认头像\r\n        return \"/default-profile.png\";\r\n    }\r\n\r\n    @Transactional\r\n    public void markMessagesAsDelivered(List<Integer> messageIds) {\r\n        if (messageIds == null || messageIds.isEmpty()) return;\r\n\r\n        List<Message> messages = messageRepository.findAllById(messageIds);\r\n        messages.forEach(message -> message.setDelivered(true));\r\n        messageRepository.saveAll(messages);\r\n    }\r\n\r\n    @Transactional\r\n    public void markMessagesAsRead(List<Integer> messageIds) {\r\n        if (messageIds == null || messageIds.isEmpty()) return;\r\n\r\n        List<Message> messages = messageRepository.findAllById(messageIds);\r\n        messages.forEach(message -> message.setRead(true));\r\n        messageRepository.saveAll(messages);\r\n    }\r\n\r\n    public List<Object> getConversationPreviews(String currentUsername) {\r\n        User currentUser = userRepository.findByUsernameCaseInsensitive(currentUsername)\r\n                .orElseThrow(() -> new IllegalArgumentException(\"User not found: \" + currentUsername));\r\n\r\n        // Get all conversations for the current user\r\n        List<Message> allMessages = messageRepository.findByUserId(currentUser.getId());\r\n        \r\n        // Group messages by conversation\r\n        Map<String, List<Message>> conversations = allMessages.stream()\r\n                .collect(Collectors.groupingBy(Message::getConversationId));\r\n\r\n        return conversations.entrySet().stream()\r\n                .map(entry -> {\r\n                    String conversationId = entry.getKey();\r\n                    List<Message> messages = entry.getValue();\r\n                    \r\n                    // Get the latest message\r\n                    Message latestMessage = messages.stream()\r\n                            .max(Comparator.comparing(Message::getTimestamp))\r\n                            .orElse(null);\r\n                    \r\n                    if (latestMessage == null) return null;\r\n                    \r\n                    // Determine the other user in the conversation\r\n                    User otherUser = latestMessage.getSender().equals(currentUser) \r\n                            ? latestMessage.getReceiver() \r\n                            : latestMessage.getSender();\r\n                    \r\n                    // Count unread messages from the other user\r\n                    long unreadCount = messages.stream()\r\n                            .filter(msg -> msg.getReceiver().equals(currentUser) && !msg.isRead())\r\n                            .count();\r\n                    \r\n                    return Map.of(\r\n                            \"id\", conversationId,\r\n                            \"lastMessage\", Map.of(\r\n                                    \"content\", latestMessage.getContent(),\r\n                                    \"timestamp\", latestMessage.getTimestamp()\r\n                            ),\r\n                            \"otherUser\", Map.of(\r\n                                    \"id\", otherUser.getId(),\r\n                                    \"username\", getSafeUsername(otherUser),\r\n                                    \"name\", otherUser.getName(),\r\n                                    \"profileImage\", getSafeProfileImage(otherUser)\r\n                            ),\r\n                            \"unreadCount\", unreadCount\r\n                    );\r\n                })\r\n                .filter(Objects::nonNull)\r\n                .collect(Collectors.toList());\r\n    }\r\n\r\n    private MessageDto convertToDto(Message message) {\r\n        MessageDto dto = new MessageDto();\r\n        dto.setId(message.getId());\r\n\r\n        if (message.getSender() != null && message.getSender().getUserAccount() != null) {\r\n            dto.setSenderUsername(message.getSender().getUserAccount().getUsername());\r\n        }\r\n\r\n        if (message.getReceiver() != null && message.getReceiver().getUserAccount() != null) {\r\n            dto.setRecipientUsername(message.getReceiver().getUserAccount().getUsername());\r\n        }\r\n\r\n        dto.setContent(message.getContent());\r\n        dto.setTimestamp(message.getTimestamp().toString());\r\n        dto.setDelivered(message.isDelivered());\r\n        dto.setRead(message.isRead());\r\n        dto.setConversationId(message.getConversationId());\r\n        dto.setImageUrl(message.getImageUrl());\r\n        return dto;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/MessageService.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/MessageService.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/MessageService.java	(revision 97abd609899a67b781b8ace8e91358a782fc5acd)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/MessageService.java	(date 1753765578996)
@@ -14,6 +14,7 @@
 
 
 import java.util.List;
+import java.util.Optional;
 import java.util.stream.Collectors;
 import java.util.Comparator;
 import java.util.Map;
@@ -38,15 +39,22 @@
     @Autowired
     private EmailService emailService; // Add this if not present
 
+    @Autowired
+    private CoachRepository coachRepository;
+
     @Transactional
     public MessageDto sendMessage(String senderUsername, String recipientUsername, String content, String imageUrl) {
-        User sender = userRepository.findByUsernameCaseInsensitive(senderUsername)
+        User sender = findUserByUsernameOrEmail(senderUsername)
                 .orElseThrow(() -> new IllegalArgumentException("Sender not found: " + senderUsername));
-        User recipient = userRepository.findByUsernameCaseInsensitive(recipientUsername)
+        User recipient = findUserByUsernameOrEmail(recipientUsername)
                 .orElseThrow(() -> new IllegalArgumentException("Receiver not found: " + recipientUsername));
 
-        // Ensure friendship
-        if (!friendshipService.areFriends(sender.getId(), recipient.getId())) {
+        // Check if sender or recipient is a coach - if so, allow messaging without friendship
+        boolean isSenderCoach = coachRepository.findById(sender.getId()).isPresent();
+        boolean isRecipientCoach = coachRepository.findById(recipient.getId()).isPresent();
+        
+        // Allow messaging if either sender or recipient is a coach, or if they are friends
+        if (!isSenderCoach && !isRecipientCoach && !friendshipService.areFriends(sender.getId(), recipient.getId())) {
             throw new SecurityException("You can only message friends");
         }
 
@@ -73,9 +81,9 @@
     }
 
     public List<MessageResponseDto> getConversation(String username1, String username2) {
-        User user1 = userRepository.findByUsernameCaseInsensitive(username1)
+        User user1 = findUserByUsernameOrEmail(username1)
                 .orElseThrow(() -> new IllegalArgumentException("User not found: " + username1));
-        User user2 = userRepository.findByUsernameCaseInsensitive(username2)
+        User user2 = findUserByUsernameOrEmail(username2)
                 .orElseThrow(() -> new IllegalArgumentException("User not found: " + username2));
 
         int minId = Math.min(user1.getId(), user2.getId());
@@ -135,6 +143,18 @@
         }
     }
 
+    // 通過 username 或 email 查找用戶
+    private Optional<User> findUserByUsernameOrEmail(String usernameOrEmail) {
+        // 首先嘗試通過 username 查找
+        Optional<User> userByUsername = userRepository.findByUsernameCaseInsensitive(usernameOrEmail);
+        if (userByUsername.isPresent()) {
+            return userByUsername;
+        }
+        
+        // 如果找不到，嘗試通過 email 查找
+        return userRepository.findByEmail(usernameOrEmail);
+    }
+
     // 安全获取用户名的方法
     private String getSafeUsername(User user) {
         // 优先从 UserAccount 获取
@@ -223,6 +243,9 @@
                             .filter(msg -> msg.getReceiver().equals(currentUser) && !msg.isRead())
                             .count();
                     
+                    // Check if other user is a coach
+                    boolean isCoach = coachRepository.findById(otherUser.getId()).isPresent();
+                    
                     return Map.of(
                             "id", conversationId,
                             "lastMessage", Map.of(
@@ -233,7 +256,9 @@
                                     "id", otherUser.getId(),
                                     "username", getSafeUsername(otherUser),
                                     "name", otherUser.getName(),
-                                    "profileImage", getSafeProfileImage(otherUser)
+                                    "profileImage", getSafeProfileImage(otherUser),
+                                    "userType", isCoach ? "COACH" : "USER",
+                                    "email", otherUser.getEmail()
                             ),
                             "unreadCount", unreadCount
                     );
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/User.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.entity;\r\n\r\nimport jakarta.persistence.*;\r\nimport lombok.AllArgsConstructor;\r\nimport lombok.Data;\r\nimport lombok.NoArgsConstructor;\r\n\r\nimport java.time.LocalDate;\r\nimport java.time.LocalDateTime;\r\nimport java.util.List;\r\nimport java.util.UUID;\r\n\r\n@Entity\r\n@Data\r\n@NoArgsConstructor\r\n@AllArgsConstructor\r\n@Table(name = \"user\")\r\npublic class User {\r\n\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Integer id;\r\n\r\n    @Column(nullable = false, unique = true)\r\n    private UUID uuid = UUID.randomUUID();\r\n\r\n    private String name;\r\n    private String gender;\r\n    private String email;\r\n    private String phone;\r\n\r\n    private LocalDate dob;\r\n\r\n    @Column(name = \"user_type\")\r\n    private String userType;\r\n\r\n    @Column(name = \"requested_user_type\")\r\n    private String requestedUserType;\r\n\r\n    private LocalDateTime createdAt = LocalDateTime.now();\r\n    private LocalDateTime updatedAt = LocalDateTime.now();\r\n\r\n    @Column(name = \"bookings_made\")\r\n    private int bookingsMade;\r\n\r\n    @Column(name = \"booking_hours\")\r\n    private double bookingHours;\r\n\r\n    @Column(name = \"sumos_joined\")\r\n    private int sumosJoined;\r\n\r\n    @Column(name = \"amount_spent\")\r\n    private double amountSpent;\r\n\r\n    @OneToOne(mappedBy = \"user\", cascade = CascadeType.ALL, fetch = FetchType.LAZY)\r\n    private Member member;\r\n\r\n    @OneToOne(mappedBy = \"user\", cascade = CascadeType.ALL, fetch = FetchType.EAGER)\r\n    private UserAccount userAccount;\r\n\r\n    public String getProfileImage() {\r\n        return (userAccount != null) ? userAccount.getProfileImage() : null;\r\n    }\r\n\r\n\r\n\r\n    @OneToMany(mappedBy = \"sender\", cascade = CascadeType.ALL, fetch = FetchType.LAZY)\r\n    private List<Message> sentMessages;\r\n\r\n    @OneToMany(mappedBy = \"receiver\", cascade = CascadeType.ALL, fetch = FetchType.LAZY)\r\n    private List<Message> receivedMessages;\r\n\r\n    @OneToMany(mappedBy = \"coach\", cascade = CascadeType.ALL)\r\n    private List<ClassSession> coachSessions;\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/User.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/User.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/User.java	(revision 97abd609899a67b781b8ace8e91358a782fc5acd)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/User.java	(date 1753722627323)
@@ -10,6 +10,10 @@
 import java.util.List;
 import java.util.UUID;
 
+import com.fasterxml.jackson.annotation.JsonIgnore;
+import com.fasterxml.jackson.annotation.JsonBackReference;
+import com.fasterxml.jackson.annotation.JsonManagedReference;
+
 @Entity
 @Data
 @NoArgsConstructor
@@ -71,5 +75,6 @@
     private List<Message> receivedMessages;
 
     @OneToMany(mappedBy = "coach", cascade = CascadeType.ALL)
+    @JsonIgnore // 或 @JsonBackReference
     private List<ClassSession> coachSessions;
 }
\ No newline at end of file
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/EmailService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.service;\r\n\r\nimport com.pickleball_backend.pickleball.entity.Booking;\r\nimport com.pickleball_backend.pickleball.entity.Court;\r\nimport com.pickleball_backend.pickleball.entity.Payment;\r\nimport com.pickleball_backend.pickleball.entity.Slot;\r\nimport com.pickleball_backend.pickleball.entity.Event;\r\nimport lombok.Data;\r\nimport org.springframework.mail.MailException;\r\nimport org.springframework.mail.SimpleMailMessage;\r\nimport org.springframework.mail.javamail.JavaMailSender;\r\nimport org.springframework.stereotype.Service;\r\nimport lombok.extern.slf4j.Slf4j;\r\n\r\nimport java.time.Duration;\r\nimport java.time.LocalDate;\r\nimport java.time.LocalDateTime;\r\nimport java.time.LocalTime;\r\nimport java.time.format.DateTimeFormatter;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.mail.javamail.JavaMailSender;\r\nimport org.springframework.stereotype.Service;\r\nimport javax.annotation.PostConstruct;\r\n\r\n@Service\r\n@Slf4j\r\n@Data\r\npublic class EmailService {\r\n    @Autowired\r\n    private final JavaMailSender javaMailSender;\r\n\r\n    // Define formatters ONCE here\r\n    private static final DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");\r\n    private static final DateTimeFormatter timeFormatter = DateTimeFormatter.ofPattern(\"HH:mm\");\r\n    private static final DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");\r\n\r\n    public EmailService(JavaMailSender javaMailSender) {\r\n        this.javaMailSender = javaMailSender;\r\n    }\r\n\r\n    // Fixed to actually send emails for booking confirmations\r\n    public void sendBookingConfirmation(String email, Booking booking, Court court, Slot slot) {\r\n        if (email == null || booking == null || court == null || slot == null) {\r\n            log.error(\"Missing parameters for booking confirmation email\");\r\n            return;\r\n        }\r\n\r\n        String subject = \"Court Booking Confirmation\";\r\n        double duration = Duration.between(\r\n                slot.getStartTime() != null ? slot.getStartTime() : LocalTime.MIN,\r\n                slot.getEndTime() != null ? slot.getEndTime() : LocalTime.MIN\r\n        ).toMinutes() / 60.0;\r\n\r\n        String content = String.format(\r\n                \"Your booking is confirmed!\\n\\n\" +\r\n                        \"Court: %s\\n\" +\r\n                        \"Location: %s\\n\" +\r\n                        \"Date: %s\\n\" +\r\n                        \"Time: %s - %s\\n\" +\r\n                        \"Duration: %.1f hours\\n\" +\r\n                        \"Amount: $%.2f\\n\" +\r\n                        \"Purpose: %s\\n\" +\r\n                        \"Players: %d\\n\" +\r\n                        \"Booking ID: %d\",\r\n                court.getName() != null ? court.getName() : \"N/A\",\r\n                court.getLocation() != null ? court.getLocation() : \"N/A\",\r\n                slot.getDate() != null ? slot.getDate() : \"N/A\",\r\n                slot.getStartTime() != null ? slot.getStartTime() : \"N/A\",\r\n                slot.getEndTime() != null ? slot.getEndTime() : \"N/A\",\r\n                duration,\r\n                booking.getTotalAmount(),\r\n                booking.getPurpose() != null ? booking.getPurpose() : \"N/A\",\r\n                booking.getNumberOfPlayers() != null ? booking.getNumberOfPlayers() : 0,\r\n                booking.getId()\r\n        );\r\n\r\n        SimpleMailMessage message = new SimpleMailMessage();\r\n        message.setTo(email);\r\n        message.setSubject(subject);\r\n        message.setText(content);\r\n\r\n        try {\r\n            javaMailSender.send(message);\r\n            log.info(\"Booking confirmation email sent to: {}\", email);\r\n        } catch (MailException e) {\r\n            log.error(\"Failed to send booking confirmation to {}: {}\", email, e.getMessage());\r\n        }\r\n    }\r\n\r\n    public void sendPasswordResetEmail(String toEmail, String resetLink) {\r\n        SimpleMailMessage message = new SimpleMailMessage();\r\n        message.setTo(toEmail);\r\n        message.setSubject(\"Password Reset Request\");\r\n        message.setText(\"To reset your password, click the link below:\\n\" + resetLink);\r\n\r\n        try {\r\n            javaMailSender.send(message);\r\n            log.info(\"Password reset email sent to: {}\", toEmail);\r\n        } catch (MailException e) {\r\n            log.error(\"Failed to send email to {}: {}\", toEmail, e.getMessage());\r\n            throw new RuntimeException(\"Failed to send password reset email. Please try again later.\");\r\n        }\r\n    }\r\n\r\n    public void sendVoucherEmail(String toEmail, String subject, String content) {\r\n        SimpleMailMessage message = new SimpleMailMessage();\r\n        message.setTo(toEmail);\r\n        message.setSubject(subject);\r\n        message.setText(content);\r\n\r\n        try {\r\n            javaMailSender.send(message);\r\n            log.info(\"Voucher email sent to: {}\", toEmail);\r\n        } catch (MailException e) {\r\n            log.error(\"Failed to send voucher email to {}: {}\", toEmail, e.getMessage());\r\n            throw new RuntimeException(\"Failed to send voucher email\");\r\n        }\r\n    }\r\n\r\n    //Cancel Booking\r\n    public void sendCancellationConfirmation(String email, Booking booking, Slot slot, Court court) {\r\n        SimpleMailMessage message = new SimpleMailMessage();\r\n        message.setTo(email);\r\n        message.setSubject(\"Booking Cancellation Request Received\");\r\n\r\n        String content = String.format(\r\n                \"Your cancellation request for booking #%d has been received.\\n\\n\" +\r\n                        \"Court: %s\\n\" +\r\n                        \"Date: %s\\n\" +\r\n                        \"Time: %s - %s\\n\\n\" +\r\n                        \"We'll process your request shortly.\",\r\n                booking.getId(),\r\n                court.getName(), // Use court.getName() here\r\n                slot.getDate(),\r\n                slot.getStartTime(),\r\n                slot.getEndTime()\r\n        );\r\n\r\n        message.setText(content);\r\n\r\n        try {\r\n            javaMailSender.send(message);\r\n            log.info(\"Cancellation confirmation sent to: {}\", email);\r\n        } catch (MailException e) {\r\n            log.error(\"Failed to send cancellation email: {}\", e.getMessage());\r\n        }\r\n    }\r\n\r\n    public void sendCancellationDecision(String email, Booking booking, Slot slot, String courtName, boolean approved) {\r\n        SimpleMailMessage message = new SimpleMailMessage();\r\n        message.setTo(email);\r\n        message.setSubject(\"Cancellation Request \" + (approved ? \"Approved\" : \"Rejected\"));\r\n\r\n        String content = String.format(\r\n                \"Your cancellation request for booking #%d has been %s.\\n\\n\" +\r\n                        \"Court: %s\\nDate: %s\\nTime: %s - %s\\n\\n\" +\r\n                        (approved ? \"The slot has been freed up.\" : \"Your booking remains confirmed.\"),\r\n                booking.getId(),\r\n                approved ? \"APPROVED\" : \"REJECTED\",\r\n                courtName,\r\n                slot.getDate(),\r\n                slot.getStartTime(),\r\n                slot.getEndTime()\r\n        );\r\n\r\n        message.setText(content);\r\n\r\n        try {\r\n            javaMailSender.send(message);\r\n            log.info(\"Cancellation decision sent to: {}\", email);\r\n        } catch (MailException e) {\r\n            log.error(\"Failed to send cancellation email: {}\", e.getMessage());\r\n        }\r\n    }\r\n\r\n    public void sendAdminCancellationNotification(String email, Booking booking, Slot slot, String courtName, String adminRemark) {\r\n        SimpleMailMessage message = new SimpleMailMessage();\r\n        message.setTo(email);\r\n        message.setSubject(\"Booking Cancelled by Admin\");\r\n\r\n        String content = String.format(\r\n                \"Your booking #%d has been cancelled by an administrator.\\n\\n\" +\r\n                        \"Court: %s\\nDate: %s\\nTime: %s - %s\\n\\n\" +\r\n                        \"A full refund has been processed to your account.\\n\\n\" +\r\n                        (adminRemark != null && !adminRemark.trim().isEmpty() ? \r\n                        \"Admin Remark: %s\\n\\n\" : \"\") +\r\n                        \"If you have any questions, please contact our support team.\",\r\n                booking.getId(),\r\n                courtName,\r\n                slot.getDate(),\r\n                slot.getStartTime(),\r\n                slot.getEndTime(),\r\n                adminRemark != null ? adminRemark.trim() : \"\"\r\n        );\r\n\r\n        message.setText(content);\r\n\r\n        try {\r\n            javaMailSender.send(message);\r\n            log.info(\"Admin cancellation notification sent to: {}\", email);\r\n        } catch (MailException e) {\r\n            log.error(\"Failed to send admin cancellation email: {}\", e.getMessage());\r\n        }\r\n    }\r\n\r\n    public void sendCourtDeletionNotification(\r\n            String email,\r\n            String courtName,\r\n            LocalDate bookingDate,\r\n            LocalTime bookingTime,\r\n            double refundAmount\r\n    ) {\r\n        log.info(\"Attempting to send court deletion notification to: {}\", email);\r\n        log.info(\"Court: {}, Date: {}, Time: {}, Refund: {}\",\r\n                courtName, bookingDate, bookingTime, refundAmount);\r\n\r\n        if (email == null) {\r\n            log.error(\"Missing email for court deletion notification\");\r\n            return;\r\n        }\r\n\r\n        String subject = \"Important: Court Deletion Notification\";\r\n        String content = String.format(\r\n                \"Dear valued member,\\n\\n\" +\r\n                        \"We regret to inform you that the court '%s' has been permanently removed from our system.\\n\\n\" +\r\n                        \"This affects your booking on %s at %s.\\n\\n\" +\r\n                        \"We have processed a full refund of $%.2f for this booking, which should appear in your account within 3-5 business days.\\n\\n\" +\r\n                        \"We sincerely apologize for any inconvenience this may cause. As a gesture of goodwill, we've added 200 loyalty points to your account.\\n\\n\" +\r\n                        \"You can use these points to book other courts in our facility.\\n\\n\" +\r\n                        \"Thank you for your understanding,\\n\" +\r\n                        \"The Pickleball Management Team\",\r\n                courtName,\r\n                bookingDate,\r\n                bookingTime,\r\n                refundAmount\r\n        );\r\n\r\n        SimpleMailMessage message = new SimpleMailMessage();\r\n        message.setTo(email);\r\n        message.setSubject(subject);\r\n        message.setText(content);\r\n\r\n        try {\r\n            javaMailSender.send(message);\r\n            log.info(\"Email sent successfully to: {}\", email);\r\n        } catch (MailException e) {\r\n            log.error(\"Failed to send court deletion notification to {}: {}\", email, e.getMessage());\r\n            log.error(\"Full exception: \", e); // Add full stack trace\r\n        }\r\n    }\r\n\r\n    public void sendPaymentReceipt(String email, Payment payment) {\r\n        SimpleMailMessage message = new SimpleMailMessage();\r\n        message.setTo(email);\r\n        message.setSubject(\"Payment Receipt #\" + payment.getId());\r\n\r\n        String content = String.format(\r\n                \"Payment Confirmation\\n\\n\" +\r\n                        \"Amount: $%.2f\\n\" +\r\n                        \"Date: %s\\n\" +\r\n                        \"Method: %s\\n\" +\r\n                        \"Transaction ID: %d\",\r\n                payment.getAmount(),\r\n                payment.getPaymentDate(),\r\n                payment.getPaymentMethod(),\r\n                payment.getId()\r\n        );\r\n\r\n        message.setText(content);\r\n        javaMailSender.send(message);\r\n    }\r\n\r\n    public void sendTopUpConfirmation(\r\n            String email,\r\n            double amount,\r\n            double newBalance,\r\n            String paymentMethod,\r\n            String transactionId\r\n    ) {\r\n        SimpleMailMessage message = new SimpleMailMessage();\r\n        message.setTo(email);\r\n        message.setSubject(\"Wallet Top-Up Confirmation\");\r\n\r\n        String content = String.format(\r\n                \"Your wallet has been topped up successfully!\\n\\n\" +\r\n                        \"Amount: RM%.2f\\n\" +\r\n                        \"Payment Method: %s\\n\" +\r\n                        \"New Balance: RM%.2f\\n\" +\r\n                        \"Transaction ID: %s\\n\\n\" +\r\n                        \"Thank you for using our service!\",\r\n                amount, paymentMethod, newBalance, transactionId\r\n        );\r\n\r\n        message.setText(content);\r\n\r\n        try {\r\n            javaMailSender.send(message);\r\n            log.info(\"Top-up confirmation sent to: {}\", email);\r\n        } catch (MailException e) {\r\n            log.error(\"Failed to send top-up email: {}\", e.getMessage());\r\n        }\r\n    }\r\n\t\r\n\t// Invitation email implementation\r\n    public void sendInvitationEmail(String to, String subject, String text) {\r\n        SimpleMailMessage message = new SimpleMailMessage();\r\n        message.setTo(to);\r\n        message.setSubject(subject);\r\n        message.setText(text);\r\n\r\n        try {\r\n            javaMailSender.send(message);\r\n            log.info(\"Invitation email sent to: {}\", to);\r\n        } catch (MailException e) {\r\n            log.error(\"Failed to send invitation email to {}: {}\", to, e.getMessage());\r\n            throw new RuntimeException(\"Failed to send invitation email\");\r\n        }\r\n    }\r\n\r\n    public void sendFeedbackDeletionNotification(String toEmail, String userName, String review) {\r\n        if (toEmail == null) return;\r\n        String subject = \"Your Feedback Has Been Removed\";\r\n        String content = String.format(\"Dear %s,\\n\\nYour feedback has been removed by an administrator.\\n\\nFeedback: \\\"%s\\\"\\n\\nIf you have any questions, please contact support.\\n\\nThank you.\\nPickleball Management Team\", userName, review);\r\n        SimpleMailMessage message = new SimpleMailMessage();\r\n        message.setTo(toEmail);\r\n        message.setSubject(subject);\r\n        message.setText(content);\r\n        try {\r\n            javaMailSender.send(message);\r\n            log.info(\"Feedback deletion notification sent to: {}\", toEmail);\r\n        } catch (MailException e) {\r\n            log.error(\"Failed to send feedback deletion notification to {}: {}\", toEmail, e.getMessage());\r\n        }\r\n    }\r\n\r\n    public void sendUserTypeRejectionEmail(String to, String reason) {\r\n        String subject = \"Event Organizer Application Rejected\";\r\n        String body = \"Your application to become an Event Organizer was rejected for the following reason:\\n\\n\" +\r\n                      reason + \"\\n\\nPlease update your documents and try again.\";\r\n        sendEmail(to, subject, body);\r\n    }\r\n\r\n    public void sendEmail(String to, String subject, String body) {\r\n        SimpleMailMessage message = new SimpleMailMessage();\r\n        message.setTo(to);\r\n        message.setSubject(subject);\r\n        message.setText(body);\r\n        try {\r\n            javaMailSender.send(message);\r\n            log.info(\"Email sent to: {}\", to);\r\n        } catch (MailException e) {\r\n            log.error(\"Failed to send email to {}: {}\", to, e.getMessage());\r\n        }\r\n    }\r\n\r\n    public void sendEventNotification(String email, Event event) {\r\n        if (email == null || event == null) return;\r\n        log.info(\"Sending event notification to: {}\", email);\r\n        String subject = \"New Event Published: \" + event.getTitle();\r\n        String content = String.format(\r\n            \"Dear user,\\n\\nA new event \\\"%s\\\" has been published!\\n\\nDate: %s\\nLocation: %s\\n\\nCheck it out in the app!\",\r\n            event.getTitle(),\r\n            event.getStartTime(),\r\n            event.getLocation()\r\n        );\r\n        sendEmail(email, subject, content);\r\n    }\r\n    \r\n    public void sendEventUpdateNotification(String email, Event event) {\r\n        if (email == null || event == null) return;\r\n        log.info(\"Sending event update notification to: {}\", email);\r\n        String subject = \"Event Updated: \" + event.getTitle();\r\n        String content = String.format(\r\n            \"Dear user,\\n\\n\" +\r\n            \"The event \\\"%s\\\" has been updated!\\n\\n\" +\r\n            \"Updated Details:\\n\" +\r\n            \"Title: %s\\n\" +\r\n            \"Date: %s\\n\" +\r\n            \"Start Time: %s\\n\" +\r\n            \"End Time: %s\\n\" +\r\n            \"Location: %s\\n\" +\r\n            \"Event Type: %s\\n\" +\r\n            \"Skill Level: %s\\n\" +\r\n            \"Capacity: %d\\n\" +\r\n            \"Eligibility: %s\\n\" +\r\n            \"Fee: %s\\n\" +\r\n            // No description field in Event entity\r\n            // \"Description: %s\\n\\n\" +\r\n            \"Please check the app for the latest information!\\n\\n--\",\r\n            event.getTitle(),\r\n            event.getTitle(),\r\n            event.getStartTime() != null ? event.getStartTime().format(dateFormatter) : \"\",\r\n            event.getStartTime() != null ? event.getStartTime().format(timeFormatter) : \"\",\r\n            event.getEndTime() != null ? event.getEndTime().format(timeFormatter) : \"\",\r\n            event.getLocation(),\r\n            event.getEventType(),\r\n            event.getSkillLevel(),\r\n            event.getCapacity(),\r\n            event.getEligibility(),\r\n            event.getFeeAmount() != null ? event.getFeeAmount() : \"Free\"\r\n            // No description\r\n        );\r\n        sendEmail(email, subject, content);\r\n    }\r\n    \r\n    public void sendEventCancellationNotification(String email, Event event) {\r\n        if (email == null || event == null) return;\r\n        log.info(\"Sending event cancellation notification to: {}\", email);\r\n        String subject = \"Event Cancelled: \" + event.getTitle();\r\n        String content = String.format(\r\n            \"Dear user,\\n\\nWe regret to inform you that the event \\\"%s\\\" has been cancelled.\\n\\nEvent Details:\\nDate: %s\\nLocation: %s\\nEvent Type: %s\\n\\nWe apologize for any inconvenience this may cause. Please check the app for other available events!\",\r\n            event.getTitle(),\r\n            event.getStartTime(),\r\n            event.getLocation(),\r\n            event.getEventType()\r\n        );\r\n        sendEmail(email, subject, content);\r\n    }\r\n\r\n    public void sendJoinRequestNotification(String organizerEmail, String playerName, Integer matchId) {\r\n        SimpleMailMessage message = new SimpleMailMessage();\r\n        message.setTo(organizerEmail);\r\n        message.setSubject(\"New Join Request for Match #\" + matchId);\r\n        message.setText(playerName + \" wants to join your friendly match. Please approve or reject in your organizer dashboard.\");\r\n        javaMailSender.send(message);\r\n    }\r\n\r\n    public void sendJoinConfirmation(String playerEmail, Integer matchId) {\r\n        SimpleMailMessage message = new SimpleMailMessage();\r\n        message.setTo(playerEmail);\r\n        message.setSubject(\"Match Participation Approved\");\r\n        message.setText(\"Your request to join match #\" + matchId + \" has been approved!\");\r\n        javaMailSender.send(message);\r\n    }\r\n\r\n    public void sendCancellationNotification(String organizerEmail, String playerName, Integer matchId) {\r\n        SimpleMailMessage message = new SimpleMailMessage();\r\n        message.setTo(organizerEmail);\r\n        message.setSubject(\"Participation Cancelled for Match #\" + matchId);\r\n        message.setText(playerName + \" has cancelled their participation in your match.\");\r\n        javaMailSender.send(message);\r\n    }\r\n\r\n    public void sendReminderNotification(String playerEmail, Integer matchId, LocalDateTime startTime) {\r\n        SimpleMailMessage message = new SimpleMailMessage();\r\n        message.setTo(playerEmail);\r\n        message.setSubject(\"Match Reminder: #\" + matchId);\r\n        message.setText(\"Your friendly match starts in 24 hours at \" +\r\n                startTime.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\")));\r\n\r\n        try {\r\n            javaMailSender.send(message);\r\n            log.info(\"Match reminder sent to: {}\", playerEmail);\r\n        } catch (MailException e) {\r\n            log.error(\"Failed to send match reminder to {}: {}\", playerEmail, e.getMessage());\r\n        }\r\n    }\r\n\r\n    public void sendMessageNotification(String toEmail, String fromUsername, String content) {\r\n        SimpleMailMessage message = new SimpleMailMessage();\r\n        message.setTo(toEmail);\r\n        message.setSubject(\"You have received a new message\");\r\n        message.setText(\"You have a new message from \" + fromUsername + \":\\n\\n\" + content);\r\n        try {\r\n            javaMailSender.send(message);\r\n            log.info(\"Message notification email sent to: {}\", toEmail);\r\n        } catch (MailException e) {\r\n            log.error(\"Failed to send message notification email to {}: {}\", toEmail, e.getMessage());\r\n        }\r\n    }\r\n\r\n    public void sendSessionCancellation(String email, LocalDateTime sessionTime, String coachName) {\r\n        if (email == null) {\r\n            log.error(\"Missing email for session cancellation notification\");\r\n            return;\r\n        }\r\n\r\n        String subject = \"Coach Session Cancellation\";\r\n        String formattedDate = sessionTime.format(dateFormatter);\r\n        String formattedTime = sessionTime.format(timeFormatter);\r\n\r\n        String content = String.format(\r\n                \"Dear user,\\n\\n\" +\r\n                        \"Your coaching session with %s scheduled on %s at %s has been cancelled by the coach.\\n\\n\" +\r\n                        \"We apologize for any inconvenience. Please check the app for other available coaching sessions.\\n\\n\" +\r\n                        \"Thank you,\\n\" +\r\n                        \"The Pickleball Management Team\",\r\n                coachName, formattedDate, formattedTime\r\n        );\r\n\r\n        SimpleMailMessage message = new SimpleMailMessage();\r\n        message.setTo(email);\r\n        message.setSubject(subject);\r\n        message.setText(content);\r\n\r\n        try {\r\n            javaMailSender.send(message);\r\n            log.info(\"Session cancellation email sent to: {}\", email);\r\n        } catch (MailException e) {\r\n            log.error(\"Failed to send session cancellation email to {}: {}\", email, e.getMessage());\r\n        }\r\n    }\r\n\r\n    public void sendSessionCancellation(\r\n            String playerEmail,\r\n            LocalDateTime sessionTime,\r\n            String coachName,\r\n            String courtName) {\r\n\r\n        String subject = \"Session Cancellation Notification\";\r\n        String content = String.format(\r\n                \"Your session has been cancelled:\\n\\n\" +\r\n                        \"Coach: %s\\n\" +\r\n                        \"Court: %s\\n\" +\r\n                        \"Time: %s\\n\\n\" +\r\n                        \"A full refund has been processed to your account.\",\r\n                coachName, courtName, sessionTime\r\n        );\r\n\r\n        sendEmail(playerEmail, subject, content);\r\n    }\r\n\r\n    public void sendRefundFailureNotification(\r\n            String coachEmail,\r\n            Integer sessionId,\r\n            String error) {\r\n\r\n        String subject = \"Refund Processing Failure\";\r\n        String content = String.format(\r\n                \"Failed to process refund for session %d:\\n\\n\" +\r\n                        \"Error: %s\\n\\n\" +\r\n                        \"Please contact support for resolution.\",\r\n                sessionId, error\r\n        );\r\n\r\n        sendEmail(coachEmail, subject, content);\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/EmailService.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/EmailService.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/EmailService.java	(revision 97abd609899a67b781b8ace8e91358a782fc5acd)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/EmailService.java	(date 1753731484296)
@@ -1,10 +1,6 @@
 package com.pickleball_backend.pickleball.service;
 
-import com.pickleball_backend.pickleball.entity.Booking;
-import com.pickleball_backend.pickleball.entity.Court;
-import com.pickleball_backend.pickleball.entity.Payment;
-import com.pickleball_backend.pickleball.entity.Slot;
-import com.pickleball_backend.pickleball.entity.Event;
+import com.pickleball_backend.pickleball.entity.*;
 import lombok.Data;
 import org.springframework.mail.MailException;
 import org.springframework.mail.SimpleMailMessage;
@@ -360,8 +356,7 @@
         String content = String.format(
             "Dear user,\n\nA new event \"%s\" has been published!\n\nDate: %s\nLocation: %s\n\nCheck it out in the app!",
             event.getTitle(),
-            event.getStartTime(),
-            event.getLocation()
+            event.getStartTime()
         );
         sendEmail(email, subject, content);
     }
@@ -380,9 +375,7 @@
             "End Time: %s\n" +
             "Location: %s\n" +
             "Event Type: %s\n" +
-            "Skill Level: %s\n" +
             "Capacity: %d\n" +
-            "Eligibility: %s\n" +
             "Fee: %s\n" +
             // No description field in Event entity
             // "Description: %s\n\n" +
@@ -392,11 +385,9 @@
             event.getStartTime() != null ? event.getStartTime().format(dateFormatter) : "",
             event.getStartTime() != null ? event.getStartTime().format(timeFormatter) : "",
             event.getEndTime() != null ? event.getEndTime().format(timeFormatter) : "",
-            event.getLocation(),
+            event.getVenue() != null ? event.getVenue().getName() : "N/A",
             event.getEventType(),
-            event.getSkillLevel(),
             event.getCapacity(),
-            event.getEligibility(),
             event.getFeeAmount() != null ? event.getFeeAmount() : "Free"
             // No description
         );
@@ -411,7 +402,7 @@
             "Dear user,\n\nWe regret to inform you that the event \"%s\" has been cancelled.\n\nEvent Details:\nDate: %s\nLocation: %s\nEvent Type: %s\n\nWe apologize for any inconvenience this may cause. Please check the app for other available events!",
             event.getTitle(),
             event.getStartTime(),
-            event.getLocation(),
+            event.getVenue() != null ? event.getVenue().getName() : "N/A",
             event.getEventType()
         );
         sendEmail(email, subject, content);
@@ -469,6 +460,23 @@
         }
     }
 
+    public void sendClassRegistrationConfirmation(
+            String email,
+            ClassSession session,
+            Member member) {
+
+        String subject = "課程報名確認: " + session.getCoach().getName() + " 的匹克球課程";
+        String content = "親愛的 " + member.getUser().getName() + ":\n\n" +
+                "您已成功報名以下匹克球課程:\n" +
+                "教練: " + session.getCoach().getName() + "\n" +
+                "球場: " + session.getCourt().getName() + "\n" +
+                "時間: " + session.getStartTime() + " - " + session.getEndTime() + "\n" +
+                "費用: $" + session.getPrice() + "\n\n" +
+                "請準時到達球場，享受您的匹克球體驗！";
+
+        sendEmail(email, subject, content);
+    }
+
     public void sendSessionCancellation(String email, LocalDateTime sessionTime, String coachName) {
         if (email == null) {
             log.error("Missing email for session cancellation notification");
@@ -535,5 +543,6 @@
 
         sendEmail(coachEmail, subject, content);
     }
+
 }
 
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/ClassSessionDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.dto;\r\n\r\nimport lombok.Data;\r\nimport java.time.LocalDateTime;\r\n\r\n@Data\r\npublic class ClassSessionDto {\r\n    private Integer courtId;\r\n    private LocalDateTime startTime;\r\n    private LocalDateTime endTime;\r\n    private String note;\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/ClassSessionDto.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/ClassSessionDto.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/ClassSessionDto.java	(revision 97abd609899a67b781b8ace8e91358a782fc5acd)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/ClassSessionDto.java	(date 1753722627345)
@@ -2,11 +2,29 @@
 
 import lombok.Data;
 import java.time.LocalDateTime;
+import java.util.List;
 
 @Data
 public class ClassSessionDto {
+    private Integer id;
+    private Integer coachId;
+    private String coachName;
     private Integer courtId;
+    private String courtName;
     private LocalDateTime startTime;
     private LocalDateTime endTime;
-    private String note;
+    private Integer maxParticipants;
+    private Integer currentParticipants;
+    private String description;
+    private String status;
+    private LocalDateTime createdAt;
+    private LocalDateTime updatedAt;
+    private Double price;
+    private String title;
+    private String slotType; // 新增字段：课程类型
+    private String recurringGroupId;
+    private String venueName;
+    private String venueState;
+    // 新增：報名名單
+    private List<ClassRegistrationDto> registrations;
 }
\ No newline at end of file
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/UserServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.service;\r\n\r\nimport com.pickleball_backend.pickleball.dto.*;\r\nimport com.pickleball_backend.pickleball.entity.*;\r\nimport com.pickleball_backend.pickleball.exception.UnauthorizedException;\r\nimport com.pickleball_backend.pickleball.repository.*;\r\nimport com.pickleball_backend.pickleball.security.JwtService;\r\nimport jakarta.persistence.EntityNotFoundException;\r\nimport lombok.RequiredArgsConstructor;\r\nimport lombok.extern.slf4j.Slf4j;\r\nimport org.springframework.security.core.Authentication;\r\nimport org.springframework.security.core.context.SecurityContextHolder;\r\nimport org.springframework.security.core.userdetails.UsernameNotFoundException;\r\nimport org.springframework.security.crypto.password.PasswordEncoder;\r\nimport org.springframework.stereotype.Service;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.transaction.annotation.Transactional;\r\n\r\nimport java.time.LocalDate;\r\nimport java.time.LocalDateTime;\r\nimport java.util.*;\r\nimport java.util.stream.Collectors;\r\n\r\n@Service\r\n@RequiredArgsConstructor\r\n@Slf4j\r\npublic class UserServiceImpl implements UserService {\r\n\r\n    private final UserRepository userRepository;\r\n    private final UserAccountRepository userAccountRepository;\r\n    private final AdminRepository adminRepository;\r\n    private final PasswordEncoder passwordEncoder;\r\n    private final JwtService jwtService;\r\n    private final EmailService emailService;\r\n    private final MemberRepository memberRepository;\r\n    private final MembershipTierRepository membershipTierRepository;\r\n    private final WalletRepository walletRepository;\r\n    private final FeedbackRepository feedbackRepository;\r\n    private final EventOrganizerRepository eventOrganizerRepository;\r\n    private final FriendRequestRepository friendRequestRepository;\r\n\r\n    @Override\r\n    public void register(RegistrationDto dto) {\r\n        if (userAccountRepository.findByUsername(dto.getUsername()).isPresent()) {\r\n            throw new RuntimeException(\"Username already exists\");\r\n        }\r\n\r\n        if (userRepository.findByEmail(dto.getEmail()).isPresent()) {\r\n            throw new RuntimeException(\"Email already registered\");\r\n        }\r\n\r\n        User user = new User();\r\n        user.setName(dto.getName());\r\n        user.setGender(dto.getGender());\r\n        user.setDob(LocalDate.parse(dto.getDob()));\r\n        user.setEmail(dto.getEmail());\r\n        user.setPhone(dto.getPhone());\r\n        user.setUserType(dto.getUserType());\r\n\r\n        if (\"EventOrganizer\".equals(dto.getUserType())) {\r\n            user.setRequestedUserType(\"EventOrganizer\");\r\n        }\r\n\r\n        userRepository.save(user);\r\n\r\n        UserAccount account = new UserAccount();\r\n        account.setUsername(dto.getUsername());\r\n        account.setPassword(passwordEncoder.encode(dto.getPassword()));\r\n        account.setUser(user);\r\n        userAccountRepository.save(account);\r\n\r\n        if (\"ADMIN\".equalsIgnoreCase(dto.getUserType())) {\r\n            Admin admin = new Admin();\r\n            admin.setUser(user);\r\n            admin.setPosition(dto.getPosition());\r\n            adminRepository.save(admin);\r\n        }\r\n\r\n        if (\"EventOrganizer\".equalsIgnoreCase(dto.getUserType())) {\r\n            EventOrganizer eventOrganizer = new EventOrganizer();\r\n            eventOrganizer.setUser(user);\r\n            eventOrganizer.setOrganizerRating(0.0);\r\n            eventOrganizerRepository.save(eventOrganizer);\r\n        }\r\n\r\n        // Create membership tier assignment\r\n        assignDefaultMembershipTier(user);\r\n        initializeUserWallet(user);\r\n        log.info(\"User registered successfully with Silver tier: {}\", dto.getUsername());\r\n    }\r\n\r\n    private void assignDefaultMembershipTier(User user) {\r\n        // Use the correct repository: membershipTierRepository\r\n        MembershipTier silverTier = membershipTierRepository.findByTierName(\"SILVER\");\r\n\r\n        // Create default tier if not exists\r\n        if (silverTier == null) {\r\n            silverTier = new MembershipTier();\r\n            silverTier.setTierName(\"SILVER\"); // 直接使用字符串值\r\n            silverTier.setMinPoints(0);\r\n            silverTier.setMaxPoints(2000);\r\n            silverTier.setBenefits(\"10% discount\");\r\n            silverTier = membershipTierRepository.save(silverTier);\r\n            log.info(\"Created default SILVER tier\");\r\n        }\r\n\r\n        // Create member record\r\n        Member member = new Member();\r\n        member.setUser(user);\r\n        member.setTier(silverTier);\r\n        member.setPointBalance(0);  // Changed from 1000 to 0\r\n        memberRepository.save(member);\r\n        user.setMember(member);\r\n        userRepository.save(user);\r\n        log.info(\"Assigned default Silver tier to user: {}\", user.getEmail());\r\n    }\r\n\r\n    @Override\r\n    public Optional<String> login(LoginDto dto) {\r\n        log.debug(\"Login attempt for: {}\", dto.getUsernameOrEmail());\r\n\r\n        Optional<UserAccount> accountOpt = userAccountRepository.findByUsername(dto.getUsernameOrEmail());\r\n\r\n        if (accountOpt.isEmpty()) {\r\n            accountOpt = userAccountRepository.findByUser_Email(dto.getUsernameOrEmail());\r\n        }\r\n\r\n        Optional<String> token = accountOpt\r\n                .filter(account -> passwordEncoder.matches(dto.getPassword(), account.getPassword()))\r\n                .map(account -> jwtService.generateToken(\r\n                        account.getUsername(),\r\n                        account.getUser().getUserType().toUpperCase() // Send uppercase role\r\n                ));\r\n\r\n        if (token.isPresent()) {\r\n            log.info(\"Login successful for: {}\", dto.getUsernameOrEmail());\r\n        } else {\r\n            log.warn(\"Login failed for: {}\", dto.getUsernameOrEmail());\r\n        }\r\n\r\n        return token;\r\n    }\r\n\r\n    @Override\r\n    public void requestPasswordReset(String email) {\r\n        log.info(\"Password reset requested for: {}\", email);\r\n\r\n        try {\r\n            User user = userRepository.findByEmail(email)\r\n                    .orElseThrow(() -> {\r\n                        String errorMsg = \"User not found with email: \" + email;\r\n                        log.error(errorMsg);\r\n                        return new RuntimeException(errorMsg);\r\n                    });\r\n\r\n            UserAccount account = userAccountRepository.findByUser_Email(email)\r\n                    .orElseThrow(() -> {\r\n                        String errorMsg = \"User account not found for email: \" + email;\r\n                        log.error(errorMsg);\r\n                        return new RuntimeException(errorMsg);\r\n                    });\r\n\r\n            // Generate token\r\n            String token = UUID.randomUUID().toString();\r\n            account.setResetPasswordToken(token);\r\n            account.setResetPasswordTokenExpiry(LocalDateTime.now().plusHours(1));\r\n            userAccountRepository.save(account);\r\n\r\n            log.info(\"Generated reset token: {} for email: {}\", token, email);\r\n\r\n            // Send email\r\n            String resetLink = \"http://localhost:3000/reset-password/\" + token;\r\n            emailService.sendPasswordResetEmail(email, resetLink);\r\n            log.info(\"Password reset email sent to: {}\", email);\r\n\r\n        } catch (Exception e) {\r\n            log.error(\"Password reset failed for: {}\", email, e);\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void resetPassword(String token, String newPassword) {\r\n        log.info(\"Password reset attempt with token: {}\", token);\r\n\r\n        try {\r\n            UserAccount account = userAccountRepository.findByResetPasswordToken(token)\r\n                    .orElseThrow(() -> {\r\n                        String errorMsg = \"Invalid password reset token: \" + token;\r\n                        log.error(errorMsg);\r\n                        return new RuntimeException(errorMsg);\r\n                    });\r\n\r\n            if (account.getResetPasswordTokenExpiry().isBefore(LocalDateTime.now())) {\r\n                String errorMsg = \"Token expired: \" + token;\r\n                log.error(errorMsg);\r\n                throw new RuntimeException(errorMsg);\r\n            }\r\n\r\n            account.setPassword(passwordEncoder.encode(newPassword));\r\n            account.setResetPasswordToken(null);\r\n            account.setResetPasswordTokenExpiry(null);\r\n            userAccountRepository.save(account);\r\n\r\n            log.info(\"Password reset successful for user: {}\", account.getUsername());\r\n\r\n        } catch (Exception e) {\r\n            log.error(\"Password reset failed for token: {}\", token, e);\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    private void initializeUserWallet(User user) {\r\n        Member member = user.getMember();\r\n        if (member != null && walletRepository.findByMemberId(member.getId()).isEmpty()) {\r\n            Wallet wallet = new Wallet();\r\n            wallet.setMember(member);\r\n            wallet.setBalance(0.00);\r\n            walletRepository.save(wallet);\r\n            log.info(\"Created wallet for member: {}\", member.getId());\r\n        }\r\n    }\r\n\r\n    @Override\r\n    @Transactional\r\n    public List<UserDto> searchUsers(String query) {\r\n        List<User> users = userRepository.searchActiveUsers(query);\r\n        return users.stream()\r\n                .map(user -> new UserDto(\r\n                        user.getUserAccount() != null ? user.getUserAccount().getUsername() : null,\r\n                        user.getName(),\r\n                        user.getProfileImage()\r\n                ))\r\n                .collect(Collectors.toList());\r\n    }\r\n\r\n    public Integer getCurrentUserId() {\r\n        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();\r\n        if (authentication == null) {\r\n            throw new UnauthorizedException(\"No authentication found\");\r\n        }\r\n\r\n        String username = authentication.getName();\r\n        if (username == null) {\r\n            throw new UsernameNotFoundException(\"Username not found in authentication\");\r\n        }\r\n        UserAccount account = userAccountRepository.findByUsername(username)\r\n                .orElseThrow(() -> new UsernameNotFoundException(\"User not found\"));\r\n\r\n        return account.getUser().getId();\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/UserServiceImpl.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/UserServiceImpl.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/UserServiceImpl.java	(revision 97abd609899a67b781b8ace8e91358a782fc5acd)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/UserServiceImpl.java	(date 1753722627355)
@@ -38,6 +38,9 @@
     private final FeedbackRepository feedbackRepository;
     private final EventOrganizerRepository eventOrganizerRepository;
     private final FriendRequestRepository friendRequestRepository;
+    // 你要注入 CoachRepository
+    @Autowired
+    private CoachRepository coachRepository;
 
     @Override
     public void register(RegistrationDto dto) {
@@ -83,6 +86,13 @@
             eventOrganizerRepository.save(eventOrganizer);
         }
 
+        if ("COACH".equalsIgnoreCase(dto.getUserType())) {
+            Coach coach = new Coach();
+            coach.setUser(user);
+            coach.setExperienceYear(dto.getExperienceYear());
+            coachRepository.save(coach);
+        }
+
         // Create membership tier assignment
         assignDefaultMembershipTier(user);
         initializeUserWallet(user);
@@ -127,9 +137,10 @@
 
         Optional<String> token = accountOpt
                 .filter(account -> passwordEncoder.matches(dto.getPassword(), account.getPassword()))
-                .map(account -> jwtService.generateToken(
+                .map(account -> jwtService.generateTokenWithUserId(
                         account.getUsername(),
-                        account.getUser().getUserType().toUpperCase() // Send uppercase role
+                        account.getUser().getUserType().toUpperCase(), // Send uppercase role
+                        account.getUser().getId() // Include user ID
                 ));
 
         if (token.isPresent()) {
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/config/SecurityConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.config;\r\n\r\nimport com.pickleball_backend.pickleball.security.JwtAuthFilter;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.springframework.context.annotation.*;\r\nimport org.springframework.http.HttpMethod;\r\nimport org.springframework.security.authentication.*;\r\nimport org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;\r\nimport org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;\r\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\r\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\r\nimport org.springframework.security.config.http.SessionCreationPolicy;\r\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\r\nimport org.springframework.security.crypto.password.PasswordEncoder;\r\nimport org.springframework.security.web.SecurityFilterChain;\r\nimport org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;\r\nimport org.springframework.web.cors.CorsConfiguration;\r\nimport org.springframework.web.cors.CorsConfigurationSource;\r\nimport org.springframework.web.cors.UrlBasedCorsConfigurationSource;\r\nimport org.springframework.web.filter.CorsFilter;\r\n\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\n\r\n@Configuration\r\n@EnableWebSecurity\r\n@RequiredArgsConstructor\r\n@EnableGlobalMethodSecurity(prePostEnabled = true)\r\npublic class SecurityConfig {\r\n\r\n    private final JwtAuthFilter jwtAuthFilter;\r\n\r\n    @Bean\r\n    public CorsConfigurationSource corsConfigurationSource() {\r\n        CorsConfiguration configuration = new CorsConfiguration();\r\n        configuration.setAllowedOrigins(List.of(\"http://localhost:3000\"));\r\n        configuration.setAllowedMethods(Arrays.asList(\"GET\", \"POST\", \"PUT\", \"DELETE\", \"OPTIONS\"));\r\n        configuration.setAllowedHeaders(Arrays.asList(\"Authorization\", \"Content-Type\", \"X-Requested-With\", \"Accept\", \"Content-Disposition\"));\r\n        configuration.setExposedHeaders(Arrays.asList(\"Authorization\", \"Content-Type\", \"Content-Disposition\"));\r\n        configuration.setAllowCredentials(true);\r\n        configuration.setMaxAge(3600L);\r\n\r\n        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\r\n        source.registerCorsConfiguration(\"/**\", configuration);\r\n        return source;\r\n    }\r\n\r\n    @Bean\r\n    public PasswordEncoder passwordEncoder() {\r\n        return new BCryptPasswordEncoder();\r\n    }\r\n\r\n    @Bean\r\n    public AuthenticationManager authenticationManager(AuthenticationConfiguration config) throws Exception {\r\n        return config.getAuthenticationManager();\r\n    }\r\n\r\n    @Bean\r\n    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\r\n        http\r\n                .cors(cors -> cors.configurationSource(corsConfigurationSource()))\r\n                .csrf(csrf -> csrf.disable())\r\n                .authorizeHttpRequests(auth -> auth\r\n                        .requestMatchers(\"/api/health\").permitAll()\r\n                        .requestMatchers(\"/api/auth/**\").permitAll()\r\n                        .requestMatchers(\"/uploads/**\").permitAll()\r\n                        .requestMatchers(HttpMethod.POST, \"/api/admin/register\").permitAll()\r\n                        .requestMatchers(HttpMethod.POST, \"/api/admin/login\").permitAll()\r\n                        // 允许公开访问球场图片\r\n                        .requestMatchers(\"/api/admin/courts/public/**\").permitAll()\r\n                        // Tier Management Endpoints\r\n                        .requestMatchers(HttpMethod.POST, \"/api/admin/tiers\").hasAuthority(\"ROLE_ADMIN\")\r\n                        .requestMatchers(HttpMethod.POST, \"/api/admin/*/vouchers\").hasAuthority(\"ROLE_ADMIN\")\r\n\r\n                        // Existing Admin Endpoints\r\n                        .requestMatchers(HttpMethod.GET, \"/api/admin/dashboard/**\").hasAuthority(\"ROLE_ADMIN\")\r\n                        .requestMatchers(HttpMethod.POST, \"/api/admin/courts\").hasAuthority(\"ROLE_ADMIN\")\r\n                        .requestMatchers(HttpMethod.PUT, \"/api/admin/courts/**\").hasAuthority(\"ROLE_ADMIN\")\r\n                        .requestMatchers(HttpMethod.PUT, \"/api/admin/courts/*/pricing\").hasAuthority(\"ROLE_ADMIN\")\r\n                        .requestMatchers(HttpMethod.POST, \"/api/admin/courts/**\").hasAuthority(\"ROLE_ADMIN\")\r\n                        .requestMatchers(HttpMethod.DELETE, \"/api/admin/courts/**\").hasAuthority(\"ROLE_ADMIN\")\r\n                        .requestMatchers(HttpMethod.GET, \"/api/admin/courts\").hasAuthority(\"ROLE_ADMIN\")\r\n                        .requestMatchers(HttpMethod.GET, \"/api/admin/courts/**\").hasAuthority(\"ROLE_ADMIN\")\r\n                        .requestMatchers(HttpMethod.GET, \"/api/admin/courts/*/analytics\").hasAuthority(\"ROLE_ADMIN\")\r\n                        .requestMatchers(HttpMethod.POST, \"/api/admin/tiers\").hasAuthority(\"ROLE_ADMIN\")\r\n                        .requestMatchers(HttpMethod.POST, \"/api/admin/*/vouchers\").hasAuthority(\"ROLE_ADMIN\")\r\n                        .requestMatchers(HttpMethod.GET, \"/api/admin/tiers\").hasAuthority(\"ROLE_ADMIN\")\r\n                        .requestMatchers(HttpMethod.GET, \"/api/admin/slots\").hasAuthority(\"ROLE_ADMIN\")\r\n                        .requestMatchers(HttpMethod.GET, \"/api/admin/cancellation-requests/pending\").hasAuthority(\"ROLE_ADMIN\")\r\n                        .requestMatchers(HttpMethod.PUT, \"/api/admin/cancellation-requests/*/process\").hasAuthority(\"ROLE_ADMIN\")\r\n                        .requestMatchers(HttpMethod.PUT, \"/api/admin/cancellation-requests/**\").hasAuthority(\"ROLE_ADMIN\")\r\n                        .requestMatchers(HttpMethod.GET, \"/api/admin/dashboard/**\").hasAuthority(\"ROLE_ADMIN\")\r\n                        .requestMatchers(HttpMethod.GET, \"/api/admin/users\").hasAuthority(\"ROLE_ADMIN\")\r\n                        .requestMatchers(HttpMethod.POST, \"/api/admin/users\").hasAuthority(\"ROLE_ADMIN\")\r\n                        .requestMatchers(HttpMethod.PUT, \"/api/admin/users/**\").hasAuthority(\"ROLE_ADMIN\")\r\n                        .requestMatchers(HttpMethod.DELETE, \"/api/admin/users/**\").hasAuthority(\"ROLE_ADMIN\")\r\n                        .requestMatchers(HttpMethod.POST, \"/api/admin/register-from-invite\").permitAll()\r\n                        .requestMatchers(\"/api/admin/**\").hasAuthority(\"ROLE_ADMIN\")\r\n                        .requestMatchers(HttpMethod.GET, \"/api/member/**\").hasRole(\"USER\")\r\n                        .requestMatchers(HttpMethod.POST, \"/api/member/**\").hasRole(\"USER\")\r\n                        .requestMatchers(HttpMethod.POST, \"/api/member/bookings\").hasRole(\"USER\")\r\n                        .requestMatchers(HttpMethod.GET, \"/api/member/bookings\").hasRole(\"USER\")\r\n                        .requestMatchers(HttpMethod.GET, \"/api/member/bookings/**\").hasRole(\"USER\")\r\n                        .requestMatchers(HttpMethod.POST, \"/api/member/bookings/*/cancel\").hasRole(\"USER\")\r\n                        .requestMatchers(HttpMethod.GET, \"/api/member/dashboard\").hasRole(\"USER\")\r\n                        .requestMatchers(HttpMethod.GET, \"/api/member/tiers\").hasRole(\"USER\")\r\n                        .requestMatchers(HttpMethod.GET, \"/api/member/dashboard\").hasAuthority(\"ROLE_USER\")\r\n                        .requestMatchers(HttpMethod.GET, \"/api/member/tiers\").hasAuthority(\"ROLE_USER\")\r\n                        .requestMatchers(HttpMethod.GET, \"/api/member/courts\").hasRole(\"USER\")\r\n                        .requestMatchers(HttpMethod.GET, \"/api/member/courts/{id}\").hasRole(\"USER\")\r\n                        .requestMatchers(HttpMethod.GET, \"/api/member/slots/available\").hasRole(\"USER\")\r\n                        .requestMatchers(HttpMethod.GET, \"/api/member/slots/available/grouped\").hasRole(\"USER\")\r\n                        .requestMatchers(HttpMethod.GET, \"/api/member/redeem-history\").hasRole(\"USER\")\r\n                        .requestMatchers(HttpMethod.GET, \"/api/user/reviewable-items\").hasRole(\"USER\")\r\n                        .requestMatchers(HttpMethod.GET, \"/api/feedback\").permitAll()\r\n                        .requestMatchers(HttpMethod.GET, \"/api/feedback/stats\").permitAll()\r\n                        .requestMatchers(HttpMethod.GET, \"/api/feedback/user\").hasRole(\"USER\")\r\n                        .requestMatchers(HttpMethod.GET, \"/api/feedback/reviewable-items\").hasRole(\"USER\")\r\n                        .requestMatchers(HttpMethod.POST, \"/api/feedback\").hasRole(\"USER\")\r\n                        .requestMatchers(HttpMethod.PUT, \"/api/feedback/**\").hasRole(\"USER\")\r\n                        .requestMatchers(HttpMethod.DELETE, \"/api/feedback/**\").hasAnyRole(\"USER\", \"ADMIN\")\r\n                        .requestMatchers(\"/api/auth/verify\").permitAll()\r\n                        // General Admin Access\r\n                        .requestMatchers(\"/api/admin/**\").hasAuthority(\"ROLE_ADMIN\")\r\n\r\n                        // User Endpoints\r\n                        .requestMatchers(\"/api/profile\").authenticated()\r\n                        .requestMatchers(HttpMethod.POST, \"/api/profile/photo\").authenticated()\r\n                        .requestMatchers(\"/api/preferences\").authenticated()\r\n                        .requestMatchers(\"/error\").permitAll()\r\n                        .requestMatchers(\"/ws/**\").permitAll()\r\n                        .anyRequest().authenticated()\r\n                )\r\n                .sessionManagement(sess -> sess.sessionCreationPolicy(SessionCreationPolicy.STATELESS))\r\n                .addFilterBefore(jwtAuthFilter, UsernamePasswordAuthenticationFilter.class);\r\n\r\n        return http.build();\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/config/SecurityConfig.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/config/SecurityConfig.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/config/SecurityConfig.java	(revision 97abd609899a67b781b8ace8e91358a782fc5acd)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/config/SecurityConfig.java	(date 1753722380745)
@@ -123,6 +123,10 @@
                         // General Admin Access
                         .requestMatchers("/api/admin/**").hasAuthority("ROLE_ADMIN")
 
+                        .requestMatchers(HttpMethod.POST, "/api/coach/recurring-sessions").hasAuthority("ROLE_COACH")
+                        .requestMatchers(HttpMethod.POST, "/api/coach/courses/**").hasAuthority("ROLE_COACH")
+                        .requestMatchers("/api/coach/**").hasAuthority("ROLE_COACH")
+
                         // User Endpoints
                         .requestMatchers("/api/profile").authenticated()
                         .requestMatchers(HttpMethod.POST, "/api/profile/photo").authenticated()
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/JoinRequestDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.dto;\r\n\r\nimport lombok.Data;\r\nimport java.time.LocalDateTime;\r\n\r\n@Data\r\npublic class JoinRequestDto {\r\n    private Integer id;\r\n    private LocalDateTime requestDate;\r\n    private String status;\r\n    private String rejectionReason;\r\n    private Integer memberId;\r\n    private Integer matchId;\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/JoinRequestDto.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/JoinRequestDto.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/JoinRequestDto.java	(revision 97abd609899a67b781b8ace8e91358a782fc5acd)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/JoinRequestDto.java	(date 1753725850326)
@@ -6,9 +6,9 @@
 @Data
 public class JoinRequestDto {
     private Integer id;
-    private LocalDateTime requestDate;
-    private String status;
-    private String rejectionReason;
     private Integer memberId;
-    private Integer matchId;
+    private String memberName;
+    private String username;
+    private String status;
+    private LocalDateTime requestTime;
 }
Index: pickleball-frontend/src/service/FriendlyMatchService.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import api from './api';\r\n\r\n// Get all open matches\r\nexport async function getOpenMatches() {\r\n  const res = await api.get('/api/friendly-matches/open');\r\n  return res.data;\r\n}\r\n\r\n// Create a new match (for organizer)\r\nexport async function createMatch(matchDetails, organizerId) {\r\n  const res = await api.post(`/matches?organizerId=${organizerId}`, matchDetails);\r\n  return res.data;\r\n}\r\n\r\n// Send join request (participant)\r\nexport async function joinMatch(matchId, memberId) {\r\n  const res = await api.post('/join-requests', { matchId, memberId });\r\n  return res.data;\r\n}\r\n\r\n// Approve join request (organizer)\r\nexport async function approveRequest(requestId, organizerId) {\r\n  const res = await api.put(`/join-requests/${requestId}/approve?organizerId=${organizerId}`);\r\n  return res.data;\r\n}\r\n\r\n// Cancel join request (participant)\r\nexport async function cancelJoin(requestId, memberId) {\r\n  const res = await api.delete(`/join-requests/${requestId}?memberId=${memberId}`);\r\n  return res.data;\r\n}\r\n\r\n// Get match details (including status, participants, etc.)\r\nexport async function getMatch(matchId) {\r\n  const res = await api.get(`/matches/${matchId}`);\r\n  return res.data;\r\n} 
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball-frontend/src/service/FriendlyMatchService.js b/pickleball-frontend/src/service/FriendlyMatchService.js
--- a/pickleball-frontend/src/service/FriendlyMatchService.js	(revision 97abd609899a67b781b8ace8e91358a782fc5acd)
+++ b/pickleball-frontend/src/service/FriendlyMatchService.js	(date 1753722627366)
@@ -2,7 +2,7 @@
 
 // Get all open matches
 export async function getOpenMatches() {
-  const res = await api.get('/api/friendly-matches/open');
+  const res = await api.get('/friendly-matches/open');
   return res.data;
 }
 
@@ -17,16 +17,10 @@
   const res = await api.post('/join-requests', { matchId, memberId });
   return res.data;
 }
-
-// Approve join request (organizer)
-export async function approveRequest(requestId, organizerId) {
-  const res = await api.put(`/join-requests/${requestId}/approve?organizerId=${organizerId}`);
-  return res.data;
-}
 
 // Cancel join request (participant)
 export async function cancelJoin(requestId, memberId) {
-  const res = await api.delete(`/join-requests/${requestId}?memberId=${memberId}`);
+  const res = await api.delete(`/friendly-matches/requests/${requestId}`);
   return res.data;
 }
 
@@ -34,4 +28,30 @@
 export async function getMatch(matchId) {
   const res = await api.get(`/matches/${matchId}`);
   return res.data;
+}
+
+// Create a new friendly match (without booking)
+export async function createFriendlyMatch(matchData) {
+  const res = await api.post('/api/friendly-matches/create', matchData);
+  return res.data;
+}
+
+// Get all invitations
+export async function getInvitations() {
+  const res = await api.get('/api/friendly-matches/invitations');
+  return res.data;
+}
+
+// Join an invitation
+export async function joinInvitation(matchId) {
+  const res = await api.post(`/api/friendly-matches/invitation/${matchId}/join`);
+  return res.data;
+}
+
+// Create invitation from booking
+export async function createInvitation(invitationData, bookingId) {
+  const res = await api.post('/api/friendly-matches/invitation', invitationData, {
+    params: { bookingId }
+  });
+  return res.data;
 } 
\ No newline at end of file
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/BookingRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.repository;\r\n\r\nimport com.pickleball_backend.pickleball.entity.Booking;\r\nimport com.pickleball_backend.pickleball.entity.Court;\r\nimport com.pickleball_backend.pickleball.entity.Member;\r\nimport com.pickleball_backend.pickleball.entity.User;\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\nimport org.springframework.data.jpa.repository.Query;\r\nimport org.springframework.data.repository.query.Param;\r\n\r\nimport java.time.LocalDate;\r\nimport java.util.List;\r\nimport java.util.Optional;\r\nimport org.springframework.data.jpa.repository.EntityGraph;\r\nimport org.springframework.data.domain.Page;\r\nimport org.springframework.data.domain.Pageable;\r\n\r\npublic interface BookingRepository extends JpaRepository<Booking, Integer> {\r\n\r\n    @Query(\"SELECT DISTINCT b FROM Booking b \" +\r\n           \"LEFT JOIN FETCH b.bookingSlots bs \" +\r\n           \"LEFT JOIN FETCH bs.slot \" +\r\n           \"LEFT JOIN FETCH b.member m \" +\r\n           \"LEFT JOIN FETCH m.user \" +\r\n           \"LEFT JOIN FETCH b.payment \" +\r\n           \"WHERE b.member.id = :memberId\")\r\n    List<Booking> findByMemberId(@Param(\"memberId\") Integer memberId);\r\n\r\n    @Query(\"SELECT b FROM Booking b LEFT JOIN FETCH b.cancellationRequest WHERE b.id = :id\")\r\n    Optional<Booking> findByIdWithCancellation(@Param(\"id\") Integer id);\r\n\r\n    @Query(\"SELECT b FROM Booking b LEFT JOIN FETCH b.cancellationRequest WHERE b.id IN :ids\")\r\n    List<Booking> findAllWithCancellationByIds(@Param(\"ids\") List<Integer> ids);\r\n\r\n    @EntityGraph(attributePaths = {\"member.user\", \"cancellationRequest\", \"bookingSlots\", \"bookingSlots.slot\", \"payment\"})\r\n    @Query(\"SELECT b FROM Booking b WHERE b.id IN :ids\")\r\n    List<Booking> findAllWithAdminRelationsByIds(@Param(\"ids\") List<Integer> ids);\r\n\r\n    @Query(\"SELECT b FROM Booking b \" +\r\n            \"LEFT JOIN b.member m \" +\r\n            \"LEFT JOIN m.user u \" +\r\n            \"WHERE \" +\r\n            \"(:search IS NULL OR u.name LIKE %:search% OR u.email LIKE %:search%) \" +\r\n            \"AND (:status IS NULL OR b.status = :status) \" +\r\n            \"AND (:startDate IS NULL OR DATE(b.bookingDate) >= :startDate) \" +\r\n            \"AND (:endDate IS NULL OR DATE(b.bookingDate) <= :endDate)\")\r\n    Page<Booking> findByAdminFilters(\r\n            @Param(\"search\") String search,\r\n            @Param(\"status\") String status,\r\n            @Param(\"startDate\") LocalDate startDate,\r\n            @Param(\"endDate\") LocalDate endDate,\r\n            Pageable pageable\r\n    );\r\n\r\n    // 简单的查询方法，用于调试\r\n    @Query(\"SELECT b FROM Booking b ORDER BY b.bookingDate DESC\")\r\n    Page<Booking> findAllBookings(Pageable pageable);\r\n\r\n    @org.springframework.data.jpa.repository.Query(\"SELECT COUNT(b) FROM Booking b WHERE b.bookingDate BETWEEN :start AND :end\")\r\n    long countByBookingDateBetween(java.time.LocalDateTime start, java.time.LocalDateTime end);\r\n\r\n    @org.springframework.data.jpa.repository.Query(\"SELECT COUNT(DISTINCT b.member.id) FROM Booking b WHERE b.bookingDate BETWEEN :start AND :end\")\r\n    long countDistinctMemberIdByBookingDateBetween(java.time.LocalDateTime start, java.time.LocalDateTime end);\r\n\r\n    @EntityGraph(attributePaths = {\"member.user\"})\r\n    List<Booking> findTop5ByOrderByBookingDateDesc();\r\n\r\n    boolean existsByMember_User_IdAndBookingSlots_Slot_CourtId(Integer userId, Integer courtId);\r\n\r\n    @Query(\"SELECT COUNT(b) > 0 FROM Booking b \" +\r\n           \"JOIN b.bookingSlots bs \" +\r\n           \"JOIN bs.slot s \" +\r\n           \"WHERE b.member.user.id = :userId \" +\r\n           \"AND s.courtId = :courtId \" +\r\n           \"AND b.status = 'COMPLETED'\")\r\n    boolean existsByMember_User_IdAndCompletedBookingForCourt(Integer userId, Integer courtId);\r\n\r\n    @Query(\"SELECT b FROM Booking b \" +\r\n           \"JOIN b.bookingSlots bs \" +\r\n           \"JOIN bs.slot s \" +\r\n           \"WHERE b.member.user.id = :userId \" +\r\n           \"AND b.status = 'COMPLETED' \" +\r\n           \"ORDER BY b.bookingDate DESC\")\r\n    List<Booking> findCompletedBookingsByUserId(Integer userId);\r\n\r\n    @Query(\"SELECT b FROM Booking b \" +\r\n           \"JOIN b.bookingSlots bs \" +\r\n           \"JOIN bs.slot s \" +\r\n           \"WHERE b.member.user.id = :userId \" +\r\n           \"AND s.courtId = :courtId \" +\r\n           \"AND b.status = 'COMPLETED' \" +\r\n           \"ORDER BY b.bookingDate DESC\")\r\n    List<Booking> findCompletedBookingsByUserIdAndCourtId(Integer userId, Integer courtId);\r\n\r\n    // 根据日期范围查找预订\r\n    List<Booking> findByBookingDateBetween(java.time.LocalDateTime startDate, java.time.LocalDateTime endDate);\r\n    \r\n    // 新的查询方法，使用@Query注解明确指定参数类型\r\n    @Query(\"SELECT b FROM Booking b WHERE b.bookingDate >= :startDate AND b.bookingDate <= :endDate\")\r\n    List<Booking> findBookingsByDateRange(\r\n            @Param(\"startDate\") java.time.LocalDateTime startDate,\r\n            @Param(\"endDate\") java.time.LocalDateTime endDate\r\n    );\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/BookingRepository.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/BookingRepository.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/BookingRepository.java	(revision 97abd609899a67b781b8ace8e91358a782fc5acd)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/BookingRepository.java	(date 1753722675057)
@@ -4,11 +4,15 @@
 import com.pickleball_backend.pickleball.entity.Court;
 import com.pickleball_backend.pickleball.entity.Member;
 import com.pickleball_backend.pickleball.entity.User;
+import com.pickleball_backend.pickleball.entity.Slot;
 import org.springframework.data.jpa.repository.JpaRepository;
 import org.springframework.data.jpa.repository.Query;
 import org.springframework.data.repository.query.Param;
 
 import java.time.LocalDate;
+import java.time.LocalDateTime;
+import java.time.LocalTime;
+import java.util.Date;
 import java.util.List;
 import java.util.Optional;
 import org.springframework.data.jpa.repository.EntityGraph;
@@ -94,11 +98,60 @@
 
     // 根据日期范围查找预订
     List<Booking> findByBookingDateBetween(java.time.LocalDateTime startDate, java.time.LocalDateTime endDate);
-    
+
     // 新的查询方法，使用@Query注解明确指定参数类型
     @Query("SELECT b FROM Booking b WHERE b.bookingDate >= :startDate AND b.bookingDate <= :endDate")
     List<Booking> findBookingsByDateRange(
             @Param("startDate") java.time.LocalDateTime startDate,
             @Param("endDate") java.time.LocalDateTime endDate
     );
+
+    @Query("SELECT b FROM Booking b JOIN b.bookingSlots bs JOIN bs.slot s WHERE s.courtId = :courtId AND b.status = 'active' AND s.startTime < :endTime AND s.endTime > :startTime")
+    List<Booking> findConflictingBookings(
+            @Param("courtId") int courtId,
+            @Param("startTime") Date startTime,
+            @Param("endTime") Date endTime);
+
+    // 新增：查詢可預約的球場時段（排除課程預約）
+    @Query("SELECT DISTINCT s FROM Slot s WHERE s.courtId = :courtId AND s.date = :date AND s.isAvailable = true " +
+            "AND NOT EXISTS (SELECT bs FROM BookingSlot bs WHERE bs.slot.id = s.id AND bs.status = 'BOOKED') " +
+            "AND NOT EXISTS (SELECT b FROM Booking b JOIN b.bookingSlots bs2 JOIN bs2.slot s2 WHERE b.status = 'active' " +
+            "AND s2.startTime <= :endTime AND s2.endTime >= :startTime)")
+    List<Slot> findAvailableSlotsForUserBooking(
+            @Param("courtId") int courtId,
+            @Param("date") LocalDate date,
+            @Param("startTime") LocalTime startTime,
+            @Param("endTime") LocalTime endTime);
+
+    // 新增：檢查球場時段是否可用（排除課程預約）
+    @Query("SELECT COUNT(b) FROM Booking b JOIN b.bookingSlots bs JOIN bs.slot s WHERE b.status = 'active' AND s.courtId = :courtId AND s.startTime < :endTime AND s.endTime > :startTime")
+    long countClassBookingsInTimeRange(
+            @Param("courtId") int courtId,
+            @Param("startTime") LocalDateTime startTime,
+            @Param("endTime") LocalDateTime endTime);
+
+    @Query("SELECT COUNT(b) > 0 FROM Booking b " +
+            "JOIN b.bookingSlots bs " +
+            "JOIN bs.slot s " +
+            "WHERE s.courtId = :courtId " +
+            "AND b.status NOT IN ('CANCELLED', 'COMPLETED') " +
+            "AND s.date = :date " +
+            "AND s.startTime < :endTime AND s.endTime > :startTime")
+    boolean existsActiveBookingForCourtAndTime(
+            @Param("courtId") Integer courtId,
+            @Param("date") LocalDate date,
+            @Param("startTime") LocalTime startTime,
+            @Param("endTime") LocalTime endTime);
+
+    List<Booking> findByMemberAndBookingDateAfter(Member member, LocalDateTime date);
+
+    @Query("SELECT DISTINCT b FROM Booking b JOIN b.bookingSlots bs JOIN bs.slot s WHERE b.member = :member AND (s.date > :today OR (s.date = :today AND s.endTime > :nowTime))")
+    List<Booking> findUpcomingBookingsByMember(@Param("member") Member member, @Param("today") java.time.LocalDate today, @Param("nowTime") java.time.LocalTime nowTime);
+
+    @Query("SELECT b FROM Booking b WHERE b.bookingDate < :now")
+    List<Booking> findAllExpired(@Param("now") LocalDateTime now);
+
+    // 查詢某個 class session 下所有指定狀態的 booking
+    @Query("SELECT b FROM Booking b WHERE b.purpose = 'CLASS_SESSION' AND b.purposeId = :sessionId AND b.status = :status")
+    List<Booking> findByClassSessionPurposeAndStatus(@Param("sessionId") Integer sessionId, @Param("status") String status);
 }
\ No newline at end of file
Index: pickleball-frontend/src/service/CourtService.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/**\r\n * CourtService.js\r\n * \r\n * Centralized service for interacting with Court-related endpoints.\r\n * Uses a reusable axios instance with interceptors for auth.\r\n */\r\n\r\nimport axios from 'axios';\r\n\r\n\r\n// Base URL for backend API\r\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:8081';\r\n\r\n// Create a reusable Axios instance\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  timeout: 10000\r\n});\r\n\r\n// Add request interceptor to include Bearer token automatically\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('authToken');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => Promise.reject(error)\r\n);\r\n\r\n// Add response interceptor to handle global auth errors\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    if (error.response?.status === 401) {\r\n      console.warn('401 Unauthorized - clearing token and redirecting to login');\r\n      localStorage.removeItem('authToken');\r\n      window.location.href = '/login?session_expired=true';\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// -----------------------------\r\n// CourtService Methods\r\n// -----------------------------\r\n\r\nconst CourtService = {\r\n  /**\r\n   * Fetch all courts for the member view.\r\n   * Automatically attaches auth header via axios instance.\r\n   * @returns {Promise<Array>} List of court objects\r\n   */\r\n  getAllCourts: async () => {\r\n    try {\r\n      const response = await api.get('/api/member/courts');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('[CourtService] Error in getAllCourts:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Fetch details for a single court by ID.\r\n   * @param {string|number} id - The court ID\r\n   * @returns {Promise<Object>} Court details\r\n   */\r\n  getCourtById: async (id) => {\r\n    try {\r\n      const response = await api.get(`/api/member/courts/${id}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('[CourtService] Error in getCourtById:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Fetch courts that the current user has booked.\r\n   * @returns {Promise<Array>} List of court objects\r\n   */\r\n  getBookedCourts: async () => {\r\n    try {\r\n      const response = await api.get('/api/member/courts/booked');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('[CourtService] Error in getBookedCourts:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Fetch available courts for a given date and time range.\r\n   * @param {string} date - yyyy-MM-dd\r\n   * @param {string} startTime - HH:mm\r\n   * @param {string} endTime - HH:mm\r\n   * @returns {Promise<Array>} List of available court objects\r\n   */\r\n  getAvailableCourts: async (date, startTime, endTime) => {\r\n    try {\r\n      const response = await api.get('/api/member/courts/available', {\r\n        params: { date, startTime, endTime }\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('[CourtService] Error in getAvailableCourts:', error);\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * 上传球场图片\r\n * @param {number} courtId\r\n * @param {File} file\r\n * @returns {Promise<Object>}\r\n */\r\nexport const uploadCourtImage = async (courtId, file) => {\r\n  const formData = new FormData();\r\n  formData.append('file', file);\r\n  const token = localStorage.getItem('adminToken');\r\n  const response = await api.post(`/api/admin/courts/${courtId}/images`, formData, {\r\n    headers: { 'Content-Type': 'multipart/form-data', Authorization: `Bearer ${token}` }\r\n  });\r\n  return response.data;\r\n};\r\n\r\n/**\r\n * 获取球场图片\r\n * @param {number} courtId\r\n * @returns {Promise<Array>}\r\n */\r\nexport const getCourtImages = async (courtId) => {\r\n  const token = localStorage.getItem('adminToken');\r\n  const response = await api.get(`/api/admin/courts/${courtId}/images`, {\r\n    headers: { Authorization: `Bearer ${token}` }\r\n  });\r\n  return response.data;\r\n};\r\n\r\nexport const getCourtImagesPublic = async (courtId) => {\r\n  const response = await api.get(`/api/admin/courts/public/${courtId}/images`);\r\n  return response.data;\r\n};\r\n\r\n\r\nexport default CourtService;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball-frontend/src/service/CourtService.js b/pickleball-frontend/src/service/CourtService.js
--- a/pickleball-frontend/src/service/CourtService.js	(revision 97abd609899a67b781b8ace8e91358a782fc5acd)
+++ b/pickleball-frontend/src/service/CourtService.js	(date 1753722675083)
@@ -54,7 +54,7 @@
    */
   getAllCourts: async () => {
     try {
-      const response = await api.get('/api/member/courts');
+      const response = await api.get('/api/courts');
       return response.data;
     } catch (error) {
       console.error('[CourtService] Error in getAllCourts:', error);
@@ -108,6 +108,40 @@
       console.error('[CourtService] Error in getAvailableCourts:', error);
       throw error;
     }
+  },
+
+  /**
+   * Fetch multiple courts by an array of IDs.
+   * @param {Array} ids - Array of court IDs
+   * @returns {Promise<Array>} Array of court objects
+   */
+  getCourtsByIds: async (ids) => {
+    try {
+      // 平行請求所有 court 詳細資料
+      const courts = await Promise.all(ids.map(id => CourtService.getCourtById(id)));
+      return courts;
+    } catch (error) {
+      console.error('[CourtService] Error in getCourtsByIds:', error);
+      throw error;
+    }
+  },
+
+  /**
+   * Fetch booked dates for a venue (for event creation date disabling)
+   * @param {number} venueId
+   * @param {string} startDate - YYYY-MM-DD
+   * @returns {Promise<Array<string>>} Array of booked date strings (YYYY-MM-DD)
+   */
+  getBookedDates: async (venueId, startDate) => {
+    try {
+      const response = await api.get(`/api/venues/${venueId}/booked-dates`, {
+        params: { startDate }
+      });
+      return response.data;
+    } catch (error) {
+      console.error('[CourtService] Error in getBookedDates:', error);
+      return [];
+    }
   }
 };
 
Index: pickleball-frontend/src/service/api.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import axios from 'axios';\r\nimport UserService from './UserService';\r\n\r\nconst api = axios.create({\r\n  baseURL: '/api'\r\n});\r\n\r\napi.interceptors.request.use(config => {\r\n  const token = UserService.getToken();\r\n  if (token) {\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n  return config;\r\n});\r\n\r\napi.interceptors.response.use(\r\n  response => response,\r\n  error => {\r\n    if (error.response?.status === 401) {\r\n      UserService.logout();\r\n      window.location.href = '/login';\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default api;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball-frontend/src/service/api.js b/pickleball-frontend/src/service/api.js
--- a/pickleball-frontend/src/service/api.js	(revision 97abd609899a67b781b8ace8e91358a782fc5acd)
+++ b/pickleball-frontend/src/service/api.js	(date 1753722675090)
@@ -2,7 +2,7 @@
 import UserService from './UserService';
 
 const api = axios.create({
-  baseURL: '/api'
+  baseURL: 'http://localhost:8081/api'
 });
 
 api.interceptors.request.use(config => {
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/ClassSessionServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/ClassSessionServiceImpl.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/ClassSessionServiceImpl.java
new file mode 100644
--- /dev/null	(date 1753722380873)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/ClassSessionServiceImpl.java	(date 1753722380873)
@@ -0,0 +1,489 @@
+package com.pickleball_backend.pickleball.service;
+
+import com.pickleball_backend.pickleball.dto.ClassSessionDto;
+import com.pickleball_backend.pickleball.dto.RecurringSessionRequestDto;
+import com.pickleball_backend.pickleball.entity.*;
+import com.pickleball_backend.pickleball.exception.*;
+import com.pickleball_backend.pickleball.repository.*;
+import lombok.RequiredArgsConstructor;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.springframework.stereotype.Service;
+import org.springframework.transaction.annotation.Transactional;
+import org.springframework.scheduling.annotation.Scheduled;
+
+import java.time.DayOfWeek;
+import java.time.LocalDate;
+import java.time.LocalDateTime;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.stream.Collectors;
+import java.util.UUID;
+
+@Service
+@RequiredArgsConstructor
+public class ClassSessionServiceImpl implements ClassSessionService {
+
+    private final ClassSessionRepository sessionRepository;
+    private final CourtRepository courtRepository;
+    private final UserRepository userRepository;
+    private final ClassRegistrationRepository registrationRepository;
+    private final BookingRepository bookingRepository;
+    private final EmailService emailService;
+    private final MemberRepository memberRepository;
+    private final PaymentRepository paymentRepository;
+    private final WalletRepository walletRepository;
+    private final EscrowAccountService escrowAccountService;
+    private static final Logger logger = LoggerFactory.getLogger(ClassSessionServiceImpl.class);
+
+
+    @Override
+    @Transactional
+    public ClassSession createClassSession(ClassSessionDto sessionDto, User coach) throws ConflictException, ResourceNotFoundException {
+        // 驗證教練
+        if (!"COACH".equalsIgnoreCase(coach.getUserType())) {
+            throw new ValidationException("User is not a coach");
+        }
+        // 驗證場地
+        Court court = courtRepository.findById(sessionDto.getCourtId())
+                .orElseThrow(() -> new ResourceNotFoundException("Court not found"));
+        // 檢查時間衝突 (教練)
+        if (sessionRepository.existsByCoachIdAndStartTimeBetweenAndStatusNot(
+                coach.getId(), sessionDto.getStartTime(), sessionDto.getEndTime(), "CANCELLED")) {
+            throw new ConflictException("Coach has scheduling conflict");
+        }
+        // 檢查時間衝突 (場地)
+        if (sessionRepository.existsByCourtIdAndStartTimeBetweenAndStatusNot(
+                sessionDto.getCourtId(), sessionDto.getStartTime(), sessionDto.getEndTime(), "CANCELLED")) {
+            throw new ConflictException("Court is already booked");
+        }
+        // 檢查普通預約衝突
+        if (bookingRepository.existsActiveBookingForCourtAndTime(
+                sessionDto.getCourtId(),
+                sessionDto.getStartTime().toLocalDate(),
+                sessionDto.getStartTime().toLocalTime(),
+                sessionDto.getEndTime().toLocalTime())) {
+            throw new ConflictException("Court has regular booking at this time");
+        }
+        // 創建課程
+        ClassSession session = new ClassSession();
+        session.setCoach(coach);
+        session.setCourt(court);
+        session.setStartTime(sessionDto.getStartTime());
+        session.setEndTime(sessionDto.getEndTime());
+        session.setMaxParticipants(sessionDto.getMaxParticipants());
+        session.setDescription(sessionDto.getDescription());
+        session.setPrice(sessionDto.getPrice());
+        session.setStatus("AVAILABLE");
+        session.setSlotType("COACH_SESSION");
+        session.setCurrentParticipants(0);
+        session.setTitle(sessionDto.getTitle());
+        return sessionRepository.save(session);
+    }
+
+    @Override
+    @Transactional
+    public ClassSession updateClassSession(Integer sessionId, ClassSessionDto sessionDto)
+            throws ResourceNotFoundException, ConflictException {
+
+        ClassSession session = sessionRepository.findById(sessionId)
+                .orElseThrow(() -> new ResourceNotFoundException("Session not found"));
+
+        // 只允许修改未开始的课程
+        if (!"AVAILABLE".equals(session.getStatus()) && !"FULL".equals(session.getStatus())) {
+            throw new ValidationException("Only available or full sessions can be modified");
+        }
+
+        // 冲突检查
+        if (sessionRepository.existsConflictForUpdate(
+                sessionId,
+                sessionDto.getCourtId(),
+                sessionDto.getStartTime(),
+                sessionDto.getEndTime())) {
+            throw new ConflictException("Time slot conflict detected");
+        }
+
+        // 更新字段
+        session.setStartTime(sessionDto.getStartTime());
+        session.setEndTime(sessionDto.getEndTime());
+        session.setMaxParticipants(sessionDto.getMaxParticipants());
+        session.setDescription(sessionDto.getDescription());
+        session.setPrice(sessionDto.getPrice());
+        session.setTitle(sessionDto.getTitle());
+
+        // 如果修改后人数少于最大人数，恢复为可用状态
+        if (session.getCurrentParticipants() < sessionDto.getMaxParticipants() &&
+                "FULL".equals(session.getStatus())) {
+            session.setStatus("AVAILABLE");
+        }
+
+        return sessionRepository.save(session);
+    }
+
+    @Override
+    @Transactional
+    public void cancelClassSession(Integer sessionId, boolean force, String reason)
+            throws ResourceNotFoundException, ConflictException {
+
+        ClassSession session = sessionRepository.findById(sessionId)
+                .orElseThrow(() -> new ResourceNotFoundException("Session not found"));
+
+        // 檢查24小時限制
+        LocalDateTime now = LocalDateTime.now();
+        long hoursUntilSession = java.time.temporal.ChronoUnit.HOURS.between(now, session.getStartTime());
+        
+        // 如果課程開始前24小時內，不允許取消（除非是教練強制取消）
+        if (hoursUntilSession <= 24 && !force) {
+            throw new ConflictException("Cannot cancel class session within 24 hours of start time. Use force=true to override.");
+        }
+
+        // 如果有报名且不强制取消
+        if (session.getCurrentParticipants() > 0 && !force) {
+            throw new ConflictException("Session has participants. Use force=true to cancel");
+        }
+
+        // 通知已报名用户并退款
+        if (session.getCurrentParticipants() > 0) {
+            List<ClassRegistration> registrations = registrationRepository.findByClassSessionId(sessionId);
+            for (ClassRegistration registration : registrations) {
+                Member member = registration.getMember();
+                if (member != null) {
+                    // 使用託管帳戶退款
+                    escrowAccountService.refundFromEscrow(member.getUser(), session.getPrice(), session);
+                    // 通知
+                    String email = member.getUser().getEmail();
+                    String msg = "Your class on " + session.getStartTime() + " has been cancelled.";
+                    if (reason != null && !reason.isEmpty()) {
+                        msg += "\nReason: " + reason;
+                    }
+                    emailService.sendEmail(email, "Class Cancelled", msg);
+                }
+            }
+        }
+
+        session.setStatus("CANCELLED");
+        sessionRepository.save(session);
+    }
+
+    @Override
+    public List<ClassSession> getCoachSchedule(Integer coachId, LocalDateTime start, LocalDateTime end) {
+        return sessionRepository.findScheduleByCoachIdAndPeriodWithVenue(coachId, start, end);
+    }
+
+    @Override
+    @Transactional
+    public boolean registerUserForSession(Integer sessionId, Integer userId)
+            throws ConflictException, ResourceNotFoundException {
+
+        ClassSession session = sessionRepository.findById(sessionId)
+                .orElseThrow(() -> new ResourceNotFoundException("Session not found"));
+
+        // 新增：教練保留時段只能在前一天或當天預約
+        if ("COACH_AVAILABILITY".equals(session.getSlotType())) {
+            LocalDateTime now = LocalDateTime.now();
+            LocalDateTime slotDate = session.getStartTime().toLocalDate().atStartOfDay();
+            LocalDateTime today = now.toLocalDate().atStartOfDay();
+            LocalDateTime yesterday = today.minusDays(1);
+            if (!(slotDate.equals(today) || slotDate.equals(yesterday))) {
+                throw new ConflictException("This coach slot can only be booked on the day before or the same day.");
+            }
+        }
+
+        User user = userRepository.findById(userId)
+                .orElseThrow(() -> new ResourceNotFoundException("User not found"));
+
+        Member member = memberRepository.findByUserId(userId);
+        if (member == null) {
+            throw new ValidationException("User is not a member");
+        }
+
+        // Replacement class: only allow original students
+        if (session.getReplacementForSessionId() != null) {
+            Integer originSessionId = session.getReplacementForSessionId();
+            ClassSession origin = sessionRepository.findById(originSessionId).orElse(null);
+            boolean isOriginalStudent = false;
+            if (origin != null && origin.getRegistrations() != null) {
+                for (ClassRegistration reg : origin.getRegistrations()) {
+                    if (reg.getMember() != null && reg.getMember().getId().equals(member.getId())) {
+                        isOriginalStudent = true;
+                        break;
+                    }
+                }
+            }
+            if (!isOriginalStudent) {
+                throw new ConflictException("Only students from the original cancelled class can register for this replacement class.");
+            }
+        }
+
+        // 檢查名額
+        if (session.getCurrentParticipants() >= session.getMaxParticipants()) {
+            throw new ConflictException("Session is full");
+        }
+
+        // 檢查是否已報名
+        if (registrationRepository.existsByClassSessionIdAndMemberId(sessionId, member.getId())) {
+            throw new ConflictException("User already registered for this session");
+        }
+
+        // Handle payment: replacement class is always free
+        double price = session.getReplacementForSessionId() != null ? 0.0 : session.getPrice();
+        processPayment(member, price, session);
+
+        // 創建報名記錄
+        ClassRegistration registration = new ClassRegistration();
+        registration.setClassSession(session);
+        registration.setMember(member);
+        registration.setRegistrationDate(LocalDateTime.now());
+        registrationRepository.save(registration);
+
+        // 更新課程人數
+        session.setCurrentParticipants(session.getCurrentParticipants() + 1);
+        if (session.getCurrentParticipants() >= session.getMaxParticipants()) {
+            session.setStatus("FULL");
+        }
+        // 新增：如果達到開班人數（如 3 人），自動 setStatus("CONFIRMED")
+        if (session.getCurrentParticipants() >= 4) {
+            session.setStatus("CONFIRMED");
+        }
+        // 新增：報名成功後寄送 email 通知
+        emailService.sendClassRegistrationConfirmation(
+            user.getEmail(),
+            session,
+            member
+        );
+        // 新增：可加 app 通知（如有推播模組）
+        sessionRepository.save(session);
+
+        return true;
+    }
+
+    @Override
+    @Transactional
+    public boolean registerUserForMultipleSessions(Integer userId, List<Integer> sessionIds, String paymentMethod) throws ConflictException, ResourceNotFoundException {
+        User user = userRepository.findById(userId)
+                .orElseThrow(() -> new ResourceNotFoundException("User not found"));
+        Member member = memberRepository.findByUserId(userId);
+        if (member == null) {
+            throw new ValidationException("User is not a member");
+        }
+        List<ClassSession> sessions = sessionRepository.findAllByIdWithCourt(sessionIds);
+        if (sessions.size() != sessionIds.size()) {
+            throw new ResourceNotFoundException("Some sessions not found");
+        }
+        // 檢查所有 session 是否都可報名
+        for (ClassSession session : sessions) {
+            if (session.getCurrentParticipants() >= session.getMaxParticipants()) {
+                throw new ConflictException("Session is full: " + session.getId());
+            }
+            if (registrationRepository.existsByClassSessionIdAndMemberId(session.getId(), member.getId())) {
+                throw new ConflictException("Already registered for session: " + session.getId());
+            }
+        }
+        // 計算總金額
+        double total = sessions.stream().mapToDouble(ClassSession::getPrice).sum();
+        
+        // 使用託管帳戶系統處理支付（只扣一次）
+        if ("wallet".equalsIgnoreCase(paymentMethod)) {
+            // 為每個課程創建託管支付記錄
+            for (ClassSession session : sessions) {
+                escrowAccountService.depositToEscrow(user, session.getPrice(), session);
+            }
+        } else {
+            // 其他付款方式可擴充
+        }
+        // 為每個 session 建立報名記錄
+        for (ClassSession session : sessions) {
+            ClassRegistration registration = new ClassRegistration();
+            registration.setClassSession(session);
+            registration.setMember(member);
+            registration.setRegistrationDate(LocalDateTime.now());
+            // 託管支付記錄會在 EscrowAccountService 中創建
+            registrationRepository.save(registration);
+            session.setCurrentParticipants(session.getCurrentParticipants() + 1);
+            if (session.getCurrentParticipants() >= session.getMaxParticipants()) {
+                session.setStatus("FULL");
+            }
+            if (session.getCurrentParticipants() >= 4) {
+                session.setStatus("CONFIRMED");
+            }
+            emailService.sendClassRegistrationConfirmation(
+                user.getEmail(),
+                session,
+                member
+            );
+            sessionRepository.save(session);
+        }
+        return true;
+    }
+
+    @Override
+    public List<ClassSession> getAvailableSessions(Integer courtId, LocalDateTime start, LocalDateTime end) {
+        return sessionRepository.findAvailableSessionsWithRegistrations(courtId, start, end);
+    }
+
+    @Override
+    public boolean hasCourtConflict(Integer courtId, java.time.LocalDateTime start, java.time.LocalDateTime end) {
+        // 檢查課程衝突
+        boolean sessionConflict = sessionRepository.existsByCourtIdAndStartTimeBetweenAndStatusNot(
+                courtId, start, end, "CANCELLED");
+        // 檢查booking衝突
+        boolean bookingConflict = bookingRepository.existsActiveBookingForCourtAndTime(
+                courtId,
+                start.toLocalDate(),
+                start.toLocalTime(),
+                end.toLocalTime()
+        );
+        return sessionConflict || bookingConflict;
+    }
+
+    private void processPayment(Member member, double amount, ClassSession session) {
+        // 使用託管帳戶系統處理支付
+        escrowAccountService.depositToEscrow(member.getUser(), amount, session);
+    }
+
+    private void refundPayment(Member member, double amount) {
+        // 1. 退款到钱包
+        Wallet wallet = walletRepository.findByMemberId(member.getId())
+                .orElseThrow(() -> new ResourceNotFoundException("Wallet not found"));
+        wallet.setBalance(wallet.getBalance() + amount);
+        walletRepository.save(wallet);
+
+        // 2. 创建退款记录
+        Payment refund = new Payment();
+        refund.setAmount(amount);
+        refund.setRefundDate(LocalDateTime.now());
+        refund.setPaymentMethod("WALLET");
+        refund.setStatus("REFUNDED");
+        refund.setPaymentType("CLASS_SESSION_REFUND");
+        paymentRepository.save(refund);
+    }
+
+    @Transactional
+    @Override
+    public List<ClassSession> createRecurringSessions(RecurringSessionRequestDto request, User coach)
+            throws ConflictException, ResourceNotFoundException {
+
+        List<ClassSession> sessions = new ArrayList<>();
+        LocalDate currentDate = request.getStartDate();
+        String recurringGroupId = UUID.randomUUID().toString();
+
+        while (!currentDate.isAfter(request.getEndDate())) {
+            if (request.getDaysOfWeek().contains(currentDate.getDayOfWeek())) {
+                LocalDateTime startDateTime = LocalDateTime.of(currentDate, request.getStartTime());
+                LocalDateTime endDateTime = LocalDateTime.of(currentDate, request.getEndTime());
+
+                ClassSessionDto sessionDto = new ClassSessionDto();
+                sessionDto.setCourtId(request.getCourtId());
+                sessionDto.setStartTime(startDateTime);
+                sessionDto.setEndTime(endDateTime);
+                sessionDto.setMaxParticipants(request.getMaxParticipants());
+                sessionDto.setDescription(request.getDescription());
+                sessionDto.setPrice(request.getPrice());
+                sessionDto.setTitle(request.getTitle());
+                sessionDto.setSlotType("RECURRING_SESSION");
+
+                try {
+                    ClassSession session = createClassSession(sessionDto, coach);
+                    session.setRecurring(true);
+                    session.setRecurrencePattern("WEEKLY");
+                    session.setRecurrenceDays(request.getDaysOfWeek().stream()
+                            .map(DayOfWeek::name)
+                            .collect(Collectors.joining(",")));
+                    session.setRecurringGroupId(recurringGroupId);
+                    sessions.add(session);
+                } catch (ConflictException e) {
+                    // 处理时间冲突 - 跳过冲突日期
+                    logger.warn("时间冲突跳过日期 {}: {}", currentDate, e.getMessage());
+                }
+            }
+            currentDate = currentDate.plusDays(1);
+        }
+
+        if (sessions.isEmpty()) {
+            throw new ConflictException("所有选定日期都存在时间冲突");
+        }
+
+        return sessions;
+    }
+
+    @Transactional
+    public void settleClassSession(Integer sessionId) {
+        ClassSession session = sessionRepository.findById(sessionId)
+            .orElseThrow(() -> new ResourceNotFoundException("Session not found"));
+        if (!"COMPLETED".equals(session.getStatus())) {
+            throw new IllegalStateException("Session not completed yet");
+        }
+        
+        // 使用託管帳戶系統進行分帳
+        escrowAccountService.settleClassSession(session);
+        
+        // 記錄結算明細
+        session.setNote("Settled via escrow system: 80% to coach, 20% to platform");
+        sessionRepository.save(session);
+    }
+
+    private double getDurationHours(ClassSession session) {
+        return java.time.Duration.between(session.getStartTime(), session.getEndTime()).toMinutes() / 60.0;
+    }
+
+    @Scheduled(cron = "0 */5 * * * ?") // 每5分鐘檢查一次
+    public void autoSettleStartedSessions() {
+        LocalDateTime now = LocalDateTime.now();
+        LocalDateTime fiveMinutesAgo = now.minusMinutes(5);
+        
+        // 查找剛剛開始的課程（狀態為 CONFIRMED 且開始時間在5分鐘內）
+        List<ClassSession> startedSessions = sessionRepository.findByStatusAndStartTimeBetween("CONFIRMED", fiveMinutesAgo, now);
+        
+        for (ClassSession session : startedSessions) {
+            try {
+                // 更新課程狀態為進行中
+                session.setStatus("IN_PROGRESS");
+                sessionRepository.save(session);
+                
+                // 進行託管分帳
+                escrowAccountService.settleClassSession(session);
+                
+                logger.info("Auto-settled session {} via escrow system", session.getId());
+            } catch (Exception e) {
+                logger.error("Failed to auto-settle session " + session.getId(), e);
+            }
+        }
+    }
+
+    @Scheduled(cron = "0 0 2 * * ?") // 每天凌晨2點跑
+    public void autoSettleCompletedSessions() {
+        List<ClassSession> completed = sessionRepository.findByStatus("COMPLETED");
+        for (ClassSession session : completed) {
+            try {
+                settleClassSession(session.getId());
+            } catch (Exception e) {
+                logger.error("Failed to settle session " + session.getId(), e);
+            }
+        }
+    }
+
+    @Scheduled(cron = "0 0 1 * * ?") // 每天凌晨1點跑
+    public void autoCancelEmptySessions() {
+        List<ClassSession> upcoming = sessionRepository.findUpcomingSessionsWithoutParticipants();
+        for (ClassSession session : upcoming) {
+            session.setStatus("CANCELLED");
+            sessionRepository.save(session);
+            // 可選：通知教練
+        }
+    }
+
+    @Override
+    public List<ClassSession> getSessionsByIds(List<Integer> sessionIds) {
+        return sessionRepository.findAllByIdWithCourt(sessionIds);
+    }
+
+    @Override
+    public ClassSession getSessionById(Integer sessionId) {
+        return sessionRepository.findById(sessionId).orElse(null);
+    }
+
+    @Override
+    public List<ClassSession> getSessionsByRecurringGroupId(String recurringGroupId) {
+        return sessionRepository.findByRecurringGroupId(recurringGroupId);
+    }
+}
\ No newline at end of file
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/VenueRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.repository;\r\n\r\nimport com.pickleball_backend.pickleball.entity.Venue;\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\nimport org.springframework.stereotype.Repository;\r\n\r\n@Repository\r\npublic interface VenueRepository extends JpaRepository<Venue, Integer> {\r\n    boolean existsByNameAndLocation(String name, String location);\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/VenueRepository.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/VenueRepository.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/VenueRepository.java	(revision 97abd609899a67b781b8ace8e91358a782fc5acd)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/VenueRepository.java	(date 1753722675098)
@@ -1,10 +1,30 @@
 package com.pickleball_backend.pickleball.repository;
 
+import com.pickleball_backend.pickleball.entity.Court;
 import com.pickleball_backend.pickleball.entity.Venue;
 import org.springframework.data.jpa.repository.JpaRepository;
-import org.springframework.stereotype.Repository;
+import org.springframework.data.jpa.repository.Query;
+import org.springframework.data.repository.query.Param;
+import java.util.List;
 
-@Repository
 public interface VenueRepository extends JpaRepository<Venue, Integer> {
-    boolean existsByNameAndLocation(String name, String location);
+    // boolean existsByNameAndLocation(String name, String location);
+
+    // Find all venues for a given coach
+    // @Query("SELECT v FROM Venue v JOIN v.coaches c WHERE c.id = :coachId")
+    // List<Venue> findByCoachId(@Param("coachId") Integer coachId);
+
+    // @Query("SELECT c FROM Court c JOIN c.venue v WHERE v.id IN (SELECT v.id FROM Venue v JOIN v.coaches c WHERE c.id = :coachId)")
+    // List<Court> findCourtsByCoachId(@Param("coachId") Integer coachId);
+
+    @Query("SELECT v FROM Venue v WHERE v.state = :state")
+    List<Venue> findByState(@Param("state") String state);
+    
+    // 新增：查找所有場地
+    @Query("SELECT v FROM Venue v ORDER BY v.name")
+    List<Venue> findAllVenues();
+    
+    // 新增：根據州查找場地
+    @Query("SELECT v FROM Venue v WHERE v.state = :state ORDER BY v.name")
+    List<Venue> findVenuesByState(@Param("state") String state);
 }
\ No newline at end of file
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/CoachController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/CoachController.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/CoachController.java
new file mode 100644
--- /dev/null	(date 1753746659740)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/CoachController.java	(date 1753746659740)
@@ -0,0 +1,975 @@
+package com.pickleball_backend.pickleball.controller;
+
+import com.pickleball_backend.pickleball.dto.CoachSlotDto;
+import com.pickleball_backend.pickleball.dto.RecurringSessionRequestDto;
+import com.pickleball_backend.pickleball.entity.*;
+import com.pickleball_backend.pickleball.exception.*;
+import com.pickleball_backend.pickleball.repository.*;
+import com.pickleball_backend.pickleball.service.CoachCourtService;
+import lombok.RequiredArgsConstructor;
+import org.springframework.format.annotation.DateTimeFormat;
+import org.springframework.http.HttpStatus;
+import org.springframework.http.ResponseEntity;
+import org.springframework.security.access.prepost.PreAuthorize;
+import org.springframework.security.core.context.SecurityContextHolder;
+import org.springframework.web.bind.annotation.*;
+
+import java.time.LocalDateTime;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import java.util.HashSet;
+import java.util.HashMap;
+import java.util.ArrayList;
+import java.util.stream.Collectors;
+import java.time.LocalDate;
+import org.springframework.transaction.annotation.Transactional;
+import java.time.OffsetDateTime;
+import org.springframework.data.domain.PageRequest;
+import org.springframework.data.domain.Pageable;
+import org.springframework.data.domain.Page;
+
+@RestController
+@RequestMapping("/api/coach")
+@RequiredArgsConstructor
+public class CoachController {
+
+    private final CoachCourtService coachCourtService;
+    private final UserRepository userRepository;
+    private final VenueRepository venueRepository;
+    private final CoachRepository coachRepository;
+    private final ClassSessionRepository sessionRepository;
+    private final CourtRepository courtRepository;
+    private final ClassRegistrationRepository registrationRepository;
+    private final PaymentRepository paymentRepository;
+    private final WalletRepository walletRepository;
+    private final WalletTransactionRepository walletTransactionRepository;
+
+    // 獲取教練可用的球場
+    @GetMapping("/available-courts")
+    @PreAuthorize("hasAuthority('ROLE_COACH')")
+    public ResponseEntity<?> getAvailableCourts() {
+        try {
+            String username = SecurityContextHolder.getContext().getAuthentication().getName();
+            User coach = userRepository.findByUserAccount_Username(username)
+                    .orElseThrow(() -> new ResourceNotFoundException("Coach not found"));
+
+            return ResponseEntity.ok(coachCourtService.getAvailableCourtsForCoach(coach.getId()));
+        } catch (ResourceNotFoundException e) {
+            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(e.getMessage());
+        } catch (Exception e) {
+            return ResponseEntity.internalServerError().body("Error retrieving courts");
+        }
+    }
+
+    // 建立教練可用時段（需包含 experienceYear）
+    @PostMapping("/slots")
+    @PreAuthorize("hasAuthority('ROLE_COACH')")
+    public ResponseEntity<?> createCoachSlot(@RequestBody CoachSlotDto slotDto) {
+        try {
+            String username = SecurityContextHolder.getContext().getAuthentication().getName();
+            User coach = userRepository.findByUserAccount_Username(username)
+                    .orElseThrow(() -> new ResourceNotFoundException("Coach not found"));
+
+            ClassSession session = coachCourtService.createCoachSlot(coach.getId(), slotDto);
+            return ResponseEntity.status(HttpStatus.CREATED).body(session);
+        } catch (ConflictException e) {
+            return ResponseEntity.status(HttpStatus.CONFLICT).body(Map.of("error", e.getMessage()));
+        } catch (ResourceNotFoundException e) {
+            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(e.getMessage());
+        } catch (Exception e) {
+            return ResponseEntity.internalServerError().body("Error creating slot");
+        }
+    }
+
+    // 更新教練可用時段（需包含 experienceYear）
+    @PutMapping("/slots/{slotId}")
+    @PreAuthorize("hasAuthority('ROLE_COACH')")
+    public ResponseEntity<?> updateCoachSlot(
+            @PathVariable Integer slotId,
+            @RequestBody CoachSlotDto slotDto) {
+        try {
+            String username = SecurityContextHolder.getContext().getAuthentication().getName();
+            User coach = userRepository.findByUserAccount_Username(username)
+                    .orElseThrow(() -> new ResourceNotFoundException("Coach not found"));
+
+            coachCourtService.updateCoachSlot(coach.getId(), slotId, slotDto);
+            return ResponseEntity.ok("Slot updated successfully");
+        } catch (ResourceNotFoundException e) {
+            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(e.getMessage());
+        } catch (ValidationException | ConflictException e) {
+            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(e.getMessage());
+        } catch (Exception e) {
+            return ResponseEntity.internalServerError().body("Error updating slot");
+        }
+    }
+
+    // 刪除教練時段
+    @DeleteMapping("/slots/{slotId}")
+    @PreAuthorize("hasAuthority('ROLE_COACH')")
+    public ResponseEntity<?> removeCoachSlot(
+            @PathVariable Integer slotId,
+            @RequestParam(required = false, defaultValue = "false") boolean force) {
+        try {
+            String username = SecurityContextHolder.getContext().getAuthentication().getName();
+            User coach = userRepository.findByUserAccount_Username(username)
+                    .orElseThrow(() -> new ResourceNotFoundException("Coach not found"));
+
+            coachCourtService.removeCoachSlot(coach.getId(), slotId, force);
+            return ResponseEntity.ok("Slot cancelled successfully");
+        } catch (ResourceNotFoundException e) {
+            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(e.getMessage());
+        } catch (ConflictException e) {
+            return ResponseEntity.status(HttpStatus.CONFLICT).body(e.getMessage());
+        } catch (Exception e) {
+            return ResponseEntity.internalServerError().body("Error removing slot");
+        }
+    }
+
+    // 獲取教練排程
+    @GetMapping("/schedule")
+    @PreAuthorize("hasAuthority('ROLE_COACH')")
+    public ResponseEntity<?> getCoachSchedule(
+            @RequestParam(required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime start,
+            @RequestParam(required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime end) {
+        try {
+            String username = SecurityContextHolder.getContext().getAuthentication().getName();
+            User coach = userRepository.findByUserAccount_Username(username)
+                    .orElseThrow(() -> new ResourceNotFoundException("Coach not found"));
+
+            // 新增防呆
+            if (coach == null) {
+                return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Coach not found for user: " + username);
+            }
+
+            LocalDateTime from = start != null ? start.toLocalDateTime() : LocalDateTime.now();
+            LocalDateTime to = end != null ? end.toLocalDateTime() : from.plusMonths(1);
+
+            // 獲取課程數據
+            List<ClassSession> sessions = coachCourtService.findScheduleByCoachIdAndPeriodWithVenue(
+                    coach.getId(), from, to
+            );
+            
+            // 轉換為 DTO 確保場地信息正確傳遞
+            List<Map<String, Object>> sessionDtos = sessions.stream().map(session -> {
+                Map<String, Object> dto = new HashMap<>();
+                dto.put("id", session.getId());
+                dto.put("title", session.getTitle());
+                dto.put("startTime", session.getStartTime());
+                dto.put("endTime", session.getEndTime());
+                dto.put("status", session.getStatus());
+                dto.put("maxParticipants", session.getMaxParticipants());
+                dto.put("currentParticipants", session.getCurrentParticipants());
+                dto.put("description", session.getDescription());
+                dto.put("price", session.getPrice());
+                dto.put("slotType", session.getSlotType());
+                dto.put("recurringGroupId", session.getRecurringGroupId());
+                dto.put("isRecurring", session.getIsRecurring());
+                dto.put("recurrencePattern", session.getRecurrencePattern());
+                dto.put("recurrenceDays", session.getRecurrenceDays());
+                dto.put("recurrenceEndDate", session.getRecurrenceEndDate());
+                
+                // 場地信息
+                if (session.getCourt() != null) {
+                    dto.put("courtId", session.getCourt().getId());
+                    dto.put("courtName", session.getCourt().getName());
+                    dto.put("court", session.getCourt());
+                }
+                
+                // 場館信息 - 優先使用直接關聯的 venue，如果沒有則使用 court 的 venue
+                Venue venue = session.getVenue();
+                if (venue == null && session.getCourt() != null) {
+                    venue = session.getCourt().getVenue();
+                }
+                if (venue != null) {
+                    dto.put("venueId", venue.getId());
+                    dto.put("venueName", venue.getName());
+                    dto.put("venueState", venue.getState());
+                    dto.put("venue", venue);
+                }
+                
+                return dto;
+            }).collect(Collectors.toList());
+
+            return ResponseEntity.ok(sessionDtos);
+        } catch (ResourceNotFoundException e) {
+            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(e.getMessage());
+        } catch (Exception e) {
+            return ResponseEntity.internalServerError().body("Error retrieving schedule: " + e.getMessage());
+        }
+    }
+
+    // 新增：獲取教練排程（包含完整註冊信息）
+    @GetMapping("/schedule-with-registrations")
+    @PreAuthorize("hasAuthority('ROLE_COACH')")
+    public ResponseEntity<?> getCoachScheduleWithRegistrations(
+            @RequestParam(required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime start,
+            @RequestParam(required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime end) {
+        try {
+            String username = SecurityContextHolder.getContext().getAuthentication().getName();
+            User coach = userRepository.findByUserAccount_Username(username)
+                    .orElseThrow(() -> new ResourceNotFoundException("Coach not found"));
+
+            LocalDateTime from = start != null ? start.toLocalDateTime() : LocalDateTime.now();
+            LocalDateTime to = end != null ? end.toLocalDateTime() : from.plusMonths(1);
+
+            // 獲取課程並手動加載註冊信息
+            List<ClassSession> sessions = sessionRepository.findScheduleByCoachIdAndPeriodWithFullRegistrations(
+                    coach.getId(), from, to
+            );
+
+            return ResponseEntity.ok(sessions);
+        } catch (ResourceNotFoundException e) {
+            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(e.getMessage());
+        } catch (Exception e) {
+            return ResponseEntity.internalServerError().body("Error retrieving schedule: " + e.getMessage());
+        }
+    }
+
+    // 新增：測試端點來檢查課程數據
+    @GetMapping("/debug/sessions")
+    @PreAuthorize("hasAuthority('ROLE_COACH')")
+    public ResponseEntity<?> getDebugSessions() {
+        try {
+            String username = SecurityContextHolder.getContext().getAuthentication().getName();
+            User coach = userRepository.findByUserAccount_Username(username)
+                    .orElseThrow(() -> new ResourceNotFoundException("Coach not found"));
+
+            // 獲取所有課程
+            List<ClassSession> allSessions = sessionRepository.findAll();
+            
+            // 獲取該教練的課程
+            List<ClassSession> coachSessions = sessionRepository.findScheduleByCoachId(coach.getId());
+            
+            Map<String, Object> debugInfo = new HashMap<>();
+            debugInfo.put("totalSessions", allSessions.size());
+            debugInfo.put("coachSessions", coachSessions.size());
+            debugInfo.put("coachId", coach.getId());
+            debugInfo.put("username", username);
+            debugInfo.put("coachSessionsList", coachSessions);
+            
+            return ResponseEntity.ok(debugInfo);
+        } catch (Exception e) {
+            return ResponseEntity.internalServerError().body("Error: " + e.getMessage());
+        }
+    }
+
+    // 新增：調試端點來檢查課程的原始數據
+    @GetMapping("/debug/sessions-raw")
+    @PreAuthorize("hasAuthority('ROLE_COACH')")
+    public ResponseEntity<?> getDebugSessionsRaw() {
+        try {
+            String username = SecurityContextHolder.getContext().getAuthentication().getName();
+            User coach = userRepository.findByUserAccount_Username(username)
+                    .orElseThrow(() -> new ResourceNotFoundException("Coach not found"));
+
+            // 獲取原始數據
+            List<ClassSession> sessions = sessionRepository.findScheduleByCoachIdAndPeriodWithVenue(
+                    coach.getId(), LocalDateTime.now().minusDays(30), LocalDateTime.now().plusDays(30)
+            );
+            
+            // 手動構建詳細的調試信息
+            List<Map<String, Object>> debugInfo = sessions.stream().map(session -> {
+                Map<String, Object> info = new HashMap<>();
+                info.put("sessionId", session.getId());
+                info.put("title", session.getTitle());
+                info.put("startTime", session.getStartTime());
+                
+                // Court 信息
+                if (session.getCourt() != null) {
+                    Map<String, Object> courtInfo = new HashMap<>();
+                    courtInfo.put("courtId", session.getCourt().getId());
+                    courtInfo.put("courtName", session.getCourt().getName());
+                    courtInfo.put("courtLocation", session.getCourt().getLocation());
+                    
+                    // Venue 信息（通過 court）
+                    if (session.getCourt().getVenue() != null) {
+                        Map<String, Object> venueInfo = new HashMap<>();
+                        venueInfo.put("venueId", session.getCourt().getVenue().getId());
+                        venueInfo.put("venueName", session.getCourt().getVenue().getName());
+                        venueInfo.put("venueState", session.getCourt().getVenue().getState());
+                        venueInfo.put("venueLocation", session.getCourt().getVenue().getLocation());
+                        courtInfo.put("venue", venueInfo);
+                    } else {
+                        courtInfo.put("venue", "NULL");
+                    }
+                    
+                    info.put("court", courtInfo);
+                } else {
+                    info.put("court", "NULL");
+                }
+                
+                // 直接關聯的 Venue 信息
+                if (session.getVenue() != null) {
+                    Map<String, Object> directVenueInfo = new HashMap<>();
+                    directVenueInfo.put("venueId", session.getVenue().getId());
+                    directVenueInfo.put("venueName", session.getVenue().getName());
+                    directVenueInfo.put("venueState", session.getVenue().getState());
+                    directVenueInfo.put("venueLocation", session.getVenue().getLocation());
+                    info.put("directVenue", directVenueInfo);
+                } else {
+                    info.put("directVenue", "NULL");
+                }
+                
+                return info;
+            }).collect(Collectors.toList());
+
+            return ResponseEntity.ok(debugInfo);
+        } catch (ResourceNotFoundException e) {
+            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(e.getMessage());
+        } catch (Exception e) {
+            return ResponseEntity.internalServerError().body("Error retrieving debug info: " + e.getMessage());
+        }
+    }
+
+    // 新增：檢查特定 court 的詳細信息
+    @GetMapping("/debug/court/{courtId}")
+    @PreAuthorize("hasAuthority('ROLE_COACH')")
+    public ResponseEntity<?> getDebugCourt(@PathVariable Integer courtId) {
+        try {
+            // 查找 court
+            Court court = courtRepository.findById(courtId).orElse(null);
+            
+            Map<String, Object> debugInfo = new HashMap<>();
+            debugInfo.put("courtId", courtId);
+            
+            if (court != null) {
+                debugInfo.put("courtExists", true);
+                debugInfo.put("courtName", court.getName());
+                debugInfo.put("courtLocation", court.getLocation());
+                debugInfo.put("courtStatus", court.getStatus());
+                
+                // 檢查 venue 信息
+                Venue venue = court.getVenue();
+                if (venue != null) {
+                    debugInfo.put("venueExists", true);
+                    debugInfo.put("venueId", venue.getId());
+                    debugInfo.put("venueName", venue.getName());
+                    debugInfo.put("venueState", venue.getState());
+                    debugInfo.put("venueLocation", venue.getLocation());
+                } else {
+                    debugInfo.put("venueExists", false);
+                }
+            } else {
+                debugInfo.put("courtExists", false);
+            }
+            
+            return ResponseEntity.ok(debugInfo);
+        } catch (Exception e) {
+            return ResponseEntity.internalServerError().body("Error: " + e.getMessage());
+        }
+    }
+
+    // Get all venues for the current coach
+    @GetMapping("/venues")
+    @PreAuthorize("hasAuthority('ROLE_COACH')")
+    public ResponseEntity<?> getCoachVenues() {
+        try {
+            String username = SecurityContextHolder.getContext().getAuthentication().getName();
+            User coachUser = userRepository.findByUserAccount_Username(username)
+                    .orElseThrow(() -> new ResourceNotFoundException("Coach not found"));
+            Integer coachId = coachUser.getId();
+            Coach coach = coachRepository.findById(coachId).orElseThrow(() -> new ResourceNotFoundException("Coach not found"));
+            Set<Venue> venues = coach.getVenues();
+            return ResponseEntity.ok(venues != null ? venues : new HashSet<>());
+        } catch (ResourceNotFoundException e) {
+            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(e.getMessage());
+        } catch (Exception e) {
+            return ResponseEntity.internalServerError().body("Error retrieving venues: " + e.getMessage());
+        }
+    }
+
+    // Get public available coaching sessions for all users
+    @GetMapping("/public/sessions")
+    public ResponseEntity<?> getPublicCoachingSessions(
+            @RequestParam(required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) LocalDateTime start,
+            @RequestParam(required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) LocalDateTime end) {
+        try {
+            LocalDateTime from = start != null ? start : LocalDateTime.now();
+            LocalDateTime to = end != null ? end : from.plusMonths(1);
+
+            // Get all available coaching sessions
+            List<ClassSession> allSessions = sessionRepository.findScheduleByCoachIdAndPeriodWithVenue(null, from, to);
+            List<ClassSession> availableSessions = allSessions.stream()
+                    .filter(session -> "AVAILABLE".equals(session.getStatus()))
+                    .collect(Collectors.toList());
+
+            return ResponseEntity.ok(availableSessions);
+        } catch (Exception e) {
+            return ResponseEntity.internalServerError().body("Error retrieving public sessions: " + e.getMessage());
+        }
+    }
+
+    // Debug endpoint to check coach status
+    @GetMapping("/debug/status")
+    @PreAuthorize("hasAuthority('ROLE_COACH')")
+    public ResponseEntity<?> getCoachDebugStatus() {
+        try {
+            String username = SecurityContextHolder.getContext().getAuthentication().getName();
+            User coachUser = userRepository.findByUserAccount_Username(username)
+                    .orElseThrow(() -> new ResourceNotFoundException("User not found"));
+            
+            Coach coach = coachRepository.findById(coachUser.getId()).orElse(null);
+            
+            Map<String, Object> status = new HashMap<>();
+            status.put("username", username);
+            status.put("userId", coachUser.getId());
+            status.put("userType", coachUser.getUserType());
+            status.put("hasCoachEntity", coach != null);
+            status.put("coachId", coach != null ? coach.getId() : null);
+            status.put("venues", coach != null ? coach.getVenues() : null);
+            
+            // 如果沒有 Coach 實體，創建一個
+            if (coach == null && "COACH".equalsIgnoreCase(coachUser.getUserType())) {
+                Coach newCoach = new Coach();
+                newCoach.setUser(coachUser);
+                newCoach.setExperienceYear(1); // 默認經驗年數
+                coachRepository.save(newCoach);
+                status.put("coachCreated", true);
+                status.put("newCoachId", newCoach.getId());
+            }
+            
+            return ResponseEntity.ok(status);
+        } catch (Exception e) {
+            return ResponseEntity.internalServerError().body("Error checking coach status: " + e.getMessage());
+        }
+    }
+
+    // 獲取所有場地（用於下拉選單）
+    @GetMapping("/all-venues")
+    @PreAuthorize("hasAuthority('ROLE_COACH')")
+    public ResponseEntity<?> getAllVenues() {
+        try {
+            List<Venue> venues = venueRepository.findAllVenues();
+            
+            // 如果沒有場地，創建一些測試場地
+            if (venues.isEmpty()) {
+                Venue venue1 = new Venue();
+                venue1.setName("Pickleball Center");
+                venue1.setLocation("123 Main Street, New York, NY 10001");
+                venue1.setState("NY");
+                venue1.setDescription("Professional pickleball facility with multiple courts");
+                venueRepository.save(venue1);
+                
+                Venue venue2 = new Venue();
+                venue2.setName("Sports Complex");
+                venue2.setLocation("456 Oak Avenue, Los Angeles, CA 90210");
+                venue2.setState("CA");
+                venue2.setDescription("Multi-sport complex with dedicated pickleball courts");
+                venueRepository.save(venue2);
+                
+                venues = venueRepository.findAllVenues();
+            }
+            
+            return ResponseEntity.ok(venues);
+        } catch (Exception e) {
+            return ResponseEntity.internalServerError().body("Error retrieving venues: " + e.getMessage());
+        }
+    }
+
+    // 根據場地ID獲取球場
+    @GetMapping("/courts-by-venue/{venueId}")
+    @PreAuthorize("hasAuthority('ROLE_COACH')")
+    public ResponseEntity<?> getCourtsByVenue(@PathVariable Integer venueId) {
+        try {
+            List<Court> courts = courtRepository.findByVenueId(venueId);
+            return ResponseEntity.ok(courts);
+        } catch (Exception e) {
+            return ResponseEntity.internalServerError().body("Error retrieving courts: " + e.getMessage());
+        }
+    }
+
+    // 獲取所有可用的球場
+    @GetMapping("/all-courts")
+    @PreAuthorize("hasAuthority('ROLE_COACH')")
+    public ResponseEntity<?> getAllCourts() {
+        try {
+            List<Court> courts = courtRepository.findAvailableCourts();
+            
+            // 如果沒有球場，創建一些測試球場
+            if (courts.isEmpty()) {
+                List<Venue> venues = venueRepository.findAllVenues();
+                if (!venues.isEmpty()) {
+                    Venue venue1 = venues.get(0);
+                    
+                    Court court1 = new Court();
+                    court1.setName("Court 1");
+                    court1.setLocation("Indoor");
+                    court1.setStatus("AVAILABLE");
+                    court1.setOpeningTime("08:00");
+                    court1.setClosingTime("22:00");
+                    court1.setOperatingDays("Monday,Tuesday,Wednesday,Thursday,Friday,Saturday,Sunday");
+                    court1.setPeakHourlyPrice(25.0);
+                    court1.setOffPeakHourlyPrice(20.0);
+                    court1.setDailyPrice(150.0);
+                    court1.setPeakStartTime("18:00");
+                    court1.setPeakEndTime("21:00");
+                    court1.setVenue(venue1);
+                    courtRepository.save(court1);
+                    
+                    Court court2 = new Court();
+                    court2.setName("Court 2");
+                    court2.setLocation("Outdoor");
+                    court2.setStatus("AVAILABLE");
+                    court2.setOpeningTime("06:00");
+                    court2.setClosingTime("22:00");
+                    court2.setOperatingDays("Monday,Tuesday,Wednesday,Thursday,Friday,Saturday,Sunday");
+                    court2.setPeakHourlyPrice(20.0);
+                    court2.setOffPeakHourlyPrice(15.0);
+                    court2.setDailyPrice(120.0);
+                    court2.setPeakStartTime("18:00");
+                    court2.setPeakEndTime("21:00");
+                    court2.setVenue(venue1);
+                    courtRepository.save(court2);
+                    
+                    if (venues.size() > 1) {
+                        Venue venue2 = venues.get(1);
+                        
+                        Court court3 = new Court();
+                        court3.setName("Premium Court");
+                        court3.setLocation("Indoor");
+                        court3.setStatus("AVAILABLE");
+                        court3.setOpeningTime("07:00");
+                        court3.setClosingTime("23:00");
+                        court3.setOperatingDays("Monday,Tuesday,Wednesday,Thursday,Friday,Saturday,Sunday");
+                        court3.setPeakHourlyPrice(30.0);
+                        court3.setOffPeakHourlyPrice(25.0);
+                        court3.setDailyPrice(180.0);
+                        court3.setPeakStartTime("18:00");
+                        court3.setPeakEndTime("21:00");
+                        court3.setVenue(venue2);
+                        courtRepository.save(court3);
+                    }
+                    
+                    courts = courtRepository.findAvailableCourts();
+                }
+            }
+            
+            return ResponseEntity.ok(courts);
+        } catch (Exception e) {
+            return ResponseEntity.internalServerError().body("Error retrieving courts: " + e.getMessage());
+        }
+    }
+
+    // 獲取時段信息
+    @GetMapping("/time-slots")
+    @PreAuthorize("hasAuthority('ROLE_COACH')")
+    public ResponseEntity<?> getTimeSlots() {
+        try {
+            // 生成可用的時段（每小時一個時段，從早上8點到晚上10點）
+            List<Map<String, Object>> timeSlots = new ArrayList<>();
+            for (int hour = 8; hour <= 22; hour++) {
+                Map<String, Object> slot = new HashMap<>();
+                slot.put("startTime", String.format("%02d:00", hour));
+                slot.put("endTime", String.format("%02d:00", hour + 1));
+                slot.put("displayTime", String.format("%02d:00 - %02d:00", hour, hour + 1));
+                timeSlots.add(slot);
+            }
+            return ResponseEntity.ok(timeSlots);
+        } catch (Exception e) {
+            return ResponseEntity.internalServerError().body("Error generating time slots: " + e.getMessage());
+        }
+    }
+
+    @PostMapping("/recurring-sessions")
+    @PreAuthorize("hasAuthority('ROLE_COACH')")
+    public ResponseEntity<?> createRecurringClass(@RequestBody RecurringSessionRequestDto dto) {
+        try {
+            String username = SecurityContextHolder.getContext().getAuthentication().getName();
+            User coach = userRepository.findByUserAccount_Username(username)
+                    .orElseThrow(() -> new ResourceNotFoundException("Coach not found"));
+            coachCourtService.createRecurringClass(coach.getId(), dto);
+            return ResponseEntity.ok("Recurring class created");
+        } catch (Exception e) {
+            return ResponseEntity.internalServerError().body("Error: " + e.getMessage());
+        }
+    }
+
+    @GetMapping("/available-times")
+    @PreAuthorize("hasAuthority('ROLE_COACH')")
+    public ResponseEntity<?> getAvailableTimes(
+        @RequestParam Integer courtId,
+        @RequestParam String date // e.g. "2025-08-01"
+    ) {
+        LocalDate localDate = LocalDate.parse(date);
+        LocalDateTime startOfDay = localDate.atStartOfDay();
+        LocalDateTime endOfDay = localDate.atTime(23, 59, 59);
+        List<ClassSession> sessions = sessionRepository.findByCourtIdAndStartTimeBetween(
+            courtId, startOfDay, endOfDay
+        );
+        List<Map<String, String>> busySlots = sessions.stream().map(s -> Map.of(
+            "start", s.getStartTime().toString(),
+            "end", s.getEndTime().toString()
+        )).collect(Collectors.toList());
+        return ResponseEntity.ok(busySlots);
+    }
+
+    @GetMapping("/students")
+    @PreAuthorize("hasAuthority('ROLE_COACH')")
+    public ResponseEntity<?> getAllStudentsForCoach() {
+        String username = SecurityContextHolder.getContext().getAuthentication().getName();
+        User coach = userRepository.findByUserAccount_Username(username)
+                .orElseThrow(() -> new ResourceNotFoundException("Coach not found"));
+        List<Object[]> raw = coachCourtService.getAllStudentsForCoach(coach.getId());
+        List<Map<String, Object>> students = raw.stream().map(arr -> {
+            Map<String, Object> map = new HashMap<>();
+            map.put("id", arr[0]);
+            map.put("name", arr[1]);
+            map.put("email", arr[2]);
+            map.put("sessionCount", arr[3]);
+            return map;
+        }).toList();
+        return ResponseEntity.ok(students);
+    }
+
+    @GetMapping("/class-sessions/{sessionId}/students")
+    @PreAuthorize("hasAuthority('ROLE_COACH')")
+    public ResponseEntity<?> getStudentsForSession(@PathVariable Integer sessionId) {
+        List<ClassRegistration> regs = sessionRepository.findById(sessionId)
+            .orElseThrow(() -> new ResourceNotFoundException("Session not found")).getRegistrations();
+        List<Map<String, Object>> students = regs.stream().map(r -> {
+            Map<String, Object> map = new HashMap<>();
+            map.put("id", r.getMember().getId());
+            map.put("name", r.getMember().getUser().getName());
+            map.put("email", r.getMember().getUser().getEmail());
+            map.put("attendanceStatus", r.getAttendanceStatus());
+            map.put("registrationId", r.getId());
+            return map;
+        }).toList();
+        return ResponseEntity.ok(students);
+    }
+
+    @PutMapping("/class-registrations/{registrationId}/attendance")
+    @PreAuthorize("hasAuthority('ROLE_COACH')")
+    public ResponseEntity<?> updateAttendance(
+        @PathVariable Integer registrationId,
+        @RequestBody Map<String, String> body
+    ) {
+        String status = body.get("attendanceStatus");
+        ClassRegistration reg = registrationRepository.findById(registrationId)
+            .orElseThrow(() -> new ResourceNotFoundException("Registration not found"));
+        reg.setAttendanceStatus(status);
+        registrationRepository.save(reg);
+        return ResponseEntity.ok("Attendance updated");
+    }
+
+    // 新增：保存出席記錄和反饋
+    @PostMapping("/session/{sessionId}/attendance")
+    @PreAuthorize("hasAuthority('ROLE_COACH')")
+    public ResponseEntity<?> saveAttendanceAndFeedback(
+            @PathVariable Integer sessionId,
+            @RequestBody Map<String, Object> requestBody) {
+        try {
+            String username = SecurityContextHolder.getContext().getAuthentication().getName();
+            User coach = userRepository.findByUserAccount_Username(username)
+                    .orElseThrow(() -> new ResourceNotFoundException("Coach not found"));
+
+            // 驗證課程是否存在且屬於該教練
+            ClassSession session = sessionRepository.findById(sessionId)
+                    .orElseThrow(() -> new ResourceNotFoundException("Session not found"));
+            
+            if (!session.getCoach().getId().equals(coach.getId())) {
+                return ResponseEntity.status(HttpStatus.FORBIDDEN).body("You can only record attendance for your own sessions");
+            }
+
+            @SuppressWarnings("unchecked")
+            Map<String, Boolean> attendance = (Map<String, Boolean>) requestBody.get("attendance");
+            @SuppressWarnings("unchecked")
+            Map<String, String> feedbacks = (Map<String, String>) requestBody.get("feedbacks");
+
+            // 保存出席記錄和反饋
+            List<ClassRegistration> updatedRegistrations = new ArrayList<>();
+            
+            for (Map.Entry<String, Boolean> entry : attendance.entrySet()) {
+                String memberId = entry.getKey();
+                Boolean isPresent = entry.getValue();
+                String feedback = feedbacks.getOrDefault(memberId, "");
+                
+                // 查找對應的註冊記錄
+                List<ClassRegistration> registrations = registrationRepository.findByClassSessionId(sessionId);
+                ClassRegistration registration = registrations.stream()
+                        .filter(r -> r.getMember().getId().toString().equals(memberId))
+                        .findFirst()
+                        .orElse(null);
+                
+                if (registration != null) {
+                    // 更新出席狀態
+                    registration.setAttendanceStatus(isPresent ? "PRESENT" : "ABSENT");
+                    registration.setCoachComment(feedback); // 使用 coachComment 字段保存反饋
+                    
+                    updatedRegistrations.add(registrationRepository.save(registration));
+                }
+            }
+
+            // 更新課程狀態為已完成（如果所有學生都已記錄出席）
+            if (!updatedRegistrations.isEmpty()) {
+                session.setStatus("COMPLETED");
+                sessionRepository.save(session);
+            }
+
+            Map<String, Object> response = new HashMap<>();
+            response.put("message", "Attendance and feedback saved successfully");
+            response.put("updatedRegistrations", updatedRegistrations.size());
+            response.put("sessionId", sessionId);
+
+            return ResponseEntity.ok(response);
+        } catch (ResourceNotFoundException e) {
+            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(e.getMessage());
+        } catch (Exception e) {
+            return ResponseEntity.internalServerError().body("Error saving attendance: " + e.getMessage());
+        }
+    }
+
+    // 新增：獲取學生的出席記錄和反饋
+    @GetMapping("/student/{memberId}/attendance-history")
+    @PreAuthorize("hasAuthority('ROLE_COACH')")
+    public ResponseEntity<?> getStudentAttendanceHistory(@PathVariable Integer memberId) {
+        try {
+            String username = SecurityContextHolder.getContext().getAuthentication().getName();
+            User coach = userRepository.findByUserAccount_Username(username)
+                    .orElseThrow(() -> new ResourceNotFoundException("Coach not found"));
+
+            // 獲取該學生的所有註冊記錄（只限於該教練的課程）
+            List<ClassRegistration> registrations = registrationRepository.findByMemberUserId(memberId);
+            
+            // 過濾出該教練的課程
+            List<Map<String, Object>> attendanceHistory = registrations.stream()
+                    .filter(r -> r.getClassSession().getCoach().getId().equals(coach.getId()))
+                    .map(r -> {
+                        Map<String, Object> record = new HashMap<>();
+                        record.put("sessionId", r.getClassSession().getId());
+                        record.put("sessionTitle", r.getClassSession().getTitle());
+                        record.put("sessionDate", r.getClassSession().getStartTime());
+                        record.put("attendanceStatus", r.getAttendanceStatus());
+                        record.put("coachComment", r.getCoachComment());
+                        record.put("rating", r.getRating());
+                        record.put("registrationDate", r.getRegistrationDate());
+                        return record;
+                    })
+                    .collect(Collectors.toList());
+
+            Map<String, Object> response = new HashMap<>();
+            response.put("memberId", memberId);
+            response.put("attendanceHistory", attendanceHistory);
+            response.put("totalSessions", attendanceHistory.size());
+            response.put("presentCount", attendanceHistory.stream()
+                    .filter(r -> "PRESENT".equals(r.get("attendanceStatus")))
+                    .count());
+            response.put("absentCount", attendanceHistory.stream()
+                    .filter(r -> "ABSENT".equals(r.get("attendanceStatus")))
+                    .count());
+
+            return ResponseEntity.ok(response);
+        } catch (ResourceNotFoundException e) {
+            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(e.getMessage());
+        } catch (Exception e) {
+            return ResponseEntity.internalServerError().body("Error retrieving attendance history: " + e.getMessage());
+        }
+    }
+
+    // 新增：獲取特定session的已保存考勤數據
+    @GetMapping("/session/{sessionId}/attendance")
+    @PreAuthorize("hasAuthority('ROLE_COACH')")
+    public ResponseEntity<?> getSessionAttendance(@PathVariable Integer sessionId) {
+        try {
+            String username = SecurityContextHolder.getContext().getAuthentication().getName();
+            User coach = userRepository.findByUserAccount_Username(username)
+                    .orElseThrow(() -> new ResourceNotFoundException("Coach not found"));
+
+            // 驗證課程是否存在且屬於該教練
+            ClassSession session = sessionRepository.findById(sessionId)
+                    .orElseThrow(() -> new ResourceNotFoundException("Session not found"));
+            
+            if (!session.getCoach().getId().equals(coach.getId())) {
+                return ResponseEntity.status(HttpStatus.FORBIDDEN).body("You can only view attendance for your own sessions");
+            }
+
+            // 獲取該session的所有註冊記錄
+            List<ClassRegistration> registrations = registrationRepository.findByClassSessionId(sessionId);
+            
+            Map<String, Boolean> attendance = new HashMap<>();
+            Map<String, String> feedbacks = new HashMap<>();
+            
+            for (ClassRegistration registration : registrations) {
+                String memberId = registration.getMember().getId().toString();
+                
+                // 設置出席狀態
+                if ("PRESENT".equals(registration.getAttendanceStatus())) {
+                    attendance.put(memberId, true);
+                } else if ("ABSENT".equals(registration.getAttendanceStatus())) {
+                    attendance.put(memberId, false);
+                }
+                
+                // 設置反饋
+                if (registration.getCoachComment() != null && !registration.getCoachComment().trim().isEmpty()) {
+                    feedbacks.put(memberId, registration.getCoachComment());
+                }
+            }
+
+            Map<String, Object> response = new HashMap<>();
+            response.put("sessionId", sessionId);
+            response.put("attendance", attendance);
+            response.put("feedbacks", feedbacks);
+            response.put("hasAttendanceData", !attendance.isEmpty());
+
+            return ResponseEntity.ok(response);
+        } catch (ResourceNotFoundException e) {
+            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(e.getMessage());
+        } catch (Exception e) {
+            return ResponseEntity.internalServerError().body("Error retrieving session attendance: " + e.getMessage());
+        }
+    }
+
+    // 新增：獲取教練收入歷史
+    @GetMapping("/income-history")
+    @PreAuthorize("hasAuthority('ROLE_COACH')")
+    public ResponseEntity<?> getCoachIncomeHistory(
+            @RequestParam(required = false) String startDate,
+            @RequestParam(required = false) String endDate) {
+        try {
+            String username = SecurityContextHolder.getContext().getAuthentication().getName();
+            User coach = userRepository.findByUserAccount_Username(username)
+                    .orElseThrow(() -> new ResourceNotFoundException("Coach not found"));
+
+            // 獲取教練的收入記錄
+            List<Payment> coachIncomePayments = paymentRepository.findByPaymentTypeAndStatus("COACH_INCOME", "COMPLETED")
+                    .stream()
+                    .filter(payment -> {
+                        // 檢查是否屬於當前教練（通過 session 關聯）
+                        if (payment.getTransactionId() != null && payment.getTransactionId().startsWith("SETTLEMENT_")) {
+                            String sessionIdStr = payment.getTransactionId().replace("SETTLEMENT_", "");
+                            try {
+                                Integer sessionId = Integer.parseInt(sessionIdStr);
+                                ClassSession session = sessionRepository.findById(sessionId).orElse(null);
+                                return session != null && session.getCoach().getId().equals(coach.getId());
+                            } catch (NumberFormatException e) {
+                                return false;
+                            }
+                        }
+                        return false;
+                    })
+                    .collect(Collectors.toList());
+
+            // 按日期過濾
+            if (startDate != null && endDate != null) {
+                LocalDateTime start = LocalDateTime.parse(startDate);
+                LocalDateTime end = LocalDateTime.parse(endDate);
+                coachIncomePayments = coachIncomePayments.stream()
+                        .filter(payment -> {
+                            LocalDateTime paymentDate = payment.getPaymentDate();
+                            return paymentDate != null && !paymentDate.isBefore(start) && !paymentDate.isAfter(end);
+                        })
+                        .collect(Collectors.toList());
+            }
+
+            // 構建收入歷史記錄
+            List<Map<String, Object>> incomeHistory = coachIncomePayments.stream()
+                    .map(payment -> {
+                        Map<String, Object> record = new HashMap<>();
+                        record.put("paymentId", payment.getId());
+                        record.put("amount", payment.getAmount());
+                        record.put("paymentDate", payment.getPaymentDate());
+                        record.put("transactionId", payment.getTransactionId());
+                        
+                        // 獲取相關課程信息
+                        if (payment.getTransactionId() != null && payment.getTransactionId().startsWith("SETTLEMENT_")) {
+                            String sessionIdStr = payment.getTransactionId().replace("SETTLEMENT_", "");
+                            try {
+                                Integer sessionId = Integer.parseInt(sessionIdStr);
+                                ClassSession session = sessionRepository.findById(sessionId).orElse(null);
+                                if (session != null) {
+                                    record.put("sessionId", session.getId());
+                                    record.put("sessionTitle", session.getTitle());
+                                    record.put("sessionDate", session.getStartTime());
+                                    record.put("studentCount", session.getCurrentParticipants());
+                                    record.put("totalSessionRevenue", session.getPrice() * session.getCurrentParticipants());
+                                }
+                            } catch (NumberFormatException e) {
+                                // 忽略無效的 session ID
+                            }
+                        }
+                        
+                        return record;
+                    })
+                    .sorted((a, b) -> {
+                        LocalDateTime dateA = (LocalDateTime) a.get("paymentDate");
+                        LocalDateTime dateB = (LocalDateTime) b.get("paymentDate");
+                        return dateB.compareTo(dateA); // 降序排列
+                    })
+                    .collect(Collectors.toList());
+
+            // 計算統計信息
+            double totalIncome = incomeHistory.stream()
+                    .mapToDouble(record -> (Double) record.get("amount"))
+                    .sum();
+            
+            double monthlyIncome = incomeHistory.stream()
+                    .filter(record -> {
+                        LocalDateTime paymentDate = (LocalDateTime) record.get("paymentDate");
+                        LocalDateTime oneMonthAgo = LocalDateTime.now().minusMonths(1);
+                        return paymentDate != null && paymentDate.isAfter(oneMonthAgo);
+                    })
+                    .mapToDouble(record -> (Double) record.get("amount"))
+                    .sum();
+
+            Map<String, Object> response = new HashMap<>();
+            response.put("coachId", coach.getId());
+            response.put("coachName", coach.getName());
+            response.put("totalIncome", totalIncome);
+            response.put("monthlyIncome", monthlyIncome);
+            response.put("incomeHistory", incomeHistory);
+            response.put("totalRecords", incomeHistory.size());
+
+            return ResponseEntity.ok(response);
+        } catch (ResourceNotFoundException e) {
+            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(e.getMessage());
+        } catch (Exception e) {
+            return ResponseEntity.internalServerError().body("Error retrieving income history: " + e.getMessage());
+        }
+    }
+
+    // 新增：獲取教練錢包餘額
+    @GetMapping("/wallet-balance")
+    @PreAuthorize("hasAuthority('ROLE_COACH')")
+    public ResponseEntity<?> getCoachWalletBalance() {
+        try {
+            String username = SecurityContextHolder.getContext().getAuthentication().getName();
+            User coach = userRepository.findByUserAccount_Username(username)
+                    .orElseThrow(() -> new ResourceNotFoundException("Coach not found"));
+
+            // 獲取教練的錢包
+            Wallet coachWallet = walletRepository.findByMemberId(coach.getId())
+                    .orElseThrow(() -> new ResourceNotFoundException("Coach wallet not found"));
+
+            // 獲取最近的交易記錄
+            Pageable pageable = PageRequest.of(0, 10);
+            Page<WalletTransaction> transactionsPage = walletTransactionRepository.findByWalletIdOrderByCreatedAtDesc(coachWallet.getId(), pageable);
+            List<WalletTransaction> recentTransactions = transactionsPage.getContent();
+
+            Map<String, Object> response = new HashMap<>();
+            response.put("coachId", coach.getId());
+            response.put("coachName", coach.getName());
+            response.put("balance", coachWallet.getBalance());
+            response.put("walletStatus", coachWallet.getStatus());
+            response.put("recentTransactions", recentTransactions.stream()
+                    .map(transaction -> {
+                        Map<String, Object> tx = new HashMap<>();
+                        tx.put("id", transaction.getId());
+                        tx.put("type", transaction.getTransactionType());
+                        tx.put("amount", transaction.getAmount());
+                        tx.put("balanceBefore", transaction.getBalanceBefore());
+                        tx.put("balanceAfter", transaction.getBalanceAfter());
+                        tx.put("description", transaction.getDescription());
+                        tx.put("createdAt", transaction.getCreatedAt());
+                        return tx;
+                    })
+                    .collect(Collectors.toList()));
+
+            return ResponseEntity.ok(response);
+        } catch (ResourceNotFoundException e) {
+            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(e.getMessage());
+        } catch (Exception e) {
+            return ResponseEntity.internalServerError().body("Error retrieving wallet balance: " + e.getMessage());
+        }
+    }
+}
\ No newline at end of file
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/BookingSlotRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.repository;\r\n\r\nimport com.pickleball_backend.pickleball.entity.BookingSlot;\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\n\r\npublic interface BookingSlotRepository extends JpaRepository<BookingSlot, Integer> {\r\n    boolean existsBySlotIdAndStatus(Integer slotId, String status);\r\n\r\n    // Check for existing booking-slot combination to prevent duplicates\r\n    boolean existsByBookingIdAndSlotId(Integer bookingId, Integer slotId);\r\n\r\n    // 查询某个球场下所有状态为 BOOKED 的 BookingSlot\r\n    @org.springframework.data.jpa.repository.Query(\"SELECT bs FROM BookingSlot bs WHERE bs.slot.courtId = :courtId AND bs.status = 'BOOKED'\")\r\n    java.util.List<BookingSlot> findActiveByCourtId(@org.springframework.data.repository.query.Param(\"courtId\") Integer courtId);\r\n    \r\n    // 查询某个booking的所有slots\r\n    @org.springframework.data.jpa.repository.Query(\"SELECT bs FROM BookingSlot bs WHERE bs.booking.id = :bookingId\")\r\n    java.util.List<BookingSlot> findByBookingId(@org.springframework.data.repository.query.Param(\"bookingId\") Integer bookingId);\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/BookingSlotRepository.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/BookingSlotRepository.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/BookingSlotRepository.java	(revision 97abd609899a67b781b8ace8e91358a782fc5acd)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/BookingSlotRepository.java	(date 1753722675107)
@@ -16,4 +16,10 @@
     // 查询某个booking的所有slots
     @org.springframework.data.jpa.repository.Query("SELECT bs FROM BookingSlot bs WHERE bs.booking.id = :bookingId")
     java.util.List<BookingSlot> findByBookingId(@org.springframework.data.repository.query.Param("bookingId") Integer bookingId);
+
+    // 查詢三個月內某場館所有已被book的日期
+    @org.springframework.data.jpa.repository.Query("SELECT DISTINCT s.date FROM BookingSlot bs JOIN Slot s ON bs.slot.id = s.id JOIN Court c ON s.courtId = c.id WHERE c.venue.id = :venueId AND bs.status = 'BOOKED' AND s.date BETWEEN :start AND :end")
+    java.util.List<java.time.LocalDate> findBookedDatesByVenueIdAndDateRange(@org.springframework.data.repository.query.Param("venueId") Integer venueId,
+                                                                             @org.springframework.data.repository.query.Param("start") java.time.LocalDate start,
+                                                                             @org.springframework.data.repository.query.Param("end") java.time.LocalDate end);
 }
\ No newline at end of file
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/JoinRequestRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.repository;\r\n\r\nimport com.pickleball_backend.pickleball.entity.JoinRequest;\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\nimport java.util.List;\r\nimport java.util.Optional;\r\n\r\npublic interface JoinRequestRepository extends JpaRepository<JoinRequest, Integer> {\r\n    List<JoinRequest> findByFriendlyMatchIdAndStatus(Integer matchId, JoinRequest.Status status);\r\n    List<JoinRequest> findByMemberIdAndStatus(Integer memberId, JoinRequest.Status status);\r\n    Optional<JoinRequest> findByMemberIdAndFriendlyMatchId(Integer memberId, Integer matchId);\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/JoinRequestRepository.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/JoinRequestRepository.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/JoinRequestRepository.java	(revision 97abd609899a67b781b8ace8e91358a782fc5acd)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/JoinRequestRepository.java	(date 1753722675115)
@@ -6,7 +6,4 @@
 import java.util.Optional;
 
 public interface JoinRequestRepository extends JpaRepository<JoinRequest, Integer> {
-    List<JoinRequest> findByFriendlyMatchIdAndStatus(Integer matchId, JoinRequest.Status status);
-    List<JoinRequest> findByMemberIdAndStatus(Integer memberId, JoinRequest.Status status);
-    Optional<JoinRequest> findByMemberIdAndFriendlyMatchId(Integer memberId, Integer matchId);
 }
\ No newline at end of file
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/ClassRegistrationDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/ClassRegistrationDto.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/ClassRegistrationDto.java
new file mode 100644
--- /dev/null	(date 1753745048119)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/ClassRegistrationDto.java	(date 1753745048119)
@@ -0,0 +1,21 @@
+package com.pickleball_backend.pickleball.dto;
+
+import lombok.AllArgsConstructor;
+import lombok.Getter;
+import lombok.Setter;
+import java.time.LocalDateTime;
+
+@Getter
+@Setter
+@AllArgsConstructor
+public class ClassRegistrationDto {
+    private Integer registrationId;
+    private Integer memberId;
+    private Integer userId;
+    private String memberName;
+    private String email;
+    private LocalDateTime registrationDate;
+    private String username;
+    private String phone;
+    private String attendanceStatus; // 新增：出席状态
+}
\ No newline at end of file
Index: pickleball-frontend/src/service/MessageService.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/service/MessageService.js\r\nimport api from './api';\r\n\r\nconst MessageService = {\r\n  /**\r\n   * 获取与特定用户的对话历史\r\n   * @param {string} username - 对方的用户名\r\n   * @returns {Promise<Array>} - 消息列表\r\n   */\r\n  getConversation: async (username) => {\r\n    try {\r\n      const response = await api.get(`/messages/conversation/${username}`);\r\n      \r\n      // 确保消息数据有 senderUsername 和 senderProfileImage\r\n      return response.data.map(msg => {\r\n        // 如果后端返回的是嵌套对象，提取必要字段\r\n        const senderUsername = msg.senderUsername || \r\n                              (msg.sender?.userAccount?.username || '') || \r\n                              (msg.sender?.username || '');\r\n        \r\n        const senderProfileImage = msg.senderProfileImage || \r\n                                 (msg.sender?.profileImage || '') || \r\n                                 (msg.sender?.userAccount?.profileImage || '');\r\n        \r\n        return {\r\n          id: msg.id,\r\n          content: msg.content,\r\n          timestamp: msg.timestamp,\r\n          delivered: msg.delivered || false,\r\n          read: msg.read || false,\r\n          senderUsername,\r\n          senderProfileImage,\r\n          recipientUsername: msg.recipientUsername || msg.receiverUsername,\r\n          conversationId: msg.conversationId,\r\n          // Add new fields here if needed!\r\n          // type: msg.type,\r\n          // attachmentUrl: msg.attachmentUrl,\r\n          imageUrl: msg.imageUrl // <-- ADD THIS LINE\r\n        };\r\n      });\r\n    } catch (error) {\r\n      console.error('Failed to fetch conversation', error);\r\n      throw new Error('Failed to load conversation history');\r\n    }\r\n  },\r\n  \r\n  /**\r\n   * 发送消息\r\n   * @param {string} recipient - 接收者用户名\r\n   * @param {string} content - 消息内容\r\n   * @returns {Promise<Object>} - 发送的消息\r\n   */\r\n  sendMessage: async (recipient, content, imageUrl) => {\r\n    try {\r\n      const response = await api.post('/messages/send', null, {\r\n        params: { \r\n          recipient, \r\n          content,\r\n          imageUrl // <-- add this line\r\n        }\r\n      });\r\n      \r\n      // 确保返回的消息有必要的字段\r\n      const sentMessage = response.data;\r\n      return {\r\n        id: sentMessage.id,\r\n        content: sentMessage.content,\r\n        timestamp: sentMessage.timestamp || new Date().toISOString(),\r\n        delivered: sentMessage.delivered || false,\r\n        read: sentMessage.read || false,\r\n        senderUsername: sentMessage.senderUsername,\r\n        recipientUsername: sentMessage.recipientUsername,\r\n        conversationId: sentMessage.conversationId,\r\n        imageUrl: sentMessage.imageUrl // <-- add this line\r\n      };\r\n    } catch (error) {\r\n      console.error('Failed to send message', error);\r\n      \r\n      // 提供更友好的错误信息\r\n      let errorMessage = 'Failed to send message';\r\n      if (error.response) {\r\n        if (error.response.status === 403) {\r\n          errorMessage = 'You can only message friends';\r\n        } else if (error.response.status === 404) {\r\n          errorMessage = 'User not found';\r\n        } else {\r\n          errorMessage = error.response.data?.message || errorMessage;\r\n        }\r\n      }\r\n      \r\n      throw new Error(errorMessage);\r\n    }\r\n  },\r\n  \r\n  /**\r\n   * 获取对话预览列表\r\n   * @returns {Promise<Array>} - 对话预览列表\r\n   */\r\n  getConversationPreviews: async () => {\r\n    try {\r\n      const response = await api.get('/messages/previews');\r\n      return response.data.map(preview => ({\r\n        id: preview.id,\r\n        lastMessage: {\r\n          content: preview.content,\r\n          timestamp: preview.timestamp\r\n        },\r\n        otherUser: {\r\n          id: preview.otherUserId,\r\n          username: preview.otherUsername,\r\n          name: preview.otherUserName,\r\n          profileImage: preview.otherUserProfileImage\r\n        },\r\n        unreadCount: preview.unreadCount || 0\r\n      }));\r\n    } catch (error) {\r\n      console.error('Failed to fetch conversation previews', error);\r\n      throw new Error('Failed to load conversations');\r\n    }\r\n  },\r\n  \r\n  /**\r\n   * 标记消息为已送达\r\n   * @param {Array<number>} messageIds - 消息ID数组\r\n   */\r\n  markAsDelivered: async (messageIds) => {\r\n    try {\r\n      await api.post('/messages/mark-delivered', messageIds);\r\n    } catch (error) {\r\n      console.error('Failed to mark messages as delivered', error);\r\n      // 可以选择不抛出错误，因为这不是关键操作\r\n    }\r\n  },\r\n  \r\n  /**\r\n   * 标记消息为已读\r\n   * @param {Array<number>} messageIds - 消息ID数组\r\n   */\r\n  markAsRead: async (messageIds) => {\r\n    try {\r\n      await api.post('/messages/mark-read', messageIds);\r\n    } catch (error) {\r\n      console.error('Failed to mark messages as read', error);\r\n      // 可以选择不抛出错误，因为这不是关键操作\r\n    }\r\n  },\r\n  \r\n  /**\r\n   * 获取用户的所有对话\r\n   * @returns {Promise<Array>} - 对话列表\r\n   */\r\n  getConversations: async () => {\r\n    try {\r\n      const response = await api.get('/messages/conversations');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Failed to fetch conversations', error);\r\n      throw new Error('Failed to load conversations');\r\n    }\r\n  },\r\n  \r\n  /**\r\n   * 获取用户消息通知\r\n   * @returns {Promise<Object>} - 消息通知\r\n   */\r\n  getMessageNotifications: async () => {\r\n    try {\r\n      const response = await api.get('/messages/notifications');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Failed to fetch message notifications', error);\r\n      return { unreadCount: 0, latestMessages: [] };\r\n    }\r\n  },\r\n\r\n  uploadImage: async (file) => {\r\n    try {\r\n        const formData = new FormData();\r\n        formData.append('file', file);\r\n        \r\n        const response = await api.post('/messages/upload', formData, {\r\n            headers: { \r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        });\r\n        return response.data;\r\n    } catch (error) {\r\n        throw new Error(error.response?.data || 'Failed to upload image');\r\n    }\r\n}\r\n};\r\n\r\nexport default MessageService;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball-frontend/src/service/MessageService.js b/pickleball-frontend/src/service/MessageService.js
--- a/pickleball-frontend/src/service/MessageService.js	(revision 97abd609899a67b781b8ace8e91358a782fc5acd)
+++ b/pickleball-frontend/src/service/MessageService.js	(date 1753765578910)
@@ -80,7 +80,7 @@
       let errorMessage = 'Failed to send message';
       if (error.response) {
         if (error.response.status === 403) {
-          errorMessage = 'You can only message friends';
+          errorMessage = 'You can only message friends or coaches';
         } else if (error.response.status === 404) {
           errorMessage = 'User not found';
         } else {
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/ClassRegistration.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/ClassRegistration.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/ClassRegistration.java
new file mode 100644
--- /dev/null	(date 1753722380846)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/ClassRegistration.java	(date 1753722380846)
@@ -0,0 +1,83 @@
+package com.pickleball_backend.pickleball.entity;
+
+import jakarta.persistence.*;
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+import java.time.LocalDateTime;
+import com.fasterxml.jackson.annotation.JsonIgnore;
+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
+
+
+@Entity
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+@Table(name = "class_registration")
+public class ClassRegistration {
+
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    private Integer id;
+
+    @ManyToOne
+    @JoinColumn(name = "session_id")
+    @JsonIgnore
+    private ClassSession classSession;
+
+    @ManyToOne
+    @JoinColumn(name = "member_id")
+    @JsonIgnoreProperties({"registrations", "vouchers", "wallet", "organizedMatches", "joinRequests"})
+    private Member member;
+
+    @Column(name = "registration_date")
+    private LocalDateTime registrationDate;
+
+    @Column(name = "attendance_status")
+    private String attendanceStatus; // "PRESENT", "ABSENT", "LATE", "MAKEUP"
+
+    @Column(name = "group_booking_id")
+    private String groupBookingId; // UUID字串
+
+    @OneToOne(cascade = CascadeType.ALL)
+    @JoinColumn(name = "payment_id")
+    private Payment payment;
+
+    @Column(name = "coach_comment", columnDefinition = "TEXT")
+    private String coachComment;
+
+    @Column(name = "rating")
+    private Integer rating; // 1-5 rating from coach
+
+    // Getters and Setters...
+    public Integer getId() {
+        return id;
+    }
+    public void setId(Integer id) {
+        this.id = id;
+    }
+    public ClassSession getClassSession() {
+        return classSession;
+    }
+    public void setClassSession(ClassSession classSession) {
+        this.classSession = classSession;
+    }
+    public Member getMember() {
+        return member;
+    }
+    public void setMember(Member member) {
+        this.member = member;
+    }
+    public LocalDateTime getRegistrationDate() {
+        return registrationDate;
+    }
+    public void setRegistrationDate(LocalDateTime registrationDate) {
+        this.registrationDate = registrationDate;
+    }
+    public Payment getPayment() {
+        return payment;
+    }
+    public void setPayment(Payment payment) {
+        this.payment = payment;
+    }
+}
\ No newline at end of file
Index: pickleball-frontend/src/context/AuthContext.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { createContext, useState, useContext, useEffect } from 'react';\r\nimport { jwtDecode } from 'jwt-decode';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [authToken, setAuthToken] = useState(() => {\r\n    return localStorage.getItem('authToken') || null;\r\n  });\r\n  \r\n  const [currentUser, setCurrentUser] = useState(null);\r\n\r\n  // Decode token and set current user on initial load and when token changes\r\n  useEffect(() => {\r\n    if (authToken) {\r\n      try {\r\n        // Decode JWT to get user information\r\n        const decodedToken = jwtDecode(authToken);\r\n        \r\n        // Extract user information from token\r\n        const role = decodedToken.role || '';\r\n        // Remove \"ROLE_\" prefix if present\r\n        const cleanRole = role.startsWith('ROLE_') ? role.substring(5) : role;\r\n        \r\n\r\n        \r\n        const user = {\r\n          id: decodedToken.sub,\r\n          username: decodedToken.username || decodedToken.name || decodedToken.sub,\r\n          email: decodedToken.email,\r\n          role: cleanRole,\r\n          token: authToken\r\n        };\r\n        \r\n        setCurrentUser(user);\r\n        localStorage.setItem('currentUser', JSON.stringify(user));\r\n      } catch (error) {\r\n        console.error('Failed to decode token:', error);\r\n        logout();\r\n      }\r\n    } else {\r\n      setCurrentUser(null);\r\n    }\r\n  }, [authToken]);\r\n\r\n  const login = (token) => {\r\n    localStorage.setItem('authToken', token);\r\n    setAuthToken(token);\r\n  };\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem('authToken');\r\n    setAuthToken(null);\r\n    setCurrentUser(null);\r\n    localStorage.removeItem('currentUser');\r\n  };\r\n\r\n  // Check if user is authenticated\r\n  const isAuthenticated = () => {\r\n    return authToken !== null;\r\n  };\r\n\r\n  // Check if user has a specific role\r\n  const hasRole = (role) => {\r\n    return currentUser?.role === role;\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ \r\n      authToken, \r\n      currentUser,\r\n      login, \r\n      logout,\r\n      isAuthenticated,\r\n      hasRole\r\n    }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (context === undefined) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball-frontend/src/context/AuthContext.js b/pickleball-frontend/src/context/AuthContext.js
--- a/pickleball-frontend/src/context/AuthContext.js	(revision 97abd609899a67b781b8ace8e91358a782fc5acd)
+++ b/pickleball-frontend/src/context/AuthContext.js	(date 1753722675129)
@@ -16,6 +16,7 @@
       try {
         // Decode JWT to get user information
         const decodedToken = jwtDecode(authToken);
+        console.log('Decoded JWT token:', decodedToken); // 調試日誌
         
         // Extract user information from token
         const role = decodedToken.role || '';
@@ -25,13 +26,15 @@
 
         
         const user = {
-          id: decodedToken.sub,
+          id: decodedToken.userId || decodedToken.sub, // 優先使用 userId，如果沒有則使用 sub
           username: decodedToken.username || decodedToken.name || decodedToken.sub,
           email: decodedToken.email,
           role: cleanRole,
+          userType: decodedToken.userType || cleanRole, // 新增這行
           token: authToken
         };
         
+        console.log('Created user object:', user); // 調試日誌
         setCurrentUser(user);
         localStorage.setItem('currentUser', JSON.stringify(user));
       } catch (error) {
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/BookingController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.controller;\r\n\r\nimport com.pickleball_backend.pickleball.dto.BookingRequestDto;\r\nimport com.pickleball_backend.pickleball.dto.BookingResponseDto;\r\nimport com.pickleball_backend.pickleball.dto.CancellationResponse;\r\nimport com.pickleball_backend.pickleball.entity.Member;\r\nimport com.pickleball_backend.pickleball.entity.UserAccount;\r\nimport com.pickleball_backend.pickleball.exception.ResourceNotFoundException;\r\nimport com.pickleball_backend.pickleball.repository.MemberRepository;\r\nimport com.pickleball_backend.pickleball.repository.UserAccountRepository;\r\nimport com.pickleball_backend.pickleball.service.BookingService;\r\nimport com.pickleball_backend.pickleball.service.MemberService;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.springframework.http.HttpStatus;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.security.access.prepost.PreAuthorize;\r\nimport org.springframework.security.core.context.SecurityContextHolder;\r\nimport org.springframework.web.ErrorResponse;\r\nimport org.springframework.web.bind.annotation.*;\r\nimport com.pickleball_backend.pickleball.dto.BookingHistoryDto;\r\n\r\nimport java.security.Principal;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\n@RestController\r\n@RequestMapping(\"/api/member\")\r\n@RequiredArgsConstructor\r\npublic class BookingController {\r\n\r\n    private final BookingService bookingService;\r\n    private final MemberService memberService;\r\n    private final MemberRepository memberRepository;\r\n    private final UserAccountRepository userAccountRepository;\r\n\r\n    @PostMapping(\"/bookings\")\r\n    @PreAuthorize(\"hasRole('USER')\")\r\n    public ResponseEntity<?> bookCourt(@RequestBody BookingRequestDto request) {\r\n        try {\r\n            BookingResponseDto response = bookingService.bookCourt(request);\r\n            return ResponseEntity.ok(response);\r\n        } catch (Exception e) {\r\n            Map<String, String> errorResponse = new HashMap<>();\r\n            errorResponse.put(\"errorCode\", \"BOOKING_FAILED\");\r\n            errorResponse.put(\"message\", e.getMessage());\r\n            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(errorResponse);\r\n        }\r\n    }\r\n\r\n    @GetMapping(\"/bookings\")\r\n    @PreAuthorize(\"hasRole('USER')\")\r\n    public ResponseEntity<List<BookingHistoryDto>> getBookingHistory(\r\n            @RequestParam(required = false) String status) {\r\n        // Get current user's member ID\r\n        String username = SecurityContextHolder.getContext().getAuthentication().getName();\r\n        Integer memberId = memberService.getMemberIdByUsername(username);\r\n\r\n        return ResponseEntity.ok(bookingService.getBookingHistory(memberId, status));\r\n    }\r\n\r\n/*    @GetMapping(\"/bookings/{id}\")\r\n    @PreAuthorize(\"hasRole('USER')\")\r\n    public ResponseEntity<BookingHistoryDto> getBookingDetails(@PathVariable Integer id) {\r\n        String username = SecurityContextHolder.getContext().getAuthentication().getName();\r\n        Integer memberId = memberService.getMemberIdByUsername(username);\r\n\r\n        return ResponseEntity.ok(bookingService.getBookingDetails(id, memberId));\r\n    }*/\r\n\r\n    @PostMapping(\"/cleanup-duplicates\")\r\n    @PreAuthorize(\"hasRole('ADMIN')\")\r\n    public ResponseEntity<?> cleanupDuplicateBookingSlots() {\r\n        try {\r\n            bookingService.cleanupDuplicateBookingSlots();\r\n            return ResponseEntity.ok(\"Cleanup instructions logged. Please check server logs and run the suggested SQL manually.\");\r\n        } catch (Exception e) {\r\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\r\n                    .body(\"Error during cleanup: \" + e.getMessage());\r\n        }\r\n    }\r\n\r\n    @PostMapping(\"/cleanup-booking-slots\")\r\n    @PreAuthorize(\"hasRole('ADMIN')\")\r\n    public ResponseEntity<?> cleanupDuplicateBookingSlotsDirect() {\r\n        try {\r\n            // 这里可以添加直接的数据库清理逻辑\r\n            // 暂时返回 SQL 指令\r\n            String cleanupSql = \"\"\"\r\n                -- 删除重复的 BookingSlot 记录\r\n                DELETE bs1 FROM bookingslot bs1\r\n                INNER JOIN bookingslot bs2\r\n                WHERE bs1.id > bs2.id\r\n                AND bs1.booking_id = bs2.booking_id\r\n                AND bs1.slot_id = bs2.slot_id;\r\n                \r\n                -- 查看是否还有重复记录\r\n                SELECT booking_id, slot_id, COUNT(*) as count \r\n                FROM bookingslot \r\n                GROUP BY booking_id, slot_id \r\n                HAVING COUNT(*) > 1;\r\n                \"\"\";\r\n            \r\n            return ResponseEntity.ok(Map.of(\r\n                \"message\", \"Please run the following SQL to clean up duplicate booking slots:\",\r\n                \"sql\", cleanupSql\r\n            ));\r\n        } catch (Exception e) {\r\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\r\n                    .body(\"Error: \" + e.getMessage());\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/BookingController.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/BookingController.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/BookingController.java	(revision 97abd609899a67b781b8ace8e91358a782fc5acd)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/BookingController.java	(date 1753722380797)
@@ -18,8 +18,14 @@
 import org.springframework.web.ErrorResponse;
 import org.springframework.web.bind.annotation.*;
 import com.pickleball_backend.pickleball.dto.BookingHistoryDto;
+import com.pickleball_backend.pickleball.entity.Booking;
+import com.pickleball_backend.pickleball.repository.BookingRepository;
+import com.pickleball_backend.pickleball.dto.BookingSimpleDto;
+import com.pickleball_backend.pickleball.entity.Court;
+import com.pickleball_backend.pickleball.repository.CourtRepository;
 
 import java.security.Principal;
+import java.time.LocalDateTime;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
@@ -33,6 +39,8 @@
     private final MemberService memberService;
     private final MemberRepository memberRepository;
     private final UserAccountRepository userAccountRepository;
+    private final BookingRepository bookingRepository;
+    private final CourtRepository courtRepository;
 
     @PostMapping("/bookings")
     @PreAuthorize("hasRole('USER')")
@@ -68,6 +76,40 @@
         return ResponseEntity.ok(bookingService.getBookingDetails(id, memberId));
     }*/
 
+    @GetMapping("/my-upcoming")
+    @PreAuthorize("hasRole('USER')")
+    public ResponseEntity<?> getMyUpcomingBookings(Principal principal) {
+        String username = principal.getName();
+        Member member = memberRepository.findByUsername(username);
+        if (member == null) {
+            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("No member found for user: " + username);
+        }
+        java.time.LocalDate today = java.time.LocalDate.now();
+        java.time.LocalTime nowTime = java.time.LocalTime.now();
+        List<Booking> bookings = bookingRepository.findUpcomingBookingsByMember(member, today, nowTime);
+        // 直接複用 BookingHistoryDto，確保欄位一致
+        List<BookingHistoryDto> dtos = bookings.stream().map(b -> {
+            BookingHistoryDto dto = new BookingHistoryDto();
+            dto.setId(b.getId());
+            if (b.getBookingSlots() != null && !b.getBookingSlots().isEmpty() && b.getBookingSlots().get(0).getSlot() != null) {
+                var slot = b.getBookingSlots().get(0).getSlot();
+                dto.setCourtName(slot.getCourtId() != null ? (courtRepository.findById(slot.getCourtId()).map(c -> c.getName()).orElse("Court")) : "Court");
+                dto.setDate(slot.getDate());
+                dto.setStartTime(slot.getStartTime());
+                dto.setEndTime(slot.getEndTime());
+            }
+            dto.setStatus(b.getStatus());
+            dto.setCreatedAt(b.getBookingDate());
+            dto.setPurpose(b.getPurpose());
+            dto.setNumberOfPlayers(b.getNumberOfPlayers());
+            dto.setNumPaddles(b.getNumPaddles());
+            dto.setBuyBallSet(b.getBuyBallSet());
+            // 其他欄位可依需求補充
+            return dto;
+        }).toList();
+        return ResponseEntity.ok(dtos);
+    }
+
     @PostMapping("/cleanup-duplicates")
     @PreAuthorize("hasRole('ADMIN')")
     public ResponseEntity<?> cleanupDuplicateBookingSlots() {
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/SlotController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.controller;\r\n\r\nimport com.pickleball_backend.pickleball.dto.SlotResponseDto;\r\nimport com.pickleball_backend.pickleball.service.SlotService;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.springframework.format.annotation.DateTimeFormat;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.security.access.prepost.PreAuthorize;\r\nimport org.springframework.web.bind.annotation.*;\r\nimport java.time.LocalDate;\r\nimport java.util.List;\r\n\r\n@RestController\r\n@RequestMapping(\"/api/member/slots\")\r\n@RequiredArgsConstructor\r\npublic class SlotController {\r\n\r\n    private final SlotService slotService;\r\n\r\n    @GetMapping\r\n    @PreAuthorize(\"hasAuthority('ROLE_ADMIN')\")\r\n    public ResponseEntity<?> getSlots(\r\n            @RequestParam(name = \"courtids\", required = false) List<Integer> courtIds,\r\n            @RequestParam(name = \"startDate\", required = false)\r\n            @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate startDate,\r\n            @RequestParam(name = \"endDate\", required = false)\r\n            @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate endDate) {\r\n\r\n        // Validation - both dates required\r\n        if (startDate == null || endDate == null) {\r\n            return ResponseEntity.badRequest().body(\"Both startDate and endDate are required\");\r\n        }\r\n\r\n        // Validation - start date must be before end date\r\n        if (startDate.isAfter(endDate)) {\r\n            return ResponseEntity.badRequest().body(\"Start date must be before end date\");\r\n        }\r\n\r\n        // Service call - already implemented correctly\r\n        List<SlotResponseDto> slots = slotService.getSlots(courtIds, startDate, endDate);\r\n\r\n        return !slots.isEmpty()\r\n                ? ResponseEntity.ok(slots)\r\n                : ResponseEntity.ok(\"No slots found for selected date range/courts\");\r\n    }\r\n\r\n    @GetMapping(\"/available\")\r\n    @PreAuthorize(\"hasRole('USER')\")\r\n    public ResponseEntity<List<SlotResponseDto>> getAvailableSlots(\r\n            @RequestParam Integer courtId) {\r\n\r\n        List<SlotResponseDto> slots = slotService.getAvailableSlotsByCourt(courtId);\r\n        return ResponseEntity.ok(slots);\r\n    }\r\n\r\n    @GetMapping(\"/all\")\r\n    public ResponseEntity<List<SlotResponseDto>> getAllSlots(\r\n            @RequestParam Integer courtId,\r\n            @RequestParam(required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate startDate,\r\n            @RequestParam(required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate endDate\r\n    ) {\r\n        LocalDate start = startDate != null ? startDate : LocalDate.now();\r\n        LocalDate end = endDate != null ? endDate : start.plusMonths(3);\r\n        List<SlotResponseDto> slots = slotService.getAllSlotsByCourt(courtId, start, end);\r\n        return ResponseEntity.ok(slots);\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/SlotController.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/SlotController.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/SlotController.java	(revision 97abd609899a67b781b8ace8e91358a782fc5acd)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/SlotController.java	(date 1753722675138)
@@ -64,4 +64,5 @@
         List<SlotResponseDto> slots = slotService.getAllSlotsByCourt(courtId, start, end);
         return ResponseEntity.ok(slots);
     }
+
 }
\ No newline at end of file
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/MemberRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.repository;\r\n\r\nimport com.pickleball_backend.pickleball.entity.Member;\r\nimport com.pickleball_backend.pickleball.entity.User;\r\nimport com.pickleball_backend.pickleball.entity.MembershipTier;\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\nimport org.springframework.data.jpa.repository.Modifying;\r\nimport org.springframework.data.jpa.repository.Query;\r\nimport org.springframework.data.repository.query.Param;\r\nimport org.springframework.transaction.annotation.Transactional;\r\nimport java.util.List;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\n\r\npublic interface MemberRepository extends JpaRepository<Member, Integer> {\r\n\r\n    @Modifying\r\n    @Transactional\r\n    @Query(\"UPDATE Member m SET m.tier = :tier WHERE m.pointBalance BETWEEN :min AND :max\")\r\n    int updateMembersTier(\r\n            @Param(\"min\") int min,\r\n            @Param(\"max\") int max,\r\n            @Param(\"tier\") MembershipTier tier\r\n    );\r\n\r\n    @Modifying\r\n    @Transactional\r\n    @Query(\"UPDATE Member m SET m.tier = :newTier WHERE m.tier.id = :oldTierId\")\r\n    int reassignMembersFromTier(\r\n            @Param(\"oldTierId\") Integer oldTierId,\r\n            @Param(\"newTier\") MembershipTier newTier\r\n    );\r\n\r\n    Member findByUserId(Integer userId);\r\n\r\n    @Query(\"SELECT m.user FROM Member m WHERE m.tier.tierName IN :tierNames\")\r\n    List<User> findUsersByTierNames(@Param(\"tierNames\") List<String> tierNames);\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/MemberRepository.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/MemberRepository.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/MemberRepository.java	(revision 97abd609899a67b781b8ace8e91358a782fc5acd)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/MemberRepository.java	(date 1753722675146)
@@ -34,4 +34,7 @@
 
     @Query("SELECT m.user FROM Member m WHERE m.tier.tierName IN :tierNames")
     List<User> findUsersByTierNames(@Param("tierNames") List<String> tierNames);
+
+    @Query("SELECT m FROM Member m WHERE m.user.userAccount.username = :username")
+    Member findByUsername(@Param("username") String username);
 }
\ No newline at end of file
Index: pickleball-frontend/src/service/EventService.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import api from './api';\r\n\r\nclass EventService {\r\n  // Get all upcoming events\r\n  static async getUpcomingEvents() {\r\n    try {\r\n      const response = await api.get('/events/upcoming');\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Get event details by ID\r\n  static async getEventDetails(eventId) {\r\n    try {\r\n      const response = await api.get(`/events/${eventId}/details`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Create a new event\r\n  static async createEvent(eventData) {\r\n    try {\r\n      const response = await api.post('/events', eventData);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Update an existing event\r\n  static async updateEvent(eventId, eventData) {\r\n    try {\r\n      const response = await api.put(`/events/${eventId}`, eventData);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Update event with notification\r\n  static async updateEventWithNotification(eventId, eventData) {\r\n    try {\r\n      const response = await api.put(`/events/${eventId}/notify`, eventData);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Delete an event\r\n  static async deleteEvent(eventId) {\r\n    try {\r\n      const response = await api.delete(`/events/${eventId}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Publish an event\r\n  static async publishEvent(eventId) {\r\n    try {\r\n      const response = await api.post(`/events/${eventId}/publish`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Get events by type\r\n  static async getEventsByType(eventType) {\r\n    try {\r\n      const response = await api.get(`/events/type/${eventType}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Get events by skill level\r\n  static async getEventsBySkillLevel(skillLevel) {\r\n    try {\r\n      const response = await api.get(`/events/skill/${skillLevel}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Browse events with filters\r\n  static async browseEvents(filters) {\r\n    try {\r\n      const response = await api.get('/events/browse', { params: filters });\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Get available event types\r\n  static async getAvailableEventTypes() {\r\n    try {\r\n      const response = await api.get('/events/types');\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Get available skill levels\r\n  static async getAvailableSkillLevels() {\r\n    try {\r\n      const response = await api.get('/events/skill-levels');\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Get event statistics\r\n  static async getEventStats() {\r\n    try {\r\n      const response = await api.get('/events/stats');\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Check if user is registered for an event\r\n  static async isRegisteredForEvent(eventId) {\r\n    try {\r\n      const response = await api.get(`/event-registration/is-registered/${eventId}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Register for an event\r\n  static async registerForEvent(eventId) {\r\n    try {\r\n      const response = await api.post('/event-registration/register', { eventId });\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Cancel event registration\r\n  static async cancelEventRegistration(eventId) {\r\n    try {\r\n      const response = await api.delete(`/event-registration/cancel/${eventId}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\nexport default EventService; 
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball-frontend/src/service/EventService.js b/pickleball-frontend/src/service/EventService.js
--- a/pickleball-frontend/src/service/EventService.js	(revision 97abd609899a67b781b8ace8e91358a782fc5acd)
+++ b/pickleball-frontend/src/service/EventService.js	(date 1753722675154)
@@ -2,9 +2,9 @@
 
 class EventService {
   // Get all upcoming events
-  static async getUpcomingEvents() {
+  static async getUpcomingEvents(page = 0, size = 9) {
     try {
-      const response = await api.get('/events/upcoming');
+      const response = await api.get('/events/upcoming', { params: { page, size } });
       return response.data;
     } catch (error) {
       throw error;
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/SlotRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.repository;\r\n\r\nimport com.pickleball_backend.pickleball.entity.Slot;\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\nimport java.time.LocalDate;\r\nimport java.util.List;\r\n\r\npublic interface SlotRepository extends JpaRepository<Slot, Integer> {\r\n    List<Slot> findByCourtIdAndDateBetween(Integer courtId, LocalDate startDate, LocalDate endDate);\r\n    List<Slot> findByDateBetween(LocalDate startDate, LocalDate endDate);\r\n    List<Slot> findByCourtIdAndDateAndIsAvailableTrue(Integer courtId, LocalDate date);\r\n    List<Slot> findByDateAndIsAvailableTrue(LocalDate date);\r\n    List<Slot> findByCourtIdAndDateAndStatus(Integer courtId, LocalDate date, String status);\r\n    List<Slot> findByCourtIdAndStatus(Integer courtId, String status);\r\n    List<Slot> findByCourtIdAndDateBetweenAndStatus(Integer courtId, LocalDate startDate, LocalDate endDate, String status);\r\n    List<Slot> findByCourtIdAndDateBetweenAndIsAvailableTrue(\r\n            Integer courtId,\r\n            LocalDate startDate,\r\n            LocalDate endDate\r\n    );\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/SlotRepository.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/SlotRepository.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/SlotRepository.java	(revision 97abd609899a67b781b8ace8e91358a782fc5acd)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/SlotRepository.java	(date 1753722675161)
@@ -3,7 +3,9 @@
 import com.pickleball_backend.pickleball.entity.Slot;
 import org.springframework.data.jpa.repository.JpaRepository;
 import java.time.LocalDate;
+import java.time.LocalTime;
 import java.util.List;
+import java.util.Optional;
 
 public interface SlotRepository extends JpaRepository<Slot, Integer> {
     List<Slot> findByCourtIdAndDateBetween(Integer courtId, LocalDate startDate, LocalDate endDate);
@@ -18,4 +20,9 @@
             LocalDate startDate,
             LocalDate endDate
     );
+    
+    // 新增：檢查特定 slot 是否已存在
+    Optional<Slot> findByCourtIdAndDateAndStartTimeAndEndTime(
+            Integer courtId, LocalDate date, LocalTime startTime, LocalTime endTime);
+    
 }
\ No newline at end of file
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/PaymentRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.repository;\r\n\r\nimport com.pickleball_backend.pickleball.entity.Payment;\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\nimport org.springframework.data.jpa.repository.Query;\r\n\r\npublic interface PaymentRepository extends JpaRepository<Payment, Integer> {\r\n    @org.springframework.data.jpa.repository.Query(\"SELECT COALESCE(SUM(CASE WHEN p.status IN ('PAID', 'COMPLETED') THEN p.amount WHEN p.status = 'REFUNDED' THEN -p.amount ELSE 0 END), 0) FROM Payment p WHERE p.paymentType = 'BOOKING'\")\r\n    Double sumTotalRevenue();\r\n\r\n    @org.springframework.data.jpa.repository.Query(\"SELECT SUM(p.amount) FROM Payment p WHERE (p.status = 'PAID' OR p.status = 'REFUNDED') AND p.paymentDate BETWEEN :start AND :end\")\r\n    Double sumTotalRevenueByDate(java.time.LocalDateTime start, java.time.LocalDateTime end);\r\n\r\n    @org.springframework.data.jpa.repository.Query(\"SELECT COALESCE(SUM(CASE WHEN p.status IN ('PAID', 'COMPLETED') THEN p.amount WHEN p.status = 'REFUNDED' THEN -p.amount ELSE 0 END), 0) FROM Payment p WHERE p.paymentType = :paymentType AND p.paymentDate BETWEEN :start AND :end\")\r\n    Double sumRevenueByDateAndType(java.time.LocalDateTime start, java.time.LocalDateTime end, String paymentType);\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/PaymentRepository.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/PaymentRepository.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/PaymentRepository.java	(revision 97abd609899a67b781b8ace8e91358a782fc5acd)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/PaymentRepository.java	(date 1753722675170)
@@ -4,6 +4,9 @@
 import org.springframework.data.jpa.repository.JpaRepository;
 import org.springframework.data.jpa.repository.Query;
 
+import java.util.Optional;
+import java.util.List;
+
 public interface PaymentRepository extends JpaRepository<Payment, Integer> {
     @org.springframework.data.jpa.repository.Query("SELECT COALESCE(SUM(CASE WHEN p.status IN ('PAID', 'COMPLETED') THEN p.amount WHEN p.status = 'REFUNDED' THEN -p.amount ELSE 0 END), 0) FROM Payment p WHERE p.paymentType = 'BOOKING'")
     Double sumTotalRevenue();
@@ -13,4 +16,10 @@
 
     @org.springframework.data.jpa.repository.Query("SELECT COALESCE(SUM(CASE WHEN p.status IN ('PAID', 'COMPLETED') THEN p.amount WHEN p.status = 'REFUNDED' THEN -p.amount ELSE 0 END), 0) FROM Payment p WHERE p.paymentType = :paymentType AND p.paymentDate BETWEEN :start AND :end")
     Double sumRevenueByDateAndType(java.time.LocalDateTime start, java.time.LocalDateTime end, String paymentType);
+
+    @Query("SELECT p FROM Payment p WHERE LOWER(TRIM(p.groupBookingId)) = LOWER(TRIM(:groupBookingId))")
+    Optional<Payment> findByGroupBookingId(String groupBookingId);
+    
+    @Query("SELECT p FROM Payment p WHERE p.paymentType = :paymentType AND p.status = :status")
+    List<Payment> findByPaymentTypeAndStatus(String paymentType, String status);
 }
\ No newline at end of file
