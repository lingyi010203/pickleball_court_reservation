Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/CoachCourtServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.service;\r\n\r\nimport com.pickleball_backend.pickleball.dto.CoachSlotDto;\r\nimport com.pickleball_backend.pickleball.dto.RecurringSessionRequestDto;\r\nimport com.pickleball_backend.pickleball.entity.*;\r\nimport com.pickleball_backend.pickleball.exception.*;\r\nimport com.pickleball_backend.pickleball.repository.*;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.springframework.stereotype.Service;\r\nimport org.springframework.transaction.annotation.Transactional;\r\n\r\nimport java.time.LocalDateTime;\r\nimport java.util.List;\r\nimport java.util.Set;\r\nimport java.time.LocalDate;\r\n\r\n@Service\r\n@RequiredArgsConstructor\r\npublic class CoachCourtServiceImpl implements CoachCourtService {\r\n\r\n    private static final Logger log = LoggerFactory.getLogger(CoachCourtServiceImpl.class);\r\n\r\n    private final CourtRepository courtRepository;\r\n    private final CoachRepository coachRepository;\r\n    private final ClassSessionRepository sessionRepository;\r\n    private final UserRepository userRepository;\r\n    private final PaymentRepository paymentRepository;\r\n    private final WalletRepository walletRepository;\r\n    private final CancellationRequestRepository cancellationRequestRepository;\r\n    private final EmailService emailService;\r\n    private final ClassRegistrationRepository classRegistrationRepository;\r\n\r\n    @Override\r\n    public List<Court> getAvailableCourtsForCoach(Integer coachId) {\r\n        Coach coach = coachRepository.findById(coachId)\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"Coach not found with ID: \" + coachId));\r\n        Set<Venue> venues = coach.getVenues();\r\n        if (venues == null || venues.isEmpty()) return List.of();\r\n        return courtRepository.findByVenueIn(venues);\r\n    }\r\n    @Override\r\n    public List<ClassSession> findScheduleByCoachIdAndPeriod(Integer coachId, LocalDateTime from, LocalDateTime to) {\r\n        return sessionRepository.findScheduleByCoachIdAndPeriodWithVenue(coachId, from, to);\r\n    }\r\n\r\n    @Override\r\n    public List<ClassSession> findScheduleByCoachIdAndPeriodWithVenue(Integer coachId, LocalDateTime from, LocalDateTime to) {\r\n        return sessionRepository.findScheduleByCoachIdAndPeriodWithVenue(coachId, from, to);\r\n    }\r\n\r\n    @Transactional\r\n    @Override\r\n    public ClassSession createCoachSlot(Integer coachId, CoachSlotDto slotDto) {\r\n        User coach = userRepository.findById(coachId)\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"Coach not found with ID: \" + coachId));\r\n\r\n        Court court = courtRepository.findById(slotDto.getCourtId())\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"Court not found with ID: \" + slotDto.getCourtId()));\r\n\r\n        if (sessionRepository.existsByCoachIdAndStartTimeBetweenAndStatusNot(\r\n                coachId, slotDto.getStartTime(), slotDto.getEndTime(), \"CANCELLED\")) {\r\n            throw new ConflictException(\"Coach has scheduling conflict at this time\");\r\n        }\r\n\r\n        if (sessionRepository.existsByCourtIdAndStartTimeBetweenAndStatusNot(\r\n                slotDto.getCourtId(), slotDto.getStartTime(), slotDto.getEndTime(), \"CANCELLED\")) {\r\n            throw new ConflictException(\"Court is already booked at this time\");\r\n        }\r\n\r\n        // 防呆：title 不可為 null\r\n        String title = (slotDto.getTitle() == null || slotDto.getTitle().trim().isEmpty()) ? \"Coaching Session\" : slotDto.getTitle();\r\n\r\n        ClassSession session = new ClassSession();\r\n        session.setCoach(coach);\r\n        session.setCourt(court);\r\n        session.setStartTime(slotDto.getStartTime());\r\n        session.setEndTime(slotDto.getEndTime());\r\n        session.setStatus(\"AVAILABLE\");\r\n        session.setSlotType(\"COACH_AVAILABILITY\");\r\n        session.setCreatedAt(LocalDateTime.now());\r\n        session.setExperienceYear(slotDto.getExperienceYear());\r\n        session.setTitle(title); // <--- 這裡一定要設\r\n        session.setDescription(slotDto.getDescription());\r\n        session.setMaxParticipants(slotDto.getMaxParticipants());\r\n        session.setPrice(slotDto.getPrice());\r\n\r\n        log.info(\"Coach {} created new availability slot on court {} from {} to {}\",\r\n                coachId, court.getId(), slotDto.getStartTime(), slotDto.getEndTime());\r\n\r\n        return sessionRepository.save(session);\r\n    }\r\n\r\n    @Transactional\r\n    @Override\r\n    public void updateCoachSlot(Integer coachId, Integer sessionId, CoachSlotDto slotDto) {\r\n        ClassSession session = sessionRepository.findById(sessionId)\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"Slot not found with ID: \" + sessionId));\r\n\r\n        if (!session.getCoach().getId().equals(coachId)) {\r\n            throw new UnauthorizedException(\"You don't have permission to modify this slot\");\r\n        }\r\n\r\n        if (\"BOOKED\".equals(session.getStatus())) {\r\n            throw new ValidationException(\"Cannot modify a booked slot. Please cancel booking first.\");\r\n        }\r\n\r\n        if (sessionRepository.existsConflictForUpdate(\r\n                sessionId,\r\n                slotDto.getCourtId(),\r\n                slotDto.getStartTime(),\r\n                slotDto.getEndTime())) {\r\n            throw new ConflictException(\"New time slot conflicts with existing sessions\");\r\n        }\r\n\r\n        session.setStartTime(slotDto.getStartTime());\r\n        session.setEndTime(slotDto.getEndTime());\r\n        session.setUpdatedAt(LocalDateTime.now());\r\n        session.setExperienceYear(slotDto.getExperienceYear());\r\n        sessionRepository.save(session);\r\n\r\n        log.info(\"Coach {} updated slot {}: new time {} to {}\",\r\n                coachId, sessionId, slotDto.getStartTime(), slotDto.getEndTime());\r\n    }\r\n\r\n    @Transactional\r\n    @Override\r\n    public void removeCoachSlot(Integer coachId, Integer sessionId, boolean forceRemove) {\r\n        ClassSession session = sessionRepository.findById(sessionId)\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"Slot not found with ID: \" + sessionId));\r\n\r\n        if (!session.getCoach().getId().equals(coachId)) {\r\n            throw new UnauthorizedException(\"You don't have permission to delete this slot\");\r\n        }\r\n\r\n        if (\"BOOKED\".equals(session.getStatus())) {\r\n            if (forceRemove) {\r\n                handleBookedSlotRemoval(session);\r\n            } else {\r\n                throw new ConflictException(\"Slot is booked. Use forceRemove=true to cancel booking\");\r\n            }\r\n        }\r\n\r\n        sessionRepository.delete(session);\r\n        log.info(\"Coach {} deleted slot {}\", coachId, sessionId);\r\n    }\r\n\r\n    private void handleBookedSlotRemoval(ClassSession session) {\r\n        User player = session.getPlayer();\r\n        if (player == null) {\r\n            log.error(\"Booked session {} has no associated player\", session.getId());\r\n            throw new IllegalStateException(\"No player associated with this booking\");\r\n        }\r\n\r\n        // 1. Send cancellation notification\r\n        emailService.sendSessionCancellation(\r\n                player.getEmail(),\r\n                session.getStartTime(),\r\n                session.getCoach().getName(),\r\n                session.getCourt().getName()\r\n        );\r\n\r\n        // 2. Process refund\r\n        refundBooking(session);\r\n\r\n        // 3. Create cancellation request\r\n        createCancellationRequest(session, \"Coach initiated cancellation\");\r\n\r\n        log.warn(\"Coach {} force-cancelled booked session {}. Player {} notified and refunded.\",\r\n                session.getCoach().getId(), session.getId(), player.getId());\r\n    }\r\n\r\n    private void refundBooking(ClassSession session) {\r\n        Payment payment = session.getPayment();\r\n        if (payment == null) {\r\n            log.error(\"No payment found for session {}\", session.getId());\r\n            throw new ResourceNotFoundException(\"Payment record not found\");\r\n        }\r\n\r\n        // 1. Update payment status\r\n        payment.setStatus(\"REFUNDED\");\r\n        payment.setRefundDate(LocalDateTime.now());\r\n        paymentRepository.save(payment);\r\n\r\n        // 2. Refund to player's wallet\r\n        Wallet playerWallet = walletRepository.findByMemberId(session.getPlayer().getId())\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"Player wallet not found\"));\r\n\r\n        playerWallet.setBalance(playerWallet.getBalance() + payment.getAmount());\r\n        walletRepository.save(playerWallet);\r\n\r\n        log.info(\"Refund processed for session {}: ${} refunded to player {}\",\r\n                session.getId(), payment.getAmount(), session.getPlayer().getId());\r\n    }\r\n\r\n    private void createCancellationRequest(ClassSession session, String reason) {\r\n        CancellationRequest request = new CancellationRequest();\r\n        request.setSession(session);\r\n        request.setReason(reason);\r\n        request.setRequestDate(LocalDateTime.now());\r\n        request.setStatus(\"APPROVED\");\r\n        request.setInitiatedByCoach(true);\r\n        cancellationRequestRepository.save(request);\r\n    }\r\n\r\n    @Override\r\npublic List<ClassSession> findAvailableSlotsByCoachAndCourt(Integer coachId, Integer courtId) {\r\n    return sessionRepository.findAvailableSlotsByCoachAndCourt(coachId, courtId);\r\n}\r\n\r\n    @Override\r\n    public List<Object[]> getAllStudentsForCoach(Integer coachId) {\r\n        return classRegistrationRepository.findStudentsByCoachId(coachId);\r\n    }\r\n\r\n    @Transactional\r\n    public void createRecurringClass(Integer coachId, RecurringSessionRequestDto dto) {\r\n        // Defensive: ensure title is not null or blank\r\n        String title = (dto.getTitle() == null || dto.getTitle().trim().isEmpty()) ? \"Recurring Class\" : dto.getTitle();\r\n        LocalDate current = dto.getStartDate();\r\n        while (!current.isAfter(dto.getEndDate())) {\r\n            if (dto.getDaysOfWeek().contains(current.getDayOfWeek())) {\r\n                LocalDateTime start = LocalDateTime.of(current, dto.getStartTime());\r\n                LocalDateTime end = LocalDateTime.of(current, dto.getEndTime());\r\n                if (!sessionRepository.existsByCourtIdAndStartTimeBetweenAndStatusNot(\r\n                        dto.getCourtId(), start, end, \"CANCELLED\")) {\r\n                    ClassSession session = new ClassSession();\r\n                    session.setCoach(coachRepository.findById(coachId).orElseThrow().getUser());\r\n                    session.setCourt(courtRepository.findById(dto.getCourtId()).orElseThrow());\r\n                    session.setStartTime(start);\r\n                    session.setEndTime(end);\r\n                    session.setStatus(\"AVAILABLE\");\r\n                    session.setSlotType(\"COACH_SESSION\");\r\n                    session.setTitle(title);\r\n                    session.setDescription(dto.getDescription());\r\n                    session.setMaxParticipants(dto.getMaxParticipants());\r\n                    session.setPrice(dto.getPrice());\r\n                    sessionRepository.save(session);\r\n                }\r\n            }\r\n            current = current.plusDays(1);\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/CoachCourtServiceImpl.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/CoachCourtServiceImpl.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/CoachCourtServiceImpl.java	(revision 89327e12854b108d004ebb020d0592b1c618ecaf)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/CoachCourtServiceImpl.java	(date 1754329068172)
@@ -13,6 +13,7 @@
 
 import java.time.LocalDateTime;
 import java.util.List;
+import java.util.Map;
 import java.util.Set;
 import java.time.LocalDate;
 
@@ -85,9 +86,10 @@
         session.setDescription(slotDto.getDescription());
         session.setMaxParticipants(slotDto.getMaxParticipants());
         session.setPrice(slotDto.getPrice());
+        session.setAllowReplacement(slotDto.getAllowReplacement() != null ? slotDto.getAllowReplacement() : false);
 
-        log.info("Coach {} created new availability slot on court {} from {} to {}",
-                coachId, court.getId(), slotDto.getStartTime(), slotDto.getEndTime());
+        log.info("Coach {} created new availability slot on court {} from {} to {} (allowReplacement: {})",
+                coachId, court.getId(), slotDto.getStartTime(), slotDto.getEndTime(), session.getAllowReplacement());
 
         return sessionRepository.save(session);
     }
@@ -214,13 +216,44 @@
         return classRegistrationRepository.findStudentsByCoachId(coachId);
     }
 
+    @Override
+    public void updateSlotAllowReplacement(Integer coachId, Integer sessionId, Boolean allowReplacement) {
+        ClassSession session = sessionRepository.findById(sessionId)
+                .orElseThrow(() -> new ResourceNotFoundException("Slot not found with ID: " + sessionId));
+
+        if (!session.getCoach().getId().equals(coachId)) {
+            throw new UnauthorizedException("You don't have permission to modify this slot");
+        }
+
+        session.setAllowReplacement(allowReplacement);
+        session.setUpdatedAt(LocalDateTime.now());
+        sessionRepository.save(session);
+
+        log.info("Coach {} updated slot {} allowReplacement to {}", coachId, sessionId, allowReplacement);
+    }
+
+    @Override
+    public List<ClassSession> getReplacementSessionsByCoach(Integer coachId) {
+        return sessionRepository.findByReplacementForSessionIdNotNullAndCoachId(coachId);
+    }
+
     @Transactional
     public void createRecurringClass(Integer coachId, RecurringSessionRequestDto dto) {
         // Defensive: ensure title is not null or blank
         String title = (dto.getTitle() == null || dto.getTitle().trim().isEmpty()) ? "Recurring Class" : dto.getTitle();
         LocalDate current = dto.getStartDate();
+        
+        // 星期幾對應的數字 (1=Monday, 2=Tuesday, ..., 7=Sunday)
+        Map<String, Integer> dayMap = Map.of(
+            "MON", 1, "TUES", 2, "WED", 3, "THURS", 4, "FRI", 5, "SAT", 6, "SUN", 7
+        );
+        
         while (!current.isAfter(dto.getEndDate())) {
-            if (dto.getDaysOfWeek().contains(current.getDayOfWeek())) {
+            // 檢查當前日期是否符合選擇的星期幾
+            int currentDayOfWeek = current.getDayOfWeek().getValue(); // 1=Monday, 2=Tuesday, ..., 7=Sunday
+            Integer targetDay = dayMap.get(dto.getDayOfWeek());
+            
+            if (targetDay != null && currentDayOfWeek == targetDay) {
                 LocalDateTime start = LocalDateTime.of(current, dto.getStartTime());
                 LocalDateTime end = LocalDateTime.of(current, dto.getEndTime());
                 if (!sessionRepository.existsByCourtIdAndStartTimeBetweenAndStatusNot(
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/config/SecurityConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.config;\r\n\r\nimport com.pickleball_backend.pickleball.security.JwtAuthFilter;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.springframework.context.annotation.*;\r\nimport org.springframework.http.HttpMethod;\r\nimport org.springframework.security.authentication.*;\r\nimport org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;\r\nimport org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;\r\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\r\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\r\nimport org.springframework.security.config.http.SessionCreationPolicy;\r\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\r\nimport org.springframework.security.crypto.password.PasswordEncoder;\r\nimport org.springframework.security.web.SecurityFilterChain;\r\nimport org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;\r\nimport org.springframework.web.cors.CorsConfiguration;\r\nimport org.springframework.web.cors.CorsConfigurationSource;\r\nimport org.springframework.web.cors.UrlBasedCorsConfigurationSource;\r\nimport org.springframework.web.filter.CorsFilter;\r\n\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\n\r\n@Configuration\r\n@EnableWebSecurity\r\n@RequiredArgsConstructor\r\n@EnableGlobalMethodSecurity(prePostEnabled = true)\r\npublic class SecurityConfig {\r\n\r\n    private final JwtAuthFilter jwtAuthFilter;\r\n\r\n    @Bean\r\n    public CorsConfigurationSource corsConfigurationSource() {\r\n        CorsConfiguration configuration = new CorsConfiguration();\r\n        configuration.setAllowedOrigins(List.of(\"http://localhost:3000\"));\r\n        configuration.setAllowedMethods(Arrays.asList(\"GET\", \"POST\", \"PUT\", \"DELETE\", \"OPTIONS\"));\r\n        configuration.setAllowedHeaders(Arrays.asList(\"Authorization\", \"Content-Type\", \"X-Requested-With\", \"Accept\", \"Content-Disposition\"));\r\n        configuration.setExposedHeaders(Arrays.asList(\"Authorization\", \"Content-Type\", \"Content-Disposition\"));\r\n        configuration.setAllowCredentials(true);\r\n        configuration.setMaxAge(3600L);\r\n\r\n        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\r\n        source.registerCorsConfiguration(\"/**\", configuration);\r\n        return source;\r\n    }\r\n\r\n    @Bean\r\n    public PasswordEncoder passwordEncoder() {\r\n        return new BCryptPasswordEncoder();\r\n    }\r\n\r\n    @Bean\r\n    public AuthenticationManager authenticationManager(AuthenticationConfiguration config) throws Exception {\r\n        return config.getAuthenticationManager();\r\n    }\r\n\r\n    @Bean\r\n    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\r\n        http\r\n                .cors(cors -> cors.configurationSource(corsConfigurationSource()))\r\n                .csrf(csrf -> csrf.disable())\r\n                .authorizeHttpRequests(auth -> auth\r\n                        .requestMatchers(\"/api/health\").permitAll()\r\n                        .requestMatchers(\"/api/auth/**\").permitAll()\r\n                        .requestMatchers(\"/uploads/**\").permitAll()\r\n                        .requestMatchers(HttpMethod.POST, \"/api/admin/register\").permitAll()\r\n                        .requestMatchers(HttpMethod.POST, \"/api/admin/login\").permitAll()\r\n                        // 允许公开访问球场图片\r\n                        .requestMatchers(\"/api/admin/courts/public/**\").permitAll()\r\n                        // Tier Management Endpoints\r\n                        .requestMatchers(HttpMethod.POST, \"/api/admin/tiers\").hasAuthority(\"ROLE_ADMIN\")\r\n                        .requestMatchers(HttpMethod.POST, \"/api/admin/*/vouchers\").hasAuthority(\"ROLE_ADMIN\")\r\n\r\n                        // Existing Admin Endpoints\r\n                        .requestMatchers(HttpMethod.GET, \"/api/admin/dashboard/**\").hasAuthority(\"ROLE_ADMIN\")\r\n                        .requestMatchers(HttpMethod.POST, \"/api/admin/courts\").hasAuthority(\"ROLE_ADMIN\")\r\n                        .requestMatchers(HttpMethod.PUT, \"/api/admin/courts/**\").hasAuthority(\"ROLE_ADMIN\")\r\n                        .requestMatchers(HttpMethod.PUT, \"/api/admin/courts/*/pricing\").hasAuthority(\"ROLE_ADMIN\")\r\n                        .requestMatchers(HttpMethod.POST, \"/api/admin/courts/**\").hasAuthority(\"ROLE_ADMIN\")\r\n                        .requestMatchers(HttpMethod.DELETE, \"/api/admin/courts/**\").hasAuthority(\"ROLE_ADMIN\")\r\n                        .requestMatchers(HttpMethod.GET, \"/api/admin/courts\").hasAuthority(\"ROLE_ADMIN\")\r\n                        .requestMatchers(HttpMethod.GET, \"/api/admin/courts/**\").hasAuthority(\"ROLE_ADMIN\")\r\n                        .requestMatchers(HttpMethod.GET, \"/api/admin/courts/*/analytics\").hasAuthority(\"ROLE_ADMIN\")\r\n                        .requestMatchers(HttpMethod.POST, \"/api/admin/tiers\").hasAuthority(\"ROLE_ADMIN\")\r\n                        .requestMatchers(HttpMethod.POST, \"/api/admin/*/vouchers\").hasAuthority(\"ROLE_ADMIN\")\r\n                        .requestMatchers(HttpMethod.GET, \"/api/admin/tiers\").hasAuthority(\"ROLE_ADMIN\")\r\n                        .requestMatchers(HttpMethod.GET, \"/api/admin/slots\").hasAuthority(\"ROLE_ADMIN\")\r\n                        .requestMatchers(HttpMethod.GET, \"/api/admin/cancellation-requests/pending\").hasAuthority(\"ROLE_ADMIN\")\r\n                        .requestMatchers(HttpMethod.PUT, \"/api/admin/cancellation-requests/*/process\").hasAuthority(\"ROLE_ADMIN\")\r\n                        .requestMatchers(HttpMethod.PUT, \"/api/admin/cancellation-requests/**\").hasAuthority(\"ROLE_ADMIN\")\r\n                        .requestMatchers(HttpMethod.GET, \"/api/admin/dashboard/**\").hasAuthority(\"ROLE_ADMIN\")\r\n                        .requestMatchers(HttpMethod.GET, \"/api/admin/users\").hasAuthority(\"ROLE_ADMIN\")\r\n                        .requestMatchers(HttpMethod.POST, \"/api/admin/users\").hasAuthority(\"ROLE_ADMIN\")\r\n                        .requestMatchers(HttpMethod.PUT, \"/api/admin/users/**\").hasAuthority(\"ROLE_ADMIN\")\r\n                        .requestMatchers(HttpMethod.DELETE, \"/api/admin/users/**\").hasAuthority(\"ROLE_ADMIN\")\r\n                        .requestMatchers(HttpMethod.POST, \"/api/admin/register-from-invite\").permitAll()\r\n                        .requestMatchers(\"/api/admin/**\").hasAuthority(\"ROLE_ADMIN\")\r\n                        .requestMatchers(HttpMethod.GET, \"/api/member/**\").hasRole(\"USER\")\r\n                        .requestMatchers(HttpMethod.POST, \"/api/member/**\").hasRole(\"USER\")\r\n                        .requestMatchers(HttpMethod.POST, \"/api/member/bookings\").hasRole(\"USER\")\r\n                        .requestMatchers(HttpMethod.GET, \"/api/member/bookings\").hasRole(\"USER\")\r\n                        .requestMatchers(HttpMethod.GET, \"/api/member/bookings/**\").hasRole(\"USER\")\r\n                        .requestMatchers(HttpMethod.POST, \"/api/member/bookings/*/cancel\").hasRole(\"USER\")\r\n                        .requestMatchers(HttpMethod.GET, \"/api/member/dashboard\").hasRole(\"USER\")\r\n                        .requestMatchers(HttpMethod.GET, \"/api/member/tiers\").hasRole(\"USER\")\r\n                        .requestMatchers(HttpMethod.GET, \"/api/member/dashboard\").hasAuthority(\"ROLE_USER\")\r\n                        .requestMatchers(HttpMethod.GET, \"/api/member/tiers\").hasAuthority(\"ROLE_USER\")\r\n                        .requestMatchers(HttpMethod.GET, \"/api/member/courts\").hasRole(\"USER\")\r\n                        .requestMatchers(HttpMethod.GET, \"/api/member/courts/{id}\").hasRole(\"USER\")\r\n                        .requestMatchers(HttpMethod.GET, \"/api/member/slots/available\").hasRole(\"USER\")\r\n                        .requestMatchers(HttpMethod.GET, \"/api/member/slots/available/grouped\").hasRole(\"USER\")\r\n                        .requestMatchers(HttpMethod.GET, \"/api/member/redeem-history\").hasRole(\"USER\")\r\n                        .requestMatchers(HttpMethod.GET, \"/api/user/reviewable-items\").hasRole(\"USER\")\r\n                        .requestMatchers(HttpMethod.GET, \"/api/feedback\").permitAll()\r\n                        .requestMatchers(HttpMethod.GET, \"/api/feedback/stats\").permitAll()\r\n                        .requestMatchers(HttpMethod.GET, \"/api/feedback/user\").hasRole(\"USER\")\r\n                        .requestMatchers(HttpMethod.GET, \"/api/feedback/reviewable-items\").hasRole(\"USER\")\r\n                        .requestMatchers(HttpMethod.POST, \"/api/feedback\").hasRole(\"USER\")\r\n                        .requestMatchers(HttpMethod.PUT, \"/api/feedback/**\").hasRole(\"USER\")\r\n                        .requestMatchers(HttpMethod.DELETE, \"/api/feedback/**\").hasAnyRole(\"USER\", \"ADMIN\")\r\n                        .requestMatchers(\"/api/auth/verify\").permitAll()\r\n                        // General Admin Access\r\n                        .requestMatchers(\"/api/admin/**\").hasAuthority(\"ROLE_ADMIN\")\r\n\r\n                        .requestMatchers(HttpMethod.POST, \"/api/coach/recurring-sessions\").hasAuthority(\"ROLE_COACH\")\r\n                        .requestMatchers(HttpMethod.POST, \"/api/coach/courses/**\").hasAuthority(\"ROLE_COACH\")\r\n                        .requestMatchers(\"/api/coach/**\").hasAuthority(\"ROLE_COACH\")\r\n\r\n                        // User Endpoints\r\n                        .requestMatchers(\"/api/profile\").authenticated()\r\n                        .requestMatchers(HttpMethod.POST, \"/api/profile/photo\").authenticated()\r\n                        .requestMatchers(\"/api/preferences\").authenticated()\r\n                        .requestMatchers(\"/error\").permitAll()\r\n                        .requestMatchers(\"/ws/**\").permitAll()\r\n                        .anyRequest().authenticated()\r\n                )\r\n                .sessionManagement(sess -> sess.sessionCreationPolicy(SessionCreationPolicy.STATELESS))\r\n                .addFilterBefore(jwtAuthFilter, UsernamePasswordAuthenticationFilter.class);\r\n\r\n        return http.build();\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/config/SecurityConfig.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/config/SecurityConfig.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/config/SecurityConfig.java	(revision 89327e12854b108d004ebb020d0592b1c618ecaf)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/config/SecurityConfig.java	(date 1754330988501)
@@ -34,7 +34,7 @@
     public CorsConfigurationSource corsConfigurationSource() {
         CorsConfiguration configuration = new CorsConfiguration();
         configuration.setAllowedOrigins(List.of("http://localhost:3000"));
-        configuration.setAllowedMethods(Arrays.asList("GET", "POST", "PUT", "DELETE", "OPTIONS"));
+        configuration.setAllowedMethods(Arrays.asList("GET", "POST", "PUT", "PATCH", "DELETE", "OPTIONS"));
         configuration.setAllowedHeaders(Arrays.asList("Authorization", "Content-Type", "X-Requested-With", "Accept", "Content-Disposition"));
         configuration.setExposedHeaders(Arrays.asList("Authorization", "Content-Type", "Content-Disposition"));
         configuration.setAllowCredentials(true);
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/EscrowAccountController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/EscrowAccountController.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/EscrowAccountController.java
deleted file mode 100644
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/EscrowAccountController.java	(revision 89327e12854b108d004ebb020d0592b1c618ecaf)
+++ /dev/null	(revision 89327e12854b108d004ebb020d0592b1c618ecaf)
@@ -1,86 +0,0 @@
-package com.pickleball_backend.pickleball.controller;
-
-import com.pickleball_backend.pickleball.service.EscrowAccountService;
-import lombok.RequiredArgsConstructor;
-import org.springframework.http.ResponseEntity;
-import org.springframework.security.access.prepost.PreAuthorize;
-import org.springframework.web.bind.annotation.*;
-
-import java.util.HashMap;
-import java.util.Map;
-
-@RestController
-@RequestMapping("/api/escrow")
-@RequiredArgsConstructor
-public class EscrowAccountController {
-
-    private final EscrowAccountService escrowAccountService;
-
-    /**
-     * 獲取託管帳戶摘要（僅管理員可查看）
-     */
-    @GetMapping("/summary")
-    @PreAuthorize("hasRole('ADMIN')")
-    public ResponseEntity<Map<String, Object>> getEscrowSummary() {
-        double platformEscrowBalance = escrowAccountService.getPlatformEscrowBalance();
-        double platformRevenue = escrowAccountService.getPlatformRevenue();
-        double coachRevenue = escrowAccountService.getCoachRevenue();
-        
-        Map<String, Object> response = new HashMap<>();
-        response.put("platformEscrowBalance", platformEscrowBalance);
-        response.put("platformRevenue", platformRevenue);
-        response.put("coachRevenue", coachRevenue);
-        response.put("totalRevenue", platformRevenue + coachRevenue);
-        response.put("currency", "MYR");
-        
-        return ResponseEntity.ok(response);
-    }
-
-    /**
-     * 獲取平台託管餘額（僅管理員可查看）
-     */
-    @GetMapping("/platform-escrow-balance")
-    @PreAuthorize("hasRole('ADMIN')")
-    public ResponseEntity<Map<String, Object>> getPlatformEscrowBalance() {
-        double balance = escrowAccountService.getPlatformEscrowBalance();
-        
-        Map<String, Object> response = new HashMap<>();
-        response.put("accountType", "PLATFORM_ESCROW");
-        response.put("balance", balance);
-        response.put("currency", "MYR");
-        
-        return ResponseEntity.ok(response);
-    }
-
-    /**
-     * 獲取平台收入（僅管理員可查看）
-     */
-    @GetMapping("/platform-revenue")
-    @PreAuthorize("hasRole('ADMIN')")
-    public ResponseEntity<Map<String, Object>> getPlatformRevenue() {
-        double revenue = escrowAccountService.getPlatformRevenue();
-        
-        Map<String, Object> response = new HashMap<>();
-        response.put("accountType", "PLATFORM_REVENUE");
-        response.put("revenue", revenue);
-        response.put("currency", "MYR");
-        
-        return ResponseEntity.ok(response);
-    }
-
-    /**
-     * 獲取教練收入（僅管理員可查看）
-     */
-    @GetMapping("/coach-revenue")
-    @PreAuthorize("hasRole('ADMIN')")
-    public ResponseEntity<Map<String, Object>> getCoachRevenue() {
-        double revenue = escrowAccountService.getCoachRevenue();
-        
-        Map<String, Object> response = new HashMap<>();
-        response.put("accountType", "COACH_REVENUE");
-        response.put("revenue", revenue);
-        response.put("currency", "MYR");
-        
-        return ResponseEntity.ok(response);
-    }
-} 
\ No newline at end of file
Index: pickleball-frontend/src/components/class/EditClassSessionDialog.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  Button,\r\n  TextField,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Grid,\r\n  Typography,\r\n  Alert,\r\n  CircularProgress,\r\n  Box\r\n} from '@mui/material';\r\nimport { DateTimePicker, LocalizationProvider } from '@mui/x-date-pickers';\r\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\r\nimport api from '../../api/axiosConfig';\r\n\r\nconst EditClassSessionDialog = ({ open, session, onClose, onSuccess }) => {\r\n  const [form, setForm] = useState({\r\n    title: '',\r\n    description: '',\r\n    venueId: '',\r\n    courtId: '',\r\n    maxParticipants: '',\r\n    price: '',\r\n    startTime: '',\r\n    endTime: '',\r\n  });\r\n  const [allCourts, setAllCourts] = useState([]);\r\n  const [venues, setVenues] = useState([]);\r\n  const [courts, setCourts] = useState([]);\r\n  const [error, setError] = useState('');\r\n  const [saving, setSaving] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const fetchCourts = async () => {\r\n      try {\r\n        // 嘗試使用教練專用的 API\r\n        const token = localStorage.getItem('authToken');\r\n        const headers = token ? { Authorization: `Bearer ${token}` } : {};\r\n        \r\n        let courtsData;\r\n        try {\r\n          const response = await api.get('/api/coach/all-courts', { headers });\r\n          courtsData = response.data;\r\n        } catch (coachError) {\r\n          console.log('Coach API failed, trying public API');\r\n          // 如果教練 API 失敗，使用公開 API\r\n          const response = await api.get('/api/courts');\r\n          courtsData = response.data;\r\n        }\r\n        \r\n        setAllCourts(courtsData);\r\n        // 動態產生場館選單（去重）\r\n        const venueMap = {};\r\n        courtsData.forEach(c => {\r\n          if (c.venue && !venueMap[c.venue.id]) {\r\n            venueMap[c.venue.id] = c.venue;\r\n          }\r\n        });\r\n        setVenues(Object.values(venueMap));\r\n      } catch (error) {\r\n        console.error('Failed to fetch courts:', error);\r\n        setAllCourts([]);\r\n        setVenues([]);\r\n      }\r\n    };\r\n    \r\n    fetchCourts();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (form.venueId) {\r\n      setCourts(allCourts.filter(c => c.venue && String(c.venue.id) === String(form.venueId)));\r\n    } else {\r\n      setCourts(allCourts);\r\n    }\r\n  }, [form.venueId, allCourts]);\r\n\r\n  useEffect(() => {\r\n    if (session) {\r\n      setForm({\r\n        title: session.title || '',\r\n        description: session.description || '',\r\n        venueId: session.venueId || (session.court?.venue?.id || ''),\r\n        courtId: session.courtId || (session.court?.id || ''),\r\n        maxParticipants: session.maxParticipants || '',\r\n        price: session.price || '',\r\n        startTime: session.startTime ? session.startTime.slice(0, 16) : '',\r\n        endTime: session.endTime ? session.endTime.slice(0, 16) : '',\r\n      });\r\n    }\r\n  }, [session]);\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setForm(prev => ({ ...prev, [name]: value }));\r\n  };\r\n\r\n  const handleSave = async () => {\r\n    setError('');\r\n    setSaving(true);\r\n    try {\r\n      await api.put(`/api/class-sessions/${session.id}`, {\r\n        ...form,\r\n        maxParticipants: Number(form.maxParticipants),\r\n        price: Number(form.price),\r\n        startTime: form.startTime,\r\n        endTime: form.endTime,\r\n      });\r\n      if (onSuccess) onSuccess();\r\n    } catch (e) {\r\n      setError(e?.response?.data?.error || 'Update failed');\r\n    } finally {\r\n      setSaving(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Dialog open={open} onClose={onClose} maxWidth=\"sm\" fullWidth>\r\n      <DialogTitle>Edit Session</DialogTitle>\r\n      <DialogContent>\r\n        <TextField label=\"Session Title\" name=\"title\" value={form.title} onChange={handleChange} required fullWidth sx={{ mt: 2 }} />\r\n        <TextField label=\"Description\" name=\"description\" value={form.description} onChange={handleChange} fullWidth multiline rows={2} sx={{ mt: 2 }} />\r\n        <FormControl fullWidth required sx={{ mt: 2 }}>\r\n          <InputLabel>Venue</InputLabel>\r\n          <Select name=\"venueId\" value={form.venueId} onChange={handleChange} label=\"Venue\">\r\n            {venues.map(v => <MenuItem key={v.id} value={v.id}>{v.name}</MenuItem>)}\r\n          </Select>\r\n        </FormControl>\r\n        <FormControl fullWidth required sx={{ mt: 2 }}>\r\n          <InputLabel>Court</InputLabel>\r\n          <Select name=\"courtId\" value={form.courtId} onChange={handleChange} label=\"Court\">\r\n            {courts.map(c => <MenuItem key={c.id} value={c.id}>{c.name}</MenuItem>)}\r\n          </Select>\r\n        </FormControl>\r\n        <TextField label=\"Max Participants\" name=\"maxParticipants\" type=\"number\" value={form.maxParticipants} onChange={handleChange} required fullWidth inputProps={{ min: 1, max: 20 }} sx={{ mt: 2 }} />\r\n        <TextField label=\"Price (RM/person)\" name=\"price\" type=\"number\" value={form.price} onChange={handleChange} required fullWidth inputProps={{ min: 0 }} sx={{ mt: 2 }} />\r\n        <TextField label=\"Start Time\" name=\"startTime\" type=\"datetime-local\" value={form.startTime} onChange={handleChange} required fullWidth sx={{ mt: 2 }} />\r\n        <TextField label=\"End Time\" name=\"endTime\" type=\"datetime-local\" value={form.endTime} onChange={handleChange} required fullWidth sx={{ mt: 2 }} />\r\n        {error && <Typography color=\"error\" sx={{ mt: 2 }}>{error}</Typography>}\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button onClick={onClose}>Cancel</Button>\r\n        <Button onClick={handleSave} variant=\"contained\" color=\"primary\" disabled={saving}>Save</Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default EditClassSessionDialog; 
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball-frontend/src/components/class/EditClassSessionDialog.jsx b/pickleball-frontend/src/components/class/EditClassSessionDialog.jsx
--- a/pickleball-frontend/src/components/class/EditClassSessionDialog.jsx	(revision 89327e12854b108d004ebb020d0592b1c618ecaf)
+++ b/pickleball-frontend/src/components/class/EditClassSessionDialog.jsx	(date 1754330985356)
@@ -14,7 +14,9 @@
   Typography,
   Alert,
   CircularProgress,
-  Box
+  Box,
+  FormControlLabel,
+  Switch
 } from '@mui/material';
 import { DateTimePicker, LocalizationProvider } from '@mui/x-date-pickers';
 import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';
@@ -30,6 +32,7 @@
     price: '',
     startTime: '',
     endTime: '',
+    allowReplacement: false,
   });
   const [allCourts, setAllCourts] = useState([]);
   const [venues, setVenues] = useState([]);
@@ -46,13 +49,15 @@
         
         let courtsData;
         try {
-          const response = await api.get('/api/coach/all-courts', { headers });
+          const response = await api.get('/coach/all-courts', { headers });
           courtsData = response.data;
+          console.log('Loaded courts from coach API:', courtsData.length);
         } catch (coachError) {
           console.log('Coach API failed, trying public API');
           // 如果教練 API 失敗，使用公開 API
-          const response = await api.get('/api/courts');
+          const response = await api.get('/courts');
           courtsData = response.data;
+          console.log('Loaded courts from public API:', courtsData.length);
         }
         
         setAllCourts(courtsData);
@@ -63,7 +68,11 @@
             venueMap[c.venue.id] = c.venue;
           }
         });
-        setVenues(Object.values(venueMap));
+        const venuesList = Object.values(venueMap);
+        setVenues(venuesList);
+        console.log('Generated venues from courts:', venuesList.length);
+        console.log('Sample court data:', courtsData[0]);
+        console.log('Sample venue data:', venuesList[0]);
       } catch (error) {
         console.error('Failed to fetch courts:', error);
         setAllCourts([]);
@@ -80,41 +89,131 @@
     } else {
       setCourts(allCourts);
     }
+    console.log('Courts filtered for venueId:', form.venueId, 'Available courts:', courts.length);
   }, [form.venueId, allCourts]);
 
+  // 当 venues 和 courts 加载完成后，重新设置 venueId 和 courtId
+  useEffect(() => {
+    if (session && venues.length > 0 && allCourts.length > 0) {
+      console.log('Venues and courts loaded, updating form with session data');
+      // 优先使用直接关联的 venue，如果没有则使用 court 的 venue
+      let venueId = '';
+      if (session.venue && session.venue.id) {
+        venueId = session.venue.id;
+      } else if (session.court && session.court.venue && session.court.venue.id) {
+        venueId = session.court.venue.id;
+      } else if (session.venueId) {
+        venueId = session.venueId;
+      }
+      
+      // 优先使用直接关联的 court
+      let courtId = '';
+      if (session.court && session.court.id) {
+        courtId = session.court.id;
+      } else if (session.courtId) {
+        courtId = session.courtId;
+      }
+      
+      console.log('Setting venueId:', venueId, 'courtId:', courtId);
+      
+      setForm(prev => ({
+        ...prev,
+        venueId: venueId,
+        courtId: courtId,
+      }));
+    }
+  }, [session, venues, allCourts]);
+
   useEffect(() => {
     if (session) {
+      console.log('Session data for editing:', session); // 调试日志
+      
+      // 优先使用直接关联的 venue，如果没有则使用 court 的 venue
+      let venueId = '';
+      if (session.venue && session.venue.id) {
+        venueId = session.venue.id;
+      } else if (session.court && session.court.venue && session.court.venue.id) {
+        venueId = session.court.venue.id;
+      } else if (session.venueId) {
+        venueId = session.venueId;
+      }
+      
+      // 优先使用直接关联的 court
+      let courtId = '';
+      if (session.court && session.court.id) {
+        courtId = session.court.id;
+      } else if (session.courtId) {
+        courtId = session.courtId;
+      }
+      
       setForm({
         title: session.title || '',
         description: session.description || '',
-        venueId: session.venueId || (session.court?.venue?.id || ''),
-        courtId: session.courtId || (session.court?.id || ''),
+        venueId: venueId,
+        courtId: courtId,
         maxParticipants: session.maxParticipants || '',
         price: session.price || '',
         startTime: session.startTime ? session.startTime.slice(0, 16) : '',
         endTime: session.endTime ? session.endTime.slice(0, 16) : '',
+        allowReplacement: session.allowReplacement || false,
       });
+      
+      // 如果 venues 和 courts 已经加载，立即更新 venueId 和 courtId
+      if (venues.length > 0 && allCourts.length > 0) {
+        setTimeout(() => {
+          setForm(prev => ({
+            ...prev,
+            venueId: venueId,
+            courtId: courtId,
+          }));
+        }, 100);
+      }
     }
-  }, [session]);
+  }, [session, venues, allCourts]);
 
   const handleChange = (e) => {
-    const { name, value } = e.target;
-    setForm(prev => ({ ...prev, [name]: value }));
+    const { name, value, checked } = e.target;
+    setForm(prev => ({ ...prev, [name]: name === 'allowReplacement' ? checked : value }));
   };
 
   const handleSave = async () => {
     setError('');
     setSaving(true);
+    
+    // 调试信息：检查用户权限
+    const token = localStorage.getItem('authToken');
+    console.log('=== Debug: User Permission Check ===');
+    console.log('Auth token exists:', !!token);
+    
+    if (token) {
+      try {
+        const payload = JSON.parse(atob(token.split('.')[1]));
+        console.log('JWT payload:', payload);
+        console.log('User role:', payload.role);
+        console.log('User type:', payload.userType);
+        console.log('User ID:', payload.userId);
+        console.log('Subject:', payload.sub);
+      } catch (error) {
+        console.error('Failed to parse JWT token:', error);
+      }
+    }
+    
     try {
-      await api.put(`/api/class-sessions/${session.id}`, {
-        ...form,
+      console.log('Making PATCH request to:', `/class-sessions/${session.id}`);
+      console.log('Request payload:', {
         maxParticipants: Number(form.maxParticipants),
         price: Number(form.price),
-        startTime: form.startTime,
-        endTime: form.endTime,
+      });
+      
+      await api.patch(`/class-sessions/${session.id}`, {
+        maxParticipants: Number(form.maxParticipants),
+        price: Number(form.price),
       });
       if (onSuccess) onSuccess();
     } catch (e) {
+      console.error('API Error:', e);
+      console.error('Response data:', e?.response?.data);
+      console.error('Response status:', e?.response?.status);
       setError(e?.response?.data?.error || 'Update failed');
     } finally {
       setSaving(false);
@@ -123,26 +222,125 @@
 
   return (
     <Dialog open={open} onClose={onClose} maxWidth="sm" fullWidth>
-      <DialogTitle>Edit Session</DialogTitle>
+      <DialogTitle>Edit Session (Participants & Price Only)</DialogTitle>
       <DialogContent>
-        <TextField label="Session Title" name="title" value={form.title} onChange={handleChange} required fullWidth sx={{ mt: 2 }} />
-        <TextField label="Description" name="description" value={form.description} onChange={handleChange} fullWidth multiline rows={2} sx={{ mt: 2 }} />
+        <TextField 
+          label="Session Title" 
+          name="title" 
+          value={form.title} 
+          onChange={handleChange} 
+          required 
+          fullWidth 
+          sx={{ mt: 2 }}
+          InputProps={{ readOnly: true }}
+          helperText="Read-only field"
+        />
+        <TextField 
+          label="Description" 
+          name="description" 
+          value={form.description} 
+          onChange={handleChange} 
+          fullWidth 
+          multiline 
+          rows={2} 
+          sx={{ mt: 2 }}
+          InputProps={{ readOnly: true }}
+          helperText="Read-only field"
+        />
         <FormControl fullWidth required sx={{ mt: 2 }}>
           <InputLabel>Venue</InputLabel>
-          <Select name="venueId" value={form.venueId} onChange={handleChange} label="Venue">
+          <Select 
+            name="venueId" 
+            value={form.venueId} 
+            onChange={handleChange} 
+            label="Venue"
+            disabled={true}
+          >
             {venues.map(v => <MenuItem key={v.id} value={v.id}>{v.name}</MenuItem>)}
           </Select>
+          <Typography variant="caption" color="text.secondary">
+            Selected: {form.venueId} | Available: {venues.length} venues | Read-only field
+          </Typography>
         </FormControl>
         <FormControl fullWidth required sx={{ mt: 2 }}>
           <InputLabel>Court</InputLabel>
-          <Select name="courtId" value={form.courtId} onChange={handleChange} label="Court">
+          <Select 
+            name="courtId" 
+            value={form.courtId} 
+            onChange={handleChange} 
+            label="Court"
+            disabled={true}
+          >
             {courts.map(c => <MenuItem key={c.id} value={c.id}>{c.name}</MenuItem>)}
           </Select>
+          <Typography variant="caption" color="text.secondary">
+            Selected: {form.courtId} | Available: {courts.length} courts | Read-only field
+          </Typography>
         </FormControl>
-        <TextField label="Max Participants" name="maxParticipants" type="number" value={form.maxParticipants} onChange={handleChange} required fullWidth inputProps={{ min: 1, max: 20 }} sx={{ mt: 2 }} />
-        <TextField label="Price (RM/person)" name="price" type="number" value={form.price} onChange={handleChange} required fullWidth inputProps={{ min: 0 }} sx={{ mt: 2 }} />
-        <TextField label="Start Time" name="startTime" type="datetime-local" value={form.startTime} onChange={handleChange} required fullWidth sx={{ mt: 2 }} />
-        <TextField label="End Time" name="endTime" type="datetime-local" value={form.endTime} onChange={handleChange} required fullWidth sx={{ mt: 2 }} />
+        <TextField 
+          label="Max Participants" 
+          name="maxParticipants" 
+          type="number" 
+          value={form.maxParticipants} 
+          onChange={handleChange} 
+          required 
+          fullWidth 
+          inputProps={{ min: 1, max: 20 }} 
+          sx={{ mt: 2 }}
+          helperText="✓ Editable field"
+        />
+        <TextField 
+          label="Price (RM/person)" 
+          name="price" 
+          type="number" 
+          value={form.price} 
+          onChange={handleChange} 
+          required 
+          fullWidth 
+          inputProps={{ min: 0 }} 
+          sx={{ mt: 2 }}
+          helperText="✓ Editable field"
+        />
+        <TextField 
+          label="Start Time" 
+          name="startTime" 
+          type="datetime-local" 
+          value={form.startTime} 
+          onChange={handleChange} 
+          required 
+          fullWidth 
+          sx={{ mt: 2 }}
+          InputProps={{ readOnly: true }}
+          helperText="Read-only field"
+        />
+        <TextField 
+          label="End Time" 
+          name="endTime" 
+          type="datetime-local" 
+          value={form.endTime} 
+          onChange={handleChange} 
+          required 
+          fullWidth 
+          sx={{ mt: 2 }}
+          InputProps={{ readOnly: true }}
+          helperText="Read-only field"
+        />
+        <FormControlLabel
+          control={
+            <Switch
+              checked={form.allowReplacement}
+              onChange={handleChange}
+              name="allowReplacement"
+              color="primary"
+              disabled={true}
+            />
+          }
+          label="Allow Replacement (Read-only)"
+          sx={{ mt: 2 }}
+        />
+        <Typography variant="caption" color="text.secondary" sx={{ mt: 1, display: 'block' }}>
+          Enable this option to allow students to book this time slot for makeup classes when they request leave from other sessions.
+        </Typography>
         {error && <Typography color="error" sx={{ mt: 2 }}>{error}</Typography>}
       </DialogContent>
       <DialogActions>
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/BookingRequestDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.dto;\r\n\r\nimport lombok.Data;\r\n\r\nimport java.util.List;\r\n\r\n@Data\r\npublic class BookingRequestDto {\r\n    private Integer slotId;\r\n    private List<Integer> slotIds; // 支持多 slot 合并预订\r\n    private String purpose;\r\n    private Integer numberOfPlayers;\r\n    private Integer numPaddles; // 新增：租借球拍数量\r\n    private Boolean buyBallSet; // 新增：购买球组\r\n    private Integer durationHours;\r\n    private boolean useWallet;\r\n    private String paymentMethod;\r\n    private String paymentStatus;\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/BookingRequestDto.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/BookingRequestDto.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/BookingRequestDto.java	(revision 89327e12854b108d004ebb020d0592b1c618ecaf)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/BookingRequestDto.java	(date 1754067652484)
@@ -16,4 +16,6 @@
     private boolean useWallet;
     private String paymentMethod;
     private String paymentStatus;
+    private Integer voucherRedemptionId; // 新增：使用的voucher redemption ID
+    private boolean useVoucher; // 新增：是否使用voucher
 }
\ No newline at end of file
Index: pickleball-frontend/src/components/class/ClassSessionCreateForm.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  Button,\r\n  TextField,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Grid,\r\n  Typography,\r\n  Alert,\r\n  CircularProgress,\r\n  Box,\r\n  OutlinedInput,\r\n  Checkbox,\r\n  ListItemText,\r\n  FormHelperText\r\n} from '@mui/material';\r\nimport { DateTimePicker, LocalizationProvider } from '@mui/x-date-pickers';\r\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\r\nimport api from '../../api/axiosConfig';\r\nimport ClassSessionService from '../../service/ClassSessionService';\r\nimport CourtService from '../../service/CourtService';\r\nimport axios from 'axios'; // Added axios import\r\n\r\nconst daysOfWeekOptions = [\r\n  { label: 'Monday', value: 'MONDAY' },\r\n  { label: 'Tuesday', value: 'TUESDAY' },\r\n  { label: 'Wednesday', value: 'WEDNESDAY' },\r\n  { label: 'Thursday', value: 'THURSDAY' },\r\n  { label: 'Friday', value: 'FRIDAY' },\r\n  { label: 'Saturday', value: 'SATURDAY' },\r\n  { label: 'Sunday', value: 'SUNDAY' },\r\n];\r\n\r\nconst defaultForm = {\r\n  title: '',\r\n  description: '',\r\n  venueId: '',\r\n  courtId: '',\r\n  price: '',\r\n  maxParticipants: '',\r\n  daysOfWeek: [],\r\n  startTime: '',\r\n  endTime: '',\r\n  startDate: '',\r\n  endDate: '',\r\n};\r\n\r\nconst ClassSessionCreateForm = ({ open, onClose, onSuccess }) => {\r\n  const [form, setForm] = useState(defaultForm);\r\n  const [allCourts, setAllCourts] = useState([]);\r\n  const [venues, setVenues] = useState([]);\r\n  const [courts, setCourts] = useState([]);\r\n  const [checking, setChecking] = useState(false);\r\n  const [conflicts, setConflicts] = useState([]);\r\n  const [error, setError] = useState('');\r\n  const [success, setSuccess] = useState('');\r\n  const [totalSessions, setTotalSessions] = useState(0);\r\n\r\n  // 取得所有 court，並動態產生場館選單\r\n  useEffect(() => {\r\n    const fetchCourts = async () => {\r\n      try {\r\n        // 嘗試使用教練專用的 API\r\n        const token = localStorage.getItem('authToken');\r\n        const headers = token ? { Authorization: `Bearer ${token}` } : {};\r\n        \r\n        let courtsData;\r\n        try {\r\n          const response = await axios.get('/api/coach/all-courts', { headers });\r\n          courtsData = response.data;\r\n        } catch (coachError) {\r\n          console.log('Coach API failed, trying public API');\r\n          // 如果教練 API 失敗，使用公開 API\r\n          const response = await axios.get('/api/courts');\r\n          courtsData = response.data;\r\n        }\r\n        \r\n        setAllCourts(courtsData);\r\n        // 動態產生場館選單（去重）\r\n        const venueMap = {};\r\n        courtsData.forEach(c => {\r\n          if (c.venue && !venueMap[c.venue.id]) {\r\n            venueMap[c.venue.id] = c.venue;\r\n          }\r\n        });\r\n        setVenues(Object.values(venueMap));\r\n      } catch (error) {\r\n        console.error('Failed to fetch courts:', error);\r\n        setAllCourts([]);\r\n        setVenues([]);\r\n      }\r\n    };\r\n    \r\n    fetchCourts();\r\n  }, []);\r\n\r\n  // 根據選擇的場館過濾 court\r\n  useEffect(() => {\r\n    if (form.venueId) {\r\n      setCourts(allCourts.filter(c => c.venue && String(c.venue.id) === String(form.venueId)));\r\n    } else {\r\n      setCourts(allCourts);\r\n    }\r\n  }, [form.venueId, allCourts]);\r\n\r\n  // 自動計算總堂數\r\n  useEffect(() => {\r\n    if (!form.startDate || !form.endDate || form.daysOfWeek.length === 0) {\r\n      setTotalSessions(0);\r\n      return;\r\n    }\r\n    const start = new Date(form.startDate);\r\n    const end = new Date(form.endDate);\r\n    let count = 0;\r\n    for (let d = new Date(start); d <= end; d.setDate(d.getDate() + 1)) {\r\n      const dayName = d.toLocaleDateString('en-US', { weekday: 'long' }).toUpperCase();\r\n      if (form.daysOfWeek.includes(dayName)) {\r\n        count++;\r\n      }\r\n    }\r\n    setTotalSessions(count);\r\n  }, [form.startDate, form.endDate, form.daysOfWeek]);\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setForm((prev) => ({ ...prev, [name]: value }));\r\n  };\r\n\r\n  const handleDaysChange = (event) => {\r\n    const { value } = event.target;\r\n    setForm((prev) => ({ ...prev, daysOfWeek: typeof value === 'string' ? value.split(',') : value }));\r\n  };\r\n\r\n  // 根據週期自動產生所有日期時間段\r\n  const getAllDateTimes = () => {\r\n    if (!form.startDate || !form.endDate || !form.startTime || !form.endTime || form.daysOfWeek.length === 0) return [];\r\n    const start = new Date(form.startDate);\r\n    const end = new Date(form.endDate);\r\n    const result = [];\r\n    for (let d = new Date(start); d <= end; d.setDate(d.getDate() + 1)) {\r\n      const dayName = d.toLocaleDateString('en-US', { weekday: 'long' }).toUpperCase();\r\n      if (form.daysOfWeek.includes(dayName)) {\r\n        const dateStr = d.toISOString().slice(0, 10);\r\n        result.push({\r\n          startTime: `${dateStr}T${form.startTime}`,\r\n          endTime: `${dateStr}T${form.endTime}`,\r\n        });\r\n      }\r\n    }\r\n    return result;\r\n  };\r\n\r\n  const handleCheckConflicts = async () => {\r\n    setChecking(true);\r\n    setConflicts([]);\r\n    setError('');\r\n    try {\r\n      const dateTimes = getAllDateTimes();\r\n      if (!form.courtId || dateTimes.length === 0) {\r\n        setError('Please select venue, court, period, and time');\r\n        setChecking(false);\r\n        return;\r\n      }\r\n      const res = await ClassSessionService.checkCourtAvailability(form.courtId, dateTimes);\r\n      setConflicts(res.conflicts || []);\r\n      if ((res.conflicts || []).length === 0) setSuccess('No conflicts, you can create sessions!');\r\n      else setSuccess('');\r\n    } catch (e) {\r\n      setError(e?.response?.data?.error || 'Check failed');\r\n    } finally {\r\n      setChecking(false);\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setError('');\r\n    setSuccess('');\r\n    const dateTimes = getAllDateTimes();\r\n    if (!form.title || !form.courtId || !form.venueId || !form.price || !form.maxParticipants || !form.startDate || !form.endDate || !form.startTime || !form.endTime || form.daysOfWeek.length === 0) {\r\n      setError('Please complete all fields');\r\n      return;\r\n    }\r\n    if (conflicts.length > 0) {\r\n      setError('There are time conflicts, please reselect');\r\n      return;\r\n    }\r\n    try {\r\n      const payload = {\r\n        ...form,\r\n        daysOfWeek: form.daysOfWeek,\r\n        price: Number(form.price),\r\n        maxParticipants: Number(form.maxParticipants),\r\n      };\r\n      await ClassSessionService.createRecurringSessions(payload);\r\n      setSuccess('Session created successfully!');\r\n      if (onSuccess) onSuccess(form.startDate); // 傳遞新課程第一天日期\r\n      setTimeout(() => { setSuccess(''); onClose(); }, 1200);\r\n    } catch (e) {\r\n      setError(e?.response?.data?.error || 'Creation failed');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Dialog open={open} onClose={onClose} maxWidth=\"sm\" fullWidth>\r\n      <DialogTitle>Create Recurring/Multiple Sessions</DialogTitle>\r\n      <DialogContent>\r\n        <Box component=\"form\" sx={{ display: 'flex', flexDirection: 'column', gap: 2, mt: 1 }}>\r\n          <TextField label=\"Session Title\" name=\"title\" value={form.title} onChange={handleChange} required fullWidth />\r\n          <TextField label=\"Description\" name=\"description\" value={form.description} onChange={handleChange} fullWidth multiline rows={2} />\r\n          <FormControl fullWidth required>\r\n            <InputLabel>Venue</InputLabel>\r\n            <Select name=\"venueId\" value={form.venueId} onChange={handleChange} label=\"Venue\">\r\n              {venues.map(v => <MenuItem key={v.id} value={v.id}>{v.name}</MenuItem>)}\r\n            </Select>\r\n          </FormControl>\r\n          <FormControl fullWidth required>\r\n            <InputLabel>Court</InputLabel>\r\n            <Select name=\"courtId\" value={form.courtId} onChange={handleChange} label=\"Court\">\r\n              {courts.map(c => <MenuItem key={c.id} value={c.id}>{c.name}</MenuItem>)}\r\n            </Select>\r\n          </FormControl>\r\n          <TextField label=\"Max Participants\" name=\"maxParticipants\" type=\"number\" value={form.maxParticipants} onChange={handleChange} required fullWidth inputProps={{ min: 1, max: 20 }} />\r\n          <TextField label=\"Price (RM/person)\" name=\"price\" type=\"number\" value={form.price} onChange={handleChange} required fullWidth inputProps={{ min: 0 }} />\r\n          <FormControl fullWidth required>\r\n            <InputLabel>Days of Week</InputLabel>\r\n            <Select\r\n              multiple\r\n              name=\"daysOfWeek\"\r\n              value={form.daysOfWeek}\r\n              onChange={handleDaysChange}\r\n              input={<OutlinedInput label=\"Days of Week\" />}\r\n              renderValue={(selected) => selected.map(val => daysOfWeekOptions.find(opt => opt.value === val)?.label).join(', ')}\r\n            >\r\n              {daysOfWeekOptions.map(opt => (\r\n                <MenuItem key={opt.value} value={opt.value}>\r\n                  <Checkbox checked={form.daysOfWeek.indexOf(opt.value) > -1} />\r\n                  <ListItemText primary={opt.label} />\r\n                </MenuItem>\r\n              ))}\r\n            </Select>\r\n            <FormHelperText>Multiple selection allowed</FormHelperText>\r\n          </FormControl>\r\n          {/* 新增：顯示總堂數 */}\r\n          <Typography color=\"primary\" sx={{ mb: 1 }}>\r\n            {totalSessions > 0 ? `Total ${totalSessions} sessions` : ''}\r\n          </Typography>\r\n          <Box sx={{ display: 'flex', gap: 2 }}>\r\n            <TextField label=\"Start Time (HH:mm)\" name=\"startTime\" type=\"time\" value={form.startTime} onChange={handleChange} required fullWidth />\r\n            <TextField label=\"End Time (HH:mm)\" name=\"endTime\" type=\"time\" value={form.endTime} onChange={handleChange} required fullWidth />\r\n          </Box>\r\n          <Box sx={{ display: 'flex', gap: 2 }}>\r\n            <TextField label=\"Start Date\" name=\"startDate\" type=\"date\" value={form.startDate} onChange={handleChange} required fullWidth />\r\n            <TextField label=\"End Date\" name=\"endDate\" type=\"date\" value={form.endDate} onChange={handleChange} required fullWidth />\r\n          </Box>\r\n          <Button variant=\"outlined\" onClick={handleCheckConflicts} disabled={checking || !form.courtId || getAllDateTimes().length === 0}>Check Venue Conflicts</Button>\r\n          {conflicts.length > 0 && <Typography color=\"error\">Conflicting time slots: {conflicts.join(', ')}</Typography>}\r\n          {success && <Typography color=\"success.main\">{success.replace('No conflicts, you can create sessions!', 'No conflicts, you can create sessions!').replace('Session created successfully!', 'Session created successfully!')}</Typography>}\r\n          {error && <Typography color=\"error\">{error.replace('Please complete all fields', 'Please complete all fields').replace('There are time conflicts, please reselect', 'There are time conflicts, please reselect').replace('Creation failed', 'Creation failed').replace('Check failed', 'Check failed')}</Typography>}\r\n        </Box>\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button onClick={onClose}>Cancel</Button>\r\n        <Button onClick={handleSubmit} variant=\"contained\" color=\"primary\">Create Session</Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default ClassSessionCreateForm; 
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball-frontend/src/components/class/ClassSessionCreateForm.jsx b/pickleball-frontend/src/components/class/ClassSessionCreateForm.jsx
--- a/pickleball-frontend/src/components/class/ClassSessionCreateForm.jsx	(revision 89327e12854b108d004ebb020d0592b1c618ecaf)
+++ b/pickleball-frontend/src/components/class/ClassSessionCreateForm.jsx	(date 1754329068171)
@@ -14,11 +14,7 @@
   Typography,
   Alert,
   CircularProgress,
-  Box,
-  OutlinedInput,
-  Checkbox,
-  ListItemText,
-  FormHelperText
+  Box
 } from '@mui/material';
 import { DateTimePicker, LocalizationProvider } from '@mui/x-date-pickers';
 import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';
@@ -27,15 +23,7 @@
 import CourtService from '../../service/CourtService';
 import axios from 'axios'; // Added axios import
 
-const daysOfWeekOptions = [
-  { label: 'Monday', value: 'MONDAY' },
-  { label: 'Tuesday', value: 'TUESDAY' },
-  { label: 'Wednesday', value: 'WEDNESDAY' },
-  { label: 'Thursday', value: 'THURSDAY' },
-  { label: 'Friday', value: 'FRIDAY' },
-  { label: 'Saturday', value: 'SATURDAY' },
-  { label: 'Sunday', value: 'SUNDAY' },
-];
+
 
 const defaultForm = {
   title: '',
@@ -44,11 +32,11 @@
   courtId: '',
   price: '',
   maxParticipants: '',
-  daysOfWeek: [],
   startTime: '',
   endTime: '',
   startDate: '',
   endDate: '',
+  dayOfWeek: '',
 };
 
 const ClassSessionCreateForm = ({ open, onClose, onSuccess }) => {
@@ -109,43 +97,59 @@
     }
   }, [form.venueId, allCourts]);
 
-  // 自動計算總堂數
+  // 自動計算總堂數（基於日期範圍和星期幾）
   useEffect(() => {
-    if (!form.startDate || !form.endDate || form.daysOfWeek.length === 0) {
+    if (!form.startDate || !form.endDate || !form.dayOfWeek) {
       setTotalSessions(0);
       return;
     }
     const start = new Date(form.startDate);
     const end = new Date(form.endDate);
     let count = 0;
+    
+    // 星期幾對應的數字 (0=Sunday, 1=Monday, ..., 6=Saturday)
+    const dayMap = {
+      'SUN': 0, 'MON': 1, 'TUES': 2, 'WED': 3, 'THURS': 4, 'FRI': 5, 'SAT': 6
+    };
+    
+    const targetDay = dayMap[form.dayOfWeek];
+    if (targetDay === undefined) {
+      setTotalSessions(0);
+      return;
+    }
+    
     for (let d = new Date(start); d <= end; d.setDate(d.getDate() + 1)) {
-      const dayName = d.toLocaleDateString('en-US', { weekday: 'long' }).toUpperCase();
-      if (form.daysOfWeek.includes(dayName)) {
+      if (d.getDay() === targetDay) {
         count++;
       }
     }
     setTotalSessions(count);
-  }, [form.startDate, form.endDate, form.daysOfWeek]);
+  }, [form.startDate, form.endDate, form.dayOfWeek]);
 
   const handleChange = (e) => {
     const { name, value } = e.target;
     setForm((prev) => ({ ...prev, [name]: value }));
   };
 
-  const handleDaysChange = (event) => {
-    const { value } = event.target;
-    setForm((prev) => ({ ...prev, daysOfWeek: typeof value === 'string' ? value.split(',') : value }));
-  };
-
-  // 根據週期自動產生所有日期時間段
+  // 根據日期範圍和星期幾自動產生所有日期時間段
   const getAllDateTimes = () => {
-    if (!form.startDate || !form.endDate || !form.startTime || !form.endTime || form.daysOfWeek.length === 0) return [];
+    if (!form.startDate || !form.endDate || !form.startTime || !form.endTime || !form.dayOfWeek) return [];
+    
     const start = new Date(form.startDate);
     const end = new Date(form.endDate);
     const result = [];
+    
+    // 星期幾對應的數字 (0=Sunday, 1=Monday, ..., 6=Saturday)
+    const dayMap = {
+      'SUN': 0, 'MON': 1, 'TUES': 2, 'WED': 3, 'THURS': 4, 'FRI': 5, 'SAT': 6
+    };
+    
+    const targetDay = dayMap[form.dayOfWeek];
+    if (targetDay === undefined) return [];
+    
     for (let d = new Date(start); d <= end; d.setDate(d.getDate() + 1)) {
-      const dayName = d.toLocaleDateString('en-US', { weekday: 'long' }).toUpperCase();
-      if (form.daysOfWeek.includes(dayName)) {
+      // 只添加符合選擇的星期幾的日期
+      if (d.getDay() === targetDay) {
         const dateStr = d.toISOString().slice(0, 10);
         result.push({
           startTime: `${dateStr}T${form.startTime}`,
@@ -162,8 +166,8 @@
     setError('');
     try {
       const dateTimes = getAllDateTimes();
-      if (!form.courtId || dateTimes.length === 0) {
-        setError('Please select venue, court, period, and time');
+      if (!form.courtId || !form.dayOfWeek || dateTimes.length === 0) {
+        setError('Please select venue, court, day of week, and time');
         setChecking(false);
         return;
       }
@@ -183,8 +187,8 @@
     setError('');
     setSuccess('');
     const dateTimes = getAllDateTimes();
-    if (!form.title || !form.courtId || !form.venueId || !form.price || !form.maxParticipants || !form.startDate || !form.endDate || !form.startTime || !form.endTime || form.daysOfWeek.length === 0) {
-      setError('Please complete all fields');
+    if (!form.title || !form.courtId || !form.venueId || !form.price || !form.maxParticipants || !form.startDate || !form.endDate || !form.startTime || !form.endTime || !form.dayOfWeek) {
+      setError('Please complete all fields including day of week');
       return;
     }
     if (conflicts.length > 0) {
@@ -194,7 +198,6 @@
     try {
       const payload = {
         ...form,
-        daysOfWeek: form.daysOfWeek,
         price: Number(form.price),
         maxParticipants: Number(form.maxParticipants),
       };
@@ -228,25 +231,6 @@
           </FormControl>
           <TextField label="Max Participants" name="maxParticipants" type="number" value={form.maxParticipants} onChange={handleChange} required fullWidth inputProps={{ min: 1, max: 20 }} />
           <TextField label="Price (RM/person)" name="price" type="number" value={form.price} onChange={handleChange} required fullWidth inputProps={{ min: 0 }} />
-          <FormControl fullWidth required>
-            <InputLabel>Days of Week</InputLabel>
-            <Select
-              multiple
-              name="daysOfWeek"
-              value={form.daysOfWeek}
-              onChange={handleDaysChange}
-              input={<OutlinedInput label="Days of Week" />}
-              renderValue={(selected) => selected.map(val => daysOfWeekOptions.find(opt => opt.value === val)?.label).join(', ')}
-            >
-              {daysOfWeekOptions.map(opt => (
-                <MenuItem key={opt.value} value={opt.value}>
-                  <Checkbox checked={form.daysOfWeek.indexOf(opt.value) > -1} />
-                  <ListItemText primary={opt.label} />
-                </MenuItem>
-              ))}
-            </Select>
-            <FormHelperText>Multiple selection allowed</FormHelperText>
-          </FormControl>
           {/* 新增：顯示總堂數 */}
           <Typography color="primary" sx={{ mb: 1 }}>
             {totalSessions > 0 ? `Total ${totalSessions} sessions` : ''}
@@ -259,7 +243,19 @@
             <TextField label="Start Date" name="startDate" type="date" value={form.startDate} onChange={handleChange} required fullWidth />
             <TextField label="End Date" name="endDate" type="date" value={form.endDate} onChange={handleChange} required fullWidth />
           </Box>
-          <Button variant="outlined" onClick={handleCheckConflicts} disabled={checking || !form.courtId || getAllDateTimes().length === 0}>Check Venue Conflicts</Button>
+          <FormControl fullWidth required>
+            <InputLabel>Day of Week</InputLabel>
+            <Select name="dayOfWeek" value={form.dayOfWeek} onChange={handleChange} label="Day of Week">
+              <MenuItem value="MON">Monday</MenuItem>
+              <MenuItem value="TUES">Tuesday</MenuItem>
+              <MenuItem value="WED">Wednesday</MenuItem>
+              <MenuItem value="THURS">Thursday</MenuItem>
+              <MenuItem value="FRI">Friday</MenuItem>
+              <MenuItem value="SAT">Saturday</MenuItem>
+              <MenuItem value="SUN">Sunday</MenuItem>
+            </Select>
+          </FormControl>
+          <Button variant="outlined" onClick={handleCheckConflicts} disabled={checking || !form.courtId || !form.dayOfWeek || getAllDateTimes().length === 0}>Check Venue Conflicts</Button>
           {conflicts.length > 0 && <Typography color="error">Conflicting time slots: {conflicts.join(', ')}</Typography>}
           {success && <Typography color="success.main">{success.replace('No conflicts, you can create sessions!', 'No conflicts, you can create sessions!').replace('Session created successfully!', 'Session created successfully!')}</Typography>}
           {error && <Typography color="error">{error.replace('Please complete all fields', 'Please complete all fields').replace('There are time conflicts, please reselect', 'There are time conflicts, please reselect').replace('Creation failed', 'Creation failed').replace('Check failed', 'Check failed')}</Typography>}
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/BookingHistoryDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.dto;\r\n\r\nimport lombok.Data;\r\nimport java.time.LocalDate;\r\nimport java.time.LocalDateTime;\r\nimport java.time.LocalTime;\r\n\r\n@Data\r\npublic class BookingHistoryDto {\r\n    private Integer id;\r\n    private Integer courtId; // 新增：court ID\r\n    private String courtName;\r\n    private String location;\r\n    private LocalDate date;\r\n    private LocalTime startTime;\r\n    private LocalTime endTime;\r\n    private double amount;\r\n    private String status; // UPCOMING, COMPLETED, CANCELLED\r\n    private LocalDateTime createdAt;\r\n    private String purpose;\r\n    private Integer numberOfPlayers;\r\n    private Integer durationHours;\r\n    // 新增：球拍和球组信息\r\n    private Integer numPaddles;\r\n    private Boolean buyBallSet;\r\n    \r\n    // 新增：用户是否已经评价过这个预订\r\n    private Boolean hasReviewed;\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/BookingHistoryDto.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/BookingHistoryDto.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/BookingHistoryDto.java	(revision 89327e12854b108d004ebb020d0592b1c618ecaf)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/BookingHistoryDto.java	(date 1754148560218)
@@ -26,4 +26,10 @@
     
     // 新增：用户是否已经评价过这个预订
     private Boolean hasReviewed;
+    
+    // 新增：voucher 相关信息
+    private Boolean voucherUsed;
+    private Double originalAmount;
+    private Double discountAmount;
+    private String voucherCode;
 }
\ No newline at end of file
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/VoucherRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.repository;\r\n\r\nimport com.pickleball_backend.pickleball.entity.Voucher;\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\nimport java.util.List;\r\n\r\npublic interface VoucherRepository extends JpaRepository<Voucher, Integer> {\r\n    boolean existsByCode(String code);\r\n    List<Voucher> findByTierId(Integer tierId);\r\n    List<Voucher> findByMemberIdIsNotNull();\r\n    \r\n    // Find redeemable vouchers (not yet redeemed by any user)\r\n    List<Voucher> findByTierIdAndMemberIsNull(Integer tierId);\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/VoucherRepository.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/VoucherRepository.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/VoucherRepository.java	(revision 89327e12854b108d004ebb020d0592b1c618ecaf)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/VoucherRepository.java	(date 1754074985268)
@@ -11,4 +11,13 @@
     
     // Find redeemable vouchers (not yet redeemed by any user)
     List<Voucher> findByTierIdAndMemberIsNull(Integer tierId);
+    
+    // Find general vouchers (no tier association) that are not redeemed
+    List<Voucher> findByTierIdIsNullAndMemberIsNull();
+    
+    // Find vouchers redeemed by a specific member
+    List<Voucher> findByMemberId(Integer memberId);
+    
+    // Check if a member has already redeemed a specific voucher code
+    boolean existsByCodeAndMemberId(String code, Integer memberId);
 }
\ No newline at end of file
Index: pickleball-frontend/src/components/court/PaymentPage.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Container,\r\n  Card,\r\n  CardContent,\r\n  Typography,\r\n  Button,\r\n  Box,\r\n  Grid,\r\n  Divider,\r\n  Radio,\r\n  RadioGroup,\r\n  FormControlLabel,\r\n  FormControl,\r\n  FormLabel,\r\n  CircularProgress,\r\n  Alert,\r\n  Chip,\r\n  Paper\r\n} from '@mui/material';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport PaymentIcon from '@mui/icons-material/Payment';\r\nimport AccountBalanceWalletIcon from '@mui/icons-material/AccountBalanceWallet';\r\nimport CreditCardIcon from '@mui/icons-material/CreditCard';\r\nimport LocationOnIcon from '@mui/icons-material/LocationOn';\r\nimport AccessTimeIcon from '@mui/icons-material/AccessTime';\r\nimport SportsIcon from '@mui/icons-material/Sports';\r\nimport GroupIcon from '@mui/icons-material/Group';\r\nimport api from '../../api/axiosConfig.js';\r\nimport { getWalletBalance, initializeWallet } from '../../service/WalletService';\r\nimport { useAuth } from '../../context/AuthContext';\r\nimport ThemedCard from '../common/ThemedCard';\r\n\r\nconst PaymentPage = () => {\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n  const bookingDetails = location.state?.bookingDetails;\r\n  const [paymentMethod, setPaymentMethod] = useState('wallet');\r\n  const [walletBalance, setWalletBalance] = useState(0);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [isProcessing, setIsProcessing] = useState(false);\r\n  const { authToken } = useAuth();\r\n\r\n  useEffect(() => {\r\n    const fetchWalletBalance = async () => {\r\n      try {\r\n        setIsLoading(true);\r\n        let balance;\r\n\r\n        try {\r\n          balance = await getWalletBalance();\r\n        } catch (getError) {\r\n          console.warn('Wallet not found, initializing...', getError);\r\n          await initializeWallet();\r\n          balance = await getWalletBalance();\r\n        }\r\n\r\n        setWalletBalance(balance);\r\n      } catch (err) {\r\n        console.error('Wallet balance error:', err);\r\n        setError('Failed to load wallet balance: ' + err.message);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchWalletBalance();\r\n  }, []);\r\n\r\n  const handlePayment = async () => {\r\n    if (!bookingDetails) {\r\n      setError('Booking details missing');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setIsProcessing(true);\r\n\r\n      const bookingRequest = {\r\n        slotIds: bookingDetails.slotIds,\r\n        purpose: bookingDetails.purpose,\r\n        numberOfPlayers: bookingDetails.numberOfPlayers,\r\n        numPaddles: bookingDetails.numPaddles,\r\n        buyBallSet: bookingDetails.buyBallSet,\r\n        durationHours: bookingDetails.durationHours,\r\n        useWallet: paymentMethod === 'wallet'\r\n      };\r\n\r\n      console.log('=== PaymentPage Debug ===');\r\n      console.log('Payment Method:', paymentMethod);\r\n      console.log('Use Wallet:', paymentMethod === 'wallet');\r\n      console.log('Booking Request:', bookingRequest);\r\n\r\n      const response = await api.post('/member/bookings', bookingRequest);\r\n\r\n      console.log('=== PaymentPage Debug ===');\r\n      console.log('API Response:', response.data);\r\n      console.log('Booking Details:', bookingDetails);\r\n\r\n      navigate('/booking/confirmation', {\r\n        state: {\r\n          booking: {\r\n            ...response.data,\r\n            slotDate: bookingDetails.date,\r\n            startTime: bookingDetails.startTime,\r\n            endTime: bookingDetails.endTime,\r\n            durationHours: bookingDetails.durationHours,\r\n            totalAmount: bookingDetails.price,\r\n            numPaddles: bookingDetails.numPaddles,\r\n            buyBallSet: bookingDetails.buyBallSet,\r\n            numberOfPlayers: bookingDetails.numberOfPlayers,\r\n            courtName: bookingDetails.courtName,\r\n            courtLocation: bookingDetails.courtLocation,\r\n            venueName: bookingDetails.venueName,\r\n            venueLocation: bookingDetails.venueLocation,\r\n            pointsEarned: response.data.pointsEarned,\r\n            currentPointBalance: response.data.currentPointBalance\r\n          }\r\n        }\r\n      });\r\n    } catch (err) {\r\n      const errorMessage = err.response?.data?.message || 'Payment failed. Please try again.';\r\n\r\n      if (errorMessage.includes('Insufficient wallet balance')) {\r\n        setError('Your wallet balance is too low. Please top up and try again.');\r\n      } else {\r\n        setError(errorMessage);\r\n      }\r\n\r\n      setIsProcessing(false);\r\n    }\r\n  };\r\n\r\n  if (!bookingDetails) {\r\n    return (\r\n      <Container sx={{ py: 4, textAlign: 'center' }}>\r\n        <Typography variant=\"h5\" gutterBottom>\r\n          Booking information not available\r\n        </Typography>\r\n        <Button variant=\"contained\" onClick={() => navigate('/courts')}>\r\n          Browse Courts\r\n        </Button>\r\n      </Container>\r\n    );\r\n  }\r\n\r\n  const formatTime = (time) => {\r\n    return new Date(`1970-01-01T${time}:00`).toLocaleTimeString([],\r\n      { hour: '2-digit', minute: '2-digit' });\r\n  };\r\n\r\n  const PADDLE_PRICE = 5;\r\n  const BALL_SET_PRICE = 12;\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\" sx={{ py: 4 }}>\r\n      {/* Header */}\r\n      <Box sx={{ textAlign: 'center', mb: 4 }}>\r\n        <PaymentIcon sx={{ fontSize: 48, color: '#1976d2', mb: 2 }} />\r\n        <Typography variant=\"h4\" gutterBottom sx={{ fontWeight: 'bold', color: '#1976d2' }}>\r\n          Complete Payment\r\n        </Typography>\r\n        <Typography variant=\"body1\" color=\"text.secondary\">\r\n          Review your booking and choose payment method\r\n        </Typography>\r\n      </Box>\r\n\r\n      <Box sx={{ \r\n        display: 'flex', \r\n        flexDirection: { xs: 'column', md: 'row' }, \r\n        gap: 3, \r\n        minHeight: '600px' \r\n      }}>\r\n        {/* Left Column - Booking Summary */}\r\n        <Box sx={{ flex: { xs: 'none', md: 1 } }}>\r\n          <ThemedCard sx={{ borderRadius: 3, boxShadow: 2, height: '100%' }}>\r\n            <CardContent sx={{ p: 4 }}>\r\n              <Typography variant=\"h5\" gutterBottom sx={{ fontWeight: 'bold', color: '#1976d2', mb: 3 }}>\r\n                \uD83D\uDCCB Booking Summary\r\n              </Typography>\r\n\r\n              {/* Court & Venue Info */}\r\n              <Box sx={{ display: 'flex', alignItems: 'center', mb: 3 }}>\r\n                <SportsIcon sx={{ color: '#1976d2', mr: 1, fontSize: 28 }} />\r\n                <Box>\r\n                  <Typography variant=\"h6\" sx={{ fontWeight: 'bold', color: '#1976d2' }}>\r\n                    {bookingDetails.courtName}\r\n                  </Typography>\r\n                  <Typography variant=\"body2\" color=\"text.secondary\">\r\n                    {bookingDetails.venueName}{bookingDetails.venueLocation ? `，${bookingDetails.venueLocation}` : ''}\r\n                  </Typography>\r\n                </Box>\r\n              </Box>\r\n\r\n              {/* Date & Time */}\r\n              <Box sx={{ display: 'flex', alignItems: 'center', mb: 3 }}>\r\n                <AccessTimeIcon sx={{ color: '#1976d2', mr: 1, fontSize: 28 }} />\r\n                <Box>\r\n                  <Typography variant=\"h6\" sx={{ fontWeight: 'bold' }}>\r\n                    {bookingDetails.date}\r\n                  </Typography>\r\n                  <Typography variant=\"body2\" color=\"text.secondary\">\r\n                    {formatTime(bookingDetails.startTime)} - {formatTime(bookingDetails.endTime)} ({bookingDetails.durationHours}h)\r\n                  </Typography>\r\n                </Box>\r\n              </Box>\r\n\r\n              {/* Players & Equipment */}\r\n              <Divider sx={{ my: 2 }} />\r\n              <Typography variant=\"h6\" gutterBottom sx={{ fontWeight: 'bold', color: '#424242' }}>\r\n                \uD83D\uDC65 Players & Equipment\r\n              </Typography>\r\n              \r\n              <Grid container spacing={2}>\r\n                <Grid item xs={12} sm={4}>\r\n                  <Box sx={{ textAlign: 'center', p: 2, backgroundColor: '#f5f5f5', borderRadius: 2 }}>\r\n                    <GroupIcon sx={{ color: '#1976d2', fontSize: 32, mb: 1 }} />\r\n                    <Typography variant=\"h6\" sx={{ fontWeight: 'bold' }}>\r\n                      {bookingDetails.numberOfPlayers}\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" color=\"text.secondary\">\r\n                      Players\r\n                    </Typography>\r\n                  </Box>\r\n                </Grid>\r\n                \r\n                <Grid item xs={12} sm={4}>\r\n                  <Box sx={{ textAlign: 'center', p: 2, backgroundColor: '#f5f5f5', borderRadius: 2 }}>\r\n                    <SportsIcon sx={{ color: '#9c27b0', fontSize: 32, mb: 1 }} />\r\n                    <Typography variant=\"h6\" sx={{ fontWeight: 'bold' }}>\r\n                      {bookingDetails.numPaddles}\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" color=\"text.secondary\">\r\n                      Paddles (RM{PADDLE_PRICE} each)\r\n                    </Typography>\r\n                  </Box>\r\n                </Grid>\r\n                \r\n                <Grid item xs={12} sm={4}>\r\n                  <Box sx={{ textAlign: 'center', p: 2, backgroundColor: '#f5f5f5', borderRadius: 2 }}>\r\n                    <SportsIcon sx={{ color: '#4caf50', fontSize: 32, mb: 1 }} />\r\n                    <Typography variant=\"h6\" sx={{ fontWeight: 'bold' }}>\r\n                      {bookingDetails.buyBallSet ? 'Yes' : 'No'}\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" color=\"text.secondary\">\r\n                      Ball Set (RM{BALL_SET_PRICE})\r\n                    </Typography>\r\n                  </Box>\r\n                </Grid>\r\n              </Grid>\r\n            </CardContent>\r\n          </ThemedCard>\r\n        </Box>\r\n\r\n        {/* Right Column - Payment */}\r\n        <Box sx={{ flex: { xs: 'none', md: 1 } }}>\r\n          <ThemedCard sx={{ borderRadius: 3, boxShadow: 2, height: '100%' }}>\r\n            <CardContent sx={{ p: 4 }}>\r\n              <Typography variant=\"h5\" gutterBottom sx={{ fontWeight: 'bold', color: '#2e7d32', mb: 3 }}>\r\n                \uD83D\uDCB3 Payment Details\r\n              </Typography>\r\n\r\n              {/* Total Amount */}\r\n              <Paper \r\n                elevation={0}\r\n                sx={{ \r\n                  background: 'linear-gradient(135deg, #e8f5e9 0%, #c8e6c9 100%)',\r\n                  p: 3,\r\n                  mb: 3,\r\n                  borderRadius: 2,\r\n                  border: '2px solid #4caf50'\r\n                }}\r\n              >\r\n                <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n                  <Typography variant=\"h6\" sx={{ fontWeight: 'bold' }}>\r\n                    Total Amount:\r\n                  </Typography>\r\n                  <Typography variant=\"h4\" sx={{ fontWeight: 'bold', color: '#2e7d32' }}>\r\n                    RM{bookingDetails.price.toFixed(2)}\r\n                  </Typography>\r\n                </Box>\r\n              </Paper>\r\n\r\n              {/* Payment Method Selection */}\r\n              <FormControl component=\"fieldset\" fullWidth sx={{ mb: 3 }}>\r\n                <FormLabel component=\"legend\" sx={{ mb: 2, fontWeight: 'bold', color: '#424242' }}>\r\n                  Select Payment Method\r\n                </FormLabel>\r\n                <RadioGroup\r\n                  value={paymentMethod}\r\n                  onChange={(e) => setPaymentMethod(e.target.value)}\r\n                >\r\n                  {/* Wallet Option */}\r\n                  <ThemedCard \r\n                    variant=\"outlined\" \r\n                    sx={{ \r\n                      mb: 2, \r\n                      borderRadius: 2,\r\n                      border: paymentMethod === 'wallet' ? '2px solid #1976d2' : '1px solid #e0e0e0',\r\n                      backgroundColor: paymentMethod === 'wallet' ? '#f3f8ff' : 'transparent'\r\n                    }}\r\n                  >\r\n                    <FormControlLabel\r\n                      value=\"wallet\"\r\n                      control={<Radio color=\"primary\" />}\r\n                      label={\r\n                        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', width: '100%', p: 1 }}>\r\n                          <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                            <AccountBalanceWalletIcon sx={{ color: '#1976d2', mr: 1 }} />\r\n                            <Typography sx={{ fontWeight: 'bold' }}>SuperBadge Wallet</Typography>\r\n                          </Box>\r\n                          {isLoading ? (\r\n                            <CircularProgress size={20} />\r\n                          ) : error ? (\r\n                            <Typography color=\"error\">Error</Typography>\r\n                          ) : (\r\n                            <Typography fontWeight=\"bold\" color=\"#1976d2\">\r\n                              RM{walletBalance.toFixed(2)}\r\n                            </Typography>\r\n                          )}\r\n                        </Box>\r\n                      }\r\n                      sx={{ p: 2, width: '100%' }}\r\n                    />\r\n                  </ThemedCard>\r\n\r\n                  {/* Credit Card Option */}\r\n                  <ThemedCard \r\n                    variant=\"outlined\" \r\n                    sx={{ \r\n                      borderRadius: 2,\r\n                      border: paymentMethod === 'card' ? '2px solid #1976d2' : '1px solid #e0e0e0',\r\n                      backgroundColor: paymentMethod === 'card' ? '#f3f8ff' : 'transparent'\r\n                    }}\r\n                  >\r\n                    <FormControlLabel\r\n                      value=\"card\"\r\n                      control={<Radio color=\"primary\" />}\r\n                      label={\r\n                        <Box sx={{ display: 'flex', alignItems: 'center', p: 1 }}>\r\n                          <CreditCardIcon sx={{ color: '#1976d2', mr: 1 }} />\r\n                          <Typography sx={{ fontWeight: 'bold' }}>Credit/Debit Card</Typography>\r\n                        </Box>\r\n                      }\r\n                      sx={{ p: 2, width: '100%' }}\r\n                    />\r\n                  </ThemedCard>\r\n                </RadioGroup>\r\n              </FormControl>\r\n\r\n              {/* Insufficient Balance Warning */}\r\n              {paymentMethod === 'wallet' && walletBalance < bookingDetails.price && !isLoading && (\r\n                <Alert severity=\"warning\" sx={{ mb: 3 }}>\r\n                  <Typography variant=\"body2\" sx={{ mb: 1 }}>\r\n                    Insufficient wallet balance. You need RM{(bookingDetails.price - walletBalance).toFixed(2)} more.\r\n                  </Typography>\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    size=\"small\"\r\n                    onClick={() => navigate('/wallet/topup')}\r\n                    sx={{\r\n                      backgroundColor: '#ff9800',\r\n                      '&:hover': {\r\n                        backgroundColor: '#f57c00'\r\n                      }\r\n                    }}\r\n                  >\r\n                    Top Up Wallet\r\n                  </Button>\r\n                </Alert>\r\n              )}\r\n\r\n              {/* Error Alert */}\r\n              {error && (\r\n                <Alert severity=\"error\" sx={{ mb: 3 }}>\r\n                  {error}\r\n                </Alert>\r\n              )}\r\n\r\n              {/* Action Buttons */}\r\n              <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  fullWidth\r\n                  size=\"large\"\r\n                  onClick={handlePayment}\r\n                  disabled={\r\n                    isProcessing ||\r\n                    (paymentMethod === 'wallet' && walletBalance < bookingDetails.price) ||\r\n                    isLoading\r\n                  }\r\n                  sx={{\r\n                    py: 2,\r\n                    backgroundColor: '#4caf50',\r\n                    borderRadius: 2,\r\n                    fontSize: '1.1rem',\r\n                    fontWeight: 'bold',\r\n                    '&:hover': {\r\n                      backgroundColor: '#2e7d32'\r\n                    },\r\n                    '&:disabled': {\r\n                      backgroundColor: '#e0e0e0'\r\n                    }\r\n                  }}\r\n                >\r\n                  {isProcessing ? (\r\n                    <CircularProgress size={24} color=\"inherit\" />\r\n                  ) : (\r\n                    `Pay RM${bookingDetails.price.toFixed(2)}`\r\n                  )}\r\n                </Button>\r\n\r\n                <Button\r\n                  variant=\"outlined\"\r\n                  fullWidth\r\n                  size=\"large\"\r\n                  onClick={() => navigate(-1)}\r\n                  sx={{ \r\n                    py: 2, \r\n                    borderRadius: 2,\r\n                    borderColor: '#757575',\r\n                    color: '#757575',\r\n                    '&:hover': {\r\n                      borderColor: '#424242',\r\n                      backgroundColor: '#f5f5f5'\r\n                    }\r\n                  }}\r\n                >\r\n                  Back to Booking\r\n                </Button>\r\n              </Box>\r\n            </CardContent>\r\n          </ThemedCard>\r\n        </Box>\r\n      </Box>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default PaymentPage;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball-frontend/src/components/court/PaymentPage.jsx b/pickleball-frontend/src/components/court/PaymentPage.jsx
--- a/pickleball-frontend/src/components/court/PaymentPage.jsx	(revision 89327e12854b108d004ebb020d0592b1c618ecaf)
+++ b/pickleball-frontend/src/components/court/PaymentPage.jsx	(date 1754174945508)
@@ -16,7 +16,11 @@
   CircularProgress,
   Alert,
   Chip,
-  Paper
+  Paper,
+  Select,
+  MenuItem,
+  Checkbox,
+  FormControlLabel as MuiFormControlLabel
 } from '@mui/material';
 import { useLocation, useNavigate } from 'react-router-dom';
 import PaymentIcon from '@mui/icons-material/Payment';
@@ -26,8 +30,10 @@
 import AccessTimeIcon from '@mui/icons-material/AccessTime';
 import SportsIcon from '@mui/icons-material/Sports';
 import GroupIcon from '@mui/icons-material/Group';
+import LocalOfferIcon from '@mui/icons-material/LocalOffer';
 import api from '../../api/axiosConfig.js';
 import { getWalletBalance, initializeWallet } from '../../service/WalletService';
+import { VoucherService } from '../../service/VoucherService';
 import { useAuth } from '../../context/AuthContext';
 import ThemedCard from '../common/ThemedCard';
 
@@ -35,19 +41,113 @@
   const location = useLocation();
   const navigate = useNavigate();
   const bookingDetails = location.state?.bookingDetails;
+  const sessionGroup = location.state?.sessionGroup;
+  const session = location.state?.session;
+  
+  // 檢查是否有 replacement session 支付數據
+  const replacementSessionPayment = localStorage.getItem('replacementSessionPayment');
+  const replacementData = replacementSessionPayment ? JSON.parse(replacementSessionPayment) : null;
+  
+  // 確定支付數據來源
+  const paymentData = bookingDetails || sessionGroup || session || replacementData;
+  
+  // 調試信息
+  console.log('=== PaymentPage Debug ===');
+  console.log('location.state:', location.state);
+  console.log('bookingDetails:', bookingDetails);
+  console.log('sessionGroup:', sessionGroup);
+  console.log('session:', session);
+  console.log('replacementData:', replacementData);
+  console.log('paymentData:', paymentData);
+  
+  // 詳細檢查 session 對象
+  if (session) {
+    console.log('Session details:');
+    console.log('- id:', session.id);
+    console.log('- title:', session.title);
+    console.log('- price:', session.price);
+    console.log('- startTime:', session.startTime);
+    console.log('- endTime:', session.endTime);
+    console.log('- startTime type:', typeof session.startTime);
+    console.log('- endTime type:', typeof session.endTime);
+    if (session.startTime) {
+      console.log('- startTime parsed:', new Date(session.startTime));
+      console.log('- startTime valid:', !isNaN(new Date(session.startTime).getTime()));
+    }
+    if (session.endTime) {
+      console.log('- endTime parsed:', new Date(session.endTime));
+      console.log('- endTime valid:', !isNaN(new Date(session.endTime).getTime()));
+    }
+    console.log('- coach:', session.coach);
+    console.log('- coachName:', session.coachName);
+    console.log('- court:', session.court);
+    console.log('- venue:', session.venue);
+    console.log('- venueName:', session.venueName);
+    console.log('- All session keys:', Object.keys(session));
+  }
+  
+  if (sessionGroup) {
+    console.log('SessionGroup details:');
+    console.log('- length:', sessionGroup.length);
+    console.log('- first session:', sessionGroup[0]);
+  }
+  
   const [paymentMethod, setPaymentMethod] = useState('wallet');
   const [walletBalance, setWalletBalance] = useState(0);
   const [isLoading, setIsLoading] = useState(true);
   const [error, setError] = useState(null);
   const [isProcessing, setIsProcessing] = useState(false);
+  const [useVoucher, setUseVoucher] = useState(false);
+  const [availableVouchers, setAvailableVouchers] = useState([]);
+  const [selectedVoucherId, setSelectedVoucherId] = useState(null);
+  
+  // Class session 設備選項
+  const [numPaddles, setNumPaddles] = useState(0);
+  const [buyBallSet, setBuyBallSet] = useState(false);
+  
   const { authToken } = useAuth();
 
+  // 定義常量
+  const PADDLE_PRICE = 5;
+  const BALL_SET_PRICE = 12;
+
+  // 計算初始金額
+  const getInitialAmount = () => {
+    let baseAmount = 0;
+    
+    if (sessionGroup) {
+      // 對於 sessionGroup，計算所有課程的總價
+      baseAmount = sessionGroup.reduce((sum, sess) => sum + (sess.price || 0), 0);
+    } else if (session) {
+      // 對於單個 session，使用其價格
+      baseAmount = session.price || 0;
+    } else if (replacementData) {
+      // 對於 replacement session，使用 amount
+      baseAmount = replacementData.amount || 0;
+    } else if (paymentData) {
+      // 對於其他情況，使用 price 或 amount
+      baseAmount = paymentData.price || paymentData.amount || 0;
+    }
+    
+    // 添加設備費用（只在 class session 時）
+    if (sessionGroup || session) {
+      const paddleCost = numPaddles * PADDLE_PRICE;
+      const ballCost = buyBallSet ? BALL_SET_PRICE : 0;
+      baseAmount += paddleCost + ballCost;
+    }
+    
+    return baseAmount;
+  };
+
+  const [discountedAmount, setDiscountedAmount] = useState(getInitialAmount());
+
   useEffect(() => {
-    const fetchWalletBalance = async () => {
+    const fetchData = async () => {
       try {
         setIsLoading(true);
+        
+        // Fetch wallet balance
         let balance;
-
         try {
           balance = await getWalletBalance();
         } catch (getError) {
@@ -55,70 +155,184 @@
           await initializeWallet();
           balance = await getWalletBalance();
         }
-
         setWalletBalance(balance);
+
+        // Fetch available vouchers
+        try {
+          const vouchers = await VoucherService.getActiveVouchers();
+          console.log('=== PaymentPage Debug ===');
+          console.log('Fetched active vouchers:', vouchers);
+          setAvailableVouchers(vouchers);
+        } catch (voucherError) {
+          console.warn('Failed to fetch active vouchers:', voucherError);
+          console.error('Voucher error details:', voucherError.response?.data);
+          setAvailableVouchers([]);
+        }
+
       } catch (err) {
-        console.error('Wallet balance error:', err);
-        setError('Failed to load wallet balance: ' + err.message);
+        console.error('Data loading error:', err);
+        setError('Failed to load data: ' + err.message);
       } finally {
         setIsLoading(false);
       }
     };
 
-    fetchWalletBalance();
+    fetchData();
   }, []);
 
+  // Calculate discounted amount when voucher selection changes
+  useEffect(() => {
+    if (useVoucher && selectedVoucherId) {
+      const selectedVoucher = availableVouchers.find(v => v.id === selectedVoucherId);
+      if (selectedVoucher) {
+        let originalPrice = getInitialAmount();
+        let newAmount = originalPrice;
+        if (selectedVoucher.discountType === 'percentage') {
+          newAmount = originalPrice * (1 - selectedVoucher.discountValue / 100);
+        } else {
+          newAmount = Math.max(0, originalPrice - selectedVoucher.discountValue);
+        }
+        setDiscountedAmount(newAmount);
+      }
+    } else {
+      setDiscountedAmount(getInitialAmount());
+    }
+  }, [useVoucher, selectedVoucherId, availableVouchers, sessionGroup, session, replacementData, paymentData, numPaddles, buyBallSet]);
+
   const handlePayment = async () => {
-    if (!bookingDetails) {
-      setError('Booking details missing');
+    if (!paymentData) {
+      setError('Payment details missing');
       return;
     }
 
     try {
       setIsProcessing(true);
 
-      const bookingRequest = {
-        slotIds: bookingDetails.slotIds,
-        purpose: bookingDetails.purpose,
-        numberOfPlayers: bookingDetails.numberOfPlayers,
-        numPaddles: bookingDetails.numPaddles,
-        buyBallSet: bookingDetails.buyBallSet,
-        durationHours: bookingDetails.durationHours,
-        useWallet: paymentMethod === 'wallet'
-      };
+      // 根據支付類型構建請求
+      let apiEndpoint = '/member/bookings';
+      let requestData = {};
+      
+      if (replacementData) {
+        // Replacement session payment
+        apiEndpoint = '/member/replacement-session-payment';
+        requestData = {
+          sessionId: replacementData.sessionId,
+          amount: replacementData.amount,
+          useWallet: paymentMethod === 'wallet',
+          useVoucher: useVoucher,
+          voucherRedemptionId: selectedVoucherId
+        };
+      } else if (sessionGroup || session) {
+        // Class session registration
+        if (sessionGroup) {
+          // 對於 sessionGroup，使用批量註冊端點
+          apiEndpoint = '/class-sessions/register-multi';
+          requestData = {
+            sessionIds: sessionGroup.map(s => s.id),
+            paymentMethod: paymentMethod === 'wallet' ? 'wallet' : 'card',
+            numPaddles: numPaddles,
+            buyBallSet: buyBallSet
+          };
+        } else {
+          // 對於單個 session
+          apiEndpoint = `/class-sessions/${session.id}/register`;
+          requestData = {
+            useWallet: paymentMethod === 'wallet',
+            useVoucher: useVoucher,
+            voucherRedemptionId: selectedVoucherId,
+            numPaddles: numPaddles,
+            buyBallSet: buyBallSet
+          };
+        }
+      } else {
+        // Regular court booking
+        requestData = {
+          slotIds: paymentData.slotIds,
+          purpose: paymentData.purpose,
+          numberOfPlayers: paymentData.numberOfPlayers,
+          numPaddles: paymentData.numPaddles,
+          buyBallSet: paymentData.buyBallSet,
+          durationHours: paymentData.durationHours,
+          useWallet: paymentMethod === 'wallet',
+          useVoucher: useVoucher,
+          voucherRedemptionId: selectedVoucherId
+        };
+      }
 
       console.log('=== PaymentPage Debug ===');
       console.log('Payment Method:', paymentMethod);
       console.log('Use Wallet:', paymentMethod === 'wallet');
-      console.log('Booking Request:', bookingRequest);
+      console.log('Use Voucher:', useVoucher);
+      console.log('Selected Voucher ID:', selectedVoucherId);
+      console.log('Request Data:', requestData);
+      console.log('API Endpoint:', apiEndpoint);
+      console.log('Available Vouchers:', availableVouchers);
+      if (selectedVoucherId) {
+        const selectedVoucher = availableVouchers.find(v => v.id === selectedVoucherId);
+        console.log('Selected Voucher Details:', selectedVoucher);
+      }
 
-      const response = await api.post('/member/bookings', bookingRequest);
+      const response = await api.post(apiEndpoint, requestData);
 
       console.log('=== PaymentPage Debug ===');
       console.log('API Response:', response.data);
       console.log('Booking Details:', bookingDetails);
 
-      navigate('/booking/confirmation', {
-        state: {
-          booking: {
-            ...response.data,
-            slotDate: bookingDetails.date,
-            startTime: bookingDetails.startTime,
-            endTime: bookingDetails.endTime,
-            durationHours: bookingDetails.durationHours,
-            totalAmount: bookingDetails.price,
-            numPaddles: bookingDetails.numPaddles,
-            buyBallSet: bookingDetails.buyBallSet,
-            numberOfPlayers: bookingDetails.numberOfPlayers,
-            courtName: bookingDetails.courtName,
-            courtLocation: bookingDetails.courtLocation,
-            venueName: bookingDetails.venueName,
-            venueLocation: bookingDetails.venueLocation,
-            pointsEarned: response.data.pointsEarned,
-            currentPointBalance: response.data.currentPointBalance
-          }
-        }
-      });
+      // 根據支付類型決定導航目標
+      if (replacementData) {
+        // Replacement session - 清除 localStorage 並導航到教練儀表板
+        localStorage.removeItem('replacementSessionPayment');
+        navigate('/coach/dashboard', {
+          state: {
+            message: 'Replacement session payment completed successfully!',
+            paymentResult: response.data
+          }
+        });
+      } else if (sessionGroup || session) {
+        // Class session - 導航到課程確認頁面
+        navigate('/booking/confirmation', {
+          state: {
+            booking: {
+              type: 'class-session',
+              sessions: sessionGroup || [session],
+              totalAmount: response.data.totalAmount,
+              pointsEarned: response.data.pointsEarned,
+              numPaddles: numPaddles,
+              buyBallSet: buyBallSet,
+              registrationDate: new Date().toISOString(),
+              currentTierPointBalance: response.data.currentTierPointBalance,
+              currentRewardPointBalance: response.data.currentRewardPointBalance,
+              paymentMethod: paymentMethod === 'wallet' ? 'WALLET' : 'CREDIT_CARD',
+              paymentStatus: 'COMPLETED'
+            }
+          }
+        });
+      } else {
+        // Regular court booking
+        navigate('/booking/confirmation', {
+          state: {
+            booking: {
+              ...response.data,
+              slotDate: paymentData.date,
+              startTime: paymentData.startTime,
+              endTime: paymentData.endTime,
+              durationHours: paymentData.durationHours,
+              totalAmount: response.data.totalAmount,
+              price: paymentData.price,
+              numPaddles: paymentData.numPaddles,
+              buyBallSet: paymentData.buyBallSet,
+              numberOfPlayers: paymentData.numberOfPlayers,
+              courtName: paymentData.courtName,
+              courtLocation: paymentData.courtLocation,
+              venueName: paymentData.venueName,
+              venueLocation: paymentData.venueLocation,
+              pointsEarned: response.data.pointsEarned,
+              currentTierPointBalance: response.data.currentTierPointBalance,
+              currentRewardPointBalance: response.data.currentRewardPointBalance
+            }
+          }
+        });
+      }
     } catch (err) {
       const errorMessage = err.response?.data?.message || 'Payment failed. Please try again.';
 
@@ -132,11 +346,11 @@
     }
   };
 
-  if (!bookingDetails) {
+  if (!paymentData) {
     return (
       <Container sx={{ py: 4, textAlign: 'center' }}>
         <Typography variant="h5" gutterBottom>
-          Booking information not available
+          Payment information not available
         </Typography>
         <Button variant="contained" onClick={() => navigate('/courts')}>
           Browse Courts
@@ -150,9 +364,6 @@
       { hour: '2-digit', minute: '2-digit' });
   };
 
-  const PADDLE_PRICE = 5;
-  const BALL_SET_PRICE = 12;
-
   return (
     <Container maxWidth="lg" sx={{ py: 4 }}>
       {/* Header */}
@@ -180,75 +391,239 @@
                 📋 Booking Summary
               </Typography>
 
-              {/* Court & Venue Info */}
-              <Box sx={{ display: 'flex', alignItems: 'center', mb: 3 }}>
-                <SportsIcon sx={{ color: '#1976d2', mr: 1, fontSize: 28 }} />
-                <Box>
-                  <Typography variant="h6" sx={{ fontWeight: 'bold', color: '#1976d2' }}>
-                    {bookingDetails.courtName}
-                  </Typography>
-                  <Typography variant="body2" color="text.secondary">
-                    {bookingDetails.venueName}{bookingDetails.venueLocation ? `，${bookingDetails.venueLocation}` : ''}
-                  </Typography>
-                </Box>
-              </Box>
+                            {/* Court & Venue Info - 只在非 class session 時顯示 */}
+              {!sessionGroup && !session && (
+                <Box sx={{ display: 'flex', alignItems: 'center', mb: 3 }}>
+                  <SportsIcon sx={{ color: '#1976d2', mr: 1, fontSize: 28 }} />
+                  <Box>
+                    <Typography variant="h6" sx={{ fontWeight: 'bold', color: '#1976d2' }}>
+                      {replacementData ? replacementData.courtName : 
+                       paymentData.courtName}
+                    </Typography>
+                    <Typography variant="body2" color="text.secondary">
+                      {replacementData ? replacementData.venueName : 
+                       paymentData.venueName}
+                    </Typography>
+                  </Box>
+                </Box>
+              )}
 
-              {/* Date & Time */}
-              <Box sx={{ display: 'flex', alignItems: 'center', mb: 3 }}>
-                <AccessTimeIcon sx={{ color: '#1976d2', mr: 1, fontSize: 28 }} />
-                <Box>
-                  <Typography variant="h6" sx={{ fontWeight: 'bold' }}>
-                    {bookingDetails.date}
-                  </Typography>
-                  <Typography variant="body2" color="text.secondary">
-                    {formatTime(bookingDetails.startTime)} - {formatTime(bookingDetails.endTime)} ({bookingDetails.durationHours}h)
-                  </Typography>
-                </Box>
-              </Box>
+              {/* Date & Time - 只在非 class session 時顯示 */}
+              {!sessionGroup && !session && (
+                <Box sx={{ display: 'flex', alignItems: 'center', mb: 3 }}>
+                  <AccessTimeIcon sx={{ color: '#1976d2', mr: 1, fontSize: 28 }} />
+                  <Box>
+                    <Typography variant="h6" sx={{ fontWeight: 'bold' }}>
+                      {replacementData ? new Date(replacementData.startTime).toLocaleDateString() :
+                       paymentData.date}
+                    </Typography>
+                    <Typography variant="body2" color="text.secondary">
+                      {replacementData ? 
+                        `${new Date(replacementData.startTime).toLocaleTimeString([], {hour: '2-digit', minute: '2-digit'})} - ${new Date(replacementData.endTime).toLocaleTimeString([], {hour: '2-digit', minute: '2-digit'})} (${replacementData.duration}h)` :
+                         `${formatTime(paymentData.startTime)} - ${formatTime(paymentData.endTime)} (${paymentData.durationHours}h)`}
+                    </Typography>
+                  </Box>
+                </Box>
+              )}
 
-              {/* Players & Equipment */}
-              <Divider sx={{ my: 2 }} />
-              <Typography variant="h6" gutterBottom sx={{ fontWeight: 'bold', color: '#424242' }}>
-                👥 Players & Equipment
-              </Typography>
-              
-              <Grid container spacing={2}>
-                <Grid item xs={12} sm={4}>
-                  <Box sx={{ textAlign: 'center', p: 2, backgroundColor: '#f5f5f5', borderRadius: 2 }}>
-                    <GroupIcon sx={{ color: '#1976d2', fontSize: 32, mb: 1 }} />
-                    <Typography variant="h6" sx={{ fontWeight: 'bold' }}>
-                      {bookingDetails.numberOfPlayers}
-                    </Typography>
-                    <Typography variant="body2" color="text.secondary">
-                      Players
-                    </Typography>
-                  </Box>
-                </Grid>
-                
-                <Grid item xs={12} sm={4}>
-                  <Box sx={{ textAlign: 'center', p: 2, backgroundColor: '#f5f5f5', borderRadius: 2 }}>
-                    <SportsIcon sx={{ color: '#9c27b0', fontSize: 32, mb: 1 }} />
-                    <Typography variant="h6" sx={{ fontWeight: 'bold' }}>
-                      {bookingDetails.numPaddles}
-                    </Typography>
-                    <Typography variant="body2" color="text.secondary">
-                      Paddles (RM{PADDLE_PRICE} each)
-                    </Typography>
-                  </Box>
-                </Grid>
-                
-                <Grid item xs={12} sm={4}>
-                  <Box sx={{ textAlign: 'center', p: 2, backgroundColor: '#f5f5f5', borderRadius: 2 }}>
-                    <SportsIcon sx={{ color: '#4caf50', fontSize: 32, mb: 1 }} />
-                    <Typography variant="h6" sx={{ fontWeight: 'bold' }}>
-                      {bookingDetails.buyBallSet ? 'Yes' : 'No'}
-                    </Typography>
-                    <Typography variant="body2" color="text.secondary">
-                      Ball Set (RM{BALL_SET_PRICE})
-                    </Typography>
-                  </Box>
-                </Grid>
-              </Grid>
+              {/* Players & Equipment - 只在 court booking 時顯示 */}
+              {!replacementData && !sessionGroup && !session && (
+                <>
+                  <Divider sx={{ my: 2 }} />
+                  <Typography variant="h6" gutterBottom sx={{ fontWeight: 'bold', color: '#424242' }}>
+                    👥 Players & Equipment
+                  </Typography>
+                  
+                  <Grid container spacing={2}>
+                    <Grid item xs={12} sm={4}>
+                      <Box sx={{ textAlign: 'center', p: 2, backgroundColor: '#f5f5f5', borderRadius: 2 }}>
+                        <GroupIcon sx={{ color: '#1976d2', fontSize: 32, mb: 1 }} />
+                        <Typography variant="h6" sx={{ fontWeight: 'bold' }}>
+                          {paymentData.numberOfPlayers}
+                        </Typography>
+                        <Typography variant="body2" color="text.secondary">
+                          Players
+                        </Typography>
+                      </Box>
+                    </Grid>
+                    
+                    <Grid item xs={12} sm={4}>
+                      <Box sx={{ textAlign: 'center', p: 2, backgroundColor: '#f5f5f5', borderRadius: 2 }}>
+                        <SportsIcon sx={{ color: '#9c27b0', fontSize: 32, mb: 1 }} />
+                        <Typography variant="h6" sx={{ fontWeight: 'bold' }}>
+                          {paymentData.numPaddles}
+                        </Typography>
+                        <Typography variant="body2" color="text.secondary">
+                          Paddles (RM{PADDLE_PRICE} each)
+                        </Typography>
+                      </Box>
+                    </Grid>
+                    
+                    <Grid item xs={12} sm={4}>
+                      <Box sx={{ textAlign: 'center', p: 2, backgroundColor: '#f5f5f5', borderRadius: 2 }}>
+                        <SportsIcon sx={{ color: '#4caf50', fontSize: 32, mb: 1 }} />
+                        <Typography variant="h6" sx={{ fontWeight: 'bold' }}>
+                          {paymentData.buyBallSet ? 'Yes' : 'No'}
+                        </Typography>
+                        <Typography variant="body2" color="text.secondary">
+                          Ball Set (RM{BALL_SET_PRICE})
+                        </Typography>
+                      </Box>
+                    </Grid>
+                  </Grid>
+                </>
+              )}
+
+              {/* Class Session Info - 只在 class session 時顯示 */}
+              {(sessionGroup || session) && (
+                <>
+                  <Divider sx={{ my: 2 }} />
+                  <Typography variant="h6" gutterBottom sx={{ fontWeight: 'bold', color: '#424242' }}>
+                    🎓 Class Session Details
+                  </Typography>
+                  
+                  <Box sx={{ p: 2, backgroundColor: '#f5f5f5', borderRadius: 2 }}>
+                    <Typography variant="h6" sx={{ fontWeight: 'bold', color: '#1976d2' }}>
+                      {sessionGroup ? sessionGroup[0]?.title || sessionGroup[0]?.type : session.title}
+                    </Typography>
+                    <Typography variant="body2" color="text.secondary" sx={{ mt: 1 }}>
+                      {sessionGroup ? sessionGroup[0]?.description : session.description}
+                    </Typography>
+                    <Typography variant="body2" sx={{ mt: 1, fontWeight: 'bold' }}>
+                      Coach: {sessionGroup ? sessionGroup[0]?.coach?.name || sessionGroup[0]?.coachName : session.coach?.name || session.coachName}
+                    </Typography>
+                    
+                    {/* 顯示場地和場館信息 */}
+                    <Typography variant="body2" sx={{ mt: 1 }}>
+                      Venue: {sessionGroup ? 
+                        (sessionGroup[0]?.venue?.name || sessionGroup[0]?.venueName || sessionGroup[0]?.venue || 'Not specified') : 
+                        (session.venue?.name || session.venueName || session.venue || 'Not specified')}
+                    </Typography>
+                    <Typography variant="body2" sx={{ mt: 1 }}>
+                      Court: {sessionGroup ? 
+                        (sessionGroup[0]?.court?.name || sessionGroup[0]?.courtName || sessionGroup[0]?.court || 'Not specified') : 
+                        (session.court?.name || session.courtName || session.court || 'Not specified')}
+                    </Typography>
+                    
+                    {/* 顯示日期和時間信息 */}
+                    <Typography variant="body2" sx={{ mt: 1 }}>
+                      Date: {sessionGroup ? 
+                        (sessionGroup[0]?.startTime ? new Date(sessionGroup[0].startTime).toLocaleDateString() : 
+                         sessionGroup[0]?.date ? sessionGroup[0].date : 'Not specified') :
+                        (session.startTime ? new Date(session.startTime).toLocaleDateString() : 
+                         session.date ? session.date : 'Not specified')}
+                    </Typography>
+                    <Typography variant="body2" sx={{ mt: 1 }}>
+                      Time: {sessionGroup ? 
+                        (sessionGroup[0]?.startTime && sessionGroup[0]?.endTime ? 
+                          `${new Date(sessionGroup[0].startTime).toLocaleTimeString([], {hour: '2-digit', minute: '2-digit'})} - ${new Date(sessionGroup[0].endTime).toLocaleTimeString([], {hour: '2-digit', minute: '2-digit'})}` :
+                         sessionGroup[0]?.time ? sessionGroup[0].time : 'Not specified') :
+                        (session.startTime && session.endTime ? 
+                          `${new Date(session.startTime).toLocaleTimeString([], {hour: '2-digit', minute: '2-digit'})} - ${new Date(session.endTime).toLocaleTimeString([], {hour: '2-digit', minute: '2-digit'})}` :
+                         session.time ? session.time : 'Not specified')}
+                    </Typography>
+                  </Box>
+                  
+                  {/* Class Session 設備選項 */}
+                  <Divider sx={{ my: 2 }} />
+                  <Typography variant="h6" gutterBottom sx={{ fontWeight: 'bold', color: '#424242' }}>
+                    🏓 Equipment Options
+                  </Typography>
+                  
+                  <Grid container spacing={2}>
+                    <Grid item xs={12} sm={6}>
+                      <Box sx={{ p: 2, backgroundColor: '#f5f5f5', borderRadius: 2 }}>
+                        <Typography variant="body1" sx={{ fontWeight: 'bold', mb: 1 }}>
+                          Paddles (RM{PADDLE_PRICE} each)
+                        </Typography>
+                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
+                          <Button
+                            size="small"
+                            variant={numPaddles > 0 ? "contained" : "outlined"}
+                            onClick={() => setNumPaddles(Math.max(0, numPaddles - 1))}
+                          >
+                            -
+                          </Button>
+                          <Typography sx={{ minWidth: 30, textAlign: 'center' }}>
+                            {numPaddles}
+                          </Typography>
+                          <Button
+                            size="small"
+                            variant="contained"
+                            onClick={() => setNumPaddles(numPaddles + 1)}
+                          >
+                            +
+                          </Button>
+                        </Box>
+                      </Box>
+                    </Grid>
+                    
+                    <Grid item xs={12} sm={6}>
+                      <Box sx={{ p: 2, backgroundColor: '#f5f5f5', borderRadius: 2 }}>
+                        <Typography variant="body1" sx={{ fontWeight: 'bold', mb: 1 }}>
+                          Ball Set (RM{BALL_SET_PRICE})
+                        </Typography>
+                        <FormControlLabel
+                          control={
+                            <Checkbox
+                              checked={buyBallSet}
+                              onChange={(e) => setBuyBallSet(e.target.checked)}
+                              color="primary"
+                            />
+                          }
+                          label="Add ball set"
+                        />
+                      </Box>
+                    </Grid>
+                  </Grid>
+                  
+                  {/* 設備費用摘要 */}
+                  {(numPaddles > 0 || buyBallSet) && (
+                    <Box sx={{ mt: 2, p: 2, backgroundColor: '#e3f2fd', borderRadius: 2 }}>
+                      <Typography variant="body2" sx={{ fontWeight: 'bold', mb: 1 }}>
+                        Equipment Summary:
+                      </Typography>
+                      {numPaddles > 0 && (
+                        <Typography variant="body2">
+                          Paddles: {numPaddles} × RM{PADDLE_PRICE} = RM{(numPaddles * PADDLE_PRICE).toFixed(2)}
+                        </Typography>
+                      )}
+                      {buyBallSet && (
+                        <Typography variant="body2">
+                          Ball Set: RM{BALL_SET_PRICE.toFixed(2)}
+                        </Typography>
+                      )}
+                      <Typography variant="body2" sx={{ fontWeight: 'bold', mt: 1 }}>
+                        Total Equipment: RM{((numPaddles * PADDLE_PRICE) + (buyBallSet ? BALL_SET_PRICE : 0)).toFixed(2)}
+                      </Typography>
+                    </Box>
+                  )}
+                </>
+              )}
+
+              {/* Replacement Session Info - 只在 replacement session 時顯示 */}
+              {replacementData && (
+                <>
+                  <Divider sx={{ my: 2 }} />
+                  <Typography variant="h6" gutterBottom sx={{ fontWeight: 'bold', color: '#424242' }}>
+                    🔄 Replacement Session Details
+                  </Typography>
+                  
+                  <Box sx={{ p: 2, backgroundColor: '#f5f5f5', borderRadius: 2 }}>
+                    <Typography variant="h6" sx={{ fontWeight: 'bold', color: '#1976d2' }}>
+                      {replacementData.description}
+                    </Typography>
+                    <Typography variant="body2" sx={{ mt: 1, fontWeight: 'bold' }}>
+                      Student Count: {replacementData.studentCount}
+                    </Typography>
+                    {replacementData.studentName && (
+                      <Typography variant="body2" sx={{ mt: 1 }}>
+                        Student: {replacementData.studentName}
+                      </Typography>
+                    )}
+                  </Box>
+                </>
+              )}
             </CardContent>
           </ThemedCard>
         </Box>
@@ -272,14 +647,46 @@
                   border: '2px solid #4caf50'
                 }}
               >
-                <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
+                <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>
                   <Typography variant="h6" sx={{ fontWeight: 'bold' }}>
                     Total Amount:
                   </Typography>
                   <Typography variant="h4" sx={{ fontWeight: 'bold', color: '#2e7d32' }}>
-                    RM{bookingDetails.price.toFixed(2)}
+                    RM{discountedAmount.toFixed(2)}
                   </Typography>
                 </Box>
+                
+                {/* 費用明細 - 只在 class session 時顯示 */}
+                {(sessionGroup || session) && (
+                  <Box sx={{ mt: 2, pt: 2, borderTop: '1px solid #e0e0e0' }}>
+                    <Typography variant="body2" sx={{ display: 'flex', justifyContent: 'space-between', mb: 0.5 }}>
+                      <span>Class Fee:</span>
+                      <span>RM{(sessionGroup ? sessionGroup.reduce((sum, sess) => sum + (sess.price || 0), 0) : session.price || 0).toFixed(2)}</span>
+                    </Typography>
+                    {numPaddles > 0 && (
+                      <Typography variant="body2" sx={{ display: 'flex', justifyContent: 'space-between', mb: 0.5 }}>
+                        <span>Paddles ({numPaddles}):</span>
+                        <span>RM{(numPaddles * PADDLE_PRICE).toFixed(2)}</span>
+                      </Typography>
+                    )}
+                    {buyBallSet && (
+                      <Typography variant="body2" sx={{ display: 'flex', justifyContent: 'space-between', mb: 0.5 }}>
+                        <span>Ball Set:</span>
+                        <span>RM{BALL_SET_PRICE.toFixed(2)}</span>
+                      </Typography>
+                    )}
+                  </Box>
+                )}
+                {useVoucher && selectedVoucherId && (
+                  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
+                    <Typography variant="body2" color="text.secondary">
+                      Original Price:
+                    </Typography>
+                    <Typography variant="body2" color="text.secondary" sx={{ textDecoration: 'line-through' }}>
+                      RM{(paymentData?.price || paymentData?.amount || 0).toFixed(2)}
+                    </Typography>
+                  </Box>
+                )}
               </Paper>
 
               {/* Payment Method Selection */}
@@ -348,12 +755,157 @@
                   </ThemedCard>
                 </RadioGroup>
               </FormControl>
+
+               {/* Voucher Selection - 只在 court booking 時顯示 */}
+               {!replacementData && !sessionGroup && !session && (
+                 <Box sx={{ mb: 3 }}>
+                   <Typography variant="h6" sx={{ mb: 2, fontWeight: 'bold', color: '#424242' }}>
+                     <LocalOfferIcon sx={{ mr: 1, color: '#ff9800' }} />
+                     Vouchers & Discounts
+                   </Typography>
+
+                   {/* Available Active Vouchers */}
+                   {availableVouchers.length > 0 && (
+                     <Box sx={{ mb: 3 }}>
+                       <Typography variant="subtitle1" sx={{ mb: 1, fontWeight: 'bold', color: '#2e7d32' }}>
+                         Your Active Vouchers ({availableVouchers.length})
+                       </Typography>
+                       <MuiFormControlLabel
+                         control={
+                           <Checkbox
+                             checked={useVoucher}
+                             onChange={(e) => {
+                               setUseVoucher(e.target.checked);
+                               if (!e.target.checked) {
+                                 setSelectedVoucherId(null);
+                               }
+                             }}
+                             color="primary"
+                           />
+                         }
+                         label={
+                           <Box sx={{ display: 'flex', alignItems: 'center' }}>
+                             <Typography sx={{ fontWeight: 'bold' }}>Use Active Voucher</Typography>
+                           </Box>
+                         }
+                       />
+                       
+                       {useVoucher && (
+                         <FormControl fullWidth sx={{ mt: 2 }}>
+                           <Select
+                             value={selectedVoucherId || ''}
+                             onChange={(e) => setSelectedVoucherId(e.target.value)}
+                             displayEmpty
+                             sx={{ borderRadius: 2 }}
+                           >
+                             <MenuItem value="" disabled>
+                               Choose an active voucher...
+                             </MenuItem>
+                             {availableVouchers.map((voucher) => (
+                               <MenuItem key={voucher.id} value={voucher.id}>
+                                 <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', width: '100%' }}>
+                                   <Box>
+                                     <Typography variant="body1" sx={{ fontWeight: 'bold' }}>
+                                       {voucher.voucherTitle || `Voucher ${voucher.voucherCode}`}
+                                     </Typography>
+                                     <Typography variant="body2" color="text.secondary">
+                                       {voucher.discountType === 'percentage' 
+                                         ? `${voucher.discountValue}% off` 
+                                         : `RM${voucher.discountValue} off`}
+                                     </Typography>
+                                   </Box>
+                                   <Chip 
+                                     label={`Expires: ${new Date(voucher.expiryDate).toLocaleDateString()}`}
+                                     size="small"
+                                     color="warning"
+                                   />
+                                 </Box>
+                               </MenuItem>
+                             ))}
+                           </Select>
+                         </FormControl>
+                       )}
+                     </Box>
+                   )}
+
+                   {/* No Active Vouchers - Show Browse Button */}
+                   {availableVouchers.length === 0 && (
+                     <Box sx={{ textAlign: 'center', p: 3, backgroundColor: '#fff3e0', borderRadius: 2, border: '1px solid #ffb74d' }}>
+                       <LocalOfferIcon sx={{ fontSize: 48, color: '#ff9800', mb: 2 }} />
+                       <Typography variant="body1" sx={{ mb: 1, fontWeight: 'bold' }}>
+                         No active vouchers
+                       </Typography>
+                       <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
+                         You don't have any active vouchers to use for this booking.
+                       </Typography>
+                       <Button
+                         variant="contained"
+                         onClick={() => navigate('/profile/redeem-voucher')}
+                         sx={{
+                           backgroundColor: '#ff9800',
+                           '&:hover': {
+                             backgroundColor: '#f57c00'
+                           }
+                         }}
+                       >
+                         Browse & Redeem Vouchers
+                       </Button>
+                     </Box>
+                   )}
+
+                   {/* Always show browse button if user has active vouchers */}
+                   {availableVouchers.length > 0 && (
+                     <Box sx={{ textAlign: 'center', mt: 2 }}>
+                       <Button
+                         variant="outlined"
+                         onClick={() => {
+                           console.log('Browse More Vouchers button clicked');
+                           console.log('Navigating to /profile/redeem-voucher');
+                           navigate('/profile/redeem-voucher');
+                         }}
+                         sx={{
+                           borderColor: '#ff9800',
+                           color: '#ff9800',
+                           '&:hover': {
+                             borderColor: '#f57c00',
+                             backgroundColor: '#fff3e0'
+                           }
+                         }}
+                       >
+                         Browse More Vouchers
+                       </Button>
+                     </Box>
+                   )}
+                 </Box>
+               )}
+
+               {/* Class Session Notice - 只在 class session 時顯示 */}
+               {(sessionGroup || session) && (
+                 <Box sx={{ mb: 3 }}>
+                   <Alert severity="info" sx={{ mb: 2 }}>
+                     <Typography variant="body2">
+                       <strong>Note:</strong> Vouchers cannot be used for class session bookings.
+                     </Typography>
+                   </Alert>
+                 </Box>
+               )}
+
+               {/* Replacement Session Notice - 只在 replacement session 時顯示 */}
+               {replacementData && (
+                 <Box sx={{ mb: 3 }}>
+                   <Alert severity="info" sx={{ mb: 2 }}>
+                     <Typography variant="body2">
+                       <strong>Note:</strong> Vouchers cannot be used for replacement session payments.
+                     </Typography>
+                   </Alert>
+                 </Box>
+               )}
 
               {/* Insufficient Balance Warning */}
-              {paymentMethod === 'wallet' && walletBalance < bookingDetails.price && !isLoading && (
+              {paymentMethod === 'wallet' && walletBalance < discountedAmount && !isLoading && (
                 <Alert severity="warning" sx={{ mb: 3 }}>
                   <Typography variant="body2" sx={{ mb: 1 }}>
-                    Insufficient wallet balance. You need RM{(bookingDetails.price - walletBalance).toFixed(2)} more.
+                    Insufficient wallet balance. You need RM{(discountedAmount - walletBalance).toFixed(2)} more.
                   </Typography>
                   <Button
                     variant="contained"
@@ -387,8 +939,9 @@
                   onClick={handlePayment}
                   disabled={
                     isProcessing ||
-                    (paymentMethod === 'wallet' && walletBalance < bookingDetails.price) ||
-                    isLoading
+                    (paymentMethod === 'wallet' && walletBalance < discountedAmount) ||
+                    isLoading ||
+                    (!replacementData && !sessionGroup && !session && useVoucher && !selectedVoucherId)
                   }
                   sx={{
                     py: 2,
@@ -407,7 +960,7 @@
                   {isProcessing ? (
                     <CircularProgress size={24} color="inherit" />
                   ) : (
-                    `Pay RM${bookingDetails.price.toFixed(2)}`
+                    `Pay RM${discountedAmount.toFixed(2)}`
                   )}
                 </Button>
 
Index: pickleball-frontend/src/components/coach/CoachingDashboard.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Box,\r\n  Drawer,\r\n  AppBar,\r\n  Toolbar,\r\n  List,\r\n  Typography,\r\n  Divider,\r\n  IconButton,\r\n  ListItem,\r\n  ListItemButton,\r\n  ListItemIcon,\r\n  ListItemText,\r\n  Grid,\r\n  Card,\r\n  CardContent,\r\n  CardActions,\r\n  Button,\r\n  Avatar,\r\n  Chip,\r\n  LinearProgress,\r\n  Paper,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  TextField,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Badge,\r\n  Tabs,\r\n  Tab,\r\n  Collapse,\r\n  Snackbar,\r\n  Alert,\r\n  CircularProgress,\r\n  useTheme\r\n} from '@mui/material';\r\nimport {\r\n  Menu as MenuIcon,\r\n  Dashboard,\r\n  People,\r\n  Schedule,\r\n  Assessment,\r\n  Settings,\r\n  Notifications,\r\n  Add,\r\n  Edit,\r\n  Delete,\r\n  Star,\r\n  TrendingUp,\r\n  CalendarToday,\r\n  Person,\r\n  FitnessCenter,\r\n  Message,\r\n  School,\r\n  AttachMoney,\r\n  CheckCircle,\r\n  Receipt,\r\n  AccountBalanceWallet,\r\n  TrendingDown,\r\n  AccountBalance\r\n} from '@mui/icons-material';\r\nimport CoachScheduleManagement from './CoachScheduleManagement';\r\nimport MessagingPage from '../messaging/MessagingPage';\r\nimport CoachService from '../../service/CoachService';\r\nimport LeaveRequestService from '../../service/LeaveRequestService';\r\nimport { useAuth } from '../../context/AuthContext';\r\nimport api from '../../api/axiosConfig';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport StudentManagementSystem from './StudentManagementSystem';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport ClassSessionService from '../../service/ClassSessionService';\r\nimport { DateTimePicker, LocalizationProvider } from '@mui/x-date-pickers';\r\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\r\n\r\nconst drawerWidth = 240;\r\n\r\nexport default function CoachingDashboard() {\r\n  const theme = useTheme();\r\n  const [mobileOpen, setMobileOpen] = useState(false);\r\n  const [selectedTab, setSelectedTab] = useState('dashboard');\r\n  const [openDialog, setOpenDialog] = useState(false);\r\n  const [dialogType, setDialogType] = useState('');\r\n  const [scheduleTab, setScheduleTab] = useState(0);\r\n  const [sessions, setSessions] = useState([]); // <-- real session data\r\n  const [loadingSessions, setLoadingSessions] = useState(false);\r\n  const [sessionError, setSessionError] = useState('');\r\n  const [expandedGroups, setExpandedGroups] = useState([]); // for expand/collapse\r\n  const { currentUser, logout, hasRole } = useAuth();\r\n  const navigate = useNavigate();\r\n  const [showUserMenu, setShowUserMenu] = useState(false);\r\n  const [studentList, setStudentList] = useState([]);\r\n  const [loadingStudents, setLoadingStudents] = useState(false);\r\n  const [studentError, setStudentError] = useState('');\r\n  const [unreadMessages, setUnreadMessages] = useState(0);\r\n  const [leaveRequests, setLeaveRequests] = useState([]);\r\n  const [pendingRequestCount, setPendingRequestCount] = useState(0);\r\n  const [unattendedClasses, setUnattendedClasses] = useState([]);\r\n  const [unattendedClassesCount, setUnattendedClassesCount] = useState(0);\r\n  // Add these two lines to fix no-undef error\r\n  const coachInitial = currentUser?.username?.charAt(0)?.toUpperCase() || 'C';\r\n  const coachName = currentUser?.username || 'Coach';\r\n\r\n  // 新增：獲取教練收入歷史\r\n  const [incomeHistory, setIncomeHistory] = useState([]);\r\n  const [incomeLoading, setIncomeLoading] = useState(false);\r\n  const [walletTransactions, setWalletTransactions] = useState([]);\r\n  const [walletLoading, setWalletLoading] = useState(false);\r\n  const [showWalletTransactions, setShowWalletTransactions] = useState(false);\r\n  const [walletBalance, setWalletBalance] = useState(null);\r\n  const [revenueStatus, setRevenueStatus] = useState([]);\r\n  const [revenueLoading, setRevenueLoading] = useState(false);\r\n\r\n  const fetchIncomeHistory = async () => {\r\n    try {\r\n      setIncomeLoading(true);\r\n      const response = await fetch('http://localhost:8081/api/coach/income-history', {\r\n        headers: {\r\n          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\r\n        }\r\n      });\r\n      \r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        setIncomeHistory(data.incomeHistory || []);\r\n        console.log('Income history:', data);\r\n      } else {\r\n        console.error('Failed to fetch income history');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching income history:', error);\r\n    } finally {\r\n      setIncomeLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchWalletBalance = async () => {\r\n    try {\r\n      console.log('=== Fetching wallet balance ===');\r\n      const response = await CoachService.getWalletBalance();\r\n      console.log('Wallet balance response:', response);\r\n      setWalletBalance(response);\r\n    } catch (error) {\r\n      console.error('Failed to fetch wallet balance:', error);\r\n      console.error('Error response:', error.response?.data);\r\n      console.error('Error status:', error.response?.status);\r\n      \r\n      // 如果錢包餘額獲取失敗，設置默認值\r\n      setWalletBalance({\r\n        balance: 0.00,\r\n        coachName: 'Unknown',\r\n        walletStatus: 'UNKNOWN'\r\n      });\r\n    }\r\n  };\r\n\r\n  const fetchWalletTransactions = async () => {\r\n    try {\r\n      setWalletLoading(true);\r\n      const response = await CoachService.getWalletTransactions();\r\n      setWalletTransactions(response.transactions || []);\r\n    } catch (error) {\r\n      console.error('Failed to fetch wallet transactions:', error);\r\n    } finally {\r\n      setWalletLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchRevenueStatus = async () => {\r\n    try {\r\n      setRevenueLoading(true);\r\n      const response = await api.get('/coach/revenue-status');\r\n      setRevenueStatus(response.data.revenueStatus || []);\r\n    } catch (error) {\r\n      console.error('Failed to fetch revenue status:', error);\r\n    } finally {\r\n      setRevenueLoading(false);\r\n    }\r\n  };\r\n\r\n  // 在組件加載時獲取收入歷史和錢包餘額\r\n  useEffect(() => {\r\n    if (currentUser?.id) {\r\n      fetchIncomeHistory();\r\n      fetchWalletBalance();\r\n    }\r\n  }, [currentUser?.id]);\r\n\r\n  // 新增：获取学生数据\r\n  const fetchStudents = async () => {\r\n    try {\r\n      setLoadingStudents(true);\r\n      const studentsData = await CoachService.getAllStudents();\r\n      console.log('Fetched students data:', studentsData);\r\n      setStudentList(studentsData);\r\n      \r\n      // 更新dashboard统计\r\n      setDashboardStats(prev => ({\r\n        ...prev,\r\n        totalStudents: studentsData.length\r\n      }));\r\n    } catch (error) {\r\n      console.error('Error fetching students:', error);\r\n      setStudentError('Failed to load students');\r\n    } finally {\r\n      setLoadingStudents(false);\r\n    }\r\n  };\r\n\r\n  // 獲取未讀訊息數量\r\n  const fetchUnreadMessages = async () => {\r\n    try {\r\n      const token = localStorage.getItem('authToken');\r\n      const response = await fetch('http://localhost:8081/api/messages/previews', {\r\n        headers: {\r\n          'Authorization': `Bearer ${token}`,\r\n          'Content-Type': 'application/json'\r\n        }\r\n      });\r\n      \r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        const unreadCount = data.reduce((total, preview) => total + (preview.unreadCount || 0), 0);\r\n        setUnreadMessages(unreadCount);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching unread messages:', error);\r\n    }\r\n  };\r\n\r\n  // 獲取補課請求\r\n  const fetchLeaveRequests = async () => {\r\n    try {\r\n      if (currentUser && currentUser.id) {\r\n        console.log('=== fetchLeaveRequests ===');\r\n        console.log('Current user ID:', currentUser.id);\r\n        const data = await LeaveRequestService.getPendingRequestsByCoach(currentUser.id);\r\n        console.log('Fetched leave requests data:', data);\r\n        console.log('Number of requests:', data.length);\r\n        \r\n        // 調試每個請求的場地信息\r\n        data.forEach((request, index) => {\r\n          console.log(`Request ${index + 1} venue info:`, {\r\n            venue: request.venue,\r\n            state: request.state,\r\n            court: request.court,\r\n            originalSessionTitle: request.originalSessionTitle\r\n          });\r\n        });\r\n        \r\n        setLeaveRequests(data);\r\n        setPendingRequestCount(data.length);\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to fetch leave requests:', error);\r\n    }\r\n  };\r\n  const [showMakeupDialog, setShowMakeupDialog] = useState(false);\r\n  const [makeupSessionData, setMakeupSessionData] = useState({\r\n    title: '',\r\n    description: '',\r\n    venueId: '',\r\n    courtId: '',\r\n    startTime: '',\r\n    endTime: '',\r\n    maxParticipants: 6,\r\n    price: '',\r\n    slotType: 'COACH_SESSION'\r\n  });\r\n  const [makeupOriginSession, setMakeupOriginSession] = useState(null);\r\n  const [showForceCancelDialog, setShowForceCancelDialog] = useState(false);\r\n  const [forceCancelSessionId, setForceCancelSessionId] = useState(null);\r\n  const [cancelReason, setCancelReason] = useState('');\r\n  const [cancelSuccess, setCancelSuccess] = useState(false);\r\n  const [cancelMessage, setCancelMessage] = useState('');\r\n  const [cancelledSessionObj, setCancelledSessionObj] = useState(null);\r\n  const [busySlots, setBusySlots] = useState([]);\r\n  const [replacementClasses, setReplacementClasses] = useState([]);\r\n\r\n  // 新增：Dashboard 數據計算\r\n  const [dashboardStats, setDashboardStats] = useState({\r\n    totalStudents: 0,\r\n    todaySessions: 0,\r\n    completionRate: 0,\r\n    averageRating: 0\r\n  });\r\n\r\n  const [todaySessionsList, setTodaySessionsList] = useState([]);\r\n  const [studentProgressList, setStudentProgressList] = useState([]);\r\n\r\n  // 當 Dialog 開啟且有選擇場地時，fetch busy slots\r\n  useEffect(() => {\r\n    if (showMakeupDialog && makeupSessionData.courtId && makeupSessionData.startTime) {\r\n      // 只查詢選擇日期那天的 busy slots\r\n      const date = new Date(makeupSessionData.startTime);\r\n      const dateStr = date.toISOString().slice(0, 10);\r\n      CoachService.getAvailableTimes(makeupSessionData.courtId, dateStr).then(setBusySlots);\r\n    }\r\n  }, [showMakeupDialog, makeupSessionData.courtId, makeupSessionData.startTime]);\r\n\r\n  // 获取学生数据\r\n  useEffect(() => {\r\n    if (currentUser?.id) {\r\n      fetchStudents();\r\n    }\r\n  }, [currentUser?.id]);\r\n\r\n  // 判斷某個日期是否整天都被booked\r\n  const isDateFullyBooked = (date) => {\r\n    if (!busySlots || busySlots.length === 0) return false;\r\n    return busySlots.some(slot => {\r\n      const start = new Date(slot.start);\r\n      const end = new Date(slot.end);\r\n      return (\r\n        start.toDateString() === date.toDateString() &&\r\n        end.toDateString() === date.toDateString() &&\r\n        end - start >= 24 * 60 * 60 * 1000 // 一整天\r\n      );\r\n    });\r\n  };\r\n  // 判斷某個時間是否被booked\r\n  const isTimeBooked = (date) => {\r\n    if (!busySlots || busySlots.length === 0) return false;\r\n    return busySlots.some(slot => {\r\n      const start = new Date(slot.start);\r\n      const end = new Date(slot.end);\r\n      return date >= start && date < end;\r\n    });\r\n  };\r\n\r\n  // Fetch coach's class sessions for the current month on mount\r\n  useEffect(() => {\r\n    const fetchSessions = async () => {\r\n      setLoadingSessions(true);\r\n      setSessionError('');\r\n      try {\r\n        // 先調用調試端點\r\n        const debugData = await CoachService.getDebugSessions();\r\n        console.log('Debug data:', debugData);\r\n        \r\n        // Fetch all sessions: use a very early start and far future end\r\n        const start = new Date(2000, 0, 1, 0, 0, 0); // Jan 1, 2000\r\n        const end = new Date(2100, 11, 31, 23, 59, 59); // Dec 31, 2100\r\n        const data = await CoachService.getScheduleWithRegistrations(start.toISOString(), end.toISOString());\r\n        console.log('Fetched sessions data:', data); // 調試信息\r\n        setSessions(Array.isArray(data) ? data : []);\r\n      } catch (err) {\r\n        console.error('Error fetching sessions:', err); // 調試信息\r\n        setSessionError('Failed to load sessions.');\r\n      } finally {\r\n        setLoadingSessions(false);\r\n      }\r\n    };\r\n    fetchSessions();\r\n  }, []);\r\n\r\n  // Fetch replacement classes\r\n  useEffect(() => {\r\n    const fetchReplacements = async () => {\r\n      try {\r\n        if (currentUser && currentUser.id) {\r\n          const data = await ClassSessionService.getReplacementClasses(currentUser.id);\r\n          setReplacementClasses(Array.isArray(data) ? data : []);\r\n        }\r\n      } catch (err) {\r\n        console.error('Failed to load replacement classes:', err);\r\n      }\r\n    };\r\n    fetchReplacements();\r\n  }, [currentUser]);\r\n\r\n  // Fetch unread messages count\r\n  useEffect(() => {\r\n    fetchUnreadMessages();\r\n  }, []);\r\n\r\n  // Fetch leave requests\r\n  useEffect(() => {\r\n    fetchLeaveRequests();\r\n  }, [currentUser]);\r\n\r\n  // Fetch unattended classes\r\n  useEffect(() => {\r\n    fetchUnattendedClasses();\r\n  }, [sessions]);\r\n\r\n  const fetchUnattendedClasses = async () => {\r\n    try {\r\n      if (!sessions || sessions.length === 0) return;\r\n      \r\n      const today = new Date();\r\n      const todayStr = today.toISOString().slice(0, 10);\r\n      \r\n      // 過濾出今天的課程，且還沒有記錄出勤的\r\n      const unattended = sessions.filter(session => {\r\n        const sessionDate = new Date(session.startTime).toISOString().slice(0, 10);\r\n        const isToday = sessionDate === todayStr;\r\n        \r\n        // 檢查是否有學生註冊且沒有記錄出勤\r\n        const hasRegistrations = session.registrations && session.registrations.length > 0;\r\n        const hasUnrecordedAttendance = hasRegistrations && session.registrations.some(reg => \r\n          !reg.attendanceStatus || reg.attendanceStatus === 'NOT_RECORDED' || reg.attendanceStatus === null\r\n        );\r\n        \r\n        // 課程狀態檢查\r\n        const isCompleted = session.status === 'completed' || session.status === 'COMPLETED';\r\n        const isCancelled = session.status === 'cancelled' || session.status === 'CANCELLED';\r\n        \r\n        console.log('Session check:', {\r\n          sessionId: session.id,\r\n          sessionDate,\r\n          isToday,\r\n          hasRegistrations,\r\n          hasUnrecordedAttendance,\r\n          isCompleted,\r\n          isCancelled,\r\n          registrations: session.registrations\r\n        });\r\n        \r\n        return isToday && hasRegistrations && hasUnrecordedAttendance && !isCompleted && !isCancelled;\r\n      });\r\n      \r\n      setUnattendedClasses(unattended);\r\n      setUnattendedClassesCount(unattended.length);\r\n      \r\n      console.log('Unattended classes:', unattended);\r\n    } catch (error) {\r\n      console.error('Error fetching unattended classes:', error);\r\n    }\r\n  };\r\n\r\n  // Fetch courts and venues data\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        console.log('=== Fetching courts and venues ===');\r\n        \r\n          // 獲取認證令牌\r\n          const token = localStorage.getItem('authToken');\r\n          const headers = token ? { Authorization: `Bearer ${token}` } : {};\r\n          \r\n        console.log('Using token:', token ? 'Token exists' : 'No token');\r\n        \r\n        // 強制使用教練專用的 API\r\n        let courtsResponse, venuesResponse;\r\n        \r\n        try {\r\n          console.log('Trying coach endpoints...');\r\n          [courtsResponse, venuesResponse] = await Promise.all([\r\n            api.get('/coach/all-courts', { headers }),\r\n            api.get('/coach/all-venues', { headers })\r\n          ]);\r\n          console.log('Successfully fetched from coach endpoints');\r\n        } catch (coachError) {\r\n          console.error('Coach endpoints failed:', coachError.response?.status, coachError.response?.data);\r\n          \r\n          // 如果教練端點失敗，嘗試公開的 API\r\n          try {\r\n            console.log('Trying public endpoints...');\r\n          [courtsResponse, venuesResponse] = await Promise.all([\r\n              api.get('/courts'),\r\n              api.get('/venues')\r\n          ]);\r\n          console.log('Successfully fetched from public endpoints');\r\n          } catch (publicError) {\r\n            console.error('Public endpoints also failed:', publicError.response?.status, publicError.response?.data);\r\n            throw publicError;\r\n          }\r\n        }\r\n        \r\n        console.log('Courts response:', courtsResponse.data);\r\n        console.log('Venues response:', venuesResponse.data);\r\n        \r\n        setCourts(Array.isArray(courtsResponse.data) ? courtsResponse.data : []);\r\n        setVenues(Array.isArray(venuesResponse.data) ? venuesResponse.data : []);\r\n        \r\n        console.log('Set courts:', courtsResponse.data);\r\n        console.log('Set venues:', venuesResponse.data);\r\n      } catch (error) {\r\n        console.error('Failed to fetch data:', error);\r\n        console.error('Error details:', error.response?.data);\r\n        \r\n        // 如果所有 API 都失敗，創建一些測試數據\r\n        console.log('Creating fallback test data');\r\n        const testVenues = [\r\n          { id: 1, name: 'Sunway Arena', state: 'Selangor' },\r\n          { id: 2, name: 'Sports Complex', state: 'Selangor' }\r\n        ];\r\n        \r\n        const testCourts = [\r\n          { id: 1, name: 'Main Court', venue: testVenues[0] },\r\n          { id: 2, name: 'Premium Court', venue: testVenues[1] }\r\n        ];\r\n        \r\n        setVenues(testVenues);\r\n        setCourts(testCourts);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, []);\r\n\r\n  // 計算 Dashboard 統計數據\r\n  useEffect(() => {\r\n    console.log('Sessions data for calculation:', sessions); // 調試信息\r\n    if (sessions.length > 0) {\r\n      // 計算總學生數（去重）- 只計算預訂了教練課程的用戶\r\n      const uniqueStudents = new Set();\r\n      const studentMap = new Map(); // 用於存儲學生詳細信息\r\n      \r\n      console.log('=== DETAILED SESSION ANALYSIS ===');\r\n      console.log('Total sessions to process:', sessions.length);\r\n      console.log('Current user ID:', currentUser?.id);\r\n      console.log('Current user type:', currentUser?.userType);\r\n      console.log('Current user username:', currentUser?.username);\r\n      \r\n      // 只計算屬於當前教練的課程的學生\r\n      sessions.forEach((session, sessionIndex) => {\r\n        console.log(`\\n--- Session ${sessionIndex + 1} ---`);\r\n        console.log('Session ID:', session.id);\r\n        console.log('Session title:', session.title);\r\n        console.log('Session coach ID:', session.coachId);\r\n        console.log('Session coach:', session.coach);\r\n        console.log('Session coach ID (from coach object):', session.coach?.id);\r\n        console.log('Current user ID:', currentUser?.id);\r\n        console.log('Registrations count:', session.registrations?.length || 0);\r\n        \r\n        // 檢查所有課程，不管是否屬於當前教練，先看看數據結構\r\n        if (session.registrations && session.registrations.length > 0) {\r\n          console.log('  \uD83D\uDCCB Found registrations, checking data structure...');\r\n          session.registrations.forEach((reg, regIndex) => {\r\n            console.log(`\\n  Registration ${regIndex + 1} FULL DATA:`, JSON.stringify(reg, null, 2));\r\n            console.log(`  Registration ${regIndex + 1} memberId:`, reg.memberId);\r\n            console.log(`  Registration ${regIndex + 1} id:`, reg.id);\r\n            console.log(`  Registration ${regIndex + 1} userId:`, reg.userId);\r\n            console.log(`  Registration ${regIndex + 1} member:`, reg.member);\r\n            \r\n            // 嘗試不同的字段來獲取 memberId\r\n            const studentId = reg.memberId || reg.member?.id || reg.id || reg.userId;\r\n            console.log(`  Student ID extracted: ${studentId}`);\r\n            \r\n            // 檢查是否屬於當前教練 - 嘗試多種可能的字段\r\n            const sessionCoachId = session.coachId || session.coach?.id;\r\n            const belongsToCurrentCoach = sessionCoachId === currentUser?.id;\r\n            console.log(`  Session coach ID: ${sessionCoachId}`);\r\n            console.log(`  Current user ID: ${currentUser?.id}`);\r\n            console.log(`  Belongs to current coach: ${belongsToCurrentCoach}`);\r\n            \r\n            if (studentId) {\r\n              // 暫時移除教練過濾，先收集所有學生\r\n              uniqueStudents.add(studentId);\r\n              \r\n              // 嘗試獲取用戶名，添加更多調試信息\r\n              const possibleNames = [\r\n                reg.username,\r\n                reg.name,\r\n                reg.memberName,\r\n                reg.userName,\r\n                reg.member?.name,\r\n                reg.member?.username,\r\n                reg.user?.name,\r\n                reg.user?.username\r\n              ];\r\n              const studentName = possibleNames.find(name => name && name.trim() !== '') || 'Unknown Student';\r\n              \r\n              console.log(`  Possible names for student ${studentId}:`, possibleNames);\r\n              console.log(`  Selected name: ${studentName}`);\r\n              \r\n              if (!studentMap.has(studentId)) {\r\n                studentMap.set(studentId, {\r\n                  id: studentId,\r\n                  name: studentName,\r\n                  level: 'Beginner',\r\n                  sessionCount: 1,\r\n                  progress: 0,\r\n                  status: 'active',\r\n                  belongsToCoach: belongsToCurrentCoach // 記錄是否屬於當前教練\r\n                });\r\n                console.log(`  ✅ Added new student: ${studentId} - ${studentName} (belongs to coach: ${belongsToCurrentCoach})`);\r\n              } else {\r\n                const existingStudent = studentMap.get(studentId);\r\n                existingStudent.sessionCount += 1;\r\n                existingStudent.belongsToCoach = existingStudent.belongsToCoach || belongsToCurrentCoach;\r\n                // 如果現有學生名稱是 \"Unknown Student\"，但有新的名稱，則更新\r\n                if (existingStudent.name === 'Unknown Student' && studentName !== 'Unknown Student') {\r\n                  existingStudent.name = studentName;\r\n                }\r\n                console.log(`  ✅ Updated existing student: ${studentId} - ${existingStudent.name}, session count: ${existingStudent.sessionCount} (belongs to coach: ${existingStudent.belongsToCoach})`);\r\n              }\r\n            } else {\r\n              console.log('  ❌ No valid student ID found');\r\n            }\r\n          });\r\n        } else {\r\n          console.log('  ❌ No registrations for this session');\r\n        }\r\n      });\r\n\r\n      console.log('Unique students count:', uniqueStudents.size); // 調試信息\r\n      console.log('Student map size:', studentMap.size); // 調試信息\r\n      console.log('Student IDs:', Array.from(uniqueStudents)); // 調試信息\r\n\r\n      // 計算每個學生的進度\r\n      studentMap.forEach((student, studentId) => {\r\n        const studentSessions = sessions.filter(s => \r\n          s.registrations && s.registrations.some(reg => (reg.memberId || reg.id) === studentId)\r\n        );\r\n        const completedCount = studentSessions.filter(s => s.status === 'COMPLETED').length;\r\n        student.progress = studentSessions.length > 0 ? Math.round((completedCount / studentSessions.length) * 100) : 0;\r\n      });\r\n\r\n      // 設置學生列表（保留原有的session-based计算作为备用）\r\n      // setStudentList(Array.from(studentMap.values()));\r\n\r\n      // 計算近兩天的課程\r\n      const today = new Date();\r\n      const tomorrow = new Date(today);\r\n      tomorrow.setDate(tomorrow.getDate() + 1);\r\n      \r\n      const todayStr = today.toISOString().slice(0, 10);\r\n      const tomorrowStr = tomorrow.toISOString().slice(0, 10);\r\n      \r\n      const upcomingSessions = sessions.filter(session => {\r\n        if (!session.startTime) return false;\r\n        const sessionDate = new Date(session.startTime).toISOString().slice(0, 10);\r\n        return sessionDate === todayStr || sessionDate === tomorrowStr;\r\n      });\r\n\r\n      console.log('Upcoming sessions count:', upcomingSessions.length); // 調試信息\r\n\r\n      // 計算完成率\r\n      const totalSessions = sessions.length;\r\n      const completedSessions = sessions.filter(s => s.status === 'COMPLETED').length;\r\n      const completionRate = totalSessions > 0 ? Math.round((completedSessions / totalSessions) * 100) : 0;\r\n\r\n      console.log('Total sessions:', totalSessions, 'Completed:', completedSessions, 'Rate:', completionRate); // 調試信息\r\n\r\n      // 計算平均評分（暫時設為 4.8，因為沒有評分數據）\r\n      const averageRating = 4.8;\r\n\r\n      // 計算總收入（所有課程的價格總和）\r\n      const totalRevenue = sessions.reduce((sum, session) => {\r\n        const sessionPrice = session.price || 0;\r\n        const studentCount = session.registrations ? session.registrations.length : 0;\r\n        return sum + (sessionPrice * studentCount);\r\n      }, 0);\r\n\r\n      // 只計算屬於當前教練的學生\r\n      const coachStudents = Array.from(studentMap.values()).filter(student => student.belongsToCoach);\r\n      const actualTotalStudents = coachStudents.length;\r\n      \r\n      console.log('=== DEBUG: Student Count ===');\r\n      console.log('All unique students:', uniqueStudents.size);\r\n      console.log('All student map entries:', studentMap.size);\r\n      console.log('Students belonging to current coach:', actualTotalStudents);\r\n      console.log('Coach students:', coachStudents.map(s => ({ id: s.id, name: s.name, belongsToCoach: s.belongsToCoach })));\r\n      console.log('All sessions count:', sessions.length);\r\n      console.log('Sessions with registrations:', sessions.filter(s => s.registrations && s.registrations.length > 0).length);\r\n      \r\n      // 更新dashboard统计（保留session-based计算作为备用，但优先使用API数据）\r\n      const stats = {\r\n        totalStudents: dashboardStats.totalStudents || actualTotalStudents, // 优先使用API数据\r\n        totalSessions: totalSessions, // 總課程數量\r\n        totalRevenue: totalRevenue, // 總收入\r\n        upcomingSessions: upcomingSessions.length, // 即將到來的課程\r\n        completionRate,\r\n        averageRating\r\n      };\r\n      \r\n      console.log('Final stats object:', stats);\r\n      console.log('Setting dashboardStats with totalStudents:', stats.totalStudents);\r\n      \r\n      // 強制重置狀態，確保數據是最新的\r\n      setDashboardStats({\r\n        totalStudents: stats.totalStudents,\r\n        totalSessions: totalSessions,\r\n        totalRevenue: totalRevenue,\r\n        upcomingSessions: upcomingSessions.length,\r\n        completionRate,\r\n        averageRating\r\n      });\r\n      \r\n      console.log('Dashboard stats set successfully');\r\n\r\n      // 設置近兩天的課程列表\r\n      const upcomingSessionsData = upcomingSessions.slice(0, 6).map(session => {\r\n        const sessionDate = new Date(session.startTime);\r\n        const isToday = sessionDate.toISOString().slice(0, 10) === todayStr;\r\n        const dateLabel = isToday ? 'Today' : 'Tomorrow';\r\n        \r\n        return {\r\n          id: session.id,\r\n          date: dateLabel,\r\n          time: session.startTime ? sessionDate.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }) : '-',\r\n          student: session.registrations ? session.registrations.length + ' students' : '0 students',\r\n          type: session.slotType || session.title || 'Session',\r\n          status: session.status || 'Scheduled'\r\n        };\r\n      });\r\n      setTodaySessionsList(upcomingSessionsData);\r\n\r\n      // 設置學生進度列表（使用API数据）\r\n      const studentProgressData = studentList.slice(0, 3).map(student => {\r\n        // 计算学生的实际进度\r\n        let totalSessions = 0;\r\n        let completedSessions = 0;\r\n        \r\n        sessions.forEach(session => {\r\n          if (session.registrations) {\r\n            const studentRegistration = session.registrations.find(reg => \r\n              (reg.memberId || reg.id) === student.id\r\n            );\r\n            if (studentRegistration) {\r\n              totalSessions++;\r\n              // 检查session是否已完成\r\n              const isCompleted = session.status === 'COMPLETED' || \r\n                                 session.status === 'completed' || \r\n                                 session.attendanceTaken === true ||\r\n                                 (session.registrations && session.registrations.some(reg => reg.attendanceStatus));\r\n              if (isCompleted) {\r\n                completedSessions++;\r\n              }\r\n            }\r\n          }\r\n        });\r\n        \r\n        const progress = totalSessions > 0 ? Math.round((completedSessions / totalSessions) * 100) : 0;\r\n        \r\n        return {\r\n          id: student.id,\r\n          name: student.name,\r\n          progress: progress\r\n        };\r\n      });\r\n      setStudentProgressList(studentProgressData);\r\n    } else {\r\n      console.log('No sessions data available'); // 調試信息\r\n      // 設置默認值（保留API获取的学生数量）\r\n      setDashboardStats(prev => ({\r\n        ...prev,\r\n        totalSessions: 0,\r\n        totalRevenue: 0,\r\n        upcomingSessions: 0,\r\n        completionRate: 0,\r\n        averageRating: 4.8\r\n      }));\r\n      setTodaySessionsList([]);\r\n      setStudentProgressList([]);\r\n      // 不重置studentList，因为它是从API获取的\r\n    }\r\n  }, [sessions, studentList]); // 添加studentList作为依赖\r\n\r\n  const handleDrawerToggle = () => {\r\n    setMobileOpen(!mobileOpen);\r\n  };\r\n\r\n  const handleTabChange = (tab) => {\r\n    setSelectedTab(tab);\r\n    // 移除 navigate('/coaching/students')，直接切換 tab\r\n  };\r\n\r\n  const handleOpenDialog = (type) => {\r\n    setDialogType(type);\r\n    setOpenDialog(true);\r\n  };\r\n\r\n  const handleCloseDialog = () => {\r\n    setOpenDialog(false);\r\n    setDialogType('');\r\n  };\r\n\r\n  const handleExpandClick = (groupId) => {\r\n    setExpandedGroups((prev) =>\r\n      prev.includes(groupId) ? prev.filter((id) => id !== groupId) : [...prev, groupId]\r\n    );\r\n  };\r\n\r\n  const handleLogout = () => {\r\n    logout();\r\n    navigate('/login');\r\n  };\r\n\r\n  const menuItems = [\r\n    { text: 'Dashboard', icon: <Dashboard />, value: 'dashboard' },\r\n    { text: 'Student Management', icon: <People />, value: 'students' },\r\n    { text: 'Session Schedule', icon: <Schedule />, value: 'schedule' },\r\n    { text: 'Messages', icon: <Message />, value: 'messages' },\r\n    { text: 'Leave Requests', icon: <Assessment />, value: 'leave-requests' },\r\n    { text: 'Income History', icon: <AttachMoney />, value: 'income' },\r\n    { text: 'Analytics', icon: <Assessment />, value: 'analytics' },\r\n    { text: 'Settings', icon: <Settings />, value: 'settings' }\r\n  ];\r\n\r\n  const drawer = (\r\n    <div>\r\n      <Toolbar>\r\n        <Typography variant=\"h6\" noWrap component=\"div\" sx={{ color: 'primary.main', fontWeight: 'bold' }}>\r\n          Coach System\r\n        </Typography>\r\n      </Toolbar>\r\n      <Divider />\r\n      <List>\r\n        {menuItems.map((item) => (\r\n          <ListItem key={item.value} disablePadding>\r\n            <ListItemButton \r\n              selected={selectedTab === item.value}\r\n              onClick={() => handleTabChange(item.value)}\r\n            >\r\n              <ListItemIcon sx={{ color: selectedTab === item.value ? 'primary.main' : 'inherit' }}>\r\n                {item.icon}\r\n              </ListItemIcon>\r\n              <ListItemText primary={item.text} />\r\n              {item.value === 'messages' && unreadMessages > 0 && (\r\n                <Badge badgeContent={unreadMessages} color=\"error\" sx={{ ml: 1 }} />\r\n              )}\r\n            </ListItemButton>\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n    </div>\r\n  );\r\n\r\n  const renderDashboard = () => (\r\n    <Box>\r\n      <Typography variant=\"h4\" gutterBottom sx={{ mb: 3, fontWeight: 'bold', color: theme.palette.text.primary }}>\r\n        Dashboard Overview\r\n      </Typography>\r\n      \r\n      <Grid container spacing={3} sx={{ mb: 4 }}>\r\n        <Grid item xs={12} sm={6} md={4} lg={2}>\r\n          <Card sx={{ background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)', color: 'white' }}>\r\n            <CardContent>\r\n              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\r\n                <Box>\r\n                  <Typography variant=\"h4\" sx={{ fontWeight: 'bold' }}>{dashboardStats.totalStudents}</Typography>\r\n                  <Typography variant=\"body2\">Total Students</Typography>\r\n                </Box>\r\n                <Person sx={{ fontSize: 40, opacity: 0.8 }} />\r\n              </Box>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n        \r\n        <Grid item xs={12} sm={6} md={4} lg={2}>\r\n          <Card sx={{ background: 'linear-gradient(135deg, #11998e 0%, #38ef7d 100%)', color: 'white' }}>\r\n            <CardContent>\r\n              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\r\n                <Box>\r\n                  <Typography variant=\"h4\" sx={{ fontWeight: 'bold' }}>{dashboardStats.totalSessions}</Typography>\r\n                  <Typography variant=\"body2\">Total Sessions</Typography>\r\n                </Box>\r\n                <School sx={{ fontSize: 40, opacity: 0.8 }} />\r\n              </Box>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n        \r\n        <Grid item xs={12} sm={6} md={4} lg={2}>\r\n          <Card sx={{ background: 'linear-gradient(135deg, #f093fb 0%, #f5576c 100%)', color: 'white' }}>\r\n            <CardContent>\r\n              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\r\n                <Box>\r\n                  <Typography variant=\"h4\" sx={{ fontWeight: 'bold' }}>{dashboardStats.upcomingSessions}</Typography>\r\n                  <Typography variant=\"body2\">Upcoming Sessions</Typography>\r\n                </Box>\r\n                <CalendarToday sx={{ fontSize: 40, opacity: 0.8 }} />\r\n              </Box>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n        \r\n        <Grid item xs={12} sm={6} md={4} lg={2}>\r\n          <Card sx={{ background: 'linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)', color: 'white' }}>\r\n            <CardContent>\r\n              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\r\n                <Box>\r\n                  <Typography variant=\"h4\" sx={{ fontWeight: 'bold' }}>{dashboardStats.completionRate}%</Typography>\r\n                  <Typography variant=\"body2\">Completion Rate</Typography>\r\n                </Box>\r\n                <TrendingUp sx={{ fontSize: 40, opacity: 0.8 }} />\r\n              </Box>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n        \r\n        <Grid item xs={12} sm={6} md={4} lg={2}>\r\n          <Card sx={{ background: 'linear-gradient(135deg, #fa709a 0%, #fee140 100%)', color: 'white' }}>\r\n            <CardContent>\r\n              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\r\n                <Box>\r\n                  <Typography variant=\"h4\" sx={{ fontWeight: 'bold' }}>{dashboardStats.averageRating}</Typography>\r\n                  <Typography variant=\"body2\">Average Rating</Typography>\r\n                </Box>\r\n                <Star sx={{ fontSize: 40, opacity: 0.8 }} />\r\n              </Box>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n        \r\n        <Grid item xs={12} sm={6} md={4} lg={2}>\r\n          <Card sx={{ background: 'linear-gradient(135deg, #ffecd2 0%, #fcb69f 100%)', color: 'white' }}>\r\n            <CardContent>\r\n              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\r\n                <Box>\r\n                  <Typography variant=\"h4\" sx={{ fontWeight: 'bold' }}>RM {dashboardStats.totalRevenue?.toFixed(2) || '0.00'}</Typography>\r\n                  <Typography variant=\"body2\">Total Revenue</Typography>\r\n                </Box>\r\n                <AttachMoney sx={{ fontSize: 40, opacity: 0.8 }} />\r\n              </Box>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      {/* 補課請求提醒 */}\r\n      {pendingRequestCount > 0 && (\r\n        <Card sx={{ \r\n          mb: 3, \r\n          backgroundColor: theme.palette.mode === 'dark' ? '#2d2d2d' : '#fff3cd', \r\n          border: `1px solid ${theme.palette.mode === 'dark' ? '#424242' : '#ffeaa7'}` \r\n        }}>\r\n          <CardContent>\r\n            <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\r\n              <Box display=\"flex\" alignItems=\"center\">\r\n                <Typography variant=\"h6\" sx={{ \r\n                  color: theme.palette.mode === 'dark' ? '#ffb74d' : '#856404', \r\n                  fontWeight: 'bold' \r\n                }}>\r\n                  ⚠\uFE0F Makeup Class Requests ({pendingRequestCount})\r\n                </Typography>\r\n              </Box>\r\n              <Button \r\n                variant=\"contained\" \r\n                color=\"warning\"\r\n                onClick={() => handleTabChange('leave-requests')}\r\n              >\r\n                View Requests\r\n              </Button>\r\n            </Box>\r\n            <Typography variant=\"body2\" sx={{ \r\n              color: theme.palette.mode === 'dark' ? '#ffb74d' : '#856404', \r\n              mt: 1 \r\n            }}>\r\n              You have {pendingRequestCount} pending makeup class request{pendingRequestCount > 1 ? 's' : ''} that need your attention.\r\n            </Typography>\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n\r\n      {/* 出勤記錄提醒 */}\r\n      {unattendedClassesCount > 0 && (\r\n        <Card sx={{ \r\n          mb: 3, \r\n          backgroundColor: theme.palette.mode === 'dark' ? '#1a237e' : '#d1ecf1', \r\n          border: `1px solid ${theme.palette.mode === 'dark' ? '#3949ab' : '#bee5eb'}` \r\n        }}>\r\n          <CardContent>\r\n            <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\r\n              <Box display=\"flex\" alignItems=\"center\">\r\n                <Box display=\"flex\" alignItems=\"center\" gap={1}>\r\n                  <CheckCircle sx={{ color: theme.palette.mode === 'dark' ? '#64b5f6' : '#0c5460' }} />\r\n                  <Typography variant=\"h6\" sx={{ \r\n                    color: theme.palette.mode === 'dark' ? '#64b5f6' : '#0c5460', \r\n                    fontWeight: 'bold' \r\n                  }}>\r\n                    Attendance Not Recorded ({unattendedClassesCount})\r\n                  </Typography>\r\n                </Box>\r\n              </Box>\r\n              <Button \r\n                variant=\"contained\" \r\n                color=\"info\"\r\n                onClick={() => handleTabChange('students')}\r\n              >\r\n                Take Attendance\r\n              </Button>\r\n            </Box>\r\n            <Typography variant=\"body2\" sx={{ \r\n              color: theme.palette.mode === 'dark' ? '#64b5f6' : '#0c5460', \r\n              mt: 1 \r\n            }}>\r\n              You have {unattendedClassesCount} class{unattendedClassesCount > 1 ? 'es' : ''} today that need attendance to be recorded.\r\n            </Typography>\r\n            {/* 顯示具體的課程信息 */}\r\n            <Box sx={{ mt: 2 }}>\r\n              {unattendedClasses.slice(0, 3).map((session, index) => {\r\n                const studentCount = session.registrations ? session.registrations.length : 0;\r\n                const unrecordedCount = session.registrations ? \r\n                  session.registrations.filter(reg => \r\n                    !reg.attendanceStatus || reg.attendanceStatus === 'NOT_RECORDED' || reg.attendanceStatus === null\r\n                  ).length : 0;\r\n                \r\n                return (\r\n                  <Typography key={index} variant=\"body2\" sx={{ \r\n                    color: theme.palette.mode === 'dark' ? '#64b5f6' : '#0c5460', \r\n                    opacity: 0.8 \r\n                  }}>\r\n                    • {new Date(session.startTime).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })} - {session.title || 'Class Session'} ({unrecordedCount}/{studentCount} students)\r\n                  </Typography>\r\n                );\r\n              })}\r\n              {unattendedClasses.length > 3 && (\r\n                <Typography variant=\"body2\" sx={{ \r\n                  color: theme.palette.mode === 'dark' ? '#64b5f6' : '#0c5460', \r\n                  opacity: 0.8 \r\n                }}>\r\n                  • ... and {unattendedClasses.length - 3} more\r\n                </Typography>\r\n              )}\r\n            </Box>\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n\r\n      <Grid container spacing={3}>\r\n        <Grid item xs={12} md={8}>\r\n          <Card>\r\n            <CardContent>\r\n              <Typography variant=\"h6\" gutterBottom sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n                <Schedule color=\"primary\" />\r\n                Upcoming Sessions (Next 2 Days)\r\n              </Typography>\r\n              <TableContainer>\r\n                <Table>\r\n                  <TableHead>\r\n                    <TableRow>\r\n                      <TableCell>Date</TableCell>\r\n                      <TableCell>Time</TableCell>\r\n                      <TableCell>Student</TableCell>\r\n                      <TableCell>Session Type</TableCell>\r\n                      <TableCell>Status</TableCell>\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    {todaySessionsList.map((session) => (\r\n                      <TableRow key={session.id}>\r\n                        <TableCell>\r\n                          <Chip \r\n                            label={session.date} \r\n                            color={session.date === 'Today' ? 'primary' : 'secondary'}\r\n                            size=\"small\"\r\n                            variant=\"outlined\"\r\n                          />\r\n                        </TableCell>\r\n                        <TableCell>{session.time}</TableCell>\r\n                        <TableCell>{session.student}</TableCell>\r\n                        <TableCell>{session.type}</TableCell>\r\n                        <TableCell>\r\n                          <Chip \r\n                            label={session.status === 'completed' ? 'Completed' : 'Scheduled'} \r\n                            color={session.status === 'completed' ? 'success' : 'primary'}\r\n                            size=\"small\"\r\n                          />\r\n                        </TableCell>\r\n                      </TableRow>\r\n                    ))}\r\n                  </TableBody>\r\n                </Table>\r\n              </TableContainer>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n        \r\n        <Grid item xs={12} md={4}>\r\n          <Card sx={{ mb: 2 }}>\r\n            <CardContent>\r\n              <Typography variant=\"h6\" gutterBottom sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n                <FitnessCenter color=\"primary\" />\r\n                Student Progress Overview\r\n              </Typography>\r\n              {studentProgressList.map((student) => (\r\n                <Box key={student.id} sx={{ mb: 2 }}>\r\n                  <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>\r\n                    <Typography variant=\"body2\">{student.name}</Typography>\r\n                    <Typography variant=\"body2\">{student.progress}%</Typography>\r\n                  </Box>\r\n                  <LinearProgress \r\n                    variant=\"determinate\" \r\n                    value={student.progress} \r\n                    sx={{ height: 8, borderRadius: 4 }}\r\n                  />\r\n                </Box>\r\n              ))}\r\n            </CardContent>\r\n          </Card>\r\n\r\n          {/* 錢包餘額卡片 */}\r\n          <Card sx={{ mb: 2 }}>\r\n            <CardContent>\r\n              <Typography variant=\"h6\" gutterBottom sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n                <AccountBalanceWallet color=\"primary\" />\r\n                Wallet Balance\r\n              </Typography>\r\n              {walletBalance ? (\r\n                <Box>\r\n                  <Typography variant=\"h4\" color=\"primary\" fontWeight=\"bold\">\r\n                    RM {walletBalance.balance?.toFixed(2) || '0.00'}\r\n                  </Typography>\r\n                  <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mt: 1 }}>\r\n                    Status: {walletBalance.walletStatus || 'Active'}\r\n                  </Typography>\r\n                  <Button \r\n                    variant=\"outlined\" \r\n                    size=\"small\" \r\n                    sx={{ mt: 1 }}\r\n                    onClick={() => handleTabChange('income')}\r\n                  >\r\n                    View History\r\n                  </Button>\r\n                </Box>\r\n              ) : (\r\n                <Typography variant=\"body2\" color=\"text.secondary\">\r\n                  Loading wallet information...\r\n                </Typography>\r\n              )}\r\n            </CardContent>\r\n          </Card>\r\n\r\n          {/* 收入統計卡片 */}\r\n          <Card sx={{ mb: 2 }}>\r\n            <CardContent>\r\n              <Typography variant=\"h6\" gutterBottom sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n                <AttachMoney color=\"primary\" />\r\n                Income Overview\r\n              </Typography>\r\n              {incomeHistory.length > 0 ? (\r\n                <Box>\r\n                  <Typography variant=\"h5\" color=\"success.main\" fontWeight=\"bold\">\r\n                    RM {incomeHistory.reduce((sum, record) => sum + (record.amount || 0), 0).toFixed(2)}\r\n                  </Typography>\r\n                  <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mt: 1 }}>\r\n                    Total Income ({incomeHistory.length} records)\r\n                  </Typography>\r\n                  <Button \r\n                    variant=\"outlined\" \r\n                    size=\"small\" \r\n                    sx={{ mt: 1 }}\r\n                    onClick={() => handleTabChange('income')}\r\n                  >\r\n                    View Details\r\n                  </Button>\r\n                </Box>\r\n              ) : (\r\n                <Typography variant=\"body2\" color=\"text.secondary\">\r\n                  No income records yet\r\n                </Typography>\r\n              )}\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      {/* Replacement Classes 移到下面 */}\r\n      <Grid container spacing={3} sx={{ mt: 2 }}>\r\n        <Grid item xs={12}>\r\n          <Card>\r\n            <CardContent>\r\n              <Typography variant=\"h6\" gutterBottom color=\"primary\">Replacement Classes</Typography>\r\n              {replacementClasses.length === 0 ? (\r\n                <Typography color=\"text.secondary\">No replacement classes scheduled.</Typography>\r\n              ) : (\r\n                <TableContainer>\r\n                  <Table size=\"small\">\r\n                    <TableHead>\r\n                      <TableRow>\r\n                        <TableCell>Date</TableCell>\r\n                        <TableCell>Time</TableCell>\r\n                        <TableCell>Venue</TableCell>\r\n                        <TableCell>Court</TableCell>\r\n                        <TableCell>Title</TableCell>\r\n                      </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                      {replacementClasses.map(cls => (\r\n                        <TableRow key={cls.id}>\r\n                          <TableCell>{cls.startTime ? new Date(cls.startTime).toLocaleDateString() : ''}</TableCell>\r\n                          <TableCell>{cls.startTime ? new Date(cls.startTime).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }) : ''} - {cls.endTime ? new Date(cls.endTime).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }) : ''}</TableCell>\r\n                          <TableCell>{cls.venue?.name || cls.venueName || '-'}</TableCell>\r\n                          <TableCell>{cls.court?.name || cls.courtName || '-'}</TableCell>\r\n                          <TableCell>{cls.title}</TableCell>\r\n                        </TableRow>\r\n                      ))}\r\n                    </TableBody>\r\n                  </Table>\r\n                </TableContainer>\r\n              )}\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n      </Grid>\r\n    </Box>\r\n  );\r\n\r\n  const renderStudents = () => (\r\n    <Box>\r\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\r\n        <Typography variant=\"h4\" sx={{ fontWeight: 'bold', color: theme.palette.text.primary }}>Student Management</Typography>\r\n        <Button \r\n          variant=\"contained\" \r\n          startIcon={<Add />}\r\n          onClick={() => handleOpenDialog('addStudent')}\r\n          sx={{ borderRadius: 2 }}\r\n        >\r\n          Add Student\r\n        </Button>\r\n      </Box>\r\n      \r\n      <Grid container spacing={3}>\r\n        {studentList.map((student) => (\r\n          <Grid item xs={12} sm={6} md={3} lg={2} key={student.id}>\r\n            <Card sx={{ height: '100%', transition: 'transform 0.2s', '&:hover': { transform: 'translateY(-4px)' } }}>\r\n              <CardContent>\r\n                <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\r\n                  <Avatar sx={{ mr: 2, bgcolor: 'primary.main' }}>\r\n                    {student.name.charAt(0)}\r\n                  </Avatar>\r\n                  <Box sx={{ flexGrow: 1 }}>\r\n                    <Typography variant=\"h6\">{student.name}</Typography>\r\n                    <Chip \r\n                      label={student.level} \r\n                      size=\"small\" \r\n                      color=\"secondary\"\r\n                      sx={{ mt: 0.5 }}\r\n                    />\r\n                  </Box>\r\n                  <Chip \r\n                    label={student.status === 'active' ? 'Active' : 'Inactive'} \r\n                    color={student.status === 'active' ? 'success' : 'default'}\r\n                    size=\"small\"\r\n                  />\r\n                </Box>\r\n                \r\n                <Box sx={{ mb: 2 }}>\r\n                  <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\r\n                    Completed Sessions: {student.sessionCount}\r\n                  </Typography>\r\n                  <Typography variant=\"body2\" color=\"text.secondary\" mb={1}>\r\n                    Learning Progress: {student.progress ?? 60}%\r\n                  </Typography>\r\n                  <LinearProgress variant=\"determinate\" value={student.progress ?? 60} sx={{ mb: 2 }} />\r\n                  <Box display=\"flex\" gap={1}>\r\n                    <Button size=\"small\" variant=\"outlined\">Edit</Button>\r\n                    <Button size=\"small\" variant=\"text\">Schedule Session</Button>\r\n                  </Box>\r\n                </Box>\r\n              </CardContent>\r\n              \r\n              <CardActions>\r\n                <Button size=\"small\" startIcon={<Edit />}>Edit</Button>\r\n                <Button size=\"small\" startIcon={<Schedule />}>Schedule Session</Button>\r\n              </CardActions>\r\n            </Card>\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n    </Box>\r\n  );\r\n\r\n  const renderSchedule = (tab, handleTabChange) => {\r\n    return (\r\n      <Box>\r\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\r\n          <Typography variant=\"h4\" sx={{ fontWeight: 'bold', color: theme.palette.text.primary }}>Session Schedule</Typography>\r\n        </Box>\r\n        <Tabs value={tab} onChange={handleTabChange} sx={{ mb: 2 }}>\r\n          <Tab label=\"Session Table\" />\r\n          <Tab label=\"Coach Schedule Management\" />\r\n        </Tabs>\r\n        {tab === 0 && (\r\n          <Card>\r\n            <CardContent>\r\n              {loadingSessions ? (\r\n                <Typography>Loading sessions...</Typography>\r\n              ) : sessionError ? (\r\n                <Typography color=\"error\">{sessionError}</Typography>\r\n              ) : (\r\n                <TableContainer>\r\n                  <Table>\r\n                    <TableHead>\r\n                      <TableRow>\r\n                        <TableCell />\r\n                        <TableCell>Title</TableCell>\r\n                        <TableCell>Type</TableCell>\r\n                        <TableCell>Status</TableCell>\r\n                        <TableCell>Venue</TableCell>\r\n                        <TableCell>Court</TableCell>\r\n                        <TableCell>Start Date</TableCell>\r\n                        <TableCell>End Date</TableCell>\r\n                        <TableCell>Total Sessions</TableCell>\r\n                        <TableCell align=\"center\">Actions</TableCell>\r\n                      </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                      {(() => {\r\n                        // Helper: get date part (YYYY-MM-DD) from ISO string\r\n                        const getDatePart = (iso) => new Date(iso).toISOString().slice(0, 10);\r\n                        // Group by recurringGroupId (or session id if not recurring)\r\n                        const grouped = {};\r\n                        sessions.forEach(session => {\r\n                          const key = session.recurringGroupId || session.id;\r\n                          if (!grouped[key]) grouped[key] = [];\r\n                          grouped[key].push(session);\r\n                        });\r\n                        return Object.values(grouped).map(group => {\r\n                          const first = group[0];\r\n                          const start = new Date(first.startTime);\r\n                          const end = new Date(first.endTime);\r\n                          const groupKey = first.recurringGroupId || first.id;\r\n                          const expanded = expandedGroups.includes(groupKey);\r\n                          return (\r\n                            <React.Fragment key={groupKey}>\r\n                              <TableRow>\r\n                                <TableCell>\r\n                                  <IconButton size=\"small\" onClick={() => handleExpandClick(groupKey)}>\r\n                                    {expanded ? '-' : '+'}\r\n                                  </IconButton>\r\n                                </TableCell>\r\n                                <TableCell>{first.title}</TableCell>\r\n                                <TableCell>{first.slotType || first.type || '-'}</TableCell>\r\n                                <TableCell>\r\n                                  <Chip label={first.status || 'Scheduled'} color={first.status === 'completed' || first.status === 'COMPLETED' ? 'success' : 'primary'} size=\"small\" />\r\n                                </TableCell>\r\n                                <TableCell>{first.venueName || first.venue?.name || '-'}</TableCell>\r\n                                <TableCell>{first.courtName || first.court?.name || '-'}</TableCell>\r\n                                <TableCell>{start.toLocaleDateString()}</TableCell>\r\n                                <TableCell>{end.toLocaleDateString()}</TableCell>\r\n                                <TableCell>{group.length}</TableCell>\r\n                                <TableCell align=\"center\">\r\n                                  <IconButton size=\"small\" color=\"primary\">\r\n                                    <Edit />\r\n                                  </IconButton>\r\n                                  <IconButton size=\"small\" color=\"error\">\r\n                                    <Delete />\r\n                                  </IconButton>\r\n                                </TableCell>\r\n                              </TableRow>\r\n                              <TableRow>\r\n                                <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={10}>\r\n                                  <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\r\n                                    <Box margin={1}>\r\n                                      <Table size=\"small\">\r\n                                        <TableHead>\r\n                                          <TableRow>\r\n                                            <TableCell>Date</TableCell>\r\n                                            <TableCell>Start Time</TableCell>\r\n                                            <TableCell>End Time</TableCell>\r\n                                            <TableCell>Status</TableCell>\r\n                                          </TableRow>\r\n                                        </TableHead>\r\n                                        <TableBody>\r\n                                          {group.map((sess) => (\r\n                                            <TableRow key={sess.id}>\r\n                                              <TableCell>{new Date(sess.startTime).toLocaleDateString()}</TableCell>\r\n                                              <TableCell>{new Date(sess.startTime).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}</TableCell>\r\n                                              <TableCell>{new Date(sess.endTime).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}</TableCell>\r\n                                              <TableCell>\r\n                                                <Chip label={sess.status || 'Scheduled'} size=\"small\" color={sess.status === 'CANCELLED' ? 'primary' : 'success'} />\r\n                                                {sess.status === 'CANCELLED' && (\r\n                                                  hasReplacement(sess.id) ? (\r\n                                                    <Chip label=\"Replacement scheduled\" color=\"success\" />\r\n                                                  ) : (\r\n                                                    <>\r\n                                                      <Chip label=\"No replacement scheduled\" color=\"error\" />\r\n                                                      <Button variant=\"outlined\" color=\"warning\" onClick={() => handleBookReplacement(sess)} style={{ marginLeft: 8 }}>\r\n                                                        BOOK REPLACEMENT\r\n                                                      </Button>\r\n                                                    </>\r\n                                                  )\r\n                                                )}\r\n                                              </TableCell>\r\n                                              {/* 新增 Cancel 按鈕 */}\r\n                                              <TableCell>\r\n                                                <IconButton color=\"error\" size=\"small\" onClick={() => handleCancelSession(sess.id, sess)}>\r\n                                                  <DeleteIcon fontSize=\"small\" />\r\n                                                </IconButton>\r\n                                              </TableCell>\r\n                                            </TableRow>\r\n                                          ))}\r\n                                        </TableBody>\r\n                                      </Table>\r\n                                    </Box>\r\n                                  </Collapse>\r\n                                </TableCell>\r\n                              </TableRow>\r\n                            </React.Fragment>\r\n                          );\r\n                        });\r\n                      })()}\r\n                    </TableBody>\r\n                  </Table>\r\n                </TableContainer>\r\n              )}\r\n            </CardContent>\r\n          </Card>\r\n        )}\r\n        {tab === 1 && (\r\n          <CoachScheduleManagement />\r\n        )}\r\n      </Box>\r\n    );\r\n  };\r\n\r\n  const renderContent = () => {\r\n    switch (selectedTab) {\r\n      case 'dashboard':\r\n        return renderDashboard();\r\n      case 'students':\r\n        return <StudentManagementSystem />;\r\n      case 'schedule':\r\n        return renderSchedule(scheduleTab, (e, v) => setScheduleTab(v));\r\n      case 'messages':\r\n        return <MessagingPage />;\r\n      case 'leave-requests':\r\n        return renderLeaveRequests();\r\n      case 'income':\r\n        return renderIncomeHistory();\r\n      case 'analytics':\r\n        return (\r\n          <Box>\r\n            <Typography variant=\"h4\" gutterBottom sx={{ fontWeight: 'bold', color: theme.palette.text.primary }}>Analytics</Typography>\r\n            <Typography variant=\"body1\" sx={{ color: theme.palette.text.secondary }}>Analytics feature under development...</Typography>\r\n          </Box>\r\n        );\r\n      case 'settings':\r\n        return (\r\n          <Box>\r\n            <Typography variant=\"h4\" gutterBottom sx={{ fontWeight: 'bold', color: theme.palette.text.primary }}>System Settings</Typography>\r\n            <Typography variant=\"body1\" sx={{ color: theme.palette.text.secondary }}>System settings feature under development...</Typography>\r\n          </Box>\r\n        );\r\n      case 'student-management':\r\n        return (\r\n          <Box>\r\n            <Typography variant=\"h4\" gutterBottom sx={{ fontWeight: 'bold', color: theme.palette.text.primary }}>Student Management</Typography>\r\n            {loadingStudents ? (\r\n              <Typography>Loading students...</Typography>\r\n            ) : studentError ? (\r\n              <Typography color=\"error\">{studentError}</Typography>\r\n            ) : (\r\n              <Box display=\"flex\" flexWrap=\"wrap\" gap={3}>\r\n                {studentList.map(student => (\r\n                  <Card key={student.id} sx={{ width: 280 }}>\r\n                    <CardContent>\r\n                      <Box display=\"flex\" alignItems=\"center\" mb={1}>\r\n                        <Avatar sx={{ bgcolor: '#1976d2', mr: 2 }}>\r\n                          {student.name?.charAt(0)}\r\n                        </Avatar>\r\n                        <Box>\r\n                          <Typography variant=\"h6\">{student.name}</Typography>\r\n                          <Chip label={student.level || 'Beginner'} color=\"primary\" size=\"small\" sx={{ mr: 1 }} />\r\n                          <Chip label={student.status || 'Active'} color={(student.status || 'Active') === 'Active' ? 'success' : 'default'} size=\"small\" />\r\n                        </Box>\r\n                      </Box>\r\n                      <Typography variant=\"body2\" color=\"text.secondary\" mb={1}>\r\n                        Completed Sessions: {student.sessionCount}\r\n                      </Typography>\r\n                      <Typography variant=\"body2\" color=\"text.secondary\" mb={1}>\r\n                        Learning Progress: {student.progress ?? 60}%\r\n                      </Typography>\r\n                      <LinearProgress variant=\"determinate\" value={student.progress ?? 60} sx={{ mb: 2 }} />\r\n                      <Box display=\"flex\" gap={1}>\r\n                        <Button size=\"small\" variant=\"outlined\">Edit</Button>\r\n                        <Button size=\"small\" variant=\"text\">Schedule Session</Button>\r\n                      </Box>\r\n                    </CardContent>\r\n                  </Card>\r\n                ))}\r\n              </Box>\r\n            )}\r\n          </Box>\r\n        );\r\n      default:\r\n        return renderDashboard();\r\n    }\r\n  };\r\n\r\n  // 新增：取消課程\r\n  const handleCancelSession = async (sessionId, sessionObj) => {\r\n    if (!window.confirm(\"Are you sure you want to cancel this session?\")) return;\r\n    try {\r\n      await ClassSessionService.cancelSession(sessionId);\r\n      setCancelSuccess(true);\r\n      setCancelMessage('Session cancelled successfully!');\r\n      setCancelledSessionObj(sessionObj);\r\n    } catch (e) {\r\n      const errorMessage = e?.response?.data?.error || e.message;\r\n      if (errorMessage.includes('force=true') || errorMessage.includes('24 hours')) {\r\n        setForceCancelSessionId(sessionId);\r\n        setCancelledSessionObj(sessionObj);\r\n        setShowForceCancelDialog(true);\r\n      } else {\r\n        alert(\"Cancellation failed: \" + errorMessage);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleForceCancel = async () => {\r\n    try {\r\n      await ClassSessionService.cancelSession(forceCancelSessionId, cancelReason, true);\r\n      setShowForceCancelDialog(false);\r\n      setCancelSuccess(true);\r\n      setCancelMessage('Session force-cancelled successfully!');\r\n    } catch (e) {\r\n      alert(\"Force cancellation failed: \" + (e?.response?.data?.error || e.message));\r\n    }\r\n  };\r\n\r\n  const handleMakeupInputChange = (e) => {\r\n    setMakeupSessionData({ ...makeupSessionData, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  // 新增：多選連續時段\r\n  const handleMakeupSlotSelect = (slot) => {\r\n    if (!makeupSessionData.selectedSlots) {\r\n      setMakeupSessionData({ ...makeupSessionData, selectedSlots: [slot], startTime: slot.start, endTime: slot.end });\r\n      return;\r\n    }\r\n    const selected = makeupSessionData.selectedSlots;\r\n    // 已選中則取消\r\n    if (selected.some(s => s.start === slot.start && s.end === slot.end)) {\r\n      const newSelected = selected.filter(s => !(s.start === slot.start && s.end === slot.end));\r\n      let startTime = newSelected.length ? newSelected[0].start : '';\r\n      let endTime = newSelected.length ? newSelected[newSelected.length - 1].end : '';\r\n      setMakeupSessionData({ ...makeupSessionData, selectedSlots: newSelected, startTime, endTime });\r\n      return;\r\n    }\r\n    // 只允許連續\r\n    const all = [...selected, slot].sort((a, b) => a.start.localeCompare(b.start));\r\n    let isConsecutive = true;\r\n    for (let i = 1; i < all.length; i++) {\r\n      const prev = parseInt(all[i - 1].end.replace(':', ''), 10);\r\n      const curr = parseInt(all[i].start.replace(':', ''), 10);\r\n      if (curr !== prev) {\r\n        isConsecutive = false;\r\n        break;\r\n      }\r\n    }\r\n    if (!isConsecutive) return;\r\n    setMakeupSessionData({\r\n      ...makeupSessionData,\r\n      selectedSlots: all,\r\n      startTime: all[0].start,\r\n      endTime: all[all.length - 1].end\r\n    });\r\n  };\r\n\r\n  // 定義 fetchSessions 並設置到 state 供 handleCreateMakeupSession 使用\r\n  const [fetchSessionsRef, setFetchSessionsRef] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchSessions = async () => {\r\n      setLoadingSessions(true);\r\n      setSessionError('');\r\n      try {\r\n        const start = new Date(2000, 0, 1, 0, 0, 0);\r\n        const end = new Date(2100, 11, 31, 23, 59, 59);\r\n        const data = await CoachService.getSchedule(start.toISOString(), end.toISOString());\r\n        setSessions(Array.isArray(data) ? data : []);\r\n      } catch (err) {\r\n        setSessionError('Failed to load sessions.');\r\n      } finally {\r\n        setLoadingSessions(false);\r\n      }\r\n    };\r\n    setFetchSessionsRef(() => fetchSessions);\r\n    fetchSessions();\r\n  }, []);\r\n\r\n  // 在 handleCreateMakeupSession 時自動帶入 startTime/endTime\r\n  const handleCreateMakeupSession = async () => {\r\n    try {\r\n      const origin = sessions.find(s => s.id === makeupOriginSession?.id);\r\n      // 組合正確的 LocalDateTime 格式\r\n      let startTime = makeupSessionData.startTime;\r\n      let endTime = makeupSessionData.endTime;\r\n      if (makeupSessionData.date && makeupSessionData.selectedSlots && makeupSessionData.selectedSlots.length > 0) {\r\n        startTime = `${makeupSessionData.date}T${makeupSessionData.selectedSlots[0].start}:00`;\r\n        endTime = `${makeupSessionData.date}T${makeupSessionData.selectedSlots[makeupSessionData.selectedSlots.length - 1].end}:00`;\r\n      }\r\n      const payload = {\r\n        ...makeupSessionData,\r\n        courtId: origin?.court?.id,\r\n        maxParticipants: origin?.maxParticipants,\r\n        title: makeupSessionData.title || (origin?.title ? origin.title + ' (Make-up)' : 'Make-up Session'),\r\n        description: makeupSessionData.description || (origin?.description || ''),\r\n        startTime,\r\n        endTime,\r\n        price: 0,\r\n      };\r\n      // 帶上 makeupForSessionId\r\n      await ClassSessionService.createClassSession(payload, makeupOriginSession?.id);\r\n      alert('Make-up session created and students will be notified!');\r\n      setShowMakeupDialog(false);\r\n      // 自動刷新 sessions，讓 UI 立即變更\r\n      if (fetchSessionsRef) fetchSessionsRef(); else window.location.reload();\r\n    } catch (e) {\r\n      alert('Failed to create make-up session: ' + (e?.response?.data?.error || e.message));\r\n    }\r\n  };\r\n\r\n  // 判斷這堂課有沒有 replacement\r\n  const hasReplacement = (sessionId) => {\r\n    return sessions.some(s => s.replacementForSessionId === sessionId);\r\n  };\r\n\r\n  // 取得營業時間範圍，預設 8:00~22:00\r\n  const getHourRange = () => {\r\n    let open = 8, close = 22;\r\n    const court = sessions.find(s => s.id === makeupOriginSession?.id)?.court;\r\n    if (court && court.openingTime && court.closingTime) {\r\n      open = parseInt(court.openingTime.split(':')[0], 10);\r\n      close = parseInt(court.closingTime.split(':')[0], 10);\r\n      if (isNaN(open)) open = 8;\r\n      if (isNaN(close)) close = 22;\r\n    }\r\n    return { open, close };\r\n  };\r\n  const { open, close } = getHourRange();\r\n  const hourSlots = [];\r\n  for (let h = open; h < close; h++) {\r\n    const start = (h < 10 ? '0' : '') + h + ':00';\r\n    const end = (h + 1 < 10 ? '0' : '') + (h + 1) + ':00';\r\n    hourSlots.push({ start, end });\r\n  }\r\n  const availableSlotSet = new Set(busySlots ? busySlots.map(s => s.start + '-' + s.end) : []);\r\n\r\n  // 新增：BOOK REPLACEMENT 按鈕 handler\r\n  const handleBookReplacement = (session) => {\r\n    setMakeupOriginSession(session);\r\n    setShowMakeupDialog(true);\r\n  };\r\n\r\n  const [commentDialog, setCommentDialog] = useState({ open: false, request: null, action: '' });\r\n  const [coachComment, setCoachComment] = useState('');\r\n  const [bookReplacementDialog, setBookReplacementDialog] = useState({ open: false, request: null });\r\n  const [selectedRequests, setSelectedRequests] = useState([]);\r\n  const [courts, setCourts] = useState([]);\r\n  const [venues, setVenues] = useState([]);\r\n  const [replacementSessionData, setReplacementSessionData] = useState({\r\n    title: '',\r\n    description: '',\r\n    venueId: '',\r\n    venueName: '',\r\n    state: '',\r\n    courtId: '',\r\n    startTime: '',\r\n    endTime: '',\r\n    maxParticipants: 6,\r\n    price: '',\r\n    slotType: 'COACH_SESSION',\r\n    date: '',\r\n    availableSlots: [],\r\n    selectedSlots: [], // 改為數組，支持多選連續時段\r\n    selectedSlot: ''\r\n  });\r\n\r\n  const handleApproveRequest = async (request) => {\r\n    setCommentDialog({ open: true, request, action: 'approve' });\r\n    setCoachComment('');\r\n  };\r\n\r\n  const handleDeclineRequest = async (request) => {\r\n    setCommentDialog({ open: true, request, action: 'decline' });\r\n    setCoachComment('');\r\n  };\r\n\r\n  const handleSubmitComment = async () => {\r\n    try {\r\n      const { request, action } = commentDialog;\r\n      if (action === 'approve') {\r\n        await LeaveRequestService.approveRequest(request.id, null, coachComment);\r\n      } else {\r\n        await LeaveRequestService.declineRequest(request.id, coachComment);\r\n      }\r\n      setCommentDialog({ open: false, request: null, action: '' });\r\n      setCoachComment('');\r\n      fetchLeaveRequests();\r\n    } catch (error) {\r\n      console.error('Failed to process request:', error);\r\n    }\r\n  };\r\n\r\n  // 獲取指定日期的可用時段\r\n  const getAvailableSlotsForDate = async (dateStr, courtId) => {\r\n    try {\r\n      console.log('=== getAvailableSlotsForDate ===');\r\n      console.log('Date:', dateStr, 'Court ID:', courtId);\r\n      \r\n      // 獲取球場的營業時間\r\n      const court = courts.find(c => c.id === courtId);\r\n      if (!court) {\r\n        console.error('Court not found for ID:', courtId);\r\n        return [];\r\n      }\r\n\r\n      console.log('Found court:', court);\r\n\r\n      // 解析營業時間\r\n      const openingHour = court.openingTime ? parseInt(court.openingTime.split(':')[0]) : 8;\r\n      const closingHour = court.closingTime ? parseInt(court.closingTime.split(':')[0]) : 22;\r\n      \r\n      console.log('Court operating hours:', openingHour, 'to', closingHour);\r\n\r\n      // 獲取該日期的已預訂時段\r\n      let bookedSlots = [];\r\n      if (courtId && dateStr) {\r\n        try {\r\n          const token = localStorage.getItem('authToken');\r\n          const headers = token ? { Authorization: `Bearer ${token}` } : {};\r\n          \r\n          const response = await api.get('/coach/available-times', {\r\n            params: { courtId, date: dateStr },\r\n            headers\r\n          });\r\n          bookedSlots = Array.isArray(response.data) ? response.data : [];\r\n          console.log('Booked slots from API:', bookedSlots);\r\n        } catch (error) {\r\n          console.error('Failed to fetch booked slots:', error);\r\n          console.error('Error details:', error.response?.data);\r\n          \r\n          // 如果 API 失敗，創建一些測試的已預訂時段\r\n          console.log('Creating fallback booked slots for testing');\r\n          bookedSlots = [\r\n            { start: `${dateStr}T10:00:00`, end: `${dateStr}T12:00:00` }, // 10:00-12:00 被預訂\r\n            { start: `${dateStr}T14:00:00`, end: `${dateStr}T16:00:00` }  // 14:00-16:00 被預訂\r\n          ];\r\n        }\r\n      }\r\n\r\n      // 生成所有時段\r\n      const allSlots = [];\r\n      for (let hour = openingHour; hour < closingHour; hour++) {\r\n        const startTime = `${hour.toString().padStart(2, '0')}:00`;\r\n        const endTime = `${(hour + 1).toString().padStart(2, '0')}:00`;\r\n        const slotKey = `${startTime}-${endTime}`;\r\n        \r\n        // 檢查是否被預訂\r\n        const isBooked = bookedSlots.some(bookedSlot => {\r\n          const bookedStart = new Date(bookedSlot.start);\r\n          const bookedEnd = new Date(bookedSlot.end);\r\n          const slotStart = new Date(`${dateStr}T${startTime}:00`);\r\n          const slotEnd = new Date(`${dateStr}T${endTime}:00`);\r\n          \r\n          // 檢查時間重疊\r\n          const hasOverlap = slotStart < bookedEnd && slotEnd > bookedStart;\r\n          if (hasOverlap) {\r\n            console.log(`Slot ${startTime}-${endTime} overlaps with booked slot ${bookedStart.toTimeString()}-${bookedEnd.toTimeString()}`);\r\n          }\r\n          return hasOverlap;\r\n        });\r\n\r\n        allSlots.push({\r\n          time: slotKey,\r\n          startTime: startTime,\r\n          endTime: endTime,\r\n          isBooked: isBooked\r\n        });\r\n      }\r\n\r\n      console.log('Generated slots with booking status:', allSlots);\r\n      return allSlots;\r\n    } catch (error) {\r\n      console.error('Error fetching available slots:', error);\r\n      return [];\r\n    }\r\n  };\r\n\r\n  // 處理多選時間段\r\n  const handleSlotSelection = (slot) => {\r\n    console.log('=== handleSlotSelection ===');\r\n    console.log('Selected slot:', slot);\r\n    console.log('Current selectedSlots:', replacementSessionData.selectedSlots);\r\n    console.log('Original duration:', replacementSessionData.originalDuration);\r\n    \r\n    const currentSelected = replacementSessionData.selectedSlots;\r\n    const requiredSlots = Math.ceil(replacementSessionData.originalDuration); // 需要的時間段數量\r\n    \r\n    // 檢查是否已經選中\r\n    const isAlreadySelected = currentSelected.some(s => s.time === slot.time);\r\n    \r\n    if (isAlreadySelected) {\r\n      // 如果已選中，則取消選中\r\n      const newSelected = currentSelected.filter(s => s.time !== slot.time);\r\n      console.log('Removing slot, new selected:', newSelected);\r\n      \r\n      // 更新開始和結束時間\r\n      let newStartTime = '';\r\n      let newEndTime = '';\r\n      if (newSelected.length > 0) {\r\n        newStartTime = `${replacementSessionData.date}T${newSelected[0].startTime}:00`;\r\n        newEndTime = `${replacementSessionData.date}T${newSelected[newSelected.length - 1].endTime}:00`;\r\n      }\r\n      \r\n      setReplacementSessionData({\r\n        ...replacementSessionData,\r\n        selectedSlots: newSelected,\r\n        startTime: newStartTime,\r\n        endTime: newEndTime\r\n      });\r\n    } else {\r\n      // 檢查是否已經達到所需時間段數量\r\n      if (currentSelected.length >= requiredSlots) {\r\n        console.log(`Already selected ${currentSelected.length} slots, need ${requiredSlots}. Replacing selection.`);\r\n        // 如果已達到所需數量，清空選擇並從新時段開始\r\n        const newSelected = [slot];\r\n        \r\n        // 更新開始和結束時間\r\n        const newStartTime = `${replacementSessionData.date}T${newSelected[0].startTime}:00`;\r\n        const newEndTime = `${replacementSessionData.date}T${newSelected[0].endTime}:00`;\r\n        \r\n        setReplacementSessionData({\r\n          ...replacementSessionData,\r\n          selectedSlots: newSelected,\r\n          startTime: newStartTime,\r\n          endTime: newEndTime\r\n        });\r\n        return;\r\n      }\r\n      \r\n      // 如果未選中，則添加到選中列表\r\n      const newSelected = [...currentSelected, slot].sort((a, b) => \r\n        a.startTime.localeCompare(b.startTime)\r\n      );\r\n      console.log('Adding slot, new selected:', newSelected);\r\n      \r\n      // 檢查是否連續\r\n      let isConsecutive = true;\r\n      for (let i = 1; i < newSelected.length; i++) {\r\n        const prevEnd = newSelected[i - 1].endTime;\r\n        const currStart = newSelected[i].startTime;\r\n        if (prevEnd !== currStart) {\r\n          isConsecutive = false;\r\n          break;\r\n        }\r\n      }\r\n      \r\n      if (!isConsecutive) {\r\n        console.log('Slots are not consecutive, replacing selection');\r\n        // 如果不連續，只保留新選中的時段\r\n        newSelected.splice(0, newSelected.length - 1);\r\n      }\r\n      \r\n      // 限制選擇的時間段數量不超過所需數量\r\n      if (newSelected.length > requiredSlots) {\r\n        console.log(`Limiting selection to ${requiredSlots} slots`);\r\n        newSelected.splice(requiredSlots);\r\n      }\r\n      \r\n      // 更新開始和結束時間\r\n      const newStartTime = `${replacementSessionData.date}T${newSelected[0].startTime}:00`;\r\n      const newEndTime = `${replacementSessionData.date}T${newSelected[newSelected.length - 1].endTime}:00`;\r\n      \r\n      setReplacementSessionData({\r\n        ...replacementSessionData,\r\n        selectedSlots: newSelected,\r\n        startTime: newStartTime,\r\n        endTime: newEndTime\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleBookReplacementForStudent = async (request) => {\r\n    setBookReplacementDialog({ open: true, request });\r\n    \r\n    // 計算原始課程的時長\r\n    let originalDuration = 1; // 默認1小時\r\n    if (request.originalSessionStartTime && request.originalSessionEndTime) {\r\n      console.log('=== Time Calculation Debug ===');\r\n      console.log('Raw start time:', request.originalSessionStartTime);\r\n      console.log('Raw end time:', request.originalSessionEndTime);\r\n      \r\n      // 使用更精確的時間解析\r\n      const originalStart = new Date(request.originalSessionStartTime + 'Z'); // 添加 Z 表示 UTC\r\n      const originalEnd = new Date(request.originalSessionEndTime + 'Z');\r\n      \r\n      console.log('Parsed start time:', originalStart);\r\n      console.log('Parsed end time:', originalEnd);\r\n      console.log('Start time ISO:', originalStart.toISOString());\r\n      console.log('End time ISO:', originalEnd.toISOString());\r\n      \r\n      const timeDiffMs = originalEnd.getTime() - originalStart.getTime();\r\n      const timeDiffHours = timeDiffMs / (1000 * 60 * 60);\r\n      \r\n      console.log('Time difference (ms):', timeDiffMs);\r\n      console.log('Time difference (hours):', timeDiffHours);\r\n      \r\n      originalDuration = timeDiffHours;\r\n      console.log('Calculated duration before limits:', originalDuration);\r\n      \r\n      // 不要限制時長，讓它顯示真實的時長\r\n      // originalDuration = Math.max(0.5, Math.min(4, originalDuration));\r\n      console.log('Final duration:', originalDuration);\r\n    }\r\n    \r\n    // 獲取原始課程的場地信息\r\n    let originalVenueId = '';\r\n    let originalVenueName = '';\r\n    let originalState = '';\r\n    \r\n    try {\r\n      // 從原始課程信息中獲取場地信息\r\n      console.log('=== Venue Info Debug ===');\r\n      console.log('Request venue:', request.venue);\r\n      console.log('Request state:', request.state);\r\n      console.log('Request court:', request.court);\r\n      \r\n      // 使用正確的字段名稱\r\n      originalVenueName = request.venue || '';\r\n      originalState = request.state || '';\r\n      \r\n      // 如果需要場地ID，需要從場地名稱查找\r\n      if (originalVenueName && venues.length > 0) {\r\n        const foundVenue = venues.find(v => v.name === originalVenueName);\r\n        if (foundVenue) {\r\n          originalVenueId = foundVenue.id;\r\n        }\r\n      }\r\n      \r\n      console.log('Extracted venue info:', { originalVenueId, originalVenueName, originalState });\r\n    } catch (error) {\r\n      console.error('Error getting original venue info:', error);\r\n    }\r\n    \r\n    // 預設課程信息，包含原始課程的時長和場地信息\r\n    setReplacementSessionData({\r\n      title: `${request.originalSessionTitle} (Replacement)`,\r\n      description: `Replacement session for ${request.studentName}`,\r\n      venueId: originalVenueId,\r\n      venueName: originalVenueName,\r\n      state: originalState,\r\n      courtId: '',\r\n      startTime: '',\r\n      endTime: '',\r\n      maxParticipants: 1, // 單個學生時設為1\r\n      price: '',\r\n      slotType: 'COACH_SESSION',\r\n      originalDuration: originalDuration, // 保存原始時長\r\n      date: '',\r\n      availableSlots: [],\r\n      selectedSlots: [],\r\n      selectedSlot: ''\r\n    });\r\n  };\r\n\r\n  const handleBatchBookReplacement = async () => {\r\n    const selectedRequestObjects = leaveRequests.filter(r => selectedRequests.includes(r.id));\r\n    \r\n    // 檢查是否所有選中的請求都是 MESSAGE_SENT 狀態\r\n    const allMessageSent = selectedRequestObjects.every(r => r.status === 'MESSAGE_SENT');\r\n    if (!allMessageSent) {\r\n      alert('Only MESSAGE_SENT requests can be processed together');\r\n      return;\r\n    }\r\n    \r\n    // 檢查是否所有請求的原始課程時長相同\r\n    const durations = selectedRequestObjects.map(r => {\r\n      if (r.originalSessionStartTime && r.originalSessionEndTime) {\r\n        const start = new Date(r.originalSessionStartTime + 'Z');\r\n        const end = new Date(r.originalSessionEndTime + 'Z');\r\n        return (end.getTime() - start.getTime()) / (1000 * 60 * 60);\r\n      }\r\n      return 1; // 默認1小時\r\n    });\r\n    \r\n    const uniqueDurations = [...new Set(durations)];\r\n    if (uniqueDurations.length > 1) {\r\n      alert('All selected requests must have the same original session duration to be processed together');\r\n      return;\r\n    }\r\n    \r\n    // 使用第一個請求作為模板\r\n    const firstRequest = selectedRequestObjects[0];\r\n    setBookReplacementDialog({ open: true, request: firstRequest, batchRequests: selectedRequestObjects });\r\n    \r\n    // 計算原始課程的時長\r\n    let originalDuration = 1;\r\n    if (firstRequest.originalSessionStartTime && firstRequest.originalSessionEndTime) {\r\n      const originalStart = new Date(firstRequest.originalSessionStartTime + 'Z');\r\n      const originalEnd = new Date(firstRequest.originalSessionEndTime + 'Z');\r\n      originalDuration = (originalEnd.getTime() - originalStart.getTime()) / (1000 * 60 * 60);\r\n    }\r\n    \r\n    // 生成學生名單\r\n    const studentNames = selectedRequestObjects.map(r => r.studentName).join(', ');\r\n    \r\n    // 獲取第一個請求的原始場地信息作為默認值\r\n    let originalVenueId = '';\r\n    let originalVenueName = '';\r\n    let originalState = '';\r\n    \r\n    console.log('=== Batch Venue Info Debug ===');\r\n    console.log('First request venue:', firstRequest.venue);\r\n    console.log('First request state:', firstRequest.state);\r\n    console.log('First request court:', firstRequest.court);\r\n    \r\n    // 使用正確的字段名稱\r\n    originalVenueName = firstRequest.venue || '';\r\n    originalState = firstRequest.state || '';\r\n    \r\n    // 如果需要場地ID，需要從場地名稱查找\r\n    if (originalVenueName && venues.length > 0) {\r\n      const foundVenue = venues.find(v => v.name === originalVenueName);\r\n      if (foundVenue) {\r\n        originalVenueId = foundVenue.id;\r\n      }\r\n    }\r\n    \r\n    console.log('Extracted batch venue info:', { originalVenueId, originalVenueName, originalState });\r\n    \r\n    // 預設課程信息\r\n          setReplacementSessionData({\r\n        title: `Group Replacement Session`,\r\n        description: `Replacement session for: ${studentNames}`,\r\n        venueId: originalVenueId,\r\n        venueName: originalVenueName,\r\n        state: originalState,\r\n        courtId: '',\r\n        startTime: '',\r\n        endTime: '',\r\n        maxParticipants: selectedRequestObjects.length,\r\n        price: '',\r\n        slotType: 'COACH_SESSION',\r\n        originalDuration: originalDuration,\r\n        batchRequests: selectedRequestObjects,\r\n        date: '',\r\n        availableSlots: [],\r\n        selectedSlots: [],\r\n        selectedSlot: ''\r\n      });\r\n  };\r\n\r\n  const handleCreateReplacementSession = async () => {\r\n    try {\r\n      const { request, batchRequests } = bookReplacementDialog;\r\n      \r\n      // 計算結束時間（基於開始時間和原始時長）\r\n      const startTime = replacementSessionData.startTime;\r\n      const originalDuration = replacementSessionData.originalDuration || 1;\r\n      const endTime = new Date(new Date(startTime).getTime() + originalDuration * 60 * 60 * 1000).toISOString();\r\n      \r\n      // 獲取球場信息以計算費用\r\n      const selectedCourt = courts.find(court => court.id === replacementSessionData.courtId);\r\n      const courtPricePerHour = selectedCourt ? (selectedCourt.pricePerHour || 45) : 45; // 默認45/小時\r\n      const totalCost = courtPricePerHour * originalDuration;\r\n      \r\n      // 創建替換課程\r\n      const payload = {\r\n        ...replacementSessionData,\r\n        endTime: endTime,\r\n        coachId: currentUser.id,\r\n        price: 0, // 學生不需要付錢\r\n      };\r\n      \r\n      const newSession = await ClassSessionService.createClassSession(payload);\r\n      \r\n      // 如果是批量處理\r\n      if (batchRequests && batchRequests.length > 0) {\r\n        // 批量批准所有選中的請求\r\n        const approvalPromises = batchRequests.map(req => \r\n          LeaveRequestService.approveRequest(req.id, newSession.id, 'Coach arranged group replacement session')\r\n        );\r\n        await Promise.all(approvalPromises);\r\n        \r\n        // 跳轉到支付頁面\r\n        const paymentData = {\r\n          sessionId: newSession.id,\r\n          amount: totalCost * batchRequests.length, // 批量處理時總費用\r\n          description: `Replacement session payment for ${batchRequests.length} student(s)`,\r\n          courtId: replacementSessionData.courtId,\r\n          courtName: selectedCourt ? selectedCourt.name : 'Unknown Court',\r\n          duration: originalDuration,\r\n          pricePerHour: courtPricePerHour,\r\n          isReplacementSession: true,\r\n          studentCount: batchRequests.length\r\n        };\r\n        \r\n        // 將支付數據存儲到 localStorage\r\n        localStorage.setItem('replacementSessionPayment', JSON.stringify(paymentData));\r\n        \r\n        // 跳轉到支付頁面\r\n        navigate('/payment');\r\n        \r\n        alert(`Group replacement session created and ${batchRequests.length} requests approved! Redirecting to payment...`);\r\n        setSelectedRequests([]); // 清空選擇\r\n      } else {\r\n        // 單個請求處理\r\n        await LeaveRequestService.approveRequest(request.id, newSession.id, 'Coach arranged replacement session');\r\n        \r\n        // 跳轉到支付頁面\r\n        const paymentData = {\r\n          sessionId: newSession.id,\r\n          amount: totalCost,\r\n          description: `Replacement session payment for ${request.studentName}`,\r\n          courtId: replacementSessionData.courtId,\r\n          courtName: selectedCourt ? selectedCourt.name : 'Unknown Court',\r\n          duration: originalDuration,\r\n          pricePerHour: courtPricePerHour,\r\n          isReplacementSession: true,\r\n          studentCount: 1,\r\n          studentName: request.studentName\r\n        };\r\n        \r\n        // 將支付數據存儲到 localStorage\r\n        localStorage.setItem('replacementSessionPayment', JSON.stringify(paymentData));\r\n        \r\n        // 跳轉到支付頁面\r\n        navigate('/payment');\r\n        \r\n        alert('Replacement session created and request approved! Redirecting to payment...');\r\n      }\r\n      \r\n      setBookReplacementDialog({ open: false, request: null });\r\n      setReplacementSessionData({\r\n        title: '',\r\n        description: '',\r\n        venueId: '',\r\n        venueName: '',\r\n        state: '',\r\n        courtId: '',\r\n        startTime: '',\r\n        endTime: '',\r\n        maxParticipants: 1,\r\n        price: '',\r\n        slotType: 'COACH_SESSION',\r\n        date: '',\r\n        availableSlots: [],\r\n        selectedSlots: [],\r\n        selectedSlot: ''\r\n      });\r\n      \r\n      // 刷新請假請求列表\r\n      fetchLeaveRequests();\r\n    } catch (error) {\r\n      console.error('Failed to create replacement session:', error);\r\n      alert('Failed to create replacement session: ' + error.message);\r\n    }\r\n  };\r\n\r\n  const renderLeaveRequests = () => (\r\n    <Box>\r\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\r\n        <Typography variant=\"h4\" sx={{ fontWeight: 'bold', color: theme.palette.text.primary }}>\r\n          Makeup Class Requests\r\n        </Typography>\r\n        <Box sx={{ display: 'flex', gap: 2 }}>\r\n          {selectedRequests.length > 0 && (\r\n            <Button \r\n              variant=\"contained\" \r\n              color=\"primary\"\r\n              onClick={() => handleBatchBookReplacement()}\r\n            >\r\n              BOOK COURT FOR {selectedRequests.length} STUDENT{selectedRequests.length > 1 ? 'S' : ''}\r\n            </Button>\r\n          )}\r\n          <Button \r\n            variant=\"outlined\" \r\n            onClick={async () => {\r\n              try {\r\n                const debugData = await LeaveRequestService.debugAllRequests();\r\n                console.log('Debug all requests:', debugData);\r\n                alert(`Total requests: ${debugData.totalRequests}\\nCheck console for details`);\r\n              } catch (error) {\r\n                console.error('Debug failed:', error);\r\n                alert('Debug failed: ' + error.message);\r\n              }\r\n            }}\r\n          >\r\n            Debug All Requests\r\n          </Button>\r\n        </Box>\r\n      </Box>\r\n      \r\n      {leaveRequests.length === 0 ? (\r\n        <Card sx={{ p: 4, textAlign: 'center' }}>\r\n          <Typography variant=\"h6\" color=\"text.secondary\" gutterBottom>\r\n            No pending makeup class requests\r\n          </Typography>\r\n          <Typography variant=\"body2\" color=\"text.secondary\">\r\n            All requests have been processed.\r\n          </Typography>\r\n        </Card>\r\n      ) : (\r\n        <TableContainer component={Paper}>\r\n          <Table>\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell padding=\"checkbox\">\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    checked={selectedRequests.length === leaveRequests.filter(r => r.status === 'MESSAGE_SENT').length}\r\n                    onChange={(e) => {\r\n                      if (e.target.checked) {\r\n                        setSelectedRequests(leaveRequests.filter(r => r.status === 'MESSAGE_SENT').map(r => r.id));\r\n                      } else {\r\n                        setSelectedRequests([]);\r\n                      }\r\n                    }}\r\n                  />\r\n                </TableCell>\r\n                <TableCell>Student</TableCell>\r\n                <TableCell>Original Date</TableCell>\r\n                <TableCell>Preferred Date</TableCell>\r\n                <TableCell>Request Type</TableCell>\r\n                <TableCell>Student Reason</TableCell>\r\n                <TableCell>Status</TableCell>\r\n                <TableCell>Action</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {leaveRequests.map((request) => (\r\n                <TableRow key={request.id}>\r\n                  <TableCell padding=\"checkbox\">\r\n                    {request.status === 'MESSAGE_SENT' && (\r\n                      <input\r\n                        type=\"checkbox\"\r\n                        checked={selectedRequests.includes(request.id)}\r\n                        onChange={(e) => {\r\n                          if (e.target.checked) {\r\n                            setSelectedRequests([...selectedRequests, request.id]);\r\n                          } else {\r\n                            setSelectedRequests(selectedRequests.filter(id => id !== request.id));\r\n                          }\r\n                        }}\r\n                      />\r\n                    )}\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <Box>\r\n                      <Typography variant=\"subtitle2\">{request.studentName}</Typography>\r\n                      <Typography variant=\"body2\" color=\"text.secondary\">\r\n                        {request.studentEmail}\r\n                      </Typography>\r\n                    </Box>\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    {new Date(request.originalDate).toLocaleDateString()}\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    {request.preferredDate && new Date(request.preferredDate).getFullYear() > 1900 ? \r\n                      new Date(request.preferredDate).toLocaleDateString() : '-'}\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <Typography variant=\"body2\" sx={{ maxWidth: 200 }}>\r\n                      {request.status === 'SELF_SELECTED' ? 'Self-Selected Replacement' : \r\n                       request.status === 'MESSAGE_SENT' ? 'Message Sent to Coach' : \r\n                       'Makeup Class Request'}\r\n                    </Typography>\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <Typography variant=\"body2\" sx={{ maxWidth: 200 }}>\r\n                      {request.reason || 'No reason provided'}\r\n                    </Typography>\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <Chip \r\n                      label={request.status.toLowerCase()} \r\n                      color={\r\n                        request.status === 'PENDING' ? 'warning' :\r\n                        request.status === 'SELF_SELECTED' ? 'info' :\r\n                        request.status === 'MESSAGE_SENT' ? 'primary' :\r\n                        request.status === 'APPROVED' ? 'success' :\r\n                        request.status === 'DECLINED' ? 'error' : 'default'\r\n                      }\r\n                      size=\"small\"\r\n                    />\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <Box display=\"flex\" gap={1}>\r\n                      {request.status === 'MESSAGE_SENT' && (\r\n                        <Button \r\n                          size=\"small\" \r\n                          variant=\"contained\" \r\n                          color=\"primary\"\r\n                          onClick={() => handleBookReplacementForStudent(request)}\r\n                        >\r\n                          BOOK COURT\r\n                        </Button>\r\n                      )}\r\n                      <Button \r\n                        size=\"small\" \r\n                        variant=\"contained\" \r\n                        color=\"success\"\r\n                        onClick={() => handleApproveRequest(request)}\r\n                      >\r\n                        APPROVE\r\n                      </Button>\r\n                      <Button \r\n                        size=\"small\" \r\n                        variant=\"outlined\" \r\n                        color=\"error\"\r\n                        onClick={() => handleDeclineRequest(request)}\r\n                      >\r\n                        DECLINE\r\n                      </Button>\r\n                    </Box>\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      )}\r\n    </Box>\r\n  );\r\n\r\n  const renderIncomeHistory = () => (\r\n    <Box>\r\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\r\n        <Typography variant=\"h4\" sx={{ fontWeight: 'bold', color: theme.palette.text.primary }}>\r\n          {showWalletTransactions ? 'Wallet Transactions' : 'Income History'}\r\n        </Typography>\r\n        <Box sx={{ display: 'flex', gap: 2 }}>\r\n          <Button\r\n            variant=\"outlined\"\r\n            onClick={() => {\r\n              setShowWalletTransactions(!showWalletTransactions);\r\n              if (!showWalletTransactions && walletTransactions.length === 0) {\r\n                fetchWalletTransactions();\r\n              }\r\n            }}\r\n          >\r\n            {showWalletTransactions ? 'Show Income History' : 'Show Wallet Transactions'}\r\n          </Button>\r\n          <Button\r\n            variant=\"outlined\"\r\n            onClick={() => {\r\n              fetchRevenueStatus();\r\n            }}\r\n          >\r\n            Refresh Revenue Status\r\n          </Button>\r\n        </Box>\r\n      </Box>\r\n      \r\n      {/* 收入分配狀態 */}\r\n      <Card sx={{ mb: 3 }}>\r\n        <CardContent>\r\n          <Typography variant=\"h6\" gutterBottom sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n            <AttachMoney color=\"primary\" />\r\n            Revenue Distribution Status\r\n          </Typography>\r\n          {revenueLoading ? (\r\n            <Box display=\"flex\" justifyContent=\"center\" p={3}>\r\n              <CircularProgress />\r\n            </Box>\r\n          ) : revenueStatus.length > 0 ? (\r\n            <TableContainer>\r\n              <Table>\r\n                <TableHead>\r\n                  <TableRow>\r\n                    <TableCell>Session</TableCell>\r\n                    <TableCell>Start Time</TableCell>\r\n                    <TableCell>Total Revenue</TableCell>\r\n                    <TableCell>Coach Share (80%)</TableCell>\r\n                    <TableCell>Platform Share (20%)</TableCell>\r\n                    <TableCell>Hours Until Start</TableCell>\r\n                    <TableCell>Status</TableCell>\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {revenueStatus.map((status, index) => (\r\n                    <TableRow key={index}>\r\n                      <TableCell>\r\n                        <Typography variant=\"body2\" fontWeight=\"bold\">\r\n                          {status.title}\r\n                        </Typography>\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        {status.startTime ? new Date(status.startTime).toLocaleString() : 'N/A'}\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <Typography variant=\"body2\" color=\"success.main\" fontWeight=\"bold\">\r\n                          RM {status.totalRevenue?.toFixed(2) || '0.00'}\r\n                        </Typography>\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <Typography variant=\"body2\" color=\"primary\" fontWeight=\"bold\">\r\n                          RM {status.coachShare?.toFixed(2) || '0.00'}\r\n                        </Typography>\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <Typography variant=\"body2\" color=\"text.secondary\">\r\n                          RM {status.platformShare?.toFixed(2) || '0.00'}\r\n                        </Typography>\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <Typography variant=\"body2\" color={status.hoursUntilStart <= 24 ? 'warning.main' : 'text.secondary'}>\r\n                          {status.hoursUntilStart || 0} hours\r\n                        </Typography>\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <Chip\r\n                          label={status.revenueDistributed ? 'Distributed' : 'Pending'}\r\n                          color={status.revenueDistributed ? 'success' : 'warning'}\r\n                          size=\"small\"\r\n                        />\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n                </TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n          ) : (\r\n            <Typography variant=\"body2\" color=\"text.secondary\" align=\"center\" sx={{ py: 3 }}>\r\n              No revenue data available\r\n            </Typography>\r\n          )}\r\n        </CardContent>\r\n      </Card>\r\n      \r\n      {showWalletTransactions ? (\r\n        // 錢包交易記錄\r\n        <>\r\n          {/* 錢包統計卡片 */}\r\n          <Grid container spacing={3} sx={{ mb: 3 }}>\r\n            <Grid item xs={12} md={3}>\r\n              <Card>\r\n                <CardContent>\r\n                  <Typography variant=\"h6\" gutterBottom sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n                    <AccountBalanceWallet color=\"primary\" />\r\n                    Wallet Balance\r\n                  </Typography>\r\n                  {walletBalance ? (\r\n                    <Typography variant=\"h4\" color=\"primary\" fontWeight=\"bold\">\r\n                      RM {walletBalance.balance?.toFixed(2) || '0.00'}\r\n                    </Typography>\r\n                  ) : (\r\n                    <Typography variant=\"body2\" color=\"text.secondary\">\r\n                      RM 0.00\r\n                    </Typography>\r\n                  )}\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n            \r\n            <Grid item xs={12} md={3}>\r\n              <Card>\r\n                <CardContent>\r\n                  <Typography variant=\"h6\" gutterBottom sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n                    <TrendingUp color=\"success\" />\r\n                    Total Income\r\n                  </Typography>\r\n                  <Typography variant=\"h4\" color=\"success.main\" fontWeight=\"bold\">\r\n                    RM {walletTransactions.filter(t => t.isIncome).reduce((sum, t) => sum + (t.amount || 0), 0).toFixed(2)}\r\n                  </Typography>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n            \r\n            <Grid item xs={12} md={3}>\r\n              <Card>\r\n                <CardContent>\r\n                  <Typography variant=\"h6\" gutterBottom sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n                    <TrendingDown color=\"error\" />\r\n                    Total Expense\r\n                  </Typography>\r\n                  <Typography variant=\"h4\" color=\"error.main\" fontWeight=\"bold\">\r\n                    RM {walletTransactions.filter(t => !t.isIncome).reduce((sum, t) => sum + (t.amount || 0), 0).toFixed(2)}\r\n                  </Typography>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n            \r\n            <Grid item xs={12} md={3}>\r\n              <Card>\r\n                <CardContent>\r\n                  <Typography variant=\"h6\" gutterBottom sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n                    <AccountBalance color=\"info\" />\r\n                    Net Income\r\n                  </Typography>\r\n                  <Typography variant=\"h4\" color=\"info.main\" fontWeight=\"bold\">\r\n                    RM {(walletTransactions.filter(t => t.isIncome).reduce((sum, t) => sum + (t.amount || 0), 0) - \r\n                         walletTransactions.filter(t => !t.isIncome).reduce((sum, t) => sum + (t.amount || 0), 0)).toFixed(2)}\r\n                  </Typography>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n          </Grid>\r\n\r\n          {/* 錢包交易記錄表格 */}\r\n          <Card>\r\n            <CardContent>\r\n              <Typography variant=\"h6\" gutterBottom>Wallet Transactions</Typography>\r\n              {walletLoading ? (\r\n                <Box display=\"flex\" justifyContent=\"center\" p={3}>\r\n                  <CircularProgress />\r\n                </Box>\r\n              ) : walletTransactions.length > 0 ? (\r\n                <TableContainer>\r\n                  <Table>\r\n                    <TableHead>\r\n                      <TableRow>\r\n                        <TableCell>Date</TableCell>\r\n                        <TableCell>Type</TableCell>\r\n                        <TableCell>Description</TableCell>\r\n                        <TableCell>Amount</TableCell>\r\n                        <TableCell>Balance After</TableCell>\r\n                        <TableCell>Reference</TableCell>\r\n                      </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                      {walletTransactions.map((transaction, index) => (\r\n                        <TableRow key={index}>\r\n                          <TableCell>\r\n                            {transaction.transactionDate ? new Date(transaction.transactionDate).toLocaleDateString() : 'N/A'}\r\n                          </TableCell>\r\n                          <TableCell>\r\n                            <Chip\r\n                              label={transaction.transactionType}\r\n                              color={transaction.isIncome ? 'success' : 'error'}\r\n                              size=\"small\"\r\n                            />\r\n                          </TableCell>\r\n                          <TableCell>\r\n                            <Typography variant=\"body2\">\r\n                              {transaction.description || 'N/A'}\r\n                            </Typography>\r\n                          </TableCell>\r\n                          <TableCell>\r\n                            <Typography \r\n                              variant=\"body2\" \r\n                              color={transaction.isIncome ? 'success.main' : 'error.main'}\r\n                              fontWeight=\"bold\"\r\n                            >\r\n                              {transaction.isIncome ? '+' : '-'} RM {transaction.amount?.toFixed(2) || '0.00'}\r\n                            </Typography>\r\n                          </TableCell>\r\n                          <TableCell>\r\n                            <Typography variant=\"body2\">\r\n                              RM {transaction.balanceAfter?.toFixed(2) || '0.00'}\r\n                            </Typography>\r\n                          </TableCell>\r\n                          <TableCell>\r\n                            <Typography variant=\"caption\" color=\"text.secondary\">\r\n                              {transaction.referenceType} {transaction.referenceId}\r\n                            </Typography>\r\n                          </TableCell>\r\n                        </TableRow>\r\n                      ))}\r\n                    </TableBody>\r\n                  </Table>\r\n                </TableContainer>\r\n              ) : (\r\n                <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\" p={3}>\r\n                  <AccountBalanceWallet sx={{ fontSize: 64, color: 'text.secondary', mb: 2 }} />\r\n                  <Typography variant=\"h6\" color=\"text.secondary\" gutterBottom>\r\n                    No Wallet Transactions\r\n                  </Typography>\r\n                  <Typography variant=\"body2\" color=\"text.secondary\" textAlign=\"center\">\r\n                    Your wallet transactions will appear here once you have completed sessions and received payments.\r\n                  </Typography>\r\n                </Box>\r\n              )}\r\n            </CardContent>\r\n          </Card>\r\n        </>\r\n      ) : (\r\n        // 收入歷史記錄\r\n        <>\r\n      {/* 收入統計卡片 */}\r\n      <Grid container spacing={3} sx={{ mb: 3 }}>\r\n        <Grid item xs={12} md={4}>\r\n          <Card>\r\n            <CardContent>\r\n              <Typography variant=\"h6\" gutterBottom sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n                <AccountBalanceWallet color=\"primary\" />\r\n                Wallet Balance\r\n              </Typography>\r\n              {walletBalance ? (\r\n                <Typography variant=\"h4\" color=\"primary\" fontWeight=\"bold\">\r\n                  RM {walletBalance.balance?.toFixed(2) || '0.00'}\r\n                </Typography>\r\n              ) : (\r\n                <Typography variant=\"body2\" color=\"text.secondary\">\r\n                      RM 0.00\r\n                </Typography>\r\n              )}\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n        \r\n        <Grid item xs={12} md={4}>\r\n          <Card>\r\n            <CardContent>\r\n              <Typography variant=\"h6\" gutterBottom sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n                <AttachMoney color=\"success\" />\r\n                Total Income\r\n              </Typography>\r\n              <Typography variant=\"h4\" color=\"success.main\" fontWeight=\"bold\">\r\n                RM {incomeHistory.reduce((sum, record) => sum + (record.amount || 0), 0).toFixed(2)}\r\n              </Typography>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n        \r\n        <Grid item xs={12} md={4}>\r\n          <Card>\r\n            <CardContent>\r\n              <Typography variant=\"h6\" gutterBottom sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n                <Receipt color=\"info\" />\r\n                Total Records\r\n              </Typography>\r\n              <Typography variant=\"h4\" color=\"info.main\" fontWeight=\"bold\">\r\n                {incomeHistory.length}\r\n              </Typography>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      {/* 收入歷史表格 */}\r\n      <Card>\r\n        <CardContent>\r\n          <Typography variant=\"h6\" gutterBottom>Income Records</Typography>\r\n          {incomeLoading ? (\r\n            <Box display=\"flex\" justifyContent=\"center\" p={3}>\r\n              <CircularProgress />\r\n            </Box>\r\n          ) : incomeHistory.length > 0 ? (\r\n            <TableContainer>\r\n              <Table>\r\n                <TableHead>\r\n                  <TableRow>\r\n                    <TableCell>Date</TableCell>\r\n                    <TableCell>Session</TableCell>\r\n                    <TableCell>Students</TableCell>\r\n                    <TableCell>Session Revenue</TableCell>\r\n                    <TableCell>Coach Income (80%)</TableCell>\r\n                    <TableCell>Transaction ID</TableCell>\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {incomeHistory.map((record, index) => (\r\n                    <TableRow key={index}>\r\n                      <TableCell>\r\n                        {record.paymentDate ? new Date(record.paymentDate).toLocaleDateString() : 'N/A'}\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <Typography variant=\"body2\" fontWeight=\"bold\">\r\n                          {record.sessionTitle || 'N/A'}\r\n                        </Typography>\r\n                        <Typography variant=\"caption\" color=\"text.secondary\">\r\n                          {record.sessionDate ? new Date(record.sessionDate).toLocaleDateString() : 'N/A'}\r\n                        </Typography>\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        {record.studentCount || 'N/A'}\r\n                      </TableCell>\r\n                      <TableCell>\r\n                            <Typography variant=\"body2\" color=\"success.main\" fontWeight=\"bold\">\r\n                              RM {record.totalSessionRevenue?.toFixed(2) || '0.00'}\r\n                        </Typography>\r\n                      </TableCell>\r\n                      <TableCell>\r\n                            <Typography variant=\"body2\" color=\"primary\" fontWeight=\"bold\">\r\n                              RM {record.amount?.toFixed(2) || '0.00'}\r\n                        </Typography>\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <Typography variant=\"caption\" color=\"text.secondary\">\r\n                          {record.transactionId || 'N/A'}\r\n                        </Typography>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n                </TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n          ) : (\r\n            <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\" p={3}>\r\n              <Receipt sx={{ fontSize: 64, color: 'text.secondary', mb: 2 }} />\r\n              <Typography variant=\"h6\" color=\"text.secondary\" gutterBottom>\r\n                No Income Records\r\n              </Typography>\r\n              <Typography variant=\"body2\" color=\"text.secondary\" textAlign=\"center\">\r\n                You haven't received any income yet. Income will appear here after your completed sessions are settled.\r\n              </Typography>\r\n            </Box>\r\n          )}\r\n        </CardContent>\r\n      </Card>\r\n        </>\r\n      )}\r\n    </Box>\r\n  );\r\n\r\n  // 檢查用戶權限和狀態\r\n  const checkUserPermissions = () => {\r\n    console.log('=== User Permission Check ===');\r\n    const token = localStorage.getItem('authToken');\r\n    console.log('Auth token exists:', !!token);\r\n    \r\n    if (token) {\r\n      try {\r\n        const payload = JSON.parse(atob(token.split('.')[1]));\r\n        console.log('JWT payload:', payload);\r\n        console.log('User role:', payload.role);\r\n        console.log('User type:', payload.userType);\r\n        console.log('User ID:', payload.userId);\r\n        console.log('Subject:', payload.sub);\r\n      } catch (error) {\r\n        console.error('Failed to parse JWT token:', error);\r\n      }\r\n    }\r\n    \r\n    console.log('Current user:', currentUser);\r\n    console.log('Has COACH role:', hasRole('COACH'));\r\n    console.log('User type check:', currentUser?.userType === 'COACH' || currentUser?.userType === 'Coach');\r\n  };\r\n\r\n  // 在組件加載時檢查權限\r\n  useEffect(() => {\r\n    checkUserPermissions();\r\n  }, []);\r\n\r\n  return (\r\n    <Box sx={{ display: 'flex' }}>\r\n      <AppBar\r\n        position=\"fixed\"\r\n        sx={{\r\n          width: { sm: `calc(100% - ${drawerWidth}px)` },\r\n          ml: { sm: `${drawerWidth}px` },\r\n          bgcolor: 'background.paper',\r\n          color: 'text.primary',\r\n          boxShadow: theme.palette.mode === 'dark' ? '0 2px 10px rgba(0,0,0,0.3)' : '0 2px 10px rgba(0,0,0,0.1)'\r\n        }}\r\n      >\r\n        <Toolbar>\r\n          <IconButton\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            edge=\"start\"\r\n            onClick={handleDrawerToggle}\r\n            sx={{ mr: 2, display: { sm: 'none' } }}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" noWrap component=\"div\" sx={{ flexGrow: 1 }}>\r\n            Coach Management System\r\n          </Typography>\r\n          <Badge badgeContent={4} color=\"error\">\r\n            <IconButton color=\"inherit\">\r\n              <Notifications />\r\n            </IconButton>\r\n          </Badge>\r\n          <Box sx={{ position: 'relative', ml: 2 }}>\r\n            <Button\r\n              variant=\"text\"\r\n              onClick={() => setShowUserMenu((v) => !v)}\r\n              sx={{ display: 'flex', alignItems: 'center', gap: 1, color: 'inherit', p: 0, minWidth: 0 }}\r\n            >\r\n              <Avatar sx={{ bgcolor: 'primary.main', width: 32, height: 32 }}>\r\n                {coachInitial}\r\n              </Avatar>\r\n              <Typography sx={{ display: { xs: 'none', sm: 'block' }, color: 'primary.main', fontWeight: 600 }}>\r\n                {coachName}\r\n              </Typography>\r\n            </Button>\r\n            {showUserMenu && (\r\n              <Paper sx={{\r\n                position: 'absolute',\r\n                top: '100%',\r\n                right: 0,\r\n                mt: 1,\r\n                minWidth: 120,\r\n                boxShadow: 3,\r\n                zIndex: 10,\r\n                backgroundColor: theme.palette.background.paper\r\n              }}>\r\n                <Button\r\n                  fullWidth\r\n                  onClick={handleLogout}\r\n                  sx={{ justifyContent: 'flex-start', px: 2, py: 1 }}\r\n                >\r\n                  Logout\r\n                </Button>\r\n              </Paper>\r\n            )}\r\n          </Box>\r\n        </Toolbar>\r\n      </AppBar>\r\n      \r\n      <Box\r\n        component=\"nav\"\r\n        sx={{ width: { sm: drawerWidth }, flexShrink: { sm: 0 } }}\r\n      >\r\n        <Drawer\r\n          variant=\"temporary\"\r\n          open={mobileOpen}\r\n          onClose={handleDrawerToggle}\r\n          ModalProps={{ keepMounted: true }}\r\n          sx={{\r\n            display: { xs: 'block', sm: 'none' },\r\n            '& .MuiDrawer-paper': { \r\n              boxSizing: 'border-box', \r\n              width: drawerWidth,\r\n              backgroundColor: theme.palette.background.paper\r\n            },\r\n          }}\r\n        >\r\n          {drawer}\r\n        </Drawer>\r\n        <Drawer\r\n          variant=\"permanent\"\r\n          sx={{\r\n            display: { xs: 'none', sm: 'block' },\r\n            '& .MuiDrawer-paper': { \r\n              boxSizing: 'border-box', \r\n              width: drawerWidth,\r\n              backgroundColor: theme.palette.background.paper,\r\n              borderRight: `1px solid ${theme.palette.divider}`\r\n            },\r\n          }}\r\n          open\r\n        >\r\n          {drawer}\r\n        </Drawer>\r\n      </Box>\r\n      \r\n      <Box\r\n        component=\"main\"\r\n        sx={{\r\n          flexGrow: 1,\r\n          p: 3,\r\n          width: { sm: `calc(100% - ${drawerWidth}px)` },\r\n          minHeight: '100vh',\r\n          bgcolor: theme.palette.background.default\r\n        }}\r\n      >\r\n        <Toolbar />\r\n        {renderContent()}\r\n      </Box>\r\n\r\n      {/* 對話框 */}\r\n      <Dialog \r\n        open={openDialog} \r\n        onClose={handleCloseDialog} \r\n        maxWidth=\"sm\" \r\n        fullWidth\r\n        PaperProps={{\r\n          sx: {\r\n            backgroundColor: theme.palette.background.paper,\r\n            color: theme.palette.text.primary\r\n          }\r\n        }}\r\n      >\r\n        <DialogTitle>\r\n          {dialogType === 'addStudent' ? 'Add Student' : 'Add Session'}\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          {dialogType === 'addStudent' ? (\r\n            <Box sx={{ pt: 2 }}>\r\n              <TextField\r\n                fullWidth\r\n                label=\"Student Name\"\r\n                variant=\"outlined\"\r\n                sx={{ mb: 2 }}\r\n              />\r\n              <FormControl fullWidth sx={{ mb: 2 }}>\r\n                <InputLabel>Level</InputLabel>\r\n                <Select label=\"Level\">\r\n                  <MenuItem value=\"Beginner\">Beginner</MenuItem>\r\n                  <MenuItem value=\"Intermediate\">Intermediate</MenuItem>\r\n                  <MenuItem value=\"Advanced\">Advanced</MenuItem>\r\n                </Select>\r\n              </FormControl>\r\n              <TextField\r\n                fullWidth\r\n                label=\"Contact Number\"\r\n                variant=\"outlined\"\r\n                sx={{ mb: 2 }}\r\n              />\r\n              <TextField\r\n                fullWidth\r\n                label=\"Email\"\r\n                variant=\"outlined\"\r\n                type=\"email\"\r\n              />\r\n            </Box>\r\n          ) : (\r\n            <Box sx={{ pt: 2 }}>\r\n              <FormControl fullWidth sx={{ mb: 2 }}>\r\n                <InputLabel>Student</InputLabel>\r\n                <Select label=\"Student\">\r\n                  {studentList.map((student) => (\r\n                    <MenuItem key={student.id} value={student.name}>\r\n                      {student.name}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n              <TextField\r\n                fullWidth\r\n                label=\"Date\"\r\n                type=\"date\"\r\n                variant=\"outlined\"\r\n                InputLabelProps={{ shrink: true }}\r\n                sx={{ mb: 2 }}\r\n              />\r\n              <TextField\r\n                fullWidth\r\n                label=\"Time\"\r\n                type=\"time\"\r\n                variant=\"outlined\"\r\n                InputLabelProps={{ shrink: true }}\r\n                sx={{ mb: 2 }}\r\n              />\r\n              <FormControl fullWidth>\r\n                <InputLabel>Session Type</InputLabel>\r\n                <Select label=\"Session Type\">\r\n                  <MenuItem value=\"Private Training\">Private Training</MenuItem>\r\n                  <MenuItem value=\"Group Session\">Group Session</MenuItem>\r\n                  <MenuItem value=\"Evaluation Session\">Evaluation Session</MenuItem>\r\n                </Select>\r\n              </FormControl>\r\n            </Box>\r\n          )}\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleCloseDialog}>Cancel</Button>\r\n          <Button variant=\"contained\" onClick={handleCloseDialog}>\r\n            {dialogType === 'addStudent' ? 'Add Student' : 'Add Session'}\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n      {/* 新增：補課 Dialog */}\r\n      <Dialog \r\n        open={showMakeupDialog} \r\n        onClose={() => setShowMakeupDialog(false)}\r\n        PaperProps={{\r\n          sx: {\r\n            backgroundColor: theme.palette.background.paper,\r\n            color: theme.palette.text.primary\r\n          }\r\n        }}\r\n      >\r\n        <DialogTitle>Schedule Make-up Session</DialogTitle>\r\n        <DialogContent>\r\n          <TextField\r\n            label=\"Court\"\r\n            name=\"courtId\"\r\n            value={(() => {\r\n              const court = sessions.find(s => s.id === makeupOriginSession?.id)?.court;\r\n              return court ? court.name : '';\r\n            })()}\r\n            fullWidth\r\n            margin=\"normal\"\r\n            disabled\r\n          />\r\n          <TextField\r\n            label=\"Title\"\r\n            name=\"title\"\r\n            value={makeupSessionData.title}\r\n            onChange={handleMakeupInputChange}\r\n            fullWidth\r\n            margin=\"normal\"\r\n          />\r\n          <TextField\r\n            label=\"Description\"\r\n            name=\"description\"\r\n            value={makeupSessionData.description}\r\n            onChange={handleMakeupInputChange}\r\n            fullWidth\r\n            margin=\"normal\"\r\n          />\r\n          {makeupOriginSession && (\r\n            <Box sx={{ \r\n              mb: 2, \r\n              p: 1, \r\n              bgcolor: theme.palette.mode === 'dark' ? '#2d2d2d' : '#f5f5f5', \r\n              borderRadius: 2 \r\n            }}>\r\n              <div style={{ fontWeight: 600, marginBottom: 4 }}>Original Cancelled Session</div>\r\n              <div>Date: {makeupOriginSession.startTime ? new Date(makeupOriginSession.startTime).toLocaleDateString() : ''}</div>\r\n              <div>Time: {makeupOriginSession.startTime ? new Date(makeupOriginSession.startTime).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }) : ''} - {makeupOriginSession.endTime ? new Date(makeupOriginSession.endTime).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }) : ''}</div>\r\n            </Box>\r\n          )}\r\n          <TextField\r\n            label=\"Date\"\r\n            type=\"date\"\r\n            value={makeupSessionData.date || ''}\r\n            onChange={async e => {\r\n              const dateStr = e.target.value;\r\n              setMakeupSessionData({ ...makeupSessionData, date: dateStr, startTime: '', endTime: '' });\r\n              // fetch busySlots for this date\r\n              const courtId = sessions.find(s => s.id === makeupOriginSession?.id)?.court?.id;\r\n              if (courtId && dateStr) {\r\n                const slots = await CoachService.getAvailableTimes(courtId, dateStr);\r\n                setBusySlots(slots);\r\n              } else {\r\n                setBusySlots([]);\r\n              }\r\n            }}\r\n            fullWidth\r\n            margin=\"normal\"\r\n            InputLabelProps={{ shrink: true }}\r\n          />\r\n          {makeupSessionData.date && (\r\n            <Box sx={{ my: 2 }}>\r\n              <div style={{ fontWeight: 600, marginBottom: 8 }}>Select Start Time</div>\r\n              <Grid container spacing={1.5}>\r\n                {hourSlots.map((slot, idx) => {\r\n                  const key = slot.start + '-' + slot.end;\r\n                  // 只要有任何 busySlot 時間重疊，該格就 disabled\r\n                  const isBusy = busySlots && busySlots.some(s => {\r\n                    const sStart = s.start.slice(11, 16);\r\n                    const sEnd = s.end.slice(11, 16);\r\n                    // slot 格子的時間\r\n                    const slotStart = slot.start;\r\n                    const slotEnd = slot.end;\r\n                    // 有重疊就算 busy\r\n                    return slotStart < sEnd && slotEnd > sStart;\r\n                  });\r\n                  const isSelected = makeupSessionData.selectedSlots && makeupSessionData.selectedSlots.some(s => s.start === slot.start && s.end === slot.end);\r\n                  return (\r\n                    <Grid item xs={4} sm={3} md={2} key={key}>\r\n                      <Button\r\n                        fullWidth\r\n                        variant={isSelected ? \"contained\" : \"outlined\"}\r\n                        onClick={() => !isBusy && handleMakeupSlotSelect(slot)}\r\n                        disabled={isBusy}\r\n                        sx={{\r\n                          py: 1.5,\r\n                          borderRadius: '12px',\r\n                          fontWeight: 600,\r\n                          ...(isSelected ? {\r\n                            background: 'linear-gradient(90deg, #6a11cb 0%, #2575fc 100%)',\r\n                            color: 'white',\r\n                            boxShadow: '0 4px 8px rgba(37, 117, 252, 0.3)'\r\n                          } : {}),\r\n                          ...(isBusy ? {\r\n                            borderColor: '#aaa',\r\n                            color: '#aaa',\r\n                            background: theme.palette.mode === 'dark' ? '#424242' : '#f5f5f5',\r\n                            opacity: 0.7\r\n                          } : {})\r\n                        }}\r\n                      >\r\n                        {slot.start}\r\n                      </Button>\r\n                    </Grid>\r\n                  );\r\n                })}\r\n              </Grid>\r\n            </Box>\r\n          )}\r\n          <TextField\r\n            label=\"Max Participants\"\r\n            name=\"maxParticipants\"\r\n            type=\"number\"\r\n            value={(() => {\r\n              const session = sessions.find(s => s.id === makeupOriginSession?.id);\r\n              return session ? session.maxParticipants : makeupSessionData.maxParticipants;\r\n            })()}\r\n            fullWidth\r\n            margin=\"normal\"\r\n            disabled\r\n          />\r\n          <TextField\r\n            label=\"Price\"\r\n            name=\"price\"\r\n            type=\"number\"\r\n            value={0}\r\n            fullWidth\r\n            margin=\"normal\"\r\n            disabled\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setShowMakeupDialog(false)} color=\"inherit\">Cancel</Button>\r\n          <Button onClick={handleCreateMakeupSession} variant=\"contained\" color=\"primary\">Create Make-up</Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n      <Snackbar open={cancelSuccess} autoHideDuration={6000} onClose={() => setCancelSuccess(false)}>\r\n        <Alert onClose={() => setCancelSuccess(false)} severity=\"success\" sx={{ width: '100%' }}>\r\n          {cancelMessage}\r\n          <Box mt={2}>\r\n            <Button variant=\"contained\" color=\"primary\" onClick={() => setShowMakeupDialog(true)}>\r\n              Make a Replacement Class\r\n            </Button>\r\n          </Box>\r\n        </Alert>\r\n      </Snackbar>\r\n      <Dialog \r\n        open={showForceCancelDialog} \r\n        onClose={() => setShowForceCancelDialog(false)}\r\n        PaperProps={{\r\n          sx: {\r\n            backgroundColor: theme.palette.background.paper,\r\n            color: theme.palette.text.primary\r\n          }\r\n        }}\r\n      >\r\n        <DialogTitle>Force Cancel Session</DialogTitle>\r\n        <DialogContent>\r\n          <Typography color=\"error\" mb={2}>This session has participants. Please provide a reason for cancellation. All participants will be notified and refunded.</Typography>\r\n          <TextField\r\n            label=\"Reason for cancellation\"\r\n            value={cancelReason}\r\n            onChange={e => setCancelReason(e.target.value)}\r\n            fullWidth\r\n            multiline\r\n            minRows={2}\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setShowForceCancelDialog(false)} color=\"inherit\">Cancel</Button>\r\n          <Button onClick={handleForceCancel} variant=\"contained\" color=\"error\" disabled={!cancelReason}>Force Cancel</Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Coach Comment Dialog */}\r\n      <Dialog \r\n        open={commentDialog.open} \r\n        onClose={() => setCommentDialog({ open: false, request: null, action: '' })}\r\n        PaperProps={{\r\n          sx: {\r\n            backgroundColor: theme.palette.background.paper,\r\n            color: theme.palette.text.primary\r\n          }\r\n        }}\r\n      >\r\n        <DialogTitle>\r\n          {commentDialog.action === 'approve' ? 'Approve Makeup Request' : 'Decline Makeup Request'}\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <Typography variant=\"body2\" sx={{ mb: 2 }}>\r\n            {commentDialog.request && (\r\n              <>\r\n                <strong>Student:</strong> {commentDialog.request.studentName}<br/>\r\n                <strong>Original Session:</strong> {new Date(commentDialog.request.originalDate).toLocaleDateString()}<br/>\r\n                <strong>Student's Reason:</strong> {commentDialog.request.reason}<br/>\r\n                <strong>Preferred Date:</strong> {new Date(commentDialog.request.preferredDate).toLocaleDateString()}\r\n              </>\r\n            )}\r\n          </Typography>\r\n          <TextField\r\n            label=\"Coach Response (Optional)\"\r\n            value={coachComment}\r\n            onChange={(e) => setCoachComment(e.target.value)}\r\n            fullWidth\r\n            multiline\r\n            rows={3}\r\n            placeholder=\"Add your response or notes here...\"\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setCommentDialog({ open: false, request: null, action: '' })}>\r\n            Cancel\r\n          </Button>\r\n          <Button \r\n            onClick={handleSubmitComment}\r\n            variant=\"contained\"\r\n            color={commentDialog.action === 'approve' ? 'success' : 'error'}\r\n          >\r\n            {commentDialog.action === 'approve' ? 'Approve' : 'Decline'}\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Book Replacement Session Dialog */}\r\n      <Dialog \r\n        open={bookReplacementDialog.open} \r\n        onClose={() => setBookReplacementDialog({ open: false, request: null })} \r\n        maxWidth=\"md\" \r\n        fullWidth\r\n        PaperProps={{\r\n          sx: {\r\n            backgroundColor: theme.palette.background.paper,\r\n            color: theme.palette.text.primary\r\n          }\r\n        }}\r\n      >\r\n        <DialogTitle>\r\n          {bookReplacementDialog.batchRequests ? \r\n            `Book Group Replacement Session for ${bookReplacementDialog.batchRequests.length} Students` :\r\n            'Book Replacement Session for Student'\r\n          }\r\n          {replacementSessionData.originalDuration && (\r\n            <Typography variant=\"subtitle2\" color=\"text.secondary\" sx={{ mt: 1 }}>\r\n              (Same duration as original: {replacementSessionData.originalDuration} hours)\r\n            </Typography>\r\n          )}\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          {bookReplacementDialog.request && (\r\n            <Box sx={{ \r\n              mb: 2, \r\n              p: 2, \r\n              bgcolor: theme.palette.mode === 'dark' ? '#2d2d2d' : '#f5f5f5', \r\n              borderRadius: 1 \r\n            }}>\r\n              <Typography variant=\"subtitle2\" gutterBottom>\r\n                {bookReplacementDialog.batchRequests ? 'Students Request Details:' : 'Student Request Details:'}\r\n              </Typography>\r\n              {bookReplacementDialog.batchRequests ? (\r\n                // 批量請求顯示\r\n                <Box>\r\n                  <Typography variant=\"body2\" sx={{ mb: 2 }}>\r\n                    <strong>Number of Students:</strong> {bookReplacementDialog.batchRequests.length}<br/>\r\n                    <strong>Original Session Duration:</strong> {replacementSessionData.originalDuration || 1} hours\r\n                  </Typography>\r\n                  <Typography variant=\"subtitle2\" gutterBottom>Student List:</Typography>\r\n                  {bookReplacementDialog.batchRequests.map((req, index) => (\r\n                    <Typography key={req.id} variant=\"body2\" sx={{ mb: 1, pl: 2 }}>\r\n                      {index + 1}. <strong>{req.studentName}</strong> - {req.reason}\r\n                    </Typography>\r\n                  ))}\r\n                </Box>\r\n              ) : (\r\n                // 單個請求顯示\r\n                <Typography variant=\"body2\">\r\n                  <strong>Student:</strong> {bookReplacementDialog.request.studentName}<br/>\r\n                  <strong>Original Session:</strong> {bookReplacementDialog.request.originalSessionTitle}<br/>\r\n                  <strong>Original Date:</strong> {new Date(bookReplacementDialog.request.originalDate).toLocaleDateString()}<br/>\r\n                  <strong>Original Time:</strong> {bookReplacementDialog.request.originalSessionStartTime ? \r\n                    new Date(bookReplacementDialog.request.originalSessionStartTime).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }) : ''} - \r\n                    {bookReplacementDialog.request.originalSessionEndTime ? \r\n                    new Date(bookReplacementDialog.request.originalSessionEndTime).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }) : ''}<br/>\r\n                  <strong>Original Duration:</strong> {replacementSessionData.originalDuration || 1} hours<br/>\r\n                  <strong>Reason:</strong> {bookReplacementDialog.request.reason}\r\n                </Typography>\r\n              )}\r\n            </Box>\r\n          )}\r\n          \r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                label=\"Session Title\"\r\n                value={replacementSessionData.title}\r\n                onChange={(e) => setReplacementSessionData({...replacementSessionData, title: e.target.value})}\r\n                fullWidth\r\n                margin=\"normal\"\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <Box sx={{ p: 2, bgcolor: '#f8f9fa', borderRadius: 1, mb: 2 }}>\r\n                <Typography variant=\"subtitle2\" color=\"primary\" gutterBottom>\r\n                  Original Venue Information\r\n                </Typography>\r\n                <Typography variant=\"body2\">\r\n                  <strong>Venue:</strong> {replacementSessionData.venueName || 'Not specified'}<br/>\r\n                  <strong>State:</strong> {replacementSessionData.state || 'Not specified'}\r\n                </Typography>\r\n              </Box>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <FormControl fullWidth margin=\"normal\" required>\r\n                <InputLabel>Select Court</InputLabel>\r\n                <Select\r\n                  value={replacementSessionData.courtId || ''}\r\n                  onChange={(e) => {\r\n                    const courtId = e.target.value;\r\n                    setReplacementSessionData({\r\n                      ...replacementSessionData,\r\n                      courtId,\r\n                      date: '',\r\n                      availableSlots: [],\r\n                      selectedSlot: ''\r\n                    });\r\n                  }}\r\n                  label=\"Select Court\"\r\n                >\r\n                                    <MenuItem value=\"\">Select a court</MenuItem>\r\n                  {courts.length === 0 ? (\r\n                    <MenuItem disabled>No courts available</MenuItem>\r\n                  ) : (\r\n                    (() => {\r\n                      console.log('=== Court Selection Debug ===');\r\n                      console.log('Courts array:', courts);\r\n                      console.log('Venues array:', venues);\r\n                      console.log('Replacement session data:', replacementSessionData);\r\n                      console.log('Original state:', replacementSessionData.state);\r\n                      \r\n                      const filteredCourts = courts.filter(court => {\r\n                        console.log('Checking court:', court.name, 'venue state:', court.venue?.state, 'original state:', replacementSessionData.state);\r\n                        \r\n                        // 只顯示與原始場地相同州的球場\r\n                        if (replacementSessionData.state && court.venue?.state === replacementSessionData.state) {\r\n                          console.log('Court matches state:', court.name);\r\n                          return true;\r\n                        }\r\n                        // 如果沒有州信息，顯示所有球場\r\n                        if (!replacementSessionData.state) {\r\n                          console.log('No original state, showing all courts');\r\n                          return true;\r\n                        }\r\n                        console.log('Court does not match state:', court.name);\r\n                        return false;\r\n                      });\r\n                      \r\n                      console.log('Filtered courts (same state):', filteredCourts);\r\n                      console.log('Filtered courts count:', filteredCourts.length);\r\n                      \r\n                      return filteredCourts\r\n                        .sort((a, b) => {\r\n                          // 將原始場地的球場排在前面\r\n                          if (a.venue?.id === replacementSessionData.venueId && b.venue?.id !== replacementSessionData.venueId) {\r\n                            return -1;\r\n                          }\r\n                          if (a.venue?.id !== replacementSessionData.venueId && b.venue?.id === replacementSessionData.venueId) {\r\n                            return 1;\r\n                          }\r\n                          // 然後按場地名稱排序\r\n                          if (a.venue?.name && b.venue?.name) {\r\n                            return a.venue.name.localeCompare(b.venue.name);\r\n                          }\r\n                          return 0;\r\n                        })\r\n                        .map(court => (\r\n                          <MenuItem key={court.id} value={court.id}>\r\n                            <Box>\r\n                              <Typography variant=\"body2\">\r\n                                {court.name} - {court.venue?.name || 'Unknown Venue'}\r\n                              </Typography>\r\n                              <Typography variant=\"caption\" color=\"text.secondary\">\r\n                                {court.venue?.state || 'Unknown State'}\r\n                              </Typography>\r\n                              {court.venue?.id === replacementSessionData.venueId && (\r\n                                <Typography variant=\"caption\" color=\"success.main\" sx={{ ml: 1 }}>\r\n                                  (Original Venue)\r\n                                </Typography>\r\n                              )}\r\n                            </Box>\r\n                          </MenuItem>\r\n                        ));\r\n                    })()\r\n                  )}\r\n                </Select>\r\n              </FormControl>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                label=\"Description\"\r\n                value={replacementSessionData.description}\r\n                onChange={(e) => setReplacementSessionData({...replacementSessionData, description: e.target.value})}\r\n                fullWidth\r\n                multiline\r\n                rows={2}\r\n                margin=\"normal\"\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                label=\"Date\"\r\n                type=\"date\"\r\n                value={replacementSessionData.date || ''}\r\n                onChange={async (e) => {\r\n                  const dateStr = e.target.value;\r\n                  setReplacementSessionData({ \r\n                    ...replacementSessionData, \r\n                    date: dateStr, \r\n                    startTime: '', \r\n                    endTime: '', \r\n                    selectedSlots: [],\r\n                    selectedSlot: '' \r\n                  });\r\n                  // 獲取該日期的可用時段\r\n                  if (dateStr && replacementSessionData.courtId) {\r\n                    try {\r\n                      const availableSlots = await getAvailableSlotsForDate(dateStr, replacementSessionData.courtId);\r\n                      setReplacementSessionData(prev => ({ ...prev, availableSlots }));\r\n                    } catch (error) {\r\n                      console.error('Failed to fetch available slots:', error);\r\n                    }\r\n                  }\r\n                }}\r\n                fullWidth\r\n                margin=\"normal\"\r\n                InputLabelProps={{ shrink: true }}\r\n                disabled={!replacementSessionData.courtId}\r\n                helperText={!replacementSessionData.courtId ? \"Please select a court first\" : \"\"}\r\n              />\r\n            </Grid>\r\n            \r\n            {replacementSessionData.date && replacementSessionData.availableSlots && (\r\n              <Grid item xs={12}>\r\n                <Card sx={{ mt: 2, p: 2 }}>\r\n                  <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\r\n                    <CalendarToday sx={{ mr: 1, color: 'primary.main' }} />\r\n                    <Typography variant=\"h6\">\r\n                      Available Time Slots - {new Date(replacementSessionData.date).toLocaleDateString('en-US', { \r\n                        weekday: 'long', \r\n                        year: 'numeric', \r\n                        month: 'long', \r\n                        day: 'numeric' \r\n                      })}\r\n                    </Typography>\r\n                  </Box>\r\n                  <Grid container spacing={1}>\r\n                    {replacementSessionData.availableSlots.map((slot, index) => {\r\n                      const isSelected = replacementSessionData.selectedSlots.some(s => s.time === slot.time);\r\n                      const isAvailable = !slot.isBooked;\r\n                      const requiredSlots = Math.ceil(replacementSessionData.originalDuration || 1);\r\n                      const hasReachedLimit = replacementSessionData.selectedSlots.length >= requiredSlots;\r\n                      const isDisabled = !isAvailable || (hasReachedLimit && !isSelected);\r\n                      \r\n                      return (\r\n                        <Grid item xs={6} sm={4} md={3} key={index}>\r\n                          <Button\r\n                            fullWidth\r\n                            variant={isSelected ? \"contained\" : \"outlined\"}\r\n                            onClick={() => {\r\n                              if (isAvailable && (!hasReachedLimit || isSelected)) {\r\n                                handleSlotSelection(slot);\r\n                              }\r\n                            }}\r\n                            disabled={isDisabled}\r\n                            sx={{\r\n                              py: 1.5,\r\n                              borderRadius: '12px',\r\n                              fontWeight: 600,\r\n                              ...(isSelected ? {\r\n                                background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n                                color: 'white',\r\n                                boxShadow: '0 4px 8px rgba(102, 126, 234, 0.3)',\r\n                                '&:hover': {\r\n                                  background: 'linear-gradient(135deg, #5a6fd8 0%, #6a4190 100%)'\r\n                                }\r\n                              } : isAvailable && !hasReachedLimit ? {\r\n                                borderColor: '#667eea',\r\n                                color: '#667eea',\r\n                                backgroundColor: 'white',\r\n                                '&:hover': {\r\n                                  borderColor: '#5a6fd8',\r\n                                  backgroundColor: 'rgba(102, 126, 234, 0.05)',\r\n                                  transform: 'translateY(-1px)',\r\n                                  boxShadow: '0 2px 4px rgba(102, 126, 234, 0.2)'\r\n                                }\r\n                              } : {\r\n                                borderColor: '#ccc',\r\n                                color: '#999',\r\n                                backgroundColor: '#f8f9fa',\r\n                                opacity: 0.7,\r\n                                cursor: 'not-allowed',\r\n                                '&:hover': {\r\n                                  backgroundColor: '#f8f9fa',\r\n                                  transform: 'none',\r\n                                  boxShadow: 'none'\r\n                                }\r\n                              })\r\n                            }}\r\n                          >\r\n                            <Box>\r\n                              <Typography variant=\"body2\" sx={{ fontWeight: 600 }}>\r\n                                {slot.startTime}\r\n                              </Typography>\r\n                              {slot.isBooked && (\r\n                                <Typography variant=\"caption\" sx={{ \r\n                                  color: '#dc3545',\r\n                                  fontWeight: 500,\r\n                                  display: 'block',\r\n                                  mt: 0.5 \r\n                                }}>\r\n                                  Booked\r\n                                </Typography>\r\n                              )}\r\n                            </Box>\r\n                          </Button>\r\n                        </Grid>\r\n                      );\r\n                    })}\r\n                  </Grid>\r\n                  <Box sx={{ mt: 2, p: 1, bgcolor: '#e8f5e8', borderRadius: 1, textAlign: 'center' }}>\r\n                    <Typography variant=\"body2\" color=\"text.secondary\">\r\n                      RM45-60/hour\r\n                    </Typography>\r\n                    {replacementSessionData.selectedSlots.length > 0 && (\r\n                      <Typography variant=\"body2\" color=\"primary\" sx={{ mt: 1, fontWeight: 600 }}>\r\n                        Selected: {replacementSessionData.selectedSlots.length} hour(s) \r\n                        {replacementSessionData.selectedSlots.length >= Math.ceil(replacementSessionData.originalDuration || 1) && \r\n                          ' (Complete)'}\r\n                      </Typography>\r\n                    )}\r\n                  </Box>\r\n                </Card>\r\n              </Grid>\r\n            )}\r\n            <Grid item xs={12} md={6}>\r\n              <TextField\r\n                label=\"Duration (hours)\"\r\n                type=\"number\"\r\n                value={replacementSessionData.originalDuration || 1}\r\n                fullWidth\r\n                margin=\"normal\"\r\n                disabled\r\n                sx={{\r\n                  '& .MuiInputBase-input.Mui-disabled': {\r\n                    WebkitTextFillColor: 'rgba(0, 0, 0, 0.87)',\r\n                    backgroundColor: '#f5f5f5'\r\n                  }\r\n                }}\r\n                helperText={`Original session duration: ${replacementSessionData.originalDuration || 1} hours`}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} md={6}>\r\n              <TextField\r\n                label=\"Max Participants\"\r\n                type=\"number\"\r\n                value={bookReplacementDialog.batchRequests ? replacementSessionData.maxParticipants : 1}\r\n                onChange={(e) => setReplacementSessionData({...replacementSessionData, maxParticipants: parseInt(e.target.value)})}\r\n                fullWidth\r\n                margin=\"normal\"\r\n                disabled={!bookReplacementDialog.batchRequests}\r\n                inputProps={{ min: 1, max: 20 }}\r\n                sx={{\r\n                  '& .MuiInputBase-input.Mui-disabled': {\r\n                    WebkitTextFillColor: 'rgba(0, 0, 0, 0.87)',\r\n                    backgroundColor: '#f5f5f5'\r\n                  }\r\n                }}\r\n                helperText={bookReplacementDialog.batchRequests ? \r\n                  `Group session for ${bookReplacementDialog.batchRequests.length} students` : \r\n                  'Individual replacement session'\r\n                }\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setBookReplacementDialog({ open: false, request: null })}>\r\n            Cancel\r\n          </Button>\r\n          <Button \r\n            onClick={handleCreateReplacementSession}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            disabled={!replacementSessionData.title || !replacementSessionData.startTime}\r\n          >\r\n            Create & Approve\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </Box>\r\n  );\r\n} 
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball-frontend/src/components/coach/CoachingDashboard.jsx b/pickleball-frontend/src/components/coach/CoachingDashboard.jsx
--- a/pickleball-frontend/src/components/coach/CoachingDashboard.jsx	(revision 89327e12854b108d004ebb020d0592b1c618ecaf)
+++ b/pickleball-frontend/src/components/coach/CoachingDashboard.jsx	(date 1754335499902)
@@ -36,6 +36,7 @@
   InputLabel,
   Select,
   MenuItem,
+  FormHelperText,
   Badge,
   Tabs,
   Tab,
@@ -68,7 +69,10 @@
   Receipt,
   AccountBalanceWallet,
   TrendingDown,
-  AccountBalance
+  AccountBalance,
+  CheckCircleOutline,
+  // 移除 ExpandMore 导入
+  // 移除 ExpandLess 导入
 } from '@mui/icons-material';
 import CoachScheduleManagement from './CoachScheduleManagement';
 import MessagingPage from '../messaging/MessagingPage';
@@ -78,10 +82,11 @@
 import api from '../../api/axiosConfig';
 import { useNavigate } from 'react-router-dom';
 import StudentManagementSystem from './StudentManagementSystem';
-import DeleteIcon from '@mui/icons-material/Delete';
+// 移除删除按钮，不再需要 DeleteIcon
 import ClassSessionService from '../../service/ClassSessionService';
 import { DateTimePicker, LocalizationProvider } from '@mui/x-date-pickers';
 import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';
+import EditClassSessionDialog from '../class/EditClassSessionDialog';
 
 const drawerWidth = 240;
 
@@ -96,6 +101,7 @@
   const [loadingSessions, setLoadingSessions] = useState(false);
   const [sessionError, setSessionError] = useState('');
   const [expandedGroups, setExpandedGroups] = useState([]); // for expand/collapse
+  // 移除 replacement sessions 相关状态
   const { currentUser, logout, hasRole } = useAuth();
   const navigate = useNavigate();
   const [showUserMenu, setShowUserMenu] = useState(false);
@@ -107,47 +113,38 @@
   const [pendingRequestCount, setPendingRequestCount] = useState(0);
   const [unattendedClasses, setUnattendedClasses] = useState([]);
   const [unattendedClassesCount, setUnattendedClassesCount] = useState(0);
+  
+  // 編輯對話框相關狀態
+  const [editSession, setEditSession] = useState(null);
+  const [editDialogOpen, setEditDialogOpen] = useState(false);
+  
+  // 補課安排相關狀態
+  const [makeupDialogOpen, setMakeupDialogOpen] = useState(false);
+  const [selectedMakeupRequest, setSelectedMakeupRequest] = useState(null);
+  const [availableSessionsForMakeup, setAvailableSessionsForMakeup] = useState([]);
+  const [loadingAvailableSessions, setLoadingAvailableSessions] = useState(false);
+  const [selectedCourseForSlots, setSelectedCourseForSlots] = useState(null);
+  const [showSlotsDialog, setShowSlotsDialog] = useState(false);
+  
   // Add these two lines to fix no-undef error
   const coachInitial = currentUser?.username?.charAt(0)?.toUpperCase() || 'C';
   const coachName = currentUser?.username || 'Coach';
 
-  // 新增：獲取教練收入歷史
-  const [incomeHistory, setIncomeHistory] = useState([]);
-  const [incomeLoading, setIncomeLoading] = useState(false);
+  // 錢包相關狀態
   const [walletTransactions, setWalletTransactions] = useState([]);
   const [walletLoading, setWalletLoading] = useState(false);
-  const [showWalletTransactions, setShowWalletTransactions] = useState(false);
   const [walletBalance, setWalletBalance] = useState(null);
-  const [revenueStatus, setRevenueStatus] = useState([]);
-  const [revenueLoading, setRevenueLoading] = useState(false);
 
-  const fetchIncomeHistory = async () => {
-    try {
-      setIncomeLoading(true);
-      const response = await fetch('http://localhost:8081/api/coach/income-history', {
-        headers: {
-          'Authorization': `Bearer ${localStorage.getItem('authToken')}`
-        }
-      });
-      
-      if (response.ok) {
-        const data = await response.json();
-        setIncomeHistory(data.incomeHistory || []);
-        console.log('Income history:', data);
-      } else {
-        console.error('Failed to fetch income history');
-      }
-    } catch (error) {
-      console.error('Error fetching income history:', error);
-    } finally {
-      setIncomeLoading(false);
-    }
-  };
+
 
-  const fetchWalletBalance = async () => {
+  const fetchWalletBalance = async (forceRefresh = false) => {
     try {
       console.log('=== Fetching wallet balance ===');
-      const response = await CoachService.getWalletBalance();
+      console.log('Force refresh:', forceRefresh);
+      
+      // 添加時間戳參數來避免緩存
+      const timestamp = forceRefresh ? `?t=${Date.now()}` : '';
+      const response = await CoachService.getWalletBalance(timestamp);
       console.log('Wallet balance response:', response);
       setWalletBalance(response);
     } catch (error) {
@@ -164,10 +161,15 @@
     }
   };
 
-  const fetchWalletTransactions = async () => {
+  const fetchWalletTransactions = async (forceRefresh = false) => {
     try {
       setWalletLoading(true);
-      const response = await CoachService.getWalletTransactions();
+      console.log('=== Fetching wallet transactions ===');
+      console.log('Force refresh:', forceRefresh);
+      
+      // 添加時間戳參數來避免緩存
+      const timestamp = forceRefresh ? `?t=${Date.now()}` : '';
+      const response = await CoachService.getWalletTransactions(timestamp);
       setWalletTransactions(response.transactions || []);
     } catch (error) {
       console.error('Failed to fetch wallet transactions:', error);
@@ -176,23 +178,32 @@
     }
   };
 
-  const fetchRevenueStatus = async () => {
+
+
+  // 获取球场和场馆数据
+  const fetchCourtsAndVenues = async () => {
     try {
-      setRevenueLoading(true);
-      const response = await api.get('/coach/revenue-status');
-      setRevenueStatus(response.data.revenueStatus || []);
+      const courtsResponse = await fetch('http://localhost:8081/api/coach/all-courts', {
+        headers: {
+          'Authorization': `Bearer ${localStorage.getItem('authToken')}`,
+        }
+      });
+      
+      if (courtsResponse.ok) {
+        const courtsData = await courtsResponse.json();
+        setCourts(courtsData);
+      }
     } catch (error) {
-      console.error('Failed to fetch revenue status:', error);
-    } finally {
-      setRevenueLoading(false);
+      console.error('Failed to fetch courts:', error);
     }
   };
 
-  // 在組件加載時獲取收入歷史和錢包餘額
+  // 在組件加載時獲取錢包餘額
   useEffect(() => {
     if (currentUser?.id) {
-      fetchIncomeHistory();
       fetchWalletBalance();
+      fetchWalletTransactions();
+      fetchCourtsAndVenues();
     }
   }, [currentUser?.id]);
 
@@ -244,22 +255,32 @@
       if (currentUser && currentUser.id) {
         console.log('=== fetchLeaveRequests ===');
         console.log('Current user ID:', currentUser.id);
-        const data = await LeaveRequestService.getPendingRequestsByCoach(currentUser.id);
-        console.log('Fetched leave requests data:', data);
-        console.log('Number of requests:', data.length);
+        
+        // 获取所有请求，包括已批准的补课请求
+        const allData = await LeaveRequestService.getAllRequestsByCoach(currentUser.id);
+        const pendingData = await LeaveRequestService.getPendingRequestsByCoach(currentUser.id);
+        
+        console.log('Fetched all leave requests data:', allData);
+        console.log('Fetched pending leave requests data:', pendingData);
+        console.log('Number of all requests:', allData.length);
+        console.log('Number of pending requests:', pendingData.length);
         
         // 調試每個請求的場地信息
-        data.forEach((request, index) => {
-          console.log(`Request ${index + 1} venue info:`, {
+        allData.forEach((request, index) => {
+          console.log(`Request ${index + 1} info:`, {
+            id: request.id,
+            status: request.status,
             venue: request.venue,
             state: request.state,
             court: request.court,
-            originalSessionTitle: request.originalSessionTitle
+            originalSessionTitle: request.originalSessionTitle,
+            replacementSessionId: request.replacementSessionId,
+            studentId: request.studentId
           });
         });
         
-        setLeaveRequests(data);
-        setPendingRequestCount(data.length);
+        setLeaveRequests(allData); // 使用所有请求数据，包括已批准的补课
+        setPendingRequestCount(pendingData.length); // 只计算待处理请求数量
       }
     } catch (error) {
       console.error('Failed to fetch leave requests:', error);
@@ -285,7 +306,7 @@
   const [cancelMessage, setCancelMessage] = useState('');
   const [cancelledSessionObj, setCancelledSessionObj] = useState(null);
   const [busySlots, setBusySlots] = useState([]);
-  const [replacementClasses, setReplacementClasses] = useState([]);
+
 
   // 新增：Dashboard 數據計算
   const [dashboardStats, setDashboardStats] = useState({
@@ -338,46 +359,60 @@
     });
   };
 
-  // Fetch coach's class sessions for the current month on mount
-  useEffect(() => {
-    const fetchSessions = async () => {
-      setLoadingSessions(true);
-      setSessionError('');
-      try {
-        // 先調用調試端點
-        const debugData = await CoachService.getDebugSessions();
-        console.log('Debug data:', debugData);
-        
-        // Fetch all sessions: use a very early start and far future end
-        const start = new Date(2000, 0, 1, 0, 0, 0); // Jan 1, 2000
-        const end = new Date(2100, 11, 31, 23, 59, 59); // Dec 31, 2100
-        const data = await CoachService.getScheduleWithRegistrations(start.toISOString(), end.toISOString());
-        console.log('Fetched sessions data:', data); // 調試信息
-        setSessions(Array.isArray(data) ? data : []);
-      } catch (err) {
-        console.error('Error fetching sessions:', err); // 調試信息
-        setSessionError('Failed to load sessions.');
-      } finally {
-        setLoadingSessions(false);
-      }
-    };
+  // Fetch coach's class sessions
+  const fetchSessions = async () => {
+    setLoadingSessions(true);
+    setSessionError('');
+    try {
+      // 先調用調試端點
+      const debugData = await CoachService.getDebugSessions();
+      console.log('Debug data:', debugData);
+      
+      // Fetch all sessions: use a very early start and far future end
+      const start = new Date(2000, 0, 1, 0, 0, 0); // Jan 1, 2000
+      const end = new Date(2100, 11, 31, 23, 59, 59); // Dec 31, 2100
+      const data = await CoachService.getScheduleWithRegistrations(start.toISOString(), end.toISOString());
+      console.log('Fetched sessions data:', data); // 調試信息
+      
+      // 调试：检查是否有补课课程
+      const replacementSessions = data.filter(session => session.replacementForSessionId);
+      console.log('Replacement sessions found:', replacementSessions.length);
+      console.log('All sessions data:', data);
+      
+      // 检查所有课程的replacementForSessionId字段
+      data.forEach(session => {
+        if (session.replacementForSessionId) {
+          console.log('Found replacement session:', {
+            id: session.id,
+            title: session.title,
+            replacementForSessionId: session.replacementForSessionId
+          });
+        }
+      });
+      
+      replacementSessions.forEach(session => {
+        console.log('Replacement session:', {
+          id: session.id,
+          title: session.title,
+          replacementForSessionId: session.replacementForSessionId
+        });
+      });
+      
+      setSessions(Array.isArray(data) ? data : []);
+    } catch (err) {
+      console.error('Error fetching sessions:', err); // 調試信息
+      setSessionError('Failed to load sessions.');
+    } finally {
+      setLoadingSessions(false);
+    }
+  };
+
+  // Fetch coach's class sessions for the current month on mount
+  useEffect(() => {
     fetchSessions();
   }, []);
 
-  // Fetch replacement classes
-  useEffect(() => {
-    const fetchReplacements = async () => {
-      try {
-        if (currentUser && currentUser.id) {
-          const data = await ClassSessionService.getReplacementClasses(currentUser.id);
-          setReplacementClasses(Array.isArray(data) ? data : []);
-        }
-      } catch (err) {
-        console.error('Failed to load replacement classes:', err);
-      }
-    };
-    fetchReplacements();
-  }, [currentUser]);
+
 
   // Fetch unread messages count
   useEffect(() => {
@@ -507,6 +542,17 @@
       }
     };
     fetchData();
+    
+    // 設置自動刷新 - 每5分鐘刷新一次錢包數據
+    const walletRefreshInterval = setInterval(() => {
+      fetchWalletBalance();
+      fetchWalletTransactions();
+    }, 5 * 60 * 1000); // 5分鐘
+    
+    // 清理定時器
+    return () => {
+      clearInterval(walletRefreshInterval);
+    };
   }, []);
 
   // 計算 Dashboard 統計數據
@@ -784,6 +830,180 @@
     );
   };
 
+  // 移除 handleReplacementSessionExpand 函数
+
+
+
+  const handleArrangeMakeupClass = async (request) => {
+    try {
+      setSelectedMakeupRequest(request);
+      setLoadingAvailableSessions(true);
+      
+      // 使用現有的 sessions 資料，過濾出允許補課的課程
+      const availableSessions = sessions.filter(session => {
+        console.log(`Checking session ${session.id}: status=${session.status}, allowReplacement=${session.allowReplacement}, currentParticipants=${session.currentParticipants}, maxParticipants=${session.maxParticipants}`);
+        
+        // 基本條件檢查 - 临时放宽条件进行调试
+        const basicConditions = session.status === 'AVAILABLE' && 
+          new Date(session.startTime) > new Date(); // 只顯示未來的課程，暂时移除其他条件
+        
+        console.log(`Session ${session.id} basic conditions: ${basicConditions}`);
+        
+        if (!basicConditions) return false;
+        
+        // 檢查學生是否已經參加了這個課程
+        const studentAlreadyEnrolled = session.registrations && 
+          session.registrations.some(registration => {
+            const isEnrolled = registration.member?.id === request.studentId;
+            if (isEnrolled) {
+              console.log(`Student ${request.studentId} already enrolled in session ${session.id} (${session.title})`);
+            }
+            return isEnrolled;
+          });
+        
+        console.log(`Session ${session.id} student already enrolled: ${studentAlreadyEnrolled}`);
+        
+        // 如果學生已經參加，則不顯示這個課程
+        return !studentAlreadyEnrolled;
+      });
+      
+      // 按课程分组，相同课程只显示一次
+      const groupedSessions = {};
+      console.log('Available sessions before grouping:', availableSessions.length);
+      availableSessions.forEach(session => {
+        const sessionData = {
+          id: session.id,
+          title: session.title,
+          price: session.price,
+          maxParticipants: session.maxParticipants,
+          currentParticipants: session.currentParticipants,
+          courtName: session.courtName || session.court?.name,
+          venueName: session.venueName || session.venue?.name,
+          startTime: session.startTime,
+          endTime: session.endTime,
+          status: session.status,
+          allowReplacement: session.allowReplacement,
+          recurringGroupId: session.recurringGroupId
+        };
+        
+        // 使用标题作为分组键
+        const groupKey = session.title;
+        if (!groupedSessions[groupKey]) {
+          groupedSessions[groupKey] = {
+            ...sessionData,
+            sessions: []
+          };
+        }
+        groupedSessions[groupKey].sessions.push(sessionData);
+        console.log(`Added session ${session.id} to group "${groupKey}", total sessions in group: ${groupedSessions[groupKey].sessions.length}`);
+      });
+      
+      // 转换为数组并按第一个session的开始时间排序
+      const individualSessions = Object.values(groupedSessions)
+        .sort((a, b) => new Date(a.startTime) - new Date(b.startTime));
+      
+      console.log('Grouped sessions result:');
+      individualSessions.forEach(group => {
+        console.log(`Group "${group.title}": ${group.sessions.length} sessions`);
+      });
+      
+      console.log('Individual sessions for makeup:', individualSessions);
+      console.log('Student ID:', request.studentId);
+      console.log('Total sessions before filtering:', sessions.length);
+      console.log('Sessions after filtering:', availableSessions.length);
+      console.log('Individual sessions available:', individualSessions.length);
+      
+      // 显示所有sessions的基本信息
+      console.log('All sessions info:');
+      sessions.forEach(session => {
+        console.log(`Session ${session.id}: title="${session.title}", status="${session.status}", allowReplacement=${session.allowReplacement}, startTime="${session.startTime}"`);
+      });
+      
+      // 调试：检查recurringGroupId
+      individualSessions.forEach(session => {
+        console.log(`Session ${session.id} (${session.title}): recurringGroupId = ${session.recurringGroupId}`);
+      });
+      setAvailableSessionsForMakeup(individualSessions);
+      
+    } catch (error) {
+      console.error('Error filtering available sessions:', error);
+      alert('Failed to get available sessions');
+    } finally {
+      setLoadingAvailableSessions(false);
+      setMakeupDialogOpen(true);
+    }
+  };
+
+  const handleSendMessageToStudent = (request) => {
+    // 導航到訊息頁面並預填學生資訊
+    setSelectedTab('messages');
+    // 這裡可以添加預填訊息的邏輯
+  };
+
+  const handleConfirmMakeupArrangement = async (selectedSession) => {
+    try {
+      console.log('Arranging makeup class with data:', {
+        requestId: selectedMakeupRequest.id,
+        makeupSessionId: selectedSession.id,
+        studentId: selectedMakeupRequest.studentId,
+        selectedSession: selectedSession
+      });
+
+      const requestBody = {
+        makeupSessionId: selectedSession.id,
+        studentId: selectedMakeupRequest.studentId
+      };
+
+      console.log('Request body:', requestBody);
+
+      const response = await fetch(`http://localhost:8081/api/leave-requests/${selectedMakeupRequest.id}/arrange-makeup`, {
+        method: 'PUT',
+        headers: {
+          'Authorization': `Bearer ${localStorage.getItem('authToken')}`,
+          'Content-Type': 'application/json',
+        },
+        body: JSON.stringify(requestBody)
+      });
+
+      console.log('Response status:', response.status);
+      console.log('Response headers:', response.headers);
+
+      if (response.ok) {
+        const result = await response.json();
+        console.log('Success response:', result);
+        alert('Makeup class arranged successfully!');
+        setMakeupDialogOpen(false);
+        setShowSlotsDialog(false);
+        setSelectedMakeupRequest(null);
+        setSelectedCourseForSlots(null);
+        fetchLeaveRequests(); // 重新載入請假申請列表
+        fetchSessions(); // 重新載入課程列表
+      } else {
+        const errorText = await response.text();
+        console.error('Error response:', errorText);
+        console.error('Response status:', response.status);
+        alert(`Failed to arrange makeup class. Status: ${response.status}. Error: ${errorText}`);
+      }
+    } catch (error) {
+      console.error('Error arranging makeup class:', error);
+      alert(`Error arranging makeup class: ${error.message}`);
+    }
+  };
+
+  const handleViewAvailableSlots = (courseGroup) => {
+    console.log('Selected course group for slots:', courseGroup);
+    console.log('Course group sessions:', courseGroup.sessions);
+    
+    setSelectedCourseForSlots(courseGroup);
+    setShowSlotsDialog(true);
+  };
+
+  const handleAddMakeupStudent = (session) => {
+    // 導航到請假申請頁面，並過濾出需要補課的學生
+    setSelectedTab('leave-requests');
+    // 這裡可以添加邏輯來高亮顯示相關的請假申請
+  };
+
   const handleLogout = () => {
     logout();
     navigate('/login');
@@ -795,7 +1015,7 @@
     { text: 'Session Schedule', icon: <Schedule />, value: 'schedule' },
     { text: 'Messages', icon: <Message />, value: 'messages' },
     { text: 'Leave Requests', icon: <Assessment />, value: 'leave-requests' },
-    { text: 'Income History', icon: <AttachMoney />, value: 'income' },
+    { text: 'Wallet', icon: <AttachMoney />, value: 'income' },
     { text: 'Analytics', icon: <Assessment />, value: 'analytics' },
     { text: 'Settings', icon: <Settings />, value: 'settings' }
   ];
@@ -911,8 +1131,8 @@
             <CardContent>
               <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
                 <Box>
-                  <Typography variant="h4" sx={{ fontWeight: 'bold' }}>RM {dashboardStats.totalRevenue?.toFixed(2) || '0.00'}</Typography>
-                  <Typography variant="body2">Total Revenue</Typography>
+                  <Typography variant="h4" sx={{ fontWeight: 'bold' }}>RM {walletBalance?.balance?.toFixed(2) || '0.00'}</Typography>
+                                      <Typography variant="body2">Total Income</Typography>
                 </Box>
                 <AttachMoney sx={{ fontSize: 40, opacity: 0.8 }} />
               </Box>
@@ -1125,78 +1345,11 @@
             </CardContent>
           </Card>
 
-          {/* 收入統計卡片 */}
-          <Card sx={{ mb: 2 }}>
-            <CardContent>
-              <Typography variant="h6" gutterBottom sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
-                <AttachMoney color="primary" />
-                Income Overview
-              </Typography>
-              {incomeHistory.length > 0 ? (
-                <Box>
-                  <Typography variant="h5" color="success.main" fontWeight="bold">
-                    RM {incomeHistory.reduce((sum, record) => sum + (record.amount || 0), 0).toFixed(2)}
-                  </Typography>
-                  <Typography variant="body2" color="text.secondary" sx={{ mt: 1 }}>
-                    Total Income ({incomeHistory.length} records)
-                  </Typography>
-                  <Button 
-                    variant="outlined" 
-                    size="small" 
-                    sx={{ mt: 1 }}
-                    onClick={() => handleTabChange('income')}
-                  >
-                    View Details
-                  </Button>
-                </Box>
-              ) : (
-                <Typography variant="body2" color="text.secondary">
-                  No income records yet
-                </Typography>
-              )}
-            </CardContent>
-          </Card>
+
         </Grid>
       </Grid>
 
-      {/* Replacement Classes 移到下面 */}
-      <Grid container spacing={3} sx={{ mt: 2 }}>
-        <Grid item xs={12}>
-          <Card>
-            <CardContent>
-              <Typography variant="h6" gutterBottom color="primary">Replacement Classes</Typography>
-              {replacementClasses.length === 0 ? (
-                <Typography color="text.secondary">No replacement classes scheduled.</Typography>
-              ) : (
-                <TableContainer>
-                  <Table size="small">
-                    <TableHead>
-                      <TableRow>
-                        <TableCell>Date</TableCell>
-                        <TableCell>Time</TableCell>
-                        <TableCell>Venue</TableCell>
-                        <TableCell>Court</TableCell>
-                        <TableCell>Title</TableCell>
-                      </TableRow>
-                    </TableHead>
-                    <TableBody>
-                      {replacementClasses.map(cls => (
-                        <TableRow key={cls.id}>
-                          <TableCell>{cls.startTime ? new Date(cls.startTime).toLocaleDateString() : ''}</TableCell>
-                          <TableCell>{cls.startTime ? new Date(cls.startTime).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }) : ''} - {cls.endTime ? new Date(cls.endTime).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }) : ''}</TableCell>
-                          <TableCell>{cls.venue?.name || cls.venueName || '-'}</TableCell>
-                          <TableCell>{cls.court?.name || cls.courtName || '-'}</TableCell>
-                          <TableCell>{cls.title}</TableCell>
-                        </TableRow>
-                      ))}
-                    </TableBody>
-                  </Table>
-                </TableContainer>
-              )}
-            </CardContent>
-          </Card>
-        </Grid>
-      </Grid>
+
     </Box>
   );
 
@@ -1295,6 +1448,7 @@
                         <TableCell>Court</TableCell>
                         <TableCell>Start Date</TableCell>
                         <TableCell>End Date</TableCell>
+                        <TableCell>Replacement</TableCell>
                         <TableCell>Total Sessions</TableCell>
                         <TableCell align="center">Actions</TableCell>
                       </TableRow>
@@ -1324,7 +1478,26 @@
                                     {expanded ? '-' : '+'}
                                   </IconButton>
                                 </TableCell>
-                                <TableCell>{first.title}</TableCell>
+                                <TableCell>
+                                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
+                                    <Typography variant="body2">
+                                      {first.title}
+                                    </Typography>
+                                    {first.replacementForSessionId && (
+                                      <Chip 
+                                        label="Replacement Class" 
+                                        color="secondary" 
+                                        size="small" 
+                                      />
+                                    )}
+                                    {/* 调试信息 */}
+                                    {first.replacementForSessionId && (
+                                      <Typography variant="caption" color="error">
+                                        Debug: {first.replacementForSessionId}
+                                      </Typography>
+                                    )}
+                                  </Box>
+                                </TableCell>
                                 <TableCell>{first.slotType || first.type || '-'}</TableCell>
                                 <TableCell>
                                   <Chip label={first.status || 'Scheduled'} color={first.status === 'completed' || first.status === 'COMPLETED' ? 'success' : 'primary'} size="small" />
@@ -1333,60 +1506,233 @@
                                 <TableCell>{first.courtName || first.court?.name || '-'}</TableCell>
                                 <TableCell>{start.toLocaleDateString()}</TableCell>
                                 <TableCell>{end.toLocaleDateString()}</TableCell>
+                                <TableCell>
+                                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
+                                    <Chip 
+                                      label={first.allowReplacement ? 'Enabled' : 'Disabled'} 
+                                      color={first.allowReplacement ? 'success' : 'default'} 
+                                      size="small" 
+                                    />
+                                    {/* 移除快速設定補課按鈕 */}
+                                  </Box>
+                                </TableCell>
                                 <TableCell>{group.length}</TableCell>
                                 <TableCell align="center">
-                                  <IconButton size="small" color="primary">
-                                    <Edit />
-                                  </IconButton>
-                                  <IconButton size="small" color="error">
-                                    <Delete />
-                                  </IconButton>
+                                  {/* 只有 AVAILABLE 狀態的課程才能編輯 */}
+                                  {first.status === 'AVAILABLE' && (
+                                    <IconButton 
+                                      size="small" 
+                                      color="primary"
+                                      onClick={() => handleEditSession(first)}
+                                      title="Edit Session"
+                                    >
+                                      <Edit />
+                                    </IconButton>
+                                  )}
                                 </TableCell>
                               </TableRow>
                               <TableRow>
-                                <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={10}>
+                                <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={11}>
                                   <Collapse in={expanded} timeout="auto" unmountOnExit>
                                     <Box margin={1}>
+                                      <Typography variant="h6" gutterBottom sx={{ color: theme.palette.primary.main }}>
+                                        Session Details
+                                      </Typography>
+                                      
+                                      {/* 課程基本資訊 */}
+                                      <Card variant="outlined" sx={{ mb: 2 }}>
+                                        <CardContent>
+                                          <Grid container spacing={2}>
+                                            <Grid item xs={12} md={6}>
+                                              <Typography variant="subtitle2" color="text.secondary">Course Information</Typography>
+                                              <Typography variant="body2" sx={{ mt: 1 }}>
+                                                <strong>Title:</strong> {first.title || 'N/A'}
+                                                {first.replacementForSessionId && (
+                                                  <Typography component="span" variant="caption" color="secondary" sx={{ ml: 1, fontWeight: 'bold' }}>
+                                                    (Replacement Class)
+                                                  </Typography>
+                                                )}
+                                              </Typography>
+                                              <Typography variant="body2">
+                                                <strong>Price:</strong> ${first.price || 0}
+                                              </Typography>
+                                              <Typography variant="body2">
+                                                <strong>Max Participants:</strong> {first.maxParticipants || 0}
+                                              </Typography>
+                                              <Typography variant="body2">
+                                                <strong>Current Participants:</strong> {first.currentParticipants || 0}
+                                              </Typography>
+                                              <Typography variant="body2" color="text.secondary">
+                                                <em>Note: Individual session capacities may vary</em>
+                                              </Typography>
+                                            </Grid>
+                                            <Grid item xs={12} md={6}>
+                                              <Typography variant="subtitle2" color="text.secondary">Venue Information</Typography>
+                                              <Typography variant="body2" sx={{ mt: 1 }}>
+                                                <strong>Court:</strong> {first.courtName || first.court?.name || 'N/A'}
+                                              </Typography>
+                                            </Grid>
+                                          </Grid>
+                                        </CardContent>
+                                      </Card>
+
+                                      {/* 詳細時段列表 */}
                                       <Table size="small">
                                         <TableHead>
                                           <TableRow>
                                             <TableCell>Date</TableCell>
-                                            <TableCell>Start Time</TableCell>
-                                            <TableCell>End Time</TableCell>
+                                            <TableCell>Time</TableCell>
                                             <TableCell>Status</TableCell>
+                                            <TableCell>Participants</TableCell>
+                                            <TableCell>Actions</TableCell>
                                           </TableRow>
                                         </TableHead>
                                         <TableBody>
                                           {group.map((sess) => (
                                             <TableRow key={sess.id}>
                                               <TableCell>{new Date(sess.startTime).toLocaleDateString()}</TableCell>
-                                              <TableCell>{new Date(sess.startTime).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}</TableCell>
-                                              <TableCell>{new Date(sess.endTime).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}</TableCell>
+                                              <TableCell>
+                                                {new Date(sess.startTime).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })} - {new Date(sess.endTime).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
+                                              </TableCell>
                                               <TableCell>
-                                                <Chip label={sess.status || 'Scheduled'} size="small" color={sess.status === 'CANCELLED' ? 'primary' : 'success'} />
+                                                <Chip 
+                                                  label={sess.status || 'Scheduled'} 
+                                                  size="small" 
+                                                  color={
+                                                    sess.status === 'CANCELLED' ? 'error' : 
+                                                    sess.status === 'FULL' ? 'warning' : 
+                                                    sess.status === 'COMPLETED' ? 'default' : 'success'
+                                                  } 
+                                                />
                                                 {sess.status === 'CANCELLED' && (
                                                   hasReplacement(sess.id) ? (
-                                                    <Chip label="Replacement scheduled" color="success" />
+                                                    <Chip label="Replacement scheduled" color="success" size="small" sx={{ ml: 1 }} />
                                                   ) : (
                                                     <>
-                                                      <Chip label="No replacement scheduled" color="error" />
-                                                      <Button variant="outlined" color="warning" onClick={() => handleBookReplacement(sess)} style={{ marginLeft: 8 }}>
-                                                        BOOK REPLACEMENT
-                                                      </Button>
+                                                      <Chip label="No replacement scheduled" color="error" size="small" sx={{ ml: 1 }} />
+                                                      {/* 移除 BOOK REPLACEMENT 按钮 */}
                                                     </>
                                                   )
                                                 )}
                                               </TableCell>
-                                              {/* 新增 Cancel 按鈕 */}
+                                              <TableCell>
+                                                <Typography variant="body2">
+                                                  {sess.currentParticipants || 0} / {sess.maxParticipants || 0}
+                                                </Typography>
+                                                {sess.currentParticipants > 0 && (
+                                                  <Typography variant="caption" color="text.secondary">
+                                                    {Math.round((sess.currentParticipants / sess.maxParticipants) * 100)}% full
+                                                  </Typography>
+                                                )}
+                                                {sess.maxParticipants !== first.maxParticipants && (
+                                                  <Typography variant="caption" color="warning.main">
+                                                    Capacity adjusted
+                                                  </Typography>
+                                                )}
+                                              </TableCell>
                                               <TableCell>
-                                                <IconButton color="error" size="small" onClick={() => handleCancelSession(sess.id, sess)}>
-                                                  <DeleteIcon fontSize="small" />
-                                                </IconButton>
+                                                <Box display="flex" gap={1}>
+                                                                                                     <Button
+                                                     size="small"
+                                                     variant="outlined"
+                                                     color="primary"
+                                                     onClick={() => handleAddMakeupStudent(sess)}
+                                                     startIcon={<Add />}
+                                                   >
+                                                     Add Makeup Student
+                                                   </Button>
+                                                  {/* 移除删除按钮 - 教练不能删除课程 */}
+                                                </Box>
                                               </TableCell>
                                             </TableRow>
                                           ))}
                                         </TableBody>
                                       </Table>
+
+                                      {/* 學生名單（如果有學生報名） */}
+                                      {group.some(sess => sess.registrations && sess.registrations.length > 0) && (
+                                        <Card variant="outlined" sx={{ mt: 2 }}>
+                                          <CardContent>
+                                            <Typography variant="subtitle2" color="text.secondary" gutterBottom>
+                                              {(() => {
+                                                const allRegistrations = group.flatMap(sess => sess.registrations || []);
+                                                const uniqueStudents = new Set();
+                                                allRegistrations.forEach(registration => {
+                                                  if (registration.member?.id) {
+                                                    uniqueStudents.add(registration.member.id);
+                                                  }
+                                                });
+                                                return `Enrolled Students (${uniqueStudents.size})`;
+                                              })()}
+                                            </Typography>
+                                            <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>
+                                              {(() => {
+                                                // 获取所有注册信息并去重（基于学生ID）
+                                                const allRegistrations = group.flatMap(sess => sess.registrations || []);
+                                                const uniqueStudents = new Map();
+                                                
+                                                allRegistrations.forEach(registration => {
+                                                  const studentId = registration.member?.id;
+                                                  if (studentId && !uniqueStudents.has(studentId)) {
+                                                    uniqueStudents.set(studentId, registration);
+                                                  }
+                                                });
+                                                
+                                                return Array.from(uniqueStudents.values()).map((registration, index) => {
+                                                  // 如果是补课学生，查找对应的请假请求
+                                                  let replacementInfo = null;
+                                                  if (registration.attendanceStatus === 'MAKEUP') {
+                                                    console.log('Found makeup student:', registration.member?.user?.name);
+                                                    console.log('Looking for leave request with replacementSessionId:', first.id, 'and studentId:', registration.member?.id);
+                                                    console.log('Available leave requests:', leaveRequests);
+                                                    
+                                                    const leaveRequest = leaveRequests.find(req => 
+                                                      req.replacementSessionId === first.id && 
+                                                      req.studentId === registration.member?.id
+                                                    );
+                                                    
+                                                    if (leaveRequest) {
+                                                      console.log('Found matching leave request:', leaveRequest);
+                                                      replacementInfo = {
+                                                        originalDate: leaveRequest.originalSessionStartTime,
+                                                        originalTitle: leaveRequest.originalSessionTitle
+                                                      };
+                                                    } else {
+                                                      console.log('No matching leave request found');
+                                                    }
+                                                  }
+                                                  
+                                                  return (
+                                                    <Chip
+                                                      key={`${registration.member?.id}-${index}`}
+                                                      label={
+                                                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>
+                                                          {registration.member?.user?.name || `Student ${registration.member?.id || registration.id}`}
+                                                          {registration.attendanceStatus === 'MAKEUP' && (
+                                                            <Typography variant="caption" color="primary" sx={{ fontWeight: 'bold' }}>
+                                                              {replacementInfo ? (
+                                                                `(Replacement for: ${new Date(replacementInfo.originalDate).toLocaleDateString()} ${new Date(replacementInfo.originalDate).toLocaleTimeString([], { 
+                                                                  hour: '2-digit', 
+                                                                  minute: '2-digit' 
+                                                                })})`
+                                                              ) : (
+                                                                '(Makeup)'
+                                                              )}
+                                                            </Typography>
+                                                          )}
+                                                        </Box>
+                                                      }
+                                                      size="small"
+                                                      color={registration.attendanceStatus === 'MAKEUP' ? "secondary" : "primary"}
+                                                      variant="outlined"
+                                                    />
+                                                  );
+                                                });
+                                              })()}
+                                            </Box>
+                                          </CardContent>
+                                        </Card>
+                                      )}
                                     </Box>
                                   </Collapse>
                                 </TableCell>
@@ -1422,7 +1768,7 @@
       case 'leave-requests':
         return renderLeaveRequests();
       case 'income':
-        return renderIncomeHistory();
+        return renderWallet();
       case 'analytics':
         return (
           <Box>
@@ -1554,26 +1900,7 @@
   };
 
   // 定義 fetchSessions 並設置到 state 供 handleCreateMakeupSession 使用
-  const [fetchSessionsRef, setFetchSessionsRef] = useState(null);
 
-  useEffect(() => {
-    const fetchSessions = async () => {
-      setLoadingSessions(true);
-      setSessionError('');
-      try {
-        const start = new Date(2000, 0, 1, 0, 0, 0);
-        const end = new Date(2100, 11, 31, 23, 59, 59);
-        const data = await CoachService.getSchedule(start.toISOString(), end.toISOString());
-        setSessions(Array.isArray(data) ? data : []);
-      } catch (err) {
-        setSessionError('Failed to load sessions.');
-      } finally {
-        setLoadingSessions(false);
-      }
-    };
-    setFetchSessionsRef(() => fetchSessions);
-    fetchSessions();
-  }, []);
 
   // 在 handleCreateMakeupSession 時自動帶入 startTime/endTime
   const handleCreateMakeupSession = async () => {
@@ -1601,7 +1928,7 @@
       alert('Make-up session created and students will be notified!');
       setShowMakeupDialog(false);
       // 自動刷新 sessions，讓 UI 立即變更
-      if (fetchSessionsRef) fetchSessionsRef(); else window.location.reload();
+      fetchSessions();
     } catch (e) {
       alert('Failed to create make-up session: ' + (e?.response?.data?.error || e.message));
     }
@@ -1633,15 +1960,32 @@
   }
   const availableSlotSet = new Set(busySlots ? busySlots.map(s => s.start + '-' + s.end) : []);
 
-  // 新增：BOOK REPLACEMENT 按鈕 handler
-  const handleBookReplacement = (session) => {
-    setMakeupOriginSession(session);
-    setShowMakeupDialog(true);
+  // 新增：編輯課程對話框處理
+  const handleEditSession = (session) => {
+    setEditSession(session);
+    setEditDialogOpen(true);
   };
+
+  const handleEditSuccess = () => {
+    setEditDialogOpen(false);
+    setEditSession(null);
+    fetchSessions(); // 使用組件級別的 fetchSessions 函數
+  };
+
+  // 移除 handleQuickSetReplacement 和 handleBookReplacement 函数
+
+  // 移除 handleUpdateAllowReplacement 函数
+
+  // 新增：獲取補課課程
+  // 移除 replacement sessions 相关状态
+
+  // 移除 fetchReplacementSessions 函数和相关 useEffect
 
   const [commentDialog, setCommentDialog] = useState({ open: false, request: null, action: '' });
   const [coachComment, setCoachComment] = useState('');
   const [bookReplacementDialog, setBookReplacementDialog] = useState({ open: false, request: null });
+  const [bookCourtDialog, setBookCourtDialog] = useState({ open: false, request: null });
+  const [loadingVenueInfo, setLoadingVenueInfo] = useState(false);
   const [selectedRequests, setSelectedRequests] = useState([]);
   const [courts, setCourts] = useState([]);
   const [venues, setVenues] = useState([]);
@@ -1663,6 +2007,120 @@
     selectedSlot: ''
   });
 
+  const [bookCourtData, setBookCourtData] = useState({
+    title: '',
+    description: '',
+    venueId: '',
+    venueName: '',
+    state: '',
+    courtId: '',
+    startTime: '',
+    endTime: '',
+    maxParticipants: 6,
+    price: '',
+    slotType: 'COACH_SESSION',
+    date: '',
+    availableSlots: [],
+    selectedSlots: [],
+    originalRequest: null,
+    originalDuration: 1 // 原始课程时长（小时）
+  });
+
+  const handleBookCourt = (request) => {
+    setBookCourtDialog({ open: true, request });
+    setLoadingVenueInfo(true);
+    
+    // 通过原始课程ID获取场馆信息
+    const findVenueInfo = async () => {
+      try {
+        const sessionResponse = await fetch(`http://localhost:8081/api/class-sessions/${request.originalSessionId}/details`, {
+          headers: {
+            'Authorization': `Bearer ${localStorage.getItem('authToken')}`,
+          }
+        });
+        
+        if (sessionResponse.ok) {
+          const sessionData = await sessionResponse.json();
+          const venueId = sessionData.venueId;
+          const venueName = sessionData.venueName || request.venue || 'Unknown Venue';
+          
+          // 计算原始课程时长
+          let originalDuration = 1; // 默认1小时
+          if (sessionData.startTime && sessionData.endTime) {
+            const startTime = new Date(sessionData.startTime);
+            const endTime = new Date(sessionData.endTime);
+            const durationMs = endTime.getTime() - startTime.getTime();
+            originalDuration = Math.ceil(durationMs / (1000 * 60 * 60)); // 转换为小时并向上取整
+          }
+          
+          setBookCourtData({
+            title: `[Replacement] ${request.originalSessionTitle || 'Class'}`,
+            description: `Replacement class for ${request.studentName} - ${request.reason || 'No reason provided'}`,
+            venueId: venueId || '',
+            venueName: venueName,
+            state: request.state || '',
+            courtId: '',
+            startTime: '',
+            endTime: '',
+            maxParticipants: 1, // 默认1个学生
+            price: 0, // 固定为0
+            slotType: 'COACH_SESSION',
+            date: '',
+            availableSlots: [],
+            selectedSlots: [],
+            originalRequest: request,
+            originalDuration: originalDuration
+          });
+        } else {
+          // 如果获取失败，使用默认值
+          setBookCourtData({
+            title: `[Replacement] ${request.originalSessionTitle || 'Class'}`,
+            description: `Replacement class for ${request.studentName} - ${request.reason || 'No reason provided'}`,
+            venueId: '',
+            venueName: request.venue || 'Unknown Venue',
+            state: request.state || '',
+            courtId: '',
+            startTime: '',
+            endTime: '',
+            maxParticipants: 1,
+            price: 0,
+            slotType: 'COACH_SESSION',
+            date: '',
+            availableSlots: [],
+            selectedSlots: [],
+            originalRequest: request,
+            originalDuration: 1
+          });
+        }
+      } catch (error) {
+        console.error('Error fetching venue info:', error);
+        // 使用默认值
+        setBookCourtData({
+          title: `[Replacement] ${request.originalSessionTitle || 'Class'}`,
+          description: `Replacement class for ${request.studentName} - ${request.reason || 'No reason provided'}`,
+          venueId: '',
+          venueName: request.venue || 'Unknown Venue',
+          state: request.state || '',
+          courtId: '',
+          startTime: '',
+          endTime: '',
+          maxParticipants: 1,
+          price: 0,
+          slotType: 'COACH_SESSION',
+          date: '',
+          availableSlots: [],
+          selectedSlots: [],
+          originalRequest: request,
+          originalDuration: 1
+        });
+      } finally {
+        setLoadingVenueInfo(false);
+      }
+    };
+    
+    findVenueInfo();
+  };
+
   const handleApproveRequest = async (request) => {
     setCommentDialog({ open: true, request, action: 'approve' });
     setCoachComment('');
@@ -1960,37 +2418,40 @@
       alert('Only MESSAGE_SENT requests can be processed together');
       return;
     }
-    
-    // 檢查是否所有請求的原始課程時長相同
-    const durations = selectedRequestObjects.map(r => {
-      if (r.originalSessionStartTime && r.originalSessionEndTime) {
-        const start = new Date(r.originalSessionStartTime + 'Z');
-        const end = new Date(r.originalSessionEndTime + 'Z');
-        return (end.getTime() - start.getTime()) / (1000 * 60 * 60);
-      }
-      return 1; // 默認1小時
-    });
-    
-    const uniqueDurations = [...new Set(durations)];
-    if (uniqueDurations.length > 1) {
-      alert('All selected requests must have the same original session duration to be processed together');
-      return;
-    }
     
     // 使用第一個請求作為模板
     const firstRequest = selectedRequestObjects[0];
     setBookReplacementDialog({ open: true, request: firstRequest, batchRequests: selectedRequestObjects });
     
-    // 計算原始課程的時長
-    let originalDuration = 1;
-    if (firstRequest.originalSessionStartTime && firstRequest.originalSessionEndTime) {
-      const originalStart = new Date(firstRequest.originalSessionStartTime + 'Z');
-      const originalEnd = new Date(firstRequest.originalSessionEndTime + 'Z');
-      originalDuration = (originalEnd.getTime() - originalStart.getTime()) / (1000 * 60 * 60);
-    }
+    // 計算所有請求的總時長（相加）
+    let totalOriginalDuration = 0;
+    console.log('=== Duration Calculation Debug ===');
+    console.log('Selected requests:', selectedRequestObjects.length);
+    
+    selectedRequestObjects.forEach((r, index) => {
+      let duration = 1; // 默認1小時
+      
+      if (r.originalSessionStartTime && r.originalSessionEndTime) {
+        const start = new Date(r.originalSessionStartTime + 'Z');
+        const end = new Date(r.originalSessionEndTime + 'Z');
+        duration = (end.getTime() - start.getTime()) / (1000 * 60 * 60);
+      }
+      
+      totalOriginalDuration += duration;
+      
+      console.log(`Request ${index + 1}: ${r.studentName} - ${r.originalDate} - Duration: ${duration} hours`);
+    });
     
-    // 生成學生名單
-    const studentNames = selectedRequestObjects.map(r => r.studentName).join(', ');
+    console.log('Total duration:', totalOriginalDuration, 'hours');
+    
+    // 生成學生名單（去重）
+    const uniqueStudents = [...new Set(selectedRequestObjects.map(r => r.studentName))];
+    const studentNames = uniqueStudents.join(', ');
+    
+    console.log('=== Student Deduplication Debug ===');
+    console.log('All students:', selectedRequestObjects.map(r => r.studentName));
+    console.log('Unique students:', uniqueStudents);
+    console.log('Unique student count:', uniqueStudents.length);
     
     // 獲取第一個請求的原始場地信息作為默認值
     let originalVenueId = '';
@@ -2017,27 +2478,171 @@
     console.log('Extracted batch venue info:', { originalVenueId, originalVenueName, originalState });
     
     // 預設課程信息
-          setReplacementSessionData({
-        title: `Group Replacement Session`,
-        description: `Replacement session for: ${studentNames}`,
-        venueId: originalVenueId,
-        venueName: originalVenueName,
-        state: originalState,
-        courtId: '',
-        startTime: '',
-        endTime: '',
-        maxParticipants: selectedRequestObjects.length,
-        price: '',
-        slotType: 'COACH_SESSION',
-        originalDuration: originalDuration,
-        batchRequests: selectedRequestObjects,
-        date: '',
-        availableSlots: [],
-        selectedSlots: [],
-        selectedSlot: ''
-      });
+    setReplacementSessionData({
+      title: `Group Replacement Session`,
+      description: `Replacement session for: ${studentNames}`,
+      venueId: originalVenueId,
+      venueName: originalVenueName,
+      state: originalState,
+      courtId: '',
+      startTime: '',
+      endTime: '',
+      maxParticipants: uniqueStudents.length, // 使用唯一學生數量
+      price: '',
+      slotType: 'COACH_SESSION',
+      originalDuration: totalOriginalDuration, // 使用總時長
+      batchRequests: selectedRequestObjects,
+      date: '',
+      availableSlots: [],
+      selectedSlots: [],
+      selectedSlot: ''
+    });
   };
 
+  const handleCreateBookCourtSession = async () => {
+    try {
+      if (!bookCourtData.courtId || !bookCourtData.date || bookCourtData.selectedSlots.length === 0) {
+        alert('Please select court, date and time slots');
+        return;
+      }
+
+      const selectedCourt = courts.find(court => court.id === bookCourtData.courtId);
+      if (!selectedCourt) {
+        alert('Selected court not found');
+        return;
+      }
+
+      // 计算开始和结束时间
+      const newSelected = [...bookCourtData.selectedSlots].sort((a, b) => a.startTime.localeCompare(b.startTime));
+      const startTime = `${bookCourtData.date}T${newSelected[0].startTime}:00`;
+      const endTime = `${bookCourtData.date}T${newSelected[newSelected.length - 1].endTime}:00`;
+
+      const sessionData = {
+        title: bookCourtData.title,
+        description: bookCourtData.description,
+        venueId: selectedCourt.venue?.id,
+        courtId: bookCourtData.courtId,
+        startTime: startTime,
+        endTime: endTime,
+        maxParticipants: bookCourtData.maxParticipants,
+        price: 0, // 固定为0
+        slotType: 'COACH_SESSION',
+        allowReplacement: false
+      };
+
+      console.log('Creating new session with data:', sessionData);
+
+      const response = await fetch('http://localhost:8081/api/class-sessions', {
+        method: 'POST',
+        headers: {
+          'Authorization': `Bearer ${localStorage.getItem('authToken')}`,
+          'Content-Type': 'application/json',
+        },
+        body: JSON.stringify(sessionData)
+      });
+
+      if (response.ok) {
+        const newSession = await response.json();
+        console.log('New session created:', newSession);
+        
+        // 自动注册学生到新课程中
+        if (bookCourtData.originalRequest && newSession.id) {
+          try {
+            // 注册学生到课程
+            const registrationResponse = await fetch(`http://localhost:8081/api/class-sessions/${newSession.id}/register?userId=${bookCourtData.originalRequest.studentId}`, {
+              method: 'POST',
+              headers: {
+                'Authorization': `Bearer ${localStorage.getItem('authToken')}`,
+                'Content-Type': 'application/json',
+              }
+            });
+
+            if (registrationResponse.ok) {
+              console.log('Student registered to replacement class successfully');
+              
+              // 获取注册记录并更新为补课状态
+              try {
+                const studentsResponse = await fetch(`http://localhost:8081/api/coach/class-sessions/${newSession.id}/students`, {
+                  headers: {
+                    'Authorization': `Bearer ${localStorage.getItem('authToken')}`,
+                  }
+                });
+                
+                if (studentsResponse.ok) {
+                  const students = await studentsResponse.json();
+                  const studentRegistration = students.find(s => s.id === bookCourtData.originalRequest.studentId);
+                  
+                  if (studentRegistration) {
+                    // 更新出席状态为 MAKEUP
+                    const updateResponse = await fetch(`http://localhost:8081/api/coach/class-registrations/${studentRegistration.registrationId}/attendance`, {
+                      method: 'PUT',
+                      headers: {
+                        'Authorization': `Bearer ${localStorage.getItem('authToken')}`,
+                        'Content-Type': 'application/json',
+                      },
+                      body: JSON.stringify({
+                        attendanceStatus: 'MAKEUP'
+                      })
+                    });
+                    
+                    if (updateResponse.ok) {
+                      console.log('Attendance status updated to MAKEUP successfully');
+                    } else {
+                      console.error('Failed to update attendance status');
+                    }
+                  }
+                }
+              } catch (error) {
+                console.error('Error updating attendance status:', error);
+              }
+            } else {
+              console.error('Failed to register student to replacement class');
+            }
+
+            // 批准请假请求并关联新课程
+            await LeaveRequestService.approveRequest(
+              bookCourtData.originalRequest.id, 
+              newSession.id, 
+              'Coach booked new court for replacement class - Student automatically registered'
+            );
+          } catch (error) {
+            console.error('Error registering student to replacement class:', error);
+          }
+        }
+
+        alert('Replacement class created and student registered successfully!');
+        setBookCourtDialog({ open: false, request: null });
+        setBookCourtData({
+          title: '',
+          description: '',
+          venueId: '',
+          venueName: '',
+          state: '',
+          courtId: '',
+          startTime: '',
+          endTime: '',
+          maxParticipants: 6,
+          price: 0,
+          slotType: 'COACH_SESSION',
+          date: '',
+          availableSlots: [],
+          selectedSlots: [],
+          originalRequest: null
+        });
+        
+        // 刷新数据
+        fetchSessions();
+        fetchLeaveRequests();
+      } else {
+        const errorData = await response.json();
+        alert(`Failed to create session: ${errorData.error || 'Unknown error'}`);
+      }
+    } catch (error) {
+      console.error('Error creating new session:', error);
+      alert('Failed to create new session');
+    }
+  };
+
   const handleCreateReplacementSession = async () => {
     try {
       const { request, batchRequests } = bookReplacementDialog;
@@ -2149,40 +2754,17 @@
     <Box>
       <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
         <Typography variant="h4" sx={{ fontWeight: 'bold', color: theme.palette.text.primary }}>
-          Makeup Class Requests
+          Leave Requests & Makeup Arrangements
         </Typography>
-        <Box sx={{ display: 'flex', gap: 2 }}>
-          {selectedRequests.length > 0 && (
-            <Button 
-              variant="contained" 
-              color="primary"
-              onClick={() => handleBatchBookReplacement()}
-            >
-              BOOK COURT FOR {selectedRequests.length} STUDENT{selectedRequests.length > 1 ? 'S' : ''}
-            </Button>
-          )}
-          <Button 
-            variant="outlined" 
-            onClick={async () => {
-              try {
-                const debugData = await LeaveRequestService.debugAllRequests();
-                console.log('Debug all requests:', debugData);
-                alert(`Total requests: ${debugData.totalRequests}\nCheck console for details`);
-              } catch (error) {
-                console.error('Debug failed:', error);
-                alert('Debug failed: ' + error.message);
-              }
-            }}
-          >
-            Debug All Requests
-          </Button>
-        </Box>
+        <Typography variant="body2" color="text.secondary">
+          Manage student leave requests, directly arrange makeup classes or contact students
+        </Typography>
       </Box>
       
       {leaveRequests.length === 0 ? (
         <Card sx={{ p: 4, textAlign: 'center' }}>
           <Typography variant="h6" color="text.secondary" gutterBottom>
-            No pending makeup class requests
+            No pending leave requests
           </Typography>
           <Typography variant="body2" color="text.secondary">
             All requests have been processed.
@@ -2191,48 +2773,19 @@
       ) : (
         <TableContainer component={Paper}>
           <Table>
-            <TableHead>
-              <TableRow>
-                <TableCell padding="checkbox">
-                  <input
-                    type="checkbox"
-                    checked={selectedRequests.length === leaveRequests.filter(r => r.status === 'MESSAGE_SENT').length}
-                    onChange={(e) => {
-                      if (e.target.checked) {
-                        setSelectedRequests(leaveRequests.filter(r => r.status === 'MESSAGE_SENT').map(r => r.id));
-                      } else {
-                        setSelectedRequests([]);
-                      }
-                    }}
-                  />
-                </TableCell>
-                <TableCell>Student</TableCell>
-                <TableCell>Original Date</TableCell>
-                <TableCell>Preferred Date</TableCell>
-                <TableCell>Request Type</TableCell>
-                <TableCell>Student Reason</TableCell>
-                <TableCell>Status</TableCell>
-                <TableCell>Action</TableCell>
-              </TableRow>
-            </TableHead>
+                                  <TableHead>
+                        <TableRow>
+                          <TableCell>Student</TableCell>
+                          <TableCell>Original Class</TableCell>
+                          <TableCell>Reason</TableCell>
+                          <TableCell>Status</TableCell>
+                          <TableCell>Makeup Arrangement</TableCell>
+                          <TableCell>Actions</TableCell>
+                        </TableRow>
+                      </TableHead>
             <TableBody>
               {leaveRequests.map((request) => (
                 <TableRow key={request.id}>
-                  <TableCell padding="checkbox">
-                    {request.status === 'MESSAGE_SENT' && (
-                      <input
-                        type="checkbox"
-                        checked={selectedRequests.includes(request.id)}
-                        onChange={(e) => {
-                          if (e.target.checked) {
-                            setSelectedRequests([...selectedRequests, request.id]);
-                          } else {
-                            setSelectedRequests(selectedRequests.filter(id => id !== request.id));
-                          }
-                        }}
-                      />
-                    )}
-                  </TableCell>
                   <TableCell>
                     <Box>
                       <Typography variant="subtitle2">{request.studentName}</Typography>
@@ -2242,18 +2795,17 @@
                     </Box>
                   </TableCell>
                   <TableCell>
-                    {new Date(request.originalDate).toLocaleDateString()}
-                  </TableCell>
-                  <TableCell>
-                    {request.preferredDate && new Date(request.preferredDate).getFullYear() > 1900 ? 
-                      new Date(request.preferredDate).toLocaleDateString() : '-'}
-                  </TableCell>
-                  <TableCell>
-                    <Typography variant="body2" sx={{ maxWidth: 200 }}>
-                      {request.status === 'SELF_SELECTED' ? 'Self-Selected Replacement' : 
-                       request.status === 'MESSAGE_SENT' ? 'Message Sent to Coach' : 
-                       'Makeup Class Request'}
-                    </Typography>
+                    <Box>
+                      <Typography variant="body2" fontWeight="bold">
+                        {new Date(request.originalDate).toLocaleDateString()}
+                      </Typography>
+                      <Typography variant="caption" color="text.secondary">
+                        {new Date(request.originalDate).toLocaleTimeString([], { 
+                          hour: '2-digit', 
+                          minute: '2-digit' 
+                        })}
+                      </Typography>
+                    </Box>
                   </TableCell>
                   <TableCell>
                     <Typography variant="body2" sx={{ maxWidth: 200 }}>
@@ -2262,45 +2814,94 @@
                   </TableCell>
                   <TableCell>
                     <Chip 
-                      label={request.status.toLowerCase()} 
+                      label={
+                        request.status === 'PENDING' ? 'Pending' :
+                        request.status === 'MESSAGE_SENT' ? 'Coach Contacted' :
+                        request.status === 'MAKEUP_ARRANGED' ? 'Makeup Arranged' :
+                        request.status === 'DECLINED' ? 'Declined' : 
+                        request.status.toLowerCase()
+                      }
                       color={
                         request.status === 'PENDING' ? 'warning' :
-                        request.status === 'SELF_SELECTED' ? 'info' :
                         request.status === 'MESSAGE_SENT' ? 'primary' :
-                        request.status === 'APPROVED' ? 'success' :
+                        request.status === 'MAKEUP_ARRANGED' ? 'success' :
                         request.status === 'DECLINED' ? 'error' : 'default'
                       }
                       size="small"
                     />
                   </TableCell>
                   <TableCell>
-                    <Box display="flex" gap={1}>
-                      {request.status === 'MESSAGE_SENT' && (
-                        <Button 
-                          size="small" 
-                          variant="contained" 
-                          color="primary"
-                          onClick={() => handleBookReplacementForStudent(request)}
-                        >
-                          BOOK COURT
-                        </Button>
-                      )}
-                      <Button 
-                        size="small" 
-                        variant="contained" 
-                        color="success"
-                        onClick={() => handleApproveRequest(request)}
-                      >
-                        APPROVE
-                      </Button>
-                      <Button 
-                        size="small" 
-                        variant="outlined" 
-                        color="error"
-                        onClick={() => handleDeclineRequest(request)}
-                      >
-                        DECLINE
-                      </Button>
+                    {request.status === 'PENDING' || request.status === 'MESSAGE_SENT' ? (
+                      <Button 
+                        size="small" 
+                        variant="contained" 
+                        color="primary"
+                        onClick={() => handleArrangeMakeupClass(request)}
+                      >
+                        Arrange Makeup
+                      </Button>
+                    ) : request.status === 'MAKEUP_ARRANGED' ? (
+                      <Chip 
+                        label="Makeup Arranged" 
+                        color="success" 
+                        size="small"
+                      />
+                    ) : (
+                      <Typography variant="body2" color="text.secondary">
+                        -
+                      </Typography>
+                    )}
+                  </TableCell>
+                  <TableCell>
+                    <Box display="flex" gap={1}>
+                      {request.status === 'PENDING' && (
+                        <>
+                          <Button 
+                            size="small" 
+                            variant="outlined" 
+                            color="info"
+                            onClick={() => handleSendMessageToStudent(request)}
+                          >
+                            Contact Student
+                          </Button>
+                          <Button 
+                            size="small" 
+                            variant="outlined" 
+                            color="error"
+                            onClick={() => handleDeclineRequest(request)}
+                          >
+                            Decline
+                          </Button>
+                          <Button 
+                            size="small" 
+                            variant="contained" 
+                            color="success"
+                            onClick={() => handleBookCourt(request)}
+                          >
+                            Book Court
+                          </Button>
+                        </>
+                      )}
+                      {request.status === 'MESSAGE_SENT' && (
+                        <>
+                          <Button 
+                            size="small" 
+                            variant="outlined" 
+                            color="info"
+                            onClick={() => handleSendMessageToStudent(request)}
+                          >
+                            Contact Again
+                          </Button>
+                          <Button 
+                            size="small" 
+                            variant="contained" 
+                            color="success"
+                            onClick={() => handleBookCourt(request)}
+                          >
+                            Book Court
+                          </Button>
+                        </>
+                      )}
                     </Box>
                   </TableCell>
                 </TableRow>
@@ -2312,384 +2913,106 @@
     </Box>
   );
 
-  const renderIncomeHistory = () => (
+  const renderWallet = () => (
     <Box>
       <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
         <Typography variant="h4" sx={{ fontWeight: 'bold', color: theme.palette.text.primary }}>
-          {showWalletTransactions ? 'Wallet Transactions' : 'Income History'}
+          Wallet Transactions
         </Typography>
-        <Box sx={{ display: 'flex', gap: 2 }}>
-          <Button
-            variant="outlined"
-            onClick={() => {
-              setShowWalletTransactions(!showWalletTransactions);
-              if (!showWalletTransactions && walletTransactions.length === 0) {
-                fetchWalletTransactions();
-              }
-            }}
-          >
-            {showWalletTransactions ? 'Show Income History' : 'Show Wallet Transactions'}
-          </Button>
-          <Button
-            variant="outlined"
-            onClick={() => {
-              fetchRevenueStatus();
-            }}
-          >
-            Refresh Revenue Status
-          </Button>
-        </Box>
-      </Box>
-      
-      {/* 收入分配狀態 */}
-      <Card sx={{ mb: 3 }}>
-        <CardContent>
-          <Typography variant="h6" gutterBottom sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
-            <AttachMoney color="primary" />
-            Revenue Distribution Status
-          </Typography>
-          {revenueLoading ? (
-            <Box display="flex" justifyContent="center" p={3}>
-              <CircularProgress />
-            </Box>
-          ) : revenueStatus.length > 0 ? (
-            <TableContainer>
-              <Table>
-                <TableHead>
-                  <TableRow>
-                    <TableCell>Session</TableCell>
-                    <TableCell>Start Time</TableCell>
-                    <TableCell>Total Revenue</TableCell>
-                    <TableCell>Coach Share (80%)</TableCell>
-                    <TableCell>Platform Share (20%)</TableCell>
-                    <TableCell>Hours Until Start</TableCell>
-                    <TableCell>Status</TableCell>
-                  </TableRow>
-                </TableHead>
-                <TableBody>
-                  {revenueStatus.map((status, index) => (
-                    <TableRow key={index}>
-                      <TableCell>
-                        <Typography variant="body2" fontWeight="bold">
-                          {status.title}
-                        </Typography>
-                      </TableCell>
-                      <TableCell>
-                        {status.startTime ? new Date(status.startTime).toLocaleString() : 'N/A'}
-                      </TableCell>
-                      <TableCell>
-                        <Typography variant="body2" color="success.main" fontWeight="bold">
-                          RM {status.totalRevenue?.toFixed(2) || '0.00'}
-                        </Typography>
-                      </TableCell>
-                      <TableCell>
-                        <Typography variant="body2" color="primary" fontWeight="bold">
-                          RM {status.coachShare?.toFixed(2) || '0.00'}
-                        </Typography>
-                      </TableCell>
-                      <TableCell>
-                        <Typography variant="body2" color="text.secondary">
-                          RM {status.platformShare?.toFixed(2) || '0.00'}
-                        </Typography>
-                      </TableCell>
-                      <TableCell>
-                        <Typography variant="body2" color={status.hoursUntilStart <= 24 ? 'warning.main' : 'text.secondary'}>
-                          {status.hoursUntilStart || 0} hours
-                        </Typography>
-                      </TableCell>
-                      <TableCell>
-                        <Chip
-                          label={status.revenueDistributed ? 'Distributed' : 'Pending'}
-                          color={status.revenueDistributed ? 'success' : 'warning'}
-                          size="small"
-                        />
-                      </TableCell>
-                    </TableRow>
-                  ))}
-                </TableBody>
-              </Table>
-            </TableContainer>
-          ) : (
-            <Typography variant="body2" color="text.secondary" align="center" sx={{ py: 3 }}>
-              No revenue data available
-            </Typography>
-          )}
-        </CardContent>
-      </Card>
+        <Typography variant="body2" color="text.secondary" sx={{ display: 'flex', alignItems: 'center' }}>
+          <CheckCircleOutline color="success" sx={{ mr: 1 }} />
+          Automated Revenue Distribution System Enabled - Processing COMPLETED sessions every 5 minutes
+        </Typography>
+      </Box>
       
-      {showWalletTransactions ? (
-        // 錢包交易記錄
-        <>
-          {/* 錢包統計卡片 */}
-          <Grid container spacing={3} sx={{ mb: 3 }}>
-            <Grid item xs={12} md={3}>
-              <Card>
-                <CardContent>
-                  <Typography variant="h6" gutterBottom sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
-                    <AccountBalanceWallet color="primary" />
-                    Wallet Balance
-                  </Typography>
-                  {walletBalance ? (
-                    <Typography variant="h4" color="primary" fontWeight="bold">
-                      RM {walletBalance.balance?.toFixed(2) || '0.00'}
-                    </Typography>
-                  ) : (
-                    <Typography variant="body2" color="text.secondary">
-                      RM 0.00
-                    </Typography>
-                  )}
-                </CardContent>
-              </Card>
-            </Grid>
-            
-            <Grid item xs={12} md={3}>
-              <Card>
-                <CardContent>
-                  <Typography variant="h6" gutterBottom sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
-                    <TrendingUp color="success" />
-                    Total Income
-                  </Typography>
-                  <Typography variant="h4" color="success.main" fontWeight="bold">
-                    RM {walletTransactions.filter(t => t.isIncome).reduce((sum, t) => sum + (t.amount || 0), 0).toFixed(2)}
-                  </Typography>
-                </CardContent>
-              </Card>
-            </Grid>
-            
-            <Grid item xs={12} md={3}>
-              <Card>
-                <CardContent>
-                  <Typography variant="h6" gutterBottom sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
-                    <TrendingDown color="error" />
-                    Total Expense
-                  </Typography>
-                  <Typography variant="h4" color="error.main" fontWeight="bold">
-                    RM {walletTransactions.filter(t => !t.isIncome).reduce((sum, t) => sum + (t.amount || 0), 0).toFixed(2)}
-                  </Typography>
-                </CardContent>
-              </Card>
-            </Grid>
-            
-            <Grid item xs={12} md={3}>
-              <Card>
-                <CardContent>
-                  <Typography variant="h6" gutterBottom sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
-                    <AccountBalance color="info" />
-                    Net Income
-                  </Typography>
-                  <Typography variant="h4" color="info.main" fontWeight="bold">
-                    RM {(walletTransactions.filter(t => t.isIncome).reduce((sum, t) => sum + (t.amount || 0), 0) - 
-                         walletTransactions.filter(t => !t.isIncome).reduce((sum, t) => sum + (t.amount || 0), 0)).toFixed(2)}
-                  </Typography>
-                </CardContent>
-              </Card>
-            </Grid>
-          </Grid>
+      {/* 錢包統計卡片 */}
+      <Grid container spacing={3} sx={{ mb: 3 }}>
+        <Grid item xs={12} md={12}>
+          <Card>
+            <CardContent>
+              <Typography variant="h6" gutterBottom sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
+                <AccountBalanceWallet color="primary" />
+                Total Income
+              </Typography>
+              {walletBalance ? (
+                <Typography variant="h4" color="primary" fontWeight="bold">
+                  RM {walletBalance.balance?.toFixed(2) || '0.00'}
+                </Typography>
+              ) : (
+                <Typography variant="body2" color="text.secondary">
+                  RM 0.00
+                </Typography>
+              )}
+              <Typography variant="caption" color="text.secondary">
+                (Actual settled amount)
+              </Typography>
+            </CardContent>
+          </Card>
+        </Grid>
+      </Grid>
 
-          {/* 錢包交易記錄表格 */}
-          <Card>
-            <CardContent>
-              <Typography variant="h6" gutterBottom>Wallet Transactions</Typography>
-              {walletLoading ? (
-                <Box display="flex" justifyContent="center" p={3}>
-                  <CircularProgress />
-                </Box>
-              ) : walletTransactions.length > 0 ? (
-                <TableContainer>
-                  <Table>
-                    <TableHead>
-                      <TableRow>
-                        <TableCell>Date</TableCell>
-                        <TableCell>Type</TableCell>
-                        <TableCell>Description</TableCell>
-                        <TableCell>Amount</TableCell>
-                        <TableCell>Balance After</TableCell>
-                        <TableCell>Reference</TableCell>
-                      </TableRow>
-                    </TableHead>
-                    <TableBody>
-                      {walletTransactions.map((transaction, index) => (
-                        <TableRow key={index}>
-                          <TableCell>
-                            {transaction.transactionDate ? new Date(transaction.transactionDate).toLocaleDateString() : 'N/A'}
-                          </TableCell>
-                          <TableCell>
-                            <Chip
-                              label={transaction.transactionType}
-                              color={transaction.isIncome ? 'success' : 'error'}
-                              size="small"
-                            />
-                          </TableCell>
-                          <TableCell>
-                            <Typography variant="body2">
-                              {transaction.description || 'N/A'}
-                            </Typography>
-                          </TableCell>
-                          <TableCell>
-                            <Typography 
-                              variant="body2" 
-                              color={transaction.isIncome ? 'success.main' : 'error.main'}
-                              fontWeight="bold"
-                            >
-                              {transaction.isIncome ? '+' : '-'} RM {transaction.amount?.toFixed(2) || '0.00'}
-                            </Typography>
-                          </TableCell>
-                          <TableCell>
-                            <Typography variant="body2">
-                              RM {transaction.balanceAfter?.toFixed(2) || '0.00'}
-                            </Typography>
-                          </TableCell>
-                          <TableCell>
-                            <Typography variant="caption" color="text.secondary">
-                              {transaction.referenceType} {transaction.referenceId}
-                            </Typography>
-                          </TableCell>
-                        </TableRow>
-                      ))}
-                    </TableBody>
-                  </Table>
-                </TableContainer>
-              ) : (
-                <Box display="flex" flexDirection="column" alignItems="center" p={3}>
-                  <AccountBalanceWallet sx={{ fontSize: 64, color: 'text.secondary', mb: 2 }} />
-                  <Typography variant="h6" color="text.secondary" gutterBottom>
-                    No Wallet Transactions
-                  </Typography>
-                  <Typography variant="body2" color="text.secondary" textAlign="center">
-                    Your wallet transactions will appear here once you have completed sessions and received payments.
-                  </Typography>
-                </Box>
-              )}
-            </CardContent>
-          </Card>
-        </>
-      ) : (
-        // 收入歷史記錄
-        <>
-      {/* 收入統計卡片 */}
-      <Grid container spacing={3} sx={{ mb: 3 }}>
-        <Grid item xs={12} md={4}>
-          <Card>
-            <CardContent>
-              <Typography variant="h6" gutterBottom sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
-                <AccountBalanceWallet color="primary" />
-                Wallet Balance
-              </Typography>
-              {walletBalance ? (
-                <Typography variant="h4" color="primary" fontWeight="bold">
-                  RM {walletBalance.balance?.toFixed(2) || '0.00'}
-                </Typography>
-              ) : (
-                <Typography variant="body2" color="text.secondary">
-                      RM 0.00
-                </Typography>
-              )}
-            </CardContent>
-          </Card>
-        </Grid>
-        
-        <Grid item xs={12} md={4}>
-          <Card>
-            <CardContent>
-              <Typography variant="h6" gutterBottom sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
-                <AttachMoney color="success" />
-                Total Income
-              </Typography>
-              <Typography variant="h4" color="success.main" fontWeight="bold">
-                RM {incomeHistory.reduce((sum, record) => sum + (record.amount || 0), 0).toFixed(2)}
-              </Typography>
-            </CardContent>
-          </Card>
-        </Grid>
-        
-        <Grid item xs={12} md={4}>
-          <Card>
-            <CardContent>
-              <Typography variant="h6" gutterBottom sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
-                <Receipt color="info" />
-                Total Records
-              </Typography>
-              <Typography variant="h4" color="info.main" fontWeight="bold">
-                {incomeHistory.length}
-              </Typography>
-            </CardContent>
-          </Card>
-        </Grid>
-      </Grid>
-
-      {/* 收入歷史表格 */}
-      <Card>
-        <CardContent>
-          <Typography variant="h6" gutterBottom>Income Records</Typography>
-          {incomeLoading ? (
-            <Box display="flex" justifyContent="center" p={3}>
-              <CircularProgress />
-            </Box>
-          ) : incomeHistory.length > 0 ? (
-            <TableContainer>
-              <Table>
-                <TableHead>
-                  <TableRow>
-                    <TableCell>Date</TableCell>
-                    <TableCell>Session</TableCell>
-                    <TableCell>Students</TableCell>
-                    <TableCell>Session Revenue</TableCell>
-                    <TableCell>Coach Income (80%)</TableCell>
-                    <TableCell>Transaction ID</TableCell>
-                  </TableRow>
-                </TableHead>
-                <TableBody>
-                  {incomeHistory.map((record, index) => (
-                    <TableRow key={index}>
-                      <TableCell>
-                        {record.paymentDate ? new Date(record.paymentDate).toLocaleDateString() : 'N/A'}
-                      </TableCell>
-                      <TableCell>
-                        <Typography variant="body2" fontWeight="bold">
-                          {record.sessionTitle || 'N/A'}
-                        </Typography>
-                        <Typography variant="caption" color="text.secondary">
-                          {record.sessionDate ? new Date(record.sessionDate).toLocaleDateString() : 'N/A'}
-                        </Typography>
-                      </TableCell>
-                      <TableCell>
-                        {record.studentCount || 'N/A'}
-                      </TableCell>
-                      <TableCell>
-                            <Typography variant="body2" color="success.main" fontWeight="bold">
-                              RM {record.totalSessionRevenue?.toFixed(2) || '0.00'}
-                        </Typography>
-                      </TableCell>
-                      <TableCell>
-                            <Typography variant="body2" color="primary" fontWeight="bold">
-                              RM {record.amount?.toFixed(2) || '0.00'}
-                        </Typography>
-                      </TableCell>
-                      <TableCell>
-                        <Typography variant="caption" color="text.secondary">
-                          {record.transactionId || 'N/A'}
-                        </Typography>
-                      </TableCell>
-                    </TableRow>
-                  ))}
-                </TableBody>
-              </Table>
-            </TableContainer>
-          ) : (
-            <Box display="flex" flexDirection="column" alignItems="center" p={3}>
-              <Receipt sx={{ fontSize: 64, color: 'text.secondary', mb: 2 }} />
-              <Typography variant="h6" color="text.secondary" gutterBottom>
-                No Income Records
-              </Typography>
-              <Typography variant="body2" color="text.secondary" textAlign="center">
-                You haven't received any income yet. Income will appear here after your completed sessions are settled.
+      {/* 錢包交易記錄表格 */}
+      <Card>
+        <CardContent>
+          <Typography variant="h6" gutterBottom>Wallet Transactions</Typography>
+          {walletLoading ? (
+            <Box display="flex" justifyContent="center" p={3}>
+              <CircularProgress />
+            </Box>
+          ) : walletTransactions.length > 0 ? (
+            <TableContainer>
+              <Table>
+                <TableHead>
+                  <TableRow>
+                    <TableCell>Date</TableCell>
+                    <TableCell>Description</TableCell>
+                    <TableCell>Amount</TableCell>
+                    <TableCell>Balance After</TableCell>
+                  </TableRow>
+                </TableHead>
+                <TableBody>
+                  {walletTransactions.map((transaction, index) => (
+                    <TableRow key={index}>
+                      <TableCell>
+                        {transaction.transactionDate ? new Date(transaction.transactionDate).toLocaleDateString() : 'N/A'}
+                      </TableCell>
+                      <TableCell>
+                        <Typography variant="body2">
+                          {transaction.description || 'N/A'}
+                        </Typography>
+                      </TableCell>
+                      <TableCell>
+                        <Typography 
+                          variant="body2" 
+                          color={transaction.isIncome ? 'success.main' : 'error.main'}
+                          fontWeight="bold"
+                        >
+                          {transaction.isIncome ? '+' : '-'} RM {transaction.amount?.toFixed(2) || '0.00'}
+                        </Typography>
+                      </TableCell>
+                      <TableCell>
+                        <Typography variant="body2">
+                          RM {transaction.balanceAfter?.toFixed(2) || '0.00'}
+                        </Typography>
+                      </TableCell>
+                    </TableRow>
+                  ))}
+                </TableBody>
+              </Table>
+            </TableContainer>
+          ) : (
+            <Box display="flex" flexDirection="column" alignItems="center" p={3}>
+              <AccountBalanceWallet sx={{ fontSize: 64, color: 'text.secondary', mb: 2 }} />
+              <Typography variant="h6" color="text.secondary" gutterBottom>
+                No Wallet Transactions
+              </Typography>
+              <Typography variant="body2" color="text.secondary" textAlign="center">
+                Your wallet transactions will appear here once you have completed sessions and received payments.
               </Typography>
             </Box>
           )}
         </CardContent>
       </Card>
-        </>
-      )}
     </Box>
   );
 
@@ -3206,15 +3529,24 @@
                 // 批量請求顯示
                 <Box>
                   <Typography variant="body2" sx={{ mb: 2 }}>
-                    <strong>Number of Students:</strong> {bookReplacementDialog.batchRequests.length}<br/>
-                    <strong>Original Session Duration:</strong> {replacementSessionData.originalDuration || 1} hours
+                    <strong>Number of Students:</strong> {[...new Set(bookReplacementDialog.batchRequests.map(r => r.studentName))].length}<br/>
+                    <strong>Total Original Session Duration:</strong> {replacementSessionData.originalDuration || 1} hours
                   </Typography>
                   <Typography variant="subtitle2" gutterBottom>Student List:</Typography>
-                  {bookReplacementDialog.batchRequests.map((req, index) => (
-                    <Typography key={req.id} variant="body2" sx={{ mb: 1, pl: 2 }}>
-                      {index + 1}. <strong>{req.studentName}</strong> - {req.reason}
-                    </Typography>
-                  ))}
+                  {[...new Set(bookReplacementDialog.batchRequests.map(r => r.studentName))].map((studentName, index) => {
+                    // 獲取該學生的所有原因
+                    const studentReasons = bookReplacementDialog.batchRequests
+                      .filter(r => r.studentName === studentName)
+                      .map(r => r.reason);
+                    const uniqueReasons = [...new Set(studentReasons)];
+                    const reasonsText = uniqueReasons.join(', ');
+                    
+                    return (
+                      <Typography key={studentName} variant="body2" sx={{ mb: 1, pl: 2 }}>
+                        {index + 1}. <strong>{studentName}</strong> - {reasonsText}
+                      </Typography>
+                    );
+                  })}
                 </Box>
               ) : (
                 // 單個請求顯示
@@ -3541,6 +3873,628 @@
           </Button>
         </DialogActions>
       </Dialog>
+
+      {/* 編輯課程對話框 */}
+      <EditClassSessionDialog 
+        open={editDialogOpen} 
+        session={editSession} 
+        onClose={() => setEditDialogOpen(false)} 
+        onSuccess={handleEditSuccess} 
+      />
+
+      {/* 補課安排對話框 */}
+      <Dialog 
+        open={makeupDialogOpen} 
+        onClose={() => setMakeupDialogOpen(false)}
+        maxWidth="md"
+        fullWidth
+      >
+        <DialogTitle>
+          <Typography variant="h6" sx={{ fontWeight: 'bold' }}>
+            Arrange Makeup Class
+          </Typography>
+          {selectedMakeupRequest && (
+            <Typography variant="body2" color="text.secondary" sx={{ mt: 1 }}>
+              Arrange makeup class for {selectedMakeupRequest.studentName}
+            </Typography>
+          )}
+        </DialogTitle>
+        <DialogContent>
+          {selectedMakeupRequest && (
+            <Card variant="outlined" sx={{ mb: 3, p: 2 }}>
+              <Typography variant="subtitle2" color="text.secondary" gutterBottom>
+                Original Class Information
+              </Typography>
+              <Typography variant="body2">
+                <strong>Student:</strong> {selectedMakeupRequest.studentName}
+              </Typography>
+              <Typography variant="body2">
+                <strong>Original Date:</strong> {new Date(selectedMakeupRequest.originalDate).toLocaleDateString()}
+              </Typography>
+              <Typography variant="body2">
+                <strong>Original Time:</strong> {new Date(selectedMakeupRequest.originalDate).toLocaleTimeString([], { 
+                  hour: '2-digit', 
+                  minute: '2-digit' 
+                })}
+              </Typography>
+              <Typography variant="body2">
+                <strong>Reason:</strong> {selectedMakeupRequest.reason || 'No reason provided'}
+              </Typography>
+            </Card>
+          )}
+
+          <Typography variant="subtitle1" sx={{ fontWeight: 'bold', mb: 2 }}>
+            Select Makeup Time Slot ({availableSessionsForMakeup.length} available)
+          </Typography>
+
+          {loadingAvailableSessions ? (
+            <Box display="flex" justifyContent="center" p={3}>
+              <CircularProgress />
+            </Box>
+          ) : availableSessionsForMakeup.length > 0 ? (
+            <Grid container spacing={2}>
+              {availableSessionsForMakeup.map((courseGroup) => (
+                <Grid item xs={12} sm={6} md={4} key={courseGroup.id}>
+                  <Card 
+                    variant="outlined" 
+                    sx={{ 
+                      cursor: 'pointer',
+                      '&:hover': { borderColor: 'primary.main', backgroundColor: 'action.hover' },
+                      height: '100%',
+                      borderColor: (courseGroup.currentParticipants / courseGroup.maxParticipants) > 0.8 ? 'warning.main' : 'divider',
+                      borderWidth: (courseGroup.currentParticipants / courseGroup.maxParticipants) > 0.8 ? 2 : 1
+                    }}
+                    onClick={() => handleViewAvailableSlots(courseGroup)}
+                  >
+                    <CardContent>
+                      <Typography variant="h6" fontWeight="bold" gutterBottom>
+                        {courseGroup.title || '課程'}
+                      </Typography>
+                      
+                      <Typography variant="body2" color="text.secondary" gutterBottom>
+                        Court: {courseGroup.courtName || 'N/A'} | 
+                        Venue: {courseGroup.venueName || 'N/A'}
+                      </Typography>
+                      
+                      <Typography variant="body2" color="text.secondary" gutterBottom>
+                        Price: ${courseGroup.price || 0}
+                      </Typography>
+                      
+                      <Typography variant="body2" fontWeight="bold" sx={{ mt: 2 }}>
+                        {new Date(courseGroup.startTime).toLocaleDateString()}
+                      </Typography>
+                      
+                      <Typography variant="body2" color="text.secondary">
+                        {new Date(courseGroup.startTime).toLocaleTimeString([], { 
+                          hour: '2-digit', 
+                          minute: '2-digit' 
+                        })} - {new Date(courseGroup.endTime).toLocaleTimeString([], { 
+                          hour: '2-digit', 
+                          minute: '2-digit' 
+                        })}
+                      </Typography>
+                      
+                      <Typography variant="body2" color="text.secondary" sx={{ mt: 1 }}>
+                        Capacity: {courseGroup.currentParticipants || 0} / {courseGroup.maxParticipants || 0}
+                        {courseGroup.currentParticipants > 0 && (
+                          <Typography component="span" variant="caption" color="text.secondary" sx={{ ml: 1 }}>
+                            ({Math.round((courseGroup.currentParticipants / courseGroup.maxParticipants) * 100)}% full)
+                          </Typography>
+                        )}
+                      </Typography>
+                      
+                      <Typography variant="caption" color="primary" sx={{ mt: 1, display: 'block' }}>
+                        {courseGroup.sessions.length} time slot(s) available
+                      </Typography>
+                      
+                      <Box sx={{ mt: 2, display: 'flex', alignItems: 'center', gap: 1, flexWrap: 'wrap' }}>
+                        <Chip 
+                          label="View Time Slots" 
+                          color="primary" 
+                          size="small" 
+                          variant="outlined"
+                        />
+                        <Typography variant="caption" color="text.secondary">
+                          Click to see available slots
+                        </Typography>
+                        {(courseGroup.currentParticipants / courseGroup.maxParticipants) > 0.8 && (
+                          <Chip 
+                            label="Almost Full" 
+                            color="warning" 
+                            size="small" 
+                            variant="outlined"
+                            sx={{ ml: 'auto' }}
+                          />
+                        )}
+                      </Box>
+                    </CardContent>
+                  </Card>
+                </Grid>
+              ))}
+            </Grid>
+          ) : (
+            <Box textAlign="center" py={3}>
+              <Typography variant="body1" color="text.secondary">
+                No available makeup time slots
+              </Typography>
+              <Typography variant="body2" color="text.secondary" sx={{ mt: 1 }}>
+                All available sessions may be full, the student is already enrolled, or no sessions allow makeup classes.
+              </Typography>
+            </Box>
+          )}
+        </DialogContent>
+        <DialogActions>
+          <Button onClick={() => setMakeupDialogOpen(false)}>
+            Cancel
+          </Button>
+        </DialogActions>
+      </Dialog>
+
+      {/* 可用時段選擇對話框 */}
+      <Dialog 
+        open={showSlotsDialog} 
+        onClose={() => {
+          setShowSlotsDialog(false);
+          setSelectedCourseForSlots(null);
+        }}
+        maxWidth="md"
+        fullWidth
+      >
+        <DialogTitle>
+          <Typography variant="h6" sx={{ fontWeight: 'bold' }}>
+            Available Time Slots
+          </Typography>
+          {selectedCourseForSlots && (
+            <Typography variant="body2" color="text.secondary" sx={{ mt: 1 }}>
+              {selectedCourseForSlots.title} - Select a specific time slot
+            </Typography>
+          )}
+        </DialogTitle>
+        <DialogContent>
+          {selectedCourseForSlots && (
+            <>
+              {/* 課程基本信息 */}
+              <Card variant="outlined" sx={{ mb: 3, p: 2 }}>
+                <Typography variant="subtitle2" color="text.secondary" gutterBottom>
+                  Course Information
+                </Typography>
+                <Typography variant="body2">
+                  <strong>Title:</strong> {selectedCourseForSlots.title}
+                </Typography>
+                <Typography variant="body2">
+                  <strong>Court:</strong> {selectedCourseForSlots.courtName || 'N/A'}
+                </Typography>
+                <Typography variant="body2">
+                  <strong>Venue:</strong> {selectedCourseForSlots.venueName || 'N/A'}
+                </Typography>
+                <Typography variant="body2">
+                  <strong>Price:</strong> ${selectedCourseForSlots.price || 0}
+                </Typography>
+              </Card>
+
+              {/* 调试信息 */}
+              <Box sx={{ mb: 2, p: 2, bgcolor: 'grey.100', borderRadius: 1 }}>
+                <Typography variant="caption" color="text.secondary">
+                  Debug: Course sessions: {selectedCourseForSlots.sessions.length} | 
+                  Other sessions: {selectedCourseForSlots.sessions.filter(s => s.id !== selectedCourseForSlots.id).length}
+                </Typography>
+              </Box>
+              
+              {/* 补课说明 */}
+              <Box sx={{ mb: 2, p: 2, bgcolor: 'info.light', borderRadius: 1 }}>
+                <Typography variant="body2" color="info.contrastText">
+                  <strong>Note:</strong> Makeup students are added separately and do not affect the regular capacity. 
+                  Other students can still register for the remaining {selectedCourseForSlots.maxParticipants || 0} spots.
+                </Typography>
+              </Box>
+
+              {/* 可用時段列表 */}
+              <Typography variant="subtitle1" sx={{ fontWeight: 'bold', mb: 2 }}>
+                Available Time Slots
+              </Typography>
+              
+              <Grid container spacing={2}>
+                {/* 当前选中的时段 */}
+                <Grid item xs={12} sm={6} md={4}>
+                  <Card 
+                    variant="outlined" 
+                    sx={{ 
+                      cursor: 'pointer',
+                      '&:hover': { borderColor: 'primary.main', backgroundColor: 'action.hover' },
+                      height: '100%',
+                      borderColor: 'primary.main',
+                      borderWidth: 2
+                    }}
+                    onClick={() => handleConfirmMakeupArrangement(selectedCourseForSlots)}
+                  >
+                    <CardContent>
+                      <Typography variant="body2" fontWeight="bold">
+                        {new Date(selectedCourseForSlots.startTime).toLocaleDateString()}
+                      </Typography>
+                      <Typography variant="body2" color="text.secondary">
+                        {new Date(selectedCourseForSlots.startTime).toLocaleTimeString([], { 
+                          hour: '2-digit', 
+                          minute: '2-digit' 
+                        })} - {new Date(selectedCourseForSlots.endTime).toLocaleTimeString([], { 
+                          hour: '2-digit', 
+                          minute: '2-digit' 
+                        })}
+                      </Typography>
+                      <Typography variant="body2" color="text.secondary" sx={{ mt: 1 }}>
+                        Capacity: {selectedCourseForSlots.currentParticipants || 0} / {selectedCourseForSlots.maxParticipants || 0}
+                        <Typography component="span" variant="caption" color="primary" sx={{ ml: 1 }}>
+                          (Makeup students don't count towards capacity)
+                        </Typography>
+                      </Typography>
+                      <Box sx={{ mt: 2, display: 'flex', alignItems: 'center', gap: 1 }}>
+                        <Chip 
+                          label="Select This Slot" 
+                          color="primary" 
+                          size="small" 
+                          variant="filled"
+                        />
+                      </Box>
+                    </CardContent>
+                  </Card>
+                </Grid>
+
+                {/* 其他相关时段（如果有的话） */}
+                {selectedCourseForSlots.sessions
+                  .filter(session => session.id !== selectedCourseForSlots.id)
+                  .map((session) => (
+                    <Grid item xs={12} sm={6} md={4} key={session.id}>
+                      <Card 
+                        variant="outlined" 
+                        sx={{ 
+                          cursor: 'pointer',
+                          '&:hover': { borderColor: 'primary.main', backgroundColor: 'action.hover' },
+                          height: '100%',
+                          borderColor: (session.currentParticipants / session.maxParticipants) > 0.8 ? 'warning.main' : 'divider',
+                          borderWidth: (session.currentParticipants / session.maxParticipants) > 0.8 ? 2 : 1
+                        }}
+                        onClick={() => handleConfirmMakeupArrangement(session)}
+                      >
+                        <CardContent>
+                          <Typography variant="body2" fontWeight="bold">
+                            {new Date(session.startTime).toLocaleDateString()}
+                          </Typography>
+                          <Typography variant="body2" color="text.secondary">
+                            {new Date(session.startTime).toLocaleTimeString([], { 
+                              hour: '2-digit', 
+                              minute: '2-digit' 
+                            })} - {new Date(session.endTime).toLocaleTimeString([], { 
+                              hour: '2-digit', 
+                              minute: '2-digit' 
+                            })}
+                          </Typography>
+                                                <Typography variant="body2" color="text.secondary" sx={{ mt: 1 }}>
+                        Capacity: {session.currentParticipants || 0} / {session.maxParticipants || 0}
+                        <Typography component="span" variant="caption" color="primary" sx={{ ml: 1 }}>
+                          (Makeup students don't count towards capacity)
+                        </Typography>
+                      </Typography>
+                          <Box sx={{ mt: 2, display: 'flex', alignItems: 'center', gap: 1, flexWrap: 'wrap' }}>
+                            <Chip 
+                              label="Select This Slot" 
+                              color="primary" 
+                              size="small" 
+                              variant="outlined"
+                            />
+                            {(session.currentParticipants / session.maxParticipants) > 0.8 && (
+                              <Chip 
+                                label="Almost Full" 
+                                color="warning" 
+                                size="small" 
+                                variant="outlined"
+                                sx={{ ml: 'auto' }}
+                              />
+                            )}
+                          </Box>
+                        </CardContent>
+                      </Card>
+                    </Grid>
+                  ))}
+              </Grid>
+
+              {selectedCourseForSlots.sessions.filter(session => session.id !== selectedCourseForSlots.id).length === 0 && (
+                <Box textAlign="center" py={3}>
+                  <Typography variant="body2" color="text.secondary">
+                    No other time slots available for this course.
+                  </Typography>
+                </Box>
+              )}
+            </>
+          )}
+        </DialogContent>
+        <DialogActions>
+          <Button onClick={() => {
+            setShowSlotsDialog(false);
+            setSelectedCourseForSlots(null);
+          }}>
+            Back to Course Selection
+          </Button>
+        </DialogActions>
+      </Dialog>
+
+      {/* Book Court Dialog */}
+      <Dialog 
+        open={bookCourtDialog.open} 
+        onClose={() => setBookCourtDialog({ open: false, request: null })}
+        maxWidth="md"
+        fullWidth
+      >
+        <DialogTitle>
+          <Typography variant="h6" sx={{ fontWeight: 'bold', color: theme.palette.primary.main }}>
+            Book New Court for Replacement Class
+          </Typography>
+        </DialogTitle>
+        <DialogContent>
+          {bookCourtDialog.request && (
+            <>
+              {/* 原始请假请求信息 */}
+              <Card variant="outlined" sx={{ mb: 3, p: 2, bgcolor: 'info.light' }}>
+                <Typography variant="subtitle2" color="info.contrastText" gutterBottom>
+                  Original Leave Request Details
+                </Typography>
+                <Grid container spacing={2}>
+                  <Grid item xs={12} md={6}>
+                    <Typography variant="body2" color="info.contrastText">
+                      <strong>Student:</strong> {bookCourtDialog.request.studentName}
+                    </Typography>
+                    <Typography variant="body2" color="info.contrastText">
+                      <strong>Original Session:</strong> {bookCourtDialog.request.originalSessionTitle || 'N/A'}
+                    </Typography>
+                    <Typography variant="body2" color="info.contrastText">
+                      <strong>Original Date:</strong> {new Date(bookCourtDialog.request.originalDate).toLocaleDateString()}
+                    </Typography>
+                  </Grid>
+                  <Grid item xs={12} md={6}>
+                    <Typography variant="body2" color="info.contrastText">
+                      <strong>Original Time:</strong> {bookCourtDialog.request.originalSessionStartTime ?
+                        new Date(bookCourtDialog.request.originalSessionStartTime).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }) : ''} - 
+                      {bookCourtDialog.request.originalSessionEndTime ?
+                        new Date(bookCourtDialog.request.originalSessionEndTime).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }) : ''}
+                    </Typography>
+                    <Typography variant="body2" color="info.contrastText">
+                      <strong>Duration:</strong> {bookCourtData.originalDuration} hour(s)
+                    </Typography>
+                    <Typography variant="body2" color="info.contrastText">
+                      <strong>Reason:</strong> {bookCourtDialog.request.reason || 'No reason provided'}
+                    </Typography>
+                  </Grid>
+                </Grid>
+              </Card>
+
+              {/* 新课程表单 */}
+              <Typography variant="h6" gutterBottom sx={{ fontWeight: 'bold', color: theme.palette.text.primary }}>
+                New Session Details
+              </Typography>
+
+              <Grid container spacing={2}>
+                <Grid item xs={12}>
+                  <TextField
+                    label="Session Title"
+                    fullWidth
+                    value={bookCourtData.title}
+                    onChange={(e) => setBookCourtData({...bookCourtData, title: e.target.value})}
+                    helperText="Title for the new replacement session"
+                  />
+                </Grid>
+
+                <Grid item xs={12}>
+                  <TextField
+                    label="Description"
+                    fullWidth
+                    multiline
+                    rows={2}
+                    value={bookCourtData.description}
+                    onChange={(e) => setBookCourtData({...bookCourtData, description: e.target.value})}
+                    helperText="Description for the new session"
+                  />
+                </Grid>
+
+                <Grid item xs={12} md={6}>
+                  <TextField
+                    label="Original Venue"
+                    fullWidth
+                    value={loadingVenueInfo ? 'Loading...' : (bookCourtData.venueName || 'Not specified')}
+                    InputProps={{ 
+                      readOnly: true,
+                      endAdornment: loadingVenueInfo ? <CircularProgress size={20} /> : null
+                    }}
+                    helperText={loadingVenueInfo ? "Loading venue information..." : "Original venue from leave request (cannot be changed)"}
+                    sx={{ 
+                      '& .MuiInputBase-input': { 
+                        backgroundColor: 'grey.100',
+                        color: 'text.secondary'
+                      }
+                    }}
+                  />
+                </Grid>
+
+                <Grid item xs={12} md={6}>
+                  <FormControl fullWidth>
+                    <InputLabel>Court</InputLabel>
+                    <Select
+                      value={bookCourtData.courtId || ''}
+                      onChange={(e) => {
+                        const selectedCourt = courts.find(c => c.id === e.target.value);
+                        setBookCourtData({
+                          ...bookCourtData,
+                          courtId: e.target.value
+                        });
+                      }}
+                      label="Court"
+                      disabled={!bookCourtData.venueId || loadingVenueInfo}
+                    >
+                      {courts
+                        .filter(court => court.venue?.id === bookCourtData.venueId)
+                        .map((court) => (
+                          <MenuItem key={court.id} value={court.id}>
+                            {court.name}
+                          </MenuItem>
+                        ))}
+                    </Select>
+                    {loadingVenueInfo ? (
+                      <FormHelperText>Loading venue information...</FormHelperText>
+                    ) : !bookCourtData.venueId ? (
+                      <FormHelperText>Venue information not available</FormHelperText>
+                    ) : courts.filter(court => court.venue?.id === bookCourtData.venueId).length === 0 ? (
+                      <FormHelperText>No courts available for this venue</FormHelperText>
+                    ) : (
+                      <FormHelperText>Select a court from the original venue</FormHelperText>
+                    )}
+                  </FormControl>
+                </Grid>
+
+                <Grid item xs={12} md={6}>
+                  <TextField
+                    label="Date"
+                    type="date"
+                    fullWidth
+                    value={bookCourtData.date || ''}
+                    onChange={(e) => {
+                      const dateStr = e.target.value;
+                      setBookCourtData({...bookCourtData, date: dateStr});
+                      if (dateStr && bookCourtData.courtId) {
+                        getAvailableSlotsForDate(dateStr, bookCourtData.courtId).then(availableSlots => {
+                          setBookCourtData(prev => ({ ...prev, availableSlots }));
+                        });
+                      }
+                    }}
+                    InputLabelProps={{ shrink: true }}
+                    disabled={!bookCourtData.courtId}
+                    helperText={!bookCourtData.courtId ? "Please select a court first" : ""}
+                  />
+                </Grid>
+
+                <Grid item xs={12}>
+                  {bookCourtData.date && bookCourtData.availableSlots && (
+                    <Box>
+                      <Typography variant="subtitle2" gutterBottom>
+                        Available Time Slots - {new Date(bookCourtData.date).toLocaleDateString('en-US', {
+                          weekday: 'long',
+                          year: 'numeric',
+                          month: 'long',
+                          day: 'numeric'
+                        })}
+                      </Typography>
+                      <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>
+                        {bookCourtData.availableSlots.map((slot, index) => {
+                          const isSelected = bookCourtData.selectedSlots.some(s => s.time === slot.time);
+                          const requiredSlots = bookCourtData.originalDuration || 1;
+                          const hasReachedLimit = bookCourtData.selectedSlots.length >= requiredSlots;
+                          
+                          return (
+                            <Chip
+                              key={index}
+                              label={`${slot.startTime} - ${slot.endTime}`}
+                              color={isSelected ? "primary" : "default"}
+                              variant={isSelected ? "filled" : "outlined"}
+                              onClick={() => {
+                                if (isSelected) {
+                                  setBookCourtData({
+                                    ...bookCourtData,
+                                    selectedSlots: bookCourtData.selectedSlots.filter(s => s.time !== slot.time)
+                                  });
+                                } else if (!hasReachedLimit) {
+                                  setBookCourtData({
+                                    ...bookCourtData,
+                                    selectedSlots: [...bookCourtData.selectedSlots, slot]
+                                  });
+                                }
+                              }}
+                              sx={{ 
+                                cursor: hasReachedLimit && !isSelected ? 'not-allowed' : 'pointer',
+                                opacity: hasReachedLimit && !isSelected ? 0.5 : 1
+                              }}
+                            />
+                          );
+                        })}
+                      </Box>
+                      {bookCourtData.selectedSlots.length > 0 && (
+                        <Box sx={{ mt: 2 }}>
+                          <Typography variant="body2" color="primary">
+                            Selected: {bookCourtData.selectedSlots.length} hour(s)
+                            {bookCourtData.selectedSlots.length >= bookCourtData.originalDuration &&
+                              <Typography component="span" variant="caption" color="success.main" sx={{ ml: 1 }}>
+                                ✓ Ready to book ({bookCourtData.originalDuration} hours required)
+                              </Typography>
+                            }
+                          </Typography>
+                        </Box>
+                      )}
+                    </Box>
+                  )}
+                </Grid>
+
+                <Grid item xs={12} md={6}>
+                  <TextField
+                    label="Max Participants"
+                    type="number"
+                    fullWidth
+                    value={bookCourtData.maxParticipants}
+                    onChange={(e) => setBookCourtData({...bookCourtData, maxParticipants: parseInt(e.target.value) || 1})}
+                    inputProps={{ min: 1, max: 20 }}
+                    helperText="Maximum number of students for this session"
+                  />
+                </Grid>
+
+                <Grid item xs={12} md={6}>
+                  <TextField
+                    label="Price (RM)"
+                    type="number"
+                    fullWidth
+                    value={0}
+                    InputProps={{ readOnly: true }}
+                    helperText="Free replacement class (price cannot be changed)"
+                    sx={{ 
+                      '& .MuiInputBase-input': { 
+                        backgroundColor: 'grey.100',
+                        color: 'text.secondary'
+                      }
+                    }}
+                  />
+                </Grid>
+              </Grid>
+            </>
+          )}
+        </DialogContent>
+        <DialogActions>
+          <Button onClick={() => {
+            setBookCourtDialog({ open: false, request: null });
+            setLoadingVenueInfo(false);
+            setBookCourtData({
+              title: '',
+              description: '',
+              venueId: '',
+              venueName: '',
+              state: '',
+              courtId: '',
+              startTime: '',
+              endTime: '',
+              maxParticipants: 6,
+              price: 0,
+              slotType: 'COACH_SESSION',
+              date: '',
+              availableSlots: [],
+              selectedSlots: [],
+              originalRequest: null,
+              originalDuration: 1
+            });
+          }}>
+            Cancel
+          </Button>
+          <Button 
+            variant="contained" 
+            color="primary"
+            onClick={handleCreateBookCourtSession}
+            disabled={!bookCourtData.courtId || !bookCourtData.date || bookCourtData.selectedSlots.length !== bookCourtData.originalDuration}
+          >
+            Create Session
+          </Button>
+        </DialogActions>
+      </Dialog>
     </Box>
   );
 } 
\ No newline at end of file
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/BookingResponseDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.dto;\r\n\r\nimport lombok.Data;\r\nimport java.time.LocalDate;\r\nimport java.time.LocalTime;\r\n\r\n@Data\r\npublic class BookingResponseDto {\r\n    private Integer bookingId;\r\n    private String courtName;\r\n    private String courtLocation;\r\n    private LocalDate slotDate;  // Added this field\r\n    private LocalTime startTime;\r\n    private LocalTime endTime;\r\n    private double totalAmount;\r\n    private String bookingStatus;\r\n    private String purpose;\r\n    private Integer numberOfPlayers;\r\n    private Integer durationHours;\r\n    private String paymentMethod;\r\n    private String paymentStatus;\r\n    private Double walletBalance;\r\n    private Integer pointsEarned;  // Points earned from this booking\r\n    private Integer currentPointBalance;  // Current total point balance\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/BookingResponseDto.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/BookingResponseDto.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/BookingResponseDto.java	(revision 89327e12854b108d004ebb020d0592b1c618ecaf)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/BookingResponseDto.java	(date 1754078647860)
@@ -21,5 +21,10 @@
     private String paymentStatus;
     private Double walletBalance;
     private Integer pointsEarned;  // Points earned from this booking
-    private Integer currentPointBalance;  // Current total point balance
+    private Integer currentTierPointBalance;  // Current tier point balance
+    private Integer currentRewardPointBalance;  // Current reward point balance
+    private Boolean voucherUsed;  // 新增：是否使用了voucher
+    private Double originalAmount;  // 新增：原始金額（未折扣前）
+    private Double discountAmount;  // 新增：折扣金額
+    private String voucherCode;  // 新增：使用的voucher代碼
 }
\ No newline at end of file
Index: pickleball-frontend/src/components/profile/MyClassSessions.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useState, useEffect } from 'react';\r\nimport { \r\n  Box, \r\n  Typography, \r\n  Card, \r\n  CardContent, \r\n  Grid, \r\n  Chip, \r\n  Button, \r\n  Dialog, \r\n  DialogTitle, \r\n  DialogContent, \r\n  DialogActions, \r\n  List, \r\n  ListItem, \r\n  ListItemText, \r\n  ListItemAvatar, \r\n  Avatar, \r\n  Divider, \r\n  CircularProgress, \r\n  Alert, \r\n  Rating, \r\n  IconButton, \r\n  Tooltip,\r\n  TextField,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem\r\n} from '@mui/material';\r\nimport { \r\n  School as SchoolIcon, \r\n  Person as PersonIcon, \r\n  LocationOn as LocationIcon, \r\n  AccessTime as TimeIcon, \r\n  CalendarToday as CalendarIcon, \r\n  Star as StarIcon, \r\n  Cancel as CancelIcon, \r\n  CheckCircle as CheckCircleIcon, \r\n  Schedule as ScheduleIcon, \r\n  Comment as CommentIcon,\r\n  RateReview as ReviewIcon\r\n} from '@mui/icons-material';\r\nimport { useAuth } from '../../context/AuthContext';\r\nimport LeaveRequestService from '../../service/LeaveRequestService';\r\nimport ClassSessionService from '../../service/ClassSessionService';\r\n\r\nconst MyClassSessions = () => {\r\n  const { currentUser } = useAuth();\r\n  const [sessions, setSessions] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState('');\r\n  const [cancelDialog, setCancelDialog] = useState({ open: false, session: null });\r\n  const [cancelling, setCancelling] = useState(false);\r\n  const [cancelReason, setCancelReason] = useState('');\r\n  const [showSuccessMessage, setShowSuccessMessage] = useState(false);\r\n  const [successMessage, setSuccessMessage] = useState('');\r\n  const [expandedGroups, setExpandedGroups] = useState([]);\r\n  const [reviewDialog, setReviewDialog] = useState({ open: false, session: null });\r\n  const [reviewData, setReviewData] = useState({ rating: 0, comment: '' });\r\n  const [submittingReview, setSubmittingReview] = useState(false);\r\n  const [leaveDialog, setLeaveDialog] = useState({ open: false, session: null });\r\n  const [leaveData, setLeaveData] = useState({ reason: '' });\r\n  const [submittingLeave, setSubmittingLeave] = useState(false);\r\n  const [leaveRequests, setLeaveRequests] = useState([]);\r\n  const [makeupDialog, setMakeupDialog] = useState({ open: false, session: null });\r\n  const [coachSchedule, setCoachSchedule] = useState([]);\r\n  const [loadingCoachSchedule, setLoadingCoachSchedule] = useState(false);\r\n  const [availableSessions, setAvailableSessions] = useState([]);\r\n  const [loadingAvailableSessions, setLoadingAvailableSessions] = useState(false);\r\n  const [selectedReplacementSession, setSelectedReplacementSession] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if (currentUser && currentUser.id) {\r\n      fetchUserSessions();\r\n    }\r\n  }, [currentUser]);\r\n\r\n  const fetchUserSessions = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(''); // Clear previous errors\r\n      \r\n      console.log('Fetching sessions for user:', currentUser);\r\n      \r\n      if (!currentUser || !currentUser.id) {\r\n        throw new Error('User not authenticated or user ID not available');\r\n      }\r\n      \r\n      const token = localStorage.getItem('authToken');\r\n      if (!token) {\r\n        throw new Error('Authentication token not found');\r\n      }\r\n      \r\n      console.log('Making API call to:', `http://localhost:8081/api/class-sessions/user/${currentUser.id}`);\r\n      \r\n      const response = await fetch(`http://localhost:8081/api/class-sessions/user/${currentUser.id}`, {\r\n        headers: {\r\n          'Authorization': `Bearer ${token}`,\r\n          'Content-Type': 'application/json'\r\n        }\r\n      });\r\n\r\n      console.log('Response status:', response.status);\r\n      console.log('Response headers:', response.headers);\r\n\r\n      if (!response.ok) {\r\n        const errorText = await response.text();\r\n        console.error('API Error Response:', errorText);\r\n        throw new Error(`API Error: ${response.status} - ${errorText}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      console.log('Received data:', data);\r\n      setSessions(data);\r\n      \r\n      // Fetch leave requests for the current user\r\n      try {\r\n        const leaveResponse = await fetch(`http://localhost:8081/api/leave-requests/student?studentId=${currentUser.id}`, {\r\n          headers: {\r\n            'Authorization': `Bearer ${token}`,\r\n            'Content-Type': 'application/json'\r\n          }\r\n        });\r\n        \r\n        if (leaveResponse.ok) {\r\n          const leaveData = await leaveResponse.json();\r\n          setLeaveRequests(leaveData);\r\n          console.log('Fetched leave requests:', leaveData);\r\n        }\r\n      } catch (leaveError) {\r\n        console.error('Error fetching leave requests:', leaveError);\r\n      }\r\n    } catch (err) {\r\n      console.error('Error fetching sessions:', err);\r\n      setError(`Failed to load your class sessions: ${err.message}`);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleCancelSession = async () => {\r\n    if (!cancelDialog.session) return;\r\n\r\n    try {\r\n      setCancelling(true);\r\n      \r\n      // 檢查是否在24小時內，如果是則需要原因\r\n      const sessionTime = new Date(cancelDialog.session.startTime);\r\n      const now = new Date();\r\n      const hoursUntilSession = (sessionTime - now) / (1000 * 60 * 60);\r\n      \r\n      let reason = cancelReason.trim();\r\n      if (hoursUntilSession <= 24 && !reason) {\r\n        setError('Please provide a reason for cancellation within 24 hours of the session.');\r\n        return;\r\n      }\r\n      \r\n      // 如果沒有提供原因，使用默認原因\r\n      if (!reason) {\r\n        reason = 'User requested cancellation';\r\n      }\r\n      \r\n      const response = await ClassSessionService.cancelSession(cancelDialog.session.id, reason);\r\n      \r\n      // 顯示成功消息\r\n      setSuccessMessage(`Successfully cancelled class session. Refund of RM ${cancelDialog.session.price} has been processed to your wallet.`);\r\n      setShowSuccessMessage(true);\r\n      \r\n      // Refresh sessions\r\n      await fetchUserSessions();\r\n      setCancelDialog({ open: false, session: null });\r\n      setCancelReason('');\r\n      \r\n      // 3秒後隱藏成功消息\r\n      setTimeout(() => {\r\n        setShowSuccessMessage(false);\r\n        setSuccessMessage('');\r\n      }, 5000);\r\n      \r\n    } catch (err) {\r\n      const errorMessage = err?.response?.data?.error || err.message;\r\n      if (errorMessage.includes('24 hours')) {\r\n        setError('Cannot cancel class session within 24 hours of start time. Please provide a reason and try again.');\r\n      } else {\r\n        setError('Failed to cancel session: ' + errorMessage);\r\n      }\r\n      console.error('Error cancelling session:', err);\r\n    } finally {\r\n      setCancelling(false);\r\n    }\r\n  };\r\n\r\n  const handleReviewSession = async () => {\r\n    if (!reviewDialog.session || reviewData.rating === 0) return;\r\n    \r\n    try {\r\n      setSubmittingReview(true);\r\n      setError(''); // 清除之前的错误\r\n      const token = localStorage.getItem('authToken');\r\n      \r\n      // 如果是課程組，需要為該組的所有已完成課程提交評價\r\n      if (reviewDialog.session.recurringGroupId) {\r\n        const groupSessions = sessions.filter(s => s.recurringGroupId === reviewDialog.session.recurringGroupId);\r\n        const completedSessions = groupSessions.filter(s => getSessionStatus(s).label === 'Completed');\r\n        \r\n        // 為每個已完成的課程提交評價\r\n        const reviewPromises = completedSessions.map(async session => {\r\n          const response = await fetch(`http://localhost:8081/api/class-sessions/${session.id}/review`, {\r\n            method: 'POST',\r\n            headers: {\r\n              'Authorization': `Bearer ${token}`,\r\n              'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n              rating: reviewData.rating,\r\n              comment: reviewData.comment\r\n            })\r\n          });\r\n          \r\n          if (!response.ok) {\r\n            const errorData = await response.json();\r\n            throw new Error(`Session ${session.id}: ${errorData.error || 'Failed to submit review'}`);\r\n          }\r\n          \r\n          return response;\r\n        });\r\n        \r\n        await Promise.all(reviewPromises);\r\n      } else {\r\n        // 單個課程評價\r\n        const response = await fetch(`http://localhost:8081/api/class-sessions/${reviewDialog.session.id}/review`, {\r\n          method: 'POST',\r\n          headers: {\r\n            'Authorization': `Bearer ${token}`,\r\n            'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify({\r\n            rating: reviewData.rating,\r\n            comment: reviewData.comment\r\n          })\r\n        });\r\n        \r\n        if (!response.ok) {\r\n          const errorData = await response.json();\r\n          console.error('Review submission failed:', errorData);\r\n          throw new Error(errorData.error || 'Failed to submit review');\r\n        }\r\n        \r\n        const result = await response.json();\r\n        console.log('Review submitted successfully:', result);\r\n      }\r\n      \r\n      // Refresh sessions after review submission\r\n      await fetchUserSessions();\r\n      setReviewDialog({ open: false, session: null });\r\n      setReviewData({ rating: 0, comment: '' });\r\n      setError(''); // 清除错误\r\n    } catch (error) {\r\n      console.error('Error submitting review:', error);\r\n      setError(error.message || 'Failed to submit review');\r\n    } finally {\r\n      setSubmittingReview(false);\r\n    }\r\n  };\r\n\r\n  const openReviewDialog = (session) => {\r\n    setReviewDialog({ open: true, session });\r\n    \r\n    // 如果是課程組，計算平均評分和評論\r\n    if (session.recurringGroupId) {\r\n      const groupSessions = sessions.filter(s => s.recurringGroupId === session.recurringGroupId);\r\n      const completedSessions = groupSessions.filter(s => getSessionStatus(s).label === 'Completed');\r\n      \r\n      if (completedSessions.length > 0) {\r\n        const totalRating = completedSessions.reduce((sum, s) => sum + (s.rating || 0), 0);\r\n        const avgRating = Math.round(totalRating / completedSessions.length);\r\n        const comments = completedSessions.map(s => s.coachComment).filter(Boolean);\r\n        const combinedComment = comments.length > 0 ? comments.join('\\n\\n') : '';\r\n        \r\n        setReviewData({ \r\n          rating: avgRating, \r\n          comment: combinedComment \r\n        });\r\n      } else {\r\n        setReviewData({ rating: 0, comment: '' });\r\n      }\r\n    } else {\r\n      // 單個課程\r\n      setReviewData({ \r\n        rating: session.rating || 0, \r\n        comment: session.coachComment || '' \r\n      });\r\n    }\r\n  };\r\n\r\n  const handleLeaveRequest = async () => {\r\n    if (!leaveDialog.session || !leaveData.reason.trim()) return;\r\n    \r\n    try {\r\n      setSubmittingLeave(true);\r\n      const token = localStorage.getItem('authToken');\r\n      \r\n      console.log('Submitting leave request for session:', leaveDialog.session.id);\r\n      console.log('Current user:', currentUser);\r\n      console.log('Leave reason:', leaveData.reason);\r\n      \r\n      // 創建 LeaveRequest，但不發送消息給教練\r\n      const leaveRequestData = {\r\n        studentId: currentUser.id,\r\n        coachId: leaveDialog.session.coachId,\r\n        sessionId: leaveDialog.session.id,\r\n        preferredDate: null, // 不設置偏好日期，讓學生後續選擇\r\n        reason: leaveData.reason,\r\n        requestType: 'DRAFT' // 設置為草稿狀態，不會顯示在教練的待處理列表中\r\n      };\r\n      \r\n      console.log('Leave request data:', leaveRequestData);\r\n      \r\n      const response = await fetch('http://localhost:8081/api/leave-requests', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Authorization': `Bearer ${token}`,\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(leaveRequestData)\r\n      });\r\n      \r\n      console.log('Response status:', response.status);\r\n      \r\n      if (!response.ok) {\r\n        const errorText = await response.text();\r\n        console.error('API Error Response:', errorText);\r\n        throw new Error(`API Error: ${response.status} - ${errorText}`);\r\n      }\r\n      \r\n      const result = await response.json();\r\n      console.log('Leave request result:', result);\r\n      \r\n      // Refresh sessions and leave requests after leave request\r\n      await fetchUserSessions();\r\n      setLeaveDialog({ open: false, session: null });\r\n      setLeaveData({ reason: '' });\r\n      \r\n      alert('請假請求已保存為草稿！請點擊 \"ARRANGE MAKEUP\" 來選擇替補課程或發送消息給教練。');\r\n    } catch (error) {\r\n      console.error('Error submitting leave request:', error);\r\n      setError(`Failed to submit leave request: ${error.message}`);\r\n    } finally {\r\n      setSubmittingLeave(false);\r\n    }\r\n  };\r\n\r\n  const fetchCoachSchedule = async (coachId) => {\r\n    try {\r\n      setLoadingCoachSchedule(true);\r\n      const token = localStorage.getItem('authToken');\r\n      const now = new Date();\r\n      const endDate = new Date(now.getTime() + 30 * 24 * 60 * 60 * 1000); // 30 days from now\r\n      \r\n      console.log('Fetching coach schedule for coachId:', coachId);\r\n      console.log('Time range:', now.toISOString(), 'to', endDate.toISOString());\r\n      \r\n      const response = await fetch(`http://localhost:8081/api/class-sessions/test-coach-sessions/${coachId}?userId=${currentUser.id}`, {\r\n        headers: {\r\n          'Authorization': `Bearer ${token}`,\r\n          'Content-Type': 'application/json'\r\n        }\r\n      });\r\n      \r\n      console.log('Response status:', response.status);\r\n      \r\n      if (!response.ok) {\r\n        const errorText = await response.text();\r\n        console.error('API Error Response:', errorText);\r\n        throw new Error(`API Error: ${response.status} - ${errorText}`);\r\n      }\r\n      \r\n      const data = await response.json();\r\n      console.log('Coach schedule data:', data);\r\n      \r\n      // 從測試端點響應中提取 sessions 數組\r\n      if (data.sessions && Array.isArray(data.sessions)) {\r\n        setCoachSchedule(data.sessions);\r\n      } else {\r\n        setCoachSchedule([]);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching coach schedule:', error);\r\n      setError(`Failed to fetch coach schedule: ${error.message}`);\r\n    } finally {\r\n      setLoadingCoachSchedule(false);\r\n    }\r\n  };\r\n\r\n  const openMakeupDialog = async (session) => {\r\n    setMakeupDialog({ open: true, session });\r\n    if (session.coachId) {\r\n      await fetchCoachSchedule(session.coachId);\r\n      await fetchAvailableSessions(session.coachId);\r\n    }\r\n  };\r\n\r\n              const sendMessageToCoach = async (coachId, coachName) => {\r\n              try {\r\n                console.log('Sending message to coach:', coachId, coachName);\r\n                console.log('Session data:', makeupDialog.session);\r\n                \r\n                if (!coachId || !coachName || !makeupDialog.session) {\r\n                  console.error('Missing information:', { coachId, coachName, session: makeupDialog.session });\r\n      return;\r\n    }\r\n    \r\n                // 更新現有的 LeaveRequest 狀態為 MESSAGE_SENT\r\n                const session = makeupDialog.session;\r\n                \r\n                // 先找到現有的請假請求\r\n                const existingRequest = leaveRequests.find(req => \r\n                  req.originalSessionId === session.id && req.studentId === currentUser.id\r\n                );\r\n                \r\n                if (!existingRequest) {\r\n                  alert('找不到請假請求，請先提交請假請求。');\r\n                  return;\r\n                }\r\n                \r\n                // 更新請假請求狀態\r\n                const updateResponse = await fetch(`http://localhost:8081/api/leave-requests/${existingRequest.id}`, {\r\n                  method: 'PUT',\r\n                  headers: {\r\n                    'Authorization': `Bearer ${localStorage.getItem('authToken')}`,\r\n                    'Content-Type': 'application/json',\r\n                  },\r\n                  body: JSON.stringify({\r\n                    status: 'MESSAGE_SENT',\r\n                    preferredDate: '1900-01-01 00:00:00' // 特殊值表示需要教練安排時間\r\n                  })\r\n                });\r\n                \r\n                if (!updateResponse.ok) {\r\n                  const errorText = await updateResponse.text();\r\n                  console.error('Failed to update leave request:', errorText);\r\n                  alert('更新請假請求失敗，請稍後再試。');\r\n                  return;\r\n                }\r\n                \r\n                // 構建訊息內容\r\n                const sessionDate = new Date(session.startTime).toLocaleDateString();\r\n                const sessionTime = new Date(session.startTime).toLocaleTimeString([], { \r\n                  hour: '2-digit', \r\n                  minute: '2-digit' \r\n                });\r\n                \r\n                // 構建場地信息\r\n                let locationInfo = '';\r\n                if (session.venue) {\r\n                  locationInfo += ` at ${session.venue}`;\r\n                  if (session.state) {\r\n                    locationInfo += `, ${session.state}`;\r\n                  }\r\n                }\r\n                if (session.court) {\r\n                  locationInfo += ` (Court: ${session.court})`;\r\n                }\r\n                \r\n                const messageContent = `Hi ${coachName}, I would like to request a makeup class for the session \"${session.title}\" on ${sessionDate} at ${sessionTime}${locationInfo}. Could you please help me arrange an alternative time? Thank you!`;\r\n                \r\n                // 獲取教練的 email 作為 username\r\n                const coachEmail = await getCoachEmail(coachId);\r\n                if (!coachEmail) {\r\n                  console.error('Could not find coach email');\r\n                  alert('無法獲取教練信息，請稍後再試。');\r\n                  return;\r\n                }\r\n                \r\n                // 發送訊息\r\n                const response = await fetch('http://localhost:8081/api/messages/send', {\r\n                  method: 'POST',\r\n                  headers: {\r\n                    'Authorization': `Bearer ${localStorage.getItem('authToken')}`,\r\n                    'Content-Type': 'application/x-www-form-urlencoded',\r\n                  },\r\n                  body: new URLSearchParams({\r\n                    recipient: coachEmail,\r\n                    content: messageContent\r\n                  })\r\n                });\r\n                \r\n                if (response.ok) {\r\n                  console.log('Message sent successfully');\r\n                  alert('補課請求已發送給教練！');\r\n                  \r\n                  // 關閉對話框\r\n                  setMakeupDialog({ open: false, session: null });\r\n                  \r\n                  // 導航到訊息頁面查看對話\r\n                  const url = `/messages?coach=${coachId}&name=${encodeURIComponent(coachName)}`;\r\n    window.location.href = url;\r\n                } else {\r\n                  const errorData = await response.json();\r\n                  console.error('Failed to send message:', errorData);\r\n                  alert(`發送訊息失敗: ${errorData.message || '未知錯誤'}`);\r\n                }\r\n              } catch (error) {\r\n                console.error('Error sending message to coach:', error);\r\n                alert('發送訊息時發生錯誤，請稍後再試。');\r\n              }\r\n            };\r\n  \r\n  // 獲取可用的補課時間\r\n  const fetchAvailableSessions = async (coachId) => {\r\n    try {\r\n      setLoadingAvailableSessions(true);\r\n      console.log('Fetching available sessions for coachId:', coachId, 'studentId:', currentUser.id);\r\n      \r\n      // 先調試檢查教練課程數據\r\n      try {\r\n        const debugData = await LeaveRequestService.debugCoachSessions(coachId);\r\n        console.log('Debug coach sessions data:', debugData);\r\n      } catch (debugError) {\r\n        console.error('Debug failed:', debugError);\r\n      }\r\n      \r\n      const sessions = await LeaveRequestService.getAvailableReplacementSessions(coachId, currentUser.id);\r\n      console.log('Available sessions received:', sessions);\r\n      setAvailableSessions(Array.isArray(sessions) ? sessions : []);\r\n    } catch (error) {\r\n      console.error('Failed to fetch available sessions:', error);\r\n      // 不要彈出 alert，只記錄錯誤，讓用戶看到 \"No available times found\"\r\n      setAvailableSessions([]);\r\n    } finally {\r\n      setLoadingAvailableSessions(false);\r\n    }\r\n  };\r\n\r\n  // 處理學生自己選擇補課時間\r\n  const handleSelfSelectReplacement = async () => {\r\n    try {\r\n      if (!selectedReplacementSession) {\r\n        alert('請選擇一個補課時間');\r\n        return;\r\n      }\r\n\r\n      const session = makeupDialog.session;\r\n      \r\n      // 先找到現有的請假請求\r\n      const existingRequest = leaveRequests.find(req => \r\n        req.originalSessionId === session.id && req.studentId === currentUser.id\r\n      );\r\n      \r\n      if (!existingRequest) {\r\n        alert('找不到請假請求，請先提交請假請求。');\r\n        return;\r\n      }\r\n      \r\n      // 更新請假請求狀態\r\n      const updateResponse = await fetch(`http://localhost:8081/api/leave-requests/${existingRequest.id}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Authorization': `Bearer ${localStorage.getItem('authToken')}`,\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          status: 'SELF_SELECTED',\r\n          preferredDate: selectedReplacementSession.startTime ? \r\n            new Date(selectedReplacementSession.startTime).toISOString().slice(0, 19).replace('T', ' ') : \r\n            '1900-01-01 00:00:00'\r\n        })\r\n      });\r\n      \r\n      if (!updateResponse.ok) {\r\n        const errorText = await updateResponse.text();\r\n        console.error('Failed to update leave request:', errorText);\r\n        alert('更新請假請求失敗，請稍後再試。');\r\n        return;\r\n      }\r\n      \r\n      alert('補課請求已提交！');\r\n      setMakeupDialog({ open: false, session: null });\r\n      setSelectedReplacementSession(null);\r\n      fetchUserSessions(); // 刷新課程列表\r\n    } catch (error) {\r\n      console.error('Failed to update leave request:', error);\r\n      alert('提交補課請求失敗，請稍後再試。');\r\n    }\r\n  };\r\n\r\n  // 獲取教練的 email\r\n  const getCoachEmail = async (coachId) => {\r\n    try {\r\n      const response = await fetch(`http://localhost:8081/api/users/${coachId}`, {\r\n        headers: {\r\n          'Authorization': `Bearer ${localStorage.getItem('authToken')}`,\r\n          'Content-Type': 'application/json'\r\n        }\r\n      });\r\n      \r\n      if (response.ok) {\r\n        const coachData = await response.json();\r\n        return coachData.email;\r\n      } else {\r\n        console.error('Failed to fetch coach data:', response.status);\r\n        return null;\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching coach data:', error);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  const getSessionStatus = (session) => {\r\n    const now = new Date();\r\n    const sessionTime = new Date(session.startTime);\r\n    \r\n    if (session.status === 'CANCELLED') return { label: 'Cancelled', color: 'error' };\r\n    if (session.status === 'COMPLETED') return { label: 'Completed', color: 'success' };\r\n    if (sessionTime < now) return { label: 'Completed', color: 'success' };\r\n    if (sessionTime.getTime() - now.getTime() < 24 * 60 * 60 * 1000) return { label: 'Tomorrow', color: 'warning' };\r\n    return { label: 'Upcoming', color: 'primary' };\r\n  };\r\n\r\n  const getAttendanceStatus = (session) => {\r\n    // 如果課程還沒開始，不應該顯示出席狀態\r\n    const now = new Date();\r\n    const sessionTime = new Date(session.startTime);\r\n    \r\n    // 如果課程還沒開始，顯示 \"Not Started\"\r\n    if (sessionTime > now) {\r\n      return { label: 'Not Started', color: 'default', icon: <ScheduleIcon /> };\r\n    }\r\n    \r\n    // 如果課程已經開始但還沒結束，顯示 \"In Progress\"\r\n    const sessionEndTime = new Date(session.endTime);\r\n    if (sessionTime <= now && sessionEndTime > now) {\r\n      return { label: 'In Progress', color: 'warning', icon: <ScheduleIcon /> };\r\n    }\r\n    \r\n    // 課程已結束，檢查出席狀態\r\n    if (session.attendanceStatus === 'PRESENT') return { label: 'Present', color: 'success', icon: <CheckCircleIcon /> };\r\n    if (session.attendanceStatus === 'ABSENT') return { label: 'Absent', color: 'error', icon: <CancelIcon /> };\r\n    if (session.attendanceStatus === 'LATE') return { label: 'Late', color: 'warning', icon: <ScheduleIcon /> };\r\n    if (session.attendanceStatus === 'MAKEUP') return { label: 'Makeup', color: 'info', icon: <SchoolIcon /> };\r\n    return { label: 'Not Recorded', color: 'default', icon: <ScheduleIcon /> };\r\n  };\r\n\r\n  const calculateAttendanceRate = () => {\r\n    const now = new Date();\r\n    const completedSessions = sessions.filter(s => {\r\n      const sessionEndTime = new Date(s.endTime);\r\n      return sessionEndTime < now; // 只有已結束的課程才算完成\r\n    });\r\n    \r\n    if (completedSessions.length === 0) return 0;\r\n    \r\n    const attendedSessions = completedSessions.filter(s => s.attendanceStatus === 'PRESENT');\r\n    return Math.round((attendedSessions.length / completedSessions.length) * 100);\r\n  };\r\n\r\n  // Check if a session has a leave request\r\n  const hasLeaveRequest = (session) => {\r\n    return leaveRequests.some(request => \r\n      request.originalSessionId === session.id && \r\n      request.status !== 'CANCELLED' && \r\n      request.status !== 'DECLINED'\r\n    );\r\n  };\r\n\r\n  // Get leave request for a session\r\n  const getLeaveRequest = (session) => {\r\n    return leaveRequests.find(request => request.originalSessionId === session.id);\r\n  };\r\n\r\n  // 按 recurringGroupId 分組課程\r\n  const groupedSessions = () => {\r\n    const grouped = {};\r\n    sessions.forEach(session => {\r\n      const key = session.recurringGroupId || session.id;\r\n      if (!grouped[key]) grouped[key] = [];\r\n      grouped[key].push(session);\r\n    });\r\n    return Object.values(grouped);\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"200px\">\r\n        <CircularProgress />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <Alert severity=\"error\" sx={{ mb: 2 }}>\r\n        {error}\r\n      </Alert>\r\n    );\r\n  }\r\n\r\n  const attendanceRate = calculateAttendanceRate();\r\n\r\n  return (\r\n    <Box>\r\n      {/* Success Message */}\r\n      {showSuccessMessage && (\r\n        <Alert severity=\"success\" sx={{ mb: 2 }} onClose={() => setShowSuccessMessage(false)}>\r\n          {successMessage}\r\n        </Alert>\r\n      )}\r\n      \r\n      {/* Header */}\r\n      <Box sx={{ mb: 3 }}>\r\n        <Typography variant=\"h4\" gutterBottom>\r\n          My Class Sessions\r\n        </Typography>\r\n        <Typography variant=\"body1\" color=\"text.secondary\">\r\n          Manage your class bookings and track your progress\r\n        </Typography>\r\n      </Box>\r\n\r\n      {/* Statistics */}\r\n      <Grid container spacing={3} sx={{ mb: 4 }}>\r\n        <Grid item xs={12} sm={6} md={3}>\r\n          <Card>\r\n            <CardContent>\r\n              <Typography color=\"text.secondary\" gutterBottom>\r\n                Total Sessions\r\n              </Typography>\r\n              <Typography variant=\"h4\">\r\n                {sessions.length}\r\n              </Typography>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n        <Grid item xs={12} sm={6} md={3}>\r\n          <Card>\r\n            <CardContent>\r\n              <Typography color=\"text.secondary\" gutterBottom>\r\n                Attendance Rate\r\n              </Typography>\r\n              <Typography variant=\"h4\" color=\"primary\">\r\n                {attendanceRate}%\r\n              </Typography>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n        <Grid item xs={12} sm={6} md={3}>\r\n          <Card>\r\n            <CardContent>\r\n              <Typography color=\"text.secondary\" gutterBottom>\r\n                Upcoming Sessions\r\n              </Typography>\r\n              <Typography variant=\"h4\" color=\"warning.main\">\r\n                {sessions.filter(s => getSessionStatus(s).label === 'Upcoming').length}\r\n              </Typography>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n        <Grid item xs={12} sm={6} md={3}>\r\n          <Card>\r\n            <CardContent>\r\n              <Typography color=\"text.secondary\" gutterBottom>\r\n                Completed Sessions\r\n              </Typography>\r\n              <Typography variant=\"h4\" color=\"success.main\">\r\n                {sessions.filter(s => getSessionStatus(s).label === 'Completed').length}\r\n              </Typography>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      {/* Sessions List */}\r\n      <Box>\r\n        <Typography variant=\"h6\" gutterBottom>\r\n          All Sessions\r\n        </Typography>\r\n        \r\n        {sessions.length === 0 ? (\r\n          <Card>\r\n            <CardContent sx={{ textAlign: 'center', py: 4 }}>\r\n              <SchoolIcon sx={{ fontSize: 60, color: 'text.secondary', mb: 2 }} />\r\n              <Typography variant=\"h6\" color=\"text.secondary\" gutterBottom>\r\n                No class sessions found\r\n              </Typography>\r\n              <Typography variant=\"body2\" color=\"text.secondary\">\r\n                You haven't booked any class sessions yet.\r\n              </Typography>\r\n            </CardContent>\r\n          </Card>\r\n        ) : (\r\n          <Grid container spacing={2}>\r\n            {groupedSessions().map((group) => {\r\n              const first = group[0];\r\n              const groupKey = first.recurringGroupId || first.id;\r\n              const expanded = expandedGroups.includes(groupKey);\r\n              const status = getSessionStatus(first);\r\n              const canCancel = group.some(s => getSessionStatus(s).label === 'Upcoming' && s.status !== 'CANCELLED');\r\n              \r\n              return (\r\n                <Grid item xs={12} key={groupKey}>\r\n                  <Card>\r\n                    <CardContent>\r\n                      <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"flex-start\">\r\n                        <Box flex={1}>\r\n                          <Box display=\"flex\" alignItems=\"center\" mb={1}>\r\n                            <Typography variant=\"h6\" sx={{ mr: 2 }}>\r\n                              {first.title}\r\n                            </Typography>\r\n                            <Chip \r\n                              label={status.label} \r\n                              color={status.color} \r\n                              size=\"small\" \r\n                            />\r\n                          </Box>\r\n                          \r\n                          <Grid container spacing={2}>\r\n                            <Grid item xs={12} sm={6}>\r\n                              <Box display=\"flex\" alignItems=\"center\" mb={1}>\r\n                                <PersonIcon sx={{ mr: 1, color: 'text.secondary' }} />\r\n                                <Typography variant=\"body2\">\r\n                                  Coach: {first.coachName}\r\n                                </Typography>\r\n                              </Box>\r\n                              <Box display=\"flex\" alignItems=\"center\" mb={1}>\r\n                                <LocationIcon sx={{ mr: 1, color: 'text.secondary' }} />\r\n                                <Typography variant=\"body2\">\r\n                                  {first.venue} • {first.state}\r\n                                </Typography>\r\n                              </Box>\r\n                              <Typography variant=\"body2\" color=\"primary\" mb={1}>\r\n                                Total {group.length} sessions\r\n                              </Typography>\r\n                              <Typography variant=\"body2\" color=\"text.secondary\" mb={1}>\r\n                                {(() => {\r\n                                  // Find earliest and latest date in group\r\n                                  const dates = group.map(sess => new Date(sess.startTime));\r\n                                  const minDate = new Date(Math.min(...dates));\r\n                                  const maxDate = new Date(Math.max(...dates));\r\n                                  const format = (date) => date.toLocaleDateString();\r\n                                  return `${format(minDate)} ~ ${format(maxDate)}`;\r\n                                })()}\r\n                              </Typography>\r\n                              <Typography variant=\"body2\" color=\"text.secondary\" mb={1}>\r\n                                {(() => {\r\n                                  if (!group.length) return null;\r\n                                  const firstSession = group[0];\r\n                                  const [startTime, endTime] = [\r\n                                    new Date(firstSession.startTime).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }),\r\n                                    new Date(firstSession.endTime).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })\r\n                                  ];\r\n                                  const daysOfWeek = Array.from(new Set(group.map(sess => {\r\n                                    const date = new Date(sess.startTime);\r\n                                    return date.toLocaleDateString('en-US', { weekday: 'long' });\r\n                                  })));\r\n                                  return [\r\n                                    `Time: ${startTime} ~ ${endTime}`,\r\n                                    `Day(s): ${daysOfWeek.join(', ')}`\r\n                                  ].join(' | ');\r\n                                })()}\r\n                              </Typography>\r\n                            </Grid>\r\n                            \r\n                            <Grid item xs={12} sm={6}>\r\n                              <Box display=\"flex\" alignItems=\"center\" mb={1}>\r\n                                <Typography variant=\"body2\" sx={{ mr: 1 }}>\r\n                                  Overall Attendance:\r\n                                </Typography>\r\n                                <Chip \r\n                                  label={`${Math.round((group.filter(s => s.attendanceStatus === 'PRESENT').length / group.length) * 100)}%`}\r\n                                  color=\"primary\" \r\n                                  size=\"small\" \r\n                                />\r\n                              </Box>\r\n                              \r\n                              <Typography variant=\"h6\" color=\"primary\" mb={1}>\r\n                                ${first.price}\r\n                              </Typography>\r\n                            </Grid>\r\n                          </Grid>\r\n                        </Box>\r\n                        \r\n                        <Box>\r\n                          <Button \r\n                            variant=\"outlined\" \r\n                            size=\"small\"\r\n                            onClick={() => setExpandedGroups(prev => \r\n                              prev.includes(groupKey) \r\n                                ? prev.filter(id => id !== groupKey)\r\n                                : [...prev, groupKey]\r\n                            )}\r\n                            sx={{ mb: 1, mr: 1 }}\r\n                          >\r\n                            {expanded ? 'Hide Details' : 'Show Details'}\r\n                          </Button>\r\n                          \r\n                          {/* Review Button for session groups */}\r\n                          {(() => {\r\n                            const completedSessions = group.filter(s => getSessionStatus(s).label === 'Completed');\r\n                            const upcomingSessions = group.filter(s => getSessionStatus(s).label === 'Upcoming');\r\n                            const hasReviews = completedSessions.some(s => s.rating);\r\n                            const canReview = completedSessions.length > 0 || upcomingSessions.length > 0;\r\n                            \r\n                            return canReview ? (\r\n                              <Button\r\n                                variant=\"outlined\"\r\n                                size=\"small\"\r\n                                startIcon={<ReviewIcon />}\r\n                                onClick={() => openReviewDialog(first)}\r\n                                sx={{ mb: 1, mr: 1 }}\r\n                                color={hasReviews ? \"success\" : \"primary\"}\r\n                              >\r\n                                {hasReviews ? 'Edit Review' : 'Review'}\r\n                              </Button>\r\n                            ) : null;\r\n                          })()}\r\n                          \r\n                          {canCancel && (\r\n                            <Tooltip title=\"Cancel this session group\">\r\n                              <IconButton \r\n                                color=\"error\" \r\n                                onClick={() => setCancelDialog({ open: true, session: first })}\r\n                              >\r\n                                <CancelIcon />\r\n                              </IconButton>\r\n                            </Tooltip>\r\n                          )}\r\n                        </Box>\r\n                      </Box>\r\n                      \r\n                      {expanded && (\r\n                        <Box mt={2}>\r\n                          <Typography variant=\"subtitle2\" gutterBottom>\r\n                            Individual Sessions:\r\n                          </Typography>\r\n                          <Grid container spacing={1}>\r\n                            {group.map((session) => {\r\n                              const sessionStatus = getSessionStatus(session);\r\n                              const attendance = getAttendanceStatus(session);\r\n                              \r\n                              return (\r\n                                <Grid item xs={12} key={session.id}>\r\n                                  <Card variant=\"outlined\">\r\n                                    <CardContent sx={{ py: 1 }}>\r\n                                      <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\r\n                                        <Box>\r\n                                          <Typography variant=\"body2\" fontWeight=\"bold\">\r\n                                            {new Date(session.startTime).toLocaleDateString()} at{' '}\r\n                                            {new Date(session.startTime).toLocaleTimeString([], { \r\n                                              hour: '2-digit', \r\n                                              minute: '2-digit' \r\n                                            })}\r\n                                            {session.endTime && (\r\n                                              <>\r\n                                                {' '}-{' '}\r\n                                                {new Date(session.endTime).toLocaleTimeString([], { \r\n                                                  hour: '2-digit', \r\n                                                  minute: '2-digit' \r\n                                                })}\r\n                                              </>\r\n                                            )}\r\n                                          </Typography>\r\n                                          <Box display=\"flex\" alignItems=\"center\" mt={0.5}>\r\n                                            <Chip \r\n                                              label={sessionStatus.label} \r\n                                              color={sessionStatus.color} \r\n                                              size=\"small\" \r\n                                              sx={{ mr: 1 }}\r\n                                            />\r\n                                            <Chip \r\n                                              icon={attendance.icon}\r\n                                              label={attendance.label} \r\n                                              color={attendance.color} \r\n                                              size=\"small\" \r\n                                            />\r\n                                          </Box>\r\n                                        </Box>\r\n                                        \r\n                                        <Box textAlign=\"right\">\r\n                                          {session.coachComment && (\r\n                                            <Typography variant=\"caption\" color=\"text.secondary\" display=\"block\">\r\n                                              {session.coachComment}\r\n                                            </Typography>\r\n                                          )}\r\n                                          {session.rating && (\r\n                                            <Box display=\"flex\" alignItems=\"center\" justifyContent=\"flex-end\">\r\n                                              <Rating value={session.rating} readOnly size=\"small\" />\r\n                                              <Typography variant=\"caption\" sx={{ ml: 0.5 }}>\r\n                                                ({session.rating}/5)\r\n                                              </Typography>\r\n                                            </Box>\r\n                                          )}\r\n                                          \r\n                                          {/* Action Buttons */}\r\n                                          <Box sx={{ mt: 1 }}>\r\n                                            {/* Review Button for completed sessions */}\r\n                                            {sessionStatus.label === 'Completed' && (\r\n                                              <Button\r\n                                                variant=\"outlined\"\r\n                                                size=\"small\"\r\n                                                startIcon={<ReviewIcon />}\r\n                                                onClick={() => openReviewDialog(session)}\r\n                                                sx={{ mr: 1, mb: 1 }}\r\n                                              >\r\n                                                {session.rating ? 'Edit Review' : 'Review'}\r\n                                              </Button>\r\n                                            )}\r\n                                            \r\n                                            {/* Leave Request Button for upcoming sessions */}\r\n                                            {sessionStatus.label === 'Upcoming' && (() => {\r\n                                              const leaveRequest = getLeaveRequest(session);\r\n                                              const hasRequest = hasLeaveRequest(session);\r\n                                              const isApproved = leaveRequest && leaveRequest.status === 'APPROVED';\r\n                                              const isDeclined = leaveRequest && leaveRequest.status === 'DECLINED';\r\n                                              const isDraft = leaveRequest && leaveRequest.status === 'DRAFT';\r\n                                              \r\n                                              return (\r\n                                              <Button\r\n                                                variant=\"outlined\"\r\n                                                size=\"small\"\r\n                                                  color={isApproved ? \"success\" : isDeclined ? \"error\" : hasRequest ? \"default\" : \"warning\"}\r\n                                                onClick={() => setLeaveDialog({ open: true, session })}\r\n                                                  disabled={isApproved || isDeclined}\r\n                                                sx={{ mr: 1, mb: 1 }}\r\n                                              >\r\n                                                  {isApproved ? 'Replacement Arranged' : \r\n                                                   isDeclined ? 'Request Declined' : \r\n                                                   isDraft ? 'Draft Saved' : \r\n                                                   hasRequest ? 'Leave Requested' : 'Request Leave'}\r\n                                              </Button>\r\n                                              );\r\n                                            })()}\r\n                                            \r\n                                            {/* Makeup Class Button for sessions with leave request */}\r\n                                            {hasLeaveRequest(session) && (() => {\r\n                                              const leaveRequest = getLeaveRequest(session);\r\n                                              const isApproved = leaveRequest && leaveRequest.status === 'APPROVED';\r\n                                              const isDeclined = leaveRequest && leaveRequest.status === 'DECLINED';\r\n                                              const isDraft = leaveRequest && leaveRequest.status === 'DRAFT';\r\n                                              \r\n                                              return (\r\n                                              <Button\r\n                                                variant=\"outlined\"\r\n                                                size=\"small\"\r\n                                                  color={isApproved ? \"success\" : isDeclined ? \"error\" : \"info\"}\r\n                                                onClick={() => openMakeupDialog(session)}\r\n                                                  disabled={isApproved || isDeclined}\r\n                                                sx={{ mr: 1, mb: 1 }}\r\n                                              >\r\n                                                  {isApproved ? 'Replacement Arranged' : \r\n                                                   isDeclined ? 'Request Declined' : \r\n                                                   isDraft ? 'Arrange Makeup' : \r\n                                                   'Arrange Makeup'}\r\n                                              </Button>\r\n                                              );\r\n                                            })()}\r\n                                          </Box>\r\n                                        </Box>\r\n                                      </Box>\r\n                                    </CardContent>\r\n                                  </Card>\r\n                                </Grid>\r\n                              );\r\n                            })}\r\n                          </Grid>\r\n                        </Box>\r\n                      )}\r\n                    </CardContent>\r\n                  </Card>\r\n                </Grid>\r\n              );\r\n            })}\r\n          </Grid>\r\n        )}\r\n      </Box>\r\n\r\n      {/* Cancel Confirmation Dialog */}\r\n      <Dialog open={cancelDialog.open} onClose={() => setCancelDialog({ open: false, session: null })} maxWidth=\"sm\" fullWidth>\r\n        <DialogTitle>Cancel Class Session</DialogTitle>\r\n        <DialogContent>\r\n          <Typography>\r\n            Are you sure you want to cancel this class session?\r\n          </Typography>\r\n          {cancelDialog.session && (\r\n            <Box sx={{ mt: 2, p: 2, bgcolor: 'grey.100', borderRadius: 1 }}>\r\n              <Typography variant=\"subtitle2\">\r\n                {cancelDialog.session.title}\r\n              </Typography>\r\n              <Typography variant=\"body2\" color=\"text.secondary\">\r\n                {new Date(cancelDialog.session.startTime).toLocaleDateString()} at{' '}\r\n                {new Date(cancelDialog.session.startTime).toLocaleTimeString([], { \r\n                  hour: '2-digit', \r\n                  minute: '2-digit' \r\n                })}\r\n              </Typography>\r\n              <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mt: 1 }}>\r\n                Price: RM {cancelDialog.session.price}\r\n              </Typography>\r\n            </Box>\r\n          )}\r\n          \r\n          {/* 檢查是否在24小時內 */}\r\n          {cancelDialog.session && (() => {\r\n            const sessionTime = new Date(cancelDialog.session.startTime);\r\n            const now = new Date();\r\n            const hoursUntilSession = (sessionTime - now) / (1000 * 60 * 60);\r\n            \r\n            if (hoursUntilSession <= 24) {\r\n              return (\r\n                <Box sx={{ mt: 2 }}>\r\n                  <Typography variant=\"body2\" color=\"warning.main\" sx={{ mb: 1 }}>\r\n                    ⚠\uFE0F This session is within 24 hours. Please provide a reason for cancellation.\r\n                  </Typography>\r\n                  <TextField\r\n                    fullWidth\r\n                    multiline\r\n                    rows={3}\r\n                    label=\"Cancellation Reason\"\r\n                    value={cancelReason}\r\n                    onChange={(e) => setCancelReason(e.target.value)}\r\n                    placeholder=\"Please explain why you need to cancel this session...\"\r\n                    variant=\"outlined\"\r\n                  />\r\n                </Box>\r\n              );\r\n            }\r\n            return null;\r\n          })()}\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button \r\n            onClick={() => {\r\n              setCancelDialog({ open: false, session: null });\r\n              setCancelReason('');\r\n            }}\r\n            disabled={cancelling}\r\n          >\r\n            Keep Session\r\n          </Button>\r\n          <Button \r\n            onClick={handleCancelSession} \r\n            color=\"error\" \r\n            variant=\"contained\"\r\n            disabled={cancelling}\r\n          >\r\n            {cancelling ? <CircularProgress size={20} /> : 'Cancel Session'}\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Review Dialog */}\r\n      <Dialog \r\n        open={reviewDialog.open} \r\n        onClose={() => setReviewDialog({ open: false, session: null })}\r\n        maxWidth=\"sm\"\r\n        fullWidth\r\n      >\r\n        <DialogTitle>\r\n          {reviewDialog.session ? 'Review Coach & Class Experience' : 'Review'}\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          {reviewDialog.session && (\r\n            <Box>\r\n              {/* Class Information */}\r\n              <Box sx={{ mb: 2, p: 2, bgcolor: 'grey.50', borderRadius: 1 }}>\r\n                <Typography variant=\"h6\" color=\"primary\" gutterBottom>\r\n                  Class: {reviewDialog.session.title}\r\n                </Typography>\r\n                <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\r\n                  Date: {new Date(reviewDialog.session.startTime).toLocaleDateString()} at{' '}\r\n                  {new Date(reviewDialog.session.startTime).toLocaleTimeString([], { \r\n                    hour: '2-digit', \r\n                    minute: '2-digit' \r\n                  })}\r\n                </Typography>\r\n                <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\r\n                  Venue: {reviewDialog.session.venue} • {reviewDialog.session.state}\r\n                </Typography>\r\n              </Box>\r\n              \r\n              {/* Coach Information */}\r\n              <Box sx={{ mb: 2, p: 2, bgcolor: 'blue.50', borderRadius: 1 }}>\r\n                <Typography variant=\"h6\" color=\"primary\" gutterBottom>\r\n                  Coach: {reviewDialog.session.coachName}\r\n                </Typography>\r\n                <Typography variant=\"body2\" color=\"text.secondary\">\r\n                  Please rate your experience with this coach for this class session\r\n                </Typography>\r\n              </Box>\r\n              \r\n              <Divider sx={{ my: 2 }} />\r\n              \r\n              <Box sx={{ mb: 3 }}>\r\n                <Typography variant=\"subtitle1\" gutterBottom>\r\n                  Rate your experience with Coach {reviewDialog.session.coachName} (1-5 stars)\r\n                </Typography>\r\n                <Rating\r\n                  value={reviewData.rating}\r\n                  onChange={(event, newValue) => {\r\n                    setReviewData(prev => ({ ...prev, rating: newValue }));\r\n                  }}\r\n                  size=\"large\"\r\n                />\r\n                <Typography variant=\"caption\" color=\"text.secondary\" display=\"block\" sx={{ mt: 1 }}>\r\n                  1 = Poor, 2 = Fair, 3 = Good, 4 = Very Good, 5 = Excellent\r\n                </Typography>\r\n              </Box>\r\n              \r\n              <Box>\r\n                <Typography variant=\"subtitle1\" gutterBottom>\r\n                  Additional Comments about Coach & Class (Optional)\r\n                </Typography>\r\n                <TextField\r\n                  fullWidth\r\n                  multiline\r\n                  rows={4}\r\n                  variant=\"outlined\"\r\n                  placeholder={`Share your thoughts about Coach ${reviewDialog.session.coachName} and the ${reviewDialog.session.title} class...`}\r\n                  value={reviewData.comment}\r\n                  onChange={(e) => setReviewData(prev => ({ ...prev, comment: e.target.value }))}\r\n                />\r\n              </Box>\r\n            </Box>\r\n          )}\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button \r\n            onClick={() => setReviewDialog({ open: false, session: null })}\r\n            disabled={submittingReview}\r\n          >\r\n            Cancel\r\n          </Button>\r\n          <Button \r\n            onClick={handleReviewSession} \r\n            color=\"primary\" \r\n            variant=\"contained\"\r\n            disabled={submittingReview || reviewData.rating === 0}\r\n          >\r\n            {submittingReview ? <CircularProgress size={20} /> : 'Submit Review'}\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Leave Request Dialog */}\r\n      <Dialog \r\n        open={leaveDialog.open} \r\n        onClose={() => setLeaveDialog({ open: false, session: null })}\r\n        maxWidth=\"sm\"\r\n        fullWidth\r\n      >\r\n        <DialogTitle>\r\n          Request Leave for Class\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          {leaveDialog.session && (\r\n            <Box>\r\n              <Typography variant=\"h6\" gutterBottom>\r\n                {leaveDialog.session.title}\r\n              </Typography>\r\n              <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\r\n                Date: {new Date(leaveDialog.session.startTime).toLocaleDateString()} at{' '}\r\n                {new Date(leaveDialog.session.startTime).toLocaleTimeString([], { \r\n                  hour: '2-digit', \r\n                  minute: '2-digit' \r\n                })}\r\n              </Typography>\r\n              <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\r\n                Coach: {leaveDialog.session.coachName}\r\n              </Typography>\r\n              \r\n              <Divider sx={{ my: 2 }} />\r\n              \r\n              <Box>\r\n                <Typography variant=\"subtitle1\" gutterBottom>\r\n                  Reason for Leave Request *\r\n                </Typography>\r\n                <TextField\r\n                  fullWidth\r\n                  multiline\r\n                  rows={4}\r\n                  variant=\"outlined\"\r\n                  placeholder=\"Please provide a detailed reason for your leave request...\"\r\n                  value={leaveData.reason}\r\n                  onChange={(e) => setLeaveData(prev => ({ ...prev, reason: e.target.value }))}\r\n                  required\r\n                />\r\n              </Box>\r\n            </Box>\r\n          )}\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button \r\n            onClick={() => setLeaveDialog({ open: false, session: null })}\r\n            disabled={submittingLeave}\r\n          >\r\n            Cancel\r\n          </Button>\r\n          <Button \r\n            onClick={handleLeaveRequest} \r\n            color=\"warning\" \r\n            variant=\"contained\"\r\n            disabled={submittingLeave || !leaveData.reason.trim()}\r\n          >\r\n            {submittingLeave ? <CircularProgress size={20} /> : 'Submit Leave Request'}\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Makeup Class Dialog */}\r\n      <Dialog \r\n        open={makeupDialog.open} \r\n        onClose={() => setMakeupDialog({ open: false, session: null })}\r\n        maxWidth=\"md\"\r\n        fullWidth\r\n      >\r\n        <DialogTitle>\r\n          Arrange Makeup Class\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          {makeupDialog.session && (\r\n            <Box>\r\n              <Typography variant=\"h6\" gutterBottom>\r\n                {makeupDialog.session.title} - Makeup Class\r\n              </Typography>\r\n              <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\r\n                Coach: {makeupDialog.session.coachName}\r\n              </Typography>\r\n              \r\n              <Divider sx={{ my: 2 }} />\r\n              \r\n              <Typography variant=\"subtitle1\" gutterBottom>\r\n                Coach's Available Times (Next 30 Days)\r\n              </Typography>\r\n              \r\n              {loadingCoachSchedule ? (\r\n                <Box display=\"flex\" justifyContent=\"center\" py={2}>\r\n                  <CircularProgress />\r\n                </Box>\r\n              ) : coachSchedule.length > 0 ? (\r\n                <Grid container spacing={1}>\r\n                  {coachSchedule.map((session, index) => (\r\n                    <Grid item xs={12} sm={6} key={index}>\r\n                      <Card variant=\"outlined\">\r\n                        <CardContent sx={{ py: 1 }}>\r\n                          <Typography variant=\"body2\" fontWeight=\"bold\">\r\n                            {new Date(session.startTime).toLocaleDateString()}\r\n                          </Typography>\r\n                          <Typography variant=\"body2\" color=\"text.secondary\">\r\n                            {new Date(session.startTime).toLocaleTimeString([], { \r\n                              hour: '2-digit', \r\n                              minute: '2-digit' \r\n                            })} - {new Date(session.endTime).toLocaleTimeString([], { \r\n                              hour: '2-digit', \r\n                              minute: '2-digit' \r\n                            })}\r\n                          </Typography>\r\n                          <Button\r\n                            variant=\"outlined\"\r\n                            size=\"small\"\r\n                            sx={{ mt: 1 }}\r\n                            onClick={() => {\r\n                              // Handle makeup class booking\r\n                              console.log('Book makeup class:', session);\r\n                            }}\r\n                          >\r\n                            Book This Time\r\n                          </Button>\r\n                        </CardContent>\r\n                      </Card>\r\n                    </Grid>\r\n                  ))}\r\n                </Grid>\r\n              ) : (\r\n                <Box textAlign=\"center\" py={2}>\r\n                  <Typography color=\"text.secondary\" gutterBottom>\r\n                    No available times found for the next 30 days.\r\n                  </Typography>\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={async () => {\r\n                      console.log('Message button clicked');\r\n                      console.log('Session data:', makeupDialog.session);\r\n                      console.log('Coach ID:', makeupDialog.session.coachId);\r\n                      console.log('Coach Name:', makeupDialog.session.coachName);\r\n                      await sendMessageToCoach(makeupDialog.session.coachId, makeupDialog.session.coachName);\r\n                    }}\r\n                  >\r\n                    Message Coach to Arrange Time\r\n                  </Button>\r\n                </Box>\r\n              )}\r\n            </Box>\r\n          )}\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setMakeupDialog({ open: false, session: null })}>\r\n            Close\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default MyClassSessions; 
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball-frontend/src/components/profile/MyClassSessions.jsx b/pickleball-frontend/src/components/profile/MyClassSessions.jsx
--- a/pickleball-frontend/src/components/profile/MyClassSessions.jsx	(revision 89327e12854b108d004ebb020d0592b1c618ecaf)
+++ b/pickleball-frontend/src/components/profile/MyClassSessions.jsx	(date 1754315543544)
@@ -39,7 +39,8 @@
   CheckCircle as CheckCircleIcon, 
   Schedule as ScheduleIcon, 
   Comment as CommentIcon,
-  RateReview as ReviewIcon
+  RateReview as ReviewIcon,
+  FilterList as FilterIcon
 } from '@mui/icons-material';
 import { useAuth } from '../../context/AuthContext';
 import LeaveRequestService from '../../service/LeaveRequestService';
@@ -64,11 +65,11 @@
   const [submittingLeave, setSubmittingLeave] = useState(false);
   const [leaveRequests, setLeaveRequests] = useState([]);
   const [makeupDialog, setMakeupDialog] = useState({ open: false, session: null });
-  const [coachSchedule, setCoachSchedule] = useState([]);
-  const [loadingCoachSchedule, setLoadingCoachSchedule] = useState(false);
-  const [availableSessions, setAvailableSessions] = useState([]);
-  const [loadingAvailableSessions, setLoadingAvailableSessions] = useState(false);
-  const [selectedReplacementSession, setSelectedReplacementSession] = useState(null);
+
+
+
+  const [filter, setFilter] = useState('All'); // 'All', 'Complete', 'Ongoing', 'Upcoming'
+  const [feedbackDialog, setFeedbackDialog] = useState({ open: false, session: null });
 
   useEffect(() => {
     if (currentUser && currentUser.id) {
@@ -112,6 +113,18 @@
 
       const data = await response.json();
       console.log('Received data:', data);
+      
+      // 调试：检查补课课程
+      const replacementSessions = data.filter(session => session.replacementForSessionId);
+      console.log('User - Replacement sessions found:', replacementSessions.length);
+      replacementSessions.forEach(session => {
+        console.log('User - Replacement session:', {
+          id: session.id,
+          title: session.title,
+          replacementForSessionId: session.replacementForSessionId
+        });
+      });
+      
       setSessions(data);
       
       // Fetch leave requests for the current user
@@ -204,7 +217,7 @@
         const groupSessions = sessions.filter(s => s.recurringGroupId === reviewDialog.session.recurringGroupId);
         const completedSessions = groupSessions.filter(s => getSessionStatus(s).label === 'Completed');
         
-        // 為每個已完成的課程提交評價
+        // 為每個已完成的課程提交用戶對教練的評價
         const reviewPromises = completedSessions.map(async session => {
           const response = await fetch(`http://localhost:8081/api/class-sessions/${session.id}/review`, {
             method: 'POST',
@@ -214,7 +227,8 @@
             },
             body: JSON.stringify({
               rating: reviewData.rating,
-              comment: reviewData.comment
+              comment: reviewData.comment,
+              reviewType: 'USER_TO_COACH' // 明確指定這是用戶對教練的評價
             })
           });
           
@@ -228,7 +242,7 @@
         
         await Promise.all(reviewPromises);
       } else {
-        // 單個課程評價
+        // 單個課程評價 - 用戶對教練的評價
         const response = await fetch(`http://localhost:8081/api/class-sessions/${reviewDialog.session.id}/review`, {
           method: 'POST',
           headers: {
@@ -237,7 +251,8 @@
           },
           body: JSON.stringify({
             rating: reviewData.rating,
-            comment: reviewData.comment
+            comment: reviewData.comment,
+            reviewType: 'USER_TO_COACH' // 明確指定這是用戶對教練的評價
           })
         });
         
@@ -265,6 +280,23 @@
   };
 
   const openReviewDialog = (session) => {
+    // 檢查課程狀態，只有已完成的課程才能評價
+    const sessionStatus = getSessionStatus(session);
+    if (sessionStatus.label !== 'Completed') {
+      console.warn('Cannot review session that is not completed:', sessionStatus.label);
+      return;
+    }
+    
+    // 如果是課程組，檢查課程組狀態
+    if (session.recurringGroupId) {
+      const groupSessions = sessions.filter(s => s.recurringGroupId === session.recurringGroupId);
+      const groupStatus = getGroupStatus(groupSessions);
+      if (groupStatus.label !== 'Completed') {
+        console.warn('Cannot review session group that is not completed:', groupStatus.label);
+        return;
+      }
+    }
+    
     setReviewDialog({ open: true, session });
     
     // 如果是課程組，計算平均評分和評論
@@ -273,26 +305,42 @@
       const completedSessions = groupSessions.filter(s => getSessionStatus(s).label === 'Completed');
       
       if (completedSessions.length > 0) {
-        const totalRating = completedSessions.reduce((sum, s) => sum + (s.rating || 0), 0);
-        const avgRating = Math.round(totalRating / completedSessions.length);
-        const comments = completedSessions.map(s => s.coachComment).filter(Boolean);
-        const combinedComment = comments.length > 0 ? comments.join('\n\n') : '';
+        // 檢查是否有現有的用戶評價
+        const existingUserRatings = completedSessions.map(s => s.userRating).filter(rating => rating != null);
+        const existingUserComments = completedSessions.map(s => s.userComment).filter(comment => comment != null && comment.trim() !== '');
         
-        setReviewData({ 
-          rating: avgRating, 
-          comment: combinedComment 
-        });
+        if (existingUserRatings.length > 0 || existingUserComments.length > 0) {
+          // 有現有評價，使用現有的
+          const avgRating = existingUserRatings.length > 0 ? 
+            Math.round(existingUserRatings.reduce((sum, rating) => sum + rating, 0) / existingUserRatings.length) : 0;
+          const combinedComment = existingUserComments.length > 0 ? existingUserComments.join('\n\n') : '';
+          
+          setReviewData({ 
+            rating: avgRating, 
+            comment: combinedComment 
+          });
+        } else {
+          // 沒有現有評價，設置為空
+          setReviewData({ rating: 0, comment: '' });
+        }
       } else {
         setReviewData({ rating: 0, comment: '' });
       }
     } else {
-      // 單個課程
+      // 單個課程 - 檢查是否有現有的用戶評價
+      const existingRating = session.userRating || 0;
+      const existingComment = session.userComment || '';
+      
       setReviewData({ 
-        rating: session.rating || 0, 
-        comment: session.coachComment || '' 
+        rating: existingRating, 
+        comment: existingComment 
       });
     }
   };
+
+  const openFeedbackDialog = (session) => {
+    setFeedbackDialog({ open: true, session });
+  };
 
   const handleLeaveRequest = async () => {
     if (!leaveDialog.session || !leaveData.reason.trim()) return;
@@ -351,54 +399,10 @@
     }
   };
 
-  const fetchCoachSchedule = async (coachId) => {
-    try {
-      setLoadingCoachSchedule(true);
-      const token = localStorage.getItem('authToken');
-      const now = new Date();
-      const endDate = new Date(now.getTime() + 30 * 24 * 60 * 60 * 1000); // 30 days from now
-      
-      console.log('Fetching coach schedule for coachId:', coachId);
-      console.log('Time range:', now.toISOString(), 'to', endDate.toISOString());
-      
-      const response = await fetch(`http://localhost:8081/api/class-sessions/test-coach-sessions/${coachId}?userId=${currentUser.id}`, {
-        headers: {
-          'Authorization': `Bearer ${token}`,
-          'Content-Type': 'application/json'
-        }
-      });
-      
-      console.log('Response status:', response.status);
-      
-      if (!response.ok) {
-        const errorText = await response.text();
-        console.error('API Error Response:', errorText);
-        throw new Error(`API Error: ${response.status} - ${errorText}`);
-      }
-      
-      const data = await response.json();
-      console.log('Coach schedule data:', data);
-      
-      // 從測試端點響應中提取 sessions 數組
-      if (data.sessions && Array.isArray(data.sessions)) {
-        setCoachSchedule(data.sessions);
-      } else {
-        setCoachSchedule([]);
-      }
-    } catch (error) {
-      console.error('Error fetching coach schedule:', error);
-      setError(`Failed to fetch coach schedule: ${error.message}`);
-    } finally {
-      setLoadingCoachSchedule(false);
-    }
-  };
+
 
   const openMakeupDialog = async (session) => {
     setMakeupDialog({ open: true, session });
-    if (session.coachId) {
-      await fetchCoachSchedule(session.coachId);
-      await fetchAvailableSessions(session.coachId);
-    }
   };
 
               const sendMessageToCoach = async (coachId, coachName) => {
@@ -507,83 +511,9 @@
               }
             };
   
-  // 獲取可用的補課時間
-  const fetchAvailableSessions = async (coachId) => {
-    try {
-      setLoadingAvailableSessions(true);
-      console.log('Fetching available sessions for coachId:', coachId, 'studentId:', currentUser.id);
-      
-      // 先調試檢查教練課程數據
-      try {
-        const debugData = await LeaveRequestService.debugCoachSessions(coachId);
-        console.log('Debug coach sessions data:', debugData);
-      } catch (debugError) {
-        console.error('Debug failed:', debugError);
-      }
-      
-      const sessions = await LeaveRequestService.getAvailableReplacementSessions(coachId, currentUser.id);
-      console.log('Available sessions received:', sessions);
-      setAvailableSessions(Array.isArray(sessions) ? sessions : []);
-    } catch (error) {
-      console.error('Failed to fetch available sessions:', error);
-      // 不要彈出 alert，只記錄錯誤，讓用戶看到 "No available times found"
-      setAvailableSessions([]);
-    } finally {
-      setLoadingAvailableSessions(false);
-    }
-  };
+
 
-  // 處理學生自己選擇補課時間
-  const handleSelfSelectReplacement = async () => {
-    try {
-      if (!selectedReplacementSession) {
-        alert('請選擇一個補課時間');
-        return;
-      }
 
-      const session = makeupDialog.session;
-      
-      // 先找到現有的請假請求
-      const existingRequest = leaveRequests.find(req => 
-        req.originalSessionId === session.id && req.studentId === currentUser.id
-      );
-      
-      if (!existingRequest) {
-        alert('找不到請假請求，請先提交請假請求。');
-        return;
-      }
-      
-      // 更新請假請求狀態
-      const updateResponse = await fetch(`http://localhost:8081/api/leave-requests/${existingRequest.id}`, {
-        method: 'PUT',
-        headers: {
-          'Authorization': `Bearer ${localStorage.getItem('authToken')}`,
-          'Content-Type': 'application/json',
-        },
-        body: JSON.stringify({
-          status: 'SELF_SELECTED',
-          preferredDate: selectedReplacementSession.startTime ? 
-            new Date(selectedReplacementSession.startTime).toISOString().slice(0, 19).replace('T', ' ') : 
-            '1900-01-01 00:00:00'
-        })
-      });
-      
-      if (!updateResponse.ok) {
-        const errorText = await updateResponse.text();
-        console.error('Failed to update leave request:', errorText);
-        alert('更新請假請求失敗，請稍後再試。');
-        return;
-      }
-      
-      alert('補課請求已提交！');
-      setMakeupDialog({ open: false, session: null });
-      setSelectedReplacementSession(null);
-      fetchUserSessions(); // 刷新課程列表
-    } catch (error) {
-      console.error('Failed to update leave request:', error);
-      alert('提交補課請求失敗，請稍後再試。');
-    }
-  };
 
   // 獲取教練的 email
   const getCoachEmail = async (coachId) => {
@@ -618,6 +548,21 @@
     if (sessionTime.getTime() - now.getTime() < 24 * 60 * 60 * 1000) return { label: 'Tomorrow', color: 'warning' };
     return { label: 'Upcoming', color: 'primary' };
   };
+
+  // 獲取課程組的整體狀態（用於顯示 Ongoing 狀態）
+  const getGroupStatus = (group) => {
+    const now = new Date();
+    const futureSessions = group.filter(s => new Date(s.startTime) > now);
+    const pastSessions = group.filter(s => new Date(s.startTime) <= now);
+    
+    if (futureSessions.length > 0 && pastSessions.length > 0) {
+      return { label: 'Ongoing', color: 'info' };
+    } else if (futureSessions.length > 0) {
+      return { label: 'Upcoming', color: 'primary' };
+    } else {
+      return { label: 'Completed', color: 'success' };
+    }
+  };
 
   const getAttendanceStatus = (session) => {
     // 如果課程還沒開始，不應該顯示出席狀態
@@ -673,7 +618,29 @@
   // 按 recurringGroupId 分組課程
   const groupedSessions = () => {
     const grouped = {};
-    sessions.forEach(session => {
+    
+    // Filter sessions based on selected filter
+    const filteredSessions = sessions.filter(session => {
+      const status = getSessionStatus(session);
+      switch (filter) {
+        case 'Complete':
+          return status.label === 'Completed';
+        case 'Ongoing':
+          // Ongoing: 既有未來課程又有過去課程的課程組
+          const groupKey = session.recurringGroupId || session.id;
+          const groupSessions = sessions.filter(s => (s.recurringGroupId || s.id) === groupKey);
+          const now = new Date();
+          const futureSessions = groupSessions.filter(s => new Date(s.startTime) > now);
+          const pastSessions = groupSessions.filter(s => new Date(s.startTime) <= now);
+          return futureSessions.length > 0 && pastSessions.length > 0;
+        case 'Upcoming':
+          return status.label === 'Upcoming';
+        default:
+          return true; // 'All' - show all sessions
+      }
+    });
+    
+    filteredSessions.forEach(session => {
       const key = session.recurringGroupId || session.id;
       if (!grouped[key]) grouped[key] = [];
       grouped[key].push(session);
@@ -720,7 +687,7 @@
 
       {/* Statistics */}
       <Grid container spacing={3} sx={{ mb: 4 }}>
-        <Grid item xs={12} sm={6} md={3}>
+        <Grid item xs={12} sm={6} md={2}>
           <Card>
             <CardContent>
               <Typography color="text.secondary" gutterBottom>
@@ -732,7 +699,7 @@
             </CardContent>
           </Card>
         </Grid>
-        <Grid item xs={12} sm={6} md={3}>
+        <Grid item xs={12} sm={6} md={2}>
           <Card>
             <CardContent>
               <Typography color="text.secondary" gutterBottom>
@@ -744,7 +711,7 @@
             </CardContent>
           </Card>
         </Grid>
-        <Grid item xs={12} sm={6} md={3}>
+        <Grid item xs={12} sm={6} md={2}>
           <Card>
             <CardContent>
               <Typography color="text.secondary" gutterBottom>
@@ -756,7 +723,32 @@
             </CardContent>
           </Card>
         </Grid>
-        <Grid item xs={12} sm={6} md={3}>
+        <Grid item xs={12} sm={6} md={2}>
+          <Card>
+            <CardContent>
+              <Typography color="text.secondary" gutterBottom>
+                Ongoing Sessions
+              </Typography>
+              <Typography variant="h4" color="info.main">
+                {(() => {
+                  const grouped = {};
+                  sessions.forEach(session => {
+                    const key = session.recurringGroupId || session.id;
+                    if (!grouped[key]) grouped[key] = [];
+                    grouped[key].push(session);
+                  });
+                  return Object.values(grouped).filter(group => {
+                    const now = new Date();
+                    const futureSessions = group.filter(s => new Date(s.startTime) > now);
+                    const pastSessions = group.filter(s => new Date(s.startTime) <= now);
+                    return futureSessions.length > 0 && pastSessions.length > 0;
+                  }).length;
+                })()}
+              </Typography>
+            </CardContent>
+          </Card>
+        </Grid>
+        <Grid item xs={12} sm={6} md={2}>
           <Card>
             <CardContent>
               <Typography color="text.secondary" gutterBottom>
@@ -768,23 +760,66 @@
             </CardContent>
           </Card>
         </Grid>
+        <Grid item xs={12} sm={6} md={2}>
+          <Card>
+            <CardContent>
+              <Typography color="text.secondary" gutterBottom>
+                Replacement Classes
+              </Typography>
+              <Typography variant="h4" color="secondary">
+                {sessions.filter(s => s.replacementForSessionId).length}
+              </Typography>
+            </CardContent>
+          </Card>
+        </Grid>
       </Grid>
 
+      {/* Filter Summary */}
+      {filter !== 'All' && (
+        <Box sx={{ mb: 2 }}>
+          <Chip 
+            label={`Showing ${filter.toLowerCase()} sessions (${groupedSessions().length} found)`}
+            color="primary"
+            variant="outlined"
+            icon={<FilterIcon />}
+          />
+        </Box>
+      )}
+
       {/* Sessions List */}
       <Box>
-        <Typography variant="h6" gutterBottom>
-          All Sessions
-        </Typography>
+        <Box display="flex" justifyContent="space-between" alignItems="center" mb={2}>
+          <Typography variant="h6">
+            {filter === 'All' ? 'All Sessions' : `${filter} Sessions`}
+          </Typography>
+          <FormControl size="small" sx={{ minWidth: 150 }}>
+            <InputLabel>Filter Sessions</InputLabel>
+            <Select
+              value={filter}
+              label="Filter Sessions"
+              onChange={(e) => setFilter(e.target.value)}
+              startAdornment={<FilterIcon sx={{ mr: 1, color: 'text.secondary' }} />}
+            >
+              <MenuItem value="All">All Sessions</MenuItem>
+              <MenuItem value="Complete">Complete</MenuItem>
+              <MenuItem value="Ongoing">Ongoing</MenuItem>
+              <MenuItem value="Upcoming">Upcoming</MenuItem>
+            </Select>
+          </FormControl>
+        </Box>
         
-        {sessions.length === 0 ? (
+        {groupedSessions().length === 0 ? (
           <Card>
             <CardContent sx={{ textAlign: 'center', py: 4 }}>
               <SchoolIcon sx={{ fontSize: 60, color: 'text.secondary', mb: 2 }} />
               <Typography variant="h6" color="text.secondary" gutterBottom>
-                No class sessions found
+                {filter === 'All' ? 'No class sessions found' : `No ${filter.toLowerCase()} sessions found`}
               </Typography>
               <Typography variant="body2" color="text.secondary">
-                You haven't booked any class sessions yet.
+                {filter === 'All' 
+                  ? "You haven't booked any class sessions yet."
+                  : `You don't have any ${filter.toLowerCase()} sessions.`
+                }
               </Typography>
             </CardContent>
           </Card>
@@ -794,7 +829,7 @@
               const first = group[0];
               const groupKey = first.recurringGroupId || first.id;
               const expanded = expandedGroups.includes(groupKey);
-              const status = getSessionStatus(first);
+              const status = getGroupStatus(group); // 使用課程組狀態而不是單個課程狀態
               const canCancel = group.some(s => getSessionStatus(s).label === 'Upcoming' && s.status !== 'CANCELLED');
               
               return (
@@ -806,12 +841,25 @@
                           <Box display="flex" alignItems="center" mb={1}>
                             <Typography variant="h6" sx={{ mr: 2 }}>
                               {first.title}
+                              {first.replacementForSessionId && (
+                                <Typography component="span" variant="caption" color="secondary" sx={{ ml: 1, fontWeight: 'bold' }}>
+                                  (Replacement Class)
+                                </Typography>
+                              )}
                             </Typography>
                             <Chip 
                               label={status.label} 
                               color={status.color} 
                               size="small" 
                             />
+                            {first.replacementForSessionId && (
+                              <Chip 
+                                label="Replacement Class" 
+                                color="secondary" 
+                                size="small" 
+                                sx={{ ml: 1 }}
+                              />
+                            )}
                           </Box>
                           
                           <Grid container spacing={2}>
@@ -831,6 +879,24 @@
                               <Typography variant="body2" color="primary" mb={1}>
                                 Total {group.length} sessions
                               </Typography>
+                              {first.replacementForSessionId && (() => {
+                                const originalRequest = leaveRequests.find(req => 
+                                  req.replacementSessionId === first.id
+                                );
+                                return originalRequest ? (
+                                  <Typography variant="body2" color="secondary" mb={1} sx={{ fontStyle: 'italic' }}>
+                                    Replacement for session on {new Date(originalRequest.originalSessionStartTime).toLocaleDateString()} at{' '}
+                                    {new Date(originalRequest.originalSessionStartTime).toLocaleTimeString([], { 
+                                      hour: '2-digit', 
+                                      minute: '2-digit' 
+                                    })}
+                                  </Typography>
+                                ) : (
+                                  <Typography variant="body2" color="secondary" mb={1} sx={{ fontStyle: 'italic' }}>
+                                    Replacement class arranged by coach
+                                  </Typography>
+                                );
+                              })()}
                               <Typography variant="body2" color="text.secondary" mb={1}>
                                 {(() => {
                                   // Find earliest and latest date in group
@@ -896,10 +962,11 @@
                           
                           {/* Review Button for session groups */}
                           {(() => {
+                            const groupStatus = getGroupStatus(group);
                             const completedSessions = group.filter(s => getSessionStatus(s).label === 'Completed');
-                            const upcomingSessions = group.filter(s => getSessionStatus(s).label === 'Upcoming');
-                            const hasReviews = completedSessions.some(s => s.rating);
-                            const canReview = completedSessions.length > 0 || upcomingSessions.length > 0;
+                            const hasUserReviews = completedSessions.some(s => s.userRating || s.userComment);
+                            // 只有當課程組狀態為 "Completed" 時才顯示 Review 按鈕
+                            const canReview = groupStatus.label === 'Completed' && completedSessions.length > 0;
                             
                             return canReview ? (
                               <Button
@@ -908,9 +975,31 @@
                                 startIcon={<ReviewIcon />}
                                 onClick={() => openReviewDialog(first)}
                                 sx={{ mb: 1, mr: 1 }}
-                                color={hasReviews ? "success" : "primary"}
+                                color={hasUserReviews ? "success" : "primary"}
+                              >
+                                {hasUserReviews ? 'Edit Review' : 'Review'}
+                              </Button>
+                            ) : null;
+                          })()}
+                          
+                          {/* View Feedback Button for session groups */}
+                          {(() => {
+                            const groupStatus = getGroupStatus(group);
+                            const completedSessions = group.filter(s => getSessionStatus(s).label === 'Completed');
+                            const hasFeedback = completedSessions.some(s => s.coachComment);
+                            // 只有當課程組狀態為 "Completed" 時才顯示 View Feedback 按鈕
+                            const canViewFeedback = groupStatus.label === 'Completed' && completedSessions.length > 0;
+                            
+                            return canViewFeedback ? (
+                              <Button
+                                variant="outlined"
+                                size="small"
+                                startIcon={<CommentIcon />}
+                                onClick={() => openFeedbackDialog(first)}
+                                sx={{ mb: 1, mr: 1 }}
+                                color="info"
                               >
-                                {hasReviews ? 'Edit Review' : 'Review'}
+                                {hasFeedback ? 'View Feedback' : 'No Feedback'}
                               </Button>
                             ) : null;
                           })()}
@@ -959,7 +1048,30 @@
                                                 })}
                                               </>
                                             )}
+                                            {session.replacementForSessionId && (
+                                              <Typography component="span" variant="caption" color="secondary" sx={{ ml: 1, fontWeight: 'bold' }}>
+                                                (Replacement Class)
+                                              </Typography>
+                                            )}
                                           </Typography>
+                                          {session.replacementForSessionId && (() => {
+                                            const originalRequest = leaveRequests.find(req => 
+                                              req.replacementSessionId === session.id
+                                            );
+                                            return originalRequest ? (
+                                              <Typography variant="caption" color="secondary" sx={{ fontStyle: 'italic', display: 'block', mt: 0.5 }}>
+                                                Replacement for: {new Date(originalRequest.originalSessionStartTime).toLocaleDateString()} at{' '}
+                                                {new Date(originalRequest.originalSessionStartTime).toLocaleTimeString([], { 
+                                                  hour: '2-digit', 
+                                                  minute: '2-digit' 
+                                                })}
+                                              </Typography>
+                                            ) : (
+                                              <Typography variant="caption" color="secondary" sx={{ fontStyle: 'italic', display: 'block', mt: 0.5 }}>
+                                                Replacement class arranged by coach
+                                              </Typography>
+                                            );
+                                          })()}
                                           <Box display="flex" alignItems="center" mt={0.5}>
                                             <Chip 
                                               label={sessionStatus.label} 
@@ -972,40 +1084,23 @@
                                               label={attendance.label} 
                                               color={attendance.color} 
                                               size="small" 
+                                              sx={{ mr: 1 }}
                                             />
+                                            {session.replacementForSessionId && (
+                                              <Chip 
+                                                label="Replacement" 
+                                                color="secondary" 
+                                                size="small" 
+                                              />
+                                            )}
                                           </Box>
                                         </Box>
                                         
                                         <Box textAlign="right">
-                                          {session.coachComment && (
-                                            <Typography variant="caption" color="text.secondary" display="block">
-                                              {session.coachComment}
-                                            </Typography>
-                                          )}
-                                          {session.rating && (
-                                            <Box display="flex" alignItems="center" justifyContent="flex-end">
-                                              <Rating value={session.rating} readOnly size="small" />
-                                              <Typography variant="caption" sx={{ ml: 0.5 }}>
-                                                ({session.rating}/5)
-                                              </Typography>
-                                            </Box>
-                                          )}
+                                          {/* 移除個別課程的評價顯示 */}
                                           
                                           {/* Action Buttons */}
                                           <Box sx={{ mt: 1 }}>
-                                            {/* Review Button for completed sessions */}
-                                            {sessionStatus.label === 'Completed' && (
-                                              <Button
-                                                variant="outlined"
-                                                size="small"
-                                                startIcon={<ReviewIcon />}
-                                                onClick={() => openReviewDialog(session)}
-                                                sx={{ mr: 1, mb: 1 }}
-                                              >
-                                                {session.rating ? 'Edit Review' : 'Review'}
-                                              </Button>
-                                            )}
-                                            
                                             {/* Leave Request Button for upcoming sessions */}
                                             {sessionStatus.label === 'Upcoming' && (() => {
                                               const leaveRequest = getLeaveRequest(session);
@@ -1156,7 +1251,7 @@
         fullWidth
       >
         <DialogTitle>
-          {reviewDialog.session ? 'Review Coach & Class Experience' : 'Review'}
+          {reviewDialog.session ? 'Review Coach & Class Experience (User to Coach)' : 'Review'}
         </DialogTitle>
         <DialogContent>
           {reviewDialog.session && (
@@ -1184,7 +1279,7 @@
                   Coach: {reviewDialog.session.coachName}
                 </Typography>
                 <Typography variant="body2" color="text.secondary">
-                  Please rate your experience with this coach for this class session
+                  Please rate your experience with this coach for this class session (Your feedback will be visible to the coach)
                 </Typography>
               </Box>
               
@@ -1208,7 +1303,7 @@
               
               <Box>
                 <Typography variant="subtitle1" gutterBottom>
-                  Additional Comments about Coach & Class (Optional)
+                  Your Comments about Coach & Class (Optional)
                 </Typography>
                 <TextField
                   fullWidth
@@ -1236,7 +1331,7 @@
             variant="contained"
             disabled={submittingReview || reviewData.rating === 0}
           >
-            {submittingReview ? <CircularProgress size={20} /> : 'Submit Review'}
+            {submittingReview ? <CircularProgress size={20} /> : 'Submit Your Review'}
           </Button>
         </DialogActions>
       </Dialog>
@@ -1328,68 +1423,26 @@
               
               <Divider sx={{ my: 2 }} />
               
-              <Typography variant="subtitle1" gutterBottom>
-                Coach's Available Times (Next 30 Days)
-              </Typography>
-              
-              {loadingCoachSchedule ? (
-                <Box display="flex" justifyContent="center" py={2}>
-                  <CircularProgress />
-                </Box>
-              ) : coachSchedule.length > 0 ? (
-                <Grid container spacing={1}>
-                  {coachSchedule.map((session, index) => (
-                    <Grid item xs={12} sm={6} key={index}>
-                      <Card variant="outlined">
-                        <CardContent sx={{ py: 1 }}>
-                          <Typography variant="body2" fontWeight="bold">
-                            {new Date(session.startTime).toLocaleDateString()}
-                          </Typography>
-                          <Typography variant="body2" color="text.secondary">
-                            {new Date(session.startTime).toLocaleTimeString([], { 
-                              hour: '2-digit', 
-                              minute: '2-digit' 
-                            })} - {new Date(session.endTime).toLocaleTimeString([], { 
-                              hour: '2-digit', 
-                              minute: '2-digit' 
-                            })}
-                          </Typography>
-                          <Button
-                            variant="outlined"
-                            size="small"
-                            sx={{ mt: 1 }}
-                            onClick={() => {
-                              // Handle makeup class booking
-                              console.log('Book makeup class:', session);
-                            }}
-                          >
-                            Book This Time
-                          </Button>
-                        </CardContent>
-                      </Card>
-                    </Grid>
-                  ))}
-                </Grid>
-              ) : (
-                <Box textAlign="center" py={2}>
-                  <Typography color="text.secondary" gutterBottom>
-                    No available times found for the next 30 days.
-                  </Typography>
-                  <Button
-                    variant="contained"
-                    color="primary"
-                    onClick={async () => {
-                      console.log('Message button clicked');
-                      console.log('Session data:', makeupDialog.session);
-                      console.log('Coach ID:', makeupDialog.session.coachId);
-                      console.log('Coach Name:', makeupDialog.session.coachName);
-                      await sendMessageToCoach(makeupDialog.session.coachId, makeupDialog.session.coachName);
-                    }}
-                  >
-                    Message Coach to Arrange Time
-                  </Button>
-                </Box>
-              )}
+              <Box textAlign="center" py={4}>
+                <Typography variant="body1" color="text.secondary" gutterBottom>
+                  Please contact your coach to arrange a makeup class time.
+                </Typography>
+                <Button
+                  variant="contained"
+                  color="primary"
+                  size="large"
+                  onClick={async () => {
+                    console.log('Message button clicked');
+                    console.log('Session data:', makeupDialog.session);
+                    console.log('Coach ID:', makeupDialog.session.coachId);
+                    console.log('Coach Name:', makeupDialog.session.coachName);
+                    await sendMessageToCoach(makeupDialog.session.coachId, makeupDialog.session.coachName);
+                  }}
+                  sx={{ mt: 2 }}
+                >
+                  Message Coach to Arrange Time
+                </Button>
+              </Box>
             </Box>
           )}
         </DialogContent>
@@ -1399,6 +1452,147 @@
           </Button>
         </DialogActions>
       </Dialog>
+
+      {/* Feedback Dialog */}
+      <Dialog 
+        open={feedbackDialog.open} 
+        onClose={() => setFeedbackDialog({ open: false, session: null })}
+        maxWidth="md"
+        fullWidth
+      >
+        <DialogTitle>
+          Coach Feedback (Coach to User)
+        </DialogTitle>
+        <DialogContent>
+          {feedbackDialog.session && (
+            <Box>
+              <Typography variant="h6" gutterBottom>
+                {feedbackDialog.session.title}
+              </Typography>
+              <Typography variant="body2" color="text.secondary" gutterBottom>
+                Coach: {feedbackDialog.session.coachName}
+              </Typography>
+              <Typography variant="body2" color="text.secondary" gutterBottom>
+                Date: {new Date(feedbackDialog.session.startTime).toLocaleDateString()} at{' '}
+                {new Date(feedbackDialog.session.startTime).toLocaleTimeString([], { 
+                  hour: '2-digit', 
+                  minute: '2-digit' 
+                })}
+              </Typography>
+              
+              <Divider sx={{ my: 2 }} />
+              
+              {/* 如果是課程組，顯示所有課程的反饋 */}
+              {feedbackDialog.session.recurringGroupId ? (
+                (() => {
+                  const groupSessions = sessions.filter(s => s.recurringGroupId === feedbackDialog.session.recurringGroupId);
+                  const completedSessions = groupSessions.filter(s => getSessionStatus(s).label === 'Completed');
+                  
+                                     if (completedSessions.length === 0) {
+                     return (
+                       <Box textAlign="center" py={4}>
+                         <CommentIcon sx={{ fontSize: 60, color: 'text.secondary', mb: 2 }} />
+                         <Typography variant="h6" color="text.secondary" gutterBottom>
+                           No Coach Feedback Available
+                         </Typography>
+                         <Typography variant="body2" color="text.secondary">
+                           No coach feedback has been provided for this class session yet.
+                         </Typography>
+                       </Box>
+                     );
+                   }
+                  
+                  return (
+                    <Box>
+                      <Typography variant="subtitle1" gutterBottom>
+                        Coach's Feedback for All Sessions (Coach to User):
+                      </Typography>
+                      <Grid container spacing={2}>
+                        {completedSessions.map((session, index) => (
+                          <Grid item xs={12} key={session.id}>
+                            <Card variant="outlined">
+                              <CardContent>
+                                <Typography variant="subtitle2" gutterBottom>
+                                  Session {index + 1}: {new Date(session.startTime).toLocaleDateString()} at{' '}
+                                  {new Date(session.startTime).toLocaleTimeString([], { 
+                                    hour: '2-digit', 
+                                    minute: '2-digit' 
+                                  })}
+                                </Typography>
+                                
+                                {session.coachComment ? (
+                                  <Box>
+                                    <Typography variant="body2" color="text.secondary" sx={{ mb: 1 }}>
+                                      Coach's Feedback (Coach to User):
+                                    </Typography>
+                                    <Typography variant="body1" sx={{ 
+                                      p: 2, 
+                                      bgcolor: 'grey.50', 
+                                      borderRadius: 1,
+                                      border: '1px solid',
+                                      borderColor: 'grey.300'
+                                    }}>
+                                      {session.coachComment}
+                                    </Typography>
+                                  </Box>
+                                ) : (
+                                  <Typography variant="body2" color="text.secondary" sx={{ fontStyle: 'italic' }}>
+                                    No feedback provided for this session.
+                                  </Typography>
+                                )}
+                              </CardContent>
+                            </Card>
+                          </Grid>
+                        ))}
+                      </Grid>
+                    </Box>
+                  );
+                })()
+              ) : (
+                /* 單個課程的反饋 */
+                (() => {
+                  if (!feedbackDialog.session.coachComment) {
+                    return (
+                      <Box textAlign="center" py={4}>
+                        <CommentIcon sx={{ fontSize: 60, color: 'text.secondary', mb: 2 }} />
+                        <Typography variant="h6" color="text.secondary" gutterBottom>
+                          No Coach Feedback Available
+                        </Typography>
+                        <Typography variant="body2" color="text.secondary">
+                          No coach feedback has been provided for this class session yet.
+                        </Typography>
+                      </Box>
+                    );
+                  }
+                  
+                  return (
+                    <Box>
+                      <Typography variant="subtitle1" gutterBottom>
+                        Coach's Feedback (Coach to User):
+                      </Typography>
+                      <Typography variant="body1" sx={{ 
+                        p: 3, 
+                        bgcolor: 'grey.50', 
+                        borderRadius: 1,
+                        border: '1px solid',
+                        borderColor: 'grey.300',
+                        minHeight: '100px'
+                      }}>
+                        {feedbackDialog.session.coachComment}
+                      </Typography>
+                    </Box>
+                  );
+                })()
+              )}
+            </Box>
+          )}
+        </DialogContent>
+        <DialogActions>
+          <Button onClick={() => setFeedbackDialog({ open: false, session: null })}>
+            Close
+          </Button>
+        </DialogActions>
+      </Dialog>
     </Box>
   );
 };
Index: pickleball-frontend/src/App.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React from 'react';\r\nimport { Routes, Route, Navigate, Outlet } from 'react-router-dom';\r\nimport HomePage from './pages/HomePage';\r\nimport LoginPage from './pages/LoginPage';\r\nimport RegisterPage from './pages/RegisterPage';\r\nimport ProfilePage from './components/profile/ProfilePage';\r\nimport RewardsPage from './components/profile/RewardsPage';\r\nimport FeedbackPage from './components/feedback/FeedbackPage';\r\nimport MyFeedbackPage from './components/feedback/MyFeedbackPage';\r\n\r\nimport AdminLogin from './components/admin/AdminLogin';\r\nimport AdminDashboard from './components/admin/AdminDashboard';\r\nimport MainLayout from './components/layout/MainLayout';\r\nimport UserService from './service/UserService';\r\nimport ForgotPasswordPage from './pages/ForgotPasswordPage';\r\nimport ResetPasswordPage from './pages/ResetPasswordPage';\r\nimport ResetPasswordEmailSent from './pages/ResetPasswordEmailSent';\r\nimport ResetPasswordSuccess from './pages/ResetPasswordSuccess';\r\nimport { AuthProvider, useAuth } from './context/AuthContext';\r\nimport CourtListPage from './components/court/CourtListPage';\r\nimport CourtDetailPage from './components/court/CourtDetailPage'; \r\nimport BookingPage from './components/court/BookingPage'; \r\nimport BookingHistory from './components/court/BookingHistory';\r\nimport BookingConfirmationPage from './components/court/BookingConfirmationPage'; \r\nimport PaymentPage from './components/court/PaymentPage';\r\nimport WalletTopUpPage from './components/profile/WalletTopUpPage';\r\nimport WalletPage from './components/profile/WalletPage';\r\nimport WalletTransactionHistory from './components/profile/WalletTransactionHistory';\r\nimport EventPage from './components/event/EventPage';\r\nimport EventCreatePage from './components/event/EventCreatePage';\r\nimport EventEditPage from './components/event/EventEditPage';\r\nimport FriendlyMatchPage from './components/event/FriendlyMatchPage';\r\nimport FriendlyMatchCreatePage from './components/event/FriendlyMatchCreatePage';\r\nimport MessagingPage from './components/messaging/MessagingPage';\r\nimport HelpdeskPage from './components/helpdesk/HelpdeskPage';\r\nimport { SocketProvider } from './context/SocketContext';\r\nimport AdminManageUsers from './components/admin/AdminManageUsers';\r\nimport AdminManageTiers from './components/admin/AdminManageTiers';\r\nimport AdminManageCourts from './components/admin/AdminManageCourts';\r\nimport AdminManageBookings from './components/admin/AdminManageBookings';\r\nimport CoachScheduleManagement from './components/coach/CoachScheduleManagement';\r\nimport BrowseClassPage from './components/class/BrowseClassPage';\r\nimport ClassSessionRegisterPage from './components/class/ClassSessionRegisterPage';\r\nimport CoachingDashboard from './components/coach/CoachingDashboard';\r\nimport StudentManagementSystem from './components/coach/StudentManagementSystem';\r\nimport MyClassSessionsPage from './components/profile/MyClassSessionsPage';\r\nimport AdminSettings from './components/admin/AdminSettings';\r\nimport CourtAvailabilityPage from './components/court/CourtAvailabilityPage';\r\nimport ProfileOverview from './components/profile/ProfileOverview';\r\nimport EditProfileForm from './components/profile/EditProfileForm';\r\n\r\nconst ProtectedRoute = ({ children }) => {\r\n  const { authToken } = useAuth();\r\n  return authToken ? children : <Navigate to=\"/login\" replace />;\r\n};\r\n\r\nconst AdminProtectedRoute = ({ children }) => {\r\n  return UserService.isAdminLoggedIn() ? children : <Navigate to=\"/admin/login\" replace />;\r\n};\r\n\r\nfunction AdminDashboardLayout() {\r\n  return <AdminDashboard><Outlet /></AdminDashboard>;\r\n}\r\n\r\nfunction HomeRedirect() {\r\n  const { currentUser } = useAuth();\r\n  if (!currentUser) return <HomePage />;\r\n  if (currentUser.userType === 'Admin' || currentUser.userType === 'ADMIN') {\r\n    return <Navigate to=\"/admin/dashboard\" replace />;\r\n  }\r\n  if (currentUser.userType === 'Coach' || currentUser.userType === 'COACH') {\r\n    return <Navigate to=\"/coaching\" replace />;\r\n  }\r\n  return <HomePage />;\r\n}\r\n\r\nfunction App() {\r\n  const { currentUser } = useAuth();\r\n\r\n  // Coach 專屬路由：只顯示 CoachScheduleManagement\r\n  if (currentUser?.userType === 'Coach' || currentUser?.userType === 'COACH') {\r\n    return (\r\n      <SocketProvider>\r\n        <Routes>\r\n          <Route path=\"/coaching\" element={<CoachingDashboard />} />\r\n          <Route path=\"/coaching/schedulemanagement\" element={<CoachScheduleManagement />} />\r\n          <Route path=\"/coaching/students\" element={<StudentManagementSystem />} />\r\n          <Route path=\"/messages\" element={<MessagingPage />} />\r\n          <Route path=\"*\" element={<Navigate to=\"/coaching\" replace />} />\r\n        </Routes>\r\n      </SocketProvider>\r\n    );\r\n  }\r\n\r\n  // 其他 user 正常顯示 MainLayout\r\n  return (\r\n    <SocketProvider>\r\n      <Routes>\r\n        {/* Public routes */}\r\n        <Route path=\"/login\" element={<LoginPage />} />\r\n        <Route path=\"/register\" element={<RegisterPage />} />\r\n        <Route path=\"/forgot-password\" element={<ForgotPasswordPage />} />\r\n        <Route path=\"/reset-password-email-sent\" element={<ResetPasswordEmailSent />} />\r\n        <Route path=\"/reset-password/:token\" element={<ResetPasswordPage />} />\r\n        <Route path=\"/reset-password-success\" element={<ResetPasswordSuccess />} />\r\n        <Route path=\"/admin/login\" element={<AdminLogin />} />\r\n\r\n        {/* Protected user routes with layout */}\r\n        <Route path=\"/\" element={<MainLayout />}>\r\n          <Route index element={<HomePage />} />\r\n          <Route path=\"home\" element={<HomePage />} />\r\n          \r\n          {/* Profile routes */}\r\n          <Route path=\"profile\" element={<ProfilePage />}>\r\n            <Route index element={<ProfileOverview />} />\r\n            <Route path=\"rewards\" element={\r\n              <ProtectedRoute>\r\n                <RewardsPage />\r\n              </ProtectedRoute>\r\n            } />\r\n            <Route path=\"my-bookings\" element={\r\n              <ProtectedRoute>\r\n                <BookingHistory />\r\n              </ProtectedRoute>\r\n            } />\r\n            <Route path=\"my-feedback\" element={\r\n              <ProtectedRoute>\r\n                <MyFeedbackPage />\r\n              </ProtectedRoute>\r\n            } />\r\n            <Route path=\"my-class-sessions\" element={\r\n              <ProtectedRoute>\r\n                <MyClassSessionsPage />\r\n              </ProtectedRoute>\r\n            } />\r\n            <Route path=\"wallet\" element={\r\n              <ProtectedRoute>\r\n                <WalletPage />\r\n              </ProtectedRoute>\r\n            } />\r\n            <Route path=\"wallet/transactions\" element={\r\n              <ProtectedRoute>\r\n                <WalletTransactionHistory />\r\n              </ProtectedRoute>\r\n            } />\r\n            <Route path=\"edit-profile\" element={\r\n              <ProtectedRoute>\r\n                <EditProfileForm />\r\n              </ProtectedRoute>\r\n            } />\r\n            <Route path=\"notifications\" element={null} />\r\n            <Route path=\"my-games\" element={null} />\r\n            <Route path=\"my-invoices\" element={null} />\r\n          </Route>\r\n\r\n          {/* Feedback form page */}\r\n          <Route path=\"feedback\" element={\r\n            <ProtectedRoute>\r\n              <FeedbackPage />\r\n            </ProtectedRoute>\r\n          } />\r\n\r\n          {/* Court listing */}\r\n          <Route path=\"courts\" element={\r\n            <ProtectedRoute>\r\n              <CourtListPage />\r\n            </ProtectedRoute>\r\n          } />\r\n\r\n          {/* Court details */}\r\n          <Route path=\"courts/:id\" element={\r\n            <ProtectedRoute>\r\n              <CourtDetailPage />\r\n            </ProtectedRoute>\r\n          } />\r\n\r\n          {/* Booking flow */}\r\n          <Route path=\"booking/:courtId\" element={\r\n            <ProtectedRoute>\r\n              <BookingPage />\r\n            </ProtectedRoute>\r\n          } />\r\n\r\n          {/* Payment page */}\r\n          <Route path=\"payment\" element={\r\n            <ProtectedRoute>\r\n              <PaymentPage />\r\n            </ProtectedRoute>\r\n          } />\r\n\r\n          {/* Booking confirmation page */}\r\n          <Route path=\"booking/confirmation\" element={\r\n            <ProtectedRoute>\r\n              <BookingConfirmationPage />\r\n            </ProtectedRoute>\r\n          } />\r\n\r\n          {/* Wallet top-up page */}\r\n          <Route path=\"wallet/topup\" element={\r\n            <ProtectedRoute>\r\n              <WalletTopUpPage />\r\n            </ProtectedRoute>\r\n          } />\r\n\r\n          {/* Event listing */}\r\n          <Route path=\"events\" element={\r\n            <ProtectedRoute>\r\n              <EventPage />\r\n            </ProtectedRoute>\r\n          } />\r\n\r\n          {/* Event creation */}\r\n          <Route path=\"events/create\" element={\r\n            <ProtectedRoute>\r\n              <EventCreatePage />\r\n            </ProtectedRoute>\r\n          } />\r\n\r\n          {/* Event editing */}\r\n          <Route path=\"events/edit/:eventId\" element={\r\n            <ProtectedRoute>\r\n              <EventEditPage />\r\n            </ProtectedRoute>\r\n          } />\r\n\r\n          {/* Friendly Match page */}\r\n          <Route path=\"friendly-matches\" element={\r\n            <ProtectedRoute>\r\n              <FriendlyMatchPage />\r\n            </ProtectedRoute>\r\n          } />\r\n\r\n          {/* Friendly Match create page */}\r\n          <Route path=\"friendly-matches/create\" element={\r\n            <ProtectedRoute>\r\n              <FriendlyMatchCreatePage />\r\n            </ProtectedRoute>\r\n          } />\r\n\r\n          {/* Messaging page */}\r\n          <Route path=\"messages\" element={\r\n            <ProtectedRoute>\r\n              <MessagingPage />\r\n            </ProtectedRoute>\r\n          } />\r\n\r\n          {/* Helpdesk page */}\r\n          <Route path=\"helpdesk\" element={\r\n            <ProtectedRoute>\r\n              <HelpdeskPage />\r\n            </ProtectedRoute>\r\n          } />\r\n\r\n          <Route path=\"court-availability\" element={<CourtAvailabilityPage />} />\r\n\r\n          {/* User-side: Browse available coaching sessions */}\r\n          <Route path=\"coaching/browse\" element={<BrowseClassPage />} />\r\n          <Route path=\"class/:id\" element={<ClassSessionRegisterPage />} />\r\n          <Route path=\"class/:id/register\" element={<ClassSessionRegisterPage />} />\r\n        </Route>\r\n\r\n        {/* Admin routes with nested structure */}\r\n        <Route path=\"/admin\" element={\r\n          <AdminProtectedRoute>\r\n            <AdminDashboardLayout />\r\n          </AdminProtectedRoute>\r\n        }>\r\n          <Route path=\"dashboard\" element={<div />} /> {/* Dashboard home, content handled in AdminDashboard */}\r\n          <Route path=\"users\" element={<AdminManageUsers />} />\r\n          <Route path=\"tiers\" element={<AdminManageTiers />} />\r\n          <Route path=\"courts\" element={<AdminManageCourts />} />\r\n          <Route path=\"bookings\" element={<AdminManageBookings />} />\r\n          <Route path=\"settings\" element={<AdminSettings />} />\r\n        </Route>\r\n\r\n        {/* 404 fallback */}\r\n        <Route path=\"*\" element={<Navigate to=\"/\" replace />} />\r\n      </Routes>\r\n    </SocketProvider>\r\n  );\r\n}\r\n\r\nexport default App;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball-frontend/src/App.js b/pickleball-frontend/src/App.js
--- a/pickleball-frontend/src/App.js	(revision 89327e12854b108d004ebb020d0592b1c618ecaf)
+++ b/pickleball-frontend/src/App.js	(date 1754174488939)
@@ -48,6 +48,7 @@
 import CourtAvailabilityPage from './components/court/CourtAvailabilityPage';
 import ProfileOverview from './components/profile/ProfileOverview';
 import EditProfileForm from './components/profile/EditProfileForm';
+import RedeemVoucherPage from './components/profile/RedeemVoucherPage';
 
 const ProtectedRoute = ({ children }) => {
   const { authToken } = useAuth();
@@ -117,6 +118,11 @@
               <ProtectedRoute>
                 <RewardsPage />
               </ProtectedRoute>
+            } />
+            <Route path="redeem-voucher" element={
+              <ProtectedRoute>
+                <RedeemVoucherPage onSuccess={() => {}} onError={() => {}} />
+              </ProtectedRoute>
             } />
             <Route path="my-bookings" element={
               <ProtectedRoute>
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/FeedbackResponseDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.dto;\r\n\r\nimport lombok.Data;\r\nimport java.time.LocalDateTime;\r\nimport java.util.List;\r\n\r\n@Data\r\npublic class FeedbackResponseDto {\r\n    private Integer id;\r\n    private String targetType;\r\n    private Integer targetId;\r\n    private Integer rating;\r\n    private String review;\r\n    private String userName;\r\n    private String userEmail;\r\n    private Integer userId; // 新增：用户ID\r\n    private LocalDateTime createdAt;\r\n    private List<String> tags;\r\n    private String targetName;\r\n    private Double averageRating;\r\n    \r\n    // 新增：预订ID\r\n    private Integer bookingId;\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/FeedbackResponseDto.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/FeedbackResponseDto.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/FeedbackResponseDto.java	(revision 89327e12854b108d004ebb020d0592b1c618ecaf)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/FeedbackResponseDto.java	(date 1753989935102)
@@ -21,4 +21,12 @@
     
     // 新增：预订ID
     private Integer bookingId;
+    
+    // 新增：課程相關信息（用於教練評價）
+    private Integer classSessionId;
+    private String classSessionTitle;
+    private String classSessionDate;
+    private String classSessionTime;
+    private String venueName;
+    private String courtName;
 }
\ No newline at end of file
Index: pickleball-frontend/src/components/court/BookingConfirmationPage.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Container,\r\n  Card,\r\n  CardContent,\r\n  Typography,\r\n  Button,\r\n  Box,\r\n  Grid,\r\n  Divider,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  TextField,\r\n  IconButton,\r\n  Tooltip,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Paper\r\n} from '@mui/material';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport CheckCircleIcon from '@mui/icons-material/CheckCircle';\r\nimport ShareIcon from '@mui/icons-material/Share';\r\nimport ClassSessionService from '../../service/ClassSessionService';\r\nimport api from '../../api/axiosConfig';\r\n\r\nconst PADDLE_PRICE = 5; // 每个 paddle 租金\r\nconst BALL_SET_PRICE = 12; // 一组 ball set 售价\r\n\r\nconst BookingConfirmationPage = () => {\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n  const booking = location.state?.booking;\r\n  const matchDetails = location.state?.matchDetails;\r\n  const paymentType = location.state?.type;\r\n  const [sessionDetails, setSessionDetails] = useState(null);\r\n  const [shareDialogOpen, setShareDialogOpen] = useState(false);\r\n  const [shareMessage, setShareMessage] = useState('');\r\n  const [shareRecipient, setShareRecipient] = useState('');\r\n  const [isSharing, setIsSharing] = useState(false);\r\n  const [friends, setFriends] = useState([]);\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [searchResults, setSearchResults] = useState([]);\r\n  const [isSearching, setIsSearching] = useState(false);\r\n  const [showSearchResults, setShowSearchResults] = useState(false);\r\n\r\n  // 添加调试日志\r\n  console.log('=== BookingConfirmationPage Debug ===');\r\n  console.log('Location state:', location.state);\r\n  console.log('Booking object:', booking);\r\n  console.log('Match details:', matchDetails);\r\n  console.log('Payment type:', paymentType);\r\n\r\n  const formatDate = (dateString) => {\r\n    console.log('formatDate called with:', dateString);\r\n    if (!dateString) return '';\r\n    const options = { year: 'numeric', month: 'long', day: 'numeric' };\r\n    return new Date(dateString).toLocaleDateString(undefined, options);\r\n  };\r\n\r\n  const formatTime = (time) => {\r\n    if (!time) return '';\r\n    \r\n    // 如果是完整的日期時間字符串，提取時間部分\r\n    if (time.includes('T') || time.includes(' ')) {\r\n      const date = new Date(time);\r\n      return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\r\n    }\r\n    \r\n    // 如果是純時間格式（如 \"08:00\"），直接格式化\r\n    return new Date(`1970-01-01T${time}:00`).toLocaleTimeString([],\r\n      { hour: '2-digit', minute: '2-digit' });\r\n  };\r\n\r\n  // 處理 friendly match 或一般 booking 的數據\r\n  const isFriendlyMatch = paymentType === 'friendly-match';\r\n  const data = isFriendlyMatch ? matchDetails : booking;\r\n  \r\n  // 計算 duration（小時）\r\n  const calculateDuration = () => {\r\n    if (isFriendlyMatch && data?.startTime && data?.endTime) {\r\n      const start = new Date(data.startTime);\r\n      const end = new Date(data.endTime);\r\n      const diffMs = end - start;\r\n      const diffHours = diffMs / (1000 * 60 * 60);\r\n      return Math.round(diffHours * 10) / 10; // 保留一位小數\r\n    }\r\n    return data?.duration || booking?.durationHours || 1;\r\n  };\r\n  \r\n  const duration = calculateDuration();\r\n  \r\n  const numPlayers = isFriendlyMatch \r\n    ? (data?.maxPlayers || 4) \r\n    : (booking?.numberOfPlayers || 2);\r\n  const numPaddles = isFriendlyMatch ? (data?.numPaddles || 0) : (booking?.numPaddles || 0);\r\n  const buyBallSet = isFriendlyMatch ? !!data?.buyBallSet : !!booking?.buyBallSet;\r\n  const total = isFriendlyMatch\r\n    ? (data?.totalPrice || data?.price || 0)\r\n    : (booking?.price !== undefined\r\n        ? booking.price\r\n        : (booking?.totalAmount !== undefined\r\n            ? booking.totalAmount\r\n            : (booking?.totalPrice !== undefined\r\n                ? booking.totalPrice\r\n                : 0)));\r\n\r\n  useEffect(() => {\r\n    if (booking && booking.type === 'class-session' && booking.sessions && booking.sessions.length > 0) {\r\n      const sessionIds = booking.sessions.map(s => s.id);\r\n      ClassSessionService.getSessionDetailsBatch(sessionIds)\r\n        .then(data => setSessionDetails(data))\r\n        .catch(() => setSessionDetails(null));\r\n    }\r\n  }, [booking]);\r\n\r\n  // 獲取朋友列表\r\n  const fetchFriends = async () => {\r\n    try {\r\n      const response = await api.get('/friends/accepted');\r\n      setFriends(response.data);\r\n    } catch (error) {\r\n      console.error('Failed to fetch friends:', error);\r\n    }\r\n  };\r\n\r\n  // 搜索用戶\r\n  const searchUsers = async () => {\r\n    if (!searchQuery.trim()) {\r\n      setSearchResults([]);\r\n      setShowSearchResults(false);\r\n      return;\r\n    }\r\n\r\n    setIsSearching(true);\r\n    try {\r\n      const response = await api.get(`/users/search?query=${encodeURIComponent(searchQuery.trim())}`);\r\n      setSearchResults(response.data);\r\n      setShowSearchResults(true);\r\n    } catch (error) {\r\n      console.error('Failed to search users:', error);\r\n      setSearchResults([]);\r\n    } finally {\r\n      setIsSearching(false);\r\n    }\r\n  };\r\n\r\n  // 選擇用戶\r\n  const selectUser = (username) => {\r\n    setShareRecipient(username);\r\n    setSearchQuery(username);\r\n    setShowSearchResults(false);\r\n  };\r\n\r\n  // 生成分享消息內容\r\n  const generateShareMessage = () => {\r\n    if (isFriendlyMatch) {\r\n      return `\uD83C\uDFBE Friendly Match Confirmed!\r\n\r\n\uD83D\uDCC5 Date: ${formatDate(data?.date)}\r\n⏰ Time: ${formatTime(data?.startTime)} - ${formatTime(data?.endTime)}\r\n\uD83C\uDFDF\uFE0F Court: ${data?.courtName || 'Court'}\r\n\uD83D\uDCCD Location: ${data?.venueName || data?.location || 'Location'}\r\n\uD83D\uDC65 Players: ${data?.currentPlayers || 1}/${data?.maxPlayers || 4}\r\n⏱\uFE0F Duration: ${duration} hour${duration !== 1 ? 's' : ''}\r\n\uD83D\uDCB0 Total: RM${total.toFixed(2)}\r\n\r\n${data?.numPaddles > 0 ? `\uD83C\uDFD3 Paddles: ${data.numPaddles} (RM5 each)\\n` : ''}${data?.buyBallSet ? '\uD83C\uDFD0 Ball Set: Yes (RM12)\\n' : ''}\r\nPayment Status: ✅ PAID\r\n\r\nJoin me for a great game! \uD83C\uDFD3`;\r\n    } else {\r\n      return `\uD83C\uDFDF\uFE0F Court Booking Confirmed!\r\n\r\n\uD83D\uDCC5 Date: ${formatDate(booking?.slotDate)}\r\n⏰ Time: ${formatTime(booking?.startTime)} - ${formatTime(booking?.endTime)}\r\n\uD83C\uDFDF\uFE0F Court: ${booking?.courtName || 'Court'}\r\n\uD83D\uDCCD Location: ${booking?.courtLocation || 'Location'}\r\n\uD83D\uDC65 Players: ${numPlayers}\r\n\uD83D\uDCB0 Total: RM${total.toFixed(2)}\r\n\r\n${numPaddles > 0 ? `\uD83C\uDFD3 Paddles: ${numPaddles} (RM5 each)\\n` : ''}${buyBallSet ? '\uD83C\uDFD0 Ball Set: Yes (RM12)\\n' : ''}\r\nPayment Status: ✅ ${booking?.paymentStatus || 'PAID'}\r\n\r\nLet's play! \uD83C\uDFD3`;\r\n    }\r\n  };\r\n\r\n  // 處理分享\r\n  const handleShare = () => {\r\n    setShareMessage(generateShareMessage());\r\n    setShareDialogOpen(true);\r\n  };\r\n\r\n  // 發送分享消息\r\n  const handleSendShare = async () => {\r\n    if (!shareRecipient.trim()) {\r\n      alert('Please enter a recipient username');\r\n      return;\r\n    }\r\n\r\n    setIsSharing(true);\r\n    try {\r\n      const params = new URLSearchParams({\r\n        recipient: shareRecipient.trim(),\r\n        content: shareMessage\r\n      });\r\n\r\n      await api.post(`/messages/send?${params.toString()}`);\r\n      alert('Message sent successfully!');\r\n      setShareDialogOpen(false);\r\n      setShareRecipient('');\r\n    } catch (error) {\r\n      console.error('Failed to send message:', error);\r\n      alert('Failed to send message: ' + (error.response?.data || error.message));\r\n    } finally {\r\n      setIsSharing(false);\r\n    }\r\n  };\r\n\r\n  if (!booking && !matchDetails) {\r\n    return (\r\n      <Container sx={{ py: 4, textAlign: 'center' }}>\r\n        <Typography variant=\"h5\" gutterBottom>\r\n          Booking information not available\r\n        </Typography>\r\n        <Button variant=\"contained\" onClick={() => navigate('/courts')}>\r\n          Browse Courts\r\n        </Button>\r\n      </Container>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Container maxWidth=\"sm\" sx={{ py: 6 }}>\r\n      <Card sx={{ \r\n          textAlign: 'center',\r\n          p: 4,\r\n          borderRadius: '16px',\r\n        boxShadow: '0 8px 24px rgba(149, 157, 165, 0.2)'\r\n      }}>\r\n        <CheckCircleIcon sx={{ \r\n            fontSize: 80,\r\n            color: '#4caf50',\r\n            mb: 2,\r\n            backgroundColor: '#e8f5e9',\r\n            borderRadius: '50%',\r\n          padding: '10px'\r\n        }} />\r\n  \r\n        <Typography variant=\"h4\" gutterBottom sx={{ \r\n            fontWeight: 'bold',\r\n            color: '#2e7d32',\r\n          mb: 2\r\n        }}>\r\n           {isFriendlyMatch ? 'Payment Confirmed!' : 'Booking Confirmed!'}\r\n        </Typography>\r\n  \r\n        <Typography variant=\"body1\" color=\"text.secondary\" sx={{ mb: 4 }}>\r\n          {isFriendlyMatch \r\n            ? `Your friendly match payment has been confirmed`\r\n            : `Your booking at ${booking?.courtName} has been confirmed`\r\n          }\r\n        </Typography>\r\n  \r\n        <Box\r\n          sx={{\r\n            border: '1px solid #e0e0e0',\r\n            borderRadius: '8px',\r\n            mb: 4,\r\n            textAlign: 'left',\r\n            backgroundColor: '#f9f9f9',\r\n          }}\r\n        >\r\n          <Box sx={{ p: 3 }}>\r\n            <Typography variant=\"h6\" gutterBottom sx={{ fontWeight: 'bold' }}>\r\n              {isFriendlyMatch ? 'Match Summary' : 'Booking Summary'}\r\n            </Typography>\r\n  \r\n            {booking && booking.type === 'class-session' && booking.sessions ? (\r\n              <Box mb={2}>\r\n                {/* 顯示 recurring group summary */}\r\n                <Typography variant=\"body2\" color=\"text.secondary\">\r\n                  Venue: {sessionDetails ? (sessionDetails[0]?.venueName || '-') : (booking.sessions[0]?.venue || booking.sessions[0]?.venueName || '-')}\r\n                </Typography>\r\n                <Typography variant=\"body2\" color=\"text.secondary\">\r\n                  State: {sessionDetails ? (sessionDetails[0]?.venueState || '-') : (booking.sessions[0]?.state || booking.sessions[0]?.venueState || '-')}\r\n                </Typography>\r\n                <Typography variant=\"body2\" color=\"text.secondary\">\r\n                  Court: {sessionDetails ? (sessionDetails[0]?.courtName || '-') : (booking.sessions[0]?.courtName || booking.sessions[0]?.court?.name || '-')}\r\n                </Typography>\r\n                <Typography variant=\"body2\" color=\"primary\" fontWeight=\"bold\">\r\n                  Total Sessions: {booking.sessions.length}\r\n                </Typography>\r\n                <Typography variant=\"subtitle1\" fontWeight=\"bold\" color=\"primary\" mb={1} mt={2}>\r\n                  Booked Class Sessions:\r\n                </Typography>\r\n                {(sessionDetails || (booking && booking.sessions)).map(sess => {\r\n                  const start = sess.startTime ? new Date(sess.startTime) : null;\r\n                  const end = sess.endTime ? new Date(sess.endTime) : null;\r\n                  const format = d => d ? d.toLocaleString([], { year: 'numeric', month: '2-digit', day: '2-digit', hour: '2-digit', minute: '2-digit' }) : '';\r\n                  return (\r\n                    <Typography key={sess.id} variant=\"body2\" color=\"text.secondary\">\r\n                      {format(start)} - {format(end)} {sess.type || sess.slotType || ''} | Coach: {sess.coachName} | Price: RM {sess.price}\r\n                    </Typography>\r\n                  );\r\n                })}\r\n              </Box>\r\n            ) : (\r\n              <>\r\n                {isFriendlyMatch ? (\r\n                  <>\r\n                    {/* Friendly Match Summary */}\r\n                    <Card variant=\"outlined\" sx={{ mb: 2 }}>\r\n                      <CardContent>\r\n                        <SummaryRow label=\"Match Title\" value={data?.title || 'Friendly Match'} bold />\r\n                        <SummaryRow label=\"Max Players\" value={numPlayers} />\r\n                        <SummaryRow\r\n                          label=\"Paddles Rented\"\r\n                          value={numPaddles > 0 ? `${numPaddles} (RM5 each)` : 'None'}\r\n                        />\r\n                        <SummaryRow\r\n                          label=\"Ball Set\"\r\n                          value={buyBallSet ? 'Yes (RM12)' : 'No'}\r\n                          isLast\r\n                        />\r\n                      </CardContent>\r\n                    </Card>\r\n\r\n                    <Card variant=\"outlined\" sx={{ mb: 2 }}>\r\n                      <CardContent>\r\n                        <SummaryRow label=\"Court\" value={data?.courtName || 'Court'} bold />\r\n                        <SummaryRow label=\"Location\" value={data?.venueName || data?.location || data?.courtLocation || 'Location'} />\r\n                        <SummaryRow label=\"Date\" value={formatDate(data?.date)} />\r\n                        <SummaryRow\r\n                          label=\"Time\"\r\n                          value={`${formatTime(data?.startTime)} - ${formatTime(data?.endTime)}`}\r\n                        />\r\n                        <SummaryRow\r\n                          label=\"Duration\"\r\n                          value={`${duration} hour${duration !== 1 ? 's' : ''}`}\r\n                          isLast\r\n                        />\r\n                      </CardContent>\r\n                    </Card>\r\n                  </>\r\n                ) : (\r\n                  <>\r\n                    {/* Regular Court Booking Summary */}\r\n            <Card variant=\"outlined\" sx={{ mb: 2 }}>\r\n              <CardContent>\r\n                <SummaryRow label=\"Number of Players\" value={numPlayers} />\r\n                <SummaryRow\r\n                  label=\"Paddles to Rent\"\r\n                  value={`${numPaddles} (RM${PADDLE_PRICE} each)`}\r\n                />\r\n                <SummaryRow\r\n                  label={`Buy Ball Set (RM${BALL_SET_PRICE})`}\r\n                  value={buyBallSet ? 'Yes' : 'No'}\r\n                  isLast\r\n                />\r\n              </CardContent>\r\n            </Card>\r\n  \r\n            <Card variant=\"outlined\" sx={{ mb: 2 }}>\r\n              <CardContent>\r\n                        <SummaryRow label=\"Court\" value={booking?.courtName} bold />\r\n                        <SummaryRow label=\"Location\" value={booking?.courtLocation} />\r\n                        <SummaryRow label=\"Date\" value={formatDate(booking?.slotDate)} />\r\n                <SummaryRow\r\n                  label=\"Time\"\r\n                          value={`${formatTime(booking?.startTime)} - ${formatTime(booking?.endTime)}`}\r\n                />\r\n                <SummaryRow\r\n                  label=\"Duration\"\r\n                          value={`${booking?.durationHours} hours`}\r\n                  isLast\r\n                />\r\n              </CardContent>\r\n            </Card>\r\n                  </>\r\n                )}\r\n              </>\r\n            )}\r\n  \r\n            <Card variant=\"outlined\" sx={{ mb: 2 }}>\r\n              <CardContent>\r\n                <SummaryRow\r\n                  label=\"Total Amount\"\r\n                  value={`RM${Number(total).toFixed(2)}`}\r\n                  bold\r\n                  color=\"#2e7d32\"\r\n                />\r\n                <SummaryRow\r\n                  label=\"Payment Method\"\r\n                  value={isFriendlyMatch ? 'Wallet' : (booking?.paymentMethod === 'WALLET' ? 'Wallet' : 'Credit Card')}\r\n                />\r\n                <SummaryRow\r\n                  label=\"Payment Status\"\r\n                  value={isFriendlyMatch ? 'PAID' : booking?.paymentStatus}\r\n                  color={(isFriendlyMatch ? 'PAID' : booking?.paymentStatus) === 'COMPLETED' || (isFriendlyMatch ? 'PAID' : booking?.paymentStatus) === 'PAID' ? '#2e7d32' : '#ff9800'}\r\n                  bold\r\n                  isLast\r\n                />\r\n              </CardContent>\r\n            </Card>\r\n  \r\n            {booking?.pointsEarned && (\r\n              <Paper\r\n                elevation={2}\r\n                sx={{\r\n                  p: 2,\r\n                  backgroundColor: '#f3e5f5',\r\n                  border: '1px solid #ce93d8',\r\n                  borderRadius: '8px',\r\n                  mt: 2,\r\n                }}\r\n              >\r\n                <Typography\r\n                  variant=\"h6\"\r\n                  fontWeight=\"bold\"\r\n                  color=\"#9c27b0\"\r\n                  textAlign=\"center\"\r\n                  gutterBottom\r\n                >\r\n                  \uD83C\uDF89 Points Earned!\r\n                </Typography>\r\n  \r\n                <SummaryRow\r\n                  label=\"Points Earned\"\r\n                  value={`+${booking.pointsEarned}`}\r\n                  bold\r\n                  color=\"#9c27b0\"\r\n                />\r\n                <SummaryRow\r\n                  label=\"Current Balance\"\r\n                  value={`${booking.currentPointBalance} points`}\r\n                  isLast\r\n                />\r\n  \r\n                <Typography\r\n                  variant=\"body2\"\r\n                  color=\"text.secondary\"\r\n                  textAlign=\"center\"\r\n                  sx={{ mt: 1 }}\r\n                >\r\n                  Earn 1 point for every RM1 spent!\r\n                </Typography>\r\n              </Paper>\r\n            )}\r\n          </Box>\r\n        </Box>\r\n  \r\n        <Box sx={{ display: 'flex', justifyContent: 'center', gap: 2, mt: 3 }}>\r\n          {isFriendlyMatch ? (\r\n            // Friendly Match 的按鈕\r\n            <>\r\n              <Tooltip title=\"Share confirmation with friends\">\r\n                <IconButton\r\n                  onClick={handleShare}\r\n                  sx={{\r\n                    backgroundColor: '#2196f3',\r\n                    color: 'white',\r\n                    '&:hover': {\r\n                      backgroundColor: '#1976d2'\r\n                    },\r\n                    mb: 2\r\n                  }}\r\n                >\r\n                  <ShareIcon />\r\n                </IconButton>\r\n              </Tooltip>\r\n              \r\n              <Button \r\n                variant=\"outlined\" \r\n                onClick={() => navigate('/events')}\r\n                sx={{ \r\n                  px: 4,\r\n                  py: 1.5,\r\n                  borderColor: '#4caf50',\r\n                  color: '#4caf50',\r\n                  '&:hover': {\r\n                    backgroundColor: '#e8f5e9',\r\n                    borderColor: '#2e7d32'\r\n                  }\r\n                }}\r\n              >\r\n                View My Matches\r\n              </Button>\r\n              \r\n              <Button \r\n                variant=\"contained\" \r\n                onClick={() => navigate('/events')}\r\n                sx={{ \r\n                  px: 4,\r\n                  py: 1.5,\r\n                  backgroundColor: '#ff6f00',\r\n                  '&:hover': {\r\n                    backgroundColor: '#e65100'\r\n                  }\r\n                }}\r\n              >\r\n                Create Another Match\r\n              </Button>\r\n            </>\r\n          ) : (booking && booking.type === 'class-session') ? (\r\n            // Class Session 預訂的按鈕\r\n            <>\r\n              <Tooltip title=\"Share confirmation with friends\">\r\n                <IconButton\r\n                  onClick={handleShare}\r\n                  sx={{\r\n                    backgroundColor: '#2196f3',\r\n                    color: 'white',\r\n                    '&:hover': {\r\n                      backgroundColor: '#1976d2'\r\n                    },\r\n                    mb: 2\r\n                  }}\r\n                >\r\n                  <ShareIcon />\r\n                </IconButton>\r\n              </Tooltip>\r\n              \r\n              <Button \r\n                variant=\"outlined\" \r\n                onClick={() => navigate('/profile/my-class-sessions')}\r\n                sx={{ \r\n                  px: 4,\r\n                  py: 1.5,\r\n                  borderColor: '#4caf50',\r\n                  color: '#4caf50',\r\n                  '&:hover': {\r\n                    backgroundColor: '#e8f5e9',\r\n                    borderColor: '#2e7d32'\r\n                  }\r\n                }}\r\n              >\r\n                View My Class Sessions\r\n              </Button>\r\n              \r\n              <Button \r\n                variant=\"contained\" \r\n                onClick={() => navigate('/coaching/browse')}\r\n                sx={{ \r\n                  px: 4,\r\n                  py: 1.5,\r\n                  backgroundColor: '#ff6f00',\r\n                  '&:hover': {\r\n                    backgroundColor: '#e65100'\r\n                  }\r\n                }}\r\n              >\r\n                Book Another Class Session\r\n              </Button>\r\n            </>\r\n          ) : (\r\n            // 一般球場預訂的按鈕（保持原樣）\r\n            <>\r\n              <Tooltip title=\"Share confirmation with friends\">\r\n                <IconButton\r\n                  onClick={handleShare}\r\n                  sx={{\r\n                    backgroundColor: '#2196f3',\r\n                    color: 'white',\r\n                    '&:hover': {\r\n                      backgroundColor: '#1976d2'\r\n                    },\r\n                    mb: 2\r\n                  }}\r\n                >\r\n                  <ShareIcon />\r\n                </IconButton>\r\n              </Tooltip>\r\n              \r\n          <Button\r\n            variant=\"outlined\"\r\n            onClick={() => navigate('/profile/my-bookings')}\r\n            sx={{\r\n              px: 4,\r\n              py: 1.5,\r\n              borderColor: '#4caf50',\r\n              color: '#4caf50',\r\n              '&:hover': {\r\n                backgroundColor: '#e8f5e9',\r\n                    borderColor: '#2e7d32'\r\n                  }\r\n            }}\r\n          >\r\n            View My Bookings\r\n          </Button>\r\n  \r\n          <Button\r\n            variant=\"contained\"\r\n            onClick={() => navigate('/courts')}\r\n            sx={{\r\n              px: 4,\r\n              py: 1.5,\r\n              backgroundColor: '#ff6f00',\r\n              '&:hover': {\r\n                    backgroundColor: '#e65100'\r\n                  }\r\n            }}\r\n          >\r\n            Book Another Court\r\n          </Button>\r\n            </>\r\n          )}\r\n        </Box>\r\n              </Card>\r\n      \r\n      {/* 分享對話框 */}\r\n      <Dialog \r\n        open={shareDialogOpen} \r\n        onClose={() => setShareDialogOpen(false)}\r\n        maxWidth=\"sm\"\r\n        fullWidth\r\n      >\r\n        <DialogTitle>\r\n          Share Confirmation\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <Box sx={{ mb: 3 }}>\r\n            <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\r\n              Select Friend or Search User:\r\n            </Typography>\r\n            \r\n            {/* 朋友列表下拉框 */}\r\n            <FormControl fullWidth size=\"small\" sx={{ mb: 2 }}>\r\n              <InputLabel>Select from Friends</InputLabel>\r\n              <Select\r\n                value=\"\"\r\n                onChange={(e) => selectUser(e.target.value)}\r\n                label=\"Select from Friends\"\r\n                onClick={fetchFriends}\r\n              >\r\n                {friends.map((friend) => (\r\n                  <MenuItem key={friend.id} value={friend.username}>\r\n                    {friend.username} {friend.name && `(${friend.name})`}\r\n                  </MenuItem>\r\n                ))}\r\n                {friends.length === 0 && (\r\n                  <MenuItem disabled>No friends found</MenuItem>\r\n                )}\r\n              </Select>\r\n            </FormControl>\r\n\r\n            {/* 搜索用戶 */}\r\n            <Box sx={{ display: 'flex', gap: 1, mb: 2 }}>\r\n              <TextField\r\n                fullWidth\r\n                value={searchQuery}\r\n                onChange={(e) => setSearchQuery(e.target.value)}\r\n                placeholder=\"Search by username\"\r\n                variant=\"outlined\"\r\n                size=\"small\"\r\n                onKeyPress={(e) => e.key === 'Enter' && searchUsers()}\r\n              />\r\n              <Button\r\n                variant=\"contained\"\r\n                onClick={searchUsers}\r\n                disabled={isSearching || !searchQuery.trim()}\r\n                sx={{ minWidth: '80px' }}\r\n              >\r\n                {isSearching ? '...' : 'Search'}\r\n              </Button>\r\n            </Box>\r\n\r\n            {/* 搜索結果 */}\r\n            {showSearchResults && (\r\n              <Box sx={{ mb: 2, maxHeight: 150, overflow: 'auto', border: '1px solid #e0e0e0', borderRadius: 1 }}>\r\n                {searchResults.map((user) => (\r\n                  <Box\r\n                    key={user.id}\r\n                    onClick={() => selectUser(user.username)}\r\n                    sx={{\r\n                      p: 1,\r\n                      cursor: 'pointer',\r\n                      '&:hover': { backgroundColor: '#f5f5f5' },\r\n                      borderBottom: '1px solid #f0f0f0'\r\n                    }}\r\n                  >\r\n                    <Typography variant=\"body2\" fontWeight=\"medium\">\r\n                      {user.username}\r\n                    </Typography>\r\n                    {user.name && (\r\n                      <Typography variant=\"body2\" color=\"text.secondary\">\r\n                        {user.name}\r\n                      </Typography>\r\n                    )}\r\n                  </Box>\r\n                ))}\r\n                {searchResults.length === 0 && (\r\n                  <Box sx={{ p: 1, textAlign: 'center' }}>\r\n                    <Typography variant=\"body2\" color=\"text.secondary\">\r\n                      No users found\r\n                    </Typography>\r\n                  </Box>\r\n                )}\r\n              </Box>\r\n            )}\r\n\r\n            {/* 選中的用戶 */}\r\n            {shareRecipient && (\r\n              <Box sx={{ mb: 2, p: 1, backgroundColor: '#e3f2fd', borderRadius: 1 }}>\r\n                <Typography variant=\"body2\" color=\"text.secondary\">\r\n                  Selected: <strong>{shareRecipient}</strong>\r\n                </Typography>\r\n              </Box>\r\n            )}\r\n          </Box>\r\n          \r\n          <Box>\r\n            <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\r\n              Message Preview:\r\n            </Typography>\r\n            <TextField\r\n              fullWidth\r\n              multiline\r\n              rows={8}\r\n              value={shareMessage}\r\n              onChange={(e) => setShareMessage(e.target.value)}\r\n              variant=\"outlined\"\r\n              sx={{\r\n                '& .MuiOutlinedInput-root': {\r\n                  backgroundColor: '#f5f5f5'\r\n                }\r\n              }}\r\n            />\r\n          </Box>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setShareDialogOpen(false)}>\r\n            Cancel\r\n          </Button>\r\n          <Button \r\n            onClick={handleSendShare}\r\n            variant=\"contained\"\r\n            disabled={isSharing || !shareRecipient.trim()}\r\n            sx={{\r\n              backgroundColor: '#2196f3',\r\n              '&:hover': {\r\n                backgroundColor: '#1976d2'\r\n              }\r\n            }}\r\n          >\r\n            {isSharing ? 'Sending...' : 'Send Message'}\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n      </Container>\r\n    );\r\n  };\r\n  \r\nconst SummaryRow = ({ label, value, bold = false, color, isLast = false }) => (\r\n  <Grid container spacing={1} sx={{ mb: isLast ? 0 : 1 }}>\r\n    <Grid item xs={6}>\r\n      <Typography variant=\"body2\" color=\"text.secondary\">\r\n        {label}\r\n      </Typography>\r\n    </Grid>\r\n    <Grid item xs={6} textAlign=\"right\">\r\n      <Typography\r\n        variant=\"body2\"\r\n        fontWeight={bold ? 'bold' : 'normal'}\r\n        sx={{ color: color || 'inherit' }}\r\n      >\r\n        {value}\r\n      </Typography>\r\n    </Grid>\r\n  </Grid>\r\n);\r\n\r\nexport default BookingConfirmationPage;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball-frontend/src/components/court/BookingConfirmationPage.jsx b/pickleball-frontend/src/components/court/BookingConfirmationPage.jsx
--- a/pickleball-frontend/src/components/court/BookingConfirmationPage.jsx	(revision 89327e12854b108d004ebb020d0592b1c618ecaf)
+++ b/pickleball-frontend/src/components/court/BookingConfirmationPage.jsx	(date 1754175589255)
@@ -53,6 +53,12 @@
   console.log('Booking object:', booking);
   console.log('Match details:', matchDetails);
   console.log('Payment type:', paymentType);
+  console.log('Voucher information:');
+  console.log('- voucherUsed:', booking?.voucherUsed);
+  console.log('- originalAmount:', booking?.originalAmount);
+  console.log('- discountAmount:', booking?.discountAmount);
+  console.log('- voucherCode:', booking?.voucherCode);
+  console.log('- totalAmount:', booking?.totalAmount);
 
   const formatDate = (dateString) => {
     console.log('formatDate called with:', dateString);
@@ -100,13 +106,15 @@
   const buyBallSet = isFriendlyMatch ? !!data?.buyBallSet : !!booking?.buyBallSet;
   const total = isFriendlyMatch
     ? (data?.totalPrice || data?.price || 0)
-    : (booking?.price !== undefined
-        ? booking.price
-        : (booking?.totalAmount !== undefined
-            ? booking.totalAmount
-            : (booking?.totalPrice !== undefined
-                ? booking.totalPrice
-                : 0)));
+    : (booking?.voucherUsed 
+        ? booking.totalAmount  // Use discounted amount when voucher is used
+        : (booking?.price !== undefined
+            ? booking.price
+            : (booking?.totalAmount !== undefined
+                ? booking.totalAmount
+                : (booking?.totalPrice !== undefined
+                    ? booking.totalPrice
+                    : 0))));
 
   useEffect(() => {
     if (booking && booking.type === 'class-session' && booking.sessions && booking.sessions.length > 0) {
@@ -172,6 +180,24 @@
 Payment Status: ✅ PAID
 
 Join me for a great game! 🏓`;
+    } else if (booking && booking.type === 'class-session' && booking.sessions) {
+      // Class session booking
+      const session = booking.sessions[0]; // 取第一個 session 作為代表
+      const firstSession = session;
+      
+      return `🎓 Class Session Confirmed!
+
+📅 Date: ${formatDate(firstSession?.startTime)}
+⏰ Time: ${formatTime(firstSession?.startTime)} - ${formatTime(firstSession?.endTime)}
+🏟️ Court: ${firstSession?.courtName || firstSession?.court?.name || 'Court'}
+📍 Location: ${firstSession?.venueName || firstSession?.venue?.name || 'Location'}
+👨‍🏫 Coach: ${firstSession?.coachName || firstSession?.coach?.name || 'Coach'}
+💰 Total: RM${total.toFixed(2)}
+
+${booking?.numPaddles > 0 ? `🏓 Paddles: ${booking.numPaddles} (RM5 each)\n` : ''}${booking?.buyBallSet ? '🏐 Ball Set: Yes (RM12)\n' : ''}
+Payment Status: ✅ ${booking?.paymentStatus || 'PAID'}
+
+Let's learn and play! 🏓`;
     } else {
       return `🏟️ Court Booking Confirmed!
 
@@ -308,6 +334,25 @@
                     </Typography>
                   );
                 })}
+                
+                {/* Equipment Options for Class Sessions */}
+                {(booking?.numPaddles > 0 || booking?.buyBallSet) && (
+                  <Box mt={2}>
+                    <Typography variant="subtitle2" fontWeight="bold" color="primary" mb={1}>
+                      Equipment Options:
+                    </Typography>
+                    {booking?.numPaddles > 0 && (
+                      <Typography variant="body2" color="text.secondary">
+                        🏓 Paddles: {booking.numPaddles} (RM5 each)
+                      </Typography>
+                    )}
+                    {booking?.buyBallSet && (
+                      <Typography variant="body2" color="text.secondary">
+                        🏐 Ball Set: Yes (RM12)
+                      </Typography>
+                    )}
+                  </Box>
+                )}
               </Box>
             ) : (
               <>
@@ -388,12 +433,38 @@
   
             <Card variant="outlined" sx={{ mb: 2 }}>
               <CardContent>
-                <SummaryRow
-                  label="Total Amount"
-                  value={`RM${Number(total).toFixed(2)}`}
-                  bold
-                  color="#2e7d32"
-                />
+                {booking?.voucherUsed ? (
+                  <>
+                    <SummaryRow
+                      label="Original Amount"
+                      value={`RM${Number(booking.originalAmount).toFixed(2)}`}
+                      color="#757575"
+                    />
+                    <SummaryRow
+                      label="Voucher Applied"
+                      value={booking.voucherCode}
+                      color="#ff9800"
+                    />
+                    <SummaryRow
+                      label="Discount Amount"
+                      value={`-RM${Number(booking.discountAmount).toFixed(2)}`}
+                      color="#4caf50"
+                    />
+                    <SummaryRow
+                      label="Final Amount"
+                      value={`RM${Number(total).toFixed(2)}`}
+                      bold
+                      color="#2e7d32"
+                    />
+                  </>
+                ) : (
+                  <SummaryRow
+                    label="Total Amount"
+                    value={`RM${Number(total).toFixed(2)}`}
+                    bold
+                    color="#2e7d32"
+                  />
+                )}
                 <SummaryRow
                   label="Payment Method"
                   value={isFriendlyMatch ? 'Wallet' : (booking?.paymentMethod === 'WALLET' ? 'Wallet' : 'Credit Card')}
@@ -436,8 +507,12 @@
                   color="#9c27b0"
                 />
                 <SummaryRow
-                  label="Current Balance"
-                  value={`${booking.currentPointBalance} points`}
+                  label="Tier Points"
+                  value={`${booking.currentTierPointBalance} points`}
+                />
+                <SummaryRow
+                  label="Reward Points"
+                  value={`${booking.currentRewardPointBalance} points`}
                   isLast
                 />
   
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/CoachController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.controller;\r\n\r\nimport com.pickleball_backend.pickleball.dto.CoachSlotDto;\r\nimport com.pickleball_backend.pickleball.dto.RecurringSessionRequestDto;\r\nimport com.pickleball_backend.pickleball.entity.*;\r\nimport com.pickleball_backend.pickleball.exception.*;\r\nimport com.pickleball_backend.pickleball.repository.*;\r\nimport com.pickleball_backend.pickleball.service.CoachCourtService;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.springframework.format.annotation.DateTimeFormat;\r\nimport org.springframework.http.HttpStatus;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.security.access.prepost.PreAuthorize;\r\nimport org.springframework.security.core.context.SecurityContextHolder;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\nimport java.time.LocalDateTime;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.Set;\r\nimport java.util.HashSet;\r\nimport java.util.HashMap;\r\nimport java.util.ArrayList;\r\nimport java.util.stream.Collectors;\r\nimport java.time.LocalDate;\r\nimport org.springframework.transaction.annotation.Transactional;\r\nimport java.time.OffsetDateTime;\r\nimport org.springframework.data.domain.PageRequest;\r\nimport org.springframework.data.domain.Pageable;\r\nimport org.springframework.data.domain.Page;\r\nimport com.pickleball_backend.pickleball.entity.Wallet;\r\nimport com.pickleball_backend.pickleball.entity.WalletTransaction;\r\n\r\n@RestController\r\n@RequestMapping(\"/api/coach\")\r\n@RequiredArgsConstructor\r\npublic class CoachController {\r\n\r\n    private final CoachCourtService coachCourtService;\r\n    private final UserRepository userRepository;\r\n    private final VenueRepository venueRepository;\r\n    private final CoachRepository coachRepository;\r\n    private final ClassSessionRepository sessionRepository;\r\n    private final CourtRepository courtRepository;\r\n    private final ClassRegistrationRepository registrationRepository;\r\n    private final PaymentRepository paymentRepository;\r\n    private final WalletRepository walletRepository;\r\n    private final WalletTransactionRepository walletTransactionRepository;\r\n    private final MemberRepository memberRepository;\r\n\r\n    // 獲取教練可用的球場\r\n    @GetMapping(\"/available-courts\")\r\n    @PreAuthorize(\"hasAuthority('ROLE_COACH')\")\r\n    public ResponseEntity<?> getAvailableCourts() {\r\n        try {\r\n            String username = SecurityContextHolder.getContext().getAuthentication().getName();\r\n            User coach = userRepository.findByUserAccount_Username(username)\r\n                    .orElseThrow(() -> new ResourceNotFoundException(\"Coach not found\"));\r\n\r\n            return ResponseEntity.ok(coachCourtService.getAvailableCourtsForCoach(coach.getId()));\r\n        } catch (ResourceNotFoundException e) {\r\n            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(e.getMessage());\r\n        } catch (Exception e) {\r\n            return ResponseEntity.internalServerError().body(\"Error retrieving courts\");\r\n        }\r\n    }\r\n\r\n    // 建立教練可用時段（需包含 experienceYear）\r\n    @PostMapping(\"/slots\")\r\n    @PreAuthorize(\"hasAuthority('ROLE_COACH')\")\r\n    public ResponseEntity<?> createCoachSlot(@RequestBody CoachSlotDto slotDto) {\r\n        try {\r\n            String username = SecurityContextHolder.getContext().getAuthentication().getName();\r\n            User coach = userRepository.findByUserAccount_Username(username)\r\n                    .orElseThrow(() -> new ResourceNotFoundException(\"Coach not found\"));\r\n\r\n            ClassSession session = coachCourtService.createCoachSlot(coach.getId(), slotDto);\r\n            return ResponseEntity.status(HttpStatus.CREATED).body(session);\r\n        } catch (ConflictException e) {\r\n            return ResponseEntity.status(HttpStatus.CONFLICT).body(Map.of(\"error\", e.getMessage()));\r\n        } catch (ResourceNotFoundException e) {\r\n            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(e.getMessage());\r\n        } catch (Exception e) {\r\n            return ResponseEntity.internalServerError().body(\"Error creating slot\");\r\n        }\r\n    }\r\n\r\n    // 更新教練可用時段（需包含 experienceYear）\r\n    @PutMapping(\"/slots/{slotId}\")\r\n    @PreAuthorize(\"hasAuthority('ROLE_COACH')\")\r\n    public ResponseEntity<?> updateCoachSlot(\r\n            @PathVariable Integer slotId,\r\n            @RequestBody CoachSlotDto slotDto) {\r\n        try {\r\n            String username = SecurityContextHolder.getContext().getAuthentication().getName();\r\n            User coach = userRepository.findByUserAccount_Username(username)\r\n                    .orElseThrow(() -> new ResourceNotFoundException(\"Coach not found\"));\r\n\r\n            coachCourtService.updateCoachSlot(coach.getId(), slotId, slotDto);\r\n            return ResponseEntity.ok(\"Slot updated successfully\");\r\n        } catch (ResourceNotFoundException e) {\r\n            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(e.getMessage());\r\n        } catch (ValidationException | ConflictException e) {\r\n            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(e.getMessage());\r\n        } catch (Exception e) {\r\n            return ResponseEntity.internalServerError().body(\"Error updating slot\");\r\n        }\r\n    }\r\n\r\n    // 刪除教練時段\r\n    @DeleteMapping(\"/slots/{slotId}\")\r\n    @PreAuthorize(\"hasAuthority('ROLE_COACH')\")\r\n    public ResponseEntity<?> removeCoachSlot(\r\n            @PathVariable Integer slotId,\r\n            @RequestParam(required = false, defaultValue = \"false\") boolean force) {\r\n        try {\r\n            String username = SecurityContextHolder.getContext().getAuthentication().getName();\r\n            User coach = userRepository.findByUserAccount_Username(username)\r\n                    .orElseThrow(() -> new ResourceNotFoundException(\"Coach not found\"));\r\n\r\n            coachCourtService.removeCoachSlot(coach.getId(), slotId, force);\r\n            return ResponseEntity.ok(\"Slot cancelled successfully\");\r\n        } catch (ResourceNotFoundException e) {\r\n            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(e.getMessage());\r\n        } catch (ConflictException e) {\r\n            return ResponseEntity.status(HttpStatus.CONFLICT).body(e.getMessage());\r\n        } catch (Exception e) {\r\n            return ResponseEntity.internalServerError().body(\"Error removing slot\");\r\n        }\r\n    }\r\n\r\n    // 獲取教練排程\r\n    @GetMapping(\"/schedule\")\r\n    @PreAuthorize(\"hasAuthority('ROLE_COACH')\")\r\n    public ResponseEntity<?> getCoachSchedule(\r\n            @RequestParam(required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime start,\r\n            @RequestParam(required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime end) {\r\n        try {\r\n            String username = SecurityContextHolder.getContext().getAuthentication().getName();\r\n            User coach = userRepository.findByUserAccount_Username(username)\r\n                    .orElseThrow(() -> new ResourceNotFoundException(\"Coach not found\"));\r\n\r\n            // 新增防呆\r\n            if (coach == null) {\r\n                return ResponseEntity.status(HttpStatus.NOT_FOUND).body(\"Coach not found for user: \" + username);\r\n            }\r\n\r\n            LocalDateTime from = start != null ? start.toLocalDateTime() : LocalDateTime.now();\r\n            LocalDateTime to = end != null ? end.toLocalDateTime() : from.plusMonths(1);\r\n\r\n            // 獲取課程數據\r\n            List<ClassSession> sessions = coachCourtService.findScheduleByCoachIdAndPeriodWithVenue(\r\n                    coach.getId(), from, to\r\n            );\r\n\r\n            // 轉換為 DTO 確保場地信息正確傳遞\r\n            List<Map<String, Object>> sessionDtos = sessions.stream().map(session -> {\r\n                Map<String, Object> dto = new HashMap<>();\r\n                dto.put(\"id\", session.getId());\r\n                dto.put(\"title\", session.getTitle());\r\n                dto.put(\"startTime\", session.getStartTime());\r\n                dto.put(\"endTime\", session.getEndTime());\r\n                dto.put(\"status\", session.getStatus());\r\n                dto.put(\"maxParticipants\", session.getMaxParticipants());\r\n                dto.put(\"currentParticipants\", session.getCurrentParticipants());\r\n                dto.put(\"description\", session.getDescription());\r\n                dto.put(\"price\", session.getPrice());\r\n                dto.put(\"slotType\", session.getSlotType());\r\n                dto.put(\"recurringGroupId\", session.getRecurringGroupId());\r\n                dto.put(\"isRecurring\", session.getIsRecurring());\r\n                dto.put(\"recurrencePattern\", session.getRecurrencePattern());\r\n                dto.put(\"recurrenceDays\", session.getRecurrenceDays());\r\n                dto.put(\"recurrenceEndDate\", session.getRecurrenceEndDate());\r\n\r\n                // 場地信息\r\n                if (session.getCourt() != null) {\r\n                    dto.put(\"courtId\", session.getCourt().getId());\r\n                    dto.put(\"courtName\", session.getCourt().getName());\r\n                    dto.put(\"court\", session.getCourt());\r\n                }\r\n\r\n                // 場館信息 - 優先使用直接關聯的 venue，如果沒有則使用 court 的 venue\r\n                Venue venue = session.getVenue();\r\n                if (venue == null && session.getCourt() != null) {\r\n                    venue = session.getCourt().getVenue();\r\n                }\r\n                if (venue != null) {\r\n                    dto.put(\"venueId\", venue.getId());\r\n                    dto.put(\"venueName\", venue.getName());\r\n                    dto.put(\"venueState\", venue.getState());\r\n                    dto.put(\"venue\", venue);\r\n                }\r\n\r\n                return dto;\r\n            }).collect(Collectors.toList());\r\n\r\n            return ResponseEntity.ok(sessionDtos);\r\n        } catch (ResourceNotFoundException e) {\r\n            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(e.getMessage());\r\n        } catch (Exception e) {\r\n            return ResponseEntity.internalServerError().body(\"Error retrieving schedule: \" + e.getMessage());\r\n        }\r\n    }\r\n\r\n    // 新增：獲取教練排程（包含完整註冊信息）\r\n    @GetMapping(\"/schedule-with-registrations\")\r\n    @PreAuthorize(\"hasAuthority('ROLE_COACH')\")\r\n    public ResponseEntity<?> getCoachScheduleWithRegistrations(\r\n            @RequestParam(required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime start,\r\n            @RequestParam(required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime end) {\r\n        try {\r\n            String username = SecurityContextHolder.getContext().getAuthentication().getName();\r\n            User coach = userRepository.findByUserAccount_Username(username)\r\n                    .orElseThrow(() -> new ResourceNotFoundException(\"Coach not found\"));\r\n\r\n            LocalDateTime from = start != null ? start.toLocalDateTime() : LocalDateTime.now();\r\n            LocalDateTime to = end != null ? end.toLocalDateTime() : from.plusMonths(1);\r\n\r\n            // 獲取課程並手動加載註冊信息\r\n            List<ClassSession> sessions = sessionRepository.findScheduleByCoachIdAndPeriodWithFullRegistrations(\r\n                    coach.getId(), from, to\r\n            );\r\n\r\n            return ResponseEntity.ok(sessions);\r\n        } catch (ResourceNotFoundException e) {\r\n            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(e.getMessage());\r\n        } catch (Exception e) {\r\n            return ResponseEntity.internalServerError().body(\"Error retrieving schedule: \" + e.getMessage());\r\n        }\r\n    }\r\n\r\n    // 新增：測試端點來檢查課程數據\r\n    @GetMapping(\"/debug/sessions\")\r\n    @PreAuthorize(\"hasAuthority('ROLE_COACH')\")\r\n    public ResponseEntity<?> getDebugSessions() {\r\n        try {\r\n            String username = SecurityContextHolder.getContext().getAuthentication().getName();\r\n            User coach = userRepository.findByUserAccount_Username(username)\r\n                    .orElseThrow(() -> new ResourceNotFoundException(\"Coach not found\"));\r\n\r\n            // 獲取所有課程\r\n            List<ClassSession> allSessions = sessionRepository.findAll();\r\n            \r\n            // 獲取該教練的課程\r\n            List<ClassSession> coachSessions = sessionRepository.findScheduleByCoachId(coach.getId());\r\n            \r\n            Map<String, Object> debugInfo = new HashMap<>();\r\n            debugInfo.put(\"totalSessions\", allSessions.size());\r\n            debugInfo.put(\"coachSessions\", coachSessions.size());\r\n            debugInfo.put(\"coachId\", coach.getId());\r\n            debugInfo.put(\"username\", username);\r\n            debugInfo.put(\"coachSessionsList\", coachSessions);\r\n            \r\n            return ResponseEntity.ok(debugInfo);\r\n        } catch (Exception e) {\r\n            return ResponseEntity.internalServerError().body(\"Error: \" + e.getMessage());\r\n        }\r\n    }\r\n\r\n    // 新增：調試端點來檢查課程的原始數據\r\n    @GetMapping(\"/debug/sessions-raw\")\r\n    @PreAuthorize(\"hasAuthority('ROLE_COACH')\")\r\n    public ResponseEntity<?> getDebugSessionsRaw() {\r\n        try {\r\n            String username = SecurityContextHolder.getContext().getAuthentication().getName();\r\n            User coach = userRepository.findByUserAccount_Username(username)\r\n                    .orElseThrow(() -> new ResourceNotFoundException(\"Coach not found\"));\r\n\r\n            // 獲取原始數據\r\n            List<ClassSession> sessions = sessionRepository.findScheduleByCoachIdAndPeriodWithVenue(\r\n                    coach.getId(), LocalDateTime.now().minusDays(30), LocalDateTime.now().plusDays(30)\r\n            );\r\n\r\n            // 手動構建詳細的調試信息\r\n            List<Map<String, Object>> debugInfo = sessions.stream().map(session -> {\r\n                Map<String, Object> info = new HashMap<>();\r\n                info.put(\"sessionId\", session.getId());\r\n                info.put(\"title\", session.getTitle());\r\n                info.put(\"startTime\", session.getStartTime());\r\n\r\n                // Court 信息\r\n                if (session.getCourt() != null) {\r\n                    Map<String, Object> courtInfo = new HashMap<>();\r\n                    courtInfo.put(\"courtId\", session.getCourt().getId());\r\n                    courtInfo.put(\"courtName\", session.getCourt().getName());\r\n                    courtInfo.put(\"courtLocation\", session.getCourt().getLocation());\r\n\r\n                    // Venue 信息（通過 court）\r\n                    if (session.getCourt().getVenue() != null) {\r\n                        Map<String, Object> venueInfo = new HashMap<>();\r\n                        venueInfo.put(\"venueId\", session.getCourt().getVenue().getId());\r\n                        venueInfo.put(\"venueName\", session.getCourt().getVenue().getName());\r\n                        venueInfo.put(\"venueState\", session.getCourt().getVenue().getState());\r\n                        venueInfo.put(\"venueLocation\", session.getCourt().getVenue().getLocation());\r\n                        courtInfo.put(\"venue\", venueInfo);\r\n                    } else {\r\n                        courtInfo.put(\"venue\", \"NULL\");\r\n                    }\r\n\r\n                    info.put(\"court\", courtInfo);\r\n                } else {\r\n                    info.put(\"court\", \"NULL\");\r\n                }\r\n\r\n                // 直接關聯的 Venue 信息\r\n                if (session.getVenue() != null) {\r\n                    Map<String, Object> directVenueInfo = new HashMap<>();\r\n                    directVenueInfo.put(\"venueId\", session.getVenue().getId());\r\n                    directVenueInfo.put(\"venueName\", session.getVenue().getName());\r\n                    directVenueInfo.put(\"venueState\", session.getVenue().getState());\r\n                    directVenueInfo.put(\"venueLocation\", session.getVenue().getLocation());\r\n                    info.put(\"directVenue\", directVenueInfo);\r\n                } else {\r\n                    info.put(\"directVenue\", \"NULL\");\r\n                }\r\n\r\n                return info;\r\n            }).collect(Collectors.toList());\r\n\r\n            return ResponseEntity.ok(debugInfo);\r\n        } catch (ResourceNotFoundException e) {\r\n            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(e.getMessage());\r\n        } catch (Exception e) {\r\n            return ResponseEntity.internalServerError().body(\"Error retrieving debug info: \" + e.getMessage());\r\n        }\r\n    }\r\n\r\n    // 新增：檢查特定 court 的詳細信息\r\n    @GetMapping(\"/debug/court/{courtId}\")\r\n    @PreAuthorize(\"hasAuthority('ROLE_COACH')\")\r\n    public ResponseEntity<?> getDebugCourt(@PathVariable Integer courtId) {\r\n        try {\r\n            // 查找 court\r\n            Court court = courtRepository.findById(courtId).orElse(null);\r\n\r\n            Map<String, Object> debugInfo = new HashMap<>();\r\n            debugInfo.put(\"courtId\", courtId);\r\n\r\n            if (court != null) {\r\n                debugInfo.put(\"courtExists\", true);\r\n                debugInfo.put(\"courtName\", court.getName());\r\n                debugInfo.put(\"courtLocation\", court.getLocation());\r\n                debugInfo.put(\"courtStatus\", court.getStatus());\r\n\r\n                // 檢查 venue 信息\r\n                Venue venue = court.getVenue();\r\n                if (venue != null) {\r\n                    debugInfo.put(\"venueExists\", true);\r\n                    debugInfo.put(\"venueId\", venue.getId());\r\n                    debugInfo.put(\"venueName\", venue.getName());\r\n                    debugInfo.put(\"venueState\", venue.getState());\r\n                    debugInfo.put(\"venueLocation\", venue.getLocation());\r\n                } else {\r\n                    debugInfo.put(\"venueExists\", false);\r\n                }\r\n            } else {\r\n                debugInfo.put(\"courtExists\", false);\r\n            }\r\n\r\n            return ResponseEntity.ok(debugInfo);\r\n        } catch (Exception e) {\r\n            return ResponseEntity.internalServerError().body(\"Error: \" + e.getMessage());\r\n        }\r\n    }\r\n\r\n    // Get all venues for the current coach\r\n    @GetMapping(\"/venues\")\r\n    @PreAuthorize(\"hasAuthority('ROLE_COACH')\")\r\n    public ResponseEntity<?> getCoachVenues() {\r\n        try {\r\n            String username = SecurityContextHolder.getContext().getAuthentication().getName();\r\n            User coachUser = userRepository.findByUserAccount_Username(username)\r\n                    .orElseThrow(() -> new ResourceNotFoundException(\"Coach not found\"));\r\n            Integer coachId = coachUser.getId();\r\n            Coach coach = coachRepository.findById(coachId).orElseThrow(() -> new ResourceNotFoundException(\"Coach not found\"));\r\n            Set<Venue> venues = coach.getVenues();\r\n            return ResponseEntity.ok(venues != null ? venues : new HashSet<>());\r\n        } catch (ResourceNotFoundException e) {\r\n            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(e.getMessage());\r\n        } catch (Exception e) {\r\n            return ResponseEntity.internalServerError().body(\"Error retrieving venues: \" + e.getMessage());\r\n        }\r\n    }\r\n\r\n    // Get public available coaching sessions for all users\r\n    @GetMapping(\"/public/sessions\")\r\n    public ResponseEntity<?> getPublicCoachingSessions(\r\n            @RequestParam(required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) LocalDateTime start,\r\n            @RequestParam(required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) LocalDateTime end) {\r\n        try {\r\n            LocalDateTime from = start != null ? start : LocalDateTime.now();\r\n            LocalDateTime to = end != null ? end : from.plusMonths(1);\r\n\r\n            // Get all available coaching sessions\r\n            List<ClassSession> allSessions = sessionRepository.findScheduleByCoachIdAndPeriodWithVenue(null, from, to);\r\n            List<ClassSession> availableSessions = allSessions.stream()\r\n                    .filter(session -> \"AVAILABLE\".equals(session.getStatus()))\r\n                    .collect(Collectors.toList());\r\n\r\n            return ResponseEntity.ok(availableSessions);\r\n        } catch (Exception e) {\r\n            return ResponseEntity.internalServerError().body(\"Error retrieving public sessions: \" + e.getMessage());\r\n        }\r\n    }\r\n\r\n    // Debug endpoint to check coach status\r\n    @GetMapping(\"/debug/status\")\r\n    @PreAuthorize(\"hasAuthority('ROLE_COACH')\")\r\n    public ResponseEntity<?> getCoachDebugStatus() {\r\n        try {\r\n            String username = SecurityContextHolder.getContext().getAuthentication().getName();\r\n            User coachUser = userRepository.findByUserAccount_Username(username)\r\n                    .orElseThrow(() -> new ResourceNotFoundException(\"User not found\"));\r\n            \r\n            Coach coach = coachRepository.findById(coachUser.getId()).orElse(null);\r\n            \r\n            Map<String, Object> status = new HashMap<>();\r\n            status.put(\"username\", username);\r\n            status.put(\"userId\", coachUser.getId());\r\n            status.put(\"userType\", coachUser.getUserType());\r\n            status.put(\"hasCoachEntity\", coach != null);\r\n            status.put(\"coachId\", coach != null ? coach.getId() : null);\r\n            status.put(\"venues\", coach != null ? coach.getVenues() : null);\r\n            \r\n            // 如果沒有 Coach 實體，創建一個\r\n            if (coach == null && \"COACH\".equalsIgnoreCase(coachUser.getUserType())) {\r\n                Coach newCoach = new Coach();\r\n                newCoach.setUser(coachUser);\r\n                newCoach.setExperienceYear(1); // 默認經驗年數\r\n                coachRepository.save(newCoach);\r\n                status.put(\"coachCreated\", true);\r\n                status.put(\"newCoachId\", newCoach.getId());\r\n            }\r\n            \r\n            return ResponseEntity.ok(status);\r\n        } catch (Exception e) {\r\n            return ResponseEntity.internalServerError().body(\"Error checking coach status: \" + e.getMessage());\r\n        }\r\n    }\r\n\r\n    // 獲取所有場地（用於下拉選單）\r\n    @GetMapping(\"/all-venues\")\r\n    @PreAuthorize(\"hasAuthority('ROLE_COACH')\")\r\n    public ResponseEntity<?> getAllVenues() {\r\n        try {\r\n            List<Venue> venues = venueRepository.findAllVenues();\r\n            \r\n            // 如果沒有場地，創建一些測試場地\r\n            if (venues.isEmpty()) {\r\n                Venue venue1 = new Venue();\r\n                venue1.setName(\"Pickleball Center\");\r\n                venue1.setLocation(\"123 Main Street, New York, NY 10001\");\r\n                venue1.setState(\"NY\");\r\n                venue1.setDescription(\"Professional pickleball facility with multiple courts\");\r\n                venueRepository.save(venue1);\r\n                \r\n                Venue venue2 = new Venue();\r\n                venue2.setName(\"Sports Complex\");\r\n                venue2.setLocation(\"456 Oak Avenue, Los Angeles, CA 90210\");\r\n                venue2.setState(\"CA\");\r\n                venue2.setDescription(\"Multi-sport complex with dedicated pickleball courts\");\r\n                venueRepository.save(venue2);\r\n                \r\n                venues = venueRepository.findAllVenues();\r\n            }\r\n            \r\n            return ResponseEntity.ok(venues);\r\n        } catch (Exception e) {\r\n            return ResponseEntity.internalServerError().body(\"Error retrieving venues: \" + e.getMessage());\r\n        }\r\n    }\r\n\r\n    // 根據場地ID獲取球場\r\n    @GetMapping(\"/courts-by-venue/{venueId}\")\r\n    @PreAuthorize(\"hasAuthority('ROLE_COACH')\")\r\n    public ResponseEntity<?> getCourtsByVenue(@PathVariable Integer venueId) {\r\n        try {\r\n            List<Court> courts = courtRepository.findByVenueId(venueId);\r\n            return ResponseEntity.ok(courts);\r\n        } catch (Exception e) {\r\n            return ResponseEntity.internalServerError().body(\"Error retrieving courts: \" + e.getMessage());\r\n        }\r\n    }\r\n\r\n    // 獲取所有可用的球場\r\n    @GetMapping(\"/all-courts\")\r\n    @PreAuthorize(\"hasAuthority('ROLE_COACH')\")\r\n    public ResponseEntity<?> getAllCourts() {\r\n        try {\r\n            List<Court> courts = courtRepository.findAvailableCourts();\r\n            \r\n            // 如果沒有球場，創建一些測試球場\r\n            if (courts.isEmpty()) {\r\n                List<Venue> venues = venueRepository.findAllVenues();\r\n                if (!venues.isEmpty()) {\r\n                    Venue venue1 = venues.get(0);\r\n                    \r\n                    Court court1 = new Court();\r\n                    court1.setName(\"Court 1\");\r\n                    court1.setLocation(\"Indoor\");\r\n                    court1.setStatus(\"AVAILABLE\");\r\n                    court1.setOpeningTime(\"08:00\");\r\n                    court1.setClosingTime(\"22:00\");\r\n                    court1.setOperatingDays(\"Monday,Tuesday,Wednesday,Thursday,Friday,Saturday,Sunday\");\r\n                    court1.setPeakHourlyPrice(25.0);\r\n                    court1.setOffPeakHourlyPrice(20.0);\r\n                    court1.setDailyPrice(150.0);\r\n                    court1.setPeakStartTime(\"18:00\");\r\n                    court1.setPeakEndTime(\"21:00\");\r\n                    court1.setVenue(venue1);\r\n                    courtRepository.save(court1);\r\n                    \r\n                    Court court2 = new Court();\r\n                    court2.setName(\"Court 2\");\r\n                    court2.setLocation(\"Outdoor\");\r\n                    court2.setStatus(\"AVAILABLE\");\r\n                    court2.setOpeningTime(\"06:00\");\r\n                    court2.setClosingTime(\"22:00\");\r\n                    court2.setOperatingDays(\"Monday,Tuesday,Wednesday,Thursday,Friday,Saturday,Sunday\");\r\n                    court2.setPeakHourlyPrice(20.0);\r\n                    court2.setOffPeakHourlyPrice(15.0);\r\n                    court2.setDailyPrice(120.0);\r\n                    court2.setPeakStartTime(\"18:00\");\r\n                    court2.setPeakEndTime(\"21:00\");\r\n                    court2.setVenue(venue1);\r\n                    courtRepository.save(court2);\r\n                    \r\n                    if (venues.size() > 1) {\r\n                        Venue venue2 = venues.get(1);\r\n                        \r\n                        Court court3 = new Court();\r\n                        court3.setName(\"Premium Court\");\r\n                        court3.setLocation(\"Indoor\");\r\n                        court3.setStatus(\"AVAILABLE\");\r\n                        court3.setOpeningTime(\"07:00\");\r\n                        court3.setClosingTime(\"23:00\");\r\n                        court3.setOperatingDays(\"Monday,Tuesday,Wednesday,Thursday,Friday,Saturday,Sunday\");\r\n                        court3.setPeakHourlyPrice(30.0);\r\n                        court3.setOffPeakHourlyPrice(25.0);\r\n                        court3.setDailyPrice(180.0);\r\n                        court3.setPeakStartTime(\"18:00\");\r\n                        court3.setPeakEndTime(\"21:00\");\r\n                        court3.setVenue(venue2);\r\n                        courtRepository.save(court3);\r\n                    }\r\n                    \r\n                    courts = courtRepository.findAvailableCourts();\r\n                }\r\n            }\r\n            \r\n            return ResponseEntity.ok(courts);\r\n        } catch (Exception e) {\r\n            return ResponseEntity.internalServerError().body(\"Error retrieving courts: \" + e.getMessage());\r\n        }\r\n    }\r\n\r\n    // 獲取時段信息\r\n    @GetMapping(\"/time-slots\")\r\n    @PreAuthorize(\"hasAuthority('ROLE_COACH')\")\r\n    public ResponseEntity<?> getTimeSlots() {\r\n        try {\r\n            // 生成可用的時段（每小時一個時段，從早上8點到晚上10點）\r\n            List<Map<String, Object>> timeSlots = new ArrayList<>();\r\n            for (int hour = 8; hour <= 22; hour++) {\r\n                Map<String, Object> slot = new HashMap<>();\r\n                slot.put(\"startTime\", String.format(\"%02d:00\", hour));\r\n                slot.put(\"endTime\", String.format(\"%02d:00\", hour + 1));\r\n                slot.put(\"displayTime\", String.format(\"%02d:00 - %02d:00\", hour, hour + 1));\r\n                timeSlots.add(slot);\r\n            }\r\n            return ResponseEntity.ok(timeSlots);\r\n        } catch (Exception e) {\r\n            return ResponseEntity.internalServerError().body(\"Error generating time slots: \" + e.getMessage());\r\n        }\r\n    }\r\n\r\n    @PostMapping(\"/recurring-sessions\")\r\n    @PreAuthorize(\"hasAuthority('ROLE_COACH')\")\r\n    public ResponseEntity<?> createRecurringClass(@RequestBody RecurringSessionRequestDto dto) {\r\n        try {\r\n            String username = SecurityContextHolder.getContext().getAuthentication().getName();\r\n            User coach = userRepository.findByUserAccount_Username(username)\r\n                    .orElseThrow(() -> new ResourceNotFoundException(\"Coach not found\"));\r\n            coachCourtService.createRecurringClass(coach.getId(), dto);\r\n            return ResponseEntity.ok(\"Recurring class created\");\r\n        } catch (Exception e) {\r\n            return ResponseEntity.internalServerError().body(\"Error: \" + e.getMessage());\r\n        }\r\n    }\r\n\r\n    @GetMapping(\"/available-times\")\r\n    @PreAuthorize(\"hasAuthority('ROLE_COACH')\")\r\n    public ResponseEntity<?> getAvailableTimes(\r\n        @RequestParam Integer courtId,\r\n        @RequestParam String date // e.g. \"2025-08-01\"\r\n    ) {\r\n        LocalDate localDate = LocalDate.parse(date);\r\n        LocalDateTime startOfDay = localDate.atStartOfDay();\r\n        LocalDateTime endOfDay = localDate.atTime(23, 59, 59);\r\n        List<ClassSession> sessions = sessionRepository.findByCourtIdAndStartTimeBetween(\r\n            courtId, startOfDay, endOfDay\r\n        );\r\n        List<Map<String, String>> busySlots = sessions.stream().map(s -> Map.of(\r\n            \"start\", s.getStartTime().toString(),\r\n            \"end\", s.getEndTime().toString()\r\n        )).collect(Collectors.toList());\r\n        return ResponseEntity.ok(busySlots);\r\n    }\r\n\r\n    @GetMapping(\"/students\")\r\n    @PreAuthorize(\"hasAuthority('ROLE_COACH')\")\r\n    public ResponseEntity<?> getAllStudentsForCoach() {\r\n        String username = SecurityContextHolder.getContext().getAuthentication().getName();\r\n        User coach = userRepository.findByUserAccount_Username(username)\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"Coach not found\"));\r\n        List<Object[]> raw = coachCourtService.getAllStudentsForCoach(coach.getId());\r\n        List<Map<String, Object>> students = raw.stream().map(arr -> {\r\n            Map<String, Object> map = new HashMap<>();\r\n            map.put(\"id\", arr[0]);\r\n            map.put(\"name\", arr[1]);\r\n            map.put(\"email\", arr[2]);\r\n            map.put(\"sessionCount\", arr[3]);\r\n            return map;\r\n        }).toList();\r\n        return ResponseEntity.ok(students);\r\n    }\r\n\r\n    @GetMapping(\"/class-sessions/{sessionId}/students\")\r\n    @PreAuthorize(\"hasAuthority('ROLE_COACH')\")\r\n    public ResponseEntity<?> getStudentsForSession(@PathVariable Integer sessionId) {\r\n        List<ClassRegistration> regs = sessionRepository.findById(sessionId)\r\n            .orElseThrow(() -> new ResourceNotFoundException(\"Session not found\")).getRegistrations();\r\n        List<Map<String, Object>> students = regs.stream().map(r -> {\r\n            Map<String, Object> map = new HashMap<>();\r\n            map.put(\"id\", r.getMember().getId());\r\n            map.put(\"name\", r.getMember().getUser().getName());\r\n            map.put(\"email\", r.getMember().getUser().getEmail());\r\n            map.put(\"attendanceStatus\", r.getAttendanceStatus());\r\n            map.put(\"registrationId\", r.getId());\r\n            return map;\r\n        }).toList();\r\n        return ResponseEntity.ok(students);\r\n    }\r\n\r\n    @PutMapping(\"/class-registrations/{registrationId}/attendance\")\r\n    @PreAuthorize(\"hasAuthority('ROLE_COACH')\")\r\n    public ResponseEntity<?> updateAttendance(\r\n        @PathVariable Integer registrationId,\r\n        @RequestBody Map<String, String> body\r\n    ) {\r\n        String status = body.get(\"attendanceStatus\");\r\n        ClassRegistration reg = registrationRepository.findById(registrationId)\r\n            .orElseThrow(() -> new ResourceNotFoundException(\"Registration not found\"));\r\n        reg.setAttendanceStatus(status);\r\n        registrationRepository.save(reg);\r\n        return ResponseEntity.ok(\"Attendance updated\");\r\n    }\r\n\r\n    // 新增：保存出席記錄和反饋\r\n    @PostMapping(\"/session/{sessionId}/attendance\")\r\n    @PreAuthorize(\"hasAuthority('ROLE_COACH')\")\r\n    public ResponseEntity<?> saveAttendanceAndFeedback(\r\n            @PathVariable Integer sessionId,\r\n            @RequestBody Map<String, Object> requestBody) {\r\n        try {\r\n            String username = SecurityContextHolder.getContext().getAuthentication().getName();\r\n            User coach = userRepository.findByUserAccount_Username(username)\r\n                    .orElseThrow(() -> new ResourceNotFoundException(\"Coach not found\"));\r\n\r\n            // 驗證課程是否存在且屬於該教練\r\n            ClassSession session = sessionRepository.findById(sessionId)\r\n                    .orElseThrow(() -> new ResourceNotFoundException(\"Session not found\"));\r\n\r\n            if (!session.getCoach().getId().equals(coach.getId())) {\r\n                return ResponseEntity.status(HttpStatus.FORBIDDEN).body(\"You can only record attendance for your own sessions\");\r\n            }\r\n\r\n            @SuppressWarnings(\"unchecked\")\r\n            Map<String, Boolean> attendance = (Map<String, Boolean>) requestBody.get(\"attendance\");\r\n            @SuppressWarnings(\"unchecked\")\r\n            Map<String, String> feedbacks = (Map<String, String>) requestBody.get(\"feedbacks\");\r\n\r\n            // 保存出席記錄和反饋\r\n            List<ClassRegistration> updatedRegistrations = new ArrayList<>();\r\n\r\n            for (Map.Entry<String, Boolean> entry : attendance.entrySet()) {\r\n                String memberId = entry.getKey();\r\n                Boolean isPresent = entry.getValue();\r\n                String feedback = feedbacks.getOrDefault(memberId, \"\");\r\n\r\n                // 查找對應的註冊記錄\r\n                List<ClassRegistration> registrations = registrationRepository.findByClassSessionId(sessionId);\r\n                ClassRegistration registration = registrations.stream()\r\n                        .filter(r -> r.getMember().getId().toString().equals(memberId))\r\n                        .findFirst()\r\n                        .orElse(null);\r\n\r\n                if (registration != null) {\r\n                    // 更新出席狀態\r\n                    registration.setAttendanceStatus(isPresent ? \"PRESENT\" : \"ABSENT\");\r\n                    registration.setCoachComment(feedback); // 使用 coachComment 字段保存反饋\r\n\r\n                    updatedRegistrations.add(registrationRepository.save(registration));\r\n                }\r\n            }\r\n\r\n            // 更新課程狀態為已完成（如果所有學生都已記錄出席）\r\n            if (!updatedRegistrations.isEmpty()) {\r\n                session.setStatus(\"COMPLETED\");\r\n                sessionRepository.save(session);\r\n            }\r\n\r\n            Map<String, Object> response = new HashMap<>();\r\n            response.put(\"message\", \"Attendance and feedback saved successfully\");\r\n            response.put(\"updatedRegistrations\", updatedRegistrations.size());\r\n            response.put(\"sessionId\", sessionId);\r\n\r\n            return ResponseEntity.ok(response);\r\n        } catch (ResourceNotFoundException e) {\r\n            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(e.getMessage());\r\n        } catch (Exception e) {\r\n            return ResponseEntity.internalServerError().body(\"Error saving attendance: \" + e.getMessage());\r\n        }\r\n    }\r\n\r\n    // 新增：獲取學生的出席記錄和反饋\r\n    @GetMapping(\"/student/{memberId}/attendance-history\")\r\n    @PreAuthorize(\"hasAuthority('ROLE_COACH')\")\r\n    public ResponseEntity<?> getStudentAttendanceHistory(@PathVariable Integer memberId) {\r\n        try {\r\n            String username = SecurityContextHolder.getContext().getAuthentication().getName();\r\n            User coach = userRepository.findByUserAccount_Username(username)\r\n                    .orElseThrow(() -> new ResourceNotFoundException(\"Coach not found\"));\r\n\r\n            // 獲取該學生的所有註冊記錄（只限於該教練的課程）\r\n            List<ClassRegistration> registrations = registrationRepository.findByMemberUserId(memberId);\r\n\r\n            // 過濾出該教練的課程\r\n            List<Map<String, Object>> attendanceHistory = registrations.stream()\r\n                    .filter(r -> r.getClassSession().getCoach().getId().equals(coach.getId()))\r\n                    .map(r -> {\r\n                        Map<String, Object> record = new HashMap<>();\r\n                        record.put(\"sessionId\", r.getClassSession().getId());\r\n                        record.put(\"sessionTitle\", r.getClassSession().getTitle());\r\n                        record.put(\"sessionDate\", r.getClassSession().getStartTime());\r\n                        record.put(\"attendanceStatus\", r.getAttendanceStatus());\r\n                        record.put(\"coachComment\", r.getCoachComment());\r\n                        record.put(\"rating\", r.getRating());\r\n                        record.put(\"registrationDate\", r.getRegistrationDate());\r\n                        return record;\r\n                    })\r\n                    .collect(Collectors.toList());\r\n\r\n            Map<String, Object> response = new HashMap<>();\r\n            response.put(\"memberId\", memberId);\r\n            response.put(\"attendanceHistory\", attendanceHistory);\r\n            response.put(\"totalSessions\", attendanceHistory.size());\r\n            response.put(\"presentCount\", attendanceHistory.stream()\r\n                    .filter(r -> \"PRESENT\".equals(r.get(\"attendanceStatus\")))\r\n                    .count());\r\n            response.put(\"absentCount\", attendanceHistory.stream()\r\n                    .filter(r -> \"ABSENT\".equals(r.get(\"attendanceStatus\")))\r\n                    .count());\r\n\r\n            return ResponseEntity.ok(response);\r\n        } catch (ResourceNotFoundException e) {\r\n            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(e.getMessage());\r\n        } catch (Exception e) {\r\n            return ResponseEntity.internalServerError().body(\"Error retrieving attendance history: \" + e.getMessage());\r\n        }\r\n    }\r\n\r\n    // 新增：獲取特定session的已保存考勤數據\r\n    @GetMapping(\"/session/{sessionId}/attendance\")\r\n    @PreAuthorize(\"hasAuthority('ROLE_COACH')\")\r\n    public ResponseEntity<?> getSessionAttendance(@PathVariable Integer sessionId) {\r\n        try {\r\n            String username = SecurityContextHolder.getContext().getAuthentication().getName();\r\n            User coach = userRepository.findByUserAccount_Username(username)\r\n                    .orElseThrow(() -> new ResourceNotFoundException(\"Coach not found\"));\r\n\r\n            // 驗證課程是否存在且屬於該教練\r\n            ClassSession session = sessionRepository.findById(sessionId)\r\n                    .orElseThrow(() -> new ResourceNotFoundException(\"Session not found\"));\r\n\r\n            if (!session.getCoach().getId().equals(coach.getId())) {\r\n                return ResponseEntity.status(HttpStatus.FORBIDDEN).body(\"You can only view attendance for your own sessions\");\r\n            }\r\n\r\n            // 獲取該session的所有註冊記錄\r\n            List<ClassRegistration> registrations = registrationRepository.findByClassSessionId(sessionId);\r\n\r\n            Map<String, Boolean> attendance = new HashMap<>();\r\n            Map<String, String> feedbacks = new HashMap<>();\r\n\r\n            for (ClassRegistration registration : registrations) {\r\n                String memberId = registration.getMember().getId().toString();\r\n\r\n                // 設置出席狀態\r\n                if (\"PRESENT\".equals(registration.getAttendanceStatus())) {\r\n                    attendance.put(memberId, true);\r\n                } else if (\"ABSENT\".equals(registration.getAttendanceStatus())) {\r\n                    attendance.put(memberId, false);\r\n                }\r\n\r\n                // 設置反饋\r\n                if (registration.getCoachComment() != null && !registration.getCoachComment().trim().isEmpty()) {\r\n                    feedbacks.put(memberId, registration.getCoachComment());\r\n                }\r\n            }\r\n\r\n            Map<String, Object> response = new HashMap<>();\r\n            response.put(\"sessionId\", sessionId);\r\n            response.put(\"attendance\", attendance);\r\n            response.put(\"feedbacks\", feedbacks);\r\n            response.put(\"hasAttendanceData\", !attendance.isEmpty());\r\n\r\n            return ResponseEntity.ok(response);\r\n        } catch (ResourceNotFoundException e) {\r\n            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(e.getMessage());\r\n        } catch (Exception e) {\r\n            return ResponseEntity.internalServerError().body(\"Error retrieving session attendance: \" + e.getMessage());\r\n        }\r\n    }\r\n\r\n    // 新增：獲取教練收入歷史\r\n    @GetMapping(\"/income-history\")\r\n    @PreAuthorize(\"hasAuthority('ROLE_COACH')\")\r\n    public ResponseEntity<?> getCoachIncomeHistory(\r\n            @RequestParam(required = false) String startDate,\r\n            @RequestParam(required = false) String endDate) {\r\n        try {\r\n            String username = SecurityContextHolder.getContext().getAuthentication().getName();\r\n            User coach = userRepository.findByUserAccount_Username(username)\r\n                    .orElseThrow(() -> new ResourceNotFoundException(\"Coach not found\"));\r\n\r\n            // 獲取教練的收入記錄\r\n            List<Payment> coachIncomePayments = paymentRepository.findByPaymentTypeAndStatus(\"COACH_INCOME\", \"COMPLETED\")\r\n                    .stream()\r\n                    .filter(payment -> {\r\n                        // 檢查是否屬於當前教練（通過 session 關聯）\r\n                        if (payment.getTransactionId() != null && payment.getTransactionId().startsWith(\"SETTLEMENT_\")) {\r\n                            String sessionIdStr = payment.getTransactionId().replace(\"SETTLEMENT_\", \"\");\r\n                            try {\r\n                                Integer sessionId = Integer.parseInt(sessionIdStr);\r\n                                ClassSession session = sessionRepository.findById(sessionId).orElse(null);\r\n                                return session != null && session.getCoach().getId().equals(coach.getId());\r\n                            } catch (NumberFormatException e) {\r\n                                return false;\r\n                            }\r\n                        }\r\n                        return false;\r\n                    })\r\n                    .collect(Collectors.toList());\r\n\r\n            // 按日期過濾\r\n            if (startDate != null && endDate != null) {\r\n                LocalDateTime start = LocalDateTime.parse(startDate);\r\n                LocalDateTime end = LocalDateTime.parse(endDate);\r\n                coachIncomePayments = coachIncomePayments.stream()\r\n                        .filter(payment -> {\r\n                            LocalDateTime paymentDate = payment.getPaymentDate();\r\n                            return paymentDate != null && !paymentDate.isBefore(start) && !paymentDate.isAfter(end);\r\n                        })\r\n                        .collect(Collectors.toList());\r\n            }\r\n\r\n            // 構建收入歷史記錄\r\n            List<Map<String, Object>> incomeHistory = coachIncomePayments.stream()\r\n                    .map(payment -> {\r\n                        Map<String, Object> record = new HashMap<>();\r\n                        record.put(\"paymentId\", payment.getId());\r\n                        record.put(\"amount\", payment.getAmount());\r\n                        record.put(\"paymentDate\", payment.getPaymentDate());\r\n                        record.put(\"transactionId\", payment.getTransactionId());\r\n\r\n                        // 獲取相關課程信息\r\n                        if (payment.getTransactionId() != null && payment.getTransactionId().startsWith(\"SETTLEMENT_\")) {\r\n                            String sessionIdStr = payment.getTransactionId().replace(\"SETTLEMENT_\", \"\");\r\n                            try {\r\n                                Integer sessionId = Integer.parseInt(sessionIdStr);\r\n                                ClassSession session = sessionRepository.findById(sessionId).orElse(null);\r\n                                if (session != null) {\r\n                                    record.put(\"sessionId\", session.getId());\r\n                                    record.put(\"sessionTitle\", session.getTitle());\r\n                                    record.put(\"sessionDate\", session.getStartTime());\r\n                                    record.put(\"studentCount\", session.getCurrentParticipants());\r\n                                    record.put(\"totalSessionRevenue\", session.getPrice() * session.getCurrentParticipants());\r\n                                }\r\n                            } catch (NumberFormatException e) {\r\n                                // 忽略無效的 session ID\r\n                            }\r\n                        }\r\n\r\n                        return record;\r\n                    })\r\n                    .sorted((a, b) -> {\r\n                        LocalDateTime dateA = (LocalDateTime) a.get(\"paymentDate\");\r\n                        LocalDateTime dateB = (LocalDateTime) b.get(\"paymentDate\");\r\n                        return dateB.compareTo(dateA); // 降序排列\r\n                    })\r\n                    .collect(Collectors.toList());\r\n\r\n            // 計算統計信息\r\n            double totalIncome = incomeHistory.stream()\r\n                    .mapToDouble(record -> (Double) record.get(\"amount\"))\r\n                    .sum();\r\n\r\n            double monthlyIncome = incomeHistory.stream()\r\n                    .filter(record -> {\r\n                        LocalDateTime paymentDate = (LocalDateTime) record.get(\"paymentDate\");\r\n                        LocalDateTime oneMonthAgo = LocalDateTime.now().minusMonths(1);\r\n                        return paymentDate != null && paymentDate.isAfter(oneMonthAgo);\r\n                    })\r\n                    .mapToDouble(record -> (Double) record.get(\"amount\"))\r\n                    .sum();\r\n\r\n            Map<String, Object> response = new HashMap<>();\r\n            response.put(\"coachId\", coach.getId());\r\n            response.put(\"coachName\", coach.getName());\r\n            response.put(\"totalIncome\", totalIncome);\r\n            response.put(\"monthlyIncome\", monthlyIncome);\r\n            response.put(\"incomeHistory\", incomeHistory);\r\n            response.put(\"totalRecords\", incomeHistory.size());\r\n\r\n            return ResponseEntity.ok(response);\r\n        } catch (ResourceNotFoundException e) {\r\n            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(e.getMessage());\r\n        } catch (Exception e) {\r\n            return ResponseEntity.internalServerError().body(\"Error retrieving income history: \" + e.getMessage());\r\n        }\r\n    }\r\n\r\n    @GetMapping(\"/test\")\r\n    @PreAuthorize(\"hasAuthority('ROLE_COACH')\")\r\n    public ResponseEntity<?> testEndpoint() {\r\n        return ResponseEntity.ok(Map.of(\"message\", \"Coach controller is working\", \"timestamp\", System.currentTimeMillis()));\r\n    }\r\n\r\n    // 新增：獲取教練錢包餘額\r\n    @GetMapping(\"/wallet-balance\")\r\n    @PreAuthorize(\"hasAuthority('ROLE_COACH')\")\r\n    public ResponseEntity<?> getCoachWalletBalance() {\r\n        try {\r\n            String username = SecurityContextHolder.getContext().getAuthentication().getName();\r\n            User coach = userRepository.findByUserAccount_Username(username)\r\n                    .orElseThrow(() -> new ResourceNotFoundException(\"Coach not found\"));\r\n\r\n            // 獲取教練的Member記錄\r\n            Member coachMember = memberRepository.findByUser(coach);\r\n            if (coachMember == null) {\r\n                throw new ResourceNotFoundException(\"Coach member not found\");\r\n            }\r\n\r\n            // 獲取教練的錢包\r\n            Wallet coachWallet = walletRepository.findByMemberId(coachMember.getId())\r\n                    .orElseThrow(() -> new ResourceNotFoundException(\"Coach wallet not found\"));\r\n\r\n            // 獲取最近的交易記錄\r\n            Pageable pageable = PageRequest.of(0, 10);\r\n            Page<WalletTransaction> transactionsPage = walletTransactionRepository.findByWalletIdOrderByCreatedAtDesc(coachWallet.getId(), pageable);\r\n            List<WalletTransaction> recentTransactions = transactionsPage.getContent();\r\n\r\n            Map<String, Object> response = new HashMap<>();\r\n            response.put(\"coachId\", coach.getId());\r\n            response.put(\"coachName\", coach.getName());\r\n            response.put(\"balance\", coachWallet.getBalance());\r\n            response.put(\"walletStatus\", coachWallet.getStatus());\r\n            response.put(\"recentTransactions\", recentTransactions.stream()\r\n                    .map(transaction -> {\r\n                        Map<String, Object> tx = new HashMap<>();\r\n                        tx.put(\"id\", transaction.getId());\r\n                        tx.put(\"type\", transaction.getTransactionType());\r\n                        tx.put(\"amount\", transaction.getAmount());\r\n                        tx.put(\"balanceBefore\", transaction.getBalanceBefore());\r\n                        tx.put(\"balanceAfter\", transaction.getBalanceAfter());\r\n                        tx.put(\"description\", transaction.getDescription());\r\n                        tx.put(\"createdAt\", transaction.getCreatedAt());\r\n                        return tx;\r\n                    })\r\n                    .collect(Collectors.toList()));\r\n\r\n            return ResponseEntity.ok(response);\r\n        } catch (ResourceNotFoundException e) {\r\n            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(e.getMessage());\r\n        } catch (Exception e) {\r\n            return ResponseEntity.internalServerError().body(\"Error retrieving wallet balance: \" + e.getMessage());\r\n        }\r\n    }\r\n\r\n    @GetMapping(\"/wallet-transactions\")\r\n    @PreAuthorize(\"hasAuthority('ROLE_COACH')\")\r\n    public ResponseEntity<?> getCoachWalletTransactions(\r\n            @RequestParam(required = false) String startDate,\r\n            @RequestParam(required = false) String endDate) {\r\n        try {\r\n            String username = SecurityContextHolder.getContext().getAuthentication().getName();\r\n            User coach = userRepository.findByUserAccount_Username(username)\r\n                    .orElseThrow(() -> new ResourceNotFoundException(\"Coach not found\"));\r\n\r\n            // 獲取教練的Member記錄\r\n            Member coachMember = memberRepository.findByUser(coach);\r\n            if (coachMember == null) {\r\n                throw new ResourceNotFoundException(\"Coach member not found\");\r\n            }\r\n\r\n            // 獲取教練的錢包\r\n            Wallet coachWallet = walletRepository.findByMemberId(coachMember.getId())\r\n                    .orElseThrow(() -> new ResourceNotFoundException(\"Coach wallet not found\"));\r\n\r\n            // 獲取錢包交易記錄\r\n            List<WalletTransaction> transactions = walletTransactionRepository.findByWalletIdOrderByCreatedAtDesc(coachWallet.getId(), Pageable.unpaged()).getContent();\r\n\r\n            // 按日期過濾\r\n            if (startDate != null && endDate != null) {\r\n                LocalDateTime start = LocalDateTime.parse(startDate);\r\n                LocalDateTime end = LocalDateTime.parse(endDate);\r\n                transactions = transactions.stream()\r\n                        .filter(transaction -> {\r\n                            LocalDateTime transactionDate = transaction.getCreatedAt();\r\n                            return transactionDate != null && !transactionDate.isBefore(start) && !transactionDate.isAfter(end);\r\n                        })\r\n                        .collect(Collectors.toList());\r\n            }\r\n\r\n            // 構建交易記錄\r\n            List<Map<String, Object>> transactionHistory = transactions.stream()\r\n                    .map(transaction -> {\r\n                        Map<String, Object> record = new HashMap<>();\r\n                        record.put(\"transactionId\", transaction.getId());\r\n                        record.put(\"amount\", transaction.getAmount());\r\n                        record.put(\"transactionType\", transaction.getTransactionType());\r\n                        record.put(\"transactionDate\", transaction.getCreatedAt());\r\n                        record.put(\"description\", transaction.getDescription());\r\n                        record.put(\"balanceAfter\", transaction.getBalanceAfter());\r\n                        record.put(\"referenceType\", transaction.getReferenceType());\r\n                        record.put(\"referenceId\", transaction.getReferenceId());\r\n                        \r\n                        // 判斷是收入還是支出\r\n                        boolean isIncome = \"DEPOSIT\".equals(transaction.getTransactionType()) || \r\n                                         \"REFUND\".equals(transaction.getTransactionType());\r\n                        record.put(\"isIncome\", isIncome);\r\n                        \r\n                        return record;\r\n                    })\r\n                    .collect(Collectors.toList());\r\n\r\n            // 計算統計信息\r\n            double totalIncome = transactionHistory.stream()\r\n                    .filter(record -> (Boolean) record.get(\"isIncome\"))\r\n                    .mapToDouble(record -> (Double) record.get(\"amount\"))\r\n                    .sum();\r\n\r\n            double totalExpense = transactionHistory.stream()\r\n                    .filter(record -> !(Boolean) record.get(\"isIncome\"))\r\n                    .mapToDouble(record -> (Double) record.get(\"amount\"))\r\n                    .sum();\r\n\r\n            double netIncome = totalIncome - totalExpense;\r\n\r\n            Map<String, Object> response = new HashMap<>();\r\n            response.put(\"coachId\", coach.getId());\r\n            response.put(\"coachName\", coach.getName());\r\n            response.put(\"walletBalance\", coachWallet.getBalance());\r\n            response.put(\"totalIncome\", totalIncome);\r\n            response.put(\"totalExpense\", totalExpense);\r\n            response.put(\"netIncome\", netIncome);\r\n            response.put(\"transactions\", transactionHistory);\r\n            response.put(\"totalRecords\", transactionHistory.size());\r\n\r\n            return ResponseEntity.ok(response);\r\n        } catch (ResourceNotFoundException e) {\r\n            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(e.getMessage());\r\n        } catch (Exception e) {\r\n            return ResponseEntity.internalServerError().body(\"Error retrieving wallet transactions: \" + e.getMessage());\r\n        }\r\n    }\r\n\r\n    @GetMapping(\"/revenue-status\")\r\n    @PreAuthorize(\"hasAuthority('ROLE_COACH')\")\r\n    public ResponseEntity<?> getCoachRevenueStatus() {\r\n        try {\r\n            String username = SecurityContextHolder.getContext().getAuthentication().getName();\r\n            User coach = userRepository.findByUserAccount_Username(username)\r\n                    .orElseThrow(() -> new ResourceNotFoundException(\"Coach not found\"));\r\n\r\n            // 獲取教練的課程收入狀態\r\n            List<ClassSession> sessions = sessionRepository.findByCoachIdOrderByStartTimeDesc(coach.getId());\r\n            \r\n            List<Map<String, Object>> revenueStatus = sessions.stream()\r\n                    .filter(session -> session.getRegistrations() != null && !session.getRegistrations().isEmpty())\r\n                    .map(session -> {\r\n                        Map<String, Object> status = new HashMap<>();\r\n                        status.put(\"sessionId\", session.getId());\r\n                        status.put(\"title\", session.getTitle());\r\n                        status.put(\"startTime\", session.getStartTime());\r\n                        status.put(\"status\", session.getStatus());\r\n                        status.put(\"revenueDistributed\", session.getRevenueDistributed());\r\n                        \r\n                        // 計算收入\r\n                        double totalRevenue = 0.0;\r\n                        if (session.getRegistrations() != null) {\r\n                            totalRevenue = session.getRegistrations().size() * session.getPrice();\r\n                        }\r\n                        status.put(\"totalRevenue\", totalRevenue);\r\n                        status.put(\"coachShare\", totalRevenue * 0.80);\r\n                        status.put(\"platformShare\", totalRevenue * 0.20);\r\n                        \r\n                        // 計算距離課程開始的時間\r\n                        if (session.getStartTime() != null) {\r\n                            LocalDateTime now = LocalDateTime.now();\r\n                            LocalDateTime sessionStart = session.getStartTime();\r\n                            long hoursUntilStart = java.time.Duration.between(now, sessionStart).toHours();\r\n                            status.put(\"hoursUntilStart\", hoursUntilStart);\r\n                            status.put(\"willDistributeSoon\", hoursUntilStart <= 24 && hoursUntilStart > 0);\r\n                        }\r\n                        \r\n                        return status;\r\n                    })\r\n                    .collect(Collectors.toList());\r\n\r\n            Map<String, Object> response = new HashMap<>();\r\n            response.put(\"coachId\", coach.getId());\r\n            response.put(\"coachName\", coach.getName());\r\n            response.put(\"revenueStatus\", revenueStatus);\r\n            response.put(\"totalSessions\", revenueStatus.size());\r\n            response.put(\"pendingDistributions\", revenueStatus.stream()\r\n                    .filter(status -> !(Boolean) status.get(\"revenueDistributed\"))\r\n                    .count());\r\n\r\n            return ResponseEntity.ok(response);\r\n        } catch (ResourceNotFoundException e) {\r\n            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(e.getMessage());\r\n        } catch (Exception e) {\r\n            return ResponseEntity.internalServerError().body(\"Error retrieving revenue status: \" + e.getMessage());\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/CoachController.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/CoachController.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/CoachController.java	(revision 89327e12854b108d004ebb020d0592b1c618ecaf)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/CoachController.java	(date 1754315964912)
@@ -6,6 +6,8 @@
 import com.pickleball_backend.pickleball.exception.*;
 import com.pickleball_backend.pickleball.repository.*;
 import com.pickleball_backend.pickleball.service.CoachCourtService;
+import com.pickleball_backend.pickleball.service.EscrowAccountService;
+import com.pickleball_backend.pickleball.service.ClassSessionServiceImpl;
 import lombok.RequiredArgsConstructor;
 import org.springframework.format.annotation.DateTimeFormat;
 import org.springframework.http.HttpStatus;
@@ -47,6 +49,9 @@
     private final WalletRepository walletRepository;
     private final WalletTransactionRepository walletTransactionRepository;
     private final MemberRepository memberRepository;
+    private final MembershipTierRepository membershipTierRepository;
+    private final EscrowAccountService escrowAccountService;
+    private final ClassSessionServiceImpl classSessionService;
 
     // 獲取教練可用的球場
     @GetMapping("/available-courts")
@@ -931,10 +936,109 @@
         }
     }
 
-    @GetMapping("/test")
+
+
+
+
+    @PostMapping("/fix-wallet-balance")
     @PreAuthorize("hasAuthority('ROLE_COACH')")
-    public ResponseEntity<?> testEndpoint() {
-        return ResponseEntity.ok(Map.of("message", "Coach controller is working", "timestamp", System.currentTimeMillis()));
+    public ResponseEntity<?> fixWalletBalance() {
+        try {
+            String username = SecurityContextHolder.getContext().getAuthentication().getName();
+            User coach = userRepository.findByUserAccount_Username(username)
+                    .orElseThrow(() -> new ResourceNotFoundException("Coach not found"));
+
+            // 獲取教練的所有收入記錄
+            List<Payment> coachIncomePayments = paymentRepository.findByPaymentTypeAndStatus("COACH_INCOME", "COMPLETED")
+                    .stream()
+                    .filter(payment -> {
+                        if (payment.getTransactionId() != null && payment.getTransactionId().startsWith("SETTLEMENT_")) {
+                            String sessionIdStr = payment.getTransactionId().replace("SETTLEMENT_", "");
+                            try {
+                                Integer sessionId = Integer.parseInt(sessionIdStr);
+                                ClassSession session = sessionRepository.findById(sessionId).orElse(null);
+                                return session != null && session.getCoach().getId().equals(coach.getId());
+                            } catch (NumberFormatException e) {
+                                return false;
+                            }
+                        }
+                        return false;
+                    })
+                    .collect(Collectors.toList());
+
+            // 確保教練有Member和Wallet記錄
+            Member coachMember = memberRepository.findByUser(coach);
+            if (coachMember == null) {
+                // 創建默認會員等級
+                MembershipTier defaultTier = membershipTierRepository.findByTierName("SILVER");
+                if (defaultTier == null) {
+                    defaultTier = new MembershipTier();
+                    defaultTier.setTierName("SILVER");
+                    defaultTier.setMinPoints(0);
+                    defaultTier.setMaxPoints(2000);
+                    defaultTier.setBenefits("10% discount");
+                    defaultTier.setActive(true);
+                    defaultTier = membershipTierRepository.save(defaultTier);
+                }
+                
+                coachMember = new Member();
+                coachMember.setUser(coach);
+                coachMember.setTier(defaultTier);
+                coachMember.setTierPointBalance(0);
+                coachMember.setRewardPointBalance(0);
+                coachMember = memberRepository.save(coachMember);
+            }
+
+            Wallet coachWallet = walletRepository.findByMemberId(coachMember.getId()).orElse(null);
+            if (coachWallet == null) {
+                coachWallet = new Wallet();
+                coachWallet.setMember(coachMember);
+                coachWallet.setBalance(0.00);
+                coachWallet.setFrozenBalance(0.00);
+                coachWallet.setTotalDeposited(0.00);
+                coachWallet.setTotalSpent(0.00);
+                coachWallet.setStatus("ACTIVE");
+                coachWallet = walletRepository.save(coachWallet);
+            }
+
+            // 計算總收入並更新錢包
+            double totalIncome = coachIncomePayments.stream()
+                    .mapToDouble(Payment::getAmount)
+                    .sum();
+
+            double oldBalance = coachWallet.getBalance();
+            double newBalance = oldBalance + totalIncome; // 累加而不是覆蓋
+            coachWallet.setBalance(newBalance);
+            walletRepository.save(coachWallet);
+
+            // 創建一筆總的交易記錄
+            if (totalIncome > 0) {
+                WalletTransaction totalTransaction = new WalletTransaction();
+                totalTransaction.setWalletId(coachWallet.getId());
+                totalTransaction.setTransactionType("COACH_INCOME");
+                totalTransaction.setAmount(totalIncome);
+                totalTransaction.setBalanceBefore(oldBalance);
+                totalTransaction.setBalanceAfter(newBalance);
+                totalTransaction.setFrozenBefore(coachWallet.getFrozenBalance());
+                totalTransaction.setFrozenAfter(coachWallet.getFrozenBalance());
+                totalTransaction.setReferenceType("SYSTEM_ADJUSTMENT");
+                totalTransaction.setReferenceId(0);
+                totalTransaction.setDescription("System adjustment: Total income from " + coachIncomePayments.size() + " sessions");
+                totalTransaction.setStatus("COMPLETED");
+                walletTransactionRepository.save(totalTransaction);
+            }
+
+            Map<String, Object> response = new HashMap<>();
+            response.put("message", "Wallet balance fixed successfully");
+            response.put("oldBalance", oldBalance);
+            response.put("newBalance", totalIncome);
+            response.put("totalSessions", coachIncomePayments.size());
+            response.put("totalIncome", totalIncome);
+
+            return ResponseEntity.ok(response);
+        } catch (Exception e) {
+            return ResponseEntity.internalServerError().body(Map.of("error", e.getMessage()));
+        }
     }
 
     // 新增：獲取教練錢包餘額
@@ -946,15 +1050,42 @@
             User coach = userRepository.findByUserAccount_Username(username)
                     .orElseThrow(() -> new ResourceNotFoundException("Coach not found"));
 
-            // 獲取教練的Member記錄
+            // 獲取教練的Member記錄，如果不存在則創建
             Member coachMember = memberRepository.findByUser(coach);
             if (coachMember == null) {
-                throw new ResourceNotFoundException("Coach member not found");
+                // 創建默認會員等級
+                MembershipTier defaultTier = membershipTierRepository.findByTierName("SILVER");
+                if (defaultTier == null) {
+                    defaultTier = new MembershipTier();
+                    defaultTier.setTierName("SILVER");
+                    defaultTier.setMinPoints(0);
+                    defaultTier.setMaxPoints(2000);
+                    defaultTier.setBenefits("10% discount");
+                    defaultTier.setActive(true);
+                    defaultTier = membershipTierRepository.save(defaultTier);
+                }
+                
+                // 創建新的Member記錄
+                coachMember = new Member();
+                coachMember.setUser(coach);
+                coachMember.setTier(defaultTier);
+                coachMember.setTierPointBalance(0);
+                coachMember.setRewardPointBalance(0);
+                coachMember = memberRepository.save(coachMember);
             }
 
-            // 獲取教練的錢包
-            Wallet coachWallet = walletRepository.findByMemberId(coachMember.getId())
-                    .orElseThrow(() -> new ResourceNotFoundException("Coach wallet not found"));
+            // 獲取教練的錢包，如果不存在則創建
+            Wallet coachWallet = walletRepository.findByMemberId(coachMember.getId()).orElse(null);
+            if (coachWallet == null) {
+                coachWallet = new Wallet();
+                coachWallet.setMember(coachMember);
+                coachWallet.setBalance(0.00);
+                coachWallet.setFrozenBalance(0.00);
+                coachWallet.setTotalDeposited(0.00);
+                coachWallet.setTotalSpent(0.00);
+                coachWallet.setStatus("ACTIVE");
+                coachWallet = walletRepository.save(coachWallet);
+            }
 
             // 獲取最近的交易記錄
             Pageable pageable = PageRequest.of(0, 10);
@@ -998,15 +1129,42 @@
             User coach = userRepository.findByUserAccount_Username(username)
                     .orElseThrow(() -> new ResourceNotFoundException("Coach not found"));
 
-            // 獲取教練的Member記錄
+            // 獲取教練的Member記錄，如果不存在則創建
             Member coachMember = memberRepository.findByUser(coach);
             if (coachMember == null) {
-                throw new ResourceNotFoundException("Coach member not found");
+                // 創建默認會員等級
+                MembershipTier defaultTier = membershipTierRepository.findByTierName("SILVER");
+                if (defaultTier == null) {
+                    defaultTier = new MembershipTier();
+                    defaultTier.setTierName("SILVER");
+                    defaultTier.setMinPoints(0);
+                    defaultTier.setMaxPoints(2000);
+                    defaultTier.setBenefits("10% discount");
+                    defaultTier.setActive(true);
+                    defaultTier = membershipTierRepository.save(defaultTier);
+                }
+                
+                // 創建新的Member記錄
+                coachMember = new Member();
+                coachMember.setUser(coach);
+                coachMember.setTier(defaultTier);
+                coachMember.setTierPointBalance(0);
+                coachMember.setRewardPointBalance(0);
+                coachMember = memberRepository.save(coachMember);
             }
 
-            // 獲取教練的錢包
-            Wallet coachWallet = walletRepository.findByMemberId(coachMember.getId())
-                    .orElseThrow(() -> new ResourceNotFoundException("Coach wallet not found"));
+            // 獲取教練的錢包，如果不存在則創建
+            Wallet coachWallet = walletRepository.findByMemberId(coachMember.getId()).orElse(null);
+            if (coachWallet == null) {
+                coachWallet = new Wallet();
+                coachWallet.setMember(coachMember);
+                coachWallet.setBalance(0.00);
+                coachWallet.setFrozenBalance(0.00);
+                coachWallet.setTotalDeposited(0.00);
+                coachWallet.setTotalSpent(0.00);
+                coachWallet.setStatus("ACTIVE");
+                coachWallet = walletRepository.save(coachWallet);
+            }
 
             // 獲取錢包交易記錄
             List<WalletTransaction> transactions = walletTransactionRepository.findByWalletIdOrderByCreatedAtDesc(coachWallet.getId(), Pageable.unpaged()).getContent();
@@ -1038,7 +1196,8 @@
                         
                         // 判斷是收入還是支出
                         boolean isIncome = "DEPOSIT".equals(transaction.getTransactionType()) || 
-                                         "REFUND".equals(transaction.getTransactionType());
+                                         "REFUND".equals(transaction.getTransactionType()) ||
+                                         "COACH_INCOME".equals(transaction.getTransactionType());
                         record.put("isIncome", isIncome);
                         
                         return record;
@@ -1087,9 +1246,19 @@
             // 獲取教練的課程收入狀態
             List<ClassSession> sessions = sessionRepository.findByCoachIdOrderByStartTimeDesc(coach.getId());
             
-            List<Map<String, Object>> revenueStatus = sessions.stream()
-                    .filter(session -> session.getRegistrations() != null && !session.getRegistrations().isEmpty())
-                    .map(session -> {
+            List<Map<String, Object>> revenueStatus = new ArrayList<>();
+            
+            for (ClassSession session : sessions) {
+                try {
+                    // 安全地檢查 registrations
+                    List<ClassRegistration> registrations = session.getRegistrations();
+                    if (registrations == null) {
+                        // 如果 registrations 為 null，嘗試從數據庫重新獲取
+                        registrations = registrationRepository.findByClassSessionId(session.getId());
+                    }
+                    
+                    // 只處理有報名的課程
+                    if (registrations != null && !registrations.isEmpty()) {
                         Map<String, Object> status = new HashMap<>();
                         status.put("sessionId", session.getId());
                         status.put("title", session.getTitle());
@@ -1098,13 +1267,11 @@
                         status.put("revenueDistributed", session.getRevenueDistributed());
                         
                         // 計算收入
-                        double totalRevenue = 0.0;
-                        if (session.getRegistrations() != null) {
-                            totalRevenue = session.getRegistrations().size() * session.getPrice();
-                        }
+                        double totalRevenue = registrations.size() * session.getPrice();
                         status.put("totalRevenue", totalRevenue);
                         status.put("coachShare", totalRevenue * 0.80);
                         status.put("platformShare", totalRevenue * 0.20);
+                        status.put("participantCount", registrations.size());
                         
                         // 計算距離課程開始的時間
                         if (session.getStartTime() != null) {
@@ -1115,9 +1282,13 @@
                             status.put("willDistributeSoon", hoursUntilStart <= 24 && hoursUntilStart > 0);
                         }
                         
-                        return status;
-                    })
-                    .collect(Collectors.toList());
+                        revenueStatus.add(status);
+                    }
+                } catch (Exception e) {
+                    // 記錄錯誤但繼續處理其他課程
+                    System.err.println("Error processing session " + session.getId() + ": " + e.getMessage());
+                }
+            }
 
             Map<String, Object> response = new HashMap<>();
             response.put("coachId", coach.getId());
@@ -1135,4 +1306,178 @@
             return ResponseEntity.internalServerError().body("Error retrieving revenue status: " + e.getMessage());
         }
     }
+
+    // 檢查課程狀態和託管支付
+    @GetMapping("/debug/sessions-status")
+    @PreAuthorize("hasAuthority('ROLE_COACH')")
+    public ResponseEntity<?> debugSessionsStatus() {
+        try {
+            String username = SecurityContextHolder.getContext().getAuthentication().getName();
+            User coach = userRepository.findByUserAccount_Username(username)
+                    .orElseThrow(() -> new ResourceNotFoundException("Coach not found"));
+
+            List<ClassSession> allSessions = sessionRepository.findAll();
+            List<Map<String, Object>> result = allSessions.stream()
+                    .filter(session -> session.getCoach() != null && session.getCoach().getId().equals(coach.getId()))
+                    .map(session -> {
+                        Map<String, Object> map = new HashMap<>();
+                        map.put("id", session.getId());
+                        map.put("title", session.getTitle());
+                        map.put("status", session.getStatus());
+                        map.put("slotType", session.getSlotType());
+                        map.put("startTime", session.getStartTime());
+                        map.put("endTime", session.getEndTime());
+                        map.put("currentParticipants", session.getCurrentParticipants());
+                        map.put("maxParticipants", session.getMaxParticipants());
+                        map.put("allowReplacement", session.getAllowReplacement());
+                        return map;
+                    })
+                    .collect(Collectors.toList());
+
+            return ResponseEntity.ok(result);
+        } catch (ResourceNotFoundException e) {
+            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(e.getMessage());
+        } catch (Exception e) {
+            return ResponseEntity.internalServerError().body("Error retrieving sessions status");
+        }
+    }
+
+    // 更新時段是否允許補課
+    @PutMapping("/slots/{slotId}/allow-replacement")
+    @PreAuthorize("hasAuthority('ROLE_COACH')")
+    public ResponseEntity<?> updateSlotAllowReplacement(
+            @PathVariable Integer slotId,
+            @RequestBody Map<String, Boolean> request) {
+        try {
+            String username = SecurityContextHolder.getContext().getAuthentication().getName();
+            User coach = userRepository.findByUserAccount_Username(username)
+                    .orElseThrow(() -> new ResourceNotFoundException("Coach not found"));
+
+            Boolean allowReplacement = request.get("allowReplacement");
+            if (allowReplacement == null) {
+                return ResponseEntity.badRequest().body(Map.of("error", "allowReplacement field is required"));
+            }
+
+            coachCourtService.updateSlotAllowReplacement(coach.getId(), slotId, allowReplacement);
+            return ResponseEntity.ok(Map.of("message", "Slot allowReplacement updated successfully"));
+        } catch (ResourceNotFoundException e) {
+            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(e.getMessage());
+        } catch (Exception e) {
+            return ResponseEntity.internalServerError().body("Error updating slot allowReplacement");
+        }
+    }
+
+    // 獲取教練的所有補課課程
+    @GetMapping("/replacement-sessions")
+    @PreAuthorize("hasAuthority('ROLE_COACH')")
+    public ResponseEntity<?> getReplacementSessions() {
+        try {
+            String username = SecurityContextHolder.getContext().getAuthentication().getName();
+            User coach = userRepository.findByUserAccount_Username(username)
+                    .orElseThrow(() -> new ResourceNotFoundException("Coach not found"));
+
+            List<ClassSession> replacementSessions = coachCourtService.getReplacementSessionsByCoach(coach.getId());
+            
+            List<Map<String, Object>> result = replacementSessions.stream().map(session -> {
+                Map<String, Object> map = new HashMap<>();
+                map.put("id", session.getId());
+                map.put("title", session.getTitle());
+                map.put("startTime", session.getStartTime());
+                map.put("endTime", session.getEndTime());
+                map.put("status", session.getStatus());
+                map.put("currentParticipants", session.getCurrentParticipants());
+                map.put("maxParticipants", session.getMaxParticipants());
+                map.put("replacementForSessionId", session.getReplacementForSessionId());
+                
+                if (session.getCourt() != null) {
+                    map.put("courtName", session.getCourt().getName());
+                    if (session.getCourt().getVenue() != null) {
+                        map.put("venueName", session.getCourt().getVenue().getName());
+                    }
+                }
+                
+                // 獲取報名學生
+                if (session.getRegistrations() != null) {
+                    List<Map<String, Object>> students = session.getRegistrations().stream().map(reg -> {
+                        Map<String, Object> studentMap = new HashMap<>();
+                        if (reg.getMember() != null && reg.getMember().getUser() != null) {
+                            studentMap.put("studentId", reg.getMember().getUser().getId());
+                            studentMap.put("studentName", reg.getMember().getUser().getName());
+                            studentMap.put("studentEmail", reg.getMember().getUser().getEmail());
+                        }
+                        return studentMap;
+                    }).collect(Collectors.toList());
+                    map.put("students", students);
+                }
+                
+                return map;
+            }).collect(Collectors.toList());
+
+            return ResponseEntity.ok(result);
+        } catch (ResourceNotFoundException e) {
+            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(e.getMessage());
+        } catch (Exception e) {
+            return ResponseEntity.internalServerError().body("Error retrieving replacement sessions");
+        }
+    }
+
+    @PostMapping("/trigger-settlement")
+    @PreAuthorize("hasAuthority('ROLE_COACH')")
+    public ResponseEntity<?> triggerSettlement() {
+        try {
+            String username = SecurityContextHolder.getContext().getAuthentication().getName();
+            User coach = userRepository.findByUserAccount_Username(username)
+                    .orElseThrow(() -> new ResourceNotFoundException("Coach not found"));
+            
+            // 手动触发收入分配
+            List<ClassSession> completedSessions = sessionRepository.findByStatus("COMPLETED");
+            int settledCount = 0;
+            List<String> messages = new ArrayList<>();
+            
+            for (ClassSession session : completedSessions) {
+                if (session.getCoach().getId().equals(coach.getId())) {
+                    try {
+                        // 检查是否已经有收入分配记录
+                        List<Payment> existingSettlements = paymentRepository.findByPaymentTypeAndStatus("COACH_INCOME", "COMPLETED")
+                            .stream()
+                            .filter(payment -> payment.getTransactionId() != null && 
+                                             payment.getTransactionId().equals("SETTLEMENT_" + session.getId()))
+                            .collect(Collectors.toList());
+                        
+                        // 检查是否有托管支付
+                        List<Payment> escrowedPayments = paymentRepository.findByPaymentTypeAndStatus("CLASS_SESSION_ESCROW", "ESCROWED")
+                            .stream()
+                            .filter(payment -> payment.getTransactionId() != null && 
+                                             payment.getTransactionId().startsWith("SESSION_" + session.getId() + "_"))
+                            .collect(Collectors.toList());
+                        
+                        messages.add(String.format("Session %d: %d existing settlements, %d escrowed payments", 
+                                                  session.getId(), existingSettlements.size(), escrowedPayments.size()));
+                        
+                        // 如果有托管支付但没有结算记录，则进行结算
+                        if (!escrowedPayments.isEmpty() && existingSettlements.isEmpty()) {
+                            escrowAccountService.settleClassSession(session);
+                            settledCount++;
+                            messages.add(String.format("Successfully settled session %d", session.getId()));
+                        } else if (escrowedPayments.isEmpty()) {
+                            messages.add(String.format("No escrowed payments found for session %d", session.getId()));
+                        } else if (!existingSettlements.isEmpty()) {
+                            messages.add(String.format("Session %d already has settlement records", session.getId()));
+                        }
+                    } catch (Exception e) {
+                        messages.add(String.format("Failed to settle session %d: %s", session.getId(), e.getMessage()));
+                    }
+                }
+            }
+            
+            return ResponseEntity.ok(Map.of(
+                "message", "Settlement triggered successfully",
+                "settledSessions", settledCount,
+                "totalCompletedSessions", completedSessions.size(),
+                "details", messages
+            ));
+        } catch (Exception e) {
+            return ResponseEntity.badRequest().body(Map.of("error", e.getMessage()));
+        }
+    }
 }
\ No newline at end of file
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/FeedbackDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.dto;\r\n\r\nimport com.pickleball_backend.pickleball.entity.Feedback.TargetType;\r\nimport lombok.Data;\r\nimport jakarta.validation.constraints.Max;\r\nimport jakarta.validation.constraints.Min;\r\nimport jakarta.validation.constraints.NotNull;\r\n\r\nimport java.util.List;\r\n\r\n@Data\r\npublic class FeedbackDto {\r\n    @NotNull(message = \"Target type is required\")\r\n    private TargetType targetType;\r\n\r\n    @NotNull(message = \"Target ID is required\")\r\n    private Integer targetId;\r\n\r\n    @NotNull(message = \"Rating is required\")\r\n    @Min(value = 1, message = \"Rating must be at least 1\")\r\n    @Max(value = 5, message = \"Rating must be at most 5\")\r\n    private Integer rating;\r\n\r\n    private String review;\r\n    private List<String> tags;\r\n    \r\n    // 新增：预订ID\r\n    private Integer bookingId;\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/FeedbackDto.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/FeedbackDto.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/FeedbackDto.java	(revision 89327e12854b108d004ebb020d0592b1c618ecaf)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/FeedbackDto.java	(date 1753990737803)
@@ -26,4 +26,7 @@
     
     // 新增：预订ID
     private Integer bookingId;
+    
+    // 新增：课程ID（用于教练评价）
+    private Integer classSessionId;
 }
\ No newline at end of file
Index: pickleball-frontend/src/components/admin/ModernBookingDetailsDialog.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useState } from 'react';\r\nimport {\r\n  Dialog, DialogTitle, DialogContent, DialogActions, Typography, Box,\r\n  Grid, Button, TextField, CircularProgress, Chip, Divider, Avatar, Snackbar, Alert,\r\n  Menu, MenuItem, ListItemIcon, ListItemText\r\n} from '@mui/material';\r\nimport EventIcon from '@mui/icons-material/Event';\r\nimport PersonIcon from '@mui/icons-material/Person';\r\nimport SportsTennisIcon from '@mui/icons-material/SportsTennis';\r\nimport CalendarTodayIcon from '@mui/icons-material/CalendarToday';\r\nimport ShareIcon from '@mui/icons-material/Share';\r\nimport WhatsAppIcon from '@mui/icons-material/WhatsApp';\r\nimport ContentCopyIcon from '@mui/icons-material/ContentCopy';\r\nimport { getStatusChip } from './statusConfig';\r\n\r\nconst formatDate = (date) => {\r\n  if (!date) return '-';\r\n  return new Date(date).toLocaleString('en-US', {\r\n    year: 'numeric',\r\n    month: 'short',\r\n    day: 'numeric',\r\n    hour: '2-digit',\r\n    minute: '2-digit'\r\n  });\r\n};\r\n\r\nconst formatSlotDate = (date) => {\r\n  if (!date) return '-';\r\n  return new Date(date).toLocaleString('en-US', {\r\n    year: 'numeric',\r\n    month: 'short',\r\n    day: 'numeric'\r\n  });\r\n};\r\n\r\nconst formatTime = (time) => {\r\n  if (!time) return '-';\r\n  return new Date(`2000-01-01 ${time}`).toLocaleString('en-US', {\r\n    hour: '2-digit',\r\n    minute: '2-digit'\r\n  });\r\n};\r\n\r\nconst ModernBookingDetailsDialog = ({\r\n  open,\r\n  onClose,\r\n  booking = {},\r\n  adminRemark = '',\r\n  onAdminRemarkChange = () => {},\r\n  loading = false,\r\n  editableRemark = false,\r\n  cancellationRequest = null,\r\n  isAdmin = false,\r\n}) => {\r\n  const [snackbar, setSnackbar] = useState({ open: false, message: '', severity: 'success' });\r\n  const [shareMenuAnchor, setShareMenuAnchor] = useState(null);\r\n  const safeBooking = booking || {};\r\n  const safeCancellation = cancellationRequest || safeBooking.cancellationRequest || {};\r\n\r\n  const showSnackbar = (message, severity = 'success') => {\r\n    setSnackbar({ open: true, message, severity });\r\n  };\r\n\r\n  const handleCloseSnackbar = () => {\r\n    setSnackbar({ ...snackbar, open: false });\r\n  };\r\n\r\n  const handleShareMenuOpen = (event) => {\r\n    setShareMenuAnchor(event.currentTarget);\r\n  };\r\n\r\n  const handleShareMenuClose = () => {\r\n    setShareMenuAnchor(null);\r\n  };\r\n\r\n  // 创建分享文本\r\n  const createShareText = () => {\r\n    return `\uD83C\uDFD3 My Pickleball Booking\\n\\nCourt: ${safeBooking.courtName}\\nLocation: ${safeBooking.courtLocation}\\nDate: ${timeInfo.date}\\nTime: ${timeInfo.timeRange}\\nDuration: ${timeInfo.duration}\\nPurpose: ${safeBooking.purpose}\\nPlayers: ${safeBooking.numberOfPlayers}${safeBooking.numPaddles > 0 ? `\\nPaddles: ${safeBooking.numPaddles}` : ''}${safeBooking.buyBallSet ? '\\nBall Set: Yes' : ''}\\n\\nTotal: RM ${safeBooking.totalAmount?.toFixed(2)}`;\r\n  };\r\n\r\n  // 复制到剪贴板\r\n  const copyToClipboard = () => {\r\n    const shareText = createShareText();\r\n    \r\n    if (navigator.clipboard && window.isSecureContext) {\r\n      navigator.clipboard.writeText(shareText).then(() => {\r\n        showSnackbar('Booking details copied to clipboard! \uD83D\uDCCB', 'success');\r\n      }).catch(() => {\r\n        // 如果剪贴板API失败，使用传统方法\r\n        const textArea = document.createElement('textarea');\r\n        textArea.value = shareText;\r\n        document.body.appendChild(textArea);\r\n        textArea.select();\r\n        document.execCommand('copy');\r\n        document.body.removeChild(textArea);\r\n        showSnackbar('Booking details copied to clipboard! \uD83D\uDCCB', 'success');\r\n      });\r\n    } else {\r\n      // 传统方法\r\n      const textArea = document.createElement('textarea');\r\n      textArea.value = shareText;\r\n      document.body.appendChild(textArea);\r\n      textArea.select();\r\n      document.execCommand('copy');\r\n      document.body.removeChild(textArea);\r\n      showSnackbar('Booking details copied to clipboard! \uD83D\uDCCB', 'success');\r\n    }\r\n    handleShareMenuClose();\r\n  };\r\n\r\n  // 分享到WhatsApp\r\n  const shareToWhatsApp = () => {\r\n    const shareText = createShareText();\r\n    const whatsappUrl = `https://wa.me/?text=${encodeURIComponent(shareText)}`;\r\n    window.open(whatsappUrl, '_blank');\r\n    showSnackbar('Opening WhatsApp... \uD83D\uDCF1', 'success');\r\n    handleShareMenuClose();\r\n  };\r\n\r\n  // 处理多 slot 预订的时间显示\r\n  const getTimeDisplay = () => {\r\n    if (safeBooking.bookingSlots && safeBooking.bookingSlots.length > 0) {\r\n      // 多 slot 预订\r\n      const slots = safeBooking.bookingSlots.sort((a, b) => \r\n        new Date(a.slot.startTime) - new Date(b.slot.startTime)\r\n      );\r\n      const firstSlot = slots[0].slot;\r\n      const lastSlot = slots[slots.length - 1].slot;\r\n      \r\n      return {\r\n        date: formatSlotDate(firstSlot.date),\r\n        timeRange: `${formatTime(firstSlot.startTime)} - ${formatTime(lastSlot.endTime)}`,\r\n        duration: `${slots.length} hour(s)`,\r\n        isMultiSlot: true,\r\n        allSlots: slots.map(bs => ({\r\n          date: formatSlotDate(bs.slot.date),\r\n          time: `${formatTime(bs.slot.startTime)} - ${formatTime(bs.slot.endTime)}`,\r\n          duration: `${bs.slot.durationHours || 1} hour(s)`\r\n        }))\r\n      };\r\n    } else if (safeBooking.slotDate && safeBooking.startTime && safeBooking.endTime) {\r\n      // 单 slot 预订\r\n      return {\r\n        date: formatSlotDate(safeBooking.slotDate),\r\n        timeRange: `${formatTime(safeBooking.startTime)} - ${formatTime(safeBooking.endTime)}`,\r\n        duration: safeBooking.durationHours ? `${safeBooking.durationHours} hour(s)` : '1 hour(s)',\r\n        isMultiSlot: false\r\n      };\r\n    } else {\r\n      // 回退到预订日期\r\n      return {\r\n        date: formatDate(safeBooking.bookingDate),\r\n        timeRange: 'No slot info',\r\n        duration: '-',\r\n        isMultiSlot: false\r\n      };\r\n    }\r\n  };\r\n\r\n  const timeInfo = getTimeDisplay();\r\n\r\n  return (\r\n    <Dialog\r\n      open={open}\r\n      onClose={onClose}\r\n      maxWidth=\"md\"\r\n      fullWidth\r\n      PaperProps={{\r\n        sx: { borderRadius: 4, p: 0, background: '#f8f9fa' }\r\n      }}\r\n    >\r\n      <DialogTitle sx={{ fontWeight: 700, fontSize: 22, pb: 1, background: '#fff', borderTopLeftRadius: 16, borderTopRightRadius: 16 }}>\r\n        {isAdmin ? 'Booking Details (Admin View)' : 'My Booking Details'}\r\n      </DialogTitle>\r\n      <DialogContent sx={{ pt: 2, pb: 1 }}>\r\n        {/* 预订信息 */}\r\n        <Box sx={{ mb: 2 }}>\r\n          <Typography variant=\"subtitle2\" color=\"text.secondary\" sx={{ mb: 1, fontWeight: 600 }}>\r\n            Booking Info\r\n          </Typography>\r\n          <Box sx={{ position: 'relative', mb: 2 }}>\r\n            {/* ID 和 Status */}\r\n            <Box sx={{ display: 'flex', alignItems: 'flex-start', justifyContent: 'space-between' }}>\r\n              <Typography variant=\"h5\" fontWeight={700} sx={{ letterSpacing: 1 }}>\r\n                #{safeBooking.id || '-'}\r\n              </Typography>\r\n              <Box sx={{ minWidth: 120 }}>\r\n                {getStatusChip(safeBooking.status, { size: 'medium', sx: { fontSize: 18, px: 2, py: 1 } })}\r\n              </Box>\r\n            </Box>\r\n            \r\n            {/* 管理员可以看到的额外信息 */}\r\n            {isAdmin && (\r\n              <Box sx={{ mt: 2, p: 2, bgcolor: '#f8f9fa', borderRadius: 2, border: '1px solid #e9ecef' }}>\r\n                <Typography variant=\"subtitle2\" color=\"text.secondary\" sx={{ mb: 1, fontWeight: 600 }}>\r\n                  Admin Information\r\n                </Typography>\r\n                <Box sx={{ display: 'flex', alignItems: 'center', gap: 4, flexWrap: 'wrap' }}>\r\n                  <Box>\r\n                    <Typography variant=\"caption\" color=\"text.secondary\">Booking Date</Typography>\r\n                    <Typography variant=\"body1\" fontWeight={500}>\r\n                      {formatDate(safeBooking.bookingDate)}\r\n                    </Typography>\r\n                  </Box>\r\n                  {safeBooking.paymentId && (\r\n                    <Box>\r\n                      <Typography variant=\"caption\" color=\"text.secondary\">Payment ID</Typography>\r\n                      <Typography variant=\"body1\" fontWeight={500} sx={{ fontFamily: 'monospace', fontSize: '0.875rem' }}>\r\n                        {safeBooking.paymentId}\r\n                      </Typography>\r\n                    </Box>\r\n                  )}\r\n                </Box>\r\n              </Box>\r\n            )}\r\n            \r\n            {/* 日期和时间 */}\r\n            <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, mt: 1 }}>\r\n              <EventIcon color=\"primary\" sx={{ mr: 0.5 }} />\r\n              <Typography variant=\"body1\" fontWeight={500}>\r\n                {timeInfo.date} {timeInfo.timeRange}\r\n              </Typography>\r\n            </Box>\r\n\r\n            {/* 多 slot 详细信息 - 只在多slot预订时显示 */}\r\n            {timeInfo.isMultiSlot && timeInfo.allSlots && timeInfo.allSlots.length > 1 && (\r\n              <Box sx={{ mt: 1, p: 2, bgcolor: '#f5f5f5', borderRadius: 1 }}>\r\n                <Typography variant=\"caption\" color=\"text.secondary\" sx={{ fontWeight: 600, mb: 1, display: 'block' }}>\r\n                  All Time Slots:\r\n                </Typography>\r\n                {timeInfo.allSlots.map((slot, index) => (\r\n                  <Typography key={index} variant=\"body2\" sx={{ mb: 0.5 }}>\r\n                    • {slot.date} {slot.time} ({slot.duration})\r\n                  </Typography>\r\n                ))}\r\n              </Box>\r\n            )}\r\n\r\n            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mt: 1 }}>\r\n              <Typography variant=\"body2\" color=\"text.secondary\" sx={{ fontWeight: 600 }}>\r\n                Court:\r\n              </Typography>\r\n              <Typography variant=\"body2\" color=\"text.secondary\" sx={{ fontWeight: 500 }}>\r\n                {safeBooking.courtName || '-'}\r\n              </Typography>\r\n              {safeBooking.courtLocation && (\r\n                <Typography variant=\"body2\" color=\"text.secondary\" sx={{ ml: 1 }}>\r\n                  @ {safeBooking.courtLocation}\r\n                </Typography>\r\n              )}\r\n            </Box>\r\n            \r\n            {/* Duration, Total, Payment */}\r\n            <Box sx={{ display: 'flex', alignItems: 'center', gap: 4, mt: 1 }}>\r\n              <Box>\r\n                <Typography variant=\"caption\" color=\"text.secondary\">Duration</Typography>\r\n                <Typography variant=\"body1\" fontWeight={500}>\r\n                  {timeInfo.duration}\r\n                </Typography>\r\n              </Box>\r\n              <Box>\r\n                <Typography variant=\"caption\" color=\"text.secondary\">Total Amount</Typography>\r\n                <Typography variant=\"body1\" fontWeight={500}>\r\n                  {safeBooking.totalAmount != null ? `RM ${safeBooking.totalAmount.toFixed(2)}` : '-'}\r\n                </Typography>\r\n              </Box>\r\n              <Box>\r\n                <Typography variant=\"caption\" color=\"text.secondary\">Payment Method</Typography>\r\n                <Typography variant=\"body1\" fontWeight={500}>\r\n                  {safeBooking.paymentMethod === 'WALLET' ? 'Wallet' : (safeBooking.paymentMethod || '-')}\r\n                </Typography>\r\n              </Box>\r\n            </Box>\r\n            \r\n            {/* Additional Payment Information */}\r\n            {(safeBooking.paymentType || safeBooking.paymentStatus || safeBooking.transactionId) && (\r\n              <Box sx={{ display: 'flex', alignItems: 'center', gap: 4, mt: 1 }}>\r\n                {safeBooking.paymentType && (\r\n                  <Box>\r\n                    <Typography variant=\"caption\" color=\"text.secondary\">Payment Type</Typography>\r\n                    <Typography variant=\"body1\" fontWeight={500}>\r\n                      {safeBooking.paymentType}\r\n                    </Typography>\r\n                  </Box>\r\n                )}\r\n                {safeBooking.paymentStatus && (\r\n                  <Box>\r\n                    <Typography variant=\"caption\" color=\"text.secondary\">Payment Status</Typography>\r\n                    <Typography variant=\"body1\" fontWeight={500}>\r\n                      {safeBooking.paymentStatus}\r\n                    </Typography>\r\n                  </Box>\r\n                )}\r\n                {isAdmin && safeBooking.paymentId && (\r\n                  <Box>\r\n                    <Typography variant=\"caption\" color=\"text.secondary\">Payment ID</Typography>\r\n                    <Typography variant=\"body1\" fontWeight={500} sx={{ fontFamily: 'monospace', fontSize: '0.875rem' }}>\r\n                      {safeBooking.paymentId}\r\n                    </Typography>\r\n                  </Box>\r\n                )}\r\n                {isAdmin && safeBooking.transactionId && (\r\n                  <Box>\r\n                    <Typography variant=\"caption\" color=\"text.secondary\">Transaction ID</Typography>\r\n                    <Typography variant=\"body1\" fontWeight={500} sx={{ fontFamily: 'monospace', fontSize: '0.875rem' }}>\r\n                      {safeBooking.transactionId}\r\n                    </Typography>\r\n                  </Box>\r\n                )}\r\n              </Box>\r\n            )}\r\n          </Box>\r\n        </Box>\r\n        <Divider sx={{ my: 2 }} />\r\n        \r\n        {/* Booking Details */}\r\n        {(safeBooking.purpose || safeBooking.numberOfPlayers || safeBooking.numPaddles || safeBooking.buyBallSet) && (\r\n          <Box sx={{ mb: 2 }}>\r\n            <Typography variant=\"subtitle2\" color=\"text.secondary\" sx={{ mb: 1, fontWeight: 600 }}>\r\n              Booking Details\r\n            </Typography>\r\n            <Box sx={{ display: 'flex', alignItems: 'center', gap: 4, flexWrap: 'wrap' }}>\r\n              {safeBooking.purpose && (\r\n                <Box>\r\n                  <Typography variant=\"caption\" color=\"text.secondary\">Purpose</Typography>\r\n                  <Typography variant=\"body1\" fontWeight={500}>\r\n                    {safeBooking.purpose}\r\n                  </Typography>\r\n                </Box>\r\n              )}\r\n              {safeBooking.numberOfPlayers && (\r\n                <Box>\r\n                  <Typography variant=\"caption\" color=\"text.secondary\">Number of Players</Typography>\r\n                  <Typography variant=\"body1\" fontWeight={500}>\r\n                    {safeBooking.numberOfPlayers}\r\n                  </Typography>\r\n                </Box>\r\n              )}\r\n              {safeBooking.numPaddles > 0 && (\r\n                <Box>\r\n                  <Typography variant=\"caption\" color=\"text.secondary\">Paddles Rented</Typography>\r\n                  <Typography variant=\"body1\" fontWeight={500}>\r\n                    {safeBooking.numPaddles} (RM{safeBooking.numPaddles * 5})\r\n                  </Typography>\r\n                </Box>\r\n              )}\r\n              {safeBooking.buyBallSet && (\r\n                <Box>\r\n                  <Typography variant=\"caption\" color=\"text.secondary\">Ball Set</Typography>\r\n                  <Typography variant=\"body1\" fontWeight={500}>\r\n                    Yes (RM12)\r\n                  </Typography>\r\n                </Box>\r\n              )}\r\n            </Box>\r\n          </Box>\r\n        )}\r\n\r\n        {/* Cost Breakdown - 仅用户端显示 */}\r\n        {!isAdmin && (safeBooking.numPaddles > 0 || safeBooking.buyBallSet) && (\r\n          <Box sx={{ mb: 2 }}>\r\n            <Typography variant=\"subtitle2\" color=\"text.secondary\" sx={{ mb: 1, fontWeight: 600 }}>\r\n              Cost Breakdown\r\n            </Typography>\r\n            <Box sx={{ p: 2, bgcolor: '#f8f9fa', borderRadius: 2, border: '1px solid #e9ecef' }}>\r\n              <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>\r\n                <Typography variant=\"body2\" color=\"text.secondary\">\r\n                  Court Rental ({timeInfo.duration})\r\n                </Typography>\r\n                <Typography variant=\"body2\" fontWeight={500}>\r\n                  RM {(safeBooking.totalAmount - (safeBooking.numPaddles * 5) - (safeBooking.buyBallSet ? 12 : 0)).toFixed(2)}\r\n                </Typography>\r\n              </Box>\r\n              {safeBooking.numPaddles > 0 && (\r\n                <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>\r\n                  <Typography variant=\"body2\" color=\"text.secondary\">\r\n                    Paddles ({safeBooking.numPaddles} × RM5)\r\n                  </Typography>\r\n                  <Typography variant=\"body2\" fontWeight={500}>\r\n                    RM {(safeBooking.numPaddles * 5).toFixed(2)}\r\n                  </Typography>\r\n                </Box>\r\n              )}\r\n              {safeBooking.buyBallSet && (\r\n                <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>\r\n                  <Typography variant=\"body2\" color=\"text.secondary\">\r\n                    Ball Set\r\n                  </Typography>\r\n                  <Typography variant=\"body2\" fontWeight={500}>\r\n                    RM 12.00\r\n                  </Typography>\r\n                </Box>\r\n              )}\r\n              <Divider sx={{ my: 1 }} />\r\n              <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>\r\n                <Typography variant=\"body1\" fontWeight={600}>\r\n                  Total\r\n                </Typography>\r\n                <Typography variant=\"body1\" fontWeight={600} color=\"primary\">\r\n                  RM {safeBooking.totalAmount?.toFixed(2) || '0.00'}\r\n                </Typography>\r\n              </Box>\r\n            </Box>\r\n          </Box>\r\n        )}\r\n        \r\n        {/* 会员信息 - 仅管理员可见 */}\r\n        {isAdmin && (\r\n        <Box sx={{ mb: 2 }}>\r\n          <Typography variant=\"subtitle2\" color=\"text.secondary\" sx={{ mb: 1, fontWeight: 600 }}>\r\n              Member Information\r\n          </Typography>\r\n            <Box sx={{ p: 2, bgcolor: '#f8f9fa', borderRadius: 2, border: '1px solid #e9ecef' }}>\r\n              <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, mb: 2 }}>\r\n            <Avatar sx={{ bgcolor: '#5d3587', width: 48, height: 48 }}>\r\n              <PersonIcon />\r\n            </Avatar>\r\n            <Box>\r\n              <Typography variant=\"body1\" fontWeight={500}>\r\n                {safeBooking.memberName || 'N/A'}\r\n              </Typography>\r\n              <Typography variant=\"body2\" color=\"text.secondary\">\r\n                    Member ID: {safeBooking.memberId || 'N/A'}\r\n                  </Typography>\r\n                </Box>\r\n              </Box>\r\n              <Box sx={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: 2 }}>\r\n                <Box>\r\n                  <Typography variant=\"caption\" color=\"text.secondary\" sx={{ fontWeight: 600 }}>\r\n                    Phone\r\n                  </Typography>\r\n                  <Typography variant=\"body2\" fontWeight={500}>\r\n                    {safeBooking.memberPhone || 'N/A'}\r\n                  </Typography>\r\n                </Box>\r\n                <Box>\r\n                  <Typography variant=\"caption\" color=\"text.secondary\" sx={{ fontWeight: 600 }}>\r\n                    Email\r\n              </Typography>\r\n                  <Typography variant=\"body2\" fontWeight={500}>\r\n                    {safeBooking.memberEmail || 'N/A'}\r\n              </Typography>\r\n            </Box>\r\n          </Box>\r\n        </Box>\r\n          </Box>\r\n        )}\r\n        <Divider sx={{ my: 2 }} />\r\n        {/* 取消信息 */}\r\n        {safeCancellation.reason && (\r\n          <Box sx={{ mb: 2 }}>\r\n            <Typography variant=\"subtitle2\" color=\"text.secondary\" sx={{ mb: 1, fontWeight: 600 }}>\r\n              Cancellation Reason\r\n            </Typography>\r\n            <Typography variant=\"body2\" color=\"text.secondary\">\r\n              {safeCancellation.reason}\r\n            </Typography>\r\n          </Box>\r\n        )}\r\n\r\n        {/* Booking Notes - 仅用户端显示 */}\r\n        {!isAdmin && (\r\n          <Box sx={{ mb: 2 }}>\r\n            <Typography variant=\"subtitle2\" color=\"text.secondary\" sx={{ mb: 1, fontWeight: 600 }}>\r\n              Booking Notes\r\n            </Typography>\r\n            <Box sx={{ p: 2, bgcolor: '#e3f2fd', borderRadius: 2, border: '1px solid #bbdefb' }}>\r\n              <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 1 }}>\r\n                • Please arrive 10 minutes before your booking time ({timeInfo.timeRange})\r\n              </Typography>\r\n              <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 1 }}>\r\n                • Bring your own water bottle and comfortable sports attire\r\n              </Typography>\r\n              {safeBooking.numPaddles > 0 && (\r\n                <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 1 }}>\r\n                  • {safeBooking.numPaddles} paddle{safeBooking.numPaddles > 1 ? 's' : ''} will be available at the court reception\r\n                </Typography>\r\n              )}\r\n              {safeBooking.buyBallSet && (\r\n                <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 1 }}>\r\n                  • Ball set will be provided at the court\r\n                </Typography>\r\n              )}\r\n              {safeBooking.numberOfPlayers && (\r\n                <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 1 }}>\r\n                  • Booking is for {safeBooking.numberOfPlayers} player{safeBooking.numberOfPlayers > 1 ? 's' : ''}\r\n                </Typography>\r\n              )}\r\n              <Typography variant=\"body2\" color=\"text.secondary\">\r\n                • For any issues, please contact our support team\r\n              </Typography>\r\n            </Box>\r\n          </Box>\r\n        )}\r\n        {/* 管理员备注，仅管理员可见 */}\r\n        {isAdmin && safeCancellation.adminRemark && (\r\n          <Box>\r\n            <Typography variant=\"subtitle2\" color=\"text.secondary\" sx={{ mb: 1, fontWeight: 600 }}>\r\n              Admin Remark\r\n            </Typography>\r\n            {editableRemark ? (\r\n              <TextField\r\n                fullWidth\r\n                multiline\r\n                minRows={2}\r\n                value={adminRemark}\r\n                onChange={e => onAdminRemarkChange(e.target.value)}\r\n                placeholder=\"Enter admin remark...\"\r\n                disabled={loading}\r\n              />\r\n            ) : (\r\n              <Typography variant=\"body2\" sx={{ whiteSpace: 'pre-line' }}>\r\n                {safeCancellation.adminRemark}\r\n              </Typography>\r\n            )}\r\n          </Box>\r\n        )}\r\n      </DialogContent>\r\n      <DialogActions sx={{ background: '#fff', borderBottomLeftRadius: 16, borderBottomRightRadius: 16, flexDirection: 'column', alignItems: 'stretch', p: 2 }}>\r\n        {/* Quick Actions - 仅用户端显示 */}\r\n        {!isAdmin && safeBooking.status === 'CONFIRMED' && (\r\n          <Box sx={{ mb: 2, p: 2, bgcolor: '#f5f5f5', borderRadius: 2 }}>\r\n            <Typography variant=\"subtitle2\" color=\"text.secondary\" sx={{ mb: 1, fontWeight: 600 }}>\r\n              Quick Actions\r\n            </Typography>\r\n            <Box sx={{ display: 'flex', gap: 1, flexWrap: 'wrap' }}>\r\n              <Button\r\n                size=\"small\"\r\n                variant=\"outlined\"\r\n                color=\"primary\"\r\n                startIcon={<CalendarTodayIcon />}\r\n                onClick={() => {\r\n                  // 创建日历事件数据\r\n                  const eventTitle = `Pickleball Booking - ${safeBooking.courtName}`;\r\n                  const eventDescription = `Court: ${safeBooking.courtName}\\nLocation: ${safeBooking.courtLocation}\\nPurpose: ${safeBooking.purpose}\\nPlayers: ${safeBooking.numberOfPlayers}`;\r\n                  \r\n                  // 解析日期和时间\r\n                  const bookingDate = new Date(safeBooking.slotDate || safeBooking.bookingDate);\r\n                  const startTime = safeBooking.startTime || '15:00';\r\n                  const endTime = safeBooking.endTime || '16:00';\r\n                  \r\n                  const [startHour, startMinute] = startTime.split(':');\r\n                  const [endHour, endMinute] = endTime.split(':');\r\n                  \r\n                  const startDateTime = new Date(bookingDate);\r\n                  startDateTime.setHours(parseInt(startHour), parseInt(startMinute), 0);\r\n                  \r\n                  const endDateTime = new Date(bookingDate);\r\n                  endDateTime.setHours(parseInt(endHour), parseInt(endMinute), 0);\r\n                  \r\n                  // 创建日历URL\r\n                  const calendarUrl = `https://calendar.google.com/calendar/render?action=TEMPLATE&text=${encodeURIComponent(eventTitle)}&details=${encodeURIComponent(eventDescription)}&dates=${startDateTime.toISOString().replace(/[-:]/g, '').replace(/\\.\\d{3}/, '')}/${endDateTime.toISOString().replace(/[-:]/g, '').replace(/\\.\\d{3}/, '')}&location=${encodeURIComponent(safeBooking.courtLocation || '')}`;\r\n                  \r\n                  // 打开Google Calendar\r\n                  window.open(calendarUrl, '_blank');\r\n                  showSnackbar('Calendar event created! \uD83D\uDCC5', 'success');\r\n                }}\r\n              >\r\n                Add to Calendar\r\n              </Button>\r\n              <Button\r\n                size=\"small\"\r\n                variant=\"outlined\"\r\n                color=\"secondary\"\r\n                startIcon={<ShareIcon />}\r\n                onClick={handleShareMenuOpen}\r\n              >\r\n                Share\r\n              </Button>\r\n            </Box>\r\n          </Box>\r\n        )}\r\n        \r\n        <Box sx={{ display: 'flex', justifyContent: 'flex-end', gap: 1 }}>\r\n        {loading && <CircularProgress size={24} sx={{ mr: 2 }} />}\r\n        <Button onClick={onClose} color=\"primary\" variant=\"outlined\">\r\n          Close\r\n        </Button>\r\n        </Box>\r\n      </DialogActions>\r\n\r\n      {/* Share Menu */}\r\n      <Menu\r\n        anchorEl={shareMenuAnchor}\r\n        open={Boolean(shareMenuAnchor)}\r\n        onClose={handleShareMenuClose}\r\n        anchorOrigin={{\r\n          vertical: 'top',\r\n          horizontal: 'right',\r\n        }}\r\n        transformOrigin={{\r\n          vertical: 'bottom',\r\n          horizontal: 'right',\r\n        }}\r\n      >\r\n        <MenuItem onClick={shareToWhatsApp}>\r\n          <ListItemIcon>\r\n            <WhatsAppIcon sx={{ color: '#25D366' }} />\r\n          </ListItemIcon>\r\n          <ListItemText primary=\"Share via WhatsApp\" />\r\n        </MenuItem>\r\n        <MenuItem onClick={copyToClipboard}>\r\n          <ListItemIcon>\r\n            <ContentCopyIcon />\r\n          </ListItemIcon>\r\n          <ListItemText primary=\"Copy to Clipboard\" />\r\n        </MenuItem>\r\n      </Menu>\r\n      \r\n      {/* Snackbar for notifications */}\r\n      <Snackbar\r\n        open={snackbar.open}\r\n        autoHideDuration={3000}\r\n        onClose={handleCloseSnackbar}\r\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\r\n      >\r\n        <Alert\r\n          onClose={handleCloseSnackbar}\r\n          severity={snackbar.severity}\r\n          sx={{ width: '100%' }}\r\n        >\r\n          {snackbar.message}\r\n        </Alert>\r\n      </Snackbar>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default ModernBookingDetailsDialog;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball-frontend/src/components/admin/ModernBookingDetailsDialog.jsx b/pickleball-frontend/src/components/admin/ModernBookingDetailsDialog.jsx
--- a/pickleball-frontend/src/components/admin/ModernBookingDetailsDialog.jsx	(revision 89327e12854b108d004ebb020d0592b1c618ecaf)
+++ b/pickleball-frontend/src/components/admin/ModernBookingDetailsDialog.jsx	(date 1754148658448)
@@ -263,6 +263,28 @@
                 <Typography variant="body1" fontWeight={500}>
                   {safeBooking.totalAmount != null ? `RM ${safeBooking.totalAmount.toFixed(2)}` : '-'}
                 </Typography>
+                {/* 新增：显示 voucher 信息 */}
+                {safeBooking.voucherUsed && (
+                  <Box sx={{ mt: 1, p: 1.5, bgcolor: '#f0f8ff', borderRadius: 1, border: '1px solid #e3f2fd' }}>
+                    <Typography variant="caption" color="text.secondary" sx={{ fontWeight: 600, display: 'block', mb: 0.5 }}>
+                      💰 Voucher Applied
+                    </Typography>
+                    <Typography variant="body2" sx={{ color: '#666', mb: 0.5 }}>
+                      Original: RM {safeBooking.originalAmount?.toFixed(2)}
+                    </Typography>
+                    <Typography variant="body2" sx={{ color: '#4caf50', fontWeight: 500, mb: 0.5 }}>
+                      Discount: -RM {safeBooking.discountAmount?.toFixed(2)}
+                    </Typography>
+                    <Typography variant="body2" sx={{ color: '#2196f3', fontWeight: 600 }}>
+                      Final: RM {safeBooking.totalAmount?.toFixed(2)}
+                    </Typography>
+                    {safeBooking.voucherCode && (
+                      <Typography variant="caption" sx={{ color: '#666', fontStyle: 'italic' }}>
+                        Code: {safeBooking.voucherCode}
+                      </Typography>
+                    )}
+                  </Box>
+                )}
               </Box>
               <Box>
                 <Typography variant="caption" color="text.secondary">Payment Method</Typography>
Index: pickleball-frontend/src/components/court/BookingHistory.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Container,\r\n  Box,\r\n  Typography,\r\n  Tabs,\r\n  Tab,\r\n  Card,\r\n  CardContent,\r\n  Grid,\r\n  Chip,\r\n  Button,\r\n  Divider,\r\n  Avatar,\r\n  Paper,\r\n  Stack,\r\n  IconButton,\r\n  CircularProgress,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  TextField\r\n} from '@mui/material';\r\nimport {\r\n  SportsTennis as CourtIcon,\r\n  CalendarToday as DateIcon,\r\n  AccessTime as TimeIcon,\r\n  People as PlayersIcon,\r\n  MonetizationOn as AmountIcon,\r\n  Cancel as CancelIcon,\r\n  RateReview as ReviewIcon,\r\n  ArrowBack as BackIcon,\r\n  FilterList as FilterIcon,\r\n  Visibility as ViewIcon\r\n} from '@mui/icons-material';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { styled } from '@mui/material/styles';\r\nimport api from '../../api/axiosConfig';\r\nimport ModernBookingDetailsDialog from '../admin/ModernBookingDetailsDialog';\r\n\r\n// Modern color palette\r\nconst COLORS = {\r\n  primary: '#6366f1',        // Modern indigo\r\n  primaryHover: '#4f46e5',   // Darker indigo\r\n  primaryLight: '#f0f0ff',   // Light indigo background\r\n  success: '#10b981',        // Modern green\r\n  successHover: '#059669',   // Darker green\r\n  successLight: '#ecfdf5',   // Light green background\r\n  warning: '#f59e0b',        // Modern amber\r\n  warningHover: '#d97706',   // Darker amber\r\n  warningLight: '#fffbeb',   // Light amber background\r\n  error: '#ef4444',          // Modern red\r\n  errorHover: '#dc2626',     // Darker red\r\n  errorLight: '#fef2f2',     // Light red background\r\n  neutral: '#6b7280',        // Modern gray\r\n  neutralHover: '#4b5563',   // Darker gray\r\n  neutralLight: '#f9fafb',   // Light gray background\r\n  background: '#ffffff',     // Clean white\r\n  surface: '#f8fafc',        // Subtle surface color\r\n};\r\n\r\n// Styled components\r\nconst GradientCard = styled(Card)(({ theme }) => ({\r\n  background: `linear-gradient(145deg, ${COLORS.surface}, ${COLORS.background})`,\r\n  borderRadius: '20px',\r\n  boxShadow: '0 4px 20px rgba(0, 0, 0, 0.08)',\r\n  border: '1px solid rgba(99, 102, 241, 0.1)',\r\n  transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)',\r\n  '&:hover': {\r\n    transform: 'translateY(-8px)',\r\n    boxShadow: '0 12px 40px rgba(0, 0, 0, 0.12)',\r\n    borderColor: 'rgba(99, 102, 241, 0.2)'\r\n  },\r\n}));\r\n\r\nconst StatusChip = styled(Chip)(({ status, theme }) => {\r\n  const statusStyles = {\r\n    upcoming: {\r\n      backgroundColor: COLORS.warningLight,\r\n      color: COLORS.warning,\r\n      border: `1px solid ${COLORS.warning}20`\r\n    },\r\n    completed: {\r\n      backgroundColor: COLORS.successLight,\r\n      color: COLORS.success,\r\n      border: `1px solid ${COLORS.success}20`\r\n    },\r\n    cancelled: {\r\n      backgroundColor: COLORS.errorLight,\r\n      color: COLORS.error,\r\n      border: `1px solid ${COLORS.error}20`\r\n    },\r\n    CONFIRMED: {\r\n      backgroundColor: COLORS.warningLight,\r\n      color: COLORS.warning,\r\n      border: `1px solid ${COLORS.warning}20`\r\n    },\r\n    COMPLETED: {\r\n      backgroundColor: COLORS.successLight,\r\n      color: COLORS.success,\r\n      border: `1px solid ${COLORS.success}20`\r\n    },\r\n    CANCELLED: {\r\n      backgroundColor: COLORS.errorLight,\r\n      color: COLORS.error,\r\n      border: `1px solid ${COLORS.error}20`\r\n    },\r\n    CANCELLATION_REQUESTED: {\r\n      backgroundColor: COLORS.errorLight,\r\n      color: COLORS.error,\r\n      border: `1px solid ${COLORS.error}20`\r\n    }\r\n  };\r\n\r\n  const style = statusStyles[status] || {\r\n    backgroundColor: COLORS.neutralLight,\r\n    color: COLORS.neutral,\r\n    border: `1px solid ${COLORS.neutral}20`\r\n  };\r\n\r\n  return {\r\n    ...style,\r\n    fontWeight: 600,\r\n    borderRadius: '12px',\r\n    padding: '6px 12px',\r\n    fontSize: '0.75rem',\r\n    textTransform: 'uppercase',\r\n    letterSpacing: '0.5px'\r\n  };\r\n});\r\n\r\nconst ModernButton = styled(Button)(({ variant, color }) => {\r\n  const baseStyles = {\r\n    borderRadius: '12px',\r\n    fontWeight: 600,\r\n    textTransform: 'none',\r\n    fontSize: '0.875rem',\r\n    padding: '8px 16px',\r\n    transition: 'all 0.2s cubic-bezier(0.4, 0, 0.2, 1)',\r\n    border: 'none',\r\n    boxShadow: 'none',\r\n    '&:hover': {\r\n      transform: 'translateY(-1px)',\r\n      boxShadow: '0 4px 12px rgba(0, 0, 0, 0.15)',\r\n    }\r\n  };\r\n\r\n  if (variant === 'contained') {\r\n    if (color === 'primary') {\r\n      return {\r\n        ...baseStyles,\r\n        backgroundColor: COLORS.primary,\r\n        color: '#ffffff',\r\n        '&:hover': {\r\n          ...baseStyles['&:hover'],\r\n          backgroundColor: COLORS.primaryHover,\r\n        }\r\n      };\r\n    }\r\n    if (color === 'error') {\r\n      return {\r\n        ...baseStyles,\r\n        backgroundColor: COLORS.error,\r\n        color: '#ffffff',\r\n        '&:hover': {\r\n          ...baseStyles['&:hover'],\r\n          backgroundColor: COLORS.errorHover,\r\n        }\r\n      };\r\n    }\r\n    if (color === 'success') {\r\n      return {\r\n        ...baseStyles,\r\n        backgroundColor: COLORS.success,\r\n        color: '#ffffff',\r\n        '&:hover': {\r\n          ...baseStyles['&:hover'],\r\n          backgroundColor: COLORS.successHover,\r\n        }\r\n      };\r\n    }\r\n  }\r\n\r\n  if (variant === 'outlined') {\r\n    if (color === 'error') {\r\n      return {\r\n        ...baseStyles,\r\n        backgroundColor: 'transparent',\r\n        color: COLORS.error,\r\n        border: `2px solid ${COLORS.error}`,\r\n        '&:hover': {\r\n          ...baseStyles['&:hover'],\r\n          backgroundColor: COLORS.errorLight,\r\n          borderColor: COLORS.errorHover,\r\n          color: COLORS.errorHover,\r\n        }\r\n      };\r\n    }\r\n    if (color === 'primary') {\r\n      return {\r\n        ...baseStyles,\r\n        backgroundColor: 'transparent',\r\n        color: COLORS.primary,\r\n        border: `2px solid ${COLORS.primary}`,\r\n        '&:hover': {\r\n          ...baseStyles['&:hover'],\r\n          backgroundColor: COLORS.primaryLight,\r\n          borderColor: COLORS.primaryHover,\r\n          color: COLORS.primaryHover,\r\n        }\r\n      };\r\n    }\r\n  }\r\n\r\n  return baseStyles;\r\n});\r\n\r\n\r\nconst BookingHistory = () => {\r\n  const navigate = useNavigate();\r\n  const [tabValue, setTabValue] = useState('all');\r\n  const [showFilters, setShowFilters] = useState(false);\r\n  const [bookings, setBookings] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [cancellingId, setCancellingId] = useState(null);\r\n  const [cancelStatus, setCancelStatus] = useState({});\r\n  const [cancelDialogOpen, setCancelDialogOpen] = useState(false);\r\n  const [cancelReason, setCancelReason] = useState('');\r\n  const [cancelBookingId, setCancelBookingId] = useState(null);\r\n  const [detailsDialogOpen, setDetailsDialogOpen] = useState(false);\r\n  const [selectedBooking, setSelectedBooking] = useState(null);\r\n\r\n  const fetchBookingHistory = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      const response = await api.get('/member/bookings');\r\n      console.log(\"API Response:\", response.data);\r\n\r\n      // 数据规范化处理 - 根据实际API响应调整字段映射\r\n      const normalizedBookings = response.data.map(booking => {\r\n        console.log('Processing booking:', booking);\r\n        console.log('Court ID from API:', booking.courtId);\r\n        \r\n        const normalizedBooking = {\r\n        id: booking.id || booking.bookingId, // 确保ID字段正确\r\n        bookingId: booking.id || booking.bookingId,\r\n          courtId: booking.courtId, // 直接从API获取\r\n          courtName: booking.courtName || \"AAA Pickleball Court\",\r\n          courtLocation: booking.location || \"123 Sports Complex, Kuala Lumpur\",\r\n          slotDate: booking.date, // 使用API中的date字段\r\n          startTime: booking.startTime, // 使用API中的startTime字段\r\n          endTime: booking.endTime, // 使用API中的endTime字段\r\n        numberOfPlayers: booking.playerCount || booking.numberOfPlayers || 4,\r\n        totalAmount: booking.amount ? Number(booking.amount) : booking.price || 50.00,\r\n        status: booking.bookingStatus || booking.status || \"CONFIRMED\",\r\n        purpose: booking.purpose || \"Recreational\",\r\n        numPaddles: booking.numPaddles || 0,\r\n        buyBallSet: booking.buyBallSet || false,\r\n        bookingDate: booking.bookingDate || booking.createdAt,\r\n        // 支付相关字段\r\n        paymentMethod: booking.payment?.paymentMethod || booking.paymentMethod || \"Wallet\",\r\n        paymentType: booking.payment?.paymentType || booking.paymentType,\r\n        paymentStatus: booking.payment?.status || booking.paymentStatus || \"COMPLETED\",\r\n        transactionId: booking.payment?.transactionId || booking.transactionId,\r\n        // 会员信息\r\n        memberId: booking.memberId || booking.member?.id,\r\n        // 多slot支持\r\n        bookingSlots: booking.bookingSlots || [],\r\n        durationHours: booking.durationHours || 1,\r\n          // 评价状态\r\n          hasReviewed: booking.hasReviewed || false,\r\n        };\r\n        \r\n        console.log('Normalized booking:', normalizedBooking);\r\n        console.log('Extracted courtId:', normalizedBooking.courtId);\r\n        console.log('Extracted slotDate:', normalizedBooking.slotDate);\r\n        console.log('Extracted startTime:', normalizedBooking.startTime);\r\n        console.log('Extracted endTime:', normalizedBooking.endTime);\r\n        \r\n        return normalizedBooking;\r\n      });\r\n\r\n      console.log(\"Normalized Bookings:\", normalizedBookings);\r\n      setBookings(normalizedBookings);\r\n    } catch (err) {\r\n      console.error('Failed to fetch booking history:', err);\r\n      setError(err.response?.data?.message || 'Failed to load bookings');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchBookingHistory();\r\n  }, []);\r\n\r\n  const handleTabChange = (event, newValue) => {\r\n    setTabValue(newValue);\r\n  };\r\n\r\n  const handleBookCourt = () => {\r\n    navigate('/courts');\r\n  };\r\n\r\n  const handleCancelBooking = (id) => {\r\n    setCancelBookingId(id);\r\n    setCancelReason('');\r\n    setCancelDialogOpen(true);\r\n  };\r\n\r\n  const handleConfirmCancel = () => {\r\n    if (!cancelReason.trim()) {\r\n      alert('Please provide a reason for cancellation.');\r\n      return;\r\n    }\r\n    setCancellingId(cancelBookingId);\r\n    setCancelStatus(prev => ({ ...prev, [cancelBookingId]: 'processing' }));\r\n    api.post(`/member/bookings/${cancelBookingId}/cancel`, { reason: cancelReason })\r\n      .then(response => {\r\n        setBookings(prev => prev.map(booking =>\r\n          booking.bookingId === cancelBookingId\r\n            ? { ...booking, status: 'CANCELLATION_REQUESTED' }\r\n            : booking\r\n        ));\r\n        setCancelStatus(prev => ({ ...prev, [cancelBookingId]: 'requested' }));\r\n        alert('Cancellation request submitted successfully!');\r\n      })\r\n      .catch(error => {\r\n        console.error('Cancellation failed:', error);\r\n        setCancelStatus(prev => ({ ...prev, [cancelBookingId]: 'error' }));\r\n        let errorMsg = 'Unknown error';\r\n        if (error.response) {\r\n          errorMsg = `Server error: ${error.response.status}`;\r\n          if (error.response.data?.message) {\r\n            errorMsg += ` - ${error.response.data.message}`;\r\n          }\r\n        } else if (error.request) {\r\n          errorMsg = 'No response from server';\r\n        } else {\r\n          errorMsg = error.message;\r\n        }\r\n        alert(`Cancellation failed: ${errorMsg}`);\r\n      })\r\n      .finally(() => {\r\n        setCancellingId(null);\r\n        setCancelDialogOpen(false);\r\n        setCancelBookingId(null);\r\n      });\r\n  };\r\n\r\n  const handleCancelDialogClose = () => {\r\n    setCancelDialogOpen(false);\r\n    setCancelBookingId(null);\r\n    setCancelReason('');\r\n  };\r\n\r\n  const handleLeaveReview = (booking) => {\r\n    console.log('=== Review Button Clicked ===');\r\n    console.log('Booking data:', booking);\r\n    console.log('Booking ID:', booking.bookingId);\r\n    console.log('Court Name:', booking.courtName);\r\n    console.log('Court Location:', booking.courtLocation);\r\n    console.log('Slot Date:', booking.slotDate);\r\n    console.log('Start Time:', booking.startTime);\r\n    console.log('End Time:', booking.endTime);\r\n    console.log('Duration Hours:', booking.durationHours);\r\n    console.log('Has Reviewed:', booking.hasReviewed);\r\n    \r\n    // 检查预订是否包含必要的信息\r\n    if (!booking.bookingId) {\r\n      console.error('Missing booking ID');\r\n      console.log('Falling back to select page');\r\n      // 如果信息不全，回退到选择页面\r\n      navigate('/profile/my-bookings');\r\n      return;\r\n    }\r\n\r\n    const navigationState = {\r\n      targetType: 'COURT',\r\n      courtName: booking.courtName,\r\n      courtLocation: booking.courtLocation,\r\n      slotDate: booking.slotDate,\r\n      startTime: booking.startTime,\r\n      endTime: booking.endTime,\r\n      durationHours: booking.durationHours,\r\n      bookingId: String(booking.bookingId), // 确保bookingId是字符串类型\r\n      isEditing: false, // 新建评价\r\n      isViewReview: booking.hasReviewed // 如果已经评价过，设置为View Review模式\r\n    };\r\n\r\n    console.log('Navigation state:', navigationState);\r\n    console.log('Navigating to /feedback...');\r\n\r\n    // 直接导航到反馈页面，并传递预订信息\r\n    navigate('/feedback', {\r\n      state: navigationState\r\n    });\r\n  };\r\n\r\n  const handleViewDetails = (booking) => {\r\n    setSelectedBooking(booking);\r\n    setDetailsDialogOpen(true);\r\n  };\r\n\r\n  const handleCloseDetails = () => {\r\n    setDetailsDialogOpen(false);\r\n    setSelectedBooking(null);\r\n  };\r\n\r\n  // 日期格式化函数\r\n  const formatDate = (dateString) => {\r\n    if (!dateString) return 'N/A';\r\n\r\n    // 尝试解析日期\r\n    const date = new Date(dateString);\r\n\r\n    if (isNaN(date.getTime())) {\r\n      // 处理可能的日期格式如 \"YYYY-MM-DD\"\r\n      if (/^\\d{4}-\\d{2}-\\d{2}$/.test(dateString)) {\r\n        const [year, month, day] = dateString.split('-');\r\n        return new Date(year, month - 1, day).toLocaleDateString('en-US', {\r\n          month: 'short',\r\n          day: 'numeric',\r\n          year: 'numeric'\r\n        });\r\n      }\r\n      return 'Invalid Date';\r\n    }\r\n\r\n    return date.toLocaleDateString('en-US', {\r\n      month: 'short',\r\n      day: 'numeric',\r\n      year: 'numeric'\r\n    });\r\n  };\r\n\r\n  // 时间格式化函数\r\n  const formatTime = (timeString) => {\r\n    if (!timeString) return '';\r\n\r\n    // 处理 HH:mm 格式\r\n    if (/^\\d{2}:\\d{2}$/.test(timeString)) {\r\n      const timeParts = timeString.split(':');\r\n      let hours = parseInt(timeParts[0]);\r\n      const minutes = timeParts[1];\r\n      const period = hours >= 12 ? 'PM' : 'AM';\r\n      hours = hours % 12 || 12;\r\n      return `${hours}:${minutes} ${period}`;\r\n    }\r\n\r\n    return timeString; // 返回原始值\r\n  };\r\n\r\n  // 过滤预订\r\n  const filteredBookings = tabValue === 'all'\r\n    ? bookings\r\n    : bookings.filter(booking => {\r\n      if (tabValue === 'upcoming') return booking.status === 'CONFIRMED';\r\n      if (tabValue === 'completed') return booking.status === 'COMPLETED';\r\n      if (tabValue === 'cancelled') return booking.status === 'CANCELLED' || booking.status === 'CANCELLATION_REQUESTED';\r\n      return true;\r\n    });\r\n\r\n  if (loading) {\r\n    return (\r\n      <Container style={{\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        height: '80vh',\r\n        flexDirection: 'column'\r\n      }}>\r\n        <CircularProgress size={60} sx={{ color: COLORS.primary }} />\r\n        <Typography variant=\"h6\" sx={{ ml: 2, mt: 2, color: COLORS.neutral }}>\r\n          Loading booking history...\r\n        </Typography>\r\n      </Container>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <Container sx={{ py: 4, textAlign: 'center' }}>\r\n        <Typography variant=\"h5\" sx={{ color: COLORS.error, mb: 2 }}>\r\n          {error}\r\n        </Typography>\r\n        <ModernButton\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          onClick={fetchBookingHistory}\r\n          sx={{ mt: 2 }}\r\n        >\r\n          Retry\r\n        </ModernButton>\r\n      </Container>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\" sx={{ py: 4 }}>\r\n      <Box sx={{ display: 'flex', alignItems: 'center', mb: 4 }}>\r\n        <IconButton\r\n          onClick={() => navigate('/profile')}\r\n          sx={{\r\n            mr: 2,\r\n            backgroundColor: COLORS.neutralLight,\r\n            color: COLORS.neutral,\r\n            '&:hover': {\r\n              backgroundColor: COLORS.primary,\r\n              color: '#ffffff'\r\n            }\r\n          }}\r\n        >\r\n          <BackIcon />\r\n        </IconButton>\r\n        <Typography variant=\"h4\" component=\"h1\" sx={{\r\n          fontWeight: 700,\r\n          flexGrow: 1,\r\n          background: `linear-gradient(135deg, ${COLORS.primary}, ${COLORS.primaryHover})`,\r\n          WebkitBackgroundClip: 'text',\r\n          WebkitTextFillColor: 'transparent'\r\n        }}>\r\n          My Bookings\r\n        </Typography>\r\n        <IconButton\r\n          onClick={() => setShowFilters(!showFilters)}\r\n          sx={{\r\n            backgroundColor: showFilters ? COLORS.primaryLight : COLORS.neutralLight,\r\n            color: showFilters ? COLORS.primary : COLORS.neutral,\r\n            '&:hover': {\r\n              backgroundColor: COLORS.primary,\r\n              color: '#ffffff'\r\n            }\r\n          }}\r\n        >\r\n          <FilterIcon />\r\n        </IconButton>\r\n      </Box>\r\n\r\n      {/* Filter Tabs */}\r\n      <Paper sx={{\r\n        mb: 3,\r\n        borderRadius: 4,\r\n        boxShadow: '0 2px 10px rgba(0, 0, 0, 0.06)',\r\n        border: '1px solid rgba(99, 102, 241, 0.1)',\r\n        overflow: 'hidden'\r\n      }}>\r\n        <Tabs\r\n          value={tabValue}\r\n          onChange={handleTabChange}\r\n          variant=\"scrollable\"\r\n          scrollButtons=\"auto\"\r\n          sx={{\r\n            '& .MuiTabs-indicator': {\r\n              height: 3,\r\n              borderRadius: '3px 3px 0 0',\r\n              backgroundColor: COLORS.primary,\r\n            },\r\n            '& .MuiTab-root': {\r\n              fontWeight: 600,\r\n              color: COLORS.neutral,\r\n              '&.Mui-selected': {\r\n                color: COLORS.primary,\r\n              }\r\n            }\r\n          }}\r\n        >\r\n          <Tab label=\"All\" value=\"all\" />\r\n          <Tab label=\"Upcoming\" value=\"upcoming\" />\r\n          <Tab label=\"Completed\" value=\"completed\" />\r\n          <Tab label=\"Cancelled\" value=\"cancelled\" />\r\n        </Tabs>\r\n      </Paper>\r\n\r\n      {/* Additional Filters */}\r\n      {showFilters && (\r\n        <Paper sx={{\r\n          p: 3,\r\n          mb: 3,\r\n          borderRadius: 4,\r\n          boxShadow: '0 2px 10px rgba(0, 0, 0, 0.06)',\r\n          border: '1px solid rgba(99, 102, 241, 0.1)',\r\n          backgroundColor: COLORS.surface\r\n        }}>\r\n          <Typography variant=\"subtitle1\" sx={{ mb: 2, fontWeight: 600, color: COLORS.neutral }}>\r\n            Additional Filters\r\n          </Typography>\r\n          <Stack direction=\"row\" spacing={1} sx={{ flexWrap: 'wrap', gap: 1 }}>\r\n            <Chip\r\n              label=\"This Week\"\r\n              variant=\"outlined\"\r\n              sx={{\r\n                borderColor: COLORS.primary,\r\n                color: COLORS.primary,\r\n                '&:hover': {\r\n                  backgroundColor: COLORS.primaryLight,\r\n                }\r\n              }}\r\n            />\r\n            <Chip\r\n              label=\"This Month\"\r\n              variant=\"outlined\"\r\n              sx={{\r\n                borderColor: COLORS.primary,\r\n                color: COLORS.primary,\r\n                '&:hover': {\r\n                  backgroundColor: COLORS.primaryLight,\r\n                }\r\n              }}\r\n            />\r\n            <Chip\r\n              label=\"Past Bookings\"\r\n              variant=\"outlined\"\r\n              sx={{\r\n                borderColor: COLORS.primary,\r\n                color: COLORS.primary,\r\n                '&:hover': {\r\n                  backgroundColor: COLORS.primaryLight,\r\n                }\r\n              }}\r\n            />\r\n            <Chip\r\n              label=\"Group Bookings\"\r\n              variant=\"outlined\"\r\n              sx={{\r\n                borderColor: COLORS.primary,\r\n                color: COLORS.primary,\r\n                '&:hover': {\r\n                  backgroundColor: COLORS.primaryLight,\r\n                }\r\n              }}\r\n            />\r\n            <Chip\r\n              label=\"Solo Bookings\"\r\n              variant=\"outlined\"\r\n              sx={{\r\n                borderColor: COLORS.primary,\r\n                color: COLORS.primary,\r\n                '&:hover': {\r\n                  backgroundColor: COLORS.primaryLight,\r\n                }\r\n              }}\r\n            />\r\n          </Stack>\r\n        </Paper>\r\n      )}\r\n\r\n      {/* Bookings List */}\r\n      {filteredBookings.length > 0 ? (\r\n        <Grid container spacing={3}>\r\n          {filteredBookings.map((booking) => (\r\n            <Grid item xs={12} sm={6} md={4} key={booking.bookingId}>\r\n              <GradientCard>\r\n                <CardContent sx={{ p: 3 }}>\r\n                  <Box sx={{ display: 'flex', alignItems: 'center', mb: 3 }}>\r\n                    <Avatar sx={{\r\n                      bgcolor: COLORS.primary,\r\n                      mr: 2,\r\n                      width: 56,\r\n                      height: 56,\r\n                      boxShadow: `0 4px 12px ${COLORS.primary}30`\r\n                    }}>\r\n                      <CourtIcon sx={{ fontSize: 28 }} />\r\n                    </Avatar>\r\n                    <Box>\r\n                      <Typography variant=\"h6\" sx={{ fontWeight: 700, color: COLORS.neutral }}>\r\n                        {booking.courtName}\r\n                      </Typography>\r\n                      <Typography variant=\"body2\" sx={{ color: COLORS.neutral, opacity: 0.7 }}>\r\n                        {booking.courtLocation}\r\n                      </Typography>\r\n                    </Box>\r\n                  </Box>\r\n\r\n                  <Divider sx={{ my: 3, borderColor: `${COLORS.primary}20` }} />\r\n\r\n                  <Grid container spacing={2} sx={{ mb: 3 }}>\r\n                    <Grid item xs={6}>\r\n                      <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                        <DateIcon fontSize=\"small\" sx={{ mr: 1, color: COLORS.primary }} />\r\n                        <Typography variant=\"body2\" sx={{ color: COLORS.neutral, fontWeight: 500 }}>\r\n                          {formatDate(booking.slotDate)}\r\n                        </Typography>\r\n                      </Box>\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                      <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                        <TimeIcon fontSize=\"small\" sx={{ mr: 1, color: COLORS.primary }} />\r\n                        <Typography variant=\"body2\" sx={{ color: COLORS.neutral, fontWeight: 500 }}>\r\n                          {formatTime(booking.startTime)} - {formatTime(booking.endTime)}\r\n                        </Typography>\r\n                      </Box>\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                      <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                        <PlayersIcon fontSize=\"small\" sx={{ mr: 1, color: COLORS.primary }} />\r\n                        <Typography variant=\"body2\" sx={{ color: COLORS.neutral, fontWeight: 500 }}>\r\n                          {booking.numberOfPlayers} players\r\n                        </Typography>\r\n                      </Box>\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                      <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                        <AmountIcon fontSize=\"small\" sx={{ mr: 1, color: COLORS.primary }} />\r\n                        <Typography variant=\"body2\" sx={{ color: COLORS.neutral, fontWeight: 500 }}>\r\n                          MYR {booking.totalAmount.toFixed(2)}\r\n                        </Typography>\r\n                      </Box>\r\n                    </Grid>\r\n                  </Grid>\r\n\r\n                  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mt: 3 }}>\r\n                    <StatusChip\r\n                      label={\r\n                        booking.status === 'CONFIRMED' ? 'Upcoming' :\r\n                        booking.status === 'COMPLETED' ? 'Completed' :\r\n                        booking.status === 'CANCELLED' ? 'Cancelled' :\r\n                        booking.status === 'CANCELLATION_REQUESTED' ? 'Cancellation Requested' :\r\n                        booking.status\r\n                      }\r\n                      status={booking.status}\r\n                    />\r\n\r\n                    <Box sx={{ display: 'flex', gap: 1 }}>\r\n                      <ModernButton\r\n                        variant=\"outlined\"\r\n                        color=\"primary\"\r\n                        size=\"small\"\r\n                        startIcon={<ViewIcon />}\r\n                        onClick={() => handleViewDetails(booking)}\r\n                      >\r\n                        Details\r\n                      </ModernButton>\r\n\r\n                    {booking.status === 'CONFIRMED' && (\r\n                      cancelStatus[booking.bookingId] === 'processing' ? (\r\n                        <CircularProgress size={24} />\r\n                      ) : (\r\n                        <ModernButton\r\n                          variant=\"outlined\"\r\n                          color=\"error\"\r\n                          size=\"small\"\r\n                          startIcon={<CancelIcon />}\r\n                          onClick={() => handleCancelBooking(booking.bookingId)}\r\n                          disabled={cancelStatus[booking.bookingId] === 'requested'}\r\n                        >\r\n                          {cancelStatus[booking.bookingId] === 'requested'\r\n                            ? \"Requested\"\r\n                            : \"Cancel\"}\r\n                        </ModernButton>\r\n                      )\r\n                    )}\r\n\r\n                    {booking.status === 'COMPLETED' && (\r\n                      booking.hasReviewed ? (\r\n                        <ModernButton\r\n                          variant=\"outlined\"\r\n                          color=\"success\"\r\n                          size=\"small\"\r\n                          startIcon={<ViewIcon />}\r\n                          onClick={() => handleLeaveReview(booking)}\r\n                        >\r\n                          View Review\r\n                        </ModernButton>\r\n                      ) : (\r\n                      <ModernButton\r\n                        variant=\"outlined\"\r\n                        color=\"primary\"\r\n                        size=\"small\"\r\n                        startIcon={<ReviewIcon />}\r\n                          onClick={() => handleLeaveReview(booking)}\r\n                      >\r\n                        Review\r\n                      </ModernButton>\r\n                      )\r\n                    )}\r\n                    </Box>\r\n                  </Box>\r\n                </CardContent>\r\n              </GradientCard>\r\n            </Grid>\r\n          ))}\r\n        </Grid>\r\n      ) : (\r\n        <Box sx={{\r\n          textAlign: 'center',\r\n          py: 8,\r\n          bgcolor: COLORS.surface,\r\n          borderRadius: 6,\r\n          boxShadow: '0 4px 20px rgba(0, 0, 0, 0.08)',\r\n          border: '1px solid rgba(99, 102, 241, 0.1)'\r\n        }}>\r\n          <Box sx={{\r\n            width: 140,\r\n            height: 140,\r\n            background: `linear-gradient(135deg, ${COLORS.primaryLight}, ${COLORS.primary}20)`,\r\n            borderRadius: '50%',\r\n            display: 'inline-flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            mb: 3,\r\n            border: `2px solid ${COLORS.primary}30`\r\n          }}>\r\n            <CourtIcon sx={{ fontSize: 70, color: COLORS.primary }} />\r\n          </Box>\r\n          <Typography variant=\"h5\" sx={{ mb: 2, fontWeight: 700, color: COLORS.neutral }}>\r\n            No Bookings Found\r\n          </Typography>\r\n          <Typography variant=\"body1\" sx={{\r\n            color: COLORS.neutral,\r\n            opacity: 0.7,\r\n            maxWidth: 500,\r\n            mx: 'auto',\r\n            mb: 4,\r\n            lineHeight: 1.6\r\n          }}>\r\n            Dive into the world of sports and start booking your favorite venues.\r\n          </Typography>\r\n          <ModernButton\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            size=\"large\"\r\n            onClick={handleBookCourt}\r\n            sx={{\r\n              px: 6,\r\n              py: 1.5,\r\n              fontSize: '1.1rem',\r\n              fontWeight: 700,\r\n            }}\r\n          >\r\n            Book a Court Now\r\n          </ModernButton>\r\n        </Box>\r\n      )}\r\n\r\n      {/* Cancel Reason Dialog */}\r\n      <Dialog open={cancelDialogOpen} onClose={handleCancelDialogClose} maxWidth=\"xs\" fullWidth>\r\n        <DialogTitle>Cancel Booking</DialogTitle>\r\n        <DialogContent>\r\n          <Typography variant=\"body1\" sx={{ mb: 2 }}>\r\n            Please provide a reason for cancelling this booking:\r\n          </Typography>\r\n          <TextField\r\n            label=\"Cancellation Reason\"\r\n            value={cancelReason}\r\n            onChange={e => setCancelReason(e.target.value)}\r\n            fullWidth\r\n            required\r\n            multiline\r\n            minRows={3}\r\n            autoFocus\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleCancelDialogClose} color=\"primary\">\r\n            Back\r\n          </Button>\r\n          <Button onClick={handleConfirmCancel} color=\"error\" variant=\"contained\">\r\n            Confirm Cancel\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Booking Details Dialog */}\r\n      <ModernBookingDetailsDialog\r\n        open={detailsDialogOpen}\r\n        onClose={handleCloseDetails}\r\n        booking={selectedBooking}\r\n        loading={false}\r\n        editableRemark={false}\r\n        isAdmin={false}\r\n      />\r\n\r\n      {/* Footer */}\r\n      <Box sx={{ mt: 8, textAlign: 'center', color: COLORS.neutral, opacity: 0.6 }}>\r\n        <Typography variant=\"body2\">\r\n          © 2025 Pickleball App. All rights reserved.\r\n        </Typography>\r\n      </Box>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default BookingHistory;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball-frontend/src/components/court/BookingHistory.jsx b/pickleball-frontend/src/components/court/BookingHistory.jsx
--- a/pickleball-frontend/src/components/court/BookingHistory.jsx	(revision 89327e12854b108d004ebb020d0592b1c618ecaf)
+++ b/pickleball-frontend/src/components/court/BookingHistory.jsx	(date 1754148656018)
@@ -273,6 +273,10 @@
         durationHours: booking.durationHours || 1,
           // 评价状态
           hasReviewed: booking.hasReviewed || false,
+        // 新增：显示 voucher 信息
+        voucherUsed: booking.voucherUsed || false,
+        originalAmount: booking.originalAmount || 0,
+        discountAmount: booking.discountAmount || 0,
         };
         
         console.log('Normalized booking:', normalizedBooking);
@@ -710,6 +714,20 @@
                           MYR {booking.totalAmount.toFixed(2)}
                         </Typography>
                       </Box>
+                      {/* 新增：显示 voucher 信息 */}
+                      {booking.voucherUsed && (
+                        <Box sx={{ mt: 1, p: 1, bgcolor: '#f0f8ff', borderRadius: 1, border: '1px solid #e3f2fd' }}>
+                          <Typography variant="caption" sx={{ color: '#666', fontWeight: 600, display: 'block', mb: 0.5 }}>
+                            💰 Voucher Used
+                          </Typography>
+                          <Typography variant="caption" sx={{ color: '#666', display: 'block' }}>
+                            Original: RM {booking.originalAmount?.toFixed(2)}
+                          </Typography>
+                          <Typography variant="caption" sx={{ color: '#4caf50', fontWeight: 500, display: 'block' }}>
+                            Saved: RM {booking.discountAmount?.toFixed(2)}
+                          </Typography>
+                        </Box>
+                      )}
                     </Grid>
                   </Grid>
 
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/ClassSessionServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.service;\r\n\r\nimport com.pickleball_backend.pickleball.dto.ClassSessionDto;\r\nimport com.pickleball_backend.pickleball.dto.RecurringSessionRequestDto;\r\nimport com.pickleball_backend.pickleball.entity.*;\r\nimport com.pickleball_backend.pickleball.exception.*;\r\nimport com.pickleball_backend.pickleball.repository.*;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.springframework.stereotype.Service;\r\nimport org.springframework.transaction.annotation.Transactional;\r\nimport org.springframework.scheduling.annotation.Scheduled;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\n\r\nimport java.time.DayOfWeek;\r\nimport java.time.LocalDate;\r\nimport java.time.LocalDateTime;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\nimport java.util.UUID;\r\nimport java.time.format.DateTimeFormatter;\r\n\r\n@Service\r\n@RequiredArgsConstructor\r\npublic class ClassSessionServiceImpl implements ClassSessionService {\r\n\r\n    @Autowired\r\n    private ClassSessionRepository sessionRepository;\r\n    private final CourtRepository courtRepository;\r\n    private final UserRepository userRepository;\r\n    private final ClassRegistrationRepository registrationRepository;\r\n    private final BookingRepository bookingRepository;\r\n    private final EmailService emailService;\r\n    private final MemberRepository memberRepository;\r\n    private final PaymentRepository paymentRepository;\r\n    private final WalletRepository walletRepository;\r\n    private final EscrowAccountService escrowAccountService;\r\n    private final WalletTransactionRepository walletTransactionRepository;\r\n    private static final Logger logger = LoggerFactory.getLogger(ClassSessionServiceImpl.class);\r\n\r\n\r\n    @Override\r\n    @Transactional\r\n    public ClassSession createClassSession(ClassSessionDto sessionDto, User coach) throws ConflictException, ResourceNotFoundException {\r\n        // 驗證教練\r\n        if (!\"COACH\".equalsIgnoreCase(coach.getUserType())) {\r\n            throw new ValidationException(\"User is not a coach\");\r\n        }\r\n        // 驗證場地\r\n        Court court = courtRepository.findById(sessionDto.getCourtId())\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"Court not found\"));\r\n        // 檢查時間衝突 (教練)\r\n        if (sessionRepository.existsByCoachIdAndStartTimeBetweenAndStatusNot(\r\n                coach.getId(), sessionDto.getStartTime(), sessionDto.getEndTime(), \"CANCELLED\")) {\r\n            throw new ConflictException(\"Coach has scheduling conflict\");\r\n        }\r\n        // 檢查時間衝突 (場地)\r\n        if (sessionRepository.existsByCourtIdAndStartTimeBetweenAndStatusNot(\r\n                sessionDto.getCourtId(), sessionDto.getStartTime(), sessionDto.getEndTime(), \"CANCELLED\")) {\r\n            throw new ConflictException(\"Court is already booked\");\r\n        }\r\n        // 檢查普通預約衝突\r\n        if (bookingRepository.existsActiveBookingForCourtAndTime(\r\n                sessionDto.getCourtId(),\r\n                sessionDto.getStartTime().toLocalDate(),\r\n                sessionDto.getStartTime().toLocalTime(),\r\n                sessionDto.getEndTime().toLocalTime())) {\r\n            throw new ConflictException(\"Court has regular booking at this time\");\r\n        }\r\n        // 創建課程\r\n        ClassSession session = new ClassSession();\r\n        session.setCoach(coach);\r\n        session.setCourt(court);\r\n        session.setStartTime(sessionDto.getStartTime());\r\n        session.setEndTime(sessionDto.getEndTime());\r\n        session.setMaxParticipants(sessionDto.getMaxParticipants());\r\n        session.setDescription(sessionDto.getDescription());\r\n        session.setPrice(sessionDto.getPrice());\r\n        session.setStatus(\"AVAILABLE\");\r\n        session.setSlotType(\"COACH_SESSION\");\r\n        session.setCurrentParticipants(0);\r\n        session.setTitle(sessionDto.getTitle());\r\n        return sessionRepository.save(session);\r\n    }\r\n\r\n    @Override\r\n    @Transactional\r\n    public ClassSession updateClassSession(Integer sessionId, ClassSessionDto sessionDto)\r\n            throws ResourceNotFoundException, ConflictException {\r\n\r\n        ClassSession session = sessionRepository.findById(sessionId)\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"Session not found\"));\r\n\r\n        // 只允许修改未开始的课程\r\n        if (!\"AVAILABLE\".equals(session.getStatus()) && !\"FULL\".equals(session.getStatus())) {\r\n            throw new ValidationException(\"Only available or full sessions can be modified\");\r\n        }\r\n\r\n        // 冲突检查\r\n        if (sessionRepository.existsConflictForUpdate(\r\n                sessionId,\r\n                sessionDto.getCourtId(),\r\n                sessionDto.getStartTime(),\r\n                sessionDto.getEndTime())) {\r\n            throw new ConflictException(\"Time slot conflict detected\");\r\n        }\r\n\r\n        // 更新字段\r\n        session.setStartTime(sessionDto.getStartTime());\r\n        session.setEndTime(sessionDto.getEndTime());\r\n        session.setMaxParticipants(sessionDto.getMaxParticipants());\r\n        session.setDescription(sessionDto.getDescription());\r\n        session.setPrice(sessionDto.getPrice());\r\n        session.setTitle(sessionDto.getTitle());\r\n\r\n        // 如果修改后人数少于最大人数，恢复为可用状态\r\n        if (session.getCurrentParticipants() < sessionDto.getMaxParticipants() &&\r\n                \"FULL\".equals(session.getStatus())) {\r\n            session.setStatus(\"AVAILABLE\");\r\n        }\r\n\r\n        return sessionRepository.save(session);\r\n    }\r\n\r\n    @Override\r\n    @Transactional\r\n    public void cancelClassSession(Integer sessionId, boolean force, String reason)\r\n            throws ResourceNotFoundException, ConflictException {\r\n\r\n        ClassSession session = sessionRepository.findById(sessionId)\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"Session not found\"));\r\n\r\n        // 檢查24小時限制\r\n        LocalDateTime now = LocalDateTime.now();\r\n        long hoursUntilSession = java.time.temporal.ChronoUnit.HOURS.between(now, session.getStartTime());\r\n        \r\n        // 如果課程開始前24小時內，不允許取消（除非是教練強制取消）\r\n        if (hoursUntilSession <= 24 && !force) {\r\n            throw new ConflictException(\"Cannot cancel class session within 24 hours of start time. Use force=true to override.\");\r\n        }\r\n\r\n        // 如果有报名且不强制取消\r\n        if (session.getCurrentParticipants() > 0 && !force) {\r\n            throw new ConflictException(\"Session has participants. Use force=true to cancel\");\r\n        }\r\n\r\n        // 通知已报名用户并退款\r\n        if (session.getCurrentParticipants() > 0) {\r\n            List<ClassRegistration> registrations = registrationRepository.findByClassSessionId(sessionId);\r\n            for (ClassRegistration registration : registrations) {\r\n                Member member = registration.getMember();\r\n                if (member != null) {\r\n                    // 使用託管帳戶退款\r\n                    escrowAccountService.refundFromEscrow(member.getUser(), session.getPrice(), session);\r\n                    // 通知\r\n                    String email = member.getUser().getEmail();\r\n                    String msg = \"Your class on \" + session.getStartTime() + \" has been cancelled.\";\r\n                    if (reason != null && !reason.isEmpty()) {\r\n                        msg += \"\\nReason: \" + reason;\r\n                    }\r\n                    emailService.sendEmail(email, \"Class Cancelled\", msg);\r\n                }\r\n            }\r\n        }\r\n\r\n        session.setStatus(\"CANCELLED\");\r\n        sessionRepository.save(session);\r\n    }\r\n\r\n    @Override\r\n    public List<ClassSession> getCoachSchedule(Integer coachId, LocalDateTime start, LocalDateTime end) {\r\n        return sessionRepository.findScheduleByCoachIdAndPeriodWithVenue(coachId, start, end);\r\n    }\r\n\r\n    @Override\r\n    @Transactional\r\n    public boolean registerUserForSession(Integer sessionId, Integer userId)\r\n            throws ConflictException, ResourceNotFoundException {\r\n\r\n        ClassSession session = sessionRepository.findById(sessionId)\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"Session not found\"));\r\n\r\n        // 新增：教練保留時段只能在前一天或當天預約\r\n        if (\"COACH_AVAILABILITY\".equals(session.getSlotType())) {\r\n            LocalDateTime now = LocalDateTime.now();\r\n            LocalDateTime slotDate = session.getStartTime().toLocalDate().atStartOfDay();\r\n            LocalDateTime today = now.toLocalDate().atStartOfDay();\r\n            LocalDateTime yesterday = today.minusDays(1);\r\n            if (!(slotDate.equals(today) || slotDate.equals(yesterday))) {\r\n                throw new ConflictException(\"This coach slot can only be booked on the day before or the same day.\");\r\n            }\r\n        }\r\n\r\n        User user = userRepository.findById(userId)\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"User not found\"));\r\n\r\n        Member member = memberRepository.findByUserId(userId);\r\n        if (member == null) {\r\n            throw new ValidationException(\"User is not a member\");\r\n        }\r\n\r\n        // Replacement class: only allow original students\r\n        if (session.getReplacementForSessionId() != null) {\r\n            Integer originSessionId = session.getReplacementForSessionId();\r\n            ClassSession origin = sessionRepository.findById(originSessionId).orElse(null);\r\n            boolean isOriginalStudent = false;\r\n            if (origin != null && origin.getRegistrations() != null) {\r\n                for (ClassRegistration reg : origin.getRegistrations()) {\r\n                    if (reg.getMember() != null && reg.getMember().getId().equals(member.getId())) {\r\n                        isOriginalStudent = true;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            if (!isOriginalStudent) {\r\n                throw new ConflictException(\"Only students from the original cancelled class can register for this replacement class.\");\r\n            }\r\n        }\r\n\r\n        // 檢查名額\r\n        if (session.getCurrentParticipants() >= session.getMaxParticipants()) {\r\n            throw new ConflictException(\"Session is full\");\r\n        }\r\n\r\n        // 檢查是否已報名\r\n        if (registrationRepository.existsByClassSessionIdAndMemberId(sessionId, member.getId())) {\r\n            throw new ConflictException(\"User already registered for this session\");\r\n        }\r\n\r\n        // Handle payment: replacement class is always free\r\n        double price = session.getReplacementForSessionId() != null ? 0.0 : session.getPrice();\r\n        processPayment(member, price, session);\r\n\r\n        // 創建報名記錄\r\n        ClassRegistration registration = new ClassRegistration();\r\n        registration.setClassSession(session);\r\n        registration.setMember(member);\r\n        registration.setRegistrationDate(LocalDateTime.now());\r\n        registrationRepository.save(registration);\r\n\r\n        // 更新課程人數\r\n        session.setCurrentParticipants(session.getCurrentParticipants() + 1);\r\n        if (session.getCurrentParticipants() >= session.getMaxParticipants()) {\r\n            session.setStatus(\"FULL\");\r\n        }\r\n        // 新增：如果達到開班人數（如 3 人），自動 setStatus(\"CONFIRMED\")\r\n        if (session.getCurrentParticipants() >= 4) {\r\n            session.setStatus(\"CONFIRMED\");\r\n        }\r\n        // 新增：報名成功後寄送 email 通知\r\n        emailService.sendClassRegistrationConfirmation(\r\n            user.getEmail(),\r\n            session,\r\n            member\r\n        );\r\n        // 新增：可加 app 通知（如有推播模組）\r\n        sessionRepository.save(session);\r\n\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    @Transactional\r\n    public boolean registerUserForMultipleSessions(Integer userId, List<Integer> sessionIds, String paymentMethod) throws ConflictException, ResourceNotFoundException {\r\n        User user = userRepository.findById(userId)\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"User not found\"));\r\n        Member member = memberRepository.findByUserId(userId);\r\n        if (member == null) {\r\n            throw new ValidationException(\"User is not a member\");\r\n        }\r\n        List<ClassSession> sessions = sessionRepository.findAllByIdWithCourt(sessionIds);\r\n        if (sessions.size() != sessionIds.size()) {\r\n            throw new ResourceNotFoundException(\"Some sessions not found\");\r\n        }\r\n        // 檢查所有 session 是否都可報名\r\n        for (ClassSession session : sessions) {\r\n            if (session.getCurrentParticipants() >= session.getMaxParticipants()) {\r\n                throw new ConflictException(\"Session is full: \" + session.getId());\r\n            }\r\n            if (registrationRepository.existsByClassSessionIdAndMemberId(session.getId(), member.getId())) {\r\n                throw new ConflictException(\"Already registered for session: \" + session.getId());\r\n            }\r\n        }\r\n        // 計算總金額\r\n        double total = sessions.stream().mapToDouble(ClassSession::getPrice).sum();\r\n        \r\n        // 使用託管帳戶系統處理支付（只扣一次）\r\n        if (\"wallet\".equalsIgnoreCase(paymentMethod)) {\r\n            // 為每個課程創建託管支付記錄\r\n            for (ClassSession session : sessions) {\r\n                escrowAccountService.depositToEscrow(user, session.getPrice(), session);\r\n            }\r\n        } else {\r\n            // 其他付款方式可擴充\r\n        }\r\n        // 為每個 session 建立報名記錄\r\n        for (ClassSession session : sessions) {\r\n            ClassRegistration registration = new ClassRegistration();\r\n            registration.setClassSession(session);\r\n            registration.setMember(member);\r\n            registration.setRegistrationDate(LocalDateTime.now());\r\n            // 託管支付記錄會在 EscrowAccountService 中創建\r\n            registrationRepository.save(registration);\r\n            session.setCurrentParticipants(session.getCurrentParticipants() + 1);\r\n            if (session.getCurrentParticipants() >= session.getMaxParticipants()) {\r\n                session.setStatus(\"FULL\");\r\n            }\r\n            if (session.getCurrentParticipants() >= 4) {\r\n                session.setStatus(\"CONFIRMED\");\r\n            }\r\n            emailService.sendClassRegistrationConfirmation(\r\n                user.getEmail(),\r\n                session,\r\n                member\r\n            );\r\n            sessionRepository.save(session);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public List<ClassSession> getAvailableSessions(Integer courtId, LocalDateTime start, LocalDateTime end) {\r\n        return sessionRepository.findAvailableSessionsWithRegistrations(courtId, start, end);\r\n    }\r\n\r\n    @Override\r\n    public boolean hasCourtConflict(Integer courtId, java.time.LocalDateTime start, java.time.LocalDateTime end) {\r\n        // 檢查課程衝突\r\n        boolean sessionConflict = sessionRepository.existsByCourtIdAndStartTimeBetweenAndStatusNot(\r\n                courtId, start, end, \"CANCELLED\");\r\n        // 檢查booking衝突\r\n        boolean bookingConflict = bookingRepository.existsActiveBookingForCourtAndTime(\r\n                courtId,\r\n                start.toLocalDate(),\r\n                start.toLocalTime(),\r\n                end.toLocalTime()\r\n        );\r\n        return sessionConflict || bookingConflict;\r\n    }\r\n\r\n    private void processPayment(Member member, double amount, ClassSession session) {\r\n        // 使用託管帳戶系統處理支付\r\n        escrowAccountService.depositToEscrow(member.getUser(), amount, session);\r\n    }\r\n\r\n    private void refundPayment(Member member, double amount) {\r\n        // 1. 退款到钱包\r\n        Wallet wallet = walletRepository.findByMemberId(member.getId())\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"Wallet not found\"));\r\n        wallet.setBalance(wallet.getBalance() + amount);\r\n        walletRepository.save(wallet);\r\n\r\n        // 2. 创建退款记录\r\n        Payment refund = new Payment();\r\n        refund.setAmount(amount);\r\n        refund.setRefundDate(LocalDateTime.now());\r\n        refund.setPaymentMethod(\"WALLET\");\r\n        refund.setStatus(\"REFUNDED\");\r\n        refund.setPaymentType(\"CLASS_SESSION_REFUND\");\r\n        paymentRepository.save(refund);\r\n    }\r\n\r\n    @Transactional\r\n    @Override\r\n    public List<ClassSession> createRecurringSessions(RecurringSessionRequestDto request, User coach)\r\n            throws ConflictException, ResourceNotFoundException {\r\n\r\n        List<ClassSession> sessions = new ArrayList<>();\r\n        LocalDate currentDate = request.getStartDate();\r\n        String recurringGroupId = UUID.randomUUID().toString();\r\n\r\n        while (!currentDate.isAfter(request.getEndDate())) {\r\n            if (request.getDaysOfWeek().contains(currentDate.getDayOfWeek())) {\r\n                LocalDateTime startDateTime = LocalDateTime.of(currentDate, request.getStartTime());\r\n                LocalDateTime endDateTime = LocalDateTime.of(currentDate, request.getEndTime());\r\n\r\n                ClassSessionDto sessionDto = new ClassSessionDto();\r\n                sessionDto.setCourtId(request.getCourtId());\r\n                sessionDto.setStartTime(startDateTime);\r\n                sessionDto.setEndTime(endDateTime);\r\n                sessionDto.setMaxParticipants(request.getMaxParticipants());\r\n                sessionDto.setDescription(request.getDescription());\r\n                sessionDto.setPrice(request.getPrice());\r\n                sessionDto.setTitle(request.getTitle());\r\n                sessionDto.setSlotType(\"RECURRING_SESSION\");\r\n\r\n                try {\r\n                    ClassSession session = createClassSession(sessionDto, coach);\r\n                    session.setRecurring(true);\r\n                    session.setRecurrencePattern(\"WEEKLY\");\r\n                    session.setRecurrenceDays(request.getDaysOfWeek().stream()\r\n                            .map(DayOfWeek::name)\r\n                            .collect(Collectors.joining(\",\")));\r\n                    session.setRecurringGroupId(recurringGroupId);\r\n                    sessions.add(session);\r\n                } catch (ConflictException e) {\r\n                    // 处理时间冲突 - 跳过冲突日期\r\n                    logger.warn(\"时间冲突跳过日期 {}: {}\", currentDate, e.getMessage());\r\n                }\r\n            }\r\n            currentDate = currentDate.plusDays(1);\r\n        }\r\n\r\n        if (sessions.isEmpty()) {\r\n            throw new ConflictException(\"所有选定日期都存在时间冲突\");\r\n        }\r\n\r\n        return sessions;\r\n    }\r\n\r\n    @Transactional\r\n    public void settleClassSession(Integer sessionId) {\r\n        ClassSession session = sessionRepository.findById(sessionId)\r\n            .orElseThrow(() -> new ResourceNotFoundException(\"Session not found\"));\r\n        if (!\"COMPLETED\".equals(session.getStatus())) {\r\n            throw new IllegalStateException(\"Session not completed yet\");\r\n        }\r\n        \r\n        // 使用託管帳戶系統進行分帳\r\n        escrowAccountService.settleClassSession(session);\r\n        \r\n        // 記錄結算明細\r\n        session.setNote(\"Settled via escrow system: 80% to coach, 20% to platform\");\r\n        sessionRepository.save(session);\r\n    }\r\n\r\n    private double getDurationHours(ClassSession session) {\r\n        return java.time.Duration.between(session.getStartTime(), session.getEndTime()).toMinutes() / 60.0;\r\n    }\r\n\r\n    @Scheduled(cron = \"0 */5 * * * ?\") // 每5分鐘檢查一次\r\n    public void autoSettleStartedSessions() {\r\n        LocalDateTime now = LocalDateTime.now();\r\n        LocalDateTime fiveMinutesAgo = now.minusMinutes(5);\r\n        \r\n        // 查找剛剛開始的課程（狀態為 CONFIRMED 且開始時間在5分鐘內）\r\n        List<ClassSession> startedSessions = sessionRepository.findByStatusAndStartTimeBetween(\"CONFIRMED\", fiveMinutesAgo, now);\r\n        \r\n        for (ClassSession session : startedSessions) {\r\n            try {\r\n                // 更新課程狀態為進行中\r\n                session.setStatus(\"IN_PROGRESS\");\r\n                sessionRepository.save(session);\r\n                \r\n                // 進行託管分帳\r\n                escrowAccountService.settleClassSession(session);\r\n                \r\n                logger.info(\"Auto-settled session {} via escrow system\", session.getId());\r\n            } catch (Exception e) {\r\n                logger.error(\"Failed to auto-settle session \" + session.getId(), e);\r\n            }\r\n        }\r\n    }\r\n\r\n    @Scheduled(cron = \"0 0 2 * * ?\") // 每天凌晨2點跑\r\n    public void autoSettleCompletedSessions() {\r\n        List<ClassSession> completed = sessionRepository.findByStatus(\"COMPLETED\");\r\n        for (ClassSession session : completed) {\r\n            try {\r\n                settleClassSession(session.getId());\r\n            } catch (Exception e) {\r\n                logger.error(\"Failed to settle session \" + session.getId(), e);\r\n            }\r\n        }\r\n    }\r\n\r\n    @Scheduled(cron = \"0 0 1 * * ?\") // 每天凌晨1點跑\r\n    public void autoCancelEmptySessions() {\r\n        List<ClassSession> upcoming = sessionRepository.findUpcomingSessionsWithoutParticipants();\r\n        for (ClassSession session : upcoming) {\r\n            session.setStatus(\"CANCELLED\");\r\n            sessionRepository.save(session);\r\n            // 可選：通知教練\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public List<ClassSession> getSessionsByIds(List<Integer> sessionIds) {\r\n        return sessionRepository.findAllByIdWithCourt(sessionIds);\r\n    }\r\n\r\n    @Override\r\n    public ClassSession getSessionById(Integer sessionId) {\r\n        return sessionRepository.findById(sessionId).orElse(null);\r\n    }\r\n\r\n    @Override\r\n    public List<ClassSession> getSessionsByRecurringGroupId(String recurringGroupId) {\r\n        return sessionRepository.findByRecurringGroupId(recurringGroupId);\r\n    }\r\n\r\n    @Scheduled(cron = \"0 0 * * * *\") // 每小時執行一次\r\n    @Transactional\r\n    public void autoDistributeClassRevenue() {\r\n        try {\r\n            LocalDateTime now = LocalDateTime.now();\r\n            LocalDateTime twentyFourHoursFromNow = now.plusHours(24);\r\n            \r\n            // 查找24小時內開始且狀態為CONFIRMED的課程\r\n            List<ClassSession> upcomingSessions = sessionRepository.findByStartTimeBetweenAndStatus(\r\n                now, twentyFourHoursFromNow, \"CONFIRMED\"\r\n            );\r\n            \r\n            for (ClassSession session : upcomingSessions) {\r\n                // 檢查是否已經分配過收入\r\n                if (session.getRevenueDistributed() != null && session.getRevenueDistributed()) {\r\n                    continue;\r\n                }\r\n                \r\n                // 計算總收入\r\n                double totalRevenue = 0.0;\r\n                if (session.getRegistrations() != null) {\r\n                    totalRevenue = session.getRegistrations().stream()\r\n                        .mapToDouble(registration -> session.getPrice())\r\n                        .sum();\r\n                }\r\n                \r\n                if (totalRevenue > 0) {\r\n                    // 分配收入\r\n                    distributeSessionRevenue(session, totalRevenue);\r\n                    \r\n                    // 標記為已分配\r\n                    session.setRevenueDistributed(true);\r\n                    sessionRepository.save(session);\r\n                    \r\n                    // 發送通知給教練\r\n                    sendRevenueDistributionNotification(session, totalRevenue);\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            logger.error(\"Error in autoDistributeClassRevenue: \", e);\r\n        }\r\n    }\r\n    \r\n    private void distributeSessionRevenue(ClassSession session, double totalRevenue) {\r\n        try {\r\n            // 計算分配金額\r\n            double platformShare = totalRevenue * 0.20; // 平台 20%\r\n            double coachShare = totalRevenue * 0.80;    // 教練 80%\r\n            \r\n            // 獲取教練的錢包\r\n            User coach = session.getCoach();\r\n            Member coachMember = memberRepository.findByUser(coach);\r\n            if (coachMember == null) {\r\n                throw new ResourceNotFoundException(\"Coach member not found\");\r\n            }\r\n            \r\n            Wallet coachWallet = walletRepository.findByMemberId(coachMember.getId())\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"Coach wallet not found\"));\r\n            \r\n            // 更新教練錢包餘額\r\n            double newBalance = coachWallet.getBalance() + coachShare;\r\n            coachWallet.setBalance(newBalance);\r\n            walletRepository.save(coachWallet);\r\n            \r\n            // 記錄錢包交易\r\n            WalletTransaction coachTransaction = new WalletTransaction();\r\n            coachTransaction.setWalletId(coachWallet.getId());\r\n            coachTransaction.setTransactionType(\"COACH_INCOME\");\r\n            coachTransaction.setAmount(coachShare);\r\n            coachTransaction.setBalanceBefore(coachWallet.getBalance() - coachShare);\r\n            coachTransaction.setBalanceAfter(newBalance);\r\n            coachTransaction.setFrozenBefore(coachWallet.getFrozenBalance());\r\n            coachTransaction.setFrozenAfter(coachWallet.getFrozenBalance());\r\n            coachTransaction.setReferenceType(\"CLASS_SESSION\");\r\n            coachTransaction.setReferenceId(session.getId());\r\n            coachTransaction.setDescription(\"Class session revenue: \" + session.getTitle() + \" (80% share)\");\r\n            coachTransaction.setStatus(\"COMPLETED\");\r\n            walletTransactionRepository.save(coachTransaction); \r\n            \r\n            // 記錄平台收入（可以創建一個平台錢包或記錄到系統日誌）\r\n            logger.info(\"Platform revenue from session {}: RM {:.2f}\", session.getId(), platformShare);\r\n            \r\n        } catch (Exception e) {\r\n            logger.error(\"Error distributing revenue for session {}: \", session.getId(), e);\r\n            throw new RuntimeException(\"Failed to distribute session revenue\", e);\r\n        }\r\n    }\r\n    \r\n    private void sendRevenueDistributionNotification(ClassSession session, double totalRevenue) {\r\n        try {\r\n            User coach = session.getCoach();\r\n            double coachShare = totalRevenue * 0.80;\r\n            \r\n            String subject = \"Revenue Distributed - Class Session\";\r\n            String message = String.format(\r\n                \"Your class session '%s' scheduled for %s has been automatically settled.\\n\\n\" +\r\n                \"Total Revenue: RM %.2f\\n\" +\r\n                \"Your Share (80%%): RM %.2f\\n\" +\r\n                \"Platform Fee (20%%): RM %.2f\\n\\n\" +\r\n                \"The amount has been credited to your wallet.\",\r\n                session.getTitle(),\r\n                session.getStartTime().format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\")),\r\n                totalRevenue,\r\n                coachShare,\r\n                totalRevenue * 0.20\r\n            );\r\n            \r\n            emailService.sendEmail(coach.getEmail(), subject, message);\r\n        } catch (Exception e) {\r\n            logger.error(\"Error sending revenue distribution notification: \", e);\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/ClassSessionServiceImpl.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/ClassSessionServiceImpl.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/ClassSessionServiceImpl.java	(revision 89327e12854b108d004ebb020d0592b1c618ecaf)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/ClassSessionServiceImpl.java	(date 1754331152968)
@@ -17,7 +17,9 @@
 import java.time.LocalDate;
 import java.time.LocalDateTime;
 import java.util.ArrayList;
+import java.util.HashMap;
 import java.util.List;
+import java.util.Map;
 import java.util.stream.Collectors;
 import java.util.UUID;
 import java.time.format.DateTimeFormatter;
@@ -38,6 +40,7 @@
     private final WalletRepository walletRepository;
     private final EscrowAccountService escrowAccountService;
     private final WalletTransactionRepository walletTransactionRepository;
+    private final MembershipTierRepository membershipTierRepository;
     private static final Logger logger = LoggerFactory.getLogger(ClassSessionServiceImpl.class);
 
 
@@ -114,12 +117,72 @@
         session.setDescription(sessionDto.getDescription());
         session.setPrice(sessionDto.getPrice());
         session.setTitle(sessionDto.getTitle());
+        session.setAllowReplacement(sessionDto.getAllowReplacement());
 
         // 如果修改后人数少于最大人数，恢复为可用状态
         if (session.getCurrentParticipants() < sessionDto.getMaxParticipants() &&
                 "FULL".equals(session.getStatus())) {
             session.setStatus("AVAILABLE");
         }
+
+        return sessionRepository.save(session);
+    }
+
+    @Override
+    @Transactional
+    public ClassSession partialUpdateClassSession(Integer sessionId, Map<String, Object> updates)
+            throws ResourceNotFoundException, ConflictException {
+
+        ClassSession session = sessionRepository.findById(sessionId)
+                .orElseThrow(() -> new ResourceNotFoundException("Session not found"));
+
+        // 只允许修改未开始的课程
+        if (!"AVAILABLE".equals(session.getStatus()) && !"FULL".equals(session.getStatus())) {
+            throw new ValidationException("Only available or full sessions can be modified");
+        }
+
+        // 调试信息
+        System.out.println("=== Partial Update Debug ===");
+        System.out.println("Session ID: " + sessionId);
+        System.out.println("Updates map: " + updates);
+        for (Map.Entry<String, Object> entry : updates.entrySet()) {
+            System.out.println("Key: " + entry.getKey() + ", Value: " + entry.getValue() + ", Type: " + entry.getValue().getClass().getSimpleName());
+        }
+
+        // 只更新提供的字段
+        if (updates.containsKey("maxParticipants")) {
+            Object maxParticipantsObj = updates.get("maxParticipants");
+            Integer maxParticipants;
+            if (maxParticipantsObj instanceof Integer) {
+                maxParticipants = (Integer) maxParticipantsObj;
+            } else if (maxParticipantsObj instanceof Double) {
+                maxParticipants = ((Double) maxParticipantsObj).intValue();
+            } else {
+                maxParticipants = Integer.valueOf(maxParticipantsObj.toString());
+            }
+            System.out.println("Setting maxParticipants: " + maxParticipants);
+            session.setMaxParticipants(maxParticipants);
+            
+            // 如果修改后人数少于最大人数，恢复为可用状态
+            if (session.getCurrentParticipants() < maxParticipants &&
+                    "FULL".equals(session.getStatus())) {
+                session.setStatus("AVAILABLE");
+            }
+        }
+        
+        if (updates.containsKey("price")) {
+            Object priceObj = updates.get("price");
+            Double price;
+            if (priceObj instanceof Integer) {
+                price = ((Integer) priceObj).doubleValue();
+            } else if (priceObj instanceof Double) {
+                price = (Double) priceObj;
+            } else {
+                price = Double.valueOf(priceObj.toString());
+            }
+            System.out.println("Setting price: " + price);
+            session.setPrice(price);
+        }
 
         return sessionRepository.save(session);
     }
@@ -263,7 +326,7 @@
 
     @Override
     @Transactional
-    public boolean registerUserForMultipleSessions(Integer userId, List<Integer> sessionIds, String paymentMethod) throws ConflictException, ResourceNotFoundException {
+    public Map<String, Object> registerUserForMultipleSessions(Integer userId, List<Integer> sessionIds, String paymentMethod, Integer numPaddles, Boolean buyBallSet) throws ConflictException, ResourceNotFoundException {
         User user = userRepository.findById(userId)
                 .orElseThrow(() -> new ResourceNotFoundException("User not found"));
         Member member = memberRepository.findByUserId(userId);
@@ -283,8 +346,19 @@
                 throw new ConflictException("Already registered for session: " + session.getId());
             }
         }
-        // 計算總金額
-        double total = sessions.stream().mapToDouble(ClassSession::getPrice).sum();
+        // 計算總金額（課程費用 + 設備費用）
+        double sessionTotal = sessions.stream().mapToDouble(ClassSession::getPrice).sum();
+        double equipmentTotal = 0.0;
+        
+        // 計算設備費用
+        if (numPaddles != null && numPaddles > 0) {
+            equipmentTotal += numPaddles * 5.0; // 每個球拍 RM5
+        }
+        if (buyBallSet != null && buyBallSet) {
+            equipmentTotal += 12.0; // 球組 RM12
+        }
+        
+        double total = sessionTotal + equipmentTotal;
         
         // 使用託管帳戶系統處理支付（只扣一次）
         if ("wallet".equalsIgnoreCase(paymentMethod)) {
@@ -292,6 +366,11 @@
             for (ClassSession session : sessions) {
                 escrowAccountService.depositToEscrow(user, session.getPrice(), session);
             }
+            // 如果有設備費用，也創建託管記錄
+            if (equipmentTotal > 0) {
+                // 創建一個虛擬的 session 來處理設備費用
+                escrowAccountService.depositToEscrow(user, equipmentTotal, null);
+            }
         } else {
             // 其他付款方式可擴充
         }
@@ -317,7 +396,28 @@
             );
             sessionRepository.save(session);
         }
-        return true;
+        
+        // 返回詳細的響應數據
+        Map<String, Object> response = new HashMap<>();
+        response.put("success", true);
+        response.put("totalAmount", total);
+        response.put("sessionTotal", sessionTotal);
+        response.put("equipmentTotal", equipmentTotal);
+        response.put("numPaddles", numPaddles != null ? numPaddles : 0);
+        response.put("buyBallSet", buyBallSet != null ? buyBallSet : false);
+        response.put("paymentMethod", paymentMethod);
+        
+        // 計算積分獎勵
+        int pointsEarned = (int) Math.floor(total);
+        response.put("pointsEarned", pointsEarned);
+        
+        // 獲取用戶當前的積分餘額
+        if (member != null) {
+            response.put("currentTierPointBalance", member.getTierPointBalance());
+            response.put("currentRewardPointBalance", member.getRewardPointBalance());
+        }
+        
+        return response;
     }
 
     @Override
@@ -371,8 +471,17 @@
         LocalDate currentDate = request.getStartDate();
         String recurringGroupId = UUID.randomUUID().toString();
 
+        // 星期幾對應的數字 (1=Monday, 2=Tuesday, ..., 7=Sunday)
+        Map<String, Integer> dayMap = Map.of(
+            "MON", 1, "TUES", 2, "WED", 3, "THURS", 4, "FRI", 5, "SAT", 6, "SUN", 7
+        );
+
         while (!currentDate.isAfter(request.getEndDate())) {
-            if (request.getDaysOfWeek().contains(currentDate.getDayOfWeek())) {
+            // 檢查當前日期是否符合選擇的星期幾
+            int currentDayOfWeek = currentDate.getDayOfWeek().getValue(); // 1=Monday, 2=Tuesday, ..., 7=Sunday
+            Integer targetDay = dayMap.get(request.getDayOfWeek());
+            
+            if (targetDay != null && currentDayOfWeek == targetDay) {
                 LocalDateTime startDateTime = LocalDateTime.of(currentDate, request.getStartTime());
                 LocalDateTime endDateTime = LocalDateTime.of(currentDate, request.getEndTime());
 
@@ -390,9 +499,7 @@
                     ClassSession session = createClassSession(sessionDto, coach);
                     session.setRecurring(true);
                     session.setRecurrencePattern("WEEKLY");
-                    session.setRecurrenceDays(request.getDaysOfWeek().stream()
-                            .map(DayOfWeek::name)
-                            .collect(Collectors.joining(",")));
+                    session.setRecurrenceDays(request.getDayOfWeek());
                     session.setRecurringGroupId(recurringGroupId);
                     sessions.add(session);
                 } catch (ConflictException e) {
@@ -400,11 +507,12 @@
                     logger.warn("时间冲突跳过日期 {}: {}", currentDate, e.getMessage());
                 }
             }
+            
             currentDate = currentDate.plusDays(1);
         }
 
         if (sessions.isEmpty()) {
-            throw new ConflictException("所有选定日期都存在时间冲突");
+            throw new ConflictException("所有选定日期都存在时间冲突或没有符合选择的星期几的日期");
         }
 
         return sessions;
@@ -440,28 +548,128 @@
         
         for (ClassSession session : startedSessions) {
             try {
-                // 更新課程狀態為進行中
+                // 只更新課程狀態為進行中，不進行收入分配
                 session.setStatus("IN_PROGRESS");
                 sessionRepository.save(session);
                 
-                // 進行託管分帳
-                escrowAccountService.settleClassSession(session);
-                
-                logger.info("Auto-settled session {} via escrow system", session.getId());
+                logger.info("Updated session {} status to IN_PROGRESS", session.getId());
+            } catch (Exception e) {
+                logger.error("Failed to update session " + session.getId(), e);
+            }
+        }
+    }
+    
+    // 檢查所有已開始但未結算的課程
+    private void autoSettleAllStartedSessions() {
+        try {
+            LocalDateTime now = LocalDateTime.now();
+            
+            // 只查找 COMPLETED 狀態的課程
+            List<ClassSession> completedSessions = sessionRepository.findAll().stream()
+                .filter(session -> session.getStartTime() != null && 
+                                 session.getStartTime().isBefore(now) &&
+                                 "COMPLETED".equals(session.getStatus()))
+                .collect(Collectors.toList());
+            
+            for (ClassSession session : completedSessions) {
+                try {
+                    // 檢查是否已經有收入分配記錄
+                    List<Payment> existingSettlements = paymentRepository.findByPaymentTypeAndStatus("COACH_INCOME", "COMPLETED")
+                        .stream()
+                        .filter(payment -> payment.getTransactionId() != null && 
+                                         payment.getTransactionId().equals("SETTLEMENT_" + session.getId()))
+                        .collect(Collectors.toList());
+                    
+                    // 檢查是否有託管支付
+                    List<Payment> escrowedPayments = paymentRepository.findByPaymentTypeAndStatus("CLASS_SESSION_ESCROW", "ESCROWED")
+                        .stream()
+                        .filter(payment -> payment.getTransactionId() != null && 
+                                         payment.getTransactionId().startsWith("SESSION_" + session.getId() + "_"))
+                        .collect(Collectors.toList());
+                    
+                    // 如果有託管支付但沒有結算記錄，則進行結算
+                    if (!escrowedPayments.isEmpty() && existingSettlements.isEmpty()) {
+                        escrowAccountService.settleClassSession(session);
+                        logger.info("Auto-settled completed session {} via escrow system", session.getId());
+                    }
+                } catch (Exception e) {
+                    logger.error("Failed to auto-settle completed session " + session.getId(), e);
+                }
+            }
+        } catch (Exception e) {
+            logger.error("Error in autoSettleAllStartedSessions: ", e);
+        }
+    }
+
+    @Scheduled(cron = "0 */5 * * * ?") // 每5分鐘檢查一次
+    public void autoUpdateSessionStatus() {
+        LocalDateTime now = LocalDateTime.now();
+        
+        // 更新已結束的課程狀態為 COMPLETED
+        List<ClassSession> inProgressSessions = sessionRepository.findByStatus("IN_PROGRESS");
+        for (ClassSession session : inProgressSessions) {
+            try {
+                if (session.getEndTime() != null && session.getEndTime().isBefore(now)) {
+                    session.setStatus("COMPLETED");
+                    sessionRepository.save(session);
+                    logger.info("Updated session {} status to COMPLETED", session.getId());
+                }
+            } catch (Exception e) {
+                logger.error("Failed to update session " + session.getId() + " status", e);
+            }
+        }
+        
+        // 更新已開始但未更新的課程狀態為 IN_PROGRESS
+        List<ClassSession> confirmedSessions = sessionRepository.findByStatus("CONFIRMED");
+        for (ClassSession session : confirmedSessions) {
+            try {
+                if (session.getStartTime() != null && session.getStartTime().isBefore(now) && 
+                    (session.getEndTime() == null || session.getEndTime().isAfter(now))) {
+                    session.setStatus("IN_PROGRESS");
+                    sessionRepository.save(session);
+                    logger.info("Updated session {} status to IN_PROGRESS", session.getId());
+                }
             } catch (Exception e) {
-                logger.error("Failed to auto-settle session " + session.getId(), e);
+                logger.error("Failed to update session " + session.getId() + " status", e);
             }
         }
     }
 
-    @Scheduled(cron = "0 0 2 * * ?") // 每天凌晨2點跑
+    @Scheduled(cron = "0 */5 * * * ?") // 每5分鐘檢查一次
     public void autoSettleCompletedSessions() {
         List<ClassSession> completed = sessionRepository.findByStatus("COMPLETED");
+        logger.info("Found {} completed sessions to check for settlement", completed.size());
+        
         for (ClassSession session : completed) {
             try {
-                settleClassSession(session.getId());
+                // 檢查是否已經有收入分配記錄
+                List<Payment> existingSettlements = paymentRepository.findByPaymentTypeAndStatus("COACH_INCOME", "COMPLETED")
+                    .stream()
+                    .filter(payment -> payment.getTransactionId() != null && 
+                                     payment.getTransactionId().equals("SETTLEMENT_" + session.getId()))
+                    .collect(Collectors.toList());
+                
+                // 檢查是否有託管支付
+                List<Payment> escrowedPayments = paymentRepository.findByPaymentTypeAndStatus("CLASS_SESSION_ESCROW", "ESCROWED")
+                    .stream()
+                    .filter(payment -> payment.getTransactionId() != null && 
+                                     payment.getTransactionId().startsWith("SESSION_" + session.getId() + "_"))
+                    .collect(Collectors.toList());
+                
+                logger.info("Session {}: {} existing settlements, {} escrowed payments", 
+                           session.getId(), existingSettlements.size(), escrowedPayments.size());
+                
+                // 如果有託管支付但沒有結算記錄，則進行結算
+                if (!escrowedPayments.isEmpty() && existingSettlements.isEmpty()) {
+                    escrowAccountService.settleClassSession(session);
+                    logger.info("Auto-settled completed session {} via escrow system", session.getId());
+                } else if (escrowedPayments.isEmpty()) {
+                    logger.warn("No escrowed payments found for completed session {}", session.getId());
+                } else if (!existingSettlements.isEmpty()) {
+                    logger.info("Session {} already has settlement records", session.getId());
+                }
             } catch (Exception e) {
-                logger.error("Failed to settle session " + session.getId(), e);
+                logger.error("Failed to auto-settle completed session " + session.getId(), e);
             }
         }
     }
@@ -509,24 +717,26 @@
                     continue;
                 }
                 
-                // 計算總收入
-                double totalRevenue = 0.0;
-                if (session.getRegistrations() != null) {
-                    totalRevenue = session.getRegistrations().stream()
-                        .mapToDouble(registration -> session.getPrice())
-                        .sum();
-                }
+                // 檢查是否有託管支付
+                List<Payment> escrowedPayments = paymentRepository.findByPaymentTypeAndStatus("CLASS_SESSION_ESCROW", "ESCROWED")
+                    .stream()
+                    .filter(payment -> payment.getTransactionId() != null && 
+                            payment.getTransactionId().startsWith("SESSION_" + session.getId() + "_"))
+                    .collect(java.util.stream.Collectors.toList());
                 
-                if (totalRevenue > 0) {
-                    // 分配收入
-                    distributeSessionRevenue(session, totalRevenue);
+                if (!escrowedPayments.isEmpty()) {
+                    // 使用託管系統進行分帳
+                    escrowAccountService.settleClassSession(session);
                     
                     // 標記為已分配
                     session.setRevenueDistributed(true);
                     sessionRepository.save(session);
                     
                     // 發送通知給教練
+                    double totalRevenue = escrowedPayments.stream().mapToDouble(Payment::getAmount).sum();
                     sendRevenueDistributionNotification(session, totalRevenue);
+                    
+                    logger.info("Auto-distributed revenue for session {} via escrow system", session.getId());
                 }
             }
         } catch (Exception e) {
@@ -534,51 +744,6 @@
         }
     }
     
-    private void distributeSessionRevenue(ClassSession session, double totalRevenue) {
-        try {
-            // 計算分配金額
-            double platformShare = totalRevenue * 0.20; // 平台 20%
-            double coachShare = totalRevenue * 0.80;    // 教練 80%
-            
-            // 獲取教練的錢包
-            User coach = session.getCoach();
-            Member coachMember = memberRepository.findByUser(coach);
-            if (coachMember == null) {
-                throw new ResourceNotFoundException("Coach member not found");
-            }
-            
-            Wallet coachWallet = walletRepository.findByMemberId(coachMember.getId())
-                .orElseThrow(() -> new ResourceNotFoundException("Coach wallet not found"));
-            
-            // 更新教練錢包餘額
-            double newBalance = coachWallet.getBalance() + coachShare;
-            coachWallet.setBalance(newBalance);
-            walletRepository.save(coachWallet);
-            
-            // 記錄錢包交易
-            WalletTransaction coachTransaction = new WalletTransaction();
-            coachTransaction.setWalletId(coachWallet.getId());
-            coachTransaction.setTransactionType("COACH_INCOME");
-            coachTransaction.setAmount(coachShare);
-            coachTransaction.setBalanceBefore(coachWallet.getBalance() - coachShare);
-            coachTransaction.setBalanceAfter(newBalance);
-            coachTransaction.setFrozenBefore(coachWallet.getFrozenBalance());
-            coachTransaction.setFrozenAfter(coachWallet.getFrozenBalance());
-            coachTransaction.setReferenceType("CLASS_SESSION");
-            coachTransaction.setReferenceId(session.getId());
-            coachTransaction.setDescription("Class session revenue: " + session.getTitle() + " (80% share)");
-            coachTransaction.setStatus("COMPLETED");
-            walletTransactionRepository.save(coachTransaction); 
-            
-            // 記錄平台收入（可以創建一個平台錢包或記錄到系統日誌）
-            logger.info("Platform revenue from session {}: RM {:.2f}", session.getId(), platformShare);
-            
-        } catch (Exception e) {
-            logger.error("Error distributing revenue for session {}: ", session.getId(), e);
-            throw new RuntimeException("Failed to distribute session revenue", e);
-        }
-    }
-    
     private void sendRevenueDistributionNotification(ClassSession session, double totalRevenue) {
         try {
             User coach = session.getCoach();
@@ -590,7 +755,7 @@
                 "Total Revenue: RM %.2f\n" +
                 "Your Share (80%%): RM %.2f\n" +
                 "Platform Fee (20%%): RM %.2f\n\n" +
-                "The amount has been credited to your wallet.",
+                "The amount has been credited to your wallet via escrow system.",
                 session.getTitle(),
                 session.getStartTime().format(DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm")),
                 totalRevenue,
@@ -599,8 +764,11 @@
             );
             
             emailService.sendEmail(coach.getEmail(), subject, message);
+            logger.info("Revenue distribution notification sent to coach {} for session {}", 
+                       coach.getId(), session.getId());
         } catch (Exception e) {
-            logger.error("Error sending revenue distribution notification: ", e);
+            logger.error("Failed to send revenue distribution notification for session {}", 
+                        session.getId(), e);
         }
     }
 }
\ No newline at end of file
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/RecurringSessionRequestDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// RecurringSessionRequest.java\r\npackage com.pickleball_backend.pickleball.dto;\r\n\r\nimport lombok.Data;\r\nimport java.time.DayOfWeek;\r\nimport java.time.LocalDate;\r\nimport java.time.LocalTime;\r\nimport java.util.List;\r\nimport lombok.AllArgsConstructor;\r\nimport lombok.Getter;\r\nimport lombok.NoArgsConstructor;\r\nimport lombok.Setter;\r\n\r\n@Getter\r\n@Setter\r\n@NoArgsConstructor\r\n@AllArgsConstructor\r\n@Data\r\npublic class RecurringSessionRequestDto {\r\n    private String title;\r\n    private String description;\r\n    private Integer courtId;\r\n    private Double price;\r\n    private Integer maxParticipants;\r\n    private List<DayOfWeek> daysOfWeek;\r\n    private LocalTime startTime;\r\n    private LocalTime endTime;\r\n    private LocalDate startDate;\r\n    private LocalDate endDate;\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/RecurringSessionRequestDto.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/RecurringSessionRequestDto.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/RecurringSessionRequestDto.java	(revision 89327e12854b108d004ebb020d0592b1c618ecaf)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/RecurringSessionRequestDto.java	(date 1754329068670)
@@ -2,10 +2,8 @@
 package com.pickleball_backend.pickleball.dto;
 
 import lombok.Data;
-import java.time.DayOfWeek;
 import java.time.LocalDate;
 import java.time.LocalTime;
-import java.util.List;
 import lombok.AllArgsConstructor;
 import lombok.Getter;
 import lombok.NoArgsConstructor;
@@ -22,9 +20,9 @@
     private Integer courtId;
     private Double price;
     private Integer maxParticipants;
-    private List<DayOfWeek> daysOfWeek;
     private LocalTime startTime;
     private LocalTime endTime;
     private LocalDate startDate;
     private LocalDate endDate;
+    private String dayOfWeek; // 例如: "MON,WED,FRI" 或 "TUES,THURS"
 }
\ No newline at end of file
Index: pickleball-frontend/src/components/profile/RedeemVoucherPage.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useState, useEffect } from 'react';\r\nimport { \r\n  Box, Grid, Card, CardContent, Typography, Chip, Button, \r\n  CircularProgress, Alert, Grow, useTheme, alpha\r\n} from '@mui/material';\r\nimport { ConfirmationNumber as VoucherIcon } from '@mui/icons-material';\r\nimport axios from 'axios';\r\nimport UserService from '../../service/UserService';\r\n\r\nconst RedeemVoucherPage = ({ onSuccess, onError }) => {\r\n  const theme = useTheme();\r\n  const [redeemingId, setRedeemingId] = useState(null);\r\n  const [dashboardData, setDashboardData] = useState(null);\r\n  const [vouchers, setVouchers] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState('');\r\n  const [success, setSuccess] = useState('');\r\n\r\n  // Tier configuration\r\n  const tierConfig = {\r\n    BRONZE: { \r\n      name: 'Bronze',\r\n      gradient: 'linear-gradient(135deg, #f7e8d7, #cd7f32)',\r\n      light: '#fcf8f3'\r\n    },\r\n    SILVER: { \r\n      name: 'Silver',\r\n      gradient: 'linear-gradient(135deg, #e6e6e6, #c0c0c0)',\r\n      light: '#f8f8f8'\r\n    },\r\n    GOLD: { \r\n      name: 'Gold',\r\n      gradient: 'linear-gradient(135deg, #fdf5a6, #ffd700)',\r\n      light: '#fffdf0'\r\n    },\r\n    PLATINUM: { \r\n      name: 'Platinum',\r\n      gradient: 'linear-gradient(135deg, #f0f0f0, #e5e4e2)',\r\n      light: '#fafafa'\r\n    }\r\n  };\r\n\r\n  // Fetch data\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const token = UserService.getToken();\r\n        if (!token) return;\r\n\r\n        const dashboardResponse = await axios.get('http://localhost:8081/api/member/dashboard', {\r\n          headers: { Authorization: `Bearer ${token}` }\r\n        });\r\n\r\n        setDashboardData(dashboardResponse.data);\r\n        \r\n        // Map backend vouchers to frontend format\r\n        const backendVouchers = dashboardResponse.data.redeemableVouchers.map(voucher => {\r\n          // Handle different discount types\r\n          let title, discount;\r\n          if (voucher.discountType === 'percentage') {\r\n            title = `${voucher.discountValue}% Discount`;\r\n            discount = `${voucher.discountValue}% OFF`;\r\n          } else {\r\n            title = `RM${voucher.discountValue} Discount`;\r\n            discount = `RM${voucher.discountValue} OFF`;\r\n          }\r\n          \r\n          return {\r\n            id: voucher.id,\r\n            title: title,\r\n            description: \"Special offer for members\",\r\n            discount: discount,\r\n            expiry: voucher.expiryDate,\r\n            points: voucher.requestPoints,\r\n            discountValue: voucher.discountValue,  // Changed from discountAmount\r\n            discountType: voucher.discountType\r\n          };\r\n        });\r\n        \r\n        setVouchers(backendVouchers);\r\n      } catch (err) {\r\n        console.error('Error fetching voucher data:', err);\r\n        setError('Failed to load voucher data. Please try again later.');\r\n        if (onError) onError('Failed to load voucher data. Please try again later.');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  const handleRedeemVoucher = async (voucher) => {\r\n    setRedeemingId(voucher.id);\r\n    setError('');\r\n    setSuccess('');\r\n    \r\n    try {\r\n      const token = UserService.getToken();\r\n      if (!token) return;\r\n\r\n      const response = await axios.post(\r\n        `http://localhost:8081/api/voucher-redemption/redeem/${voucher.id}`,\r\n        {},\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      );\r\n\r\n      if (response.data) {\r\n        const successMsg = `Successfully redeemed voucher: ${response.data.voucherCode}`;\r\n        setSuccess(successMsg);\r\n        if (onSuccess) onSuccess(successMsg);\r\n        \r\n        // Refresh voucher data\r\n        const dashboardResponse = await axios.get('http://localhost:8081/api/member/dashboard', {\r\n          headers: { Authorization: `Bearer ${token}` }\r\n        });\r\n        \r\n        const updatedVouchers = dashboardResponse.data.redeemableVouchers.map(v => {\r\n          let title, discount;\r\n          if (v.discountType === 'percentage') {\r\n            title = `${v.discountValue}% Discount`;\r\n            discount = `${v.discountValue}% OFF`;\r\n          } else {\r\n            title = `RM${v.discountValue} Discount`;\r\n            discount = `RM${v.discountValue} OFF`;\r\n          }\r\n          return {\r\n            id: v.id,\r\n            title: title,\r\n            description: \"Special offer for members\",\r\n            discount: discount,\r\n            expiry: v.expiryDate,\r\n            points: v.requestPoints,\r\n            discountValue: v.discountValue,\r\n            discountType: v.discountType\r\n          };\r\n        });\r\n        \r\n        setVouchers(updatedVouchers);\r\n        setDashboardData(dashboardResponse.data);\r\n      }\r\n    } catch (err) {\r\n      console.error('Error redeeming voucher:', err);\r\n      const errorMsg = err.response?.data?.message || 'Failed to redeem voucher';\r\n      setError(errorMsg);\r\n      if (onError) onError(errorMsg);\r\n    } finally {\r\n      setRedeemingId(null);\r\n    }\r\n  };\r\n\r\n  const handleCloseSnackbar = () => {\r\n    setError('');\r\n    setSuccess('');\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <Box sx={{ display: 'flex', justifyContent: 'center', mt: 4 }}>\r\n        <CircularProgress size={60} sx={{ color: theme.palette.primary.main }} />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  // Use tier from dashboard if available\r\n  const memberTier = dashboardData?.tierName || 'GOLD';\r\n  const currentTier = tierConfig[memberTier.toUpperCase()] || tierConfig.GOLD;\r\n  const currentPoints = dashboardData?.pointBalance || 0;\r\n\r\n  return (\r\n    <Box>\r\n      {error && (\r\n        <Alert severity=\"error\" onClose={handleCloseSnackbar} sx={{ mb: 3 }}>\r\n          {error}\r\n        </Alert>\r\n      )}\r\n      \r\n      {success && (\r\n        <Alert severity=\"success\" onClose={handleCloseSnackbar} sx={{ mb: 3 }}>\r\n          {success}\r\n        </Alert>\r\n      )}\r\n\r\n      <Typography variant=\"h4\" fontWeight=\"bold\" sx={{ mb: 3 }}>\r\n        Redeem Vouchers\r\n      </Typography>\r\n      \r\n      <Box sx={{ \r\n        bgcolor: alpha(theme.palette.primary.light, 0.1), \r\n        p: 3, \r\n        borderRadius: 3,\r\n        mb: 4\r\n      }}>\r\n        <Grid container alignItems=\"center\">\r\n          <Grid item xs={12} md={8}>\r\n            <Typography variant=\"h5\" sx={{ mb: 1 }}>\r\n              {currentTier.name} Tier Benefits\r\n            </Typography>\r\n            <Typography variant=\"body1\" sx={{ mb: 2 }}>\r\n              {dashboardData?.benefits || \"Premium benefits for loyal members\"}\r\n            </Typography>\r\n            <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n              <Chip \r\n                label={`${currentPoints} Points`} \r\n                color=\"primary\"\r\n                sx={{ fontWeight: 'bold', mr: 2 }}\r\n              />\r\n              <Typography variant=\"body2\">\r\n                Available for redemption\r\n              </Typography>\r\n            </Box>\r\n          </Grid>\r\n          <Grid item xs={12} md={4} sx={{ textAlign: 'right' }}>\r\n            <Box sx={{\r\n              display: 'inline-flex',\r\n              alignItems: 'center',\r\n              justifyContent: 'center',\r\n              width: 80,\r\n              height: 80,\r\n              borderRadius: '50%',\r\n              background: currentTier.gradient,\r\n              boxShadow: 3\r\n            }}>\r\n              <Typography variant=\"h4\" fontWeight=\"bold\" color=\"white\">\r\n                {memberTier.charAt(0)}\r\n              </Typography>\r\n            </Box>\r\n          </Grid>\r\n        </Grid>\r\n      </Box>\r\n\r\n      {vouchers.length === 0 ? (\r\n        <Alert severity=\"info\" sx={{ borderRadius: 3, boxShadow: 1 }}>\r\n          No redeemable vouchers available for your tier\r\n        </Alert>\r\n      ) : (\r\n        <Grid container spacing={3}>\r\n          {vouchers.map((voucher, index) => {\r\n            const backgroundColor = voucher.discountValue > 30 \r\n              ? '#e8f5e8' \r\n              : voucher.discountValue > 15 \r\n                ? '#fff3e0' \r\n                : '#f3e5f5';\r\n            \r\n            return (\r\n              <Grid item xs={12} sm={6} md={4} key={voucher.id}>\r\n                <Grow in timeout={index * 200}>\r\n                  <Card sx={{ \r\n                    height: '100%',\r\n                    borderRadius: 3,\r\n                    overflow: 'hidden',\r\n                    boxShadow: '0 6px 16px rgba(0,0,0,0.08)',\r\n                    transition: 'transform 0.3s',\r\n                    '&:hover': {\r\n                      transform: 'translateY(-5px)',\r\n                      boxShadow: '0 12px 28px rgba(0,0,0,0.15)'\r\n                    }\r\n                  }}>\r\n                    <Box sx={{ \r\n                      height: 140,\r\n                      background: `linear-gradient(135deg, ${backgroundColor}, ${alpha(backgroundColor, 0.8)})`,\r\n                      display: 'flex',\r\n                      alignItems: 'center',\r\n                      justifyContent: 'center',\r\n                      position: 'relative',\r\n                      overflow: 'hidden'\r\n                    }}>\r\n                      <Box sx={{\r\n                        position: 'absolute',\r\n                        top: -20,\r\n                        right: -20,\r\n                        width: 80,\r\n                        height: 80,\r\n                        borderRadius: '50%',\r\n                        background: alpha(theme.palette.primary.light, 0.2)\r\n                      }} />\r\n                      <Typography variant=\"h1\" fontWeight=\"bold\" sx={{ \r\n                        fontSize: '4rem', \r\n                        opacity: 0.15,\r\n                        position: 'absolute',\r\n                        top: 10,\r\n                        left: 10,\r\n                        lineHeight: 1\r\n                      }}>\r\n                        {voucher.discountValue}%\r\n                      </Typography>\r\n                      <Typography variant=\"h2\" fontWeight=\"bold\" color=\"primary.main\">\r\n                        {voucher.discountValue}%\r\n                      </Typography>\r\n                      <Chip \r\n                        label=\"DISCOUNT\"\r\n                        size=\"small\"\r\n                        sx={{ \r\n                          position: 'absolute',\r\n                          bottom: 10,\r\n                          right: 10,\r\n                          bgcolor: 'rgba(255,255,255,0.9)',\r\n                          fontWeight: 'bold',\r\n                          letterSpacing: 0.5\r\n                        }}\r\n                      />\r\n                    </Box>\r\n                    <CardContent sx={{ p: 3, position: 'relative', zIndex: 1 }}>\r\n                      <Box sx={{ \r\n                        position: 'absolute',\r\n                        top: -20,\r\n                        right: 20,\r\n                        width: 50,\r\n                        height: 50,\r\n                        borderRadius: '50%',\r\n                        background: alpha(theme.palette.primary.light, 0.2),\r\n                        zIndex: -1\r\n                      }} />\r\n                      <Typography variant=\"h5\" fontWeight=\"bold\" sx={{ mb: 1 }}>\r\n                        {voucher.title}\r\n                      </Typography>\r\n                      <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\r\n                        {voucher.description}\r\n                      </Typography>\r\n                      <Box sx={{ \r\n                        display: 'flex', \r\n                        justifyContent: 'space-between', \r\n                        alignItems: 'center', \r\n                        mb: 2,\r\n                        bgcolor: alpha(theme.palette.background.default, 0.5),\r\n                        p: 1.5,\r\n                        borderRadius: 2\r\n                      }}>\r\n                        <Box>\r\n                          <Typography variant=\"caption\" color=\"text.secondary\">\r\n                            Expires\r\n                          </Typography>\r\n                          <Typography variant=\"body2\" fontWeight=\"medium\">\r\n                            {new Date(voucher.expiry).toLocaleDateString()}\r\n                          </Typography>\r\n                        </Box>\r\n                        <Chip \r\n                          label={`${voucher.points} pts`} \r\n                          size=\"medium\"\r\n                          sx={{ \r\n                            bgcolor: alpha(theme.palette.primary.light, 0.2),\r\n                            fontWeight: 'bold',\r\n                            color: 'primary.dark'\r\n                          }}\r\n                        />\r\n                      </Box>\r\n                      <Button\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        startIcon={<VoucherIcon />}\r\n                        onClick={() => handleRedeemVoucher(voucher)}\r\n                        disabled={redeemingId === voucher.id}\r\n                        sx={{ \r\n                          borderRadius: 3,\r\n                          py: 1.5,\r\n                          fontWeight: 'bold',\r\n                          background: 'linear-gradient(45deg, #8e44ad, #732d91)',\r\n                          boxShadow: '0 4px 12px rgba(142, 68, 173, 0.3)',\r\n                          '&:hover': {\r\n                            boxShadow: '0 6px 16px rgba(142, 68, 173, 0.4)'\r\n                          }\r\n                        }}\r\n                      >\r\n                        {redeemingId === voucher.id ? (\r\n                          <CircularProgress size={24} color=\"inherit\" />\r\n                        ) : currentPoints >= voucher.points ? (\r\n                          'Redeem Now'\r\n                        ) : (\r\n                          'Not enough points'\r\n                        )}\r\n                      </Button>\r\n                    </CardContent>\r\n                  </Card>\r\n                </Grow>\r\n              </Grid>\r\n            );\r\n          })}\r\n        </Grid>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default RedeemVoucherPage;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball-frontend/src/components/profile/RedeemVoucherPage.jsx b/pickleball-frontend/src/components/profile/RedeemVoucherPage.jsx
--- a/pickleball-frontend/src/components/profile/RedeemVoucherPage.jsx	(revision 89327e12854b108d004ebb020d0592b1c618ecaf)
+++ b/pickleball-frontend/src/components/profile/RedeemVoucherPage.jsx	(date 1754144390532)
@@ -6,6 +6,7 @@
 import { ConfirmationNumber as VoucherIcon } from '@mui/icons-material';
 import axios from 'axios';
 import UserService from '../../service/UserService';
+import { formatVoucherExpiryDate } from '../../utils/dateUtils';
 
 const RedeemVoucherPage = ({ onSuccess, onError }) => {
   const theme = useTheme();
@@ -37,6 +38,11 @@
       name: 'Platinum',
       gradient: 'linear-gradient(135deg, #f0f0f0, #e5e4e2)',
       light: '#fafafa'
+    },
+    VIP: {
+      name: 'VIP',
+      gradient: 'linear-gradient(135deg, #ffecd2 0%, #fcb69f 100%)',
+      light: '#fff6f0'
     }
   };
 
@@ -47,14 +53,44 @@
         const token = UserService.getToken();
         if (!token) return;
 
-        const dashboardResponse = await axios.get('http://localhost:8081/api/member/dashboard', {
-          headers: { Authorization: `Bearer ${token}` }
-        });
+        // Fetch dashboard data and user's redemption history in parallel
+        const [dashboardResponse, redemptionHistoryResponse] = await Promise.all([
+          axios.get('http://localhost:8081/api/member/dashboard', {
+            headers: { Authorization: `Bearer ${token}` }
+          }),
+          axios.get('http://localhost:8081/api/voucher-redemption/my-redemptions', {
+            headers: { Authorization: `Bearer ${token}` }
+          })
+        ]);
 
         setDashboardData(dashboardResponse.data);
         
+        // Debug: 檢查後端返回的原始數據
+        console.log('=== Frontend Debug: Backend Response ===');
+        console.log('Dashboard data:', dashboardResponse.data);
+        console.log('Redeemable vouchers:', dashboardResponse.data.redeemableVouchers);
+        console.log('User redemption history:', redemptionHistoryResponse.data);
+        
+        // Create a set of voucher codes that user has already redeemed
+        // Only for 0-point vouchers (which can only be redeemed once)
+        const redeemedZeroPointVoucherCodes = new Set(
+          redemptionHistoryResponse.data
+            .filter(redemption => {
+              // Find the corresponding voucher to check its points
+              const voucher = dashboardResponse.data.redeemableVouchers.find(v => v.code === redemption.voucherCode?.split('-')[0]);
+              return voucher && voucher.requestPoints === 0;
+            })
+            .map(redemption => redemption.voucherCode?.split('-')[0])
+        );
+        
+        console.log('Redeemed 0-point voucher codes:', Array.from(redeemedZeroPointVoucherCodes));
+        
         // Map backend vouchers to frontend format
         const backendVouchers = dashboardResponse.data.redeemableVouchers.map(voucher => {
+          // Debug: 檢查每個voucher的原始數據
+          console.log('Processing voucher:', voucher);
+          console.log('Voucher expiry date:', voucher.expiryDate, 'Type:', typeof voucher.expiryDate);
+          
           // Handle different discount types
           let title, discount;
           if (voucher.discountType === 'percentage') {
@@ -65,7 +101,11 @@
             discount = `RM${voucher.discountValue} OFF`;
           }
           
-          return {
+          // Check if user has already redeemed this voucher
+          // Only mark as redeemed if it's a 0-point voucher that has been redeemed
+          const isRedeemed = voucher.requestPoints === 0 && redeemedZeroPointVoucherCodes.has(voucher.code);
+          
+          const mappedVoucher = {
             id: voucher.id,
             title: title,
             description: "Special offer for members",
@@ -73,8 +113,17 @@
             expiry: voucher.expiryDate,
             points: voucher.requestPoints,
             discountValue: voucher.discountValue,  // Changed from discountAmount
-            discountType: voucher.discountType
+            discountType: voucher.discountType,
+            tierName: voucher.tierName,  // Add tier name
+            isRedeemed: isRedeemed  // Add redemption status
           };
+          
+          // Debug: 檢查映射後的voucher
+          console.log('Mapped voucher:', mappedVoucher);
+          console.log('Mapped expiry:', mappedVoucher.expiry, 'Type:', typeof mappedVoucher.expiry);
+          console.log('Is redeemed:', isRedeemed);
+          
+          return mappedVoucher;
         });
         
         setVouchers(backendVouchers);
@@ -91,6 +140,12 @@
   }, []);
 
   const handleRedeemVoucher = async (voucher) => {
+    // Prevent redeeming if it's a 0-point voucher that has already been redeemed
+    if (voucher.points === 0 && voucher.isRedeemed) {
+      setError('This voucher has already been redeemed');
+      return;
+    }
+
     setRedeemingId(voucher.id);
     setError('');
     setSuccess('');
@@ -110,10 +165,27 @@
         setSuccess(successMsg);
         if (onSuccess) onSuccess(successMsg);
         
-        // Refresh voucher data
-        const dashboardResponse = await axios.get('http://localhost:8081/api/member/dashboard', {
-          headers: { Authorization: `Bearer ${token}` }
-        });
+        // Refresh voucher data with redemption history
+        const [dashboardResponse, redemptionHistoryResponse] = await Promise.all([
+          axios.get('http://localhost:8081/api/member/dashboard', {
+            headers: { Authorization: `Bearer ${token}` }
+          }),
+          axios.get('http://localhost:8081/api/voucher-redemption/my-redemptions', {
+            headers: { Authorization: `Bearer ${token}` }
+          })
+        ]);
+        
+        // Create a set of voucher codes that user has already redeemed
+        // Only for 0-point vouchers (which can only be redeemed once)
+        const redeemedZeroPointVoucherCodes = new Set(
+          redemptionHistoryResponse.data
+            .filter(redemption => {
+              // Find the corresponding voucher to check its points
+              const voucher = dashboardResponse.data.redeemableVouchers.find(v => v.code === redemption.voucherCode?.split('-')[0]);
+              return voucher && voucher.requestPoints === 0;
+            })
+            .map(redemption => redemption.voucherCode?.split('-')[0])
+        );
         
         const updatedVouchers = dashboardResponse.data.redeemableVouchers.map(v => {
           let title, discount;
@@ -124,6 +196,11 @@
             title = `RM${v.discountValue} Discount`;
             discount = `RM${v.discountValue} OFF`;
           }
+          
+          // Check if user has already redeemed this voucher
+          // Only mark as redeemed if it's a 0-point voucher that has been redeemed
+          const isRedeemed = v.requestPoints === 0 && redeemedZeroPointVoucherCodes.has(v.code);
+          
           return {
             id: v.id,
             title: title,
@@ -132,7 +209,9 @@
             expiry: v.expiryDate,
             points: v.requestPoints,
             discountValue: v.discountValue,
-            discountType: v.discountType
+            discountType: v.discountType,
+            tierName: v.tierName,
+            isRedeemed: isRedeemed
           };
         });
         
@@ -165,7 +244,8 @@
   // Use tier from dashboard if available
   const memberTier = dashboardData?.tierName || 'GOLD';
   const currentTier = tierConfig[memberTier.toUpperCase()] || tierConfig.GOLD;
-  const currentPoints = dashboardData?.pointBalance || 0;
+  const tierPoints = dashboardData?.tierPointBalance || 0;
+  const rewardPoints = dashboardData?.rewardPointBalance || 0;
 
   return (
     <Box>
@@ -199,16 +279,21 @@
             <Typography variant="body1" sx={{ mb: 2 }}>
               {dashboardData?.benefits || "Premium benefits for loyal members"}
             </Typography>
-            <Box sx={{ display: 'flex', alignItems: 'center' }}>
-              <Chip 
-                label={`${currentPoints} Points`} 
-                color="primary"
-                sx={{ fontWeight: 'bold', mr: 2 }}
-              />
-              <Typography variant="body2">
-                Available for redemption
-              </Typography>
-            </Box>
+                         <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
+               <Chip 
+                 label={`${tierPoints} Tier Points`} 
+                 color="primary"
+                 sx={{ fontWeight: 'bold' }}
+               />
+               <Chip 
+                 label={`${rewardPoints} Reward Points`} 
+                 color="secondary"
+                 sx={{ fontWeight: 'bold' }}
+               />
+               <Typography variant="body2">
+                 Tier points for upgrades, Reward points for vouchers
+               </Typography>
+             </Box>
           </Grid>
           <Grid item xs={12} md={4} sx={{ textAlign: 'right' }}>
             <Box sx={{
@@ -236,11 +321,20 @@
       ) : (
         <Grid container spacing={3}>
           {vouchers.map((voucher, index) => {
-            const backgroundColor = voucher.discountValue > 30 
-              ? '#e8f5e8' 
-              : voucher.discountValue > 15 
-                ? '#fff3e0' 
-                : '#f3e5f5';
+            let backgroundColor;
+            if (voucher.discountType === 'percentage') {
+              backgroundColor = voucher.discountValue > 30 
+                ? '#e8f5e8' 
+                : voucher.discountValue > 15 
+                  ? '#fff3e0' 
+                  : '#f3e5f5';
+            } else {
+              backgroundColor = voucher.discountValue > 50 
+                ? '#e8f5e8' 
+                : voucher.discountValue > 20 
+                  ? '#fff3e0' 
+                  : '#f3e5f5';
+            }
             
             return (
               <Grid item xs={12} sm={6} md={4} key={voucher.id}>
@@ -282,13 +376,13 @@
                         left: 10,
                         lineHeight: 1
                       }}>
-                        {voucher.discountValue}%
+                        {voucher.discountType === 'percentage' ? `${voucher.discountValue}%` : `RM${voucher.discountValue}`}
                       </Typography>
                       <Typography variant="h2" fontWeight="bold" color="primary.main">
-                        {voucher.discountValue}%
+                        {voucher.discountType === 'percentage' ? `${voucher.discountValue}%` : `RM${voucher.discountValue}`}
                       </Typography>
                       <Chip 
-                        label="DISCOUNT"
+                        label={voucher.discountType === 'percentage' ? 'DISCOUNT' : 'VOUCHER'}
                         size="small"
                         sx={{ 
                           position: 'absolute',
@@ -311,9 +405,38 @@
                         background: alpha(theme.palette.primary.light, 0.2),
                         zIndex: -1
                       }} />
-                      <Typography variant="h5" fontWeight="bold" sx={{ mb: 1 }}>
-                        {voucher.title}
-                      </Typography>
+                                             <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', mb: 1 }}>
+                         <Typography variant="h5" fontWeight="bold">
+                           {voucher.title}
+                         </Typography>
+                         <Box sx={{ display: 'flex', gap: 1 }}>
+                           <Chip 
+                             label={voucher.tierName || 'GENERAL'} 
+                             size="small"
+                             sx={{ 
+                               bgcolor: voucher.tierName && voucher.tierName !== 'GENERAL' 
+                                 ? alpha(theme.palette.primary.light, 0.2)
+                                 : alpha(theme.palette.success.light, 0.2),
+                               color: voucher.tierName && voucher.tierName !== 'GENERAL'
+                                 ? 'primary.dark'
+                                 : 'success.dark',
+                               fontWeight: 'bold',
+                               fontSize: '0.7rem'
+                             }}
+                           />
+                           {voucher.isRedeemed && (
+                             <Chip 
+                               label="REDEEMED" 
+                               size="small"
+                               color="warning"
+                               sx={{ 
+                                 fontWeight: 'bold',
+                                 fontSize: '0.7rem'
+                               }}
+                             />
+                           )}
+                         </Box>
+                       </Box>
                       <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
                         {voucher.description}
                       </Typography>
@@ -331,7 +454,7 @@
                             Expires
                           </Typography>
                           <Typography variant="body2" fontWeight="medium">
-                            {new Date(voucher.expiry).toLocaleDateString()}
+                            {formatVoucherExpiryDate(voucher.expiry)}
                           </Typography>
                         </Box>
                         <Chip 
@@ -344,31 +467,39 @@
                           }}
                         />
                       </Box>
-                      <Button
-                        fullWidth
-                        variant="contained"
-                        startIcon={<VoucherIcon />}
-                        onClick={() => handleRedeemVoucher(voucher)}
-                        disabled={redeemingId === voucher.id}
-                        sx={{ 
-                          borderRadius: 3,
-                          py: 1.5,
-                          fontWeight: 'bold',
-                          background: 'linear-gradient(45deg, #8e44ad, #732d91)',
-                          boxShadow: '0 4px 12px rgba(142, 68, 173, 0.3)',
-                          '&:hover': {
-                            boxShadow: '0 6px 16px rgba(142, 68, 173, 0.4)'
-                          }
-                        }}
-                      >
-                        {redeemingId === voucher.id ? (
-                          <CircularProgress size={24} color="inherit" />
-                        ) : currentPoints >= voucher.points ? (
-                          'Redeem Now'
-                        ) : (
-                          'Not enough points'
-                        )}
-                      </Button>
+                                             <Button
+                         fullWidth
+                         variant="contained"
+                         startIcon={<VoucherIcon />}
+                         onClick={() => handleRedeemVoucher(voucher)}
+                         disabled={redeemingId === voucher.id || voucher.isRedeemed}
+                         sx={{ 
+                           borderRadius: 3,
+                           py: 1.5,
+                           fontWeight: 'bold',
+                           background: voucher.isRedeemed 
+                             ? 'linear-gradient(45deg, #9e9e9e, #757575)'
+                             : 'linear-gradient(45deg, #8e44ad, #732d91)',
+                           boxShadow: voucher.isRedeemed 
+                             ? '0 4px 12px rgba(158, 158, 158, 0.3)'
+                             : '0 4px 12px rgba(142, 68, 173, 0.3)',
+                           '&:hover': {
+                             boxShadow: voucher.isRedeemed 
+                               ? '0 4px 12px rgba(158, 158, 158, 0.3)'
+                               : '0 6px 16px rgba(142, 68, 173, 0.4)'
+                           }
+                         }}
+                       >
+                         {redeemingId === voucher.id ? (
+                           <CircularProgress size={24} color="inherit" />
+                         ) : voucher.isRedeemed ? (
+                           'Already Redeemed'
+                         ) : rewardPoints >= voucher.points ? (
+                           'Redeem Now'
+                         ) : (
+                           'Not enough reward points'
+                         )}
+                       </Button>
                     </CardContent>
                   </Card>
                 </Grow>
Index: pickleball-frontend/src/components/profile/RewardsPage.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Box,\r\n  Typography,\r\n  Tabs,\r\n  Tab,\r\n  CircularProgress,\r\n  Snackbar,\r\n  Alert,\r\n  useTheme,\r\n  alpha,\r\n  Card,\r\n  CardContent,\r\n  Grid,\r\n  Chip,\r\n  Button\r\n} from '@mui/material';\r\n\r\nimport ActiveVouchers from './ActiveVouchers';\r\nimport RedeemHistory from './RedeemHistory';\r\nimport RedeemVoucherPage from './RedeemVoucherPage';\r\nimport axios from 'axios';\r\nimport UserService from '../../service/UserService';\r\nimport Diamond from '@mui/icons-material/Diamond';\r\nimport EmojiEventsIcon from '@mui/icons-material/EmojiEvents';\r\nimport LocalOfferIcon from '@mui/icons-material/LocalOffer';\r\nimport TrendingUpIcon from '@mui/icons-material/TrendingUp';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport StarIcon from '@mui/icons-material/Star';\r\nimport WorkspacePremiumIcon from '@mui/icons-material/WorkspacePremium';\r\n\r\nconst RewardsPage = () => {\r\n  const theme = useTheme();\r\n  const [tab, setTab] = useState(0);\r\n  const [userData, setUserData] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState('');\r\n  const [success, setSuccess] = useState('');\r\n  const [dashboardData, setDashboardData] = useState(null);\r\n  const [vouchers, setVouchers] = useState([]);\r\n  const [tierInfo, setTierInfo] = useState(null);\r\n\r\n  // Tier configuration with gradient colors\r\n  const tierConfig = {\r\n    SILVER: {\r\n      color: '#C0C0C0',\r\n      name: 'Silver',\r\n      gradient: 'linear-gradient(135deg, #e6e6e6, #c0c0c0)',\r\n      light: '#f8f8f8',\r\n      discountPercentage: 10\r\n    },\r\n    GOLD: {\r\n      color: '#FFD700',\r\n      name: 'Gold',\r\n      gradient: 'linear-gradient(135deg, #fdf5a6, #ffd700)',\r\n      light: '#fffdf0',\r\n      discountPercentage: 15\r\n    },\r\n    PLATINUM: {\r\n      color: '#E5E4E2',\r\n      name: 'Platinum',\r\n      gradient: 'linear-gradient(135deg, #f0f0f0, #e5e4e2)',\r\n      light: '#fafafa',\r\n      discountPercentage: 20\r\n    },\r\n    VIP: {\r\n      color: '#FF6B6B',\r\n      name: 'VIP',\r\n      gradient: 'linear-gradient(135deg, #ffecd2 0%, #fcb69f 100%)',\r\n      light: '#fff6f0',\r\n      discountPercentage: 25\r\n    }\r\n  };\r\n\r\n  // Fetch dashboard data\r\n  const fetchDashboardData = async () => {\r\n    try {\r\n      const token = UserService.getToken();\r\n      if (!token) return;\r\n      const dashboardResponse = await axios.get('http://localhost:8081/api/member/dashboard', {\r\n        headers: { Authorization: `Bearer ${token}` }\r\n      });\r\n      setDashboardData(dashboardResponse.data);\r\n      // Map backend vouchers to frontend format\r\n      const backendVouchers = dashboardResponse.data.redeemableVouchers.map(voucher => {\r\n        let title, discount;\r\n        if (voucher.discountType === 'percentage') {\r\n          title = `${voucher.discountValue}% Discount`;\r\n          discount = `${voucher.discountValue}% OFF`;\r\n        } else {\r\n          title = `RM${voucher.discountValue} Discount`;\r\n          discount = `RM${voucher.discountValue} OFF`;\r\n        }\r\n        return {\r\n          id: voucher.id,\r\n          title: title,\r\n          description: \"Special offer for members\",\r\n          discount: discount,\r\n          expiry: voucher.expiryDate,\r\n          points: voucher.requestPoints,\r\n          discountValue: voucher.discountValue,\r\n          discountType: voucher.discountType\r\n        };\r\n      });\r\n      setVouchers(backendVouchers);\r\n    } catch (err) {\r\n      setError('Failed to load dashboard data');\r\n    }\r\n  };\r\n\r\n  // Fetch tier information\r\n  const fetchTierInfo = async () => {\r\n    try {\r\n      const token = UserService.getToken();\r\n      const response = await axios.get('http://localhost:8081/api/member/debug/tier-info', {\r\n        headers: { Authorization: `Bearer ${token}` }\r\n      });\r\n      setTierInfo(response.data);\r\n    } catch (err) {\r\n      // ignore\r\n    }\r\n  };\r\n\r\n  // Get next tier info\r\n  const getNextTierInfo = () => {\r\n    if (!tierInfo?.allTiers) return null;\r\n    const currentTier = tierInfo.allTiers.find(t => t.id === tierInfo.currentTierId);\r\n    if (!currentTier) return null;\r\n    const currentIndex = tierInfo.allTiers.findIndex(t => t.id === tierInfo.currentTierId);\r\n    const nextTier = tierInfo.allTiers[currentIndex + 1];\r\n    if (!nextTier) return null;\r\n    return {\r\n      name: nextTier.name,\r\n      minPoints: nextTier.minPoints,\r\n      pointsNeeded: nextTier.minPoints - tierInfo.pointBalance\r\n    };\r\n  };\r\n\r\n  // Calculate progress percentage\r\n  const calculateProgress = () => {\r\n    if (!tierInfo || !getNextTierInfo()) return 0;\r\n    const currentTierMinPoints = tierInfo.currentTierMinPoints || 0;\r\n    const nextTierMinPoints = getNextTierInfo().minPoints;\r\n    const currentPoints = tierInfo.pointBalance || 0;\r\n    if (nextTierMinPoints <= currentTierMinPoints) return 100;\r\n    const progress = ((currentPoints - currentTierMinPoints) / (nextTierMinPoints - currentTierMinPoints)) * 100;\r\n    return Math.min(Math.max(progress, 0), 100);\r\n  };\r\n  const progressToNextTier = calculateProgress();\r\n\r\n  // Fetch user data and dashboard data\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const token = UserService.getToken();\r\n        if (!token) return;\r\n        const profileResponse = await axios.get('http://localhost:8081/api/profile', {\r\n          headers: { Authorization: `Bearer ${token}` }\r\n        });\r\n        setUserData(profileResponse.data);\r\n        await Promise.all([\r\n          fetchDashboardData(),\r\n          fetchTierInfo()\r\n        ]);\r\n      } catch (err) {\r\n        setError('Failed to load data. Please try again later.');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, []);\r\n\r\n  // Use dashboard data if available\r\n  const currentPoints = dashboardData?.pointBalance || 0;\r\n  const memberTier = tierInfo?.currentTierName || dashboardData?.tierName || 'GOLD';\r\n  const currentTier = tierConfig[memberTier.toUpperCase()] || tierConfig.GOLD;\r\n  const nextTier = getNextTierInfo();\r\n  const pointsToNext = nextTier ? nextTier.pointsNeeded : 0;\r\n\r\n  const handleTabChange = (event, newValue) => setTab(newValue);\r\n  const handleCloseSnackbar = () => { setError(''); setSuccess(''); };\r\n\r\n  if (loading) {\r\n    return (\r\n      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '80vh' }}>\r\n        <CircularProgress size={60} sx={{ color: theme.palette.primary.main }} />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Box sx={{ width: '100%', overflow: 'hidden' }}>\r\n      <Snackbar open={!!error || !!success} autoHideDuration={6000} onClose={handleCloseSnackbar} anchorOrigin={{ vertical: 'top', horizontal: 'center' }}>\r\n        <Alert severity={error ? 'error' : 'success'} onClose={handleCloseSnackbar} sx={{ width: 'auto', boxShadow: '0 4px 20px rgba(0,0,0,0.15)', backdropFilter: 'blur(10px)', background: alpha(theme.palette.background.paper, 0.9) }}>{error || success}</Alert>\r\n      </Snackbar>\r\n      \r\n      {/* 主内容卡片 */}\r\n      <Card sx={{ \r\n        borderRadius: 3, \r\n        boxShadow: '0 8px 32px rgba(0,0,0,0.08)', \r\n        border: `1px solid ${alpha(theme.palette.divider, 0.1)}`,\r\n        overflow: 'hidden',\r\n        background: `linear-gradient(145deg, ${theme.palette.background.paper} 0%, ${alpha(theme.palette.primary.main, 0.02)} 100%)`\r\n      }}>\r\n        {/* 标签栏 */}\r\n        <Box sx={{ \r\n          borderBottom: `1px solid ${alpha(theme.palette.divider, 0.1)}`,\r\n          background: alpha(theme.palette.background.paper, 0.8),\r\n          backdropFilter: 'blur(10px)'\r\n        }}>\r\n          <Tabs \r\n            value={tab} \r\n            onChange={handleTabChange} \r\n            variant=\"scrollable\" \r\n            scrollButtons=\"auto\"\r\n            sx={{ \r\n              px: 3,\r\n              '& .MuiTab-root': {\r\n                textTransform: 'none',\r\n                fontWeight: 600,\r\n                fontSize: '1rem',\r\n                minHeight: 60,\r\n                color: theme.palette.text.secondary,\r\n                '&.Mui-selected': {\r\n                  color: theme.palette.primary.main\r\n                }\r\n              },\r\n              '& .MuiTabs-indicator': {\r\n                height: 3,\r\n                borderRadius: '3px 3px 0 0'\r\n              }\r\n            }}\r\n          >\r\n            <Tab label=\"Rewards Dashboard\" icon={<WorkspacePremiumIcon />} iconPosition=\"start\" />\r\n            <Tab label=\"Active Vouchers\" icon={<LocalOfferIcon />} iconPosition=\"start\" />\r\n            <Tab label=\"Redeem History\" icon={<TrendingUpIcon />} iconPosition=\"start\" />\r\n            <Tab label=\"Redeem Voucher\" icon={<StarIcon />} iconPosition=\"start\" />\r\n          </Tabs>\r\n        </Box>\r\n\r\n        {/* 内容区域 */}\r\n        <CardContent sx={{ p: { xs: 3, md: 4 } }}>\r\n          {tab === 0 && (\r\n            <Box\r\n              sx={{\r\n                backgroundColor: theme.palette.background.paper,\r\n                borderRadius: 3,\r\n                boxShadow: theme.shadows[2],\r\n                border: `1px solid ${alpha(theme.palette.divider, 0.08)}`,\r\n                p: { xs: 2, md: 4 },\r\n                mb: 3,\r\n                width: '100%',\r\n                boxSizing: 'border-box',\r\n              }}\r\n            >\r\n              {/* 头部徽章与积分 */}\r\n              <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center', mb: 3 }}>\r\n                <Box\r\n                  sx={{\r\n                    width: 80,\r\n                    height: 80,\r\n                    borderRadius: '50%',\r\n                    background: theme.palette.background.default,\r\n                    border: `5px solid ${currentTier.color}`,\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    justifyContent: 'center',\r\n                    mb: 1.5,\r\n                    boxShadow: theme.shadows[2],\r\n                  }}\r\n                >\r\n                  <Diamond sx={{ color: currentTier.color, fontSize: 44 }} />\r\n                </Box>\r\n                <Typography variant=\"h3\" fontWeight=\"bold\" color={theme.palette.text.primary}>\r\n                  {currentPoints}\r\n                </Typography>\r\n                <Chip\r\n                  label={`${currentTier.name} Tier`}\r\n                  size=\"small\"\r\n                  sx={{\r\n                    mt: 1,\r\n                    fontWeight: 600,\r\n                    color: currentTier.color,\r\n                    borderColor: currentTier.color,\r\n                    background: alpha(currentTier.color, 0.08),\r\n                    borderWidth: 1,\r\n                    borderStyle: 'solid',\r\n                    letterSpacing: 1,\r\n                  }}\r\n                  variant=\"outlined\"\r\n                />\r\n              </Box>\r\n              {/* 进度条与标签 */}\r\n              <Box sx={{ mb: 3 }}>\r\n                <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n                  <Box\r\n                    sx={{\r\n                      width: 12,\r\n                      height: 12,\r\n                      borderRadius: '50%',\r\n                      background: currentTier.color,\r\n                    }}\r\n                  />\r\n                  <Box sx={{ flex: 1 }}>\r\n                    <LinearProgress\r\n                      variant=\"determinate\"\r\n                      value={progressToNextTier}\r\n                      sx={{\r\n                        height: 12,\r\n                        borderRadius: 6,\r\n                        background: alpha(currentTier.color, 0.08),\r\n                        '& .MuiLinearProgress-bar': {\r\n                          backgroundColor: currentTier.color,\r\n                        },\r\n                      }}\r\n                    />\r\n                  </Box>\r\n                  <Box\r\n                    sx={{\r\n                      width: 12,\r\n                      height: 12,\r\n                      borderRadius: '50%',\r\n                      background: nextTier ? (tierConfig[nextTier.name?.toUpperCase()]?.color || theme.palette.grey[400]) : currentTier.color,\r\n                    }}\r\n                  />\r\n                  <Typography variant=\"body2\" sx={{ ml: 2, minWidth: 60, textAlign: 'right', color: currentTier.color }}>\r\n                    {progressToNextTier.toFixed(0)}%\r\n                  </Typography>\r\n                </Box>\r\n                <Box sx={{ display: 'flex', justifyContent: 'center', mt: 1 }}>\r\n                  <Chip\r\n                    label={\r\n                      pointsToNext > 0\r\n                        ? `还需 ${pointsToNext} 分升级到 ${nextTier?.name || ''}`\r\n                        : '已达最高等级'\r\n                    }\r\n                    size=\"small\"\r\n                    sx={{\r\n                      background: pointsToNext > 0 ? alpha(currentTier.color, 0.12) : alpha(theme.palette.success.main, 0.12),\r\n                      color: pointsToNext > 0 ? currentTier.color : theme.palette.success.main,\r\n                      fontWeight: 500,\r\n                      fontSize: 14,\r\n                    }}\r\n                  />\r\n                </Box>\r\n              </Box>\r\n              {/* 统计卡片 */}\r\n              <Grid container spacing={2} sx={{ mt: 1 }}>\r\n                <Grid item xs={12} md={4}>\r\n                  <Card\r\n                    sx={{\r\n                      borderRadius: 3,\r\n                      boxShadow: theme.shadows[1],\r\n                      transition: 'box-shadow 0.2s',\r\n                      '&:hover': { boxShadow: theme.shadows[4] },\r\n                      p: 2,\r\n                      textAlign: 'center',\r\n                    }}\r\n                  >\r\n                    <EmojiEventsIcon color=\"primary\" sx={{ fontSize: 36, mb: 1 }} />\r\n                    <Typography variant=\"h5\" fontWeight=\"bold\" color={theme.palette.primary.main}>\r\n                      {dashboardData?.rewardsEarned || 0}\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" color=\"text.secondary\">\r\n                      Rewards Earned\r\n                    </Typography>\r\n                  </Card>\r\n                </Grid>\r\n                <Grid item xs={12} md={4}>\r\n                  <Card\r\n                    sx={{\r\n                      borderRadius: 3,\r\n                      boxShadow: theme.shadows[1],\r\n                      transition: 'box-shadow 0.2s',\r\n                      '&:hover': { boxShadow: theme.shadows[4] },\r\n                      p: 2,\r\n                      textAlign: 'center',\r\n                    }}\r\n                  >\r\n                    <TrendingUpIcon color=\"success\" sx={{ fontSize: 36, mb: 1 }} />\r\n                    <Typography variant=\"h5\" fontWeight=\"bold\" color={theme.palette.success.main}>\r\n                      {dashboardData?.monthsActive || 0}\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" color=\"text.secondary\">\r\n                      Months Active\r\n                    </Typography>\r\n                  </Card>\r\n                </Grid>\r\n                <Grid item xs={12} md={4}>\r\n                  <Card\r\n                    sx={{\r\n                      borderRadius: 3,\r\n                      boxShadow: theme.shadows[1],\r\n                      transition: 'box-shadow 0.2s',\r\n                      '&:hover': { boxShadow: theme.shadows[4] },\r\n                      p: 2,\r\n                      textAlign: 'center',\r\n                    }}\r\n                  >\r\n                    <LocalOfferIcon color=\"info\" sx={{ fontSize: 36, mb: 1 }} />\r\n                    <Typography variant=\"h5\" fontWeight=\"bold\" color={theme.palette.info.main}>\r\n                      {vouchers.length}\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" color=\"text.secondary\">\r\n                      Available Vouchers\r\n                    </Typography>\r\n                  </Card>\r\n                </Grid>\r\n              </Grid>\r\n            </Box>\r\n          )}\r\n          {tab === 1 && <ActiveVouchers />}\r\n          {tab === 2 && <RedeemHistory />}\r\n          {tab === 3 && <RedeemVoucherPage onSuccess={setSuccess} onError={setError} />}\r\n        </CardContent>\r\n      </Card>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default RewardsPage;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball-frontend/src/components/profile/RewardsPage.jsx b/pickleball-frontend/src/components/profile/RewardsPage.jsx
--- a/pickleball-frontend/src/components/profile/RewardsPage.jsx	(revision 89327e12854b108d004ebb020d0592b1c618ecaf)
+++ b/pickleball-frontend/src/components/profile/RewardsPage.jsx	(date 1754080259710)
@@ -42,6 +42,13 @@
 
   // Tier configuration with gradient colors
   const tierConfig = {
+    BRONZE: {
+      color: '#CD7F32',
+      name: 'Bronze',
+      gradient: 'linear-gradient(135deg, #f7e8d7, #cd7f32)',
+      light: '#fcf8f3',
+      discountPercentage: 5
+    },
     SILVER: {
       color: '#C0C0C0',
       name: 'Silver',
@@ -99,7 +106,8 @@
           expiry: voucher.expiryDate,
           points: voucher.requestPoints,
           discountValue: voucher.discountValue,
-          discountType: voucher.discountType
+          discountType: voucher.discountType,
+          tierName: voucher.tierName  // Add tier name
         };
       });
       setVouchers(backendVouchers);
@@ -121,33 +129,6 @@
     }
   };
 
-  // Get next tier info
-  const getNextTierInfo = () => {
-    if (!tierInfo?.allTiers) return null;
-    const currentTier = tierInfo.allTiers.find(t => t.id === tierInfo.currentTierId);
-    if (!currentTier) return null;
-    const currentIndex = tierInfo.allTiers.findIndex(t => t.id === tierInfo.currentTierId);
-    const nextTier = tierInfo.allTiers[currentIndex + 1];
-    if (!nextTier) return null;
-    return {
-      name: nextTier.name,
-      minPoints: nextTier.minPoints,
-      pointsNeeded: nextTier.minPoints - tierInfo.pointBalance
-    };
-  };
-
-  // Calculate progress percentage
-  const calculateProgress = () => {
-    if (!tierInfo || !getNextTierInfo()) return 0;
-    const currentTierMinPoints = tierInfo.currentTierMinPoints || 0;
-    const nextTierMinPoints = getNextTierInfo().minPoints;
-    const currentPoints = tierInfo.pointBalance || 0;
-    if (nextTierMinPoints <= currentTierMinPoints) return 100;
-    const progress = ((currentPoints - currentTierMinPoints) / (nextTierMinPoints - currentTierMinPoints)) * 100;
-    return Math.min(Math.max(progress, 0), 100);
-  };
-  const progressToNextTier = calculateProgress();
-
   // Fetch user data and dashboard data
   useEffect(() => {
     const fetchData = async () => {
@@ -172,11 +153,40 @@
   }, []);
 
   // Use dashboard data if available
-  const currentPoints = dashboardData?.pointBalance || 0;
+  const tierPoints = dashboardData?.tierPointBalance || 0;
+  const rewardPoints = dashboardData?.rewardPointBalance || 0;
   const memberTier = tierInfo?.currentTierName || dashboardData?.tierName || 'GOLD';
   const currentTier = tierConfig[memberTier.toUpperCase()] || tierConfig.GOLD;
+
+  // Get next tier info
+  const getNextTierInfo = () => {
+    if (!tierInfo?.allTiers) return null;
+    const currentTier = tierInfo.allTiers.find(t => t.id === tierInfo.currentTierId);
+    if (!currentTier) return null;
+    const currentIndex = tierInfo.allTiers.findIndex(t => t.id === tierInfo.currentTierId);
+    const nextTier = tierInfo.allTiers[currentIndex + 1];
+    if (!nextTier) return null;
+    return {
+      name: nextTier.name,
+      minPoints: nextTier.minPoints,
+      pointsNeeded: nextTier.minPoints - tierPoints
+    };
+  };
+
+  // Calculate progress percentage
+  const calculateProgress = () => {
+    if (!tierInfo || !getNextTierInfo()) return 0;
+    const currentTierMinPoints = tierInfo.currentTierMinPoints || 0;
+    const nextTierMinPoints = getNextTierInfo().minPoints;
+    const currentPoints = tierPoints || 0;
+    if (nextTierMinPoints <= currentTierMinPoints) return 100;
+    const progress = ((currentPoints - currentTierMinPoints) / (nextTierMinPoints - currentTierMinPoints)) * 100;
+    return Math.min(Math.max(progress, 0), 100);
+  };
+
   const nextTier = getNextTierInfo();
   const pointsToNext = nextTier ? nextTier.pointsNeeded : 0;
+  const progressToNextTier = calculateProgress();
 
   const handleTabChange = (event, newValue) => setTab(newValue);
   const handleCloseSnackbar = () => { setError(''); setSuccess(''); };
@@ -273,7 +283,7 @@
                   <Diamond sx={{ color: currentTier.color, fontSize: 44 }} />
                 </Box>
                 <Typography variant="h3" fontWeight="bold" color={theme.palette.text.primary}>
-                  {currentPoints}
+                  {tierPoints}
                 </Typography>
                 <Chip
                   label={`${currentTier.name} Tier`}
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/AdminUserDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.dto;\r\n\r\nimport lombok.Data;\r\nimport java.time.LocalDate;\r\nimport java.time.LocalDateTime;\r\n\r\n@Data\r\npublic class AdminUserDto {\r\n    private Integer id;\r\n    private String username;\r\n    private String name;\r\n    private String email;\r\n    private String phone;\r\n    private LocalDate dob;\r\n    private String gender;\r\n    private String userType;\r\n    private String status;\r\n    private String profileImage;\r\n    private int pointBalance;\r\n    private String tier;\r\n    private LocalDateTime createdAt;\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/AdminUserDto.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/AdminUserDto.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/AdminUserDto.java	(revision 89327e12854b108d004ebb020d0592b1c618ecaf)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/AdminUserDto.java	(date 1754078634913)
@@ -16,7 +16,8 @@
     private String userType;
     private String status;
     private String profileImage;
-    private int pointBalance;
+    private int tierPointBalance;
+    private int rewardPointBalance;
     private String tier;
     private LocalDateTime createdAt;
 }
\ No newline at end of file
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Wallet.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.entity;\r\n\r\nimport jakarta.persistence.*;\r\nimport lombok.Data;\r\nimport java.time.LocalDateTime;\r\n\r\n@Entity\r\n@Data\r\n@Table(name = \"wallet\")\r\npublic class Wallet {\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Integer id;\r\n\r\n    @Column(nullable = false, columnDefinition = \"DECIMAL(10,2) DEFAULT 0.00\")\r\n    private double balance;\r\n\r\n    @Column(name = \"frozen_balance\", nullable = false, columnDefinition = \"DECIMAL(10,2) DEFAULT 0.00\")\r\n    private double frozenBalance = 0.00;  // For pending bookings\r\n\r\n    @Column(name = \"total_deposited\", nullable = false, columnDefinition = \"DECIMAL(10,2) DEFAULT 0.00\")\r\n    private double totalDeposited = 0.00;  // Total amount ever deposited\r\n\r\n    @Column(name = \"total_spent\", nullable = false, columnDefinition = \"DECIMAL(10,2) DEFAULT 0.00\")\r\n    private double totalSpent = 0.00;  // Total amount ever spent\r\n\r\n    @Column(name = \"last_updated\")\r\n    private LocalDateTime lastUpdated;\r\n\r\n    @Column(name = \"status\", length = 20, nullable = false)\r\n    private String status = \"ACTIVE\";  // ACTIVE, SUSPENDED, CLOSED\r\n\r\n    @OneToOne\r\n    @JoinColumn(name = \"member_id\")\r\n    private Member member;\r\n\r\n    @PreUpdate\r\n    @PrePersist\r\n    protected void onUpdate() {\r\n        lastUpdated = LocalDateTime.now();\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Wallet.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Wallet.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Wallet.java	(revision 89327e12854b108d004ebb020d0592b1c618ecaf)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Wallet.java	(date 1754163464429)
@@ -1,11 +1,13 @@
 package com.pickleball_backend.pickleball.entity;
 
 import jakarta.persistence.*;
-import lombok.Data;
+import lombok.Getter;
+import lombok.Setter;
 import java.time.LocalDateTime;
 
 @Entity
-@Data
+@Getter
+@Setter
 @Table(name = "wallet")
 public class Wallet {
     @Id
Index: pickleball-frontend/src/service/CoachService.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import axios from 'axios';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:8081';\r\n\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  timeout: 10000\r\n});\r\n\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('authToken');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => Promise.reject(error)\r\n);\r\n\r\nconst CoachService = {\r\n  getVenues: async () => {\r\n    // Fetch venues for the current coach\r\n    const res = await api.get('/api/coach/venues');\r\n    return res.data;\r\n  },\r\n  getAllVenues: async () => {\r\n    // Fetch all venues for dropdown\r\n    const res = await api.get('/api/coach/all-venues');\r\n    return res.data;\r\n  },\r\n  getAvailableCourts: async () => {\r\n    const res = await api.get('/api/coach/available-courts');\r\n    return res.data;\r\n  },\r\n  getCourtsByVenue: async (venueId) => {\r\n    const res = await api.get(`/api/coach/courts-by-venue/${venueId}`);\r\n    return res.data;\r\n  },\r\n  getAllCourts: async () => {\r\n    const res = await api.get('/api/coach/all-courts');\r\n    return res.data;\r\n  },\r\n  getTimeSlots: async () => {\r\n    const res = await api.get('/api/coach/time-slots');\r\n    return res.data;\r\n  },\r\n  getSchedule: async (start, end) => {\r\n    const res = await api.get('/api/coach/schedule', {\r\n      params: { start, end }\r\n    });\r\n    return res.data;\r\n  },\r\n  getScheduleWithRegistrations: async (start, end) => {\r\n    const res = await api.get('/api/coach/schedule-with-registrations', {\r\n      params: { start, end }\r\n    });\r\n    return res.data;\r\n  },\r\n  getDebugSessions: async () => {\r\n    const res = await api.get('/api/coach/debug/sessions');\r\n    return res.data;\r\n  },\r\n  getPublicSessions: async (start, end) => {\r\n    const res = await api.get('/api/coach/public/sessions', {\r\n      params: { start, end }\r\n    });\r\n    return res.data;\r\n  },\r\n  getDebugStatus: async () => {\r\n    const res = await api.get('/api/coach/debug/status');\r\n    return res.data;\r\n  },\r\n  createSlot: async (slotData) => {\r\n    const res = await api.post('/api/coach/slots', slotData);\r\n    return res.data;\r\n  },\r\n  getAvailableTimes: async (courtId, date) => {\r\n    const res = await api.get('/api/coach/available-times', {\r\n      params: { courtId, date }\r\n    });\r\n    return res.data;\r\n  },\r\n\r\n  // 获取教练的所有学生\r\n  getAllStudents: async () => {\r\n    const res = await api.get('/api/coach/students');\r\n    return res.data;\r\n  },\r\n\r\n  // 获取教练的钱包交易记录\r\n  getWalletTransactions: async (startDate, endDate) => {\r\n    const params = {};\r\n    if (startDate) params.startDate = startDate;\r\n    if (endDate) params.endDate = endDate;\r\n    const res = await api.get('/api/coach/wallet-transactions', { params });\r\n    return res.data;\r\n  },\r\n\r\n  // 获取教练的钱包余额\r\n  getWalletBalance: async () => {\r\n    const res = await api.get('/api/coach/wallet-balance');\r\n    return res.data;\r\n  }\r\n};\r\n\r\nexport default CoachService; 
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball-frontend/src/service/CoachService.js b/pickleball-frontend/src/service/CoachService.js
--- a/pickleball-frontend/src/service/CoachService.js	(revision 89327e12854b108d004ebb020d0592b1c618ecaf)
+++ b/pickleball-frontend/src/service/CoachService.js	(date 1754231100275)
@@ -89,17 +89,16 @@
   },
 
   // 获取教练的钱包交易记录
-  getWalletTransactions: async (startDate, endDate) => {
-    const params = {};
-    if (startDate) params.startDate = startDate;
-    if (endDate) params.endDate = endDate;
-    const res = await api.get('/api/coach/wallet-transactions', { params });
+  getWalletTransactions: async (timestamp = '') => {
+    const url = timestamp ? `/api/coach/wallet-transactions${timestamp}` : '/api/coach/wallet-transactions';
+    const res = await api.get(url);
     return res.data;
   },
 
   // 获取教练的钱包余额
-  getWalletBalance: async () => {
-    const res = await api.get('/api/coach/wallet-balance');
+  getWalletBalance: async (timestamp = '') => {
+    const url = timestamp ? `/api/coach/wallet-balance${timestamp}` : '/api/coach/wallet-balance';
+    const res = await api.get(url);
     return res.data;
   }
 };
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Court.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.entity;\r\n\r\nimport com.fasterxml.jackson.annotation.JsonBackReference;\r\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\r\nimport jakarta.persistence.*;\r\nimport lombok.Data;\r\nimport java.time.LocalDateTime;\r\nimport com.fasterxml.jackson.annotation.JsonIgnore;\r\nimport java.util.List;\r\nimport com.pickleball_backend.pickleball.entity.ClassSession;\r\n\r\n@Entity\r\n@Data\r\n@Table(name = \"court\")\r\npublic class Court {\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Integer id;\r\n\r\n    private String name;\r\n    private String location;\r\n    private String status;\r\n\r\n    @Column(name = \"opening_time\")\r\n    private String openingTime;\r\n\r\n    @Column(name = \"closing_time\")\r\n    private String closingTime;\r\n\r\n    @Column(name = \"operating_days\")\r\n    private String operatingDays;\r\n\r\n    @Column(name = \"is_archived\")\r\n    private Boolean isArchived = false;\r\n\r\n    @Column(name = \"archive_timestamp\")\r\n    private LocalDateTime archiveTimestamp;\r\n\r\n    @Column(name = \"peak_hourly_price\")\r\n    private Double peakHourlyPrice;\r\n\r\n    @Column(name = \"off_peak_hourly_price\")\r\n    private Double offPeakHourlyPrice;\r\n\r\n    @Column(name = \"daily_price\")\r\n    private Double dailyPrice;\r\n\r\n    @Column(name = \"peak_start_time\")\r\n    private String peakStartTime;\r\n\r\n    @Column(name = \"peak_end_time\")\r\n    private String peakEndTime;\r\n\r\n    @ManyToOne\r\n    @JoinColumn(name = \"venue_id\")\r\n    @JsonIgnoreProperties(\"courts\")  // 只忽略 courts，讓 venue 的基本信息能傳遞\r\n    private Venue venue;\r\n\r\n    @OneToMany(mappedBy = \"court\", cascade = CascadeType.ALL)\r\n    @JsonIgnore\r\n    private List<ClassSession> sessions;\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Court.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Court.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Court.java	(revision 89327e12854b108d004ebb020d0592b1c618ecaf)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Court.java	(date 1754163467824)
@@ -3,14 +3,16 @@
 import com.fasterxml.jackson.annotation.JsonBackReference;
 import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
 import jakarta.persistence.*;
-import lombok.Data;
+import lombok.Getter;
+import lombok.Setter;
 import java.time.LocalDateTime;
 import com.fasterxml.jackson.annotation.JsonIgnore;
 import java.util.List;
 import com.pickleball_backend.pickleball.entity.ClassSession;
 
 @Entity
-@Data
+@Getter
+@Setter
 @Table(name = "court")
 public class Court {
     @Id
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Feedback.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.entity;\r\n\r\nimport jakarta.persistence.*;\r\nimport lombok.Data;\r\nimport java.time.LocalDateTime;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n@Entity\r\n@Data\r\n@Table(name = \"feedback\")\r\npublic class Feedback {\r\n\r\n    public enum TargetType {\r\n        COURT, EVENT, COACH\r\n    }\r\n\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Integer id;\r\n\r\n    @Enumerated(EnumType.STRING)\r\n    private TargetType targetType;\r\n\r\n    private Integer targetId; // ID of court, event, or coach\r\n\r\n    private Integer rating; // 1-5\r\n\r\n    private String review;\r\n\r\n    @ManyToOne\r\n    @JoinColumn(name = \"user_id\", referencedColumnName = \"id\")\r\n    private User user;\r\n\r\n    @ManyToOne\r\n    @JoinColumn(name = \"booking_id\", referencedColumnName = \"id\")\r\n    private Booking booking; // 新增：关联到具体的预订\r\n\r\n    private LocalDateTime createdAt = LocalDateTime.now();\r\n\r\n    @ElementCollection\r\n    private List<String> tags = new ArrayList<>();\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Feedback.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Feedback.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Feedback.java	(revision 89327e12854b108d004ebb020d0592b1c618ecaf)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Feedback.java	(date 1753990724001)
@@ -36,6 +36,8 @@
     @JoinColumn(name = "booking_id", referencedColumnName = "id")
     private Booking booking; // 新增：关联到具体的预订
 
+    private Integer classSessionId; // 新增：关联到具体的课程
+
     private LocalDateTime createdAt = LocalDateTime.now();
 
     @ElementCollection
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/BookingSlot.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.entity;\r\n\r\nimport jakarta.persistence.*;\r\nimport lombok.Data;\r\nimport java.time.LocalDateTime;\r\n\r\n@Entity\r\n@Data\r\n@Table(name = \"bookingslot\", uniqueConstraints = {\r\n    @UniqueConstraint(columnNames = {\"booking_id\", \"slot_id\"}, name = \"uk_booking_slot\")\r\n})\r\npublic class BookingSlot {\r\n\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Integer id;\r\n\r\n    @ManyToOne\r\n    @JoinColumn(name = \"booking_id\", nullable = false)\r\n    private Booking booking;\r\n\r\n    @ManyToOne\r\n    @JoinColumn(name = \"slot_id\", nullable = false)\r\n    private Slot slot;\r\n\r\n    @Column(nullable = false)\r\n    private LocalDateTime timestamp = LocalDateTime.now();\r\n\r\n    @Column(nullable = false, length = 50)\r\n    private String status; // BOOKED, CANCELLED, COMPLETED\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/BookingSlot.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/BookingSlot.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/BookingSlot.java	(revision 89327e12854b108d004ebb020d0592b1c618ecaf)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/BookingSlot.java	(date 1754163453819)
@@ -1,11 +1,13 @@
 package com.pickleball_backend.pickleball.entity;
 
 import jakarta.persistence.*;
-import lombok.Data;
+import lombok.Getter;
+import lombok.Setter;
 import java.time.LocalDateTime;
 
 @Entity
-@Data
+@Getter
+@Setter
 @Table(name = "bookingslot", uniqueConstraints = {
     @UniqueConstraint(columnNames = {"booking_id", "slot_id"}, name = "uk_booking_slot")
 })
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/CancellationRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.entity;\r\n\r\nimport jakarta.persistence.*;\r\nimport lombok.Data;\r\nimport java.time.LocalDateTime;\r\n\r\n@Entity\r\n@Data\r\n@Table(name = \"cancellation_request\")\r\npublic class CancellationRequest {\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Integer id;\r\n    private Integer approvedBy;\r\n\r\n    @ManyToOne(fetch = FetchType.LAZY)\r\n    @JoinColumn(name = \"booking_id\", nullable = false)\r\n    private Booking booking;\r\n\r\n    @ManyToOne(fetch = FetchType.LAZY)\r\n    @JoinColumn(name = \"session_id\")\r\n    private ClassSession session;\r\n\r\n    private String reason;\r\n\r\n    @Column(name = \"request_date\", nullable = false)\r\n    private LocalDateTime requestDate;\r\n\r\n    @Column(nullable = false, length = 50)\r\n    private String status; // PENDING, APPROVED, REJECTED\r\n\r\n    @Column(name = \"admin_remark\")\r\n    private String adminRemark;\r\n\r\n    @Column(name = \"initiated_by_coach\")\r\n    private Boolean initiatedByCoach;\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/CancellationRequest.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/CancellationRequest.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/CancellationRequest.java	(revision 89327e12854b108d004ebb020d0592b1c618ecaf)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/CancellationRequest.java	(date 1754162824783)
@@ -1,11 +1,13 @@
 package com.pickleball_backend.pickleball.entity;
 
 import jakarta.persistence.*;
-import lombok.Data;
+import lombok.Getter;
+import lombok.Setter;
 import java.time.LocalDateTime;
 
 @Entity
-@Data
+@Getter
+@Setter
 @Table(name = "cancellation_request")
 public class CancellationRequest {
     @Id
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Slot.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.entity;\r\n\r\nimport jakarta.persistence.*;\r\nimport lombok.Data;\r\nimport java.time.LocalDate;\r\nimport java.time.LocalTime;\r\nimport java.util.List;\r\n\r\n@Entity\r\n@Data\r\n@Table(name = \"slot\")\r\npublic class Slot {\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Integer id;\r\n\r\n    @Column(name = \"court_id\")\r\n    private Integer courtId;\r\n\r\n    @Column(name = \"date\")\r\n    private LocalDate date;\r\n\r\n    @Column(name = \"start_time\")\r\n    private LocalTime startTime;\r\n\r\n    @Column(name = \"end_time\")\r\n    private LocalTime endTime;\r\n\r\n    @Column(name = \"is_available\")\r\n    private boolean isAvailable;\r\n\r\n    @OneToMany(mappedBy = \"slot\", cascade = CascadeType.ALL, fetch = FetchType.LAZY)\r\n    private List<BookingSlot> bookingSlots;\r\n\r\n    @Column(name = \"status\")\r\n    private String status;\r\n\r\n    @Column(name = \"duration_hours\", nullable = false)\r\n    private Integer durationHours = 1;\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Slot.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Slot.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Slot.java	(revision 89327e12854b108d004ebb020d0592b1c618ecaf)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Slot.java	(date 1754163456853)
@@ -1,13 +1,15 @@
 package com.pickleball_backend.pickleball.entity;
 
 import jakarta.persistence.*;
-import lombok.Data;
+import lombok.Getter;
+import lombok.Setter;
 import java.time.LocalDate;
 import java.time.LocalTime;
 import java.util.List;
 
 @Entity
-@Data
+@Getter
+@Setter
 @Table(name = "slot")
 public class Slot {
     @Id
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Member.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.entity;\r\n\r\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\r\nimport jakarta.persistence.*;\r\nimport lombok.*;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n@Entity\r\n@Table(name = \"member\")\r\n@Getter\r\n@Setter\r\n@NoArgsConstructor\r\n@EqualsAndHashCode(onlyExplicitlyIncluded = true)\r\npublic class Member {\r\n    @Id\r\n    @Column(name = \"user_id\")\r\n    private Integer id;\r\n\r\n    @Column(name = \"point_balance\", nullable = false, columnDefinition = \"int default 0\")\r\n    private int pointBalance = 0;\r\n\r\n    @OneToMany(mappedBy = \"member\", cascade = CascadeType.ALL)\r\n    private List<Voucher> vouchers = new ArrayList<>();\r\n\r\n    @Column(name = \"credit_earned\", columnDefinition = \"DECIMAL(10,2) DEFAULT 0.00\")\r\n    private Double creditEarned = 0.00;\r\n\r\n    @Column(name = \"internal_credit\", columnDefinition = \"DECIMAL(10,2) DEFAULT 0.00\")\r\n    private Double internalCredit = 0.00;\r\n\r\n    @OneToOne\r\n    @MapsId\r\n    @JoinColumn(name = \"user_id\")\r\n    @JsonIgnoreProperties({\"member\", \"userAccount\", \"sentMessages\", \"receivedMessages\", \"coachSessions\"})\r\n    private User user;\r\n\r\n    @ManyToOne\r\n    @JoinColumn(name = \"tier_id\")\r\n    private MembershipTier tier;\r\n\r\n    @OneToOne(mappedBy = \"member\", cascade = CascadeType.ALL)\r\n    private Wallet wallet;\r\n\r\n    @OneToMany(mappedBy = \"member\", cascade = CascadeType.ALL, orphanRemoval = true)\r\n    private List<Registration> registrations = new ArrayList<>();\r\n\r\n    @OneToMany(mappedBy = \"organizer\")\r\n    private List<FriendlyMatch> organizedMatches;\r\n\r\n    @OneToMany(mappedBy = \"member\")\r\n    private List<JoinRequest> joinRequests;\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Member.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Member.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Member.java	(revision 89327e12854b108d004ebb020d0592b1c618ecaf)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Member.java	(date 1754078077519)
@@ -18,8 +18,11 @@
     @Column(name = "user_id")
     private Integer id;
 
-    @Column(name = "point_balance", nullable = false, columnDefinition = "int default 0")
-    private int pointBalance = 0;
+    @Column(name = "tier_point_balance", nullable = false, columnDefinition = "int default 0")
+    private int tierPointBalance = 0;
+
+    @Column(name = "reward_point_balance", nullable = false, columnDefinition = "int default 0")
+    private int rewardPointBalance = 0;
 
     @OneToMany(mappedBy = "member", cascade = CascadeType.ALL)
     private List<Voucher> vouchers = new ArrayList<>();
Index: pickleball-frontend/src/components/feedback/MyFeedbackPage.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Box,\r\n  Typography,\r\n  CircularProgress,\r\n  Snackbar,\r\n  Alert,\r\n  useTheme,\r\n  alpha,\r\n  Card,\r\n  CardContent,\r\n  Grid,\r\n  Chip,\r\n  Button,\r\n  Avatar,\r\n  IconButton,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  TextField,\r\n  Select,\r\n  MenuItem,\r\n  FormControl,\r\n  InputLabel,\r\n  Divider\r\n} from '@mui/material';\r\nimport { useAuth } from '../../context/AuthContext';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport api from '../../service/api';\r\nimport StarRating from './StarRating';\r\nimport CourtService from '../../service/CourtService';\r\n\r\nimport axios from 'axios';\r\nimport UserService from '../../service/UserService';\r\nimport EditIcon from '@mui/icons-material/Edit';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport RateReviewIcon from '@mui/icons-material/RateReview';\r\nimport StarIcon from '@mui/icons-material/Star';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\n\r\nconst MyFeedbackPage = () => {\r\n  const theme = useTheme();\r\n  const { currentUser, isAuthenticated } = useAuth();\r\n  const navigate = useNavigate();\r\n  const [feedbackList, setFeedbackList] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState('');\r\n  const [success, setSuccess] = useState('');\r\n  const [userData, setUserData] = useState(null);\r\n  const [openDialog, setOpenDialog] = useState(false);\r\n  const [formData, setFormData] = useState({\r\n    targetType: '',\r\n    targetId: '',\r\n    rating: 0,\r\n    review: '',\r\n    tags: []\r\n  });\r\n  const [courtOptions, setCourtOptions] = useState([]);\r\n  const [submitting, setSubmitting] = useState(false);\r\n  const [tagInput, setTagInput] = useState('');\r\n  const [editMode, setEditMode] = useState(false);\r\n  const [editingId, setEditingId] = useState(null);\r\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\r\n  const [deleteId, setDeleteId] = useState(null);\r\n  const [deletedFeedback, setDeletedFeedback] = useState(null);\r\n  const [feedbackErrorDialog, setFeedbackErrorDialog] = useState({ open: false, message: '' });\r\n\r\n  // Fetch user data\r\n  useEffect(() => {\r\n    const fetchUserData = async () => {\r\n      try {\r\n        const token = UserService.getToken();\r\n        if (!token) return;\r\n        const profileResponse = await axios.get('http://localhost:8081/api/profile', {\r\n          headers: { Authorization: `Bearer ${token}` }\r\n        });\r\n        setUserData(profileResponse.data);\r\n      } catch (err) {\r\n        console.error('Failed to load user data:', err);\r\n      }\r\n    };\r\n    fetchUserData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!isAuthenticated()) return;\r\n\r\n    const fetchFeedback = async () => {\r\n      try {\r\n        setLoading(true);\r\n          const response = await api.get('/feedback/user');\r\n        setFeedbackList(response.data);\r\n      } catch (err) {\r\n        setError('Failed to load your feedback');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchFeedback();\r\n  }, [isAuthenticated]);\r\n\r\n  // Fetch courts when dialog opens and type is 'COURT'\r\n  useEffect(() => {\r\n    if (openDialog && formData.targetType === 'COURT') {\r\n      CourtService.getAllCourts().then(setCourtOptions).catch(() => setCourtOptions([]));\r\n    }\r\n  }, [openDialog, formData.targetType]);\r\n\r\n  const handleOpenDialog = (feedback = null) => {\r\n    if (feedback) {\r\n      setFormData({\r\n        targetType: feedback.targetType,\r\n        targetId: feedback.targetId,\r\n        rating: feedback.rating,\r\n        review: feedback.review || '',\r\n        tags: feedback.tags || []\r\n      });\r\n      setEditMode(true);\r\n      setEditingId(feedback.id);\r\n    } else {\r\n      setFormData({ targetType: '', targetId: '', rating: 0, review: '', tags: [] });\r\n      setEditMode(false);\r\n      setEditingId(null);\r\n    }\r\n    setTagInput('');\r\n    setOpenDialog(true);\r\n  };\r\n\r\n  const handleCloseDialog = () => {\r\n    setOpenDialog(false);\r\n    setFormData({ targetType: '', targetId: '', rating: 0, review: '', tags: [] });\r\n    setEditMode(false);\r\n    setEditingId(null);\r\n    setTagInput('');\r\n  };\r\n\r\n  const handleFormChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData((prev) => ({ ...prev, [name]: value }));\r\n  };\r\n\r\n  const handleTagInputChange = (e) => {\r\n    setTagInput(e.target.value);\r\n  };\r\n\r\n  const handleTagInputKeyDown = (e) => {\r\n    if ((e.key === 'Enter' || e.key === ',') && tagInput.trim()) {\r\n      e.preventDefault();\r\n      if (!formData.tags.includes(tagInput.trim())) {\r\n        setFormData((prev) => ({ ...prev, tags: [...prev.tags, tagInput.trim()] }));\r\n      }\r\n      setTagInput('');\r\n    }\r\n  };\r\n\r\n  const handleRemoveTag = (tagToRemove) => {\r\n    setFormData((prev) => ({ ...prev, tags: prev.tags.filter(tag => tag !== tagToRemove) }));\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    \r\n    if (!isFormValid()) {\r\n      setFeedbackErrorDialog({ \r\n        open: true, \r\n        message: 'Please fill in all required fields (Target Type, Target, Rating, and Review).' \r\n      });\r\n      return;\r\n    }\r\n    \r\n    if (editMode && !isFormChanged()) {\r\n      setFeedbackErrorDialog({ \r\n        open: true, \r\n        message: 'No changes detected. Please make changes before updating.' \r\n      });\r\n      return;\r\n    }\r\n    \r\n    setSubmitting(true);\r\n    try {\r\n      const payload = {\r\n        targetType: formData.targetType,\r\n        targetId: formData.targetId,\r\n        rating: formData.rating,\r\n        review: formData.review,\r\n        tags: formData.tags\r\n      };\r\n      \r\n      if (editMode && editingId) {\r\n        await api.put(`/feedback/${editingId}`, payload);\r\n      } else {\r\n        await api.post('/feedback', payload);\r\n      }\r\n      \r\n      handleCloseDialog();\r\n      \r\n      // Refresh feedback list\r\n      const response = await api.get('/feedback/user');\r\n      setFeedbackList(response.data);\r\n      \r\n      // Show success message\r\n      setFeedbackErrorDialog({ \r\n        open: true, \r\n        message: editMode ? 'Review updated successfully!' : 'Review submitted successfully!' \r\n      });\r\n    } catch (err) {\r\n      let msg = 'Failed to submit feedback. Please try again.';\r\n      if (err.response && err.response.data) {\r\n        if (typeof err.response.data === 'string') {\r\n          msg = err.response.data;\r\n        } else if (err.response.data.message) {\r\n          msg = err.response.data.message;\r\n        } else if (err.response.data.error) {\r\n          msg = err.response.data.error;\r\n        }\r\n      } else if (err.message) {\r\n        msg = err.message;\r\n      }\r\n      setFeedbackErrorDialog({ open: true, message: msg });\r\n    } finally {\r\n      setSubmitting(false);\r\n    }\r\n  };\r\n\r\n  const handleDeleteClick = (feedback) => {\r\n    setDeleteId(feedback.id);\r\n    setDeletedFeedback(feedback);\r\n    setDeleteDialogOpen(true);\r\n  };\r\n\r\n  const handleDeleteConfirm = async () => {\r\n    try {\r\n      await api.delete(`/feedback/${deleteId}`);\r\n      setDeleteDialogOpen(false);\r\n      setDeleteId(null);\r\n      const response = await api.get('/feedback/user');\r\n      setFeedbackList(response.data);\r\n      \r\n      setFeedbackErrorDialog({ \r\n        open: true, \r\n        message: 'Review deleted successfully! You can now leave a new review for this booking.' \r\n      });\r\n    } catch (err) {\r\n      setError('Failed to delete feedback. Please try again.');\r\n      setDeleteId(null);\r\n      setDeletedFeedback(null);\r\n    }\r\n  };\r\n\r\n  const handleDeleteCancel = () => {\r\n    setDeleteDialogOpen(false);\r\n    setDeleteId(null);\r\n    setDeletedFeedback(null);\r\n  };\r\n\r\n  const calculateAverageRating = (items) => {\r\n    if (items.length === 0) return 0;\r\n    const sum = items.reduce((acc, item) => acc + (item.rating || 0), 0);\r\n    return (sum / items.length).toFixed(1);\r\n  };\r\n\r\n  const isFormValid = () => {\r\n    return formData.targetType && formData.targetId && formData.rating > 0 && formData.review.trim();\r\n  };\r\n\r\n  const isFormChanged = () => {\r\n    if (!editMode || !editingId) return true;\r\n    \r\n    const originalFeedback = feedbackList.find(f => f.id === editingId);\r\n    if (!originalFeedback) return true;\r\n    \r\n    return (\r\n      formData.rating !== originalFeedback.rating ||\r\n      formData.review !== (originalFeedback.review || '') ||\r\n      JSON.stringify(formData.tags) !== JSON.stringify(originalFeedback.tags || [])\r\n    );\r\n  };\r\n\r\n  const handleCloseSnackbar = () => { setError(''); setSuccess(''); };\r\n\r\n  if (!isAuthenticated()) {\r\n    return (\r\n      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '80vh' }}>\r\n        <Typography variant=\"h6\" color=\"text.secondary\">\r\n          You need to log in to view your feedback.\r\n        </Typography>\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  if (loading) {\r\n    return (\r\n      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '80vh' }}>\r\n        <CircularProgress size={60} sx={{ color: theme.palette.primary.main }} />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Box sx={{ width: '100%', overflow: 'hidden' }}>\r\n      <Snackbar open={!!error || !!success} autoHideDuration={6000} onClose={handleCloseSnackbar} anchorOrigin={{ vertical: 'top', horizontal: 'center' }}>\r\n        <Alert severity={error ? 'error' : 'success'} onClose={handleCloseSnackbar} sx={{ width: 'auto', boxShadow: '0 4px 20px rgba(0,0,0,0.15)', backdropFilter: 'blur(10px)', background: alpha(theme.palette.background.paper, 0.9) }}>{error || success}</Alert>\r\n      </Snackbar>\r\n      \r\n      {/* 主内容卡片 */}\r\n      <Card sx={{ \r\n        borderRadius: 3, \r\n        boxShadow: '0 8px 32px rgba(0,0,0,0.08)', \r\n        border: `1px solid ${alpha(theme.palette.divider, 0.1)}`,\r\n        overflow: 'hidden',\r\n        background: `linear-gradient(145deg, ${theme.palette.background.paper} 0%, ${alpha(theme.palette.primary.main, 0.02)} 100%)`\r\n      }}>\r\n        <CardContent sx={{ p: { xs: 3, md: 4 } }}>\r\n          {/* 页面标题 */}\r\n          <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, mb: 3 }}>\r\n            <RateReviewIcon sx={{ fontSize: 32, color: theme.palette.primary.main }} />\r\n            <Typography variant=\"h4\" fontWeight=\"bold\">\r\n              My Feedback\r\n            </Typography>\r\n          </Box>\r\n\r\n          {/* 统计卡片 */}\r\n          <Grid container spacing={3} sx={{ mb: 4 }}>\r\n            <Grid item xs={12} md={6}>\r\n              <Card sx={{ \r\n                borderRadius: 3,\r\n                background: `linear-gradient(135deg, ${alpha(theme.palette.primary.main, 0.1)} 0%, ${alpha(theme.palette.primary.main, 0.05)} 100%)`\r\n              }}>\r\n                <CardContent sx={{ p: 3, textAlign: 'center' }}>\r\n                  <RateReviewIcon sx={{ fontSize: 48, color: theme.palette.primary.main, mb: 1 }} />\r\n                  <Typography variant=\"h3\" fontWeight=\"bold\" color={theme.palette.primary.main}>\r\n                    {feedbackList.length}\r\n                  </Typography>\r\n                  <Typography variant=\"body1\" color=\"text.secondary\">\r\n                    Total Feedback\r\n                  </Typography>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n            <Grid item xs={12} md={6}>\r\n              <Card sx={{ \r\n                borderRadius: 3,\r\n                background: `linear-gradient(135deg, ${alpha(theme.palette.warning.main, 0.1)} 0%, ${alpha(theme.palette.warning.main, 0.05)} 100%)`\r\n              }}>\r\n                <CardContent sx={{ p: 3, textAlign: 'center' }}>\r\n                  <StarIcon sx={{ fontSize: 48, color: theme.palette.warning.main, mb: 1 }} />\r\n                  <Typography variant=\"h3\" fontWeight=\"bold\" color={theme.palette.warning.main}>\r\n                    {calculateAverageRating(feedbackList)}\r\n                  </Typography>\r\n                  <Typography variant=\"body1\" color=\"text.secondary\">\r\n                    Average Rating\r\n                  </Typography>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n          </Grid>\r\n\r\n          {/* 删除后提示 */}\r\n          {deletedFeedback && (\r\n            <Card sx={{ \r\n              mb: 3,\r\n              background: `linear-gradient(135deg, ${alpha(theme.palette.success.main, 0.1)} 0%, ${alpha(theme.palette.success.main, 0.05)} 100%)`,\r\n              border: `2px solid ${theme.palette.success.main}`\r\n            }}>\r\n              <CardContent sx={{ p: 3, textAlign: 'center' }}>\r\n                <Typography variant=\"h6\" fontWeight=\"bold\" color={theme.palette.success.main} sx={{ mb: 1 }}>\r\n                  ✨ Ready to review again?\r\n                </Typography>\r\n                <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\r\n                  You just deleted a review for {deletedFeedback.targetName}. You can now leave a new review!\r\n                </Typography>\r\n                <Box sx={{ display: 'flex', gap: 2, justifyContent: 'center', flexWrap: 'wrap' }}>\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    color=\"success\"\r\n                    onClick={() => {\r\n                      setDeletedFeedback(null);\r\n                      navigate('/profile/my-bookings');\r\n                    }}\r\n                  >\r\n                    Leave New Review\r\n                  </Button>\r\n                  <Button\r\n                    variant=\"outlined\"\r\n                    color=\"success\"\r\n                    onClick={() => setDeletedFeedback(null)}\r\n                  >\r\n                    Dismiss\r\n                  </Button>\r\n                </Box>\r\n              </CardContent>\r\n            </Card>\r\n          )}\r\n\r\n          {/* Feedback List */}\r\n          {feedbackList.length === 0 ? (\r\n            <Card sx={{ \r\n              borderRadius: 3,\r\n              background: alpha(theme.palette.grey[50], 0.5),\r\n              border: `2px dashed ${alpha(theme.palette.divider, 0.3)}`\r\n            }}>\r\n              <CardContent sx={{ p: 6, textAlign: 'center' }}>\r\n                <Typography variant=\"h1\" sx={{ fontSize: 80, mb: 2, opacity: 0.3 }}>\uD83D\uDCAC</Typography>\r\n                <Typography variant=\"h6\" color=\"text.secondary\" sx={{ mb: 1 }}>\r\n                  No feedback yet\r\n                </Typography>\r\n                <Typography variant=\"body2\" color=\"text.secondary\">\r\n                  Be the first to share your thoughts!\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          ) : (\r\n            <Box sx={{ display: 'flex', flexDirection: 'column', gap: 3 }}>\r\n              {feedbackList.map(item => (\r\n                <Card key={item.id} sx={{ \r\n                  borderRadius: 3,\r\n                  boxShadow: theme.shadows[1],\r\n                  transition: 'box-shadow 0.2s',\r\n                  '&:hover': { boxShadow: theme.shadows[3] }\r\n                }}>\r\n                  <CardContent sx={{ p: 3 }}>\r\n                    <Box sx={{ display: 'flex', alignItems: 'flex-start', gap: 2, mb: 2 }}>\r\n                      <Avatar sx={{ \r\n                        bgcolor: theme.palette.primary.main,\r\n                        width: 50,\r\n                        height: 50\r\n                      }}>\r\n                        {item.userName ? item.userName.charAt(0).toUpperCase() : '?'}\r\n                      </Avatar>\r\n                      <Box sx={{ flex: 1, minWidth: 0 }}>\r\n                        <Typography variant=\"h6\" fontWeight=\"bold\" sx={{ mb: 0.5 }}>\r\n                          {item.targetName || 'Untitled'}\r\n                        </Typography>\r\n                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, mb: 1, flexWrap: 'wrap' }}>\r\n                          <Chip \r\n                            label={item.targetType} \r\n                            size=\"small\" \r\n                            color=\"primary\" \r\n                            variant=\"outlined\"\r\n                          />\r\n                          <Typography variant=\"body2\" color=\"text.secondary\">\r\n                            {item.createdAt ? new Date(item.createdAt).toLocaleDateString() : ''}\r\n                          </Typography>\r\n                          <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\r\n                            <StarRating rating={item.rating} />\r\n                            <Typography variant=\"body2\" color=\"text.secondary\">\r\n                              ({item.rating}/5)\r\n                            </Typography>\r\n                          </Box>\r\n                        </Box>\r\n                        <Typography variant=\"body1\" sx={{ lineHeight: 1.6, mb: 2 }}>\r\n                          {item.review}\r\n                        </Typography>\r\n                        {item.tags && item.tags.length > 0 && (\r\n                          <Box sx={{ display: 'flex', gap: 1, flexWrap: 'wrap', mb: 2 }}>\r\n                            {item.tags.map(tag => (\r\n                              <Chip \r\n                                key={tag} \r\n                                label={tag} \r\n                                size=\"small\" \r\n                                color=\"primary\" \r\n                                variant=\"outlined\"\r\n                              />\r\n                            ))}\r\n                          </Box>\r\n                        )}\r\n                        {/* Edit status indicator */}\r\n                        {editMode && editingId === item.id && (\r\n                          <Chip\r\n                            label=\"Currently editing this review\"\r\n                            color=\"success\"\r\n                            icon={<EditIcon />}\r\n                            sx={{ mb: 2 }}\r\n                          />\r\n                        )}\r\n                        {/* Action buttons */}\r\n                        {currentUser && item.userUsername === currentUser.username && (\r\n                          <Box sx={{ display: 'flex', gap: 1 }}>\r\n                            <Button\r\n                              variant=\"outlined\"\r\n                              size=\"small\"\r\n                              startIcon={<EditIcon />}\r\n                              onClick={() => handleOpenDialog(item)}\r\n                            >\r\n                              Edit\r\n                            </Button>\r\n                            <Button\r\n                              variant=\"outlined\"\r\n                              size=\"small\"\r\n                              color=\"error\"\r\n                              startIcon={<DeleteIcon />}\r\n                              onClick={() => handleDeleteClick(item)}\r\n                            >\r\n                              Delete\r\n                            </Button>\r\n                          </Box>\r\n                        )}\r\n                      </Box>\r\n                    </Box>\r\n                  </CardContent>\r\n                </Card>\r\n              ))}\r\n            </Box>\r\n          )}\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Floating Action Button */}\r\n      <Box\r\n        sx={{\r\n          position: 'fixed',\r\n          bottom: 30,\r\n          right: 30,\r\n          zIndex: 1000\r\n        }}\r\n      >\r\n        <Button\r\n          variant=\"contained\"\r\n          sx={{\r\n            borderRadius: '50%',\r\n            width: 60,\r\n            height: 60,\r\n            minWidth: 60,\r\n            boxShadow: theme.shadows[8]\r\n          }}\r\n          onClick={() => handleOpenDialog()}\r\n        >\r\n          <AddIcon />\r\n        </Button>\r\n      </Box>\r\n\r\n      {/* Feedback Form Dialog */}\r\n      <Dialog \r\n        open={openDialog} \r\n        onClose={handleCloseDialog}\r\n        maxWidth=\"md\"\r\n        fullWidth\r\n        PaperProps={{\r\n          sx: { borderRadius: 3 }\r\n        }}\r\n      >\r\n        <DialogTitle sx={{ pb: 1 }}>\r\n          <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\r\n            <Typography variant=\"h6\" fontWeight=\"bold\">\r\n              {editMode ? 'Edit Feedback' : 'Add New Feedback'}\r\n            </Typography>\r\n            <IconButton onClick={handleCloseDialog}>\r\n              <CloseIcon />\r\n            </IconButton>\r\n          </Box>\r\n        </DialogTitle>\r\n        <Divider />\r\n        <DialogContent sx={{ pt: 3 }}>\r\n          <Box component=\"form\" onSubmit={handleSubmit} sx={{ display: 'flex', flexDirection: 'column', gap: 3 }}>\r\n            <FormControl fullWidth>\r\n              <InputLabel>Target Type</InputLabel>\r\n              <Select\r\n                name=\"targetType\"\r\n                value={formData.targetType}\r\n                onChange={handleFormChange}\r\n                label=\"Target Type\"\r\n                required\r\n              >\r\n                <MenuItem value=\"\">Select Type</MenuItem>\r\n                <MenuItem value=\"COURT\">Court</MenuItem>\r\n                <MenuItem value=\"EVENT\">Event</MenuItem>\r\n                <MenuItem value=\"COACH\">Coach</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n\r\n            {formData.targetType === 'COURT' && (\r\n              <FormControl fullWidth>\r\n                <InputLabel>Court</InputLabel>\r\n                <Select\r\n                  name=\"targetId\"\r\n                  value={formData.targetId}\r\n                  onChange={handleFormChange}\r\n                  label=\"Court\"\r\n                  required\r\n                >\r\n                  <MenuItem value=\"\">Select Court</MenuItem>\r\n                  {courtOptions.map(court => (\r\n                    <MenuItem key={court.id} value={court.id}>\r\n                      {court.name} ({court.location})\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n            )}\r\n\r\n            {formData.targetType === 'EVENT' && (\r\n              <Alert severity=\"warning\">\r\n                Event selection not available yet.\r\n              </Alert>\r\n            )}\r\n\r\n            {formData.targetType === 'COACH' && (\r\n              <Alert severity=\"warning\">\r\n                Coach selection not available yet.\r\n              </Alert>\r\n            )}\r\n\r\n            <Box>\r\n              <Typography variant=\"subtitle2\" sx={{ mb: 1 }}>Rating</Typography>\r\n              <StarRating \r\n                rating={formData.rating} \r\n                interactive \r\n                onRatingChange={r => setFormData(f => ({ ...f, rating: r }))} \r\n              />\r\n            </Box>\r\n\r\n            <TextField\r\n              name=\"review\"\r\n              label=\"Review\"\r\n              value={formData.review}\r\n              onChange={handleFormChange}\r\n              multiline\r\n              rows={4}\r\n              fullWidth\r\n              required\r\n            />\r\n\r\n            <Box>\r\n              <Typography variant=\"subtitle2\" sx={{ mb: 1 }}>Tags (optional)</Typography>\r\n              <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1, mb: 1 }}>\r\n                {formData.tags.map(tag => (\r\n                  <Chip\r\n                    key={tag}\r\n                    label={tag}\r\n                    onDelete={() => handleRemoveTag(tag)}\r\n                    color=\"primary\"\r\n                    variant=\"outlined\"\r\n                  />\r\n                ))}\r\n              </Box>\r\n              <TextField\r\n                value={tagInput}\r\n                onChange={handleTagInputChange}\r\n                onKeyDown={handleTagInputKeyDown}\r\n                placeholder=\"Type and press Enter to add tags\"\r\n                fullWidth\r\n                size=\"small\"\r\n              />\r\n            </Box>\r\n          </Box>\r\n        </DialogContent>\r\n        <Divider />\r\n        <DialogActions sx={{ p: 3 }}>\r\n          <Button onClick={handleCloseDialog} variant=\"outlined\">\r\n            Cancel\r\n          </Button>\r\n          <Button\r\n            onClick={handleSubmit}\r\n            variant=\"contained\"\r\n            disabled={submitting || !isFormValid() || (editMode && !isFormChanged())}\r\n            startIcon={submitting ? <CircularProgress size={16} /> : null}\r\n          >\r\n            {submitting ? (editMode ? 'Updating...' : 'Submitting...') : (editMode ? 'Update' : 'Submit')}\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Delete Confirmation Dialog */}\r\n      <Dialog\r\n        open={deleteDialogOpen}\r\n        onClose={handleDeleteCancel}\r\n        PaperProps={{\r\n          sx: { borderRadius: 3 }\r\n        }}\r\n      >\r\n        <DialogTitle>Confirm Deletion</DialogTitle>\r\n        <DialogContent>\r\n          <Typography>\r\n            Are you sure you want to delete this feedback? You can leave a new review after deletion.\r\n          </Typography>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleDeleteCancel} variant=\"outlined\">\r\n            Cancel\r\n          </Button>\r\n          <Button onClick={handleDeleteConfirm} variant=\"contained\" color=\"error\">\r\n            Delete\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Error/Success Dialog */}\r\n      <Dialog\r\n        open={feedbackErrorDialog.open}\r\n        onClose={() => setFeedbackErrorDialog({ open: false, message: '' })}\r\n        PaperProps={{\r\n          sx: { borderRadius: 3 }\r\n        }}\r\n      >\r\n        <DialogTitle>\r\n          {feedbackErrorDialog.message.includes('successfully') ? 'Success' : 'Error'}\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <Typography>\r\n            {feedbackErrorDialog.message}\r\n          </Typography>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          {feedbackErrorDialog.message.includes('deleted successfully') && (\r\n            <>\r\n              <Button\r\n                onClick={() => {\r\n                  setFeedbackErrorDialog({ open: false, message: '' });\r\n                  navigate('/profile/my-bookings');\r\n                }}\r\n                variant=\"contained\"\r\n              >\r\n                Review Again\r\n              </Button>\r\n              <Button\r\n                onClick={() => {\r\n                  setFeedbackErrorDialog({ open: false, message: '' });\r\n                  setDeletedFeedback(null);\r\n                }}\r\n                variant=\"outlined\"\r\n              >\r\n                Great!\r\n              </Button>\r\n            </>\r\n          )}\r\n          {!feedbackErrorDialog.message.includes('deleted successfully') && (\r\n            <Button\r\n              onClick={() => {\r\n                setFeedbackErrorDialog({ open: false, message: '' });\r\n                if (feedbackErrorDialog.message.includes('successfully')) {\r\n                  setOpenDialog(false);\r\n                } else {\r\n                  setFormData({ targetType: '', targetId: '', rating: 0, review: '', tags: [] });\r\n                  setEditMode(false);\r\n                  setEditingId(null);\r\n                }\r\n              }}\r\n              variant=\"contained\"\r\n            >\r\n              {feedbackErrorDialog.message.includes('successfully') ? 'Great!' : 'OK'}\r\n            </Button>\r\n          )}\r\n        </DialogActions>\r\n      </Dialog>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default MyFeedbackPage;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball-frontend/src/components/feedback/MyFeedbackPage.jsx b/pickleball-frontend/src/components/feedback/MyFeedbackPage.jsx
--- a/pickleball-frontend/src/components/feedback/MyFeedbackPage.jsx	(revision 89327e12854b108d004ebb020d0592b1c618ecaf)
+++ b/pickleball-frontend/src/components/feedback/MyFeedbackPage.jsx	(date 1753989963160)
@@ -454,6 +454,48 @@
                         <Typography variant="body1" sx={{ lineHeight: 1.6, mb: 2 }}>
                           {item.review}
                         </Typography>
+                        
+                        {/* 為教練評價顯示課程詳細信息 */}
+                        {item.targetType === 'COACH' && (item.classSessionTitle || item.venueName || item.courtName) && (
+                          <Card sx={{ 
+                            mt: 2, 
+                            background: alpha(theme.palette.info.main, 0.05),
+                            border: `1px solid ${alpha(theme.palette.info.main, 0.2)}`
+                          }}>
+                            <CardContent sx={{ p: 2 }}>
+                              <Typography variant="subtitle2" color="info.main" sx={{ mb: 1, fontWeight: 'bold' }}>
+                                📚 Class Session Details
+                              </Typography>
+                              <Box sx={{ display: 'flex', flexDirection: 'column', gap: 0.5 }}>
+                                {item.classSessionTitle && (
+                                  <Typography variant="body2" color="text.secondary">
+                                    <strong>Class:</strong> {item.classSessionTitle}
+                                  </Typography>
+                                )}
+                                {item.classSessionDate && (
+                                  <Typography variant="body2" color="text.secondary">
+                                    <strong>Date:</strong> {new Date(item.classSessionDate).toLocaleDateString()}
+                                  </Typography>
+                                )}
+                                {item.classSessionTime && (
+                                  <Typography variant="body2" color="text.secondary">
+                                    <strong>Time:</strong> {item.classSessionTime}
+                                  </Typography>
+                                )}
+                                {item.venueName && (
+                                  <Typography variant="body2" color="text.secondary">
+                                    <strong>Venue:</strong> {item.venueName}
+                                  </Typography>
+                                )}
+                                {item.courtName && (
+                                  <Typography variant="body2" color="text.secondary">
+                                    <strong>Court:</strong> {item.courtName}
+                                  </Typography>
+                                )}
+                              </Box>
+                            </CardContent>
+                          </Card>
+                        )}
                         {item.tags && item.tags.length > 0 && (
                           <Box sx={{ display: 'flex', gap: 1, flexWrap: 'wrap', mb: 2 }}>
                             {item.tags.map(tag => (
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Booking.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.entity;\r\n\r\nimport jakarta.persistence.*;\r\nimport lombok.Data;\r\nimport java.time.LocalDate;\r\n\r\n@Entity\r\n@Data\r\n@Table(name = \"booking\")\r\npublic class Booking {\r\n\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Integer id;\r\n\r\n    @Column(name = \"booking_date\")\r\n    private java.time.LocalDateTime bookingDate;\r\n\r\n    @Column(name = \"total_amount\", nullable = false, columnDefinition = \"double(5,2)\")\r\n    private double totalAmount;\r\n\r\n    @Column( length = 50)\r\n    private String status;\r\n\r\n    @ManyToOne(fetch = FetchType.LAZY)\r\n    @JoinColumn(name = \"member_id\", nullable = false, referencedColumnName = \"user_id\")\r\n    private Member member;\r\n\r\n    @ManyToOne(fetch = FetchType.LAZY)\r\n    @JoinColumn(name = \"payment_id\", nullable = false)\r\n    private Payment payment;\r\n\r\n    @Column(name = \"purpose\")\r\n    private String purpose;\r\n\r\n    @Column(name = \"number_of_players\")\r\n    private Integer numberOfPlayers;\r\n\r\n    @Column(name = \"num_paddles\")\r\n    private Integer numPaddles; // 新增：租借球拍数量\r\n\r\n    @Column(name = \"buy_ball_set\")\r\n    private Boolean buyBallSet; // 新增：购买球组\r\n\r\n    @Column(name = \"purpose_id\")\r\n    private Integer purposeId;\r\n\r\n    @OneToMany(mappedBy = \"booking\", cascade = CascadeType.ALL)\r\n    private java.util.List<BookingSlot> bookingSlots;\r\n\r\n    @OneToOne(mappedBy = \"booking\", cascade = CascadeType.ALL)\r\n    private CancellationRequest cancellationRequest;\r\n\r\n    public enum status {\r\n        CONFIRMED, CANCELLED, PENDING\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Booking.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Booking.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Booking.java	(revision 89327e12854b108d004ebb020d0592b1c618ecaf)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Booking.java	(date 1754164772622)
@@ -1,11 +1,13 @@
 package com.pickleball_backend.pickleball.entity;
 
 import jakarta.persistence.*;
-import lombok.Data;
+import lombok.Getter;
+import lombok.Setter;
 import java.time.LocalDate;
 
 @Entity
-@Data
+@Getter
+@Setter
 @Table(name = "booking")
 public class Booking {
 
@@ -45,10 +47,26 @@
     @Column(name = "purpose_id")
     private Integer purposeId;
 
+    // 新增：voucher 相关字段
+    @Column(name = "voucher_used")
+    private Boolean voucherUsed = false;
+    
+    @Column(name = "original_amount")
+    private Double originalAmount;
+    
+    @Column(name = "discount_amount")
+    private Double discountAmount;
+    
+    @Column(name = "voucher_code")
+    private String voucherCode;
+    
+    @Column(name = "voucher_redemption_id")
+    private Integer voucherRedemptionId;
+
     @OneToMany(mappedBy = "booking", cascade = CascadeType.ALL)
     private java.util.List<BookingSlot> bookingSlots;
 
-    @OneToOne(mappedBy = "booking", cascade = CascadeType.ALL)
+    @OneToOne(mappedBy = "booking")
     private CancellationRequest cancellationRequest;
 
     public enum status {
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Payment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.entity;\r\n\r\nimport jakarta.persistence.*;\r\nimport lombok.Data;\r\nimport java.time.LocalDateTime;\r\n\r\n@Entity\r\n@Data\r\n@Table(name = \"payment\")\r\npublic class Payment {\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Integer id;\r\n\r\n    @Column(nullable = false, columnDefinition = \"decimal(10,2)\")\r\n    private double amount;\r\n\r\n    @Column(name = \"payment_date\")\r\n    private LocalDateTime paymentDate;\r\n\r\n    @Column(name = \"refund_date\")\r\n    private LocalDateTime refundDate;\r\n\r\n    @Column(name = \"status\", length = 50)\r\n    private String status = \"PENDING\";  // PENDING, PROCESSING, COMPLETED, FAILED, CANCELLED, REFUNDED\r\n\r\n    @Column(name = \"payment_type\", length = 20)\r\n    private String paymentType;  // TOP_UP, BOOKING, REFUND\r\n\r\n    @Column(name = \"payment_method\", length = 50)\r\n    private String paymentMethod;  // BANK_CARD, BANK_TRANSFER, E_WALLET, WALLET, INTERNAL_CREDIT\r\n\r\n    @Column(name = \"transaction_id\", length = 50)\r\n    private String transactionId;\r\n\r\n    @Column(name = \"reference_id\", length = 50)\r\n    private String referenceId;  // For external payment references\r\n\r\n    @Column(name = \"failure_reason\", length = 500)\r\n    private String failureReason;\r\n\r\n    @Column(name = \"retry_count\", nullable = false)\r\n    private Integer retryCount = 0;\r\n\r\n    @Column(name = \"max_retries\", nullable = false)\r\n    private Integer maxRetries = 3;\r\n\r\n    @Column(name = \"expires_at\")\r\n    private LocalDateTime expiresAt;  // For pending payments\r\n\r\n    @Column(name = \"processed_at\")\r\n    private LocalDateTime processedAt;\r\n\r\n    @Column(name = \"created_at\", nullable = false)\r\n    private LocalDateTime createdAt;\r\n\r\n    @Column(name = \"updated_at\")\r\n    private LocalDateTime updatedAt;\r\n\r\n    @Column(name = \"group_booking_id\")\r\n    private String groupBookingId; // UUID字串\r\n\r\n    @OneToOne(mappedBy = \"payment\")\r\n    private Booking booking;\r\n\r\n    @OneToOne(mappedBy = \"payment\")\r\n    private ClassSession session;\r\n\r\n    @PrePersist\r\n    protected void onCreate() {\r\n        createdAt = LocalDateTime.now();\r\n        updatedAt = LocalDateTime.now();\r\n        if (paymentDate == null) {\r\n            paymentDate = LocalDateTime.now();\r\n        }\r\n    }\r\n\r\n    @PreUpdate\r\n    protected void onUpdate() {\r\n        updatedAt = LocalDateTime.now();\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Payment.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Payment.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Payment.java	(revision 89327e12854b108d004ebb020d0592b1c618ecaf)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Payment.java	(date 1754163464080)
@@ -1,11 +1,13 @@
 package com.pickleball_backend.pickleball.entity;
 
 import jakarta.persistence.*;
-import lombok.Data;
+import lombok.Getter;
+import lombok.Setter;
 import java.time.LocalDateTime;
 
 @Entity
-@Data
+@Getter
+@Setter
 @Table(name = "payment")
 public class Payment {
     @Id
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/BookingService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.service;\r\n\r\nimport com.pickleball_backend.pickleball.dto.*;\r\nimport com.pickleball_backend.pickleball.entity.*;\r\nimport com.pickleball_backend.pickleball.exception.ResourceNotFoundException;\r\nimport com.pickleball_backend.pickleball.exception.ValidationException;\r\nimport com.pickleball_backend.pickleball.repository.*;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.springframework.security.core.context.SecurityContextHolder;\r\nimport org.springframework.stereotype.Service;\r\nimport org.springframework.transaction.annotation.Transactional;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\nimport java.time.Duration;\r\nimport java.time.LocalDate;\r\nimport java.time.LocalDateTime;\r\nimport java.time.LocalTime;\r\nimport java.time.format.DateTimeParseException;\r\nimport java.util.List;\r\nimport java.util.Objects;\r\nimport java.util.Optional;\r\nimport java.util.stream.Collectors;\r\n\r\n@Service\r\n@RequiredArgsConstructor\r\npublic class BookingService {\r\n\r\n    private final BookingRepository bookingRepository;\r\n    private final SlotRepository slotRepository;\r\n    private final CourtRepository courtRepository;\r\n    private final MemberRepository memberRepository;\r\n    private final PaymentRepository paymentRepository;\r\n    private final UserAccountRepository userAccountRepository;\r\n    private final EmailService emailService;\r\n    private final CancellationRequestRepository cancellationRequestRepository;\r\n    private final BookingSlotRepository bookingSlotRepository;\r\n    private final UserRepository userRepository;\r\n    private final WalletRepository walletRepository;\r\n    private final FeedbackRepository feedbackRepository;\r\n    private final FriendlyMatchService friendlyMatchService;\r\n    private final TierService tierService;\r\n    private static final Logger log = LoggerFactory.getLogger(BookingService.class);\r\n\r\n    private static final String CANCELLED_STATUS = \"CANCELLED\";\r\n\r\n    @Transactional\r\n    public BookingResponseDto bookCourt(BookingRequestDto request) {\r\n        // 1. Get authenticated user\r\n        String username = SecurityContextHolder.getContext().getAuthentication().getName();\r\n        UserAccount account = userAccountRepository.findByUsername(username)\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"User account not found\"));\r\n\r\n        // 2. Get member\r\n        Member member = memberRepository.findByUserId(account.getUser().getId());\r\n        if (member == null) {\r\n            throw new ResourceNotFoundException(\"Member not found\");\r\n        }\r\n\r\n        // 3. Get wallet (create if missing)\r\n        Wallet wallet = getOrCreateWallet(member);\r\n\r\n        // 4. 多 slot 合并逻辑\r\n        List<Integer> slotIds = request.getSlotIds() != null && !request.getSlotIds().isEmpty()\r\n            ? request.getSlotIds()\r\n            : (request.getSlotId() != null ? List.of(request.getSlotId()) : List.of());\r\n        \r\n        // 添加调试日志\r\n        log.info(\"Booking request - slotId: {}, slotIds: {}, final slotIds: {}\", \r\n                request.getSlotId(), request.getSlotIds(), slotIds);\r\n        \r\n        if (slotIds.isEmpty()) {\r\n            throw new ValidationException(\"No slot selected\");\r\n        }\r\n\r\n        // 5. 获取所有 slot，校验连续性、可用性\r\n        List<Slot> slots = slotRepository.findAllById(slotIds);\r\n        log.info(\"Found {} slots out of {} requested slotIds\", slots.size(), slotIds.size());\r\n        \r\n        if (slots.size() != slotIds.size()) {\r\n            throw new ResourceNotFoundException(\"Some slots not found\");\r\n        }\r\n        // 按时间排序\r\n        slots.sort((a, b) -> a.getStartTime().compareTo(b.getStartTime()));\r\n        // 校验连续性\r\n        for (int i = 1; i < slots.size(); i++) {\r\n            if (!slots.get(i).getStartTime().equals(slots.get(i-1).getEndTime())) {\r\n                throw new ValidationException(\"Selected slots are not consecutive\");\r\n            }\r\n        }\r\n        // 校验全部可用\r\n        for (Slot slot : slots) {\r\n            if (!slot.isAvailable() || isSlotBooked(slot.getId())) {\r\n                throw new IllegalStateException(\"Slot \" + slot.getId() + \" is not available\");\r\n            }\r\n        }\r\n\r\n        // 6. Get court and calculate price\r\n        Court court = courtRepository.findById(slots.get(0).getCourtId())\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"Court not found\"));\r\n        int totalDuration = slots.stream().mapToInt(Slot::getDurationHours).sum();\r\n        double baseAmount = calculateBookingAmount(court, slots.get(0), totalDuration); // 以第一个slot为基准\r\n\r\n        // 新增：加上 paddle/ball set\r\n        int numPaddles = request.getNumPaddles() != null ? request.getNumPaddles() : 0;\r\n        boolean buyBallSet = request.getBuyBallSet() != null && request.getBuyBallSet();\r\n        double paddleFee = numPaddles * 5.0;\r\n        double ballSetFee = buyBallSet ? 12.0 : 0.0;\r\n        double amount = baseAmount + paddleFee + ballSetFee;\r\n\r\n        // 7. Process wallet payment if requested\r\n        Payment payment = new Payment();\r\n        payment.setAmount(amount);\r\n        payment.setPaymentDate(LocalDateTime.now());\r\n        payment.setPaymentType(\"BOOKING\");\r\n\r\n        if (request.isUseWallet()) {\r\n            if (wallet.getBalance() < amount) {\r\n                throw new ValidationException(\"Insufficient wallet balance. Available: \" + wallet.getBalance());\r\n            }\r\n            wallet.setBalance(wallet.getBalance() - amount);\r\n            walletRepository.save(wallet);\r\n            payment.setPaymentMethod(\"WALLET\");\r\n            payment.setStatus(\"COMPLETED\");\r\n        } else {\r\n            payment.setPaymentMethod(\"OTHER\");\r\n            payment.setStatus(\"PENDING\");\r\n        }\r\n        payment = paymentRepository.save(payment);\r\n\r\n        // 8. Create booking\r\n        Booking booking = new Booking();\r\n        booking.setBookingDate(LocalDateTime.now());\r\n        booking.setTotalAmount(amount);\r\n        String bookingStatus = \"CONFIRMED\";\r\n        if (bookingStatus.length() > 50) {\r\n            bookingStatus = bookingStatus.substring(0, 50);\r\n        }\r\n        booking.setStatus(bookingStatus);\r\n        booking.setMember(member);\r\n        booking.setPayment(payment);\r\n        booking.setPurpose(request.getPurpose());\r\n        booking.setNumberOfPlayers(request.getNumberOfPlayers());\r\n        booking.setNumPaddles(request.getNumPaddles());\r\n        booking.setBuyBallSet(request.getBuyBallSet());\r\n        booking = bookingRepository.save(booking);\r\n\r\n        // 9. Create BookingSlot records\r\n        log.info(\"Creating {} BookingSlot records for booking {}\", slots.size(), booking.getId());\r\n        for (Slot slot : slots) {\r\n            // Check for existing booking slot to prevent duplicates\r\n            boolean existingBookingSlot = bookingSlotRepository.existsByBookingIdAndSlotId(booking.getId(), slot.getId());\r\n            if (existingBookingSlot) {\r\n                log.warn(\"BookingSlot already exists for bookingId={}, slotId={}\", booking.getId(), slot.getId());\r\n                continue;\r\n            }\r\n\r\n            BookingSlot bookingSlot = new BookingSlot();\r\n            bookingSlot.setBooking(booking);\r\n            bookingSlot.setSlot(slot);\r\n            String statusValue = \"BOOKED\";\r\n            if (statusValue.length() > 50) {\r\n                statusValue = statusValue.substring(0, 50);\r\n            }\r\n            bookingSlot.setStatus(statusValue);\r\n            bookingSlotRepository.save(bookingSlot);\r\n            log.info(\"Created BookingSlot: bookingId={}, slotId={}\", booking.getId(), slot.getId());\r\n            // 10. Update slot availability\r\n            slot.setAvailable(false);\r\n            slotRepository.save(slot);\r\n        }\r\n\r\n        // 11. Generate receipt\r\n        emailService.sendBookingConfirmation(account.getUser().getEmail(), booking, court, slots.get(0));\r\n\r\n        // 11.5. Add points reward (1 point per RM1 spent)\r\n        int pointsEarned = (int) Math.round(amount);\r\n\r\n        // Store old tier for comparison\r\n        String oldTierName = member.getTier() != null ? member.getTier().getTierName() : \"NONE\";\r\n\r\n        member.setPointBalance(member.getPointBalance() + pointsEarned);\r\n        memberRepository.save(member);\r\n        log.info(\"Added {} points to member {} for booking {}\", pointsEarned, member.getId(), booking.getId());\r\n\r\n        // Automatic tier upgrade check after booking\r\n        tierService.recalculateMemberTier(member);\r\n\r\n        // Refresh member data to get updated tier\r\n        member = memberRepository.findByUserId(member.getUser().getId());\r\n        String newTierName = member.getTier() != null ? member.getTier().getTierName() : \"NONE\";\r\n\r\n        // Log tier upgrade if it occurred\r\n        if (!oldTierName.equals(newTierName)) {\r\n            log.info(\"\uD83C\uDF89 Automatic tier upgrade after booking: {} -> {} (Points: {} -> {})\",\r\n                    oldTierName, newTierName, member.getPointBalance() - pointsEarned, member.getPointBalance());\r\n        }\r\n\r\n        // 12. Create response with updated balance\r\n        BookingResponseDto response = mapToBookingResponse(booking, court, slots.get(0));\r\n        response.setDurationHours(totalDuration);\r\n        response.setWalletBalance(wallet.getBalance());\r\n\r\n        // 13. 更新用户统计数据\r\n        User user = member.getUser();\r\n        if (user != null) {\r\n            List<Booking> userBookings = bookingRepository.findByMemberId(member.getId());\r\n            user.setBookingsMade(userBookings.size());\r\n            // 统计所有预订的总时长（小时）\r\n            double totalHours = userBookings.stream().mapToDouble(b -> {\r\n                if (b.getBookingSlots() != null && !b.getBookingSlots().isEmpty()) {\r\n                    return b.getBookingSlots().stream().mapToInt(bs -> bs.getSlot().getDurationHours()).sum();\r\n                } else if (b.getNumberOfPlayers() != null) {\r\n                    return 0; // 这里不能用 numberOfPlayers，老数据无 duration 时记为0\r\n                } else {\r\n                    return 0;\r\n                }\r\n            }).sum();\r\n            user.setBookingHours(totalHours);\r\n            user.setAmountSpent(userBookings.stream().mapToDouble(Booking::getTotalAmount).sum());\r\n            userRepository.save(user);\r\n        }\r\n\r\n        return response;\r\n    }\r\n\r\n    private boolean isSlotBooked(Integer slotId) {\r\n        if (slotId == null) return false;\r\n        return bookingSlotRepository.existsBySlotIdAndStatus(slotId, \"BOOKED\");\r\n    }\r\n\r\n    private double calculateBookingAmount(Court court, Slot slot, int durationHours) {\r\n        LocalTime startTime = slot.getStartTime();\r\n        LocalTime endTime = slot.getEndTime();\r\n\r\n        // Handle null pricing safely\r\n        double peakHourlyPrice = court.getPeakHourlyPrice() != null ?\r\n                court.getPeakHourlyPrice() : 0.0;\r\n        double offPeakHourlyPrice = court.getOffPeakHourlyPrice() != null ?\r\n                court.getOffPeakHourlyPrice() : 0.0;\r\n\r\n        // Default to off-peak rate\r\n        double hourlyRate = offPeakHourlyPrice;\r\n\r\n        // Only check peak times if defined\r\n        if (court.getPeakStartTime() != null && court.getPeakEndTime() != null) {\r\n            try {\r\n                LocalTime peakStart = LocalTime.parse(court.getPeakStartTime());\r\n                LocalTime peakEnd = LocalTime.parse(court.getPeakEndTime());\r\n\r\n                // Check if slot falls entirely within peak hours\r\n                if (!startTime.isBefore(peakStart) && !endTime.isAfter(peakEnd)) {\r\n                    hourlyRate = peakHourlyPrice;\r\n                }\r\n            } catch (DateTimeParseException e) {\r\n                log.error(\"Invalid peak time format: {}\", e.getMessage());\r\n                // Maintain off-peak rate if parsing fails\r\n            }\r\n        }\r\n\r\n        return hourlyRate * durationHours;\r\n    }\r\n\r\n    // 生成响应时，slot 相关信息通过 booking.getBookingSlots().get(0).getSlot()\r\n    private BookingResponseDto mapToBookingResponse(Booking booking, Court court, Slot slot) {\r\n        BookingResponseDto response = new BookingResponseDto();\r\n        response.setBookingId(booking.getId());\r\n        response.setCourtName(court.getName());\r\n        response.setCourtLocation(court.getLocation());\r\n        // Slot slot = booking.getSlot();\r\n        Slot slot0 = booking.getBookingSlots() != null && !booking.getBookingSlots().isEmpty() ? booking.getBookingSlots().get(0).getSlot() : null;\r\n        if (slot0 != null) {\r\n            response.setSlotDate(slot0.getDate());\r\n            response.setStartTime(slot0.getStartTime());\r\n            response.setEndTime(slot0.getEndTime());\r\n        }\r\n        response.setTotalAmount(booking.getTotalAmount());\r\n        response.setBookingStatus(booking.getStatus());\r\n        response.setPurpose(booking.getPurpose());\r\n        response.setNumberOfPlayers(booking.getNumberOfPlayers());\r\n\r\n        // Add payment details\r\n        if (booking.getPayment() != null) {\r\n            response.setPaymentMethod(booking.getPayment().getPaymentMethod());\r\n            response.setPaymentStatus(booking.getPayment().getStatus());\r\n        } else {\r\n            response.setPaymentMethod(\"N/A\");\r\n            response.setPaymentStatus(\"N/A\");\r\n        }\r\n\r\n        // Add points information\r\n        int pointsEarned = (int) Math.round(booking.getTotalAmount());\r\n        response.setPointsEarned(pointsEarned);\r\n        response.setCurrentPointBalance(booking.getMember().getPointBalance());\r\n\r\n        return response;\r\n    }\r\n\r\n\r\n\r\n    @Transactional\r\n    public CancellationResponse cancelBooking(Integer bookingId, String username, String reason) {\r\n        // 1. 获取用户账户\r\n        UserAccount account = userAccountRepository.findByUsername(username)\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"User account not found\"));\r\n\r\n        // 2. 获取预订信息\r\n        Booking booking = bookingRepository.findById(bookingId)\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"Booking not found\"));\r\n\r\n        // 3. 验证预订所有权\r\n        if (!booking.getMember().getUser().getId().equals(account.getUser().getId())) {\r\n            throw new ValidationException(\"You can only cancel your own bookings\");\r\n        }\r\n\r\n        // 4. 获取时间段信息\r\n        Slot slot = booking.getBookingSlots() != null && !booking.getBookingSlots().isEmpty() ? booking.getBookingSlots().get(0).getSlot() : null;\r\n        if (slot == null) {\r\n            throw new ValidationException(\"No slot found for this booking\");\r\n        }\r\n        LocalDateTime slotDateTime = LocalDateTime.of(slot.getDate(), slot.getStartTime());\r\n        long hours = java.time.temporal.ChronoUnit.HOURS.between(LocalDateTime.now(), slotDateTime);\r\n\r\n        // 5. 自动批准逻辑\r\n        if (hours > 24) {\r\n            // 1. Free up the slot\r\n            slot.setAvailable(true);\r\n            slotRepository.save(slot);\r\n\r\n            // 2. Update booking status\r\n            String bookingStatus = \"CANCELLED\";\r\n            if (bookingStatus.length() > 50) {\r\n                bookingStatus = bookingStatus.substring(0, 50);\r\n            }\r\n            booking.setStatus(bookingStatus);\r\n            bookingRepository.save(booking);\r\n\r\n            // 新增：同步取消 FriendlyMatch\r\n            friendlyMatchService.cancelReservationAndMatch(bookingId);\r\n\r\n            // 3. Update booking slot status\r\n            BookingSlot bookingSlot = booking.getBookingSlots() != null && !booking.getBookingSlots().isEmpty() ? booking.getBookingSlots().get(0) : null;\r\n            if (bookingSlot != null) {\r\n                String slotStatus = \"CANCELLED\";\r\n                if (slotStatus.length() > 50) {\r\n                    slotStatus = slotStatus.substring(0, 50);\r\n                }\r\n                bookingSlot.setStatus(slotStatus);\r\n                bookingSlotRepository.save(bookingSlot);\r\n            }\r\n\r\n            // 4. Update or create cancellation request\r\n            CancellationRequest request = booking.getCancellationRequest();\r\n            if (request == null) {\r\n                request = new CancellationRequest();\r\n                request.setBooking(booking);\r\n                request.setRequestDate(LocalDateTime.now());\r\n            }\r\n            request.setStatus(\"APPROVED\");\r\n            request.setReason(reason != null ? reason : \"User requested cancellation\");\r\n            request.setAdminRemark(\"Auto-approved by system (more than 24h before slot)\");\r\n            cancellationRequestRepository.save(request);\r\n\r\n            // 5. 退款50%到钱包\r\n            double refund = booking.getTotalAmount() * 0.5;\r\n            Wallet wallet = walletRepository.findByMemberId(booking.getMember().getId())\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"Wallet not found\"));\r\n            wallet.setBalance(wallet.getBalance() + refund);\r\n            walletRepository.save(wallet);\r\n            // 可选：记录退款流水\r\n\r\n            // 6. 更新支付状态\r\n            Payment payment = booking.getPayment();\r\n            if (payment != null) {\r\n                payment.setStatus(\"REFUNDED\");\r\n                paymentRepository.save(payment);\r\n            }\r\n\r\n            // 7. 发送邮件通知\r\n            Court court = courtRepository.findById(slot.getCourtId())\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"Court not found\"));\r\n            emailService.sendCancellationDecision(\r\n                booking.getMember().getUser().getEmail(),\r\n                booking,\r\n                slot,\r\n                court != null ? court.getName() : \"Court not found\",\r\n                true\r\n            );\r\n\r\n            return new CancellationResponse(\r\n                request.getId(),\r\n                booking.getId(),\r\n                request.getStatus(),\r\n                request.getRequestDate(),\r\n                \"Cancellation auto-approved and 50% refunded to wallet\"\r\n            );\r\n        }\r\n\r\n        // 6. 原有流程（<=24小时，人工审核）\r\n        // 检查1小时限制\r\n        if (LocalDateTime.now().plusHours(1).isAfter(slotDateTime)) {\r\n            throw new ValidationException(\"Cannot cancel within 1 hour of booking\");\r\n        }\r\n\r\n        // 更新预订状态\r\n        booking.setStatus(\"CANCELLATION_REQUESTED\");\r\n        bookingRepository.save(booking);\r\n\r\n        // 创建取消请求\r\n        CancellationRequest request = new CancellationRequest();\r\n        request.setBooking(booking);\r\n        request.setRequestDate(LocalDateTime.now());\r\n        request.setStatus(\"PENDING\");\r\n        request.setReason(reason != null ? reason : \"User requested cancellation\");\r\n        cancellationRequestRepository.save(request);\r\n\r\n        // 获取场馆信息\r\n        Court court = courtRepository.findById(slot.getCourtId())\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"Court not found\"));\r\n\r\n        // 发送确认邮件\r\n        emailService.sendCancellationConfirmation(\r\n                booking.getMember().getUser().getEmail(),\r\n                booking,\r\n                slot,\r\n                court\r\n        );\r\n\r\n        return new CancellationResponse(\r\n                request.getId(),\r\n                booking.getId(),\r\n                request.getStatus(),\r\n                request.getRequestDate(),\r\n                \"Cancellation request submitted\"\r\n        );\r\n    }\r\n\r\n    public List<SlotResponseDto> getAvailableSlots(LocalDate date) {\r\n        return slotRepository.findByDateAndIsAvailableTrue(date).stream()\r\n                .filter(slot -> {\r\n                    // 檢查是否有課程預約佔用這個時段\r\n                    LocalDateTime startDateTime = LocalDateTime.of(date, slot.getStartTime());\r\n                    LocalDateTime endDateTime = LocalDateTime.of(date, slot.getEndTime());\r\n\r\n                    // 檢查是否有 type=\"class\" 的 Booking 在這個時段\r\n                    long classBookings = bookingRepository.countClassBookingsInTimeRange(\r\n                        slot.getCourtId(), startDateTime, endDateTime);\r\n\r\n                    return classBookings == 0; // 只有沒有課程預約的時段才可用\r\n                })\r\n                .map(slot -> {\r\n                    SlotResponseDto dto = new SlotResponseDto();\r\n                    dto.setId(slot.getId());\r\n                    dto.setCourtId(slot.getCourtId());\r\n                    dto.setDate(slot.getDate());\r\n                    dto.setStartTime(slot.getStartTime());\r\n                    dto.setEndTime(slot.getEndTime());\r\n                    dto.setStatus(\"AVAILABLE\");\r\n                    return dto;\r\n                })\r\n                .collect(Collectors.toList());\r\n    }\r\n\r\n    @Transactional(readOnly = true)\r\n    public List<PendingCancellationRequestDto> getPendingCancellationRequests() {\r\n        return cancellationRequestRepository.findByStatus(\"PENDING\").stream()\r\n                .map(request -> {\r\n                    // Safe navigation through relationships\r\n                    Booking booking = request.getBooking();\r\n                    if (booking == null) return null;\r\n\r\n                    Slot slot = booking.getBookingSlots() != null && !booking.getBookingSlots().isEmpty() ? booking.getBookingSlots().get(0).getSlot() : null;\r\n                    if (slot == null) return null;\r\n\r\n                    // Get court safely\r\n                    Court court = courtRepository.findById(slot.getCourtId()).orElse(null);\r\n\r\n                    // Get member name safely\r\n                    String memberName = Optional.ofNullable(booking.getMember())\r\n                            .map(Member::getUser)\r\n                            .map(User::getName)\r\n                            .orElse(\"Unknown Member\");\r\n\r\n                    return new PendingCancellationRequestDto(\r\n                            request.getId(),\r\n                            booking.getId(),\r\n                            memberName,\r\n                            slot != null ? slot.getDate() : null,\r\n                            slot != null ? slot.getStartTime() : null,\r\n                            court != null ? court.getName() : \"Court not found\",\r\n                            request.getReason()\r\n                    );\r\n                })\r\n                .filter(Objects::nonNull)  // Requires java.util.Objects import\r\n                .collect(Collectors.toList());\r\n    }\r\n\r\n    @Transactional\r\n    public CancellationResponse processCancellation(Integer requestId, boolean approve, String adminRemark) {\r\n        CancellationRequest request = cancellationRequestRepository.findById(requestId)\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"Cancellation request not found\"));\r\n\r\n        if (!\"PENDING\".equals(request.getStatus())) {\r\n            throw new ValidationException(\"Request already processed\");\r\n        }\r\n\r\n        Booking booking = request.getBooking();\r\n        BookingSlot bookingSlot = booking.getBookingSlots() != null && !booking.getBookingSlots().isEmpty() ? booking.getBookingSlots().get(0) : null;\r\n        Slot slot = bookingSlot != null ? bookingSlot.getSlot() : null;\r\n        Court court = slot != null ? courtRepository.findById(slot.getCourtId())\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"Court not found\")) : null;\r\n\r\n        if (approve) {\r\n            // 1. Free up the slot\r\n            slot.setAvailable(true);\r\n            slotRepository.save(slot);\r\n\r\n            // 2. Update booking status\r\n            String bookingStatus = \"CANCELLED\";\r\n            if (bookingStatus.length() > 50) {\r\n                bookingStatus = bookingStatus.substring(0, 50);\r\n            }\r\n            booking.setStatus(bookingStatus);\r\n            bookingRepository.save(booking);\r\n\r\n            // 新增：同步取消 FriendlyMatch\r\n            friendlyMatchService.cancelReservationAndMatch(booking.getId());\r\n\r\n            // 3. Update booking slot status\r\n            String slotStatus = \"CANCELLED\";\r\n            if (slotStatus.length() > 50) {\r\n                slotStatus = slotStatus.substring(0, 50);\r\n            }\r\n            bookingSlot.setStatus(slotStatus);\r\n            bookingSlotRepository.save(bookingSlot);\r\n\r\n            // 4. Update request\r\n            request.setStatus(\"APPROVED\");\r\n\r\n            // Get current admin ID\r\n            String username = SecurityContextHolder.getContext().getAuthentication().getName();\r\n            User adminUser = userRepository.findByUserAccount_Username(username)\r\n                    .orElseThrow(() -> new ResourceNotFoundException(\"Admin user not found\"));\r\n            request.setApprovedBy(adminUser.getId());\r\n        } else {\r\n            // Reject request - revert changes\r\n            String bookingStatus = \"CONFIRMED\";\r\n            if (bookingStatus.length() > 50) {\r\n                bookingStatus = bookingStatus.substring(0, 50);\r\n            }\r\n            booking.setStatus(bookingStatus);\r\n            bookingRepository.save(booking);\r\n\r\n            // Keep booking slot as booked\r\n            String slotStatus = \"BOOKED\";\r\n            if (slotStatus.length() > 50) {\r\n                slotStatus = slotStatus.substring(0, 50);\r\n            }\r\n            bookingSlot.setStatus(slotStatus);\r\n\r\n            request.setStatus(\"REJECTED\");\r\n        }\r\n\r\n        // 新增：保存 adminRemark\r\n        if (adminRemark != null) {\r\n            request.setAdminRemark(adminRemark);\r\n        }\r\n        cancellationRequestRepository.save(request);\r\n\r\n        // Send decision email\r\n        emailService.sendCancellationDecision(\r\n                booking.getMember().getUser().getEmail(),\r\n                booking,\r\n                slot,\r\n                court != null ? court.getName() : \"Court not found\",\r\n                approve\r\n        );\r\n\r\n        return new CancellationResponse(\r\n                request.getId(),\r\n                booking.getId(),\r\n                request.getStatus(),\r\n                request.getRequestDate(),\r\n                approve ? \"Cancellation approved\" : \"Cancellation rejected\"\r\n        );\r\n    }\r\n\r\n    public List<BookingHistoryDto> getBookingHistory(Integer memberId, String status) {\r\n        try {\r\n        List<Booking> bookings = bookingRepository.findByMemberId(memberId);\r\n            log.info(\"Found {} bookings for member {}\", bookings.size(), memberId);\r\n\r\n        // 自动修正已过期的CONFIRMED预订为COMPLETED\r\n        LocalDateTime now = LocalDateTime.now();\r\n        boolean updated = false;\r\n        for (Booking booking : bookings) {\r\n            if (\"CONFIRMED\".equalsIgnoreCase(booking.getStatus())) {\r\n                    // 检查所有 slots 是否都已过期\r\n                    boolean allSlotsExpired = true;\r\n                    if (booking.getBookingSlots() != null && !booking.getBookingSlots().isEmpty()) {\r\n                        for (BookingSlot bookingSlot : booking.getBookingSlots()) {\r\n                            Slot slot = bookingSlot.getSlot();\r\n                if (slot != null && slot.getDate() != null && slot.getEndTime() != null) {\r\n                    LocalDateTime endDateTime = LocalDateTime.of(slot.getDate(), slot.getEndTime());\r\n                                if (endDateTime.isAfter(now)) {\r\n                                    allSlotsExpired = false;\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                        if (allSlotsExpired) {\r\n                        booking.setStatus(\"COMPLETED\");\r\n                        bookingRepository.save(booking);\r\n                        updated = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // 重新获取最新状态\r\n        if (updated) {\r\n            bookings = bookingRepository.findByMemberId(memberId);\r\n        }\r\n\r\n        return bookings.stream()\r\n                .filter(booking -> status == null || booking.getStatus().equalsIgnoreCase(status))\r\n                .map(booking -> {\r\n                        try {\r\n                            log.debug(\"Processing booking {} with {} booking slots\", \r\n                                    booking.getId(), \r\n                                    booking.getBookingSlots() != null ? booking.getBookingSlots().size() : 0);\r\n                            \r\n                            // 获取第一个和最后一个 slot 来显示时间范围\r\n                            Slot firstSlot = null;\r\n                            Slot lastSlot = null;\r\n                            int totalDuration = 0;\r\n                            \r\n                            if (booking.getBookingSlots() != null && !booking.getBookingSlots().isEmpty()) {\r\n                                // 按时间排序\r\n                                List<BookingSlot> sortedSlots = booking.getBookingSlots().stream()\r\n                                        .sorted((a, b) -> a.getSlot().getStartTime().compareTo(b.getSlot().getStartTime()))\r\n                                        .collect(Collectors.toList());\r\n                                \r\n                                firstSlot = sortedSlots.get(0).getSlot();\r\n                                lastSlot = sortedSlots.get(sortedSlots.size() - 1).getSlot();\r\n                                \r\n                                // 计算总时长\r\n                                totalDuration = sortedSlots.stream()\r\n                                        .mapToInt(bs -> bs.getSlot().getDurationHours() != null ? bs.getSlot().getDurationHours() : 1)\r\n                                        .sum();\r\n                                \r\n                                log.debug(\"Booking {} has {} slots, total duration: {}\", \r\n                                        booking.getId(), sortedSlots.size(), totalDuration);\r\n                            } else {\r\n                                log.warn(\"Booking {} has no booking slots!\", booking.getId());\r\n                            }\r\n                            \r\n                            Court court = null;\r\n                            if (firstSlot != null) {\r\n                                court = courtRepository.findById(firstSlot.getCourtId()).orElse(new Court());\r\n                            } else {\r\n                                // 如果没有slots，尝试从booking的其他信息获取court\r\n                                log.warn(\"No slots found for booking {}, trying to get court info from booking\", booking.getId());\r\n                                // 尝试通过查询数据库获取court信息\r\n                                try {\r\n                                    // 查询这个booking的所有bookingSlots\r\n                                    List<BookingSlot> bookingSlots = bookingSlotRepository.findByBookingId(booking.getId());\r\n                                    if (!bookingSlots.isEmpty()) {\r\n                                        Slot slot = bookingSlots.get(0).getSlot();\r\n                                        if (slot != null) {\r\n                                            court = courtRepository.findById(slot.getCourtId()).orElse(new Court());\r\n                                            log.info(\"Found court info for booking {} through direct query: {}\", booking.getId(), court.getName());\r\n                                        }\r\n                                    } else {\r\n                                        log.error(\"No booking slots found in database for booking {}\", booking.getId());\r\n                                        court = new Court();\r\n                                    }\r\n                                } catch (Exception e) {\r\n                                    log.error(\"Error getting court info for booking {}: {}\", booking.getId(), e.getMessage());\r\n                                    court = new Court();\r\n                                }\r\n                            }\r\n\r\n                    BookingHistoryDto dto = new BookingHistoryDto();\r\n                    dto.setId(booking.getId());\r\n                    dto.setCourtId(court.getId()); // 设置court ID\r\n                    dto.setCourtName(court.getName());\r\n                    dto.setLocation(court.getLocation());\r\n                            dto.setDate(firstSlot != null ? firstSlot.getDate() : null);\r\n                            dto.setStartTime(firstSlot != null ? firstSlot.getStartTime() : null);\r\n                            dto.setEndTime(lastSlot != null ? lastSlot.getEndTime() : null);\r\n                    dto.setAmount(booking.getTotalAmount());\r\n                    dto.setStatus(booking.getStatus());\r\n                    dto.setCreatedAt(booking.getBookingDate());\r\n                    dto.setPurpose(booking.getPurpose());\r\n                    dto.setNumberOfPlayers(booking.getNumberOfPlayers());\r\n                            // 新增：设置球拍和球组信息\r\n                            dto.setNumPaddles(booking.getNumPaddles());\r\n                            dto.setBuyBallSet(booking.getBuyBallSet());\r\n                            // 设置总时长\r\n                            dto.setDurationHours(totalDuration);\r\n                            \r\n                            // 检查用户是否已经评价过这个预订\r\n                            boolean hasReviewed = false;\r\n                            if (booking.getMember() != null && booking.getMember().getUser() != null) {\r\n                                hasReviewed = feedbackRepository.findByUserId(booking.getMember().getUser().getId()).stream()\r\n                                        .anyMatch(feedback -> feedback.getBooking() != null \r\n                                                && feedback.getBooking().getId().equals(booking.getId()));\r\n                            }\r\n                            dto.setHasReviewed(hasReviewed);\r\n                            \r\n                            log.debug(\"Created DTO for booking {}: courtName={}, date={}, startTime={}, endTime={}\", \r\n                                    booking.getId(), dto.getCourtName(), dto.getDate(), dto.getStartTime(), dto.getEndTime());\r\n                            \r\n                            return dto;\r\n                        } catch (Exception e) {\r\n                            log.error(\"Error processing booking {}: {}\", booking.getId(), e.getMessage());\r\n                            // 返回一个基本的 DTO，避免整个请求失败\r\n                            BookingHistoryDto dto = new BookingHistoryDto();\r\n                            dto.setId(booking.getId());\r\n                            dto.setStatus(booking.getStatus());\r\n                            dto.setAmount(booking.getTotalAmount());\r\n                            dto.setCreatedAt(booking.getBookingDate());\r\n                            // 尝试从第一个slot获取courtId\r\n                            if (booking.getBookingSlots() != null && !booking.getBookingSlots().isEmpty()) {\r\n                                Slot firstSlot = booking.getBookingSlots().get(0).getSlot();\r\n                                if (firstSlot != null) {\r\n                                    dto.setCourtId(firstSlot.getCourtId());\r\n                                }\r\n                            }\r\n                    return dto;\r\n                        }\r\n                })\r\n                .collect(Collectors.toList());\r\n        } catch (Exception e) {\r\n            log.error(\"Error in getBookingHistory for member {}: {}\", memberId, e.getMessage(), e);\r\n            throw new RuntimeException(\"Failed to load booking history\", e);\r\n        }\r\n    }\r\n\r\n    private Wallet getOrCreateWallet(Member member) {\r\n        return walletRepository.findByMemberId(member.getId())\r\n                .orElseGet(() -> {\r\n                    Wallet newWallet = new Wallet();\r\n                    newWallet.setMember(member);\r\n                    newWallet.setBalance(0.00);\r\n                    return walletRepository.save(newWallet);\r\n                });\r\n    }\r\n\r\n    /**\r\n     * 清理重复的 BookingSlot 记录\r\n     * 这个方法应该只在需要时手动调用\r\n     */\r\n    @Transactional\r\n    public void cleanupDuplicateBookingSlots() {\r\n        log.info(\"Starting cleanup of duplicate booking slots...\");\r\n        \r\n        // 使用原生 SQL 查询找到重复记录\r\n        String findDuplicatesSql = \"\"\"\r\n            SELECT booking_id, slot_id, COUNT(*) as count \r\n            FROM bookingslot \r\n            GROUP BY booking_id, slot_id \r\n            HAVING COUNT(*) > 1\r\n            \"\"\";\r\n        \r\n        // 这里需要注入 JdbcTemplate 来执行原生 SQL\r\n        // 暂时用日志记录，实际清理需要手动执行 SQL\r\n        \r\n        log.warn(\"Duplicate booking slots detected. Please run the following SQL manually:\");\r\n        log.warn(\"DELETE bs1 FROM bookingslot bs1\");\r\n        log.warn(\"INNER JOIN bookingslot bs2\");\r\n        log.warn(\"WHERE bs1.id > bs2.id\");\r\n        log.warn(\"AND bs1.booking_id = bs2.booking_id\");\r\n        log.warn(\"AND bs1.slot_id = bs2.slot_id;\");\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/BookingService.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/BookingService.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/BookingService.java	(revision 89327e12854b108d004ebb020d0592b1c618ecaf)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/BookingService.java	(date 1754164772631)
@@ -40,6 +40,8 @@
     private final FeedbackRepository feedbackRepository;
     private final FriendlyMatchService friendlyMatchService;
     private final TierService tierService;
+    private final VoucherRedemptionRepository voucherRedemptionRepository;
+    private final VoucherRepository voucherRepository;
     private static final Logger log = LoggerFactory.getLogger(BookingService.class);
 
     private static final String CANCELLED_STATUS = "CANCELLED";
@@ -108,6 +110,62 @@
         double ballSetFee = buyBallSet ? 12.0 : 0.0;
         double amount = baseAmount + paddleFee + ballSetFee;
 
+        // 6.5. Process voucher discount if requested
+        VoucherRedemption voucherRedemption = null;
+        double originalAmount = amount;
+        
+        log.info("=== Voucher Debug === Checking voucher conditions:");
+        log.info("=== Voucher Debug === request.isUseVoucher(): {}", request.isUseVoucher());
+        log.info("=== Voucher Debug === request.getVoucherRedemptionId(): {}", request.getVoucherRedemptionId());
+        log.info("=== Voucher Debug === Both conditions met: {}", request.isUseVoucher() && request.getVoucherRedemptionId() != null);
+        
+        if (request.isUseVoucher() && request.getVoucherRedemptionId() != null) {
+            log.info("=== Voucher Debug === Processing voucher redemption ID: {}", request.getVoucherRedemptionId());
+            
+            voucherRedemption = voucherRedemptionRepository.findById(request.getVoucherRedemptionId())
+                    .orElseThrow(() -> new ValidationException("Voucher redemption not found"));
+            
+            log.info("=== Voucher Debug === Found voucher redemption: {}", voucherRedemption);
+            
+            // Verify ownership
+            if (!voucherRedemption.getUserId().equals(account.getUser().getId())) {
+                throw new ValidationException("You can only use your own vouchers");
+            }
+            
+            // Check status
+            if (!"active".equals(voucherRedemption.getStatus())) {
+                throw new ValidationException("Voucher is not active");
+            }
+            
+            // Check expiry
+            if (voucherRedemption.getExpiryDate() != null && voucherRedemption.getExpiryDate().isBefore(LocalDate.now())) {
+                throw new ValidationException("Voucher has expired");
+            }
+            
+            // Get voucher details and apply discount
+            Voucher voucher = voucherRepository.findById(voucherRedemption.getVoucherId())
+                    .orElseThrow(() -> new ValidationException("Voucher not found"));
+            
+            log.info("=== Voucher Debug === Found voucher: code={}, discountType={}, discountValue={}", 
+                    voucher.getCode(), voucher.getDiscountType(), voucher.getDiscountValue());
+            log.info("=== Voucher Debug === Original amount before discount: {}", originalAmount);
+            
+            if ("percentage".equals(voucher.getDiscountType())) {
+                double discountAmount = amount * (voucher.getDiscountValue() / 100.0);
+                amount = Math.max(0, amount - discountAmount);
+                log.info("=== Voucher Debug === Percentage discount: {}% = RM{}, new amount: {}", 
+                        voucher.getDiscountValue(), discountAmount, amount);
+            } else if ("fixed".equals(voucher.getDiscountType()) || "amount".equals(voucher.getDiscountType())) {
+                amount = Math.max(0, amount - voucher.getDiscountValue());
+                log.info("=== Voucher Debug === Fixed/Amount discount: RM{}, new amount: {}", 
+                        voucher.getDiscountValue(), amount);
+            } else {
+                log.warn("=== Voucher Debug === Unknown discount type: {}", voucher.getDiscountType());
+            }
+            
+            log.info("=== Voucher Debug === Final amount after discount: {}", amount);
+        }
+
         // 7. Process wallet payment if requested
         Payment payment = new Payment();
         payment.setAmount(amount);
@@ -128,6 +186,13 @@
         }
         payment = paymentRepository.save(payment);
 
+        // 7.5. Mark voucher as used if applicable
+        if (voucherRedemption != null) {
+            voucherRedemption.setStatus(VoucherRedemption.STATUS_USED);
+            voucherRedemptionRepository.save(voucherRedemption);
+            log.info("Marked voucher redemption {} as used for booking", voucherRedemption.getId());
+        }
+
         // 8. Create booking
         Booking booking = new Booking();
         booking.setBookingDate(LocalDateTime.now());
@@ -143,6 +208,23 @@
         booking.setNumberOfPlayers(request.getNumberOfPlayers());
         booking.setNumPaddles(request.getNumPaddles());
         booking.setBuyBallSet(request.getBuyBallSet());
+        
+        // 新增：保存 voucher 信息
+        if (voucherRedemption != null && request.isUseVoucher()) {
+            booking.setVoucherUsed(true);
+            booking.setOriginalAmount(originalAmount);
+            booking.setDiscountAmount(originalAmount - amount);
+            booking.setVoucherRedemptionId(voucherRedemption.getId());
+            Voucher voucher = voucherRepository.findById(voucherRedemption.getVoucherId()).orElse(null);
+            if (voucher != null) {
+                booking.setVoucherCode(voucher.getCode());
+            }
+            log.info("Saved voucher info for booking {}: original={}, discount={}, code={}, redemptionId={}", 
+                    booking.getId(), originalAmount, originalAmount - amount, voucher.getCode(), voucherRedemption.getId());
+        } else {
+            booking.setVoucherUsed(false);
+        }
+        
         booking = bookingRepository.save(booking);
 
         // 9. Create BookingSlot records
@@ -179,11 +261,15 @@
         // Store old tier for comparison
         String oldTierName = member.getTier() != null ? member.getTier().getTierName() : "NONE";
 
-        member.setPointBalance(member.getPointBalance() + pointsEarned);
+        // Add points to both tier points and reward points
+        member.setTierPointBalance(member.getTierPointBalance() + pointsEarned);
+        member.setRewardPointBalance(member.getRewardPointBalance() + pointsEarned);
         memberRepository.save(member);
-        log.info("Added {} points to member {} for booking {}", pointsEarned, member.getId(), booking.getId());
+        log.info("Added {} points to member {} for booking {} (Tier: {}, Reward: {})", 
+                pointsEarned, member.getId(), booking.getId(), 
+                member.getTierPointBalance(), member.getRewardPointBalance());
 
-        // Automatic tier upgrade check after booking
+        // Automatic tier upgrade check after booking (based on tier points)
         tierService.recalculateMemberTier(member);
 
         // Refresh member data to get updated tier
@@ -192,12 +278,17 @@
 
         // Log tier upgrade if it occurred
         if (!oldTierName.equals(newTierName)) {
-            log.info("🎉 Automatic tier upgrade after booking: {} -> {} (Points: {} -> {})",
-                    oldTierName, newTierName, member.getPointBalance() - pointsEarned, member.getPointBalance());
+            log.info("🎉 Automatic tier upgrade after booking: {} -> {} (Tier Points: {} -> {})",
+                    oldTierName, newTierName, member.getTierPointBalance() - pointsEarned, member.getTierPointBalance());
         }
 
         // 12. Create response with updated balance
-        BookingResponseDto response = mapToBookingResponse(booking, court, slots.get(0));
+        Voucher voucher = null;
+        if (voucherRedemption != null) {
+            voucher = voucherRepository.findById(voucherRedemption.getVoucherId()).orElse(null);
+        }
+        BookingResponseDto response = mapToBookingResponse(booking, court, slots.get(0), 
+                                                         voucherRedemption, voucher, originalAmount);
         response.setDurationHours(totalDuration);
         response.setWalletBalance(wallet.getBalance());
 
@@ -262,7 +353,10 @@
     }
 
     // 生成响应时，slot 相关信息通过 booking.getBookingSlots().get(0).getSlot()
-    private BookingResponseDto mapToBookingResponse(Booking booking, Court court, Slot slot) {
+    private BookingResponseDto mapToBookingResponse(Booking booking, Court court, Slot slot, 
+                                                   VoucherRedemption voucherRedemption, 
+                                                   Voucher voucher, 
+                                                   double originalAmount) {
         BookingResponseDto response = new BookingResponseDto();
         response.setBookingId(booking.getId());
         response.setCourtName(court.getName());
@@ -291,7 +385,27 @@
         // Add points information
         int pointsEarned = (int) Math.round(booking.getTotalAmount());
         response.setPointsEarned(pointsEarned);
-        response.setCurrentPointBalance(booking.getMember().getPointBalance());
+        response.setCurrentTierPointBalance(booking.getMember().getTierPointBalance());
+        response.setCurrentRewardPointBalance(booking.getMember().getRewardPointBalance());
+
+        // Add voucher information
+        if (voucherRedemption != null && voucher != null) {
+            response.setVoucherUsed(true);
+            response.setOriginalAmount(originalAmount);
+            response.setDiscountAmount(originalAmount - booking.getTotalAmount());
+            response.setVoucherCode(voucher.getCode());
+            
+            log.info("=== Voucher Debug === Response voucher info: used=true, original={}, discount={}, code={}", 
+                    originalAmount, originalAmount - booking.getTotalAmount(), voucher.getCode());
+        } else {
+            response.setVoucherUsed(false);
+            response.setOriginalAmount(booking.getTotalAmount());
+            response.setDiscountAmount(0.0);
+            response.setVoucherCode(null);
+            
+            log.info("=== Voucher Debug === Response voucher info: used=false, original={}, discount=0", 
+                    booking.getTotalAmount());
+        }
 
         return response;
     }
@@ -335,23 +449,31 @@
             booking.setStatus(bookingStatus);
             bookingRepository.save(booking);
 
-            // 新增：同步取消 FriendlyMatch
-            friendlyMatchService.cancelReservationAndMatch(bookingId);
-
             // 3. Update booking slot status
             BookingSlot bookingSlot = booking.getBookingSlots() != null && !booking.getBookingSlots().isEmpty() ? booking.getBookingSlots().get(0) : null;
-            if (bookingSlot != null) {
-                String slotStatus = "CANCELLED";
-                if (slotStatus.length() > 50) {
-                    slotStatus = slotStatus.substring(0, 50);
-                }
-                bookingSlot.setStatus(slotStatus);
-                bookingSlotRepository.save(bookingSlot);
+            if (bookingSlot != null && bookingSlot.getId() != null) {
+                try {
+                    String slotStatus = "CANCELLED";
+                    if (slotStatus.length() > 50) {
+                        slotStatus = slotStatus.substring(0, 50);
+                    }
+                    bookingSlot.setStatus(slotStatus);
+                    bookingSlotRepository.save(bookingSlot);
+                    log.info("Updated booking slot {} status to CANCELLED", bookingSlot.getId());
+                } catch (Exception e) {
+                    log.warn("Failed to update booking slot status: {}", e.getMessage());
+                    // 如果更新失敗，繼續執行其他取消邏輯
+                }
+            } else {
+                log.warn("No valid booking slot found for booking {}", bookingId);
             }
 
             // 4. Update or create cancellation request
             CancellationRequest request = booking.getCancellationRequest();
             if (request == null) {
+                // 先保存 booking，確保它是持久化的
+                booking = bookingRepository.save(booking);
+                
                 request = new CancellationRequest();
                 request.setBooking(booking);
                 request.setRequestDate(LocalDateTime.now());
@@ -359,6 +481,7 @@
             request.setStatus("APPROVED");
             request.setReason(reason != null ? reason : "User requested cancellation");
             request.setAdminRemark("Auto-approved by system (more than 24h before slot)");
+            
             cancellationRequestRepository.save(request);
 
             // 5. 退款50%到钱包
@@ -376,6 +499,33 @@
                 paymentRepository.save(payment);
             }
 
+            // 6.5. 處理 Voucher（自動批准 >24小時前）
+            if (booking.getVoucherUsed() && booking.getVoucherRedemptionId() != null) {
+                try {
+                    VoucherRedemption voucherRedemption = voucherRedemptionRepository.findById(booking.getVoucherRedemptionId())
+                            .orElse(null);
+                    if (voucherRedemption != null) {
+                        // 檢查 voucher 是否還在有效期內
+                        Voucher voucher = voucherRepository.findById(voucherRedemption.getVoucherId()).orElse(null);
+                        if (voucher != null && (voucher.getExpiryDate() == null || voucher.getExpiryDate().isAfter(LocalDate.now()))) {
+                            // Voucher 還在有效期內，恢復為可用狀態
+                            voucherRedemption.setStatus(VoucherRedemption.STATUS_RESTORED);
+                            voucherRedemptionRepository.save(voucherRedemption);
+                            log.info("Restored voucher redemption {} to ACTIVE status for booking {}", 
+                                    voucherRedemption.getId(), bookingId);
+                        } else {
+                            // Voucher 已過期，標記為已恢復但過期
+                            voucherRedemption.setStatus(VoucherRedemption.STATUS_RESTORED);
+                            voucherRedemptionRepository.save(voucherRedemption);
+                            log.info("Marked expired voucher redemption {} as RESTORED for booking {}", 
+                                    voucherRedemption.getId(), bookingId);
+                        }
+                    }
+                } catch (Exception e) {
+                    log.warn("Failed to process voucher restoration for booking {}: {}", bookingId, e.getMessage());
+                }
+            }
+
             // 7. 发送邮件通知
             Court court = courtRepository.findById(slot.getCourtId())
                 .orElseThrow(() -> new ResourceNotFoundException("Court not found"));
@@ -387,6 +537,15 @@
                 true
             );
 
+            // 8. 最後同步取消 FriendlyMatch（移到最後避免影響 booking 實體）
+            try {
+                friendlyMatchService.cancelReservationAndMatch(bookingId);
+                log.info("Successfully cancelled friendly match for booking {}", bookingId);
+            } catch (Exception e) {
+                log.warn("Failed to cancel friendly match for booking {}: {}", bookingId, e.getMessage());
+                // 即使 FriendlyMatch 取消失敗，也不影響預訂取消流程
+            }
+
             return new CancellationResponse(
                 request.getId(),
                 booking.getId(),
@@ -404,11 +563,28 @@
 
         // 更新预订状态
         booking.setStatus("CANCELLATION_REQUESTED");
-        bookingRepository.save(booking);
+        booking = bookingRepository.save(booking);
+
+        // 4.5. 處理 Voucher（人工審核 ≤24小時前）
+        if (booking.getVoucherUsed() && booking.getVoucherRedemptionId() != null) {
+            try {
+                VoucherRedemption voucherRedemption = voucherRedemptionRepository.findById(booking.getVoucherRedemptionId())
+                        .orElse(null);
+                if (voucherRedemption != null) {
+                    // 標記為等待退款決定
+                    voucherRedemption.setStatus(VoucherRedemption.STATUS_PENDING_REFUND);
+                    voucherRedemptionRepository.save(voucherRedemption);
+                    log.info("Marked voucher redemption {} as PENDING_REFUND for booking {}", 
+                            voucherRedemption.getId(), bookingId);
+                }
+            } catch (Exception e) {
+                log.warn("Failed to process voucher pending refund for booking {}: {}", bookingId, e.getMessage());
+            }
+        }
 
         // 创建取消请求
         CancellationRequest request = new CancellationRequest();
-        request.setBooking(booking);
+        request.setBooking(booking); // booking 已經保存，是持久化的
         request.setRequestDate(LocalDateTime.now());
         request.setStatus("PENDING");
         request.setReason(reason != null ? reason : "User requested cancellation");
@@ -523,16 +699,23 @@
             booking.setStatus(bookingStatus);
             bookingRepository.save(booking);
 
-            // 新增：同步取消 FriendlyMatch
-            friendlyMatchService.cancelReservationAndMatch(booking.getId());
-
             // 3. Update booking slot status
-            String slotStatus = "CANCELLED";
-            if (slotStatus.length() > 50) {
-                slotStatus = slotStatus.substring(0, 50);
-            }
-            bookingSlot.setStatus(slotStatus);
-            bookingSlotRepository.save(bookingSlot);
+            if (bookingSlot != null && bookingSlot.getId() != null) {
+                try {
+                    String slotStatus = "CANCELLED";
+                    if (slotStatus.length() > 50) {
+                        slotStatus = slotStatus.substring(0, 50);
+                    }
+                    bookingSlot.setStatus(slotStatus);
+                    bookingSlotRepository.save(bookingSlot);
+                    log.info("Updated booking slot {} status to CANCELLED", bookingSlot.getId());
+                } catch (Exception e) {
+                    log.warn("Failed to update booking slot status: {}", e.getMessage());
+                    // 如果更新失敗，繼續執行其他取消邏輯
+                }
+            } else {
+                log.warn("No valid booking slot found for booking {}", booking.getId());
+            }
 
             // 4. Update request
             request.setStatus("APPROVED");
@@ -542,6 +725,42 @@
             User adminUser = userRepository.findByUserAccount_Username(username)
                     .orElseThrow(() -> new ResourceNotFoundException("Admin user not found"));
             request.setApprovedBy(adminUser.getId());
+            
+            // 4.5. 處理 Voucher（管理員批准取消）
+            if (booking.getVoucherUsed() && booking.getVoucherRedemptionId() != null) {
+                try {
+                    VoucherRedemption voucherRedemption = voucherRedemptionRepository.findById(booking.getVoucherRedemptionId())
+                            .orElse(null);
+                    if (voucherRedemption != null) {
+                        // 檢查 voucher 是否還在有效期內
+                        Voucher voucher = voucherRepository.findById(voucherRedemption.getVoucherId()).orElse(null);
+                        if (voucher != null && (voucher.getExpiryDate() == null || voucher.getExpiryDate().isAfter(LocalDate.now()))) {
+                            // Voucher 還在有效期內，恢復為可用狀態
+                            voucherRedemption.setStatus(VoucherRedemption.STATUS_RESTORED);
+                            voucherRedemptionRepository.save(voucherRedemption);
+                            log.info("Admin approved: Restored voucher redemption {} to RESTORED status for booking {}", 
+                                    voucherRedemption.getId(), booking.getId());
+                        } else {
+                            // Voucher 已過期，標記為已恢復但過期
+                            voucherRedemption.setStatus(VoucherRedemption.STATUS_RESTORED);
+                            voucherRedemptionRepository.save(voucherRedemption);
+                            log.info("Admin approved: Marked expired voucher redemption {} as RESTORED for booking {}", 
+                                    voucherRedemption.getId(), booking.getId());
+                        }
+                    }
+                } catch (Exception e) {
+                    log.warn("Failed to process voucher restoration for booking {}: {}", booking.getId(), e.getMessage());
+                }
+            }
+            
+            // 5. 最後同步取消 FriendlyMatch（移到最後避免影響 booking 實體）
+            try {
+                friendlyMatchService.cancelReservationAndMatch(booking.getId());
+                log.info("Successfully cancelled friendly match for booking {}", booking.getId());
+            } catch (Exception e) {
+                log.warn("Failed to cancel friendly match for booking {}: {}", booking.getId(), e.getMessage());
+                // 即使 FriendlyMatch 取消失敗，也不影響預訂取消流程
+            }
         } else {
             // Reject request - revert changes
             String bookingStatus = "CONFIRMED";
@@ -552,13 +771,41 @@
             bookingRepository.save(booking);
 
             // Keep booking slot as booked
-            String slotStatus = "BOOKED";
-            if (slotStatus.length() > 50) {
-                slotStatus = slotStatus.substring(0, 50);
-            }
-            bookingSlot.setStatus(slotStatus);
+            if (bookingSlot != null && bookingSlot.getId() != null) {
+                try {
+                    String slotStatus = "BOOKED";
+                    if (slotStatus.length() > 50) {
+                        slotStatus = slotStatus.substring(0, 50);
+                    }
+                    bookingSlot.setStatus(slotStatus);
+                    bookingSlotRepository.save(bookingSlot);
+                    log.info("Updated booking slot {} status to BOOKED", bookingSlot.getId());
+                } catch (Exception e) {
+                    log.warn("Failed to update booking slot status: {}", e.getMessage());
+                    // 如果更新失敗，繼續執行其他邏輯
+                }
+            } else {
+                log.warn("No valid booking slot found for booking {}", booking.getId());
+            }
 
             request.setStatus("REJECTED");
+            
+            // 4.5. 處理 Voucher（管理員拒絕取消）
+            if (booking.getVoucherUsed() && booking.getVoucherRedemptionId() != null) {
+                try {
+                    VoucherRedemption voucherRedemption = voucherRedemptionRepository.findById(booking.getVoucherRedemptionId())
+                            .orElse(null);
+                    if (voucherRedemption != null) {
+                        // 管理員拒絕取消，保持 voucher 為已使用狀態
+                        voucherRedemption.setStatus(VoucherRedemption.STATUS_USED);
+                        voucherRedemptionRepository.save(voucherRedemption);
+                        log.info("Admin rejected: Kept voucher redemption {} as USED status for booking {}", 
+                                voucherRedemption.getId(), booking.getId());
+                    }
+                } catch (Exception e) {
+                    log.warn("Failed to process voucher status for booking {}: {}", booking.getId(), e.getMessage());
+                }
+            }
         }
 
         // 新增：保存 adminRemark
@@ -708,6 +955,25 @@
                             }
                             dto.setHasReviewed(hasReviewed);
                             
+                            // 新增：检查是否使用了 voucher
+                            boolean voucherUsed = false;
+                            Double originalAmount = null;
+                            Double discountAmount = null;
+                            String voucherCode = null;
+                            
+                            // 直接从 booking 实体获取 voucher 信息
+                            if (booking.getVoucherUsed() != null && booking.getVoucherUsed()) {
+                                voucherUsed = true;
+                                originalAmount = booking.getOriginalAmount();
+                                discountAmount = booking.getDiscountAmount();
+                                voucherCode = booking.getVoucherCode();
+                            }
+                            
+                            dto.setVoucherUsed(voucherUsed);
+                            dto.setOriginalAmount(originalAmount);
+                            dto.setDiscountAmount(discountAmount);
+                            dto.setVoucherCode(voucherCode);
+                            
                             log.debug("Created DTO for booking {}: courtName={}, date={}, startTime={}, endTime={}", 
                                     booking.getId(), dto.getCourtName(), dto.getDate(), dto.getStartTime(), dto.getEndTime());
                             
@@ -773,4 +1039,4 @@
         log.warn("AND bs1.booking_id = bs2.booking_id");
         log.warn("AND bs1.slot_id = bs2.slot_id;");
     }
-}
\ No newline at end of file
+} 
\ No newline at end of file
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/FeedbackService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// FeedbackService.java\r\npackage com.pickleball_backend.pickleball.service;\r\n\r\nimport com.pickleball_backend.pickleball.dto.*;\r\nimport com.pickleball_backend.pickleball.entity.*;\r\nimport com.pickleball_backend.pickleball.exception.ResourceNotFoundException;\r\nimport com.pickleball_backend.pickleball.exception.ValidationException;\r\nimport com.pickleball_backend.pickleball.repository.CourtRepository;\r\nimport com.pickleball_backend.pickleball.repository.EventRepository;\r\nimport com.pickleball_backend.pickleball.repository.FeedbackRepository;\r\nimport com.pickleball_backend.pickleball.repository.UserRepository;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.springframework.security.core.Authentication;\r\nimport org.springframework.security.core.context.SecurityContextHolder;\r\nimport org.springframework.stereotype.Service;\r\nimport java.time.LocalDateTime;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport com.pickleball_backend.pickleball.repository.BookingRepository;\r\n\r\n@Service\r\n@RequiredArgsConstructor\r\npublic class FeedbackService {\r\n\r\n    private final FeedbackRepository feedbackRepository;\r\n    private final UserRepository userRepository;\r\n    private final CourtRepository courtRepository;\r\n    private final EventRepository eventRepository;\r\n    @Autowired\r\n    private BookingRepository bookingRepository; // 確保有注入\r\n\r\n    public FeedbackResponseDto createFeedback(FeedbackDto dto) {\r\n        Authentication auth = SecurityContextHolder.getContext().getAuthentication();\r\n        String username = auth.getName();\r\n\r\n        User user = userRepository.findByUserAccount_Username(username)\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"User\", \"username\", username));\r\n\r\n        // 验证预订是否存在且属于当前用户\r\n        final Booking booking;\r\n        if (dto.getBookingId() != null) {\r\n            booking = bookingRepository.findById(dto.getBookingId())\r\n                    .orElseThrow(() -> new ResourceNotFoundException(\"Booking\", \"id\", dto.getBookingId()));\r\n            \r\n            // 验证预订是否属于当前用户\r\n            if (!booking.getMember().getUser().getId().equals(user.getId())) {\r\n                throw new ValidationException(\"You can only review your own bookings.\");\r\n            }\r\n            \r\n            // 验证预订是否已完成\r\n            if (!\"COMPLETED\".equals(booking.getStatus())) {\r\n                throw new ValidationException(\"You can only review completed bookings.\");\r\n            }\r\n            \r\n            // 检查用户是否已经对这个预订评价过\r\n            boolean hasReviewed = feedbackRepository.findByUserId(user.getId()).stream()\r\n                    .anyMatch(feedback -> feedback.getBooking() != null \r\n                            && feedback.getBooking().getId().equals(booking.getId()));\r\n            \r\n            if (hasReviewed) {\r\n                throw new ValidationException(\"You have already reviewed this booking. You can only edit your existing review.\");\r\n            }\r\n        } else {\r\n            booking = null;\r\n        }\r\n\r\n        // 如果提供了bookingId，从booking中获取courtId作为targetId\r\n        Integer finalTargetId = dto.getTargetId();\r\n        if (booking != null && finalTargetId == null) {\r\n            // 从booking的slots中获取courtId\r\n            if (booking.getBookingSlots() != null && !booking.getBookingSlots().isEmpty()) {\r\n                Slot slot = booking.getBookingSlots().get(0).getSlot();\r\n                if (slot != null) {\r\n                    finalTargetId = slot.getCourtId();\r\n                }\r\n            }\r\n            \r\n            if (finalTargetId == null) {\r\n                throw new ValidationException(\"Unable to determine court ID from booking.\");\r\n            }\r\n        }\r\n\r\n        // 只針對COURT做檢查 - 改為檢查是否有已完成的預訂\r\n        if (dto.getTargetType() == Feedback.TargetType.COURT && finalTargetId != null) {\r\n            boolean hasCompletedBooking = bookingRepository.existsByMember_User_IdAndCompletedBookingForCourt(user.getId(), finalTargetId);\r\n            if (!hasCompletedBooking) {\r\n                throw new ValidationException(\"You can only review courts for completed bookings.\");\r\n            }\r\n        }\r\n\r\n        Feedback feedback = new Feedback();\r\n        feedback.setTargetType(dto.getTargetType());\r\n        feedback.setTargetId(finalTargetId);\r\n        feedback.setRating(dto.getRating());\r\n        feedback.setReview(dto.getReview());\r\n        feedback.setUser(user);\r\n        feedback.setBooking(booking); // 设置预订关联\r\n        feedback.setCreatedAt(LocalDateTime.now());\r\n        feedback.setTags(dto.getTags());\r\n\r\n        Feedback savedFeedback = feedbackRepository.save(feedback);\r\n        return convertToDto(savedFeedback);\r\n    }\r\n\r\n    public FeedbackResponseDto updateFeedback(Integer id, FeedbackDto dto) {\r\n        Authentication auth = SecurityContextHolder.getContext().getAuthentication();\r\n        String username = auth.getName();\r\n\r\n        Feedback feedback = feedbackRepository.findById(id)\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"Feedback\", \"id\", id));\r\n\r\n        // Verify user owns the feedback\r\n        if (!feedback.getUser().getUserAccount().getUsername().equals(username)) {\r\n            throw new ValidationException(\"You can only update your own feedback\");\r\n        }\r\n\r\n        feedback.setRating(dto.getRating());\r\n        feedback.setReview(dto.getReview());\r\n        feedback.setTags(dto.getTags()); // 添加tags字段的更新\r\n\r\n        Feedback updatedFeedback = feedbackRepository.save(feedback);\r\n        return convertToDto(updatedFeedback);\r\n    }\r\n\r\n    public void deleteFeedback(Integer id) {\r\n        Authentication auth = SecurityContextHolder.getContext().getAuthentication();\r\n        String username = auth.getName();\r\n\r\n        Feedback feedback = feedbackRepository.findById(id)\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"Feedback\", \"id\", id));\r\n\r\n        // Verify user owns the feedback or is admin\r\n        boolean isOwner = feedback.getUser().getUserAccount().getUsername().equals(username);\r\n        boolean isAdmin = auth.getAuthorities().stream()\r\n                .anyMatch(a -> a.getAuthority().equals(\"ROLE_ADMIN\"));\r\n\r\n        if (!isOwner && !isAdmin) {\r\n            throw new ValidationException(\"You don't have permission to delete this feedback\");\r\n        }\r\n\r\n        feedbackRepository.delete(feedback);\r\n    }\r\n\r\n    public List<FeedbackResponseDto> getFeedbackForTarget(\r\n            Feedback.TargetType targetType,\r\n            Integer targetId\r\n    ) {\r\n        List<Feedback> feedbackList = feedbackRepository\r\n                .findByTargetTypeAndTargetIdOrderByCreatedAtDesc(targetType, targetId);\r\n\r\n        return feedbackList.stream()\r\n                .map(this::convertToDto)\r\n                .collect(Collectors.toList());\r\n    }\r\n\r\n    public List<FeedbackResponseDto> getFeedbackByBookingId(Integer bookingId) {\r\n        List<Feedback> feedbackList = feedbackRepository\r\n                .findByBookingIdOrderByCreatedAtDesc(bookingId);\r\n\r\n        return feedbackList.stream()\r\n                .map(this::convertToDto)\r\n                .collect(Collectors.toList());\r\n    }\r\n\r\n    public FeedbackStatsDto getFeedbackStats(\r\n            Feedback.TargetType targetType,\r\n            Integer targetId\r\n    ) {\r\n        Double average = feedbackRepository.findAverageRatingByTarget(targetType, targetId);\r\n        Integer count = feedbackRepository.countByTarget(targetType, targetId);\r\n\r\n        FeedbackStatsDto stats = new FeedbackStatsDto();\r\n        stats.setAverageRating(average != null ? average : 0.0);\r\n        stats.setTotalReviews(count != null ? count : 0);\r\n        return stats;\r\n    }\r\n\r\n    private FeedbackResponseDto convertToDto(Feedback feedback) {\r\n        FeedbackResponseDto dto = new FeedbackResponseDto();\r\n        dto.setId(feedback.getId());\r\n        dto.setTargetType(feedback.getTargetType().name());\r\n        dto.setTargetId(feedback.getTargetId());\r\n        dto.setRating(feedback.getRating());\r\n        dto.setReview(feedback.getReview());\r\n        dto.setUserName(feedback.getUser().getName());\r\n        dto.setUserEmail(feedback.getUser().getUserAccount().getUsername());\r\n        dto.setUserId(feedback.getUser().getId()); // 添加用户ID\r\n        dto.setCreatedAt(feedback.getCreatedAt());\r\n        dto.setTags(feedback.getTags());\r\n        dto.setBookingId(feedback.getBooking() != null ? feedback.getBooking().getId() : null);\r\n        \r\n        // Set target name based on target type\r\n        if (feedback.getTargetType() == Feedback.TargetType.COURT) {\r\n            Court court = courtRepository.findById(feedback.getTargetId()).orElse(null);\r\n            dto.setTargetName(court != null ? court.getName() : \"Unknown Court\");\r\n        } else if (feedback.getTargetType() == Feedback.TargetType.EVENT) {\r\n            Event event = eventRepository.findById(feedback.getTargetId()).orElse(null);\r\n            dto.setTargetName(event != null ? event.getTitle() : \"Unknown Event\");\r\n        } else if (feedback.getTargetType() == Feedback.TargetType.COACH) {\r\n            User coach = userRepository.findById(feedback.getTargetId()).orElse(null);\r\n            dto.setTargetName(coach != null ? coach.getName() : \"Unknown Coach\");\r\n        } else {\r\n            dto.setTargetName(\"Unknown Target\");\r\n        }\r\n        \r\n        // Calculate average rating for the target\r\n        if (feedback.getTargetType() == Feedback.TargetType.COURT) {\r\n            Double avgRating = feedbackRepository.findByTargetTypeAndTargetIdOrderByCreatedAtDesc(Feedback.TargetType.COURT, feedback.getTargetId())\r\n                    .stream()\r\n                    .mapToInt(Feedback::getRating)\r\n                    .average()\r\n                    .orElse(0.0);\r\n            dto.setAverageRating(avgRating);\r\n        }\r\n        \r\n        return dto;\r\n    }\r\n\r\n    public List<FeedbackResponseDto> getFeedbackByCurrentUser() {\r\n        Authentication auth = SecurityContextHolder.getContext().getAuthentication();\r\n        String username = auth.getName();\r\n\r\n        User user = userRepository.findByUserAccount_Username(username)\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"User\", \"username\", username));\r\n\r\n        List<Feedback> feedbackList = feedbackRepository.findByUserId(user.getId());\r\n\r\n        return feedbackList.stream()\r\n                .map(this::convertToDto)\r\n                .collect(Collectors.toList());\r\n    }\r\n\r\n    public List<ReviewableItemDto> getReviewableBookings() {\r\n        Authentication auth = SecurityContextHolder.getContext().getAuthentication();\r\n        String username = auth.getName();\r\n\r\n        User user = userRepository.findByUserAccount_Username(username)\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"User\", \"username\", username));\r\n\r\n        List<Booking> completedBookings = bookingRepository.findCompletedBookingsByUserId(user.getId());\r\n\r\n        return completedBookings.stream()\r\n                .map(booking -> {\r\n                    ReviewableItemDto dto = new ReviewableItemDto();\r\n                    dto.setBookingId(booking.getId());\r\n                    dto.setBookingDate(booking.getBookingDate());\r\n                    \r\n                    // Get court info from first booking slot\r\n                    if (booking.getBookingSlots() != null && !booking.getBookingSlots().isEmpty()) {\r\n                        Slot slot = booking.getBookingSlots().get(0).getSlot();\r\n                        if (slot != null) {\r\n                            Court court = courtRepository.findById(slot.getCourtId())\r\n                                    .orElse(null);\r\n                            if (court != null) {\r\n                                dto.setCourtId(court.getId());\r\n                                dto.setCourtName(court.getName());\r\n                                dto.setCourtLocation(court.getLocation());\r\n                                dto.setSlotDate(slot.getDate());\r\n                                dto.setStartTime(slot.getStartTime());\r\n                                dto.setEndTime(slot.getEndTime());\r\n                            }\r\n                        }\r\n                    }\r\n                    \r\n                    // Check if user has already reviewed this booking\r\n                    final Integer bookingId = booking.getId();\r\n                    boolean hasReviewed = feedbackRepository.findByUserId(user.getId()).stream()\r\n                            .anyMatch(feedback -> feedback.getBooking() != null \r\n                                    && feedback.getBooking().getId().equals(bookingId));\r\n                    \r\n                    dto.setHasReviewed(hasReviewed);\r\n                    \r\n                    return dto;\r\n                })\r\n                .filter(dto -> dto.getCourtId() != null) // Filter out bookings without valid court info\r\n                .collect(Collectors.toList());\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/FeedbackService.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/FeedbackService.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/FeedbackService.java	(revision 89327e12854b108d004ebb020d0592b1c618ecaf)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/FeedbackService.java	(date 1753990795027)
@@ -9,6 +9,10 @@
 import com.pickleball_backend.pickleball.repository.EventRepository;
 import com.pickleball_backend.pickleball.repository.FeedbackRepository;
 import com.pickleball_backend.pickleball.repository.UserRepository;
+import com.pickleball_backend.pickleball.repository.ClassSessionRepository;
+import com.pickleball_backend.pickleball.repository.ClassRegistrationRepository;
+import com.pickleball_backend.pickleball.entity.ClassSession;
+import com.pickleball_backend.pickleball.entity.ClassRegistration;
 import lombok.RequiredArgsConstructor;
 import org.springframework.security.core.Authentication;
 import org.springframework.security.core.context.SecurityContextHolder;
@@ -27,6 +31,8 @@
     private final UserRepository userRepository;
     private final CourtRepository courtRepository;
     private final EventRepository eventRepository;
+    private final ClassSessionRepository classSessionRepository;
+    private final ClassRegistrationRepository classRegistrationRepository;
     @Autowired
     private BookingRepository bookingRepository; // 確保有注入
 
@@ -96,6 +102,7 @@
         feedback.setReview(dto.getReview());
         feedback.setUser(user);
         feedback.setBooking(booking); // 设置预订关联
+        feedback.setClassSessionId(dto.getClassSessionId()); // 设置课程关联
         feedback.setCreatedAt(LocalDateTime.now());
         feedback.setTags(dto.getTags());
 
@@ -200,6 +207,96 @@
         } else if (feedback.getTargetType() == Feedback.TargetType.COACH) {
             User coach = userRepository.findById(feedback.getTargetId()).orElse(null);
             dto.setTargetName(coach != null ? coach.getName() : "Unknown Coach");
+            
+            // 為教練評價添加課程詳細信息
+            try {
+                if (feedback.getClassSessionId() != null) {
+                    // 直接使用關聯的課程ID
+                    ClassSession session = classSessionRepository.findById(feedback.getClassSessionId()).orElse(null);
+                    
+                    if (session != null) {
+                        dto.setClassSessionId(session.getId());
+                        dto.setClassSessionTitle(session.getTitle());
+                        dto.setClassSessionDate(session.getStartTime().toLocalDate().toString());
+                        dto.setClassSessionTime(session.getStartTime().toLocalTime().toString() + " - " + session.getEndTime().toLocalTime().toString());
+                        
+                        // 獲取場地信息
+                        if (session.getVenue() != null) {
+                            dto.setVenueName(session.getVenue().getName());
+                        } else if (session.getCourt() != null && session.getCourt().getVenue() != null) {
+                            dto.setVenueName(session.getCourt().getVenue().getName());
+                        }
+                        
+                        // 獲取球場信息
+                        if (session.getCourt() != null) {
+                            dto.setCourtName(session.getCourt().getName());
+                        }
+                        
+                        System.out.println("Found class session for feedback " + feedback.getId() + ": " + 
+                                         session.getTitle() + " on " + session.getStartTime() + 
+                                         " at " + (session.getVenue() != null ? session.getVenue().getName() : "Unknown venue"));
+                    }
+                } else {
+                    // 回退到舊的邏輯（為了向後兼容）
+                    List<ClassRegistration> registrations = classRegistrationRepository.findByMemberUserId(feedback.getUser().getId());
+                    List<ClassRegistration> coachRegistrations = registrations.stream()
+                        .filter(reg -> {
+                            ClassSession session = reg.getClassSession();
+                            return session != null && 
+                                   session.getCoach() != null && 
+                                   session.getCoach().getId().equals(feedback.getTargetId());
+                        })
+                        .sorted((reg1, reg2) -> {
+                            // 按課程開始時間排序，最新的在前
+                            return reg2.getClassSession().getStartTime().compareTo(reg1.getClassSession().getStartTime());
+                        })
+                        .collect(Collectors.toList());
+                    
+                    if (!coachRegistrations.isEmpty()) {
+                        // 嘗試根據評價時間匹配最相關的課程
+                        LocalDateTime feedbackTime = feedback.getCreatedAt();
+                        ClassRegistration bestMatch = null;
+                        
+                        // 找到評價時間之前最近的課程
+                        for (ClassRegistration reg : coachRegistrations) {
+                            ClassSession session = reg.getClassSession();
+                            if (session.getStartTime().isBefore(feedbackTime)) {
+                                bestMatch = reg;
+                                break;
+                            }
+                        }
+                        
+                        // 如果沒有找到，使用最新的課程
+                        if (bestMatch == null) {
+                            bestMatch = coachRegistrations.get(0);
+                        }
+                        
+                        ClassSession session = bestMatch.getClassSession();
+                        dto.setClassSessionId(session.getId());
+                        dto.setClassSessionTitle(session.getTitle());
+                        dto.setClassSessionDate(session.getStartTime().toLocalDate().toString());
+                        dto.setClassSessionTime(session.getStartTime().toLocalTime().toString() + " - " + session.getEndTime().toLocalTime().toString());
+                        
+                        // 獲取場地信息
+                        if (session.getVenue() != null) {
+                            dto.setVenueName(session.getVenue().getName());
+                        } else if (session.getCourt() != null && session.getCourt().getVenue() != null) {
+                            dto.setVenueName(session.getCourt().getVenue().getName());
+                        }
+                        
+                        // 獲取球場信息
+                        if (session.getCourt() != null) {
+                            dto.setCourtName(session.getCourt().getName());
+                        }
+                        
+                        System.out.println("Fallback: Found class session for feedback " + feedback.getId() + ": " + 
+                                         session.getTitle() + " on " + session.getStartTime() + 
+                                         " at " + (session.getVenue() != null ? session.getVenue().getName() : "Unknown venue"));
+                    }
+                }
+            } catch (Exception e) {
+                System.out.println("Error fetching class session details for coach feedback: " + e.getMessage());
+            }
         } else {
             dto.setTargetName("Unknown Target");
         }
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"0c3ded6e-9290-4208-bf86-f2c4e1aa2374\" name=\"Changes\" comment=\"profile\">\r\n      <change afterPath=\"$PROJECT_DIR$/pickleball-frontend/src/components/class/BrowseClassPage.jsx\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/CoachController.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/ClassRegistrationDto.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/RecurringSessionRequestDto.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/ClassRegistration.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/ClassRegistrationRepository.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/ClassSessionServiceImpl.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball-frontend/package-lock.json\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball-frontend/package-lock.json\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball-frontend/src/App.js\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball-frontend/src/App.js\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball-frontend/src/components/common/Navbar.jsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball-frontend/src/components/common/Navbar.jsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball-frontend/src/components/court/BookingConfirmationPage.jsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball-frontend/src/components/court/BookingConfirmationPage.jsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball-frontend/src/components/event/FriendlyMatchPage.jsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball-frontend/src/components/event/FriendlyMatchPage.jsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball-frontend/src/components/feedback/MyFeedbackPage.jsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball-frontend/src/components/feedback/MyFeedbackPage.jsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball-frontend/src/components/messaging/Conversation.jsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball-frontend/src/components/messaging/Conversation.jsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball-frontend/src/components/messaging/MessagingHub.jsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball-frontend/src/components/messaging/MessagingHub.jsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball-frontend/src/components/profile/ProfileNavigation.jsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball-frontend/src/components/profile/ProfileNavigation.jsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball-frontend/src/components/profile/RewardsPage.jsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball-frontend/src/components/profile/RewardsPage.jsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball-frontend/src/components/profile/WalletPage.jsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball-frontend/src/components/profile/WalletPage.jsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball-frontend/src/context/AuthContext.js\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball-frontend/src/context/AuthContext.js\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball-frontend/src/index.js\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball-frontend/src/index.js\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball-frontend/src/pages/LoginPage.jsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball-frontend/src/pages/LoginPage.jsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball-frontend/src/service/FriendlyMatchService.js\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball-frontend/src/service/FriendlyMatchService.js\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball-frontend/src/service/UserService.js\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball-frontend/src/service/UserService.js\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/config/DataInitializer.java\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/config/SecurityConfig.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/config/SecurityConfig.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/AdminController.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/AdminController.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/BookingController.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/BookingController.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/CoachScheduleController.java\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/DataMigrationController.java\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/EventController.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/EventController.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/FriendlyMatchController.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/FriendlyMatchController.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/MemberController.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/MemberController.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/ProfileController.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/ProfileController.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/SlotController.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/SlotController.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/UserController.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/UserController.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/VenueController.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/VenueController.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/WalletController.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/WalletController.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/ClassSessionDto.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/ClassSessionDto.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/CoachSlotDto.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/CoachSlotDto.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/EventDetailDto.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/EventDetailDto.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/EventFilterDto.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/EventFilterDto.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/JoinRequestDto.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/JoinRequestDto.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/RegistrationDto.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/RegistrationDto.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/TopUpRequestDto.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/TopUpRequestDto.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Booking.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Booking.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/ClassSession.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/ClassSession.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Court.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Court.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Event.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Event.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/FriendlyMatch.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/FriendlyMatch.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/JoinRequest.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/JoinRequest.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Member.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Member.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Payment.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Payment.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/User.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/User.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/UserAccount.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/UserAccount.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Venue.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Venue.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/BookingRepository.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/BookingRepository.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/BookingSlotRepository.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/BookingSlotRepository.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/CancellationRequestRepository.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/CancellationRequestRepository.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/ClassSessionRepository.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/ClassSessionRepository.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/CourtRepository.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/CourtRepository.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/EventRepository.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/EventRepository.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/FriendlyMatchRepository.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/FriendlyMatchRepository.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/JoinRequestRepository.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/JoinRequestRepository.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/MemberRepository.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/MemberRepository.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/PaymentRepository.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/PaymentRepository.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/SlotRepository.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/SlotRepository.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/VenueRepository.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/VenueRepository.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/security/JwtAuthFilter.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/security/JwtAuthFilter.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/security/JwtService.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/security/JwtService.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/security/UserDetailsServiceImpl.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/security/UserDetailsServiceImpl.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/AdminDashboardServiceImpl.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/AdminDashboardServiceImpl.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/BookingService.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/BookingService.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/ChartServiceImpl.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/ChartServiceImpl.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/CoachCourtService.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/CoachCourtService.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/CoachCourtServiceImpl.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/CoachCourtServiceImpl.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/CoachScheduleService.java\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/CoachScheduleServiceImpl.java\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/CourtServiceImpl.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/CourtServiceImpl.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/DataMigrationService.java\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/EmailService.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/EmailService.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/EventRegistrationServiceImpl.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/EventRegistrationServiceImpl.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/EventService.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/EventService.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/EventServiceImpl.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/EventServiceImpl.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/FeedbackService.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/FeedbackService.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/FriendlyMatchService.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/FriendlyMatchService.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/MatchReminderService.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/MatchReminderService.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/MessageService.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/MessageService.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/ProfileService.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/ProfileService.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/SlotServiceImpl.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/SlotServiceImpl.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/UserServiceImpl.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/UserServiceImpl.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/VenueService.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/VenueService.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/WalletService.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/WalletService.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/resources/application.properties\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/resources/application.properties\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/resources/db/migration/V1__migrate_historical_wallet_transactions.sql\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/resources/db/migration/V2__check_wallet_data_status.sql\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pickleball/pickleball/src/main/resources/db/migration/V3__cleanup_wallet_transactions.sql\" beforeDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"fix-court\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\r\n  &quot;lastFilter&quot;: {\r\n    &quot;state&quot;: &quot;OPEN&quot;,\r\n    &quot;assignee&quot;: &quot;lingyi010203&quot;\r\n  }\r\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\">{\r\n  &quot;selectedUrlAndAccountId&quot;: {\r\n    &quot;url&quot;: &quot;https://github.com/lingyi010203/pickleball_court_reservation.git&quot;,\r\n    &quot;accountId&quot;: &quot;6d62f555-4b33-47bd-babf-2da1b420cd8e&quot;\r\n  }\r\n}</component>\r\n  <component name=\"ProblemsViewState\">\r\n    <option name=\"selectedTabId\" value=\"CurrentFile\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 3\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2zJOWIlZQeOJcEKgpbdiTlxKL0G\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"Application.PickleballApplication.executor\": \"Run\",\r\n    \"Application.run.executor\": \"Debug\",\r\n    \"Application.zzz.executor\": \"Run\",\r\n    \"ModuleVcsDetector.initialDetectionPerformed\": \"true\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"RunOnceActivity.TerminalTabsStorage.copyFrom.TerminalArrangementManager\": \"true\",\r\n    \"RunOnceActivity.git.unshallow\": \"true\",\r\n    \"git-widget-placeholder\": \"master\",\r\n    \"last_opened_file_path\": \"C:/Users/xingy/pickleball_court_reservation\",\r\n    \"project.structure.last.edited\": \"SDKs\",\r\n    \"project.structure.proportion\": \"0.15\",\r\n    \"project.structure.side.proportion\": \"0.21079959\",\r\n    \"settings.editor.selected.configurable\": \"reference.projectsettings.compiler.annotationProcessors\"\r\n  }\r\n}]]></component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"run\" type=\"Application\" factoryName=\"Application\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"com.pickleball_backend.pickleball.PickleballApplication\" />\r\n      <module name=\"pickleball\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n  </component>\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"0c3ded6e-9290-4208-bf86-f2c4e1aa2374\" name=\"Changes\" comment=\"\" />\r\n      <created>1751445739450</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1751445739450</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"court fixed\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1752479821667</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1752479821667</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"Booking fixed\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1752578761777</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1752578761777</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"Booking fixed\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1752578799651</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1752578799651</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"admin dashboard updated\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1752636329567</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1752636329572</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"admin dashboard updated\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1752674934808</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1752674934808</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"court bug fixed\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1752777506350</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1752777506350</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"admin booking updated\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1752910787475</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1752910787475</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"admin booking updated\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1752910799800</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1752910799800</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"booking history redirect to feedback done\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1752936178325</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1752936178325</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"booking confirmation solved\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1752940514141</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1752940514141</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"point and voucher redemption done\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1753005993987</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1753005993987</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"point and voucher redemption done\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1753006004014</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1753006004014</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00013\" summary=\"rewards page ok\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1753009932754</created>\r\n      <option name=\"number\" value=\"00013\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1753009932754</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00014\" summary=\"rewards page ok\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1753009956442</created>\r\n      <option name=\"number\" value=\"00014\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1753009956442</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00015\" summary=\"homepage initialized\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1753097246899</created>\r\n      <option name=\"number\" value=\"00015\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1753097246899</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00016\" summary=\"court image uploaded\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1753126384809</created>\r\n      <option name=\"number\" value=\"00016\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1753126384809</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00017\" summary=\"court image uploaded\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1753128005836</created>\r\n      <option name=\"number\" value=\"00017\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00017\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1753128005836</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00018\" summary=\"court image uploaded\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1753128125937</created>\r\n      <option name=\"number\" value=\"00018\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00018\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1753128125937</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00019\" summary=\"home page done\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1753249711528</created>\r\n      <option name=\"number\" value=\"00019\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00019\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1753249711528</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00020\" summary=\"admin setting initialized\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1753370349395</created>\r\n      <option name=\"number\" value=\"00020\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00020\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1753370349395</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00021\" summary=\"admin setting initialized\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1753370392315</created>\r\n      <option name=\"number\" value=\"00021\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00021\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1753370392315</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00022\" summary=\"admin setting initialized\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1753370403315</created>\r\n      <option name=\"number\" value=\"00022\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00022\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1753370403315</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00023\" summary=\"admin setting, dark mode done\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1753418680148</created>\r\n      <option name=\"number\" value=\"00023\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00023\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1753418680148</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00024\" summary=\"admin setting, dark mode done\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1753418682718</created>\r\n      <option name=\"number\" value=\"00024\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00024\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1753418682718</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00025\" summary=\"admin setting, dark mode done\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1753418716730</created>\r\n      <option name=\"number\" value=\"00025\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00025\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1753418716730</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00026\" summary=\"report generation done\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1753714834923</created>\r\n      <option name=\"number\" value=\"00026\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00026\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1753714834923</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00027\" summary=\"report generation done\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1753714851764</created>\r\n      <option name=\"number\" value=\"00027\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00027\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1753714851764</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00028\" summary=\"profile\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1753781450293</created>\r\n      <option name=\"number\" value=\"00028\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00028\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1753781450293</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"29\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"RECENT_FILTERS\">\r\n      <map>\r\n        <entry key=\"Branch\">\r\n          <value>\r\n            <list>\r\n              <RecentGroup>\r\n                <option name=\"FILTER_VALUES\">\r\n                  <option value=\"origin/master\" />\r\n                </option>\r\n              </RecentGroup>\r\n            </list>\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State>\r\n              <option name=\"FILTERS\">\r\n                <map>\r\n                  <entry key=\"branch\">\r\n                    <value>\r\n                      <list>\r\n                        <option value=\"origin/master\" />\r\n                      </list>\r\n                    </value>\r\n                  </entry>\r\n                </map>\r\n              </option>\r\n            </State>\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"court fixed\" />\r\n    <MESSAGE value=\"Booking fixed\" />\r\n    <MESSAGE value=\"admin dashboard updated\" />\r\n    <MESSAGE value=\"court bug fixed\" />\r\n    <MESSAGE value=\"admin booking updated\" />\r\n    <MESSAGE value=\"booking history redirect to feedback done\" />\r\n    <MESSAGE value=\"booking confirmation solved\" />\r\n    <MESSAGE value=\"point and voucher redemption done\" />\r\n    <MESSAGE value=\"rewards page ok\" />\r\n    <MESSAGE value=\"homepage initialized\" />\r\n    <MESSAGE value=\"court image uploaded\" />\r\n    <MESSAGE value=\"home page done\" />\r\n    <MESSAGE value=\"admin setting initialized\" />\r\n    <MESSAGE value=\"admin setting, dark mode done\" />\r\n    <MESSAGE value=\"report generation done\" />\r\n    <MESSAGE value=\"profile\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"profile\" />\r\n  </component>\r\n  <component name=\"XDebuggerManager\">\r\n    <breakpoint-manager>\r\n      <breakpoints>\r\n        <line-breakpoint enabled=\"true\" type=\"java-line\">\r\n          <url>file://$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/security/JwtAuthFilter.java</url>\r\n          <line>32</line>\r\n          <option name=\"timeStamp\" value=\"1\" />\r\n        </line-breakpoint>\r\n      </breakpoints>\r\n    </breakpoint-manager>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 89327e12854b108d004ebb020d0592b1c618ecaf)
+++ b/.idea/workspace.xml	(date 1754333598151)
@@ -4,104 +4,86 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="0c3ded6e-9290-4208-bf86-f2c4e1aa2374" name="Changes" comment="profile">
-      <change afterPath="$PROJECT_DIR$/pickleball-frontend/src/components/class/BrowseClassPage.jsx" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/CoachController.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/ClassRegistrationDto.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/RecurringSessionRequestDto.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/ClassRegistration.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/ClassRegistrationRepository.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/ClassSessionServiceImpl.java" afterDir="false" />
+    <list default="true" id="0c3ded6e-9290-4208-bf86-f2c4e1aa2374" name="Changes" comment="new">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/pickleball-frontend/package-lock.json" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball-frontend/package-lock.json" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/pickleball-frontend/src/App.js" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball-frontend/src/App.js" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/pickleball-frontend/src/components/common/Navbar.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball-frontend/src/components/common/Navbar.jsx" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball-frontend/src/components/admin/AdminManageBookings.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball-frontend/src/components/admin/AdminManageBookings.jsx" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball-frontend/src/components/admin/ModernBookingDetailsDialog.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball-frontend/src/components/admin/ModernBookingDetailsDialog.jsx" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball-frontend/src/components/class/ClassSessionCreateForm.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball-frontend/src/components/class/ClassSessionCreateForm.jsx" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball-frontend/src/components/class/EditClassSessionDialog.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball-frontend/src/components/class/EditClassSessionDialog.jsx" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball-frontend/src/components/coach/CoachScheduleManagement.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball-frontend/src/components/coach/CoachScheduleManagement.jsx" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball-frontend/src/components/coach/CoachingDashboard.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball-frontend/src/components/coach/CoachingDashboard.jsx" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/pickleball-frontend/src/components/court/BookingConfirmationPage.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball-frontend/src/components/court/BookingConfirmationPage.jsx" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/pickleball-frontend/src/components/event/FriendlyMatchPage.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball-frontend/src/components/event/FriendlyMatchPage.jsx" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball-frontend/src/components/court/BookingHistory.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball-frontend/src/components/court/BookingHistory.jsx" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball-frontend/src/components/court/PaymentPage.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball-frontend/src/components/court/PaymentPage.jsx" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/pickleball-frontend/src/components/feedback/MyFeedbackPage.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball-frontend/src/components/feedback/MyFeedbackPage.jsx" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/pickleball-frontend/src/components/messaging/Conversation.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball-frontend/src/components/messaging/Conversation.jsx" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/pickleball-frontend/src/components/messaging/MessagingHub.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball-frontend/src/components/messaging/MessagingHub.jsx" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball-frontend/src/components/profile/ActiveVouchers.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball-frontend/src/components/profile/ActiveVouchers.jsx" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball-frontend/src/components/profile/MyClassSessions.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball-frontend/src/components/profile/MyClassSessions.jsx" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball-frontend/src/components/profile/MyClassSessionsPage.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball-frontend/src/components/profile/MyClassSessionsPage.jsx" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/pickleball-frontend/src/components/profile/ProfileNavigation.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball-frontend/src/components/profile/ProfileNavigation.jsx" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball-frontend/src/components/profile/ProfileOverview.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball-frontend/src/components/profile/ProfileOverview.jsx" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball-frontend/src/components/profile/RedeemVoucherPage.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball-frontend/src/components/profile/RedeemVoucherPage.jsx" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/pickleball-frontend/src/components/profile/RewardsPage.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball-frontend/src/components/profile/RewardsPage.jsx" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/pickleball-frontend/src/components/profile/WalletPage.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball-frontend/src/components/profile/WalletPage.jsx" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/pickleball-frontend/src/context/AuthContext.js" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball-frontend/src/context/AuthContext.js" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/pickleball-frontend/src/index.js" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball-frontend/src/index.js" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/pickleball-frontend/src/pages/LoginPage.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball-frontend/src/pages/LoginPage.jsx" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/pickleball-frontend/src/service/FriendlyMatchService.js" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball-frontend/src/service/FriendlyMatchService.js" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/pickleball-frontend/src/service/UserService.js" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball-frontend/src/service/UserService.js" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/config/DataInitializer.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball-frontend/src/service/BookingService.js" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball-frontend/src/service/BookingService.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball-frontend/src/service/CoachService.js" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball-frontend/src/service/CoachService.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball-frontend/src/service/FeedbackService.js" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball-frontend/src/service/FeedbackService.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball-frontend/src/utils/dateUtils.js" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball-frontend/src/utils/dateUtils.js" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/config/SecurityConfig.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/config/SecurityConfig.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/AdminController.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/AdminController.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/BookingController.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/BookingController.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/CoachScheduleController.java" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/DataMigrationController.java" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/EventController.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/EventController.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/FriendlyMatchController.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/FriendlyMatchController.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/ClassSessionController.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/ClassSessionController.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/CoachController.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/CoachController.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/EscrowAccountController.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/FeedbackController.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/FeedbackController.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/LeaveRequestController.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/LeaveRequestController.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/MemberController.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/MemberController.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/ProfileController.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/ProfileController.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/SlotController.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/SlotController.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/UserController.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/UserController.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/VenueController.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/VenueController.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/WalletController.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/WalletController.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/PaymentController.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/PaymentController.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/AdminUserDto.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/AdminUserDto.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/BookingHistoryDto.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/BookingHistoryDto.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/BookingRequestDto.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/BookingRequestDto.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/BookingResponseDto.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/BookingResponseDto.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/ClassSessionDto.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/ClassSessionDto.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/CoachSlotDto.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/CoachSlotDto.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/EventDetailDto.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/EventDetailDto.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/EventFilterDto.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/EventFilterDto.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/JoinRequestDto.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/JoinRequestDto.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/RegistrationDto.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/RegistrationDto.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/TopUpRequestDto.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/TopUpRequestDto.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/FeedbackDto.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/FeedbackDto.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/FeedbackResponseDto.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/FeedbackResponseDto.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/MemberDashboardDto.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/MemberDashboardDto.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/RecurringSessionRequestDto.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/RecurringSessionRequestDto.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/RegisterMultiSessionRequest.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/RegisterMultiSessionRequest.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/VoucherDto.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/VoucherDto.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Booking.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Booking.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/BookingSlot.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/BookingSlot.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/CancellationRequest.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/CancellationRequest.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/ClassSession.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/ClassSession.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Court.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Court.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Event.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Event.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/FriendlyMatch.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/FriendlyMatch.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/JoinRequest.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/JoinRequest.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Feedback.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Feedback.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Member.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Member.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Payment.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Payment.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Slot.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Slot.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/User.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/User.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/UserAccount.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/UserAccount.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Venue.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Venue.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/BookingRepository.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/BookingRepository.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/BookingSlotRepository.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/BookingSlotRepository.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/CancellationRequestRepository.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/CancellationRequestRepository.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/VoucherRedemption.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/VoucherRedemption.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Wallet.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/Wallet.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/ClassSessionRepository.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/ClassSessionRepository.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/CourtRepository.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/CourtRepository.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/EventRepository.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/EventRepository.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/FriendlyMatchRepository.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/FriendlyMatchRepository.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/JoinRequestRepository.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/JoinRequestRepository.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/FeedbackRepository.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/FeedbackRepository.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/MemberRepository.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/MemberRepository.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/PaymentRepository.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/PaymentRepository.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/SlotRepository.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/SlotRepository.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/VenueRepository.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/VenueRepository.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/security/JwtAuthFilter.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/security/JwtAuthFilter.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/security/JwtService.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/security/JwtService.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/security/UserDetailsServiceImpl.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/security/UserDetailsServiceImpl.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/VoucherRedemptionRepository.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/VoucherRedemptionRepository.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/VoucherRepository.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/VoucherRepository.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/AdminDashboardServiceImpl.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/AdminDashboardServiceImpl.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/BookingService.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/BookingService.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/ChartServiceImpl.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/ChartServiceImpl.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/ClassSessionService.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/ClassSessionService.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/ClassSessionServiceImpl.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/ClassSessionServiceImpl.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/CoachCourtService.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/CoachCourtService.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/CoachCourtServiceImpl.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/CoachCourtServiceImpl.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/CoachScheduleService.java" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/CoachScheduleServiceImpl.java" beforeDir="false" />
       <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/CourtServiceImpl.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/CourtServiceImpl.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/DataMigrationService.java" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/EmailService.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/EmailService.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/EscrowAccountService.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/EscrowAccountService.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/EventRegistrationServiceImpl.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/EventRegistrationServiceImpl.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/EventService.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/EventService.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/EventServiceImpl.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/EventServiceImpl.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/FeedbackService.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/FeedbackService.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/FriendlyMatchService.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/FriendlyMatchService.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/MatchReminderService.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/MatchReminderService.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/MessageService.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/MessageService.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/ProfileService.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/ProfileService.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/SlotServiceImpl.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/SlotServiceImpl.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/LeaveRequestService.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/LeaveRequestService.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/MemberService.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/MemberService.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/TierAutoUpgradeService.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/TierAutoUpgradeService.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/TierServiceImpl.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/TierServiceImpl.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/UserServiceImpl.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/UserServiceImpl.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/VenueService.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/VenueService.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/VoucherRedemptionServiceImpl.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/VoucherRedemptionServiceImpl.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/WalletService.java" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/WalletService.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/resources/application.properties" beforeDir="false" afterPath="$PROJECT_DIR$/pickleball/pickleball/src/main/resources/application.properties" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/resources/db/migration/V1__migrate_historical_wallet_transactions.sql" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/resources/db/migration/V2__check_wallet_data_status.sql" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/pickleball/pickleball/src/main/resources/db/migration/V3__cleanup_wallet_transactions.sql" beforeDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -149,7 +131,7 @@
   <component name="PropertiesComponent"><![CDATA[{
   "keyToString": {
     "Application.PickleballApplication.executor": "Run",
-    "Application.run.executor": "Debug",
+    "Application.run.executor": "Run",
     "Application.zzz.executor": "Run",
     "ModuleVcsDetector.initialDetectionPerformed": "true",
     "RunOnceActivity.ShowReadmeOnStart": "true",
@@ -404,7 +386,15 @@
       <option name="project" value="LOCAL" />
       <updated>1753781450293</updated>
     </task>
-    <option name="localTasksCounter" value="29" />
+    <task id="LOCAL-00029" summary="new">
+      <option name="closed" value="true" />
+      <created>1753818819972</created>
+      <option name="number" value="00029" />
+      <option name="presentableId" value="LOCAL-00029" />
+      <option name="project" value="LOCAL" />
+      <updated>1753818819972</updated>
+    </task>
+    <option name="localTasksCounter" value="30" />
     <servers />
   </component>
   <component name="Vcs.Log.Tabs.Properties">
@@ -462,7 +452,8 @@
     <MESSAGE value="admin setting, dark mode done" />
     <MESSAGE value="report generation done" />
     <MESSAGE value="profile" />
-    <option name="LAST_COMMIT_MESSAGE" value="profile" />
+    <MESSAGE value="new" />
+    <option name="LAST_COMMIT_MESSAGE" value="new" />
   </component>
   <component name="XDebuggerManager">
     <breakpoint-manager>
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/CoachCourtService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.service;\r\n\r\nimport com.pickleball_backend.pickleball.dto.CoachSlotDto;\r\nimport com.pickleball_backend.pickleball.entity.ClassSession;\r\nimport com.pickleball_backend.pickleball.entity.Court;\r\nimport com.pickleball_backend.pickleball.exception.ConflictException;\r\nimport com.pickleball_backend.pickleball.exception.ResourceNotFoundException;\r\nimport java.time.LocalDateTime;\r\nimport java.util.List;\r\nimport com.pickleball_backend.pickleball.dto.RecurringSessionRequestDto;\r\n\r\npublic interface CoachCourtService {\r\n    List<Court> getAvailableCourtsForCoach(Integer coachId);\r\n    ClassSession createCoachSlot(Integer coachId, CoachSlotDto slotDto) throws ConflictException;\r\n    void updateCoachSlot(Integer coachId, Integer sessionId, CoachSlotDto slotDto) throws ResourceNotFoundException;\r\n    void removeCoachSlot(Integer coachId, Integer sessionId, boolean forceRemove) throws ResourceNotFoundException;\r\n    List<ClassSession> findScheduleByCoachIdAndPeriod(Integer coachId, LocalDateTime from, LocalDateTime to);\r\n    List<ClassSession> findAvailableSlotsByCoachAndCourt(Integer coachId, Integer courtId);\r\n    void createRecurringClass(Integer coachId, RecurringSessionRequestDto dto);\r\n    List<ClassSession> findScheduleByCoachIdAndPeriodWithVenue(Integer coachId, LocalDateTime from, LocalDateTime to);\r\n    List<Object[]> getAllStudentsForCoach(Integer coachId);\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/CoachCourtService.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/CoachCourtService.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/CoachCourtService.java	(revision 89327e12854b108d004ebb020d0592b1c618ecaf)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/CoachCourtService.java	(date 1754264917582)
@@ -19,4 +19,6 @@
     void createRecurringClass(Integer coachId, RecurringSessionRequestDto dto);
     List<ClassSession> findScheduleByCoachIdAndPeriodWithVenue(Integer coachId, LocalDateTime from, LocalDateTime to);
     List<Object[]> getAllStudentsForCoach(Integer coachId);
+    void updateSlotAllowReplacement(Integer coachId, Integer sessionId, Boolean allowReplacement);
+    List<ClassSession> getReplacementSessionsByCoach(Integer coachId);
 }
\ No newline at end of file
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/AdminDashboardServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.service;\r\n\r\nimport com.pickleball_backend.pickleball.dto.AdminBookingDto;\r\nimport com.pickleball_backend.pickleball.dto.AdminUserDto;\r\nimport com.pickleball_backend.pickleball.entity.*;\r\nimport com.pickleball_backend.pickleball.repository.BookingRepository;\r\nimport com.pickleball_backend.pickleball.repository.CourtRepository;\r\nimport com.pickleball_backend.pickleball.repository.UserRepository;\r\nimport com.pickleball_backend.pickleball.repository.BookingSlotRepository;\r\nimport com.pickleball_backend.pickleball.repository.SlotRepository;\r\nimport com.pickleball_backend.pickleball.repository.PaymentRepository;\r\nimport com.pickleball_backend.pickleball.repository.MemberRepository;\r\nimport com.pickleball_backend.pickleball.repository.WalletRepository;\r\nimport com.pickleball_backend.pickleball.repository.UserAccountRepository;\r\nimport com.pickleball_backend.pickleball.repository.CancellationRequestRepository;\r\nimport com.pickleball_backend.pickleball.service.EmailService;\r\nimport com.pickleball_backend.pickleball.repository.FeedbackRepository;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.apache.poi.ss.usermodel.Row;\r\nimport org.springframework.data.domain.Page;\r\nimport org.springframework.data.domain.Pageable;\r\nimport org.springframework.stereotype.Service;\r\nimport org.springframework.transaction.annotation.Transactional;\r\nimport java.util.List;\r\nimport java.util.ArrayList;\r\nimport java.util.stream.Collectors;\r\nimport org.springframework.util.StringUtils;\r\nimport java.time.LocalDate;\r\nimport java.time.format.DateTimeFormatter;\r\nimport com.pickleball_backend.pickleball.dto.DashboardSummaryDto;\r\nimport com.pickleball_backend.pickleball.repository.FeedbackRepository;\r\nimport com.pickleball_backend.pickleball.dto.RecentActivityDto;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.core.io.InputStreamResource;\r\nimport org.springframework.http.HttpHeaders;\r\nimport org.springframework.http.MediaType;\r\nimport org.springframework.http.ResponseEntity;\r\nimport com.pickleball_backend.pickleball.dto.ReportRequestDto;\r\nimport org.apache.poi.ss.usermodel.*;\r\nimport org.apache.poi.xssf.usermodel.XSSFWorkbook;\r\nimport com.lowagie.text.*;\r\nimport com.lowagie.text.pdf.*;\r\nimport java.nio.charset.StandardCharsets;\r\nimport java.io.ByteArrayOutputStream;\r\nimport java.util.Map;\r\nimport com.pickleball_backend.pickleball.service.ChartService;\r\nimport java.awt.image.BufferedImage;\r\nimport java.util.HashMap;\r\n\r\n@Service\r\n@RequiredArgsConstructor\r\npublic class AdminDashboardServiceImpl implements AdminDashboardService {\r\n\r\n    private final BookingSlotRepository bookingSlotRepository;\r\n    private final SlotRepository slotRepository;\r\n    private final PaymentRepository paymentRepository;\r\n    private final EmailService emailService;\r\n    private final MemberRepository memberRepository;\r\n    private final UserRepository userRepository;\r\n    private final WalletRepository walletRepository;\r\n    private final UserAccountRepository userAccountRepository;\r\n    private final CancellationRequestRepository cancellationRequestRepository;\r\n    private final BookingRepository bookingRepository;\r\n    private final CourtRepository courtRepository;\r\n    private final FeedbackRepository feedbackRepository;\r\n    private final ChartService chartService;\r\n\r\n    @Override\r\n    public List<AdminUserDto> getAllUsers() {\r\n        return userRepository.findAll().stream()\r\n                .map(this::convertToAdminUserDto)\r\n                .collect(Collectors.toList());\r\n    }\r\n\r\n    @Override\r\n    public long getTotalUserCount() {\r\n        return userRepository.count();\r\n    }\r\n\r\n\r\n    @Override\r\n    public Page<AdminBookingDto> getAllBookings(Pageable pageable, String search, String status, String startDate, String endDate) {\r\n        try {\r\n            System.out.println(\"AdminDashboardService: getAllBookings called with filters - search: '\" + search + \"', status: '\" + status + \"', startDate: '\" + startDate + \"', endDate: '\" + endDate + \"'\");\r\n            \r\n            // 转换日期字符串为 LocalDate\r\n            java.time.LocalDate startDateLocal = null;\r\n            java.time.LocalDate endDateLocal = null;\r\n            \r\n            if (startDate != null && !startDate.trim().isEmpty()) {\r\n                try {\r\n                    startDateLocal = java.time.LocalDate.parse(startDate);\r\n                } catch (Exception e) {\r\n                    System.err.println(\"Error parsing startDate: \" + startDate + \" - \" + e.getMessage());\r\n                }\r\n            }\r\n            \r\n            if (endDate != null && !endDate.trim().isEmpty()) {\r\n                try {\r\n                    endDateLocal = java.time.LocalDate.parse(endDate);\r\n                } catch (Exception e) {\r\n                    System.err.println(\"Error parsing endDate: \" + endDate + \" - \" + e.getMessage());\r\n            }\r\n            }\r\n            \r\n            // 使用带筛选条件的查询\r\n            Page<Booking> bookings = bookingRepository.findByAdminFilters(\r\n                search != null && !search.trim().isEmpty() ? search.trim() : null,\r\n                status != null && !status.trim().isEmpty() ? status.trim() : null,\r\n                startDateLocal,\r\n                endDateLocal,\r\n                pageable\r\n            );\r\n            \r\n            System.out.println(\"AdminDashboardService: Found \" + bookings.getTotalElements() + \" total bookings, \" + bookings.getContent().size() + \" on current page\");\r\n            System.out.println(\"AdminDashboardService: Page info - page: \" + pageable.getPageNumber() + \", size: \" + pageable.getPageSize());\r\n            \r\n            // 转换为 DTO\r\n            List<AdminBookingDto> dtos = bookings.getContent().stream()\r\n                .map(b -> {\r\n                    try {\r\n                        return convertToAdminBookingDto(b);\r\n                    } catch (Exception e) {\r\n                        System.err.println(\"Error converting booking \" + b.getId() + \": \" + e.getMessage());\r\n                        e.printStackTrace();\r\n                        // 返回一个基本的 DTO 避免整个请求失败\r\n                        AdminBookingDto basicDto = new AdminBookingDto();\r\n                        basicDto.setId(b.getId());\r\n                        basicDto.setStatus(b.getStatus());\r\n                        basicDto.setTotalAmount(b.getTotalAmount());\r\n                        basicDto.setBookingDate(b.getBookingDate());\r\n                        return basicDto;\r\n                    }\r\n                })\r\n                .collect(java.util.stream.Collectors.toList());\r\n            \r\n            System.out.println(\"AdminDashboardService: Converted \" + dtos.size() + \" DTOs\");\r\n            return new org.springframework.data.domain.PageImpl<>(dtos, pageable, bookings.getTotalElements());\r\n        } catch (Exception e) {\r\n            System.err.println(\"Error in getAllBookings: \" + e.getMessage());\r\n            e.printStackTrace();\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    @Transactional\r\n    public Object cancelBookingForAdmin(Integer bookingId, String adminUsername, String adminRemark) {\r\n        Booking booking = bookingRepository.findByIdWithCancellation(bookingId)\r\n                .orElseThrow(() -> new RuntimeException(\"Booking not found\"));\r\n        BookingSlot bookingSlot = booking.getBookingSlots() != null && !booking.getBookingSlots().isEmpty() ? booking.getBookingSlots().get(0) : null;\r\n        Slot slot = bookingSlot != null ? bookingSlot.getSlot() : null;\r\n        Court court = slot != null ? courtRepository.findById(slot.getCourtId())\r\n                .orElseThrow(() -> new RuntimeException(\"Court not found\")) : null;\r\n        // 1. Free up the slot\r\n        if (slot != null) {\r\n            slot.setAvailable(true);\r\n            slotRepository.save(slot);\r\n        }\r\n        // 2. Update booking status\r\n        booking.setStatus(\"CANCELLED\");\r\n        bookingRepository.save(booking);\r\n        // 3. Update booking slot status\r\n        if (bookingSlot != null) {\r\n            bookingSlot.setStatus(\"CANCELLED\");\r\n            bookingSlotRepository.save(bookingSlot);\r\n        }\r\n        // 4. Refund payment if needed (optional, can be expanded)\r\n        Payment payment = booking.getPayment();\r\n        if (payment != null) {\r\n            payment.setStatus(\"REFUNDED\");\r\n            paymentRepository.save(payment);\r\n        }\r\n        // 5. 保存管理员备注和操作人到取消请求（如有）\r\n        CancellationRequest cancellationRequest = booking.getCancellationRequest();\r\n        if (cancellationRequest != null) {\r\n            if (org.springframework.util.StringUtils.hasText(adminRemark)) {\r\n                cancellationRequest.setAdminRemark(adminRemark);\r\n            }\r\n            if (org.springframework.util.StringUtils.hasText(adminUsername)) {\r\n                // 查找管理员 user id\r\n                User adminUser = userRepository.findByUserAccount_Username(adminUsername)\r\n                        .orElseThrow(() -> new RuntimeException(\"Admin user not found\"));\r\n                cancellationRequest.setApprovedBy(adminUser.getId()); // 假设实体字段为 approvedBy\r\n            }\r\n            cancellationRequestRepository.save(cancellationRequest);\r\n        }\r\n        // 6. Send admin cancellation notification\r\n        emailService.sendAdminCancellationNotification(\r\n                booking.getMember().getUser().getEmail(),\r\n                booking,\r\n                slot,\r\n                court != null ? court.getName() : \"Court not found\",\r\n                adminRemark\r\n        );\r\n        return java.util.Map.of(\r\n                \"success\", true,\r\n                \"message\", \"Booking cancelled successfully by admin.\"\r\n        );\r\n    }\r\n\r\n    @Override\r\n    public double getGlobalAverageRating() {\r\n        Double avg = feedbackRepository.findAll().stream()\r\n            .mapToInt(f -> f.getRating() != null ? f.getRating() : 0)\r\n            .average()\r\n            .orElse(0.0);\r\n        return avg;\r\n    }\r\n\r\n    @Override\r\n    public DashboardSummaryDto getDashboardSummary() {\r\n        DashboardSummaryDto dto = new DashboardSummaryDto();\r\n        // 当前统计周期：本月\r\n        java.time.LocalDate now = java.time.LocalDate.now();\r\n        java.time.YearMonth thisMonth = java.time.YearMonth.from(now);\r\n        java.time.YearMonth lastMonth = thisMonth.minusMonths(1);\r\n        java.time.LocalDate startOfThisMonthDate = thisMonth.atDay(1);\r\n        java.time.LocalDate startOfLastMonthDate = lastMonth.atDay(1);\r\n        java.time.LocalDate endOfLastMonthDate = startOfThisMonthDate.minusDays(1);\r\n        java.time.LocalDateTime startOfLastMonth = startOfLastMonthDate.atStartOfDay();\r\n        java.time.LocalDateTime endOfLastMonth = endOfLastMonthDate.atTime(23, 59, 59);\r\n\r\n        // 1. 总用户数\r\n        long totalUsers = userRepository.count();\r\n        dto.setTotalUsers(totalUsers);\r\n        // 2. 总预订数\r\n        long totalBookings = bookingRepository.count();\r\n        dto.setTotalBookings(totalBookings);\r\n        // 3. 总收入\r\n        Double totalRevenue = paymentRepository.sumTotalRevenue();\r\n        dto.setTotalRevenue(totalRevenue != null ? totalRevenue : 0.0);\r\n        // 4. 平均评分\r\n        Double averageRating = feedbackRepository.findAverageRating();\r\n        dto.setAverageRating(averageRating != null ? averageRating : 0.0);\r\n\r\n        // 5. 上月数据\r\n        // 5.1 上月用户数（注册时间在上月）\r\n        Long lastMonthUsers = userRepository.countByCreatedAtBetween(startOfLastMonth, endOfLastMonth);\r\n        // 5.2 上月预订数（预订时间在上月）\r\n        Long lastMonthBookings = bookingRepository.countByBookingDateBetween(startOfLastMonth, endOfLastMonth);\r\n        // 5.3 上月收入（支付时间在上月）\r\n        Double lastMonthRevenue = paymentRepository.sumTotalRevenueByDate(startOfLastMonth, endOfLastMonth);\r\n        // 5.4 上月平均评分（评分时间在上月）\r\n        Double lastMonthAvgRating = feedbackRepository.findAverageRatingByDate(startOfLastMonth, endOfLastMonth);\r\n\r\n        // 6. 变化率计算（环比 = (本月-上月)/上月*100%）\r\n        dto.setTotalUsersChange(calcChangeRate(totalUsers, lastMonthUsers));\r\n        dto.setTotalBookingsChange(calcChangeRate(totalBookings, lastMonthBookings));\r\n        dto.setTotalRevenueChange(calcChangeRate(totalRevenue, lastMonthRevenue));\r\n        dto.setAverageRatingChange(calcChangeRate(averageRating, lastMonthAvgRating));\r\n        return dto;\r\n    }\r\n\r\n    @Override\r\n    public Object getBookingTrends(String range) {\r\n        java.util.List<String> labels = new java.util.ArrayList<>();\r\n        java.util.List<Long> data = new java.util.ArrayList<>();\r\n        if (\"7d\".equalsIgnoreCase(range)) {\r\n            java.time.LocalDate today = java.time.LocalDate.now();\r\n            for (int i = 6; i >= 0; i--) {\r\n                java.time.LocalDate day = today.minusDays(i);\r\n                java.time.LocalDateTime start = day.atStartOfDay();\r\n                java.time.LocalDateTime end = day.atTime(23, 59, 59);\r\n                long count = bookingRepository.countByBookingDateBetween(start, end);\r\n                labels.add(day.toString()); // yyyy-MM-dd\r\n                data.add(count);\r\n            }\r\n            return java.util.Map.of(\"labels\", labels, \"data\", data);\r\n        } else if (\"30d\".equalsIgnoreCase(range)) {\r\n            java.time.LocalDate today = java.time.LocalDate.now();\r\n            for (int i = 29; i >= 0; i--) {\r\n                java.time.LocalDate day = today.minusDays(i);\r\n                java.time.LocalDateTime start = day.atStartOfDay();\r\n                java.time.LocalDateTime end = day.atTime(23, 59, 59);\r\n                long count = bookingRepository.countByBookingDateBetween(start, end);\r\n                labels.add(day.toString());\r\n                data.add(count);\r\n            }\r\n            return java.util.Map.of(\"labels\", labels, \"data\", data);\r\n        } else if (\"12m\".equalsIgnoreCase(range)) {\r\n            java.time.YearMonth thisMonth = java.time.YearMonth.now();\r\n            for (int i = 11; i >= 0; i--) {\r\n                java.time.YearMonth ym = thisMonth.minusMonths(i);\r\n                java.time.LocalDateTime start = ym.atDay(1).atStartOfDay();\r\n                java.time.LocalDateTime end = ym.atEndOfMonth().atTime(23, 59, 59);\r\n                long count = bookingRepository.countByBookingDateBetween(start, end);\r\n                labels.add(ym.toString()); // yyyy-MM\r\n                data.add(count);\r\n            }\r\n            return java.util.Map.of(\"labels\", labels, \"data\", data);\r\n        } else {\r\n            // 默认返回最近7天\r\n            java.time.LocalDate today = java.time.LocalDate.now();\r\n            for (int i = 6; i >= 0; i--) {\r\n                java.time.LocalDate day = today.minusDays(i);\r\n                java.time.LocalDateTime start = day.atStartOfDay();\r\n                java.time.LocalDateTime end = day.atTime(23, 59, 59);\r\n                long count = bookingRepository.countByBookingDateBetween(start, end);\r\n                labels.add(day.toString());\r\n                data.add(count);\r\n            }\r\n            return java.util.Map.of(\"labels\", labels, \"data\", data);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public Object getRevenueTrends(String range) {\r\n        java.util.List<String> labels = new java.util.ArrayList<>();\r\n        java.util.List<Double> data = new java.util.ArrayList<>();\r\n        if (\"7d\".equalsIgnoreCase(range)) {\r\n            java.time.LocalDate today = java.time.LocalDate.now();\r\n            for (int i = 6; i >= 0; i--) {\r\n                java.time.LocalDate day = today.minusDays(i);\r\n                java.time.LocalDateTime start = day.atStartOfDay();\r\n                java.time.LocalDateTime end = day.atTime(23, 59, 59);\r\n                Double revenue = paymentRepository.sumRevenueByDateAndType(start, end, \"BOOKING\");\r\n                data.add(revenue != null ? revenue : 0.0);\r\n                labels.add(day.toString());\r\n            }\r\n            return java.util.Map.of(\"labels\", labels, \"data\", data);\r\n        } else if (\"30d\".equalsIgnoreCase(range)) {\r\n            java.time.LocalDate today = java.time.LocalDate.now();\r\n            for (int i = 29; i >= 0; i--) {\r\n                java.time.LocalDate day = today.minusDays(i);\r\n                java.time.LocalDateTime start = day.atStartOfDay();\r\n                java.time.LocalDateTime end = day.atTime(23, 59, 59);\r\n                Double revenue = paymentRepository.sumRevenueByDateAndType(start, end, \"BOOKING\");\r\n                data.add(revenue != null ? revenue : 0.0);\r\n                labels.add(day.toString());\r\n            }\r\n            return java.util.Map.of(\"labels\", labels, \"data\", data);\r\n        } else if (\"12m\".equalsIgnoreCase(range)) {\r\n            java.time.YearMonth thisMonth = java.time.YearMonth.now();\r\n            for (int i = 11; i >= 0; i--) {\r\n                java.time.YearMonth ym = thisMonth.minusMonths(i);\r\n                java.time.LocalDateTime start = ym.atDay(1).atStartOfDay();\r\n                java.time.LocalDateTime end = ym.atEndOfMonth().atTime(23, 59, 59);\r\n                Double revenue = paymentRepository.sumRevenueByDateAndType(start, end, \"BOOKING\");\r\n                data.add(revenue != null ? revenue : 0.0);\r\n                labels.add(ym.toString());\r\n            }\r\n            return java.util.Map.of(\"labels\", labels, \"data\", data);\r\n        } else {\r\n            // 默认返回最近7天\r\n            java.time.LocalDate today = java.time.LocalDate.now();\r\n            for (int i = 6; i >= 0; i--) {\r\n                java.time.LocalDate day = today.minusDays(i);\r\n                java.time.LocalDateTime start = day.atStartOfDay();\r\n                java.time.LocalDateTime end = day.atTime(23, 59, 59);\r\n                Double revenue = paymentRepository.sumRevenueByDateAndType(start, end, \"BOOKING\");\r\n                data.add(revenue != null ? revenue : 0.0);\r\n                labels.add(day.toString());\r\n            }\r\n            return java.util.Map.of(\"labels\", labels, \"data\", data);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public List<RecentActivityDto> getRecentActivity() {\r\n        List<RecentActivityDto> activities = new ArrayList<>();\r\n        // 最近预订\r\n        bookingRepository.findTop5ByOrderByBookingDateDesc().forEach(b -> {\r\n            try {\r\n                RecentActivityDto dto = new RecentActivityDto();\r\n                dto.setType(\"booking\");\r\n                String userName = \"\";\r\n                if (b.getMember() != null && b.getMember().getUser() != null && b.getMember().getUser().getName() != null) {\r\n                    userName = b.getMember().getUser().getName();\r\n                }\r\n                dto.setUser(userName);\r\n                // 获取场地名\r\n                String courtName = \"court\";\r\n                if (b.getBookingSlots() != null && !b.getBookingSlots().isEmpty()) {\r\n                    Integer courtId = null;\r\n                    if (b.getBookingSlots().get(0) != null && b.getBookingSlots().get(0).getSlot() != null) {\r\n                        courtId = b.getBookingSlots().get(0).getSlot().getCourtId();\r\n                    }\r\n                    if (courtId != null) {\r\n                        try {\r\n                            courtName = courtRepository.findById(courtId).map(c -> c.getName()).orElse(\"court\");\r\n                        } catch (Exception ignore) {}\r\n                    }\r\n                }\r\n                dto.setDetail(\"booked \" + courtName);\r\n                dto.setTimestamp(b.getBookingDate());\r\n                dto.setIcon(\"\\uD83D\\uDCC5\"); // \uD83D\uDCC5\r\n                activities.add(dto);\r\n            } catch (Exception ignore) {}\r\n        });\r\n        // 最近取消预订\r\n        cancellationRequestRepository.findTop3ByOrderByRequestDateDesc().forEach(cr -> {\r\n            try {\r\n                RecentActivityDto dto = new RecentActivityDto();\r\n                dto.setType(\"cancellation\");\r\n                String userName = \"\";\r\n                if (cr.getBooking() != null && cr.getBooking().getMember() != null &&\r\n                    cr.getBooking().getMember().getUser() != null &&\r\n                    cr.getBooking().getMember().getUser().getName() != null) {\r\n                    userName = cr.getBooking().getMember().getUser().getName();\r\n                }\r\n                dto.setUser(userName);\r\n                // 获取场地名\r\n                String courtName = \"court\";\r\n                if (cr.getBooking() != null && cr.getBooking().getBookingSlots() != null && !cr.getBooking().getBookingSlots().isEmpty()) {\r\n                    Integer courtId = null;\r\n                    if (cr.getBooking().getBookingSlots().get(0) != null && cr.getBooking().getBookingSlots().get(0).getSlot() != null) {\r\n                        courtId = cr.getBooking().getBookingSlots().get(0).getSlot().getCourtId();\r\n                    }\r\n                    if (courtId != null) {\r\n                        try {\r\n                            courtName = courtRepository.findById(courtId).map(c -> c.getName()).orElse(\"court\");\r\n                        } catch (Exception ignore) {}\r\n                    }\r\n                }\r\n                dto.setDetail(\"cancelled \" + courtName + \" booking\");\r\n                dto.setTimestamp(cr.getRequestDate());\r\n                dto.setIcon(\"\\u274C\"); // ❌\r\n                activities.add(dto);\r\n            } catch (Exception ignore) {}\r\n        });\r\n        // 最近注册\r\n        userRepository.findTop3ByOrderByCreatedAtDesc().forEach(u -> {\r\n            try {\r\n                RecentActivityDto dto = new RecentActivityDto();\r\n                dto.setType(\"user\");\r\n                dto.setUser(u.getName() != null ? u.getName() : \"\");\r\n                dto.setDetail(\"created an account\");\r\n                dto.setTimestamp(u.getCreatedAt());\r\n                dto.setIcon(\"\\uD83D\\uDC64\"); // \uD83D\uDC64\r\n                activities.add(dto);\r\n            } catch (Exception ignore) {}\r\n        });\r\n        // 最近评价\r\n        feedbackRepository.findTop2ByOrderByCreatedAtDesc().forEach(f -> {\r\n            try {\r\n                RecentActivityDto dto = new RecentActivityDto();\r\n                dto.setType(\"review\");\r\n                String reviewer = \"\";\r\n                if (f.getUser() != null && f.getUser().getName() != null) {\r\n                    reviewer = f.getUser().getName();\r\n                }\r\n                dto.setUser(reviewer);\r\n                dto.setDetail(\"rated a venue \" + (f.getRating() != null ? f.getRating() : \"\") + \" stars\");\r\n                dto.setTimestamp(f.getCreatedAt());\r\n                dto.setIcon(\"\\u2B50\"); // ⭐\r\n                activities.add(dto);\r\n            } catch (Exception ignore) {}\r\n        });\r\n        // 按时间倒序取前10条\r\n        return activities.stream()\r\n                .filter(a -> a.getTimestamp() != null)\r\n                .sorted((a, b) -> b.getTimestamp().compareTo(a.getTimestamp()))\r\n                .limit(10)\r\n                .collect(Collectors.toList());\r\n    }\r\n\r\n    @Override\r\n    public ResponseEntity<InputStreamResource> generateReport(ReportRequestDto request) throws Exception {\r\n        List<Booking> bookings = bookingRepository.findAll();\r\n        Map<String, Boolean> filters = request.getFilters() != null ? request.getFilters() : new java.util.HashMap<>();\r\n        byte[] bytes;\r\n        String ext;\r\n        String contentType;\r\n        String format = request.getFormat();\r\n        if (format == null) {\r\n            format = \"pdf\";\r\n        }\r\n        switch (format.toLowerCase()) {\r\n            case \"excel\":\r\n                bytes = generateExcelReport(bookings, filters);\r\n                ext = \"xlsx\";\r\n                contentType = \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\";\r\n                break;\r\n            case \"csv\":\r\n                bytes = generateCsvReport(bookings, filters);\r\n                ext = \"csv\";\r\n                contentType = \"text/csv\";\r\n                break;\r\n            case \"pdf\":\r\n                bytes = generateComplexPdfReport(request);\r\n                ext = \"pdf\";\r\n                contentType = \"application/pdf\";\r\n                break;\r\n            default:\r\n                throw new IllegalArgumentException(\"Unsupported format: \" + format);\r\n        }\r\n        String filename = \"report.\" + ext;\r\n        InputStreamResource resource = new InputStreamResource(new java.io.ByteArrayInputStream(bytes));\r\n        return ResponseEntity.ok()\r\n                .header(HttpHeaders.CONTENT_DISPOSITION, \"attachment; filename=\" + filename)\r\n                .contentType(MediaType.parseMediaType(contentType))\r\n                .contentLength(bytes.length)\r\n                .body(resource);\r\n    }\r\n\r\n    private byte[] generateExcelReport(List<Booking> bookings, Map<String, Boolean> filters) throws Exception {\r\n        boolean includeUser = filters.getOrDefault(\"includeUsers\", true);\r\n        boolean includeBooking = filters.getOrDefault(\"includeBookings\", true);\r\n        boolean includeRevenue = filters.getOrDefault(\"includeRevenue\", true);\r\n        Workbook workbook = new XSSFWorkbook();\r\n        Sheet sheet = workbook.createSheet(\"Bookings\");\r\n        Row header = sheet.createRow(0);\r\n        int col = 0;\r\n        header.createCell(col++).setCellValue(\"ID\");\r\n        if (includeUser) header.createCell(col++).setCellValue(\"User\");\r\n        if (includeBooking) {\r\n            header.createCell(col++).setCellValue(\"Date\");\r\n            header.createCell(col++).setCellValue(\"Status\");\r\n        }\r\n        if (includeRevenue) header.createCell(col++).setCellValue(\"Amount\");\r\n        int rowIdx = 1;\r\n        for (Booking b : bookings) {\r\n            Row row = sheet.createRow(rowIdx++);\r\n            int c = 0;\r\n            row.createCell(c++).setCellValue(b.getId());\r\n            if (includeUser) {\r\n                String user = (b.getMember() != null && b.getMember().getUser() != null) ? b.getMember().getUser().getName() : \"\";\r\n                row.createCell(c++).setCellValue(user);\r\n            }\r\n            if (includeBooking) {\r\n                row.createCell(c++).setCellValue(b.getBookingDate() != null ? b.getBookingDate().toString() : \"\");\r\n                row.createCell(c++).setCellValue(b.getStatus());\r\n            }\r\n            if (includeRevenue) {\r\n                row.createCell(c++).setCellValue(b.getTotalAmount());\r\n            }\r\n        }\r\n        ByteArrayOutputStream out = new ByteArrayOutputStream();\r\n        workbook.write(out);\r\n        workbook.close();\r\n        return out.toByteArray();\r\n    }\r\n\r\n    private byte[] generateCsvReport(List<Booking> bookings, Map<String, Boolean> filters) {\r\n        boolean includeUser = filters.getOrDefault(\"includeUsers\", true);\r\n        boolean includeBooking = filters.getOrDefault(\"includeBookings\", true);\r\n        boolean includeRevenue = filters.getOrDefault(\"includeRevenue\", true);\r\n        StringBuilder sb = new StringBuilder();\r\n        sb.append(\"ID\");\r\n        if (includeUser) sb.append(\",User\");\r\n        if (includeBooking) sb.append(\",Date,Status\");\r\n        if (includeRevenue) sb.append(\",Amount\");\r\n        sb.append(\"\\n\");\r\n        for (Booking b : bookings) {\r\n            sb.append(b.getId());\r\n            if (includeUser) {\r\n                String user = (b.getMember() != null && b.getMember().getUser() != null) ? b.getMember().getUser().getName() : \"\";\r\n                sb.append(\",\").append('\"').append(user.replace(\"\\\"\", \"\\\"\\\"\")).append('\"');\r\n            }\r\n            if (includeBooking) {\r\n                sb.append(\",\").append(b.getBookingDate() != null ? b.getBookingDate().toString() : \"\");\r\n                sb.append(\",\").append(b.getStatus());\r\n            }\r\n            if (includeRevenue) {\r\n                sb.append(\",\").append(b.getTotalAmount());\r\n            }\r\n            sb.append(\"\\n\");\r\n        }\r\n        return sb.toString().getBytes(StandardCharsets.UTF_8);\r\n    }\r\n\r\n    private byte[] generatePdfReport(List<Booking> bookings, Map<String, Boolean> filters) throws Exception {\r\n        boolean includeUser = filters.getOrDefault(\"includeUsers\", true);\r\n        boolean includeBooking = filters.getOrDefault(\"includeBookings\", true);\r\n        boolean includeRevenue = filters.getOrDefault(\"includeRevenue\", true);\r\n        ByteArrayOutputStream out = new ByteArrayOutputStream();\r\n        Document document = new Document();\r\n        PdfWriter.getInstance(document, out);\r\n        document.open();\r\n        document.add(new Paragraph(\"Booking Report\"));\r\n        int colCount = 1 + (includeUser ? 1 : 0) + (includeBooking ? 2 : 0) + (includeRevenue ? 1 : 0);\r\n        PdfPTable table = new PdfPTable(colCount);\r\n        table.addCell(\"ID\");\r\n        if (includeUser) table.addCell(\"User\");\r\n        if (includeBooking) {\r\n            table.addCell(\"Date\");\r\n            table.addCell(\"Status\");\r\n        }\r\n        if (includeRevenue) table.addCell(\"Amount\");\r\n        for (Booking b : bookings) {\r\n            table.addCell(String.valueOf(b.getId()));\r\n            if (includeUser) {\r\n                String user = (b.getMember() != null && b.getMember().getUser() != null) ? b.getMember().getUser().getName() : \"\";\r\n                table.addCell(user);\r\n            }\r\n            if (includeBooking) {\r\n                table.addCell(b.getBookingDate() != null ? b.getBookingDate().toString() : \"\");\r\n                table.addCell(b.getStatus());\r\n            }\r\n            if (includeRevenue) {\r\n                table.addCell(String.valueOf(b.getTotalAmount()));\r\n            }\r\n        }\r\n        document.add(table);\r\n        document.close();\r\n        return out.toByteArray();\r\n    }\r\n\r\n    // 复杂PDF报表生成\r\n    private byte[] generateComplexPdfReport(ReportRequestDto request) throws Exception {\r\n        ByteArrayOutputStream out = new ByteArrayOutputStream();\r\n        Document document = new Document();\r\n        PdfWriter.getInstance(document, out);\r\n        document.open();\r\n\r\n        boolean hasContent = false;\r\n        \r\n        // 获取格式化选项\r\n        Map<String, Object> formatting = new HashMap<>();\r\n        if (request.getMetadata() != null && request.getMetadata().containsKey(\"formatting\")) {\r\n            formatting = (Map<String, Object>) request.getMetadata().get(\"formatting\");\r\n        }\r\n        boolean includeHeaderFooter = (Boolean) formatting.getOrDefault(\"includeHeaderFooter\", true);\r\n        boolean useBrandColors = (Boolean) formatting.getOrDefault(\"useBrandColors\", true);\r\n        boolean includeAppendix = (Boolean) formatting.getOrDefault(\"includeAppendix\", false);\r\n\r\n        // 1. 标题、公司信息\r\n        Map<String, Object> metadata = request.getMetadata();\r\n        if (metadata != null) {\r\n            // 页眉\r\n            if (includeHeaderFooter) {\r\n                document.add(new Paragraph(\"Picklefy Pickleball Club\", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 14)));\r\n                document.add(new Paragraph(\"Professional Pickleball Court Management System\", FontFactory.getFont(FontFactory.HELVETICA, 10)));\r\n                document.add(new Paragraph(\" \"));\r\n            }\r\n            \r\n            document.add(new Paragraph((String) metadata.getOrDefault(\"title\", \"Report\"), FontFactory.getFont(FontFactory.HELVETICA_BOLD, 18)));\r\n            hasContent = true;\r\n            Map<String, Object> company = (Map<String, Object>) metadata.getOrDefault(\"company\", java.util.Collections.emptyMap());\r\n            document.add(new Paragraph((String) company.getOrDefault(\"name\", \"\"), FontFactory.getFont(FontFactory.HELVETICA, 12)));\r\n            document.add(new Paragraph(\"Period: \" + metadata.getOrDefault(\"period\", \"\"), FontFactory.getFont(FontFactory.HELVETICA, 10)));\r\n            document.add(new Paragraph(\"Generated at: \" + metadata.getOrDefault(\"generatedAt\", \"\"), FontFactory.getFont(FontFactory.HELVETICA, 10)));\r\n            document.add(new Paragraph(\" \"));\r\n        }\r\n\r\n        java.util.List<String> sections = metadata != null ? (java.util.List<String>) metadata.getOrDefault(\"sections\", java.util.List.of()) : java.util.List.of();\r\n        Map<String, Object> content = request.getContent();\r\n\r\n        if (sections == null || sections.isEmpty()) {\r\n            document.add(new Paragraph(\"No report sections selected.\"));\r\n            hasContent = true;\r\n        } else {\r\n            for (String section : sections) {\r\n                document.add(new Paragraph(section, FontFactory.getFont(FontFactory.HELVETICA_BOLD, 16)));\r\n                hasContent = true;\r\n                document.add(new Paragraph(\" \"));\r\n                if (content != null) {\r\n                    switch (section) {\r\n                        case \"Executive Summary\":\r\n                            Object summaryObj = content.get(\"summary\");\r\n                            if (summaryObj instanceof Map) {\r\n                                @SuppressWarnings(\"unchecked\")\r\n                                Map<String, Object> summary = (Map<String, Object>) summaryObj;\r\n                                \r\n                                Object keyMetricsObj = summary.get(\"keyMetrics\");\r\n                                if (keyMetricsObj instanceof List) {\r\n                                    @SuppressWarnings(\"unchecked\")\r\n                                    List<Map<String, Object>> keyMetrics = (List<Map<String, Object>>) keyMetricsObj;\r\n                                    if (!keyMetrics.isEmpty()) {\r\n                                        PdfPTable table = new PdfPTable(3);\r\n                                        table.addCell(\"Metric\");\r\n                                        table.addCell(\"Value\");\r\n                                        table.addCell(\"Change\");\r\n                                        for (Map<String, Object> metric : keyMetrics) {\r\n                                            table.addCell((String) metric.getOrDefault(\"name\", \"\"));\r\n                                            table.addCell((String) metric.getOrDefault(\"value\", \"\"));\r\n                                            table.addCell((String) metric.getOrDefault(\"change\", \"\"));\r\n                                        }\r\n                                        document.add(table);\r\n                                    }\r\n                                }\r\n                                \r\n                                Object highlightsObj = summary.get(\"highlights\");\r\n                                if (highlightsObj instanceof List) {\r\n                                    @SuppressWarnings(\"unchecked\")\r\n                                    List<String> highlights = (List<String>) highlightsObj;\r\n                                    if (!highlights.isEmpty()) {\r\n                                        document.add(new Paragraph(\"Highlights:\", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 12)));\r\n                                        for (String h : highlights) {\r\n                                            document.add(new Paragraph(\"- \" + h));\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                            break;\r\n                        case \"Financial Highlights\":\r\n                            Object financialsObj = content.get(\"financials\");\r\n                            if (financialsObj instanceof Map) {\r\n                                @SuppressWarnings(\"unchecked\")\r\n                                Map<String, Object> financials = (Map<String, Object>) financialsObj;\r\n                                \r\n                                Object incomeStatementObj = financials.get(\"incomeStatement\");\r\n                                if (incomeStatementObj instanceof List) {\r\n                                    @SuppressWarnings(\"unchecked\")\r\n                                    List<Map<String, Object>> incomeStatement = (List<Map<String, Object>>) incomeStatementObj;\r\n                                    if (!incomeStatement.isEmpty()) {\r\n                                        document.add(new Paragraph(\"Income Statement:\", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 12)));\r\n                                        PdfPTable table = new PdfPTable(3);\r\n                                        table.addCell(\"Category\");\r\n                                        table.addCell(\"Current\");\r\n                                        table.addCell(\"Previous\");\r\n                                        for (Map<String, Object> row : incomeStatement) {\r\n                                            table.addCell((String) row.getOrDefault(\"category\", \"\"));\r\n                                            table.addCell(String.valueOf(row.getOrDefault(\"current\", \"\")));\r\n                                            table.addCell(String.valueOf(row.getOrDefault(\"previous\", \"\")));\r\n                                        }\r\n                                        document.add(table);\r\n                                    }\r\n                                }\r\n                                \r\n                                Object balanceSheetObj = financials.get(\"balanceSheet\");\r\n                                if (balanceSheetObj instanceof List) {\r\n                                    @SuppressWarnings(\"unchecked\")\r\n                                    List<Map<String, Object>> balanceSheet = (List<Map<String, Object>>) balanceSheetObj;\r\n                                    if (!balanceSheet.isEmpty()) {\r\n                                        document.add(new Paragraph(\"Balance Sheet:\", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 12)));\r\n                                        PdfPTable table = new PdfPTable(2);\r\n                                        table.addCell(\"Category\");\r\n                                        table.addCell(\"Value\");\r\n                                        for (Map<String, Object> row : balanceSheet) {\r\n                                            table.addCell((String) row.getOrDefault(\"category\", \"\"));\r\n                                            table.addCell(String.valueOf(row.getOrDefault(\"value\", \"\")));\r\n                                        }\r\n                                        document.add(table);\r\n                                    }\r\n                                }\r\n                            }\r\n                            break;\r\n                        case \"Trend Analysis\":\r\n                            Object trendsObj = content.get(\"trends\");\r\n                            if (trendsObj instanceof Map) {\r\n                                @SuppressWarnings(\"unchecked\")\r\n                                Map<String, Object> trends = (Map<String, Object>) trendsObj;\r\n                                if (!trends.isEmpty()) {\r\n                                    document.add(new Paragraph(\"Trend Analysis:\", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 12)));\r\n                                    \r\n                                    // 获取可视化类型\r\n                                    String visualizationType = \"bar\"; // 默认值\r\n                                    if (request.getMetadata() != null && request.getMetadata().containsKey(\"visualization\")) {\r\n                                        visualizationType = (String) request.getMetadata().get(\"visualization\");\r\n                                    }\r\n                                    \r\n                                    // 生成收入趋势图表\r\n                                    if (trends.containsKey(\"dailyRevenue\")) {\r\n                                        try {\r\n                                            // 传递品牌色彩参数\r\n                                            Map<String, Object> chartTrends = new HashMap<>(trends);\r\n                                            chartTrends.put(\"useBrandColors\", useBrandColors);\r\n                                            \r\n                                            BufferedImage revenueChart = chartService.generateRevenueTrendChart(chartTrends, visualizationType);\r\n                                            if (revenueChart != null) {\r\n                                                document.add(new Paragraph(\"Revenue Trend Chart:\", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 10)));\r\n                                                ByteArrayOutputStream chartStream = new ByteArrayOutputStream();\r\n                                                javax.imageio.ImageIO.write(revenueChart, \"PNG\", chartStream);\r\n                                                byte[] chartBytes = chartStream.toByteArray();\r\n                                                com.lowagie.text.Image chartImage = com.lowagie.text.Image.getInstance(chartBytes);\r\n                                                chartImage.scaleToFit(500, 350);\r\n                                                chartImage.setAlignment(com.lowagie.text.Image.MIDDLE);\r\n                                                document.add(chartImage);\r\n                                                document.add(new Paragraph(\" \"));\r\n                                            }\r\n                                        } catch (Exception e) {\r\n                                            System.err.println(\"Error generating revenue chart: \" + e.getMessage());\r\n                                        }\r\n                                    }\r\n                                    \r\n                                    // 生成预订趋势图表\r\n                                    if (trends.containsKey(\"dailyBookings\")) {\r\n                                        try {\r\n                                            // 传递品牌色彩参数\r\n                                            Map<String, Object> chartTrends = new HashMap<>(trends);\r\n                                            chartTrends.put(\"useBrandColors\", useBrandColors);\r\n                                            \r\n                                            BufferedImage bookingChart = chartService.generateBookingTrendChart(chartTrends, visualizationType);\r\n                                            if (bookingChart != null) {\r\n                                                document.add(new Paragraph(\"Booking Trend Chart:\", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 10)));\r\n                                                ByteArrayOutputStream chartStream = new ByteArrayOutputStream();\r\n                                                javax.imageio.ImageIO.write(bookingChart, \"PNG\", chartStream);\r\n                                                byte[] chartBytes = chartStream.toByteArray();\r\n                                                com.lowagie.text.Image chartImage = com.lowagie.text.Image.getInstance(chartBytes);\r\n                                                chartImage.scaleToFit(500, 350);\r\n                                                chartImage.setAlignment(com.lowagie.text.Image.MIDDLE);\r\n                                                document.add(chartImage);\r\n                                                document.add(new Paragraph(\" \"));\r\n                                            }\r\n                                        } catch (Exception e) {\r\n                                            System.err.println(\"Error generating booking chart: \" + e.getMessage());\r\n                                        }\r\n                                    }\r\n                                    \r\n                                    // 生成用户活动图表\r\n                                    if (trends.containsKey(\"activeUsers\") || trends.containsKey(\"userActivityRate\")) {\r\n                                        try {\r\n                                            // 传递品牌色彩参数\r\n                                            Map<String, Object> chartTrends = new HashMap<>(trends);\r\n                                            chartTrends.put(\"useBrandColors\", useBrandColors);\r\n                                            \r\n                                            BufferedImage userChart = chartService.generateUserActivityChart(chartTrends, visualizationType);\r\n                                            if (userChart != null) {\r\n                                                document.add(new Paragraph(\"User Activity Chart:\", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 10)));\r\n                                                ByteArrayOutputStream chartStream = new ByteArrayOutputStream();\r\n                                                javax.imageio.ImageIO.write(userChart, \"PNG\", chartStream);\r\n                                                byte[] chartBytes = chartStream.toByteArray();\r\n                                                com.lowagie.text.Image chartImage = com.lowagie.text.Image.getInstance(chartBytes);\r\n                                                chartImage.scaleToFit(500, 350);\r\n                                                chartImage.setAlignment(com.lowagie.text.Image.MIDDLE);\r\n                                                document.add(chartImage);\r\n                                                document.add(new Paragraph(\" \"));\r\n                                            }\r\n                                        } catch (Exception e) {\r\n                                            System.err.println(\"Error generating user activity chart: \" + e.getMessage());\r\n                                        }\r\n                                    }\r\n                                    \r\n                                    // 显示详细的表格数据作为补充\r\n                                    document.add(new Paragraph(\"Detailed Data Tables:\", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 10)));\r\n                                    \r\n                                    // 显示每日收入趋势表格\r\n                                    if (trends.containsKey(\"dailyRevenue\")) {\r\n                                        Object dailyRevenueObj = trends.get(\"dailyRevenue\");\r\n                                        if (dailyRevenueObj instanceof Map) {\r\n                                            @SuppressWarnings(\"unchecked\")\r\n                                            Map<String, Object> dailyRevenue = (Map<String, Object>) dailyRevenueObj;\r\n                                            if (!dailyRevenue.isEmpty()) {\r\n                                                document.add(new Paragraph(\"Daily Revenue Data:\", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));\r\n                                                PdfPTable revenueTable = new PdfPTable(2);\r\n                                                revenueTable.setWidthPercentage(100);\r\n                                                revenueTable.addCell(new PdfPCell(new Phrase(\"Date\", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 8))));\r\n                                                revenueTable.addCell(new PdfPCell(new Phrase(\"Revenue (RM)\", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 8))));\r\n                                                \r\n                                                // 按日期排序并显示前10个最高收入日\r\n                                                dailyRevenue.entrySet().stream()\r\n                                                    .sorted((a, b) -> {\r\n                                                        Number aValue = (Number) a.getValue();\r\n                                                        Number bValue = (Number) b.getValue();\r\n                                                        return Double.compare(bValue.doubleValue(), aValue.doubleValue());\r\n                                                    })\r\n                                                    .limit(10)\r\n                                                    .forEach(entry -> {\r\n                                                        revenueTable.addCell(new PdfPCell(new Phrase(entry.getKey(), FontFactory.getFont(FontFactory.HELVETICA, 8))));\r\n                                                        Number value = (Number) entry.getValue();\r\n                                                        revenueTable.addCell(new PdfPCell(new Phrase(String.format(\"RM %.2f\", value.doubleValue()), FontFactory.getFont(FontFactory.HELVETICA, 8))));\r\n                                                    });\r\n                                                document.add(revenueTable);\r\n                                                document.add(new Paragraph(\" \"));\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                    \r\n                                    // 显示收入按状态分布\r\n                                    if (trends.containsKey(\"revenueByStatus\")) {\r\n                                        Object revenueByStatusObj = trends.get(\"revenueByStatus\");\r\n                                        if (revenueByStatusObj instanceof Map) {\r\n                                            @SuppressWarnings(\"unchecked\")\r\n                                            Map<String, Object> revenueByStatus = (Map<String, Object>) revenueByStatusObj;\r\n                                            if (!revenueByStatus.isEmpty()) {\r\n                                                document.add(new Paragraph(\"Revenue by Status:\", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));\r\n                                                PdfPTable statusTable = new PdfPTable(2);\r\n                                                statusTable.setWidthPercentage(100);\r\n                                                statusTable.addCell(new PdfPCell(new Phrase(\"Status\", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 8))));\r\n                                                statusTable.addCell(new PdfPCell(new Phrase(\"Revenue (RM)\", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 8))));\r\n                                                \r\n                                                revenueByStatus.forEach((status, revenue) -> {\r\n                                                    statusTable.addCell(new PdfPCell(new Phrase(status, FontFactory.getFont(FontFactory.HELVETICA, 8))));\r\n                                                    Number value = (Number) revenue;\r\n                                                    statusTable.addCell(new PdfPCell(new Phrase(String.format(\"RM %.2f\", value.doubleValue()), FontFactory.getFont(FontFactory.HELVETICA, 8))));\r\n                                                });\r\n                                                document.add(statusTable);\r\n                                                document.add(new Paragraph(\" \"));\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                } else {\r\n                                    document.add(new Paragraph(\"No trend data available for the selected period.\", FontFactory.getFont(FontFactory.HELVETICA, 10)));\r\n                                }\r\n                            } else {\r\n                                document.add(new Paragraph(\"No trend data available for the selected period.\", FontFactory.getFont(FontFactory.HELVETICA, 10)));\r\n                            }\r\n                            break;\r\n                        case \"Detailed Breakdown\":\r\n                            Object breakdownObj = content.get(\"breakdown\");\r\n                            if (breakdownObj instanceof Map) {\r\n                                @SuppressWarnings(\"unchecked\")\r\n                                Map<String, Object> breakdown = (Map<String, Object>) breakdownObj;\r\n                                if (!breakdown.isEmpty()) {\r\n                                    document.add(new Paragraph(\"Detailed Breakdown:\", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 12)));\r\n                                    \r\n                                    // 显示最高收入日\r\n                                    if (breakdown.containsKey(\"topRevenueDays\")) {\r\n                                        Object topRevenueDaysObj = breakdown.get(\"topRevenueDays\");\r\n                                        if (topRevenueDaysObj instanceof List) {\r\n                                            @SuppressWarnings(\"unchecked\")\r\n                                            List<Map<String, Object>> topRevenueDays = (List<Map<String, Object>>) topRevenueDaysObj;\r\n                                            if (!topRevenueDays.isEmpty()) {\r\n                                                document.add(new Paragraph(\"Top Revenue Days:\", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 10)));\r\n                                                PdfPTable revenueTable = new PdfPTable(2);\r\n                                                revenueTable.setWidthPercentage(100);\r\n                                                revenueTable.addCell(new PdfPCell(new Phrase(\"Date\", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));\r\n                                                revenueTable.addCell(new PdfPCell(new Phrase(\"Revenue (RM)\", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));\r\n                                                \r\n                                                topRevenueDays.forEach(day -> {\r\n                                                    revenueTable.addCell(new PdfPCell(new Phrase(String.valueOf(day.get(\"date\")), FontFactory.getFont(FontFactory.HELVETICA, 9))));\r\n                                                    Number revenue = (Number) day.get(\"revenue\");\r\n                                                    revenueTable.addCell(new PdfPCell(new Phrase(String.format(\"RM %.2f\", revenue.doubleValue()), FontFactory.getFont(FontFactory.HELVETICA, 9))));\r\n                                                });\r\n                                                document.add(revenueTable);\r\n                                                document.add(new Paragraph(\" \"));\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                    \r\n                                    // 显示最高预订日\r\n                                    if (breakdown.containsKey(\"topBookingDays\")) {\r\n                                        Object topBookingDaysObj = breakdown.get(\"topBookingDays\");\r\n                                        if (topBookingDaysObj instanceof List) {\r\n                                            @SuppressWarnings(\"unchecked\")\r\n                                            List<Map<String, Object>> topBookingDays = (List<Map<String, Object>>) topBookingDaysObj;\r\n                                            if (!topBookingDays.isEmpty()) {\r\n                                                document.add(new Paragraph(\"Top Booking Days:\", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 10)));\r\n                                                PdfPTable bookingTable = new PdfPTable(2);\r\n                                                bookingTable.setWidthPercentage(100);\r\n                                                bookingTable.addCell(new PdfPCell(new Phrase(\"Date\", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));\r\n                                                bookingTable.addCell(new PdfPCell(new Phrase(\"Bookings\", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));\r\n                                                \r\n                                                topBookingDays.forEach(day -> {\r\n                                                    bookingTable.addCell(new PdfPCell(new Phrase(String.valueOf(day.get(\"date\")), FontFactory.getFont(FontFactory.HELVETICA, 9))));\r\n                                                    Number bookings = (Number) day.get(\"bookings\");\r\n                                                    bookingTable.addCell(new PdfPCell(new Phrase(String.valueOf(bookings.longValue()), FontFactory.getFont(FontFactory.HELVETICA, 9))));\r\n                                                });\r\n                                                document.add(bookingTable);\r\n                                                document.add(new Paragraph(\" \"));\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                    \r\n                                    // 显示最活跃用户\r\n                                    if (breakdown.containsKey(\"topActiveUsers\")) {\r\n                                        Object topActiveUsersObj = breakdown.get(\"topActiveUsers\");\r\n                                        if (topActiveUsersObj instanceof List) {\r\n                                            @SuppressWarnings(\"unchecked\")\r\n                                            List<Map<String, Object>> topActiveUsers = (List<Map<String, Object>>) topActiveUsersObj;\r\n                                            if (!topActiveUsers.isEmpty()) {\r\n                                                document.add(new Paragraph(\"Top Active Users:\", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 10)));\r\n                                                PdfPTable userTable = new PdfPTable(2);\r\n                                                userTable.setWidthPercentage(100);\r\n                                                userTable.addCell(new PdfPCell(new Phrase(\"User\", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));\r\n                                                userTable.addCell(new PdfPCell(new Phrase(\"Bookings\", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));\r\n                                                \r\n                                                topActiveUsers.forEach(user -> {\r\n                                                    userTable.addCell(new PdfPCell(new Phrase(String.valueOf(user.get(\"user\")), FontFactory.getFont(FontFactory.HELVETICA, 9))));\r\n                                                    Number bookings = (Number) user.get(\"bookings\");\r\n                                                    userTable.addCell(new PdfPCell(new Phrase(String.valueOf(bookings.longValue()), FontFactory.getFont(FontFactory.HELVETICA, 9))));\r\n                                                });\r\n                                                document.add(userTable);\r\n                                                document.add(new Paragraph(\" \"));\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                    \r\n                                    // 显示按用户预订分布\r\n                                    if (breakdown.containsKey(\"bookingsPerUser\")) {\r\n                                        Object bookingsPerUserObj = breakdown.get(\"bookingsPerUser\");\r\n                                        if (bookingsPerUserObj instanceof Map) {\r\n                                            @SuppressWarnings(\"unchecked\")\r\n                                            Map<String, Object> bookingsPerUser = (Map<String, Object>) bookingsPerUserObj;\r\n                                            if (!bookingsPerUser.isEmpty()) {\r\n                                                document.add(new Paragraph(\"Bookings per User:\", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 10)));\r\n                                                PdfPTable userTable = new PdfPTable(2);\r\n                                                userTable.setWidthPercentage(100);\r\n                                                userTable.addCell(new PdfPCell(new Phrase(\"User\", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));\r\n                                                userTable.addCell(new PdfPCell(new Phrase(\"Total Bookings\", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));\r\n                                                \r\n                                                // 按预订数量排序并显示前10个用户\r\n                                                bookingsPerUser.entrySet().stream()\r\n                                                    .sorted((a, b) -> {\r\n                                                        Number aValue = (Number) a.getValue();\r\n                                                        Number bValue = (Number) b.getValue();\r\n                                                        return Long.compare(bValue.longValue(), aValue.longValue());\r\n                                                    })\r\n                                                    .limit(10)\r\n                                                    .forEach(entry -> {\r\n                                                        userTable.addCell(new PdfPCell(new Phrase(entry.getKey(), FontFactory.getFont(FontFactory.HELVETICA, 9))));\r\n                                                        Number value = (Number) entry.getValue();\r\n                                                        userTable.addCell(new PdfPCell(new Phrase(String.valueOf(value.longValue()), FontFactory.getFont(FontFactory.HELVETICA, 9))));\r\n                                                    });\r\n                                                document.add(userTable);\r\n                                                document.add(new Paragraph(\" \"));\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                } else {\r\n                                    document.add(new Paragraph(\"No detailed breakdown data available for the selected period.\", FontFactory.getFont(FontFactory.HELVETICA, 10)));\r\n                                }\r\n                            } else {\r\n                                document.add(new Paragraph(\"No detailed breakdown data available for the selected period.\", FontFactory.getFont(FontFactory.HELVETICA, 10)));\r\n                            }\r\n                            break;\r\n                        case \"Key Insights\":\r\n                            Object insightsObj = content.get(\"insights\");\r\n                            if (insightsObj instanceof List) {\r\n                                @SuppressWarnings(\"unchecked\")\r\n                                List<String> insights = (List<String>) insightsObj;\r\n                                if (!insights.isEmpty()) {\r\n                                    document.add(new Paragraph(\"Key Insights:\", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 12)));\r\n                                    for (String insight : insights) {\r\n                                        document.add(new Paragraph(\"- \" + insight, FontFactory.getFont(FontFactory.HELVETICA, 10)));\r\n                                    }\r\n                                } else {\r\n                                    document.add(new Paragraph(\"No insights available for the selected period.\", FontFactory.getFont(FontFactory.HELVETICA, 10)));\r\n                                }\r\n                            } else {\r\n                                document.add(new Paragraph(\"No insights available for the selected period.\", FontFactory.getFont(FontFactory.HELVETICA, 10)));\r\n                            }\r\n                            break;\r\n                        case \"Recommendations\":\r\n                            Object recsObj = content.get(\"recommendations\");\r\n                            if (recsObj instanceof List) {\r\n                                @SuppressWarnings(\"unchecked\")\r\n                                List<String> recs = (List<String>) recsObj;\r\n                                if (!recs.isEmpty()) {\r\n                                    document.add(new Paragraph(\"Recommendations:\", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 12)));\r\n                                    for (String rec : recs) {\r\n                                        document.add(new Paragraph(\"- \" + rec));\r\n                                    }\r\n                                }\r\n                            }\r\n                            break;\r\n                        // 其它 section ...\r\n                    }\r\n                }\r\n                document.add(new Paragraph(\" \"));\r\n            }\r\n        }\r\n\r\n        if (!hasContent) {\r\n            document.add(new Paragraph(\"No data available for the selected report parameters.\"));\r\n        }\r\n\r\n        // 添加数据附录\r\n        if (includeAppendix && content != null) {\r\n            document.add(new Paragraph(\" \"));\r\n            document.add(new Paragraph(\"Data Appendix\", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 14)));\r\n            document.add(new Paragraph(\"Raw Data Tables\", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 12)));\r\n            \r\n            // 添加原始收入数据\r\n            Object trendsObj = content.get(\"trends\");\r\n            if (trendsObj instanceof Map) {\r\n                @SuppressWarnings(\"unchecked\")\r\n                Map<String, Object> trends = (Map<String, Object>) trendsObj;\r\n                if (trends.containsKey(\"dailyRevenue\")) {\r\n                    Object dailyRevenueObj = trends.get(\"dailyRevenue\");\r\n                    if (dailyRevenueObj instanceof Map) {\r\n                        @SuppressWarnings(\"unchecked\")\r\n                        Map<String, Object> dailyRevenue = (Map<String, Object>) dailyRevenueObj;\r\n                        if (!dailyRevenue.isEmpty()) {\r\n                            document.add(new Paragraph(\"Complete Daily Revenue Data:\", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 10)));\r\n                            PdfPTable appendixTable = new PdfPTable(2);\r\n                            appendixTable.setWidthPercentage(100);\r\n                            appendixTable.addCell(new PdfPCell(new Phrase(\"Date\", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 8))));\r\n                            appendixTable.addCell(new PdfPCell(new Phrase(\"Revenue (RM)\", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 8))));\r\n                            \r\n                            dailyRevenue.forEach((date, revenue) -> {\r\n                                appendixTable.addCell(new PdfPCell(new Phrase(date, FontFactory.getFont(FontFactory.HELVETICA, 8))));\r\n                                Number value = (Number) revenue;\r\n                                appendixTable.addCell(new PdfPCell(new Phrase(String.format(\"RM %.2f\", value.doubleValue()), FontFactory.getFont(FontFactory.HELVETICA, 8))));\r\n                            });\r\n                            document.add(appendixTable);\r\n                            document.add(new Paragraph(\" \"));\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // 添加页脚\r\n        if (includeHeaderFooter) {\r\n            document.add(new Paragraph(\" \"));\r\n            document.add(new Paragraph(\"Generated by Picklefy Pickleball Club Management System\", FontFactory.getFont(FontFactory.HELVETICA, 8)));\r\n            document.add(new Paragraph(\"For internal use only\", FontFactory.getFont(FontFactory.HELVETICA, 8)));\r\n        }\r\n\r\n        document.close();\r\n        return out.toByteArray();\r\n    }\r\n\r\n    private double calcChangeRate(Number current, Number last) {\r\n        if (last == null || last.doubleValue() == 0) return 0;\r\n        return ((current.doubleValue() - last.doubleValue()) / last.doubleValue()) * 100.0;\r\n    }\r\n\r\n    public AdminUserDto convertToAdminUserDto(User user) {\r\n        AdminUserDto dto = new AdminUserDto();\r\n        dto.setId(user.getId());\r\n        dto.setName(user.getName());\r\n        dto.setEmail(user.getEmail());\r\n        dto.setPhone(user.getPhone());\r\n        dto.setDob(user.getDob());\r\n        dto.setGender(user.getGender());\r\n        dto.setUserType(user.getUserType());\r\n        dto.setCreatedAt(user.getCreatedAt());\r\n\r\n        UserAccount account = user.getUserAccount();\r\n        if (account != null) {\r\n            dto.setUsername(account.getUsername());\r\n            dto.setStatus(account.getStatus());\r\n            dto.setProfileImage(account.getProfileImage());\r\n        }\r\n\r\n        Member member = user.getMember();\r\n        if (member != null) {\r\n            dto.setPointBalance(member.getPointBalance());\r\n            if (member.getTier() != null) {\r\n                // 修复这里：直接使用 tierName 字符串值，不需要 .name()\r\n                dto.setTier(member.getTier().getTierName()); // 移除了 .name()\r\n            }\r\n        }\r\n        return dto;\r\n    }\r\n\r\n    public AdminBookingDto convertToAdminBookingDto(Booking booking) {\r\n        try {\r\n            AdminBookingDto dto = new AdminBookingDto();\r\n            dto.setId(booking.getId());\r\n            dto.setBookingDate(booking.getBookingDate());\r\n            dto.setTotalAmount(booking.getTotalAmount());\r\n            dto.setStatus(booking.getStatus());\r\n\r\n            // 安全地获取会员信息\r\n            try {\r\n                if (booking.getMember() != null && booking.getMember().getUser() != null) {\r\n                    dto.setMemberName(booking.getMember().getUser().getName());\r\n                    dto.setMemberPhone(booking.getMember().getUser().getPhone());\r\n                    dto.setMemberEmail(booking.getMember().getUser().getEmail());\r\n                    dto.setMemberId(booking.getMember().getId()); // 新增：设置会员ID\r\n                }\r\n            } catch (Exception e) {\r\n                System.err.println(\"Error getting member info for booking \" + booking.getId() + \": \" + e.getMessage());\r\n            }\r\n\r\n            // 安全地处理多 slot 预订\r\n            try {\r\n                if (booking.getBookingSlots() != null && !booking.getBookingSlots().isEmpty()) {\r\n                    System.out.println(\"AdminDashboardService: Booking \" + booking.getId() + \" has \" + booking.getBookingSlots().size() + \" slots\");\r\n                    \r\n                    // 按时间排序，过滤掉空的 slot\r\n                    List<BookingSlot> sortedSlots = booking.getBookingSlots().stream()\r\n                            .filter(bs -> bs != null && bs.getSlot() != null) // 过滤掉空的 slot\r\n                            .sorted((a, b) -> a.getSlot().getStartTime().compareTo(b.getSlot().getStartTime()))\r\n                            .collect(Collectors.toList());\r\n                    \r\n                    if (!sortedSlots.isEmpty()) {\r\n                        // 获取第一个和最后一个 slot\r\n                        Slot firstSlot = sortedSlots.get(0).getSlot();\r\n                        Slot lastSlot = sortedSlots.get(sortedSlots.size() - 1).getSlot();\r\n                        \r\n                        // 计算总时长\r\n                        int totalDuration = sortedSlots.stream()\r\n                                .mapToInt(bs -> bs.getSlot().getDurationHours() != null ? bs.getSlot().getDurationHours() : 1)\r\n                                .sum();\r\n                        \r\n                        dto.setSlotDate(firstSlot.getDate());\r\n                        dto.setStartTime(firstSlot.getStartTime());\r\n                        dto.setEndTime(lastSlot.getEndTime());\r\n                        dto.setDurationHours(totalDuration);\r\n\r\n                        // 获取场地信息\r\n                        try {\r\n                            Court court = courtRepository.findById(firstSlot.getCourtId()).orElse(null);\r\n                            if (court != null) {\r\n                                dto.setCourtName(court.getName());\r\n                            }\r\n                        } catch (Exception e) {\r\n                            System.err.println(\"Error getting court info for booking \" + booking.getId() + \": \" + e.getMessage());\r\n                        }\r\n\r\n                        // 设置所有 bookingSlots 信息（用于前端显示）\r\n                        dto.setBookingSlots(sortedSlots.stream()\r\n                                .map(bs -> {\r\n                                    com.pickleball_backend.pickleball.dto.BookingSlotDto slotDto = \r\n                                        new com.pickleball_backend.pickleball.dto.BookingSlotDto();\r\n                                    slotDto.setId(bs.getId());\r\n                                    slotDto.setStatus(bs.getStatus());\r\n                                    \r\n                                    // 设置slot信息\r\n                                    if (bs.getSlot() != null) {\r\n                                        com.pickleball_backend.pickleball.dto.SlotDto slotInfo = \r\n                                            new com.pickleball_backend.pickleball.dto.SlotDto();\r\n                                        slotInfo.setId(bs.getSlot().getId());\r\n                                        slotInfo.setDate(bs.getSlot().getDate());\r\n                                        slotInfo.setStartTime(bs.getSlot().getStartTime());\r\n                                        slotInfo.setEndTime(bs.getSlot().getEndTime());\r\n                                        slotInfo.setDurationHours(bs.getSlot().getDurationHours());\r\n                                        slotInfo.setCourtId(bs.getSlot().getCourtId());\r\n                                        slotInfo.setAvailable(bs.getSlot().isAvailable());\r\n                                        slotDto.setSlot(slotInfo);\r\n                                    }\r\n                                    \r\n                                    return slotDto;\r\n                                })\r\n                                .collect(Collectors.toList()));\r\n                    }\r\n                }\r\n            } catch (Exception e) {\r\n                System.err.println(\"Error processing booking slots for booking \" + booking.getId() + \": \" + e.getMessage());\r\n            }\r\n\r\n            return dto;\r\n        } catch (Exception e) {\r\n            System.err.println(\"Error converting booking to DTO: \" + e.getMessage());\r\n            return null;\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/AdminDashboardServiceImpl.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/AdminDashboardServiceImpl.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/AdminDashboardServiceImpl.java	(revision 89327e12854b108d004ebb020d0592b1c618ecaf)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/AdminDashboardServiceImpl.java	(date 1754078717544)
@@ -1109,7 +1109,8 @@
 
         Member member = user.getMember();
         if (member != null) {
-            dto.setPointBalance(member.getPointBalance());
+            dto.setTierPointBalance(member.getTierPointBalance());
+            dto.setRewardPointBalance(member.getRewardPointBalance());
             if (member.getTier() != null) {
                 // 修复这里：直接使用 tierName 字符串值，不需要 .name()
                 dto.setTier(member.getTier().getTierName()); // 移除了 .name()
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/CoachSlotDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.dto;\r\n\r\nimport java.time.LocalDateTime;\r\n\r\nimport lombok.*;\r\n\r\n@Getter\r\n@Setter\r\n@NoArgsConstructor\r\n@AllArgsConstructor\r\n@Data\r\npublic class CoachSlotDto {\r\n    private Integer courtId;\r\n    private LocalDateTime startTime;\r\n    private LocalDateTime endTime;\r\n    private Integer experienceYear;\r\n    private String title;\r\n    private String description;\r\n    private Integer maxParticipants;\r\n    private Double price;\r\n\r\n    // Getters and setters\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/CoachSlotDto.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/CoachSlotDto.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/CoachSlotDto.java	(revision 89327e12854b108d004ebb020d0592b1c618ecaf)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/CoachSlotDto.java	(date 1754264917582)
@@ -18,6 +18,7 @@
     private String description;
     private Integer maxParticipants;
     private Double price;
+    private Boolean allowReplacement;
 
     // Getters and setters
 }
\ No newline at end of file
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/UserAccount.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.entity;\r\n\r\nimport jakarta.persistence.*;\r\nimport lombok.*;\r\nimport java.time.LocalDateTime;\r\n\r\n@Entity\r\n@Data\r\n@Table(name = \"useraccount\")\r\npublic class UserAccount {\r\n\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Integer id;\r\n\r\n    private String username;\r\n    private String password;\r\n    private String status = \"ACTIVE\";\r\n    private int failedLoginAttempts = 0;\r\n    private LocalDateTime lockedUntil;\r\n    private LocalDateTime lastLogin;\r\n    private LocalDateTime passwordChangedAt = LocalDateTime.now();\r\n    private LocalDateTime createdAt = LocalDateTime.now();\r\n    private LocalDateTime updatedAt = LocalDateTime.now();\r\n    private String resetPasswordToken;\r\n    private LocalDateTime resetPasswordTokenExpiry;\r\n    @Column(name = \"profile_image\", length = 255, nullable = true)\r\n    private String profileImage;\r\n    private String theme = \"light\";\r\n    private boolean emailNotifications = true;\r\n    private boolean pushNotifications = true;\r\n    private boolean requireReauthForSensitiveActions = false;\r\n\r\n    // FIXED RELATIONSHIP: Changed to OneToOne\r\n    @OneToOne(fetch = FetchType.LAZY)\r\n    @JoinColumn(name = \"user_id\")\r\n    private User user;\r\n\r\n    public boolean isLocked() {\r\n        return lockedUntil != null && lockedUntil.isAfter(LocalDateTime.now());\r\n    }\r\n\r\n    public String getProfileImage() {\r\n        return profileImage;\r\n    }\r\n\r\n    public void setProfileImage(String profileImage) {\r\n        this.profileImage = profileImage;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/UserAccount.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/UserAccount.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/UserAccount.java	(revision 89327e12854b108d004ebb020d0592b1c618ecaf)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/UserAccount.java	(date 1754146591332)
@@ -5,7 +5,10 @@
 import java.time.LocalDateTime;
 
 @Entity
-@Data
+@Getter
+@Setter
+@NoArgsConstructor
+@AllArgsConstructor
 @Table(name = "useraccount")
 public class UserAccount {
 
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/EventRegistrationServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.service;\r\n\r\nimport com.pickleball_backend.pickleball.dto.EventRegistrationRequestDto;\r\nimport com.pickleball_backend.pickleball.dto.EventRegistrationResponseDto;\r\nimport com.pickleball_backend.pickleball.entity.*;\r\nimport com.pickleball_backend.pickleball.repository.*;\r\nimport jakarta.transaction.Transactional;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport java.time.LocalDateTime;\r\n\r\n@Service\r\npublic class EventRegistrationServiceImpl implements EventRegistrationService {\r\n\r\n    @Autowired\r\n    private RegistrationRepository registrationRepository;\r\n\r\n    @Autowired\r\n    private EventRegistrationRepository eventRegistrationRepository;\r\n\r\n    @Autowired\r\n    private UserAccountRepository userAccountRepository;\r\n\r\n    @Autowired\r\n    private EventRepository eventRepository;\r\n\r\n    @Autowired\r\n    private UserRepository userRepository;\r\n\r\n    @Autowired\r\n    private MemberRepository memberRepository;\r\n\r\n    @Autowired\r\n    private MembershipTierRepository membershipTierRepository;\r\n\r\n    @Autowired\r\n    private EmailService emailService;\r\n\r\n    @Override\r\n    @Transactional\r\n    public EventRegistrationResponseDto registerForEvent(EventRegistrationRequestDto request, String username) {\r\n        UserAccount userAccount = userAccountRepository.findByUsername(username)\r\n                .orElseThrow(() -> new RuntimeException(\"User not found\"));\r\n        User user = userAccount.getUser();\r\n\r\n        // FIX: Get member by USER ID instead of member ID\r\n        Member member = memberRepository.findByUserId(user.getId());\r\n\r\n        // Handle missing member record\r\n        if (member == null) {\r\n            // Create default tier if missing\r\n            MembershipTier defaultTier = membershipTierRepository.findByTierName(\"SILVER\");\r\n            if (defaultTier == null) {\r\n                defaultTier = new MembershipTier();\r\n                defaultTier.setTierName(\"SILVER\");\r\n                defaultTier.setMinPoints(0);\r\n                defaultTier.setMaxPoints(2000);\r\n                defaultTier.setBenefits(\"10% discount\");\r\n                defaultTier.setActive(true);\r\n                defaultTier = membershipTierRepository.save(defaultTier);\r\n            }\r\n\r\n            // Create new member record\r\n            member = new Member();\r\n            member.setUser(user);\r\n            member.setTier(defaultTier);\r\n            member.setPointBalance(0);  // Changed back to 0\r\n            member = memberRepository.save(member);\r\n        }\r\n\r\n        // 1. Create Registration and link to member\r\n        Registration registration = new Registration();\r\n        registration.setMember(member);\r\n        member.getRegistrations().add(registration);\r\n        registrationRepository.save(registration);\r\n\r\n        // 2. Fetch the event\r\n        Event event = eventRepository.findById(request.getEventId())\r\n                .orElseThrow(() -> new RuntimeException(\"Event not found\"));\r\n        Double feeAmount = event.getFeeAmount();\r\n\r\n        // 3. Create EventRegistration\r\n        EventRegistration eventRegistration = new EventRegistration();\r\n        eventRegistration.setRegistrationId(registration.getId());\r\n        eventRegistration.setEvent(event); // set the Event object\r\n        eventRegistration.setUser(user);   // set the User object\r\n        eventRegistration.setRegistrationDate(LocalDateTime.now());\r\n        eventRegistration.setPaymentStatus(\"PAID\");\r\n        eventRegistration.setFeeAmount(feeAmount);\r\n        eventRegistration.setStatus(\"REGISTERED\");\r\n        eventRegistrationRepository.save(eventRegistration);\r\n\r\n        // Update event's registered count\r\n        event.setRegisteredCount(event.getRegisteredCount() + 1);\r\n        eventRepository.save(event);\r\n\r\n        // Send confirmation email to the user\r\n        String userEmail = user.getEmail();\r\n        if (userEmail != null && !userEmail.isEmpty()) {\r\n            String subject = \"Event Registration Confirmation: \" + event.getTitle();\r\n            String content = String.format(\r\n                \"Dear %s,\\n\\nYou have successfully registered for the event \\\"%s\\\".\\n\\nDate: %s\\nLocation: %s\\n\\nThank you for registering!\\n\\nPickleball Team\",\r\n                user.getName(),\r\n                event.getTitle(),\r\n                event.getStartTime() != null ? event.getStartTime().toString() : \"N/A\",\r\n                event.getVenue() != null ? event.getVenue().getName() : \"N/A\"\r\n            );\r\n            emailService.sendEmail(userEmail, subject, content);\r\n        }\r\n\r\n        // 4. Build and return response\r\n        EventRegistrationResponseDto response = new EventRegistrationResponseDto();\r\n        response.setRegistrationId(eventRegistration.getRegistrationId());\r\n        response.setEventId(event.getId());\r\n        response.setUserId(user.getId());\r\n        response.setRegistrationDate(eventRegistration.getRegistrationDate());\r\n        response.setPaymentStatus(eventRegistration.getPaymentStatus());\r\n        response.setFeeAmount(eventRegistration.getFeeAmount());\r\n        response.setStatus(eventRegistration.getStatus());\r\n        return response;\r\n    }\r\n\r\n    @Override\r\n    public void cancelRegistration(Integer eventId, String username) {\r\n        UserAccount userAccount = userAccountRepository.findByUsername(username)\r\n                .orElseThrow(() -> new RuntimeException(\"User not found\"));\r\n\r\n        EventRegistration registration = eventRegistrationRepository.findByEvent_IdAndUser_Id(eventId, userAccount.getUser().getId())\r\n                .orElseThrow(() -> new RuntimeException(\"Registration not found\"));\r\n\r\n        registration.setStatus(\"CANCELLED\");\r\n        eventRegistrationRepository.save(registration);\r\n\r\n        // TODO: Send cancellation email here\r\n    }\r\n\r\n    @Override\r\n    public boolean isUserRegistered(Integer eventId, String username) {\r\n        System.out.println(\"Checking registration for user: \" + username + \", event: \" + eventId);\r\n        UserAccount userAccount = userAccountRepository.findByUsername(username)\r\n                .orElseThrow(() -> new RuntimeException(\"User not found\"));\r\n        return eventRegistrationRepository.findByEvent_IdAndUser_Id(eventId, userAccount.getUser().getId()).isPresent();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/EventRegistrationServiceImpl.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/EventRegistrationServiceImpl.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/EventRegistrationServiceImpl.java	(revision 89327e12854b108d004ebb020d0592b1c618ecaf)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/EventRegistrationServiceImpl.java	(date 1754078717542)
@@ -65,7 +65,8 @@
             member = new Member();
             member.setUser(user);
             member.setTier(defaultTier);
-            member.setPointBalance(0);  // Changed back to 0
+            member.setTierPointBalance(0);  // Initialize tier points
+            member.setRewardPointBalance(0); // Initialize reward points
             member = memberRepository.save(member);
         }
 
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/MemberDashboardDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.dto;\r\n\r\nimport java.util.List;\r\n\r\nimport lombok.AllArgsConstructor;\r\nimport lombok.Getter;\r\nimport lombok.NoArgsConstructor;\r\nimport lombok.Setter;\r\n\r\n@Getter\r\n@Setter\r\n@NoArgsConstructor\r\n@AllArgsConstructor\r\npublic class MemberDashboardDto {\r\n    private String tierName;\r\n    private int pointBalance;\r\n    private String benefits;\r\n    private List<VoucherDto> redeemableVouchers;\r\n    private int minPoints;  // Add this\r\n    private int maxPoints;  // Add this\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/MemberDashboardDto.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/MemberDashboardDto.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/MemberDashboardDto.java	(revision 89327e12854b108d004ebb020d0592b1c618ecaf)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/MemberDashboardDto.java	(date 1754077813607)
@@ -13,7 +13,8 @@
 @AllArgsConstructor
 public class MemberDashboardDto {
     private String tierName;
-    private int pointBalance;
+    private int tierPointBalance;
+    private int rewardPointBalance;
     private String benefits;
     private List<VoucherDto> redeemableVouchers;
     private int minPoints;  // Add this
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/WalletService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// WalletService.java\r\npackage com.pickleball_backend.pickleball.service;\r\n\r\nimport com.pickleball_backend.pickleball.dto.TopUpRequestDto;\r\nimport com.pickleball_backend.pickleball.dto.WalletTransactionDto;\r\nimport com.pickleball_backend.pickleball.entity.*;\r\nimport com.pickleball_backend.pickleball.exception.*;\r\nimport com.pickleball_backend.pickleball.repository.*;\r\nimport lombok.RequiredArgsConstructor;\r\nimport com.pickleball_backend.pickleball.exception.ResourceNotFoundException;\r\nimport org.hibernate.service.spi.ServiceException;\r\nimport org.springframework.dao.DataAccessException;\r\nimport org.springframework.data.domain.Page;\r\nimport org.springframework.data.domain.Pageable;\r\nimport org.springframework.security.core.context.SecurityContextHolder;\r\nimport org.springframework.stereotype.Service;\r\nimport org.springframework.transaction.annotation.Transactional;\r\n\r\nimport java.time.LocalDateTime;\r\nimport java.util.List;\r\nimport java.util.Optional;\r\nimport java.util.UUID;\r\nimport java.util.stream.Collectors;\r\nimport lombok.extern.slf4j.Slf4j;\r\n\r\n@Service\r\n@Slf4j\r\n@RequiredArgsConstructor\r\npublic class WalletService {\r\n\r\n    private final WalletRepository walletRepository;\r\n    private final WalletTransactionRepository walletTransactionRepository;\r\n    private final PaymentRepository paymentRepository;\r\n    private final UserAccountRepository userAccountRepository;\r\n    private final MemberRepository memberRepository;\r\n    private final EmailService emailService;\r\n\r\n    // Wallet balance limit (RM2000)\r\n    private static final double WALLET_LIMIT = 2000.00;\r\n    private static final double MIN_TOPUP_AMOUNT = 20.00;\r\n    private static final double MAX_TOPUP_AMOUNT = 2000.00;\r\n    private static final int PAYMENT_TIMEOUT_MINUTES = 30;\r\n\r\n    @Transactional\r\n    public Double topUpWallet(TopUpRequestDto request) {\r\n        // 1. Get authenticated user\r\n        String username = SecurityContextHolder.getContext().getAuthentication().getName();\r\n        UserAccount account = userAccountRepository.findByUsername(username)\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"User account not found\"));\r\n\r\n        // 2. Get member\r\n        Member member = memberRepository.findByUserId(account.getUser().getId());\r\n        if (member == null) {\r\n            throw new ResourceNotFoundException(\"Member not found\");\r\n        }\r\n\r\n        // 3. Get wallet (create if missing)\r\n        Wallet wallet = getOrCreateWallet(member);\r\n\r\n        // 4. Validate wallet status\r\n        if (!\"ACTIVE\".equals(wallet.getStatus())) {\r\n            throw new ValidationException(\"Wallet is not active. Status: \" + wallet.getStatus());\r\n        }\r\n\r\n        // 5. Validate amount\r\n        validateTopUpAmount(request.getAmount());\r\n\r\n        // 6. Check wallet limit\r\n        double newBalance = wallet.getBalance() + request.getAmount();\r\n        if (newBalance > WALLET_LIMIT) {\r\n            throw new ValidationException(\r\n                    \"Top-up exceeds maximum wallet balance allowed (RM\" + WALLET_LIMIT + \")\"\r\n            );\r\n        }\r\n\r\n        // 7. Create payment record first\r\n        Payment payment = createPaymentRecord(request, \"TOP_UP\");\r\n\r\n        try {\r\n            // 8. Process payment based on source\r\n            if (\"INTERNAL_CREDIT\".equals(request.getSource())) {\r\n                processInternalCreditPayment(member, request.getAmount());\r\n            } else {\r\n                // For external payments, we would integrate with payment gateway here\r\n                // For now, we'll simulate successful payment\r\n                simulateExternalPayment(payment);\r\n            }\r\n\r\n            // 9. Update wallet balance\r\n            double oldBalance = wallet.getBalance();\r\n        wallet.setBalance(newBalance);\r\n            wallet.setTotalDeposited(wallet.getTotalDeposited() + request.getAmount());\r\n        walletRepository.save(wallet);\r\n\r\n            // 10. Create transaction record\r\n            createWalletTransaction(wallet, \"DEPOSIT\", request.getAmount(), oldBalance, newBalance, \r\n                                  \"PAYMENT\", payment.getId(), \"Top-up via \" + request.getSource());\r\n\r\n            // 11. Update payment status\r\n        payment.setStatus(\"COMPLETED\");\r\n            payment.setProcessedAt(LocalDateTime.now());\r\n        paymentRepository.save(payment);\r\n\r\n            // 12. Send confirmation email\r\n        emailService.sendTopUpConfirmation(\r\n                account.getUser().getEmail(),\r\n                request.getAmount(),\r\n                newBalance,\r\n                request.getSource(),\r\n                payment.getTransactionId()\r\n        );\r\n\r\n            log.info(\"Top-up successful for user {}: RM{}\", username, request.getAmount());\r\n        return newBalance;\r\n\r\n        } catch (Exception e) {\r\n            // Rollback payment status\r\n            payment.setStatus(\"FAILED\");\r\n            payment.setFailureReason(e.getMessage());\r\n            paymentRepository.save(payment);\r\n            \r\n            log.error(\"Top-up failed for user {}: {}\", username, e.getMessage());\r\n            throw new ValidationException(\"Top-up failed: \" + e.getMessage());\r\n        }\r\n    }\r\n\r\n    @Transactional\r\n    public Double getWalletBalance(String username) {\r\n        log.info(\"Fetching wallet balance for user: {}\", username);\r\n\r\n        try {\r\n            UserAccount account = userAccountRepository.findByUsername(username)\r\n                    .orElseThrow(() -> {\r\n                        log.error(\"User account not found: {}\", username);\r\n                        return new ResourceNotFoundException(\"User account not found\");\r\n                    });\r\n\r\n            Member member = memberRepository.findByUserId(account.getUser().getId());\r\n            if (member == null) {\r\n                log.error(\"Member not found for user: {}\", username);\r\n                throw new ResourceNotFoundException(\"Member not found\");\r\n            }\r\n\r\n            Optional<Wallet> walletOpt = walletRepository.findByMemberId(member.getId());\r\n\r\n            if (walletOpt.isEmpty()) {\r\n                log.info(\"Creating new wallet for member: {}\", member.getId());\r\n                Wallet newWallet = new Wallet();\r\n                newWallet.setMember(member);\r\n                newWallet.setBalance(0.00);\r\n                newWallet.setTotalDeposited(0.00);\r\n\r\n                try {\r\n                    Wallet savedWallet = walletRepository.save(newWallet);\r\n                    log.info(\"Created new wallet with balance: {}\", savedWallet.getBalance());\r\n                    return savedWallet.getBalance();\r\n                } catch (DataAccessException e) {\r\n                    log.error(\"Failed to create wallet for member {}: {}\", member.getId(), e.getMessage());\r\n                    throw new ServiceException(\"Failed to create wallet\");\r\n                }\r\n            }\r\n\r\n            Wallet wallet = walletOpt.get();\r\n            log.info(\"Found existing wallet balance: {} for user: {}\", wallet.getBalance(), username);\r\n            return wallet.getBalance();\r\n\r\n        } catch (Exception e) {\r\n            log.error(\"Error fetching wallet balance for user {}: {}\", username, e.getMessage());\r\n            throw new ServiceException(\"Failed to fetch wallet balance\");\r\n        }\r\n    }\r\n\r\n    @Transactional\r\n    public WalletTransactionDto getWalletTransactions(String username, Pageable pageable) {\r\n        String currentUsername = SecurityContextHolder.getContext().getAuthentication().getName();\r\n        if (!username.equals(currentUsername)) {\r\n            throw new ValidationException(\"Unauthorized access to wallet transactions\");\r\n        }\r\n\r\n        UserAccount account = userAccountRepository.findByUsername(username)\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"User account not found\"));\r\n\r\n        Member member = memberRepository.findByUserId(account.getUser().getId());\r\n        if (member == null) {\r\n            throw new ResourceNotFoundException(\"Member not found\");\r\n        }\r\n\r\n        Wallet wallet = walletRepository.findByMemberId(member.getId())\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"Wallet not found\"));\r\n\r\n        Page<WalletTransaction> transactions = walletTransactionRepository\r\n                .findByWalletIdOrderByCreatedAtDesc(wallet.getId(), pageable);\r\n\r\n        return WalletTransactionDto.builder()\r\n                .walletId(wallet.getId())\r\n                .balance(wallet.getBalance())\r\n                .frozenBalance(wallet.getFrozenBalance())\r\n                .totalDeposited(wallet.getTotalDeposited())\r\n                .totalSpent(wallet.getTotalSpent())\r\n                .transactions(transactions.getContent().stream()\r\n                        .map(this::mapToTransactionDto)\r\n                        .collect(Collectors.toList()))\r\n                .totalElements(transactions.getTotalElements())\r\n                .totalPages(transactions.getTotalPages())\r\n                .build();\r\n    }\r\n\r\n    @Transactional\r\n    public void freezeBalance(Integer walletId, double amount, String referenceType, Integer referenceId, String description) {\r\n        Wallet wallet = walletRepository.findById(walletId)\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"Wallet not found\"));\r\n\r\n        if (wallet.getBalance() < amount) {\r\n            throw new InsufficientBalanceException(\"Insufficient balance to freeze\");\r\n        }\r\n\r\n        double oldBalance = wallet.getBalance();\r\n        double oldFrozen = wallet.getFrozenBalance();\r\n\r\n        wallet.setBalance(oldBalance - amount);\r\n        wallet.setFrozenBalance(oldFrozen + amount);\r\n        walletRepository.save(wallet);\r\n\r\n        createWalletTransaction(wallet, \"FREEZE\", amount, oldBalance, wallet.getBalance(), \r\n                              oldFrozen, wallet.getFrozenBalance(), referenceType, referenceId, description);\r\n\r\n        log.info(\"Frozen RM{} from wallet {}\", amount, walletId);\r\n    }\r\n\r\n    @Transactional\r\n    public void unfreezeBalance(Integer walletId, double amount, String referenceType, Integer referenceId, String description) {\r\n        Wallet wallet = walletRepository.findById(walletId)\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"Wallet not found\"));\r\n\r\n        if (wallet.getFrozenBalance() < amount) {\r\n            throw new ValidationException(\"Insufficient frozen balance to unfreeze\");\r\n        }\r\n\r\n        double oldBalance = wallet.getBalance();\r\n        double oldFrozen = wallet.getFrozenBalance();\r\n\r\n        wallet.setBalance(oldBalance + amount);\r\n        wallet.setFrozenBalance(oldFrozen - amount);\r\n        walletRepository.save(wallet);\r\n\r\n        createWalletTransaction(wallet, \"UNFREEZE\", amount, oldBalance, wallet.getBalance(), \r\n                              oldFrozen, wallet.getFrozenBalance(), referenceType, referenceId, description);\r\n\r\n        log.info(\"Unfrozen RM{} from wallet {}\", amount, walletId);\r\n    }\r\n\r\n    @Transactional\r\n    public void processRefund(Integer paymentId, double amount, String reason) {\r\n        Payment payment = paymentRepository.findById(paymentId)\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"Payment not found\"));\r\n\r\n        if (!\"COMPLETED\".equals(payment.getStatus())) {\r\n            throw new ValidationException(\"Payment is not completed\");\r\n        }\r\n\r\n        // Find the booking to get the wallet\r\n        Booking booking = payment.getBooking();\r\n        if (booking == null) {\r\n            throw new ValidationException(\"Payment is not associated with a booking\");\r\n        }\r\n\r\n        Member member = booking.getMember();\r\n        Wallet wallet = walletRepository.findByMemberId(member.getId())\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"Wallet not found\"));\r\n\r\n        double oldBalance = wallet.getBalance();\r\n        wallet.setBalance(oldBalance + amount);\r\n        wallet.setTotalSpent(wallet.getTotalSpent() - amount);\r\n        walletRepository.save(wallet);\r\n\r\n        // Create refund payment record\r\n        Payment refundPayment = new Payment();\r\n        refundPayment.setAmount(amount);\r\n        refundPayment.setPaymentType(\"REFUND\");\r\n        refundPayment.setPaymentMethod(\"WALLET_REFUND\");\r\n        refundPayment.setStatus(\"COMPLETED\");\r\n        refundPayment.setTransactionId(\"REF-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase());\r\n        refundPayment.setReferenceId(payment.getTransactionId());\r\n        refundPayment.setProcessedAt(LocalDateTime.now());\r\n        paymentRepository.save(refundPayment);\r\n\r\n        // Create transaction record\r\n        createWalletTransaction(wallet, \"REFUND\", amount, oldBalance, wallet.getBalance(), \r\n                              \"PAYMENT\", refundPayment.getId(), \"Refund: \" + reason);\r\n\r\n        // Update original payment\r\n        payment.setStatus(\"REFUNDED\");\r\n        payment.setRefundDate(LocalDateTime.now());\r\n        paymentRepository.save(payment);\r\n\r\n        log.info(\"Refund processed: RM{} for payment {}\", amount, paymentId);\r\n    }\r\n\r\n    // Helper methods\r\n    private Wallet getOrCreateWallet(Member member) {\r\n        return walletRepository.findByMemberId(member.getId())\r\n                .orElseGet(() -> {\r\n                    Wallet newWallet = new Wallet();\r\n                    newWallet.setMember(member);\r\n                    newWallet.setBalance(0.00);\r\n                    newWallet.setTotalDeposited(0.00);\r\n                    return walletRepository.save(newWallet);\r\n                });\r\n    }\r\n\r\n    private void validateTopUpAmount(double amount) {\r\n        if (amount < MIN_TOPUP_AMOUNT) {\r\n            throw new ValidationException(\"Minimum top-up amount is RM\" + MIN_TOPUP_AMOUNT);\r\n        }\r\n        if (amount > MAX_TOPUP_AMOUNT) {\r\n            throw new ValidationException(\"Maximum top-up amount is RM\" + MAX_TOPUP_AMOUNT);\r\n        }\r\n    }\r\n\r\n    private Payment createPaymentRecord(TopUpRequestDto request, String paymentType) {\r\n        Payment payment = new Payment();\r\n        payment.setAmount(request.getAmount());\r\n        payment.setPaymentType(paymentType);\r\n        payment.setPaymentMethod(request.getSource());\r\n        payment.setStatus(\"PENDING\");\r\n        payment.setTransactionId(\"TX-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase());\r\n        payment.setExpiresAt(LocalDateTime.now().plusMinutes(PAYMENT_TIMEOUT_MINUTES));\r\n        return paymentRepository.save(payment);\r\n    }\r\n\r\n    private void processInternalCreditPayment(Member member, double amount) {\r\n        int pointsToDeduct = (int) Math.round(amount);\r\n        if (member.getPointBalance() < pointsToDeduct) {\r\n            throw new ValidationException(\r\n                    \"Insufficient internal credit. Available: \" + member.getPointBalance()\r\n            );\r\n        }\r\n        member.setPointBalance(member.getPointBalance() - pointsToDeduct);\r\n        memberRepository.save(member);\r\n    }\r\n\r\n    private void simulateExternalPayment(Payment payment) {\r\n        // In a real implementation, this would integrate with payment gateway\r\n        // For now, we'll simulate a successful payment\r\n        log.info(\"Simulating external payment for transaction: {}\", payment.getTransactionId());\r\n    }\r\n\r\n    private void createWalletTransaction(Wallet wallet, String transactionType, double amount, \r\n                                       double balanceBefore, double balanceAfter, \r\n                                       String referenceType, Integer referenceId, String description) {\r\n        WalletTransaction transaction = new WalletTransaction();\r\n        transaction.setWalletId(wallet.getId());\r\n        transaction.setTransactionType(transactionType);\r\n        transaction.setAmount(amount);\r\n        transaction.setBalanceBefore(balanceBefore);\r\n        transaction.setBalanceAfter(balanceAfter);\r\n        transaction.setFrozenBefore(wallet.getFrozenBalance());\r\n        transaction.setFrozenAfter(wallet.getFrozenBalance());\r\n        transaction.setReferenceType(referenceType);\r\n        transaction.setReferenceId(referenceId);\r\n        transaction.setDescription(description);\r\n        transaction.setStatus(\"COMPLETED\");\r\n        transaction.setProcessedAt(LocalDateTime.now());\r\n        \r\n        walletTransactionRepository.save(transaction);\r\n    }\r\n\r\n    private void createWalletTransaction(Wallet wallet, String transactionType, double amount, \r\n                                       double balanceBefore, double balanceAfter, \r\n                                       double frozenBefore, double frozenAfter,\r\n                                       String referenceType, Integer referenceId, String description) {\r\n        WalletTransaction transaction = new WalletTransaction();\r\n        transaction.setWalletId(wallet.getId());\r\n        transaction.setTransactionType(transactionType);\r\n        transaction.setAmount(amount);\r\n        transaction.setBalanceBefore(balanceBefore);\r\n        transaction.setBalanceAfter(balanceAfter);\r\n        transaction.setFrozenBefore(frozenBefore);\r\n        transaction.setFrozenAfter(frozenAfter);\r\n        transaction.setReferenceType(referenceType);\r\n        transaction.setReferenceId(referenceId);\r\n        transaction.setDescription(description);\r\n        transaction.setStatus(\"COMPLETED\");\r\n        transaction.setProcessedAt(LocalDateTime.now());\r\n        \r\n        walletTransactionRepository.save(transaction);\r\n    }\r\n\r\n    private com.pickleball_backend.pickleball.dto.WalletTransactionDto.TransactionDto mapToTransactionDto(WalletTransaction transaction) {\r\n        return com.pickleball_backend.pickleball.dto.WalletTransactionDto.TransactionDto.builder()\r\n                .id(transaction.getId())\r\n                .transactionType(transaction.getTransactionType())\r\n                .amount(transaction.getAmount())\r\n                .balanceBefore(transaction.getBalanceBefore())\r\n                .balanceAfter(transaction.getBalanceAfter())\r\n                .frozenBefore(transaction.getFrozenBefore())\r\n                .frozenAfter(transaction.getFrozenAfter())\r\n                .referenceType(transaction.getReferenceType())\r\n                .referenceId(transaction.getReferenceId())\r\n                .description(transaction.getDescription())\r\n                .status(transaction.getStatus())\r\n                .createdAt(transaction.getCreatedAt())\r\n                .processedAt(transaction.getProcessedAt())\r\n                .build();\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/WalletService.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/WalletService.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/WalletService.java	(revision 89327e12854b108d004ebb020d0592b1c618ecaf)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/WalletService.java	(date 1754078717540)
@@ -330,12 +330,12 @@
 
     private void processInternalCreditPayment(Member member, double amount) {
         int pointsToDeduct = (int) Math.round(amount);
-        if (member.getPointBalance() < pointsToDeduct) {
+        if (member.getRewardPointBalance() < pointsToDeduct) {
             throw new ValidationException(
-                    "Insufficient internal credit. Available: " + member.getPointBalance()
+                    "Insufficient reward points. Available: " + member.getRewardPointBalance()
             );
         }
-        member.setPointBalance(member.getPointBalance() - pointsToDeduct);
+        member.setRewardPointBalance(member.getRewardPointBalance() - pointsToDeduct);
         memberRepository.save(member);
     }
 
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/LeaveRequestService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.service;\r\n\r\nimport com.pickleball_backend.pickleball.dto.LeaveRequestDto;\r\nimport com.pickleball_backend.pickleball.entity.LeaveRequest;\r\nimport com.pickleball_backend.pickleball.entity.User;\r\nimport com.pickleball_backend.pickleball.entity.ClassSession;\r\nimport com.pickleball_backend.pickleball.entity.ClassRegistration;\r\nimport com.pickleball_backend.pickleball.entity.Member;\r\nimport com.pickleball_backend.pickleball.repository.LeaveRequestRepository;\r\nimport com.pickleball_backend.pickleball.repository.UserRepository;\r\nimport com.pickleball_backend.pickleball.repository.ClassSessionRepository;\r\nimport com.pickleball_backend.pickleball.repository.ClassRegistrationRepository;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.stereotype.Service;\r\nimport org.springframework.transaction.annotation.Transactional;\r\n\r\nimport java.time.LocalDateTime;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.HashMap;\r\nimport java.util.stream.Collectors;\r\n\r\n@Service\r\npublic class LeaveRequestService {\r\n    \r\n    @Autowired\r\n    private LeaveRequestRepository leaveRequestRepository;\r\n    \r\n    @Autowired\r\n    private UserRepository userRepository;\r\n    \r\n    @Autowired\r\n    private ClassSessionRepository classSessionRepository;\r\n    \r\n    @Autowired\r\n    private ClassRegistrationRepository classRegistrationRepository;\r\n    \r\n    // 創建補課請求\r\n    @Transactional\r\n    public LeaveRequestDto createLeaveRequest(Integer studentId, Integer coachId, Integer sessionId, \r\n                                            LocalDateTime preferredDate, String reason, String requestType) {\r\n        User student = userRepository.findById(studentId)\r\n                .orElseThrow(() -> new IllegalArgumentException(\"Student not found\"));\r\n        User coach = userRepository.findById(coachId)\r\n                .orElseThrow(() -> new IllegalArgumentException(\"Coach not found\"));\r\n        ClassSession session = classSessionRepository.findById(sessionId)\r\n                .orElseThrow(() -> new IllegalArgumentException(\"Session not found\"));\r\n        \r\n        LeaveRequest leaveRequest = new LeaveRequest();\r\n        leaveRequest.setStudent(student);\r\n        leaveRequest.setCoach(coach);\r\n        leaveRequest.setOriginalSession(session);\r\n        leaveRequest.setOriginalDate(session.getStartTime());\r\n        leaveRequest.setPreferredDate(preferredDate);\r\n        leaveRequest.setReason(reason);\r\n        \r\n        // 根據請求類型設置狀態\r\n        if (\"SELF_SELECT\".equals(requestType)) {\r\n            leaveRequest.setStatus(LeaveRequest.LeaveRequestStatus.SELF_SELECTED);\r\n        } else if (\"MESSAGE_COACH\".equals(requestType)) {\r\n            leaveRequest.setStatus(LeaveRequest.LeaveRequestStatus.MESSAGE_SENT);\r\n        } else if (\"PENDING\".equals(requestType)) {\r\n            leaveRequest.setStatus(LeaveRequest.LeaveRequestStatus.PENDING);\r\n        } else {\r\n            // 默認創建草稿狀態\r\n            leaveRequest.setStatus(LeaveRequest.LeaveRequestStatus.DRAFT);\r\n        }\r\n        \r\n        LeaveRequest saved = leaveRequestRepository.save(leaveRequest);\r\n        return convertToDto(saved);\r\n    }\r\n    \r\n    // 獲取教練的待處理請求\r\n    public List<LeaveRequestDto> getPendingRequestsByCoach(Integer coachId) {\r\n        System.out.println(\"=== Service: getPendingRequestsByCoach ===\");\r\n        System.out.println(\"coachId: \" + coachId);\r\n        List<LeaveRequest> requests = leaveRequestRepository.findPendingRequestsByCoachId(coachId);\r\n        System.out.println(\"Repository returned \" + requests.size() + \" requests\");\r\n        for (LeaveRequest request : requests) {\r\n            System.out.println(\"Raw request - ID: \" + request.getId() + \", Status: \" + request.getStatus() + \", Student: \" + (request.getStudent() != null ? request.getStudent().getName() : \"null\"));\r\n        }\r\n        List<LeaveRequestDto> dtos = requests.stream().map(this::convertToDto).collect(Collectors.toList());\r\n        System.out.println(\"Converted to \" + dtos.size() + \" DTOs\");\r\n        return dtos;\r\n    }\r\n    \r\n    // 獲取教練的所有請求\r\n    public List<LeaveRequestDto> getAllRequestsByCoach(Integer coachId) {\r\n        List<LeaveRequest> requests = leaveRequestRepository.findAllRequestsByCoachId(coachId);\r\n        return requests.stream().map(this::convertToDto).collect(Collectors.toList());\r\n    }\r\n    \r\n    // 獲取學生的所有請求\r\n    public List<LeaveRequestDto> getAllRequestsByStudent(Integer studentId) {\r\n        List<LeaveRequest> requests = leaveRequestRepository.findAllRequestsByStudentId(studentId);\r\n        return requests.stream().map(this::convertToDto).collect(Collectors.toList());\r\n    }\r\n    \r\n    // 更新請假請求狀態\r\n    @Transactional\r\n    public LeaveRequestDto updateLeaveRequest(Integer requestId, String status, LocalDateTime preferredDate) {\r\n        LeaveRequest request = leaveRequestRepository.findById(requestId)\r\n                .orElseThrow(() -> new IllegalArgumentException(\"Leave request not found\"));\r\n        \r\n        // 更新狀態\r\n        if (\"DRAFT\".equals(status)) {\r\n            request.setStatus(LeaveRequest.LeaveRequestStatus.DRAFT);\r\n        } else if (\"PENDING\".equals(status)) {\r\n            request.setStatus(LeaveRequest.LeaveRequestStatus.PENDING);\r\n        } else if (\"SELF_SELECTED\".equals(status)) {\r\n            request.setStatus(LeaveRequest.LeaveRequestStatus.SELF_SELECTED);\r\n        } else if (\"MESSAGE_SENT\".equals(status)) {\r\n            request.setStatus(LeaveRequest.LeaveRequestStatus.MESSAGE_SENT);\r\n        } else if (\"APPROVED\".equals(status)) {\r\n            request.setStatus(LeaveRequest.LeaveRequestStatus.APPROVED);\r\n        } else if (\"DECLINED\".equals(status)) {\r\n            request.setStatus(LeaveRequest.LeaveRequestStatus.DECLINED);\r\n        }\r\n        \r\n        // 更新偏好日期\r\n        if (preferredDate != null) {\r\n            request.setPreferredDate(preferredDate);\r\n        }\r\n        \r\n        LeaveRequest saved = leaveRequestRepository.save(request);\r\n        return convertToDto(saved);\r\n    }\r\n    \r\n    // 批准請求並安排補課\r\n    @Transactional\r\n    public LeaveRequestDto approveRequest(Integer requestId, Integer replacementSessionId, String coachNotes) {\r\n        LeaveRequest request = leaveRequestRepository.findById(requestId)\r\n                .orElseThrow(() -> new IllegalArgumentException(\"Leave request not found\"));\r\n        \r\n        ClassSession replacementSession = null;\r\n        if (replacementSessionId != null) {\r\n            replacementSession = classSessionRepository.findById(replacementSessionId)\r\n                    .orElseThrow(() -> new IllegalArgumentException(\"Replacement session not found\"));\r\n            \r\n            // 自動將學生註冊到補課課程\r\n            User student = userRepository.findById(request.getStudent().getId())\r\n                    .orElseThrow(() -> new IllegalArgumentException(\"Student not found\"));\r\n            \r\n            // 獲取學生的 Member 對象\r\n            Member studentMember = student.getMember();\r\n            if (studentMember == null) {\r\n                throw new IllegalArgumentException(\"Student member not found\");\r\n            }\r\n            \r\n            // 檢查學生是否已經註冊到這個課程\r\n            boolean alreadyRegistered = classRegistrationRepository.existsByClassSessionAndMemberUserId(\r\n                replacementSession, student.getId());\r\n            \r\n            if (!alreadyRegistered) {\r\n                // 創建新的註冊記錄\r\n                ClassRegistration registration = new ClassRegistration();\r\n                registration.setClassSession(replacementSession);\r\n                registration.setMember(studentMember);\r\n                registration.setRegistrationDate(LocalDateTime.now());\r\n                registration.setAttendanceStatus(\"PRESENT\"); // 補課課程預設為出席\r\n                \r\n                classRegistrationRepository.save(registration);\r\n                System.out.println(\"Student \" + student.getId() + \" automatically registered for replacement session \" + replacementSessionId);\r\n            } else {\r\n                System.out.println(\"Student \" + student.getId() + \" already registered for replacement session \" + replacementSessionId);\r\n            }\r\n        }\r\n        \r\n        request.setStatus(LeaveRequest.LeaveRequestStatus.APPROVED);\r\n        request.setReplacementSession(replacementSession);\r\n        request.setCoachNotes(coachNotes);\r\n        request.setResolvedDate(LocalDateTime.now());\r\n        \r\n        LeaveRequest saved = leaveRequestRepository.save(request);\r\n        return convertToDto(saved);\r\n    }\r\n    \r\n    // 拒絕請求\r\n    @Transactional\r\n    public LeaveRequestDto declineRequest(Integer requestId, String coachNotes) {\r\n        LeaveRequest request = leaveRequestRepository.findById(requestId)\r\n                .orElseThrow(() -> new IllegalArgumentException(\"Leave request not found\"));\r\n        \r\n        request.setStatus(LeaveRequest.LeaveRequestStatus.DECLINED);\r\n        request.setCoachNotes(coachNotes);\r\n        request.setResolvedDate(LocalDateTime.now());\r\n        \r\n        LeaveRequest saved = leaveRequestRepository.save(request);\r\n        return convertToDto(saved);\r\n    }\r\n    \r\n    // 統計教練的待處理請求數量\r\n    public long getPendingRequestCount(Integer coachId) {\r\n        return leaveRequestRepository.countPendingRequestsByCoachId(coachId);\r\n    }\r\n    \r\n    // 獲取可用的補課時間（排除已預約的課程）\r\n    public List<Map<String, Object>> getAvailableReplacementSessions(Integer coachId, Integer studentId) {\r\n        System.out.println(\"=== getAvailableReplacementSessions called ===\");\r\n        System.out.println(\"coachId: \" + coachId + \", studentId: \" + studentId);\r\n        \r\n        // 獲取教練的所有課程（不限時間範圍）\r\n        List<ClassSession> allCoachSessions = classSessionRepository.findAll();\r\n        System.out.println(\"Total sessions in database: \" + allCoachSessions.size());\r\n        \r\n        // 過濾該教練的課程\r\n        List<ClassSession> coachSessions = allCoachSessions.stream()\r\n                .filter(session -> session.getCoach() != null && \r\n                                 session.getCoach().getId().equals(coachId))\r\n                .collect(Collectors.toList());\r\n        System.out.println(\"Coach sessions found: \" + coachSessions.size());\r\n        \r\n        // 過濾出 AVAILABLE 狀態的課程\r\n        List<ClassSession> availableSessions = coachSessions.stream()\r\n                .filter(session -> \"AVAILABLE\".equals(session.getStatus()))\r\n                .collect(Collectors.toList());\r\n        System.out.println(\"Available sessions found: \" + availableSessions.size());\r\n        \r\n        // 獲取學生已預約的課程\r\n        List<ClassRegistration> studentRegistrations = classRegistrationRepository.findByMemberUserId(studentId);\r\n        List<Integer> studentBookedSessionIds = studentRegistrations.stream()\r\n                .map(reg -> reg.getClassSession().getId())\r\n                .collect(Collectors.toList());\r\n        System.out.println(\"Student booked session IDs: \" + studentBookedSessionIds);\r\n        \r\n        // 過濾掉學生已預約的課程\r\n        List<ClassSession> filteredSessions = availableSessions.stream()\r\n                .filter(session -> !studentBookedSessionIds.contains(session.getId()))\r\n                .collect(Collectors.toList());\r\n        System.out.println(\"After filtering user bookings, remaining sessions: \" + filteredSessions.size());\r\n        \r\n        // 轉換為 Map 格式\r\n        return filteredSessions.stream().map(session -> {\r\n            Map<String, Object> sessionMap = new HashMap<>();\r\n            sessionMap.put(\"id\", session.getId());\r\n            sessionMap.put(\"title\", session.getTitle());\r\n            sessionMap.put(\"startTime\", session.getStartTime());\r\n            sessionMap.put(\"endTime\", session.getEndTime());\r\n            sessionMap.put(\"maxParticipants\", session.getMaxParticipants());\r\n            \r\n            if (session.getCourt() != null) {\r\n                sessionMap.put(\"courtName\", session.getCourt().getName());\r\n                if (session.getCourt().getVenue() != null) {\r\n                    sessionMap.put(\"venueName\", session.getCourt().getVenue().getName());\r\n                    sessionMap.put(\"state\", session.getCourt().getVenue().getState());\r\n                }\r\n            }\r\n            \r\n            return sessionMap;\r\n        }).collect(Collectors.toList());\r\n    }\r\n    \r\n    // 轉換為 DTO\r\n    private LeaveRequestDto convertToDto(LeaveRequest request) {\r\n        LeaveRequestDto dto = new LeaveRequestDto();\r\n        dto.setId(request.getId());\r\n        dto.setStudentId(request.getStudent().getId());\r\n        dto.setStudentName(request.getStudent().getName());\r\n        dto.setStudentEmail(request.getStudent().getEmail());\r\n        dto.setCoachId(request.getCoach().getId());\r\n        dto.setCoachName(request.getCoach().getName());\r\n        dto.setOriginalSessionId(request.getOriginalSession().getId());\r\n        dto.setOriginalSessionTitle(request.getOriginalSession().getTitle());\r\n        dto.setOriginalDate(request.getOriginalDate());\r\n        dto.setPreferredDate(request.getPreferredDate());\r\n        dto.setOriginalSessionStartTime(request.getOriginalSession().getStartTime());\r\n        dto.setOriginalSessionEndTime(request.getOriginalSession().getEndTime());\r\n        \r\n        // 調試信息\r\n        System.out.println(\"=== convertToDto Debug ===\");\r\n        System.out.println(\"Request ID: \" + request.getId());\r\n        System.out.println(\"Original Session ID: \" + request.getOriginalSession().getId());\r\n        System.out.println(\"Original Session Start: \" + request.getOriginalSession().getStartTime());\r\n        System.out.println(\"Original Session End: \" + request.getOriginalSession().getEndTime());\r\n        if (request.getOriginalSession().getStartTime() != null && request.getOriginalSession().getEndTime() != null) {\r\n            long durationHours = java.time.Duration.between(\r\n                request.getOriginalSession().getStartTime(), \r\n                request.getOriginalSession().getEndTime()\r\n            ).toHours();\r\n            long durationMinutes = java.time.Duration.between(\r\n                request.getOriginalSession().getStartTime(), \r\n                request.getOriginalSession().getEndTime()\r\n            ).toMinutes() % 60;\r\n            System.out.println(\"Calculated duration: \" + durationHours + \" hours \" + durationMinutes + \" minutes\");\r\n        } else {\r\n            System.out.println(\"WARNING: Start time or end time is null!\");\r\n        }\r\n        dto.setReason(request.getReason());\r\n        dto.setStatus(request.getStatus());\r\n        dto.setRequestDate(request.getRequestDate());\r\n        dto.setCoachNotes(request.getCoachNotes());\r\n        \r\n        if (request.getReplacementSession() != null) {\r\n            dto.setReplacementSessionId(request.getReplacementSession().getId());\r\n            dto.setReplacementSessionTitle(request.getReplacementSession().getTitle());\r\n        }\r\n        \r\n        dto.setResolvedDate(request.getResolvedDate());\r\n        \r\n        // 設置場地信息\r\n        if (request.getOriginalSession().getCourt() != null) {\r\n            dto.setCourt(request.getOriginalSession().getCourt().getName());\r\n            if (request.getOriginalSession().getCourt().getVenue() != null) {\r\n                dto.setVenue(request.getOriginalSession().getCourt().getVenue().getName());\r\n                dto.setState(request.getOriginalSession().getCourt().getVenue().getState());\r\n            }\r\n        }\r\n        \r\n        return dto;\r\n    }\r\n} 
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/LeaveRequestService.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/LeaveRequestService.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/LeaveRequestService.java	(revision 89327e12854b108d004ebb020d0592b1c618ecaf)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/LeaveRequestService.java	(date 1754314493470)
@@ -137,6 +137,20 @@
             replacementSession = classSessionRepository.findById(replacementSessionId)
                     .orElseThrow(() -> new IllegalArgumentException("Replacement session not found"));
             
+            // 設置補課課程的 replacementForSessionId
+            System.out.println("=== Setting replacementForSessionId ===");
+            System.out.println("Original session ID: " + request.getOriginalSession().getId());
+            System.out.println("Replacement session ID: " + replacementSessionId);
+            System.out.println("Before setting - replacementForSessionId: " + replacementSession.getReplacementForSessionId());
+            
+            replacementSession.setReplacementForSessionId(request.getOriginalSession().getId());
+            classSessionRepository.save(replacementSession);
+            
+            // 重新获取并验证
+            ClassSession savedSession = classSessionRepository.findById(replacementSessionId).orElse(null);
+            System.out.println("After saving - replacementForSessionId: " + (savedSession != null ? savedSession.getReplacementForSessionId() : "null"));
+            System.out.println("Set replacementForSessionId: " + request.getOriginalSession().getId() + " for session: " + replacementSessionId);
+            
             // 自動將學生註冊到補課課程
             User student = userRepository.findById(request.getStudent().getId())
                     .orElseThrow(() -> new IllegalArgumentException("Student not found"));
@@ -157,7 +171,7 @@
                 registration.setClassSession(replacementSession);
                 registration.setMember(studentMember);
                 registration.setRegistrationDate(LocalDateTime.now());
-                registration.setAttendanceStatus("PRESENT"); // 補課課程預設為出席
+                registration.setAttendanceStatus("MAKEUP"); // 補課課程標記為 MAKEUP
                 
                 classRegistrationRepository.save(registration);
                 System.out.println("Student " + student.getId() + " automatically registered for replacement session " + replacementSessionId);
@@ -210,11 +224,12 @@
                 .collect(Collectors.toList());
         System.out.println("Coach sessions found: " + coachSessions.size());
         
-        // 過濾出 AVAILABLE 狀態的課程
+        // 過濾出 AVAILABLE 狀態且允許補課的課程
         List<ClassSession> availableSessions = coachSessions.stream()
-                .filter(session -> "AVAILABLE".equals(session.getStatus()))
+                .filter(session -> "AVAILABLE".equals(session.getStatus()) && 
+                                 Boolean.TRUE.equals(session.getAllowReplacement()))
                 .collect(Collectors.toList());
-        System.out.println("Available sessions found: " + availableSessions.size());
+        System.out.println("Available replacement sessions found: " + availableSessions.size());
         
         // 獲取學生已預約的課程
         List<ClassRegistration> studentRegistrations = classRegistrationRepository.findByMemberUserId(studentId);
@@ -237,6 +252,8 @@
             sessionMap.put("startTime", session.getStartTime());
             sessionMap.put("endTime", session.getEndTime());
             sessionMap.put("maxParticipants", session.getMaxParticipants());
+            sessionMap.put("currentParticipants", session.getCurrentParticipants());
+            sessionMap.put("allowReplacement", session.getAllowReplacement());
             
             if (session.getCourt() != null) {
                 sessionMap.put("courtName", session.getCourt().getName());
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/TierServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.service;\r\n\r\nimport com.pickleball_backend.pickleball.dto.TierDto;\r\nimport com.pickleball_backend.pickleball.dto.VoucherDto;\r\nimport com.pickleball_backend.pickleball.entity.MembershipTier;\r\nimport com.pickleball_backend.pickleball.entity.Voucher;\r\nimport com.pickleball_backend.pickleball.entity.Member;\r\nimport com.pickleball_backend.pickleball.exception.ResourceNotFoundException;\r\nimport com.pickleball_backend.pickleball.exception.ValidationException;\r\nimport com.pickleball_backend.pickleball.repository.MemberRepository;\r\nimport com.pickleball_backend.pickleball.repository.MembershipTierRepository;\r\nimport com.pickleball_backend.pickleball.repository.VoucherRepository;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.hibernate.service.spi.ServiceException;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.springframework.stereotype.Service;\r\nimport org.springframework.transaction.annotation.Transactional;\r\nimport java.util.List;\r\n\r\n@Service\r\n@RequiredArgsConstructor\r\npublic class TierServiceImpl implements TierService {\r\n\r\n    private static final Logger logger = LoggerFactory.getLogger(TierServiceImpl.class);\r\n    private final MembershipTierRepository tierRepository;\r\n    private final VoucherRepository voucherRepository;\r\n    private final MemberRepository memberRepository;\r\n    private final EmailService emailService; // Added for email notifications\r\n\r\n    // Existing methods with enhancements...\r\n\r\n    @Override\r\n    @Transactional\r\n    public MembershipTier createTier(TierDto tierDto) {\r\n        MembershipTier tier = new MembershipTier();\r\n        tier.setTierName(tierDto.getTierName().toUpperCase()); // 转换为大写确保一致性\r\n        tier.setBenefits(tierDto.getBenefits());\r\n        tier.setMinPoints(tierDto.getMinPoints());\r\n        tier.setMaxPoints(tierDto.getMaxPoints());\r\n        tier.setActive(tierDto.isActive());\r\n        return createOrUpdateTier(tier);\r\n    }\r\n\r\n    @Override\r\n    public void deleteTier(Integer id) {\r\n        tierRepository.deleteById(id);\r\n    }\r\n\r\n    @Override\r\n    @Transactional\r\n    public MembershipTier createOrUpdateTier(MembershipTier tier) {\r\n        // 修改为字符串比较\r\n        if ((tier.getId() == null || tier.getId() == 0) && \"SILVER\".equalsIgnoreCase(tier.getTierName())) {\r\n            MembershipTier existingSilver = tierRepository.findByTierName(\"SILVER\"); // 直接使用字符串查询\r\n            if (existingSilver != null) {\r\n                existingSilver.setMinPoints(tier.getMinPoints());\r\n                existingSilver.setMaxPoints(tier.getMaxPoints());\r\n                existingSilver.setBenefits(tier.getBenefits());\r\n                tier = existingSilver;\r\n            }\r\n        }\r\n\r\n        validateTier(tier);\r\n        MembershipTier savedTier = tierRepository.save(tier);\r\n        recalculateAllMembersTiers();\r\n\r\n        // Validate tier hierarchy after update\r\n        List<MembershipTier> allTiers = tierRepository.findAllOrderedByMinPoints();\r\n        validateTierHierarchy(allTiers);\r\n\r\n        return savedTier;\r\n    }\r\n\r\n    private void validateTier(MembershipTier tier) {\r\n        List<MembershipTier> allTiers = tierRepository.findAllOrderedByMinPoints();\r\n\r\n        // Check for overlaps (excluding current tier if updating)\r\n        for (MembershipTier existing : allTiers) {\r\n            if (tier.getId() != null && tier.getId().equals(existing.getId())) {\r\n                continue;\r\n            }\r\n\r\n            // Improved overlap detection logic\r\n            if ((tier.getMinPoints() <= existing.getMaxPoints() &&\r\n                    tier.getMinPoints() >= existing.getMinPoints()) ||\r\n                    (tier.getMaxPoints() <= existing.getMaxPoints() &&\r\n                            tier.getMaxPoints() >= existing.getMinPoints())) {\r\n\r\n                logger.error(\"Tier overlap detected: {} ({}-{}) with {} ({}-{})\",\r\n                        tier.getTierName(), tier.getMinPoints(), tier.getMaxPoints(),\r\n                        existing.getTierName(), existing.getMinPoints(), existing.getMaxPoints());\r\n\r\n                throw new ValidationException(\"Tier point ranges cannot overlap\");\r\n            }\r\n        }\r\n\r\n        // Validate tier order hierarchy\r\n        if (tier.getMinPoints() >= tier.getMaxPoints()) {\r\n            throw new ValidationException(\"Min points must be less than max points\");\r\n        }\r\n\r\n        // Relaxed benefits regex\r\n        if (tier.getBenefits() != null &&\r\n                !tier.getBenefits().matches(\"(?i).*(\\\\d+%\\\\s*(discount|off)|\\\\d+\\\\s*free\\\\s*(bookings?|sessions?)).*\")) {\r\n\r\n            throw new ValidationException(\"Benefits must include discount (e.g., 10% off) or free bookings (e.g., 2 free sessions)\");\r\n        }\r\n    }\r\n\r\n    // Added tier hierarchy validation\r\n    private void validateTierHierarchy(List<MembershipTier> tiers) {\r\n        // Should be ordered by minPoints ascending\r\n        for (int i = 1; i < tiers.size(); i++) {\r\n            MembershipTier current = tiers.get(i);\r\n            MembershipTier previous = tiers.get(i-1);\r\n\r\n            if (current.getMinPoints() <= previous.getMaxPoints()) {\r\n                throw new ValidationException(\r\n                        \"Tier hierarchy violation: \" + previous.getTierName() +\r\n                                \" (max: \" + previous.getMaxPoints() + \") must be less than \" +\r\n                                current.getTierName() + \" (min: \" + current.getMinPoints() + \")\"\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    @Override\r\n    @Transactional\r\n    public MembershipTier addVoucherToTier(String tierName, VoucherDto voucherDto) {\r\n        // 直接使用字符串查询，不再需要枚举转换\r\n        MembershipTier tier = tierRepository.findByTierName(tierName.toUpperCase());\r\n        if (tier == null) {\r\n            throw new ValidationException(\"Tier not found: \" + tierName);\r\n        }\r\n\r\n        if (voucherRepository.existsByCode(voucherDto.getCode())) {\r\n            throw new ValidationException(\"Voucher code already exists\");\r\n        }\r\n\r\n        // Debug logging\r\n        logger.info(\"Creating voucher with expiry date: {}\", voucherDto.getExpiryDate());\r\n\r\n        Voucher voucher = new Voucher();\r\n        voucher.setCode(voucherDto.getCode());\r\n        voucher.setDiscountValue(voucherDto.getDiscountValue());  // Changed from getDiscountAmount()\r\n        voucher.setDiscountType(voucherDto.getDiscountType());    // Added discount type\r\n        voucher.setRequestPoints(voucherDto.getRequestPoints());\r\n        voucher.setExpiryDate(voucherDto.getExpiryDate());\r\n        voucher.setTier(tier);\r\n        voucher.setTierId(tier.getId()); // Explicitly set tierId\r\n\r\n        logger.info(\"Saving voucher with expiry date: {}\", voucher.getExpiryDate());\r\n\r\n        voucherRepository.save(voucher);\r\n        return tier;\r\n    }\r\n\r\n    @Override\r\n    @Transactional\r\n    public Voucher addGeneralVoucher(VoucherDto voucherDto) {\r\n        if (voucherRepository.existsByCode(voucherDto.getCode())) {\r\n            throw new ValidationException(\"Voucher code already exists\");\r\n        }\r\n\r\n        // Debug logging\r\n        logger.info(\"Creating general voucher with expiry date: {}\", voucherDto.getExpiryDate());\r\n\r\n        Voucher voucher = new Voucher();\r\n        voucher.setCode(voucherDto.getCode());\r\n        voucher.setDiscountValue(voucherDto.getDiscountValue());\r\n        voucher.setDiscountType(voucherDto.getDiscountType());\r\n        voucher.setRequestPoints(voucherDto.getRequestPoints());\r\n        voucher.setExpiryDate(voucherDto.getExpiryDate());\r\n        voucher.setTier(null); // General voucher has no tier\r\n        voucher.setTierId(null); // No tier association\r\n\r\n        logger.info(\"Saving general voucher with expiry date: {}\", voucher.getExpiryDate());\r\n\r\n        return voucherRepository.save(voucher);\r\n    }\r\n\r\n    @Override\r\n    @Transactional(readOnly = true)\r\n    public List<MembershipTier> getAllTiers() {\r\n        try {\r\n            return tierRepository.findAllByActiveTrueOrderByMinPointsAsc();\r\n        } catch (Exception e) {\r\n            logger.error(\"Error fetching tiers: {}\", e.getMessage());\r\n            throw new ServiceException(\"Failed to retrieve tiers\", e);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public List<Voucher> getAllVouchers() {\r\n        return voucherRepository.findAll();\r\n    }\r\n\r\n\r\n    @Override\r\n    @Transactional\r\n    public void recalculateMemberTier(Member member) {\r\n        List<MembershipTier> activeTiers = tierRepository.findAllByActiveTrueOrderByMinPointsAsc();\r\n        int userPoints = member.getPointBalance();\r\n        MembershipTier newTier = null;\r\n\r\n        // Debug logging\r\n        logger.info(\"=== Tier Recalculation Debug ===\");\r\n        logger.info(\"Member ID: {}\", member.getId());\r\n        logger.info(\"Member Points: {}\", userPoints);\r\n        logger.info(\"Current Tier: {}\", member.getTier() != null ? member.getTier().getTierName() : \"NULL\");\r\n        logger.info(\"Active Tiers Count: {}\", activeTiers.size());\r\n\r\n        for (MembershipTier tier : activeTiers) {\r\n            logger.info(\"Checking tier: {} (min: {}, max: {})\", \r\n                tier.getTierName(), tier.getMinPoints(), tier.getMaxPoints());\r\n            \r\n            if (userPoints >= tier.getMinPoints() &&\r\n                    (tier.getMaxPoints() == Integer.MAX_VALUE ||\r\n                            userPoints <= tier.getMaxPoints())) {\r\n                newTier = tier;\r\n                logger.info(\"Found matching tier: {}\", tier.getTierName());\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (newTier == null && !activeTiers.isEmpty()) {\r\n            newTier = activeTiers.get(activeTiers.size() - 1);\r\n            logger.info(\"No matching tier found, using highest tier: {}\", newTier.getTierName());\r\n        }\r\n\r\n        logger.info(\"Selected new tier: {}\", newTier != null ? newTier.getTierName() : \"NULL\");\r\n        logger.info(\"Current tier: {}\", member.getTier() != null ? member.getTier().getTierName() : \"NULL\");\r\n        logger.info(\"Tiers equal: {}\", newTier != null && newTier.equals(member.getTier()));\r\n\r\n        if (newTier != null && !newTier.equals(member.getTier())) {\r\n            sendTierUpgradeEmail(member, newTier);\r\n\r\n            member.setTier(newTier);\r\n            memberRepository.save(member);\r\n            logger.info(\"Updated user {} tier from {} to {}\",\r\n                    member.getUser().getEmail(),\r\n                    member.getTier() != null ? member.getTier().getTierName() : \"NONE\",\r\n                    newTier.getTierName() // 直接使用字符串\r\n            );\r\n        } else {\r\n            logger.info(\"No tier update needed\");\r\n        }\r\n    }\r\n\r\n\r\n    // Added email notification method\r\n    private void sendTierUpgradeEmail(Member member, MembershipTier newTier) {\r\n        String subject = \"Congratulations! You've been upgraded to \" + newTier.getTierName();\r\n        String content = \"Dear \" + member.getUser().getName() + \",\\n\\n\"\r\n                + \"You've been upgraded to \" + newTier.getTierName() + \" tier!\\n\"\r\n                + \"New benefits: \" + newTier.getBenefits() + \"\\n\\n\"\r\n                + \"Enjoy your new perks!\";\r\n\r\n        emailService.sendVoucherEmail(\r\n                member.getUser().getEmail(),\r\n                subject,\r\n                content\r\n        );\r\n    }\r\n\r\n    private void recalculateAllMembersTiers() {\r\n        try {\r\n            List<MembershipTier> tiers = tierRepository.findAllOrderedByMinPoints();\r\n            logger.info(\"Recalculating tiers for {} membership tiers\", tiers.size());\r\n\r\n            for (MembershipTier tier : tiers) {\r\n                try {\r\n                    int updated = memberRepository.updateMembersTier(\r\n                            tier.getMinPoints(),\r\n                            tier.getMaxPoints(),\r\n                            tier\r\n                    );\r\n                    logger.info(\"Updated {} members to {} tier\", updated, tier.getTierName());\r\n                } catch (Exception e) {\r\n                    logger.error(\"Error updating members for tier {}: {}\",\r\n                            tier.getTierName(), e.getMessage());\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            logger.error(\"Error during tier recalculation: {}\", e.getMessage());\r\n        }\r\n    }\r\n\r\n    @Override\r\n    @Transactional\r\n    public Voucher updateVoucher(Integer voucherId, VoucherDto voucherDto) {\r\n        Voucher voucher = voucherRepository.findById(voucherId)\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"Voucher\", \"id\", voucherId));\r\n\r\n        // Check for duplicate code if changed\r\n        if (!voucher.getCode().equals(voucherDto.getCode())) {\r\n            if (voucherRepository.existsByCode(voucherDto.getCode())) {\r\n                throw new ValidationException(\"Voucher code already exists\");\r\n            }\r\n        }\r\n\r\n        // Debug logging\r\n        logger.info(\"Updating voucher {} with expiry date: {}\", voucherId, voucherDto.getExpiryDate());\r\n\r\n        voucher.setCode(voucherDto.getCode());\r\n        voucher.setDiscountValue(voucherDto.getDiscountValue());  // Changed from getDiscountAmount()\r\n        voucher.setDiscountType(voucherDto.getDiscountType());    // Added discount type\r\n        voucher.setRequestPoints(voucherDto.getRequestPoints());\r\n        voucher.setExpiryDate(voucherDto.getExpiryDate());\r\n\r\n        // Handle tier update\r\n        if (voucherDto.getTierName() != null && !voucherDto.getTierName().trim().isEmpty()) {\r\n            MembershipTier tier = tierRepository.findByTierName(voucherDto.getTierName().toUpperCase());\r\n            if (tier != null) {\r\n                voucher.setTier(tier);\r\n                voucher.setTierId(tier.getId());\r\n            } else {\r\n                throw new ValidationException(\"Tier not found: \" + voucherDto.getTierName());\r\n            }\r\n        } else {\r\n            // Remove tier association\r\n            voucher.setTier(null);\r\n            voucher.setTierId(null);\r\n        }\r\n\r\n        logger.info(\"Saving updated voucher with expiry date: {}\", voucher.getExpiryDate());\r\n\r\n        return voucherRepository.save(voucher);\r\n    }\r\n\r\n    @Override\r\n    @Transactional\r\n    public void deleteVoucher(Integer voucherId) {\r\n        Voucher voucher = voucherRepository.findById(voucherId)\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"Voucher\", \"id\", voucherId));\r\n\r\n        voucherRepository.delete(voucher);\r\n    }\r\n\r\n    @Override\r\n    @Transactional\r\n    public void toggleTierStatus(Integer tierId, boolean active) {\r\n        MembershipTier tier = tierRepository.findById(tierId)\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"Tier\", \"id\", tierId));\r\n\r\n        tier.setActive(active);\r\n        tierRepository.save(tier);\r\n\r\n        if (!active) {\r\n            // 使用字符串查询默认层\r\n            MembershipTier defaultTier = tierRepository.findByTierName(\"SILVER\");\r\n            if (defaultTier == null) {\r\n                throw new ValidationException(\"Default Silver tier not found\");\r\n            }\r\n            memberRepository.reassignMembersFromTier(tierId, defaultTier);\r\n        }\r\n    }\r\n\r\n    private void validateBenefitProgression(List<MembershipTier> tiers) {\r\n        for (int i = 1; i < tiers.size(); i++) {\r\n            MembershipTier lower = tiers.get(i-1);\r\n            MembershipTier higher = tiers.get(i);\r\n\r\n            if (!higher.getBenefits().contains(\"more\") &&\r\n                    !higher.getBenefits().contains(\"additional\")) {\r\n                logger.warn(\"Higher tier {} might not offer improved benefits over {}\",\r\n                        higher.getTierName(), lower.getTierName());\r\n            }\r\n        }\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/TierServiceImpl.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/TierServiceImpl.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/TierServiceImpl.java	(revision 89327e12854b108d004ebb020d0592b1c618ecaf)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/TierServiceImpl.java	(date 1754078077523)
@@ -201,7 +201,7 @@
     @Transactional
     public void recalculateMemberTier(Member member) {
         List<MembershipTier> activeTiers = tierRepository.findAllByActiveTrueOrderByMinPointsAsc();
-        int userPoints = member.getPointBalance();
+        int userPoints = member.getTierPointBalance();
         MembershipTier newTier = null;
 
         // Debug logging
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/MemberService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.service;\r\n\r\nimport com.pickleball_backend.pickleball.dto.*;\r\nimport com.pickleball_backend.pickleball.entity.*;\r\nimport com.pickleball_backend.pickleball.exception.*;\r\nimport com.pickleball_backend.pickleball.repository.*;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.springframework.security.core.context.SecurityContextHolder;\r\nimport org.springframework.stereotype.Service;\r\nimport org.springframework.transaction.annotation.Transactional;\r\n\r\nimport java.time.LocalDate;\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\nimport java.util.UUID;\r\nimport java.util.stream.Collectors;\r\n\r\n@Service\r\n@RequiredArgsConstructor\r\npublic class MemberService {\r\n\r\n    private final MemberRepository memberRepository;\r\n    private final MembershipTierRepository tierRepository;\r\n    private final UserAccountRepository userAccountRepository;\r\n    private final VoucherRepository voucherRepository;\r\n    private final WalletRepository walletRepository;\r\n    private final EmailService emailService;\r\n    private final TierService tierService;\r\n\r\n    public MemberDashboardDto getMemberDashboard() {\r\n        String username = SecurityContextHolder.getContext().getAuthentication().getName();\r\n        UserAccount account = userAccountRepository.findByUsername(username)\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"User account not found\"));\r\n\r\n        User user = account.getUser();\r\n        Member member = memberRepository.findByUserId(user.getId());\r\n\r\n        if (member == null) {\r\n            throw new ResourceNotFoundException(\"Member not found\");\r\n        }\r\n\r\n        if (member.getTier() == null) {\r\n            // Try to auto-assign tier first\r\n            tierService.recalculateMemberTier(member);\r\n            member = memberRepository.findByUserId(user.getId()); // Refresh\r\n        }\r\n\r\n        if (member.getTier() == null) {\r\n            // 使用字符串查询默认层\r\n            MembershipTier defaultTier = tierRepository.findByTierName(\"SILVER\");\r\n            if (defaultTier == null) {\r\n                throw new ResourceNotFoundException(\"Default SILVER tier not found\");\r\n            }\r\n            member.setTier(defaultTier);\r\n            memberRepository.save(member);\r\n        }\r\n\r\n        if (member.getWallet() == null) {\r\n            initializeWallet(member.getId()); // Initialize if missing\r\n        }\r\n\r\n        // Add debug logging\r\n        System.out.println(\"=== MemberService Debug ===\");\r\n        System.out.println(\"Member ID: \" + member.getId());\r\n        System.out.println(\"Member Tier ID: \" + (member.getTier() != null ? member.getTier().getId() : \"NULL\"));\r\n        System.out.println(\"Member Tier Name: \" + (member.getTier() != null ? member.getTier().getTierName() : \"NULL\"));\r\n        System.out.println(\"Member Point Balance: \" + member.getPointBalance());\r\n\r\n        List<Voucher> vouchers = voucherRepository.findByTierIdAndMemberIsNull(member.getTier().getId());\r\n        \r\n        System.out.println(\"Found \" + vouchers.size() + \" vouchers for tier \" + member.getTier().getId());\r\n        vouchers.forEach(v -> {\r\n            System.out.println(\"Voucher ID: \" + v.getId() + \r\n                             \", Code: \" + v.getCode() + \r\n                             \", Expiry: \" + v.getExpiryDate() + \r\n                             \", Points: \" + v.getRequestPoints());\r\n        });\r\n\r\n        List<VoucherDto> redeemableVouchers = vouchers.stream()\r\n                .filter(v -> {\r\n                    // Handle null or default dates as never expiring\r\n                    if (v.getExpiryDate() == null) return true;\r\n                    if (v.getExpiryDate().equals(LocalDate.of(1970, 1, 1))) return true;\r\n                    return v.getExpiryDate().isAfter(LocalDate.now());\r\n                })\r\n                .map(v -> new VoucherDto(\r\n                        v.getId(),\r\n                        v.getCode(),\r\n                        v.getDiscountValue(),  // Changed from getDiscountAmount()\r\n                        v.getDiscountType(),  // Added discount type\r\n                        v.getRequestPoints(),\r\n                        v.getTier() != null ? v.getTier().getTierName() : null,  // Added tierName\r\n                        v.getExpiryDate()\r\n                ))\r\n                .collect(Collectors.toList());\r\n        \r\n        System.out.println(\"After filtering by expiry date: \" + redeemableVouchers.size() + \" vouchers\");\r\n\r\n        return new MemberDashboardDto(\r\n                member.getTier().getTierName(), // 直接返回字符串值\r\n                member.getPointBalance(),\r\n                member.getTier().getBenefits(),\r\n                redeemableVouchers,\r\n                member.getTier().getMinPoints(),\r\n                member.getTier().getMaxPoints()\r\n        );\r\n    }\r\n\r\n    public Integer getMemberIdByUsername(String username) {\r\n        UserAccount account = userAccountRepository.findByUsername(username)\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"User account not found\"));\r\n        Member member = memberRepository.findByUserId(account.getUser().getId());\r\n        return member.getId();\r\n    }\r\n\r\n    @Transactional\r\n    public VoucherRedemptionResponse redeemVoucher(Integer voucherId) {\r\n        String username = SecurityContextHolder.getContext().getAuthentication().getName();\r\n        UserAccount account = userAccountRepository.findByUsername(username)\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"User account not found\"));\r\n\r\n        User user = account.getUser();\r\n        Member member = memberRepository.findByUserId(user.getId());\r\n\r\n        if (member == null) {\r\n            throw new ResourceNotFoundException(\"Member not found\");\r\n        }\r\n\r\n        if (member.getTier() == null) {\r\n            throw new ValidationException(\"No tier assigned to member\");\r\n        }\r\n\r\n        Voucher voucher = voucherRepository.findById(voucherId)\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"Voucher not found\"));\r\n\r\n        // Validate voucher\r\n        if (voucher.getTier() == null || voucher.getTier().getId() == null || \r\n            member.getTier() == null || member.getTier().getId() == null ||\r\n            !voucher.getTier().getId().equals(member.getTier().getId())) {\r\n            throw new ValidationException(\"Voucher not available for your tier\");\r\n        }\r\n        if (member.getPointBalance() < voucher.getRequestPoints()) {\r\n            throw new ValidationException(\"Insufficient points\");\r\n        }\r\n        if (voucher.getExpiryDate() != null && \r\n            !voucher.getExpiryDate().equals(LocalDate.of(1970, 1, 1)) && \r\n            voucher.getExpiryDate().isBefore(LocalDate.now())) {\r\n            throw new ValidationException(\"Voucher has expired\");\r\n        }\r\n\r\n        // Deduct points\r\n        member.setPointBalance(member.getPointBalance() - voucher.getRequestPoints());\r\n        memberRepository.save(member);\r\n\r\n        // Recalculate tier\r\n        tierService.recalculateMemberTier(member);\r\n\r\n        // Generate unique voucher code\r\n        String uniqueCode = voucher.getCode() + \"-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\r\n\r\n        // Create redeemed voucher\r\n        Voucher redeemedVoucher = new Voucher();\r\n        redeemedVoucher.setCode(uniqueCode);\r\n        redeemedVoucher.setDiscountValue(voucher.getDiscountValue());  // Changed from getDiscountAmount()\r\n        redeemedVoucher.setDiscountType(voucher.getDiscountType());    // Added discount type\r\n        redeemedVoucher.setRequestPoints(voucher.getRequestPoints());\r\n        redeemedVoucher.setExpiryDate(voucher.getExpiryDate());\r\n        redeemedVoucher.setTier(voucher.getTier());\r\n        redeemedVoucher.setMember(member);\r\n        voucherRepository.save(redeemedVoucher);\r\n\r\n        // Send confirmation email\r\n        emailService.sendVoucherEmail(\r\n                user.getEmail(),\r\n                \"Voucher Redemption Confirmation\",\r\n                \"You redeemed voucher: \" + uniqueCode + \"\\nNew balance: \" + member.getPointBalance() + \" points\"\r\n        );\r\n\r\n        return new VoucherRedemptionResponse(\r\n                uniqueCode,\r\n                voucher.getExpiryDate(),\r\n                member.getPointBalance()\r\n        );\r\n    }\r\n\r\n    @Transactional\r\n    public void addPoints(int points) {\r\n        String username = SecurityContextHolder.getContext().getAuthentication().getName();\r\n        UserAccount account = userAccountRepository.findByUsername(username)\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"User account not found\"));\r\n\r\n        Member member = memberRepository.findByUserId(account.getUser().getId());\r\n        \r\n        // Store old tier for comparison\r\n        String oldTierName = member.getTier() != null ? member.getTier().getTierName() : \"NONE\";\r\n        \r\n        member.setPointBalance(member.getPointBalance() + points);\r\n        memberRepository.save(member);\r\n\r\n        // Automatic tier upgrade check\r\n        tierService.recalculateMemberTier(member);\r\n        \r\n        // Refresh member data to get updated tier\r\n        member = memberRepository.findByUserId(account.getUser().getId());\r\n        String newTierName = member.getTier() != null ? member.getTier().getTierName() : \"NONE\";\r\n        \r\n        // Log tier upgrade if it occurred\r\n        if (!oldTierName.equals(newTierName)) {\r\n            // Assuming log is available, otherwise remove this line\r\n            // log.info(\"Automatic tier upgrade: {} -> {} (Points: {} -> {})\", \r\n            //         oldTierName, newTierName, member.getPointBalance() - points, member.getPointBalance());\r\n        }\r\n    }\r\n\r\n    public List<TierDto> getAllAvailableTiers() {\r\n        return tierService.getAllTiers().stream()\r\n                .map(tier -> {\r\n                    TierDto dto = new TierDto();\r\n                    dto.setId(tier.getId());\r\n                    // 直接使用字符串值\r\n                    dto.setTierName(tier.getTierName());\r\n                    dto.setBenefits(tier.getBenefits());\r\n                    dto.setMinPoints(tier.getMinPoints());\r\n                    dto.setMaxPoints(tier.getMaxPoints());\r\n                    dto.setActive(tier.isActive());\r\n                    return dto;\r\n                })\r\n                .collect(Collectors.toList());\r\n    }\r\n\r\n    public List<VoucherDto> getRedeemHistory() {\r\n        String username = SecurityContextHolder.getContext().getAuthentication().getName();\r\n        UserAccount account = userAccountRepository.findByUsername(username)\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"User account not found\"));\r\n\r\n        User user = account.getUser();\r\n        Member member = memberRepository.findByUserId(user.getId());\r\n\r\n        if (member == null) {\r\n            throw new ResourceNotFoundException(\"Member not found\");\r\n        }\r\n\r\n        // Get all vouchers associated with the member\r\n        List<Voucher> redeemedVouchers = voucherRepository.findByMemberIdIsNotNull();\r\n\r\n        return redeemedVouchers.stream()\r\n                .filter(v -> v.getMember().getId().equals(member.getId())) // Filter by current member\r\n                .map(v -> new VoucherDto(\r\n                        v.getId(),\r\n                        v.getCode(),\r\n                        v.getDiscountValue(),  // Changed from getDiscountAmount()\r\n                        v.getDiscountType(),  // Added discount type\r\n                        v.getRequestPoints(),\r\n                        v.getTier() != null ? v.getTier().getTierName() : null,  // Added tierName\r\n                        v.getExpiryDate()\r\n                ))\r\n                .collect(Collectors.toList());\r\n    }\r\n\r\n    @Transactional\r\n    public void initializeWallet(Integer memberId) {\r\n        Wallet wallet = new Wallet();\r\n        wallet.setBalance(0.00); // Initial balance\r\n        wallet.setMember(memberRepository.findById(memberId).orElseThrow());\r\n        walletRepository.save(wallet);\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/MemberService.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/MemberService.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/MemberService.java	(revision 89327e12854b108d004ebb020d0592b1c618ecaf)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/MemberService.java	(date 1754078077521)
@@ -10,8 +10,10 @@
 import org.springframework.transaction.annotation.Transactional;
 
 import java.time.LocalDate;
+import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
+import java.util.Set;
 import java.util.UUID;
 import java.util.stream.Collectors;
 
@@ -64,41 +66,95 @@
         System.out.println("Member ID: " + member.getId());
         System.out.println("Member Tier ID: " + (member.getTier() != null ? member.getTier().getId() : "NULL"));
         System.out.println("Member Tier Name: " + (member.getTier() != null ? member.getTier().getTierName() : "NULL"));
-        System.out.println("Member Point Balance: " + member.getPointBalance());
+        System.out.println("Member Tier Point Balance: " + member.getTierPointBalance());
+        System.out.println("Member Reward Point Balance: " + member.getRewardPointBalance());
 
-        List<Voucher> vouchers = voucherRepository.findByTierIdAndMemberIsNull(member.getTier().getId());
+        // Get tier-specific vouchers
+        List<Voucher> tierVouchers = voucherRepository.findByTierIdAndMemberIsNull(member.getTier().getId());
         
-        System.out.println("Found " + vouchers.size() + " vouchers for tier " + member.getTier().getId());
-        vouchers.forEach(v -> {
+        // Get general vouchers (available to all tiers)
+        List<Voucher> generalVouchers = voucherRepository.findByTierIdIsNullAndMemberIsNull();
+        
+        // Filter out vouchers that the user has already redeemed
+        List<Voucher> userRedeemedVouchers = voucherRepository.findByMemberId(member.getId());
+        Set<String> userRedeemedCodes = userRedeemedVouchers.stream()
+                .map(Voucher::getCode)
+                .collect(Collectors.toSet());
+        
+        // Remove vouchers that user has already redeemed
+        tierVouchers = tierVouchers.stream()
+                .filter(v -> !userRedeemedCodes.contains(v.getCode()))
+                .collect(Collectors.toList());
+        
+        generalVouchers = generalVouchers.stream()
+                .filter(v -> !userRedeemedCodes.contains(v.getCode()))
+                .collect(Collectors.toList());
+        
+        // Combine both lists
+        List<Voucher> allVouchers = new ArrayList<>();
+        allVouchers.addAll(tierVouchers);
+        allVouchers.addAll(generalVouchers);
+        
+        System.out.println("Found " + tierVouchers.size() + " tier-specific vouchers for tier " + member.getTier().getId());
+        System.out.println("Found " + generalVouchers.size() + " general vouchers");
+        System.out.println("Total vouchers: " + allVouchers.size());
+        
+        allVouchers.forEach(v -> {
+            String tierName = v.getTierId() != null ? "TIER_" + v.getTierId() : "GENERAL";
             System.out.println("Voucher ID: " + v.getId() + 
                              ", Code: " + v.getCode() + 
+                             ", Tier ID: " + v.getTierId() +
+                             ", Tier: " + tierName +
                              ", Expiry: " + v.getExpiryDate() + 
+                             ", Expiry Type: " + (v.getExpiryDate() != null ? v.getExpiryDate().getClass().getSimpleName() : "NULL") +
+                             ", Expiry String: " + (v.getExpiryDate() != null ? v.getExpiryDate().toString() : "NULL") +
                              ", Points: " + v.getRequestPoints());
         });
 
-        List<VoucherDto> redeemableVouchers = vouchers.stream()
+        List<VoucherDto> redeemableVouchers = allVouchers.stream()
                 .filter(v -> {
                     // Handle null or default dates as never expiring
                     if (v.getExpiryDate() == null) return true;
                     if (v.getExpiryDate().equals(LocalDate.of(1970, 1, 1))) return true;
                     return v.getExpiryDate().isAfter(LocalDate.now());
                 })
-                .map(v -> new VoucherDto(
-                        v.getId(),
-                        v.getCode(),
-                        v.getDiscountValue(),  // Changed from getDiscountAmount()
-                        v.getDiscountType(),  // Added discount type
-                        v.getRequestPoints(),
-                        v.getTier() != null ? v.getTier().getTierName() : null,  // Added tierName
-                        v.getExpiryDate()
-                ))
+                .map(v -> {
+                    // Get tier name based on tierId
+                    String tierName = "GENERAL";
+                    if (v.getTierId() != null) {
+                        try {
+                            MembershipTier tier = tierRepository.findById(v.getTierId()).orElse(null);
+                            tierName = tier != null ? tier.getTierName() : "GENERAL";
+                        } catch (Exception e) {
+                            System.out.println("Error getting tier name for tierId " + v.getTierId() + ": " + e.getMessage());
+                            tierName = "GENERAL";
+                        }
+                    }
+                    
+                    VoucherDto dto = new VoucherDto(
+                            v.getId(),
+                            v.getCode(),
+                            v.getDiscountValue(),  // Changed from getDiscountAmount()
+                            v.getDiscountType(),  // Added discount type
+                            v.getRequestPoints(),
+                            tierName,  // Use tierName from tierId lookup
+                            v.getExpiryDate()
+                    );
+                    
+                    // Debug: 檢查DTO中的日期
+                    System.out.println("DTO Voucher " + dto.getId() + " expiry: " + dto.getExpiryDate() + 
+                                     " (Type: " + (dto.getExpiryDate() != null ? dto.getExpiryDate().getClass().getSimpleName() : "NULL") + ")");
+                    
+                    return dto;
+                })
                 .collect(Collectors.toList());
         
         System.out.println("After filtering by expiry date: " + redeemableVouchers.size() + " vouchers");
 
         return new MemberDashboardDto(
                 member.getTier().getTierName(), // 直接返回字符串值
-                member.getPointBalance(),
+                member.getTierPointBalance(),
+                member.getRewardPointBalance(),
                 member.getTier().getBenefits(),
                 redeemableVouchers,
                 member.getTier().getMinPoints(),
@@ -134,13 +190,16 @@
                 .orElseThrow(() -> new ResourceNotFoundException("Voucher not found"));
 
         // Validate voucher
-        if (voucher.getTier() == null || voucher.getTier().getId() == null || 
-            member.getTier() == null || member.getTier().getId() == null ||
-            !voucher.getTier().getId().equals(member.getTier().getId())) {
-            throw new ValidationException("Voucher not available for your tier");
+        if (voucher.getTier() != null) {
+            // Tier-specific voucher - check if user's tier matches
+            if (member.getTier() == null || member.getTier().getId() == null ||
+                !voucher.getTier().getId().equals(member.getTier().getId())) {
+                throw new ValidationException("Voucher not available for your tier");
+            }
         }
-        if (member.getPointBalance() < voucher.getRequestPoints()) {
-            throw new ValidationException("Insufficient points");
+        // General voucher (tier == null) is available to all tiers
+        if (member.getRewardPointBalance() < voucher.getRequestPoints()) {
+            throw new ValidationException("Insufficient reward points");
         }
         if (voucher.getExpiryDate() != null && 
             !voucher.getExpiryDate().equals(LocalDate.of(1970, 1, 1)) && 
@@ -148,8 +207,8 @@
             throw new ValidationException("Voucher has expired");
         }
 
-        // Deduct points
-        member.setPointBalance(member.getPointBalance() - voucher.getRequestPoints());
+        // Deduct reward points
+        member.setRewardPointBalance(member.getRewardPointBalance() - voucher.getRequestPoints());
         memberRepository.save(member);
 
         // Recalculate tier
@@ -173,13 +232,13 @@
         emailService.sendVoucherEmail(
                 user.getEmail(),
                 "Voucher Redemption Confirmation",
-                "You redeemed voucher: " + uniqueCode + "\nNew balance: " + member.getPointBalance() + " points"
+                "You redeemed voucher: " + uniqueCode + "\nNew reward points balance: " + member.getRewardPointBalance() + " points"
         );
 
         return new VoucherRedemptionResponse(
                 uniqueCode,
                 voucher.getExpiryDate(),
-                member.getPointBalance()
+                member.getRewardPointBalance()
         );
     }
 
@@ -194,10 +253,12 @@
         // Store old tier for comparison
         String oldTierName = member.getTier() != null ? member.getTier().getTierName() : "NONE";
         
-        member.setPointBalance(member.getPointBalance() + points);
+        // Add points to both tier points and reward points
+        member.setTierPointBalance(member.getTierPointBalance() + points);
+        member.setRewardPointBalance(member.getRewardPointBalance() + points);
         memberRepository.save(member);
 
-        // Automatic tier upgrade check
+        // Automatic tier upgrade check (based on tier points)
         tierService.recalculateMemberTier(member);
         
         // Refresh member data to get updated tier
@@ -208,7 +269,7 @@
         if (!oldTierName.equals(newTierName)) {
             // Assuming log is available, otherwise remove this line
             // log.info("Automatic tier upgrade: {} -> {} (Points: {} -> {})", 
-            //         oldTierName, newTierName, member.getPointBalance() - points, member.getPointBalance());
+            //         oldTierName, newTierName, member.getTierPointBalance() - points, member.getTierPointBalance());
         }
     }
 
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/CourtServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.service;\r\n\r\nimport com.pickleball_backend.pickleball.dto.CourtDto;\r\nimport com.pickleball_backend.pickleball.dto.CourtPricingDto;\r\nimport com.pickleball_backend.pickleball.dto.SlotDto;\r\nimport com.pickleball_backend.pickleball.entity.*;\r\nimport com.pickleball_backend.pickleball.exception.ValidationException;\r\nimport com.pickleball_backend.pickleball.repository.*;\r\nimport jakarta.persistence.EntityNotFoundException;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.stereotype.Service;\r\nimport org.springframework.transaction.annotation.Transactional;\r\n\r\nimport java.time.*;\r\nimport java.time.format.DateTimeParseException;\r\nimport java.util.*;\r\nimport java.util.stream.Collectors;\r\n\r\n@Service\r\n@RequiredArgsConstructor\r\npublic class CourtServiceImpl implements CourtService {\r\n    private static final Logger log = LoggerFactory.getLogger(CourtServiceImpl.class);\r\n    private final CourtRepository courtRepository;\r\n    private final SlotService slotService;\r\n    private final BookingRepository bookingRepository;\r\n    private final MemberRepository memberRepository;\r\n    private final SlotRepository slotRepository;\r\n    private final EmailService emailService;\r\n    private final PaymentRepository paymentRepository;\r\n    private final BookingSlotRepository bookingSlotRepository;\r\n    private final FriendlyMatchService friendlyMatchService;\r\n    @Autowired\r\n    private VenueRepository venueRepository;\r\n    private static final Map<String, DayOfWeek> DAY_OF_WEEK_MAP = Map.of(\r\n        \"MON\", DayOfWeek.MONDAY,\r\n        \"TUE\", DayOfWeek.TUESDAY,\r\n        \"WED\", DayOfWeek.WEDNESDAY,\r\n        \"THU\", DayOfWeek.THURSDAY,\r\n        \"FRI\", DayOfWeek.FRIDAY,\r\n        \"SAT\", DayOfWeek.SATURDAY,\r\n        \"SUN\", DayOfWeek.SUNDAY\r\n    );\r\n\r\n    @Override\r\n    public Court createCourt(CourtDto courtDto) {\r\n        try {\r\n            System.out.println(\"==> createCourt called, dto=\" + courtDto);\r\n            Venue venue = venueRepository.findById(courtDto.getVenueId())\r\n                    .orElseThrow(() -> new EntityNotFoundException(\"Venue not found with id: \" + courtDto.getVenueId()));\r\n\r\n            if (courtRepository.existsByNameAndLocation(courtDto.getName(), courtDto.getLocation())) {\r\n                throw new IllegalArgumentException(\"Court with the same name and location already exists\");\r\n            }\r\n\r\n            Court court = new Court();\r\n            court.setVenue(venue);\r\n            saveOrUpdateCourt(court, courtDto);\r\n\r\n            generateSlotsForNewCourt(court);\r\n\r\n            System.out.println(\"==> createCourt success, id=\" + court.getId());\r\n            return court;\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            throw e;\r\n        }\r\n    }\r\n\r\n\r\n    private void generateSlotsForNewCourt(Court court) {\r\n        try {\r\n            if (court.getOpeningTime() == null || court.getClosingTime() == null) {\r\n                throw new ValidationException(\"Court operating hours not defined\");\r\n            }\r\n            LocalTime opening = LocalTime.parse(court.getOpeningTime());\r\n            LocalTime closing = LocalTime.parse(court.getClosingTime());\r\n            if (opening.isAfter(closing)) {\r\n                throw new ValidationException(\"Opening time must be before closing time\");\r\n            }\r\n            Set<DayOfWeek> operatingDaySet = parseOperatingDays(court.getOperatingDays());\r\n            LocalDate start = LocalDate.now();\r\n            LocalDate end = start.plusMonths(3);\r\n            List<SlotDto> slots = new ArrayList<>();\r\n            for (LocalDate date = start; date.isBefore(end); date = date.plusDays(1)) {\r\n                if (!operatingDaySet.isEmpty() && !operatingDaySet.contains(date.getDayOfWeek())) {\r\n                    continue;\r\n                }\r\n                LocalTime slotStart = opening;\r\n                while (slotStart.isBefore(closing)) {\r\n                    LocalTime slotEnd = slotStart.plusHours(1);\r\n                    if (slotEnd.isAfter(closing)) {\r\n                        break;\r\n                    }\r\n                    SlotDto slot = new SlotDto();\r\n                    slot.setCourtId(court.getId());\r\n                    slot.setDate(date);\r\n                    slot.setStartTime(slotStart);\r\n                    slot.setEndTime(slotEnd);\r\n                    slot.setAvailable(true);\r\n                    slot.setDurationHours(1);\r\n                    slots.add(slot);\r\n                    slotStart = slotStart.plusHours(1);\r\n                }\r\n            }\r\n            slotService.createSlots(slots);\r\n        } catch (DateTimeParseException e) {\r\n            throw new ValidationException(\"Invalid time format: \" + e.getMessage());\r\n        }\r\n    }\r\n\r\n    private Set<DayOfWeek> parseOperatingDays(String operatingDaysStr) {\r\n        if (operatingDaysStr == null || operatingDaysStr.trim().isEmpty()) {\r\n            return EnumSet.allOf(DayOfWeek.class);\r\n        }\r\n        return Arrays.stream(operatingDaysStr.split(\",\"))\r\n                .map(String::trim)\r\n                .map(this::parseDayOfWeek)\r\n                .collect(Collectors.toSet());\r\n    }\r\n\r\n    private DayOfWeek parseDayOfWeek(String dayStr) {\r\n        String upper = dayStr.trim().toUpperCase();\r\n        if (DAY_OF_WEEK_MAP.containsKey(upper)) {\r\n            return DAY_OF_WEEK_MAP.get(upper);\r\n        }\r\n        try {\r\n            return DayOfWeek.valueOf(upper);\r\n        } catch (IllegalArgumentException e) {\r\n            throw new ValidationException(\"Invalid day in operating days: \" + dayStr);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    @Transactional\r\n    public Court updateCourt(Integer id, CourtDto courtDto) {\r\n        Court existingCourt = courtRepository.findById(id)\r\n                .orElseThrow(() -> new IllegalArgumentException(\"Court not found with id: \" + id));\r\n\r\n        // Check for duplicate name/location only if they're being changed\r\n        if (!existingCourt.getName().equals(courtDto.getName()) ||\r\n                !existingCourt.getLocation().equals(courtDto.getLocation())) {\r\n\r\n            if (courtRepository.existsByNameAndLocation(courtDto.getName(), courtDto.getLocation())) {\r\n                throw new IllegalArgumentException(\"Another court with the same name and location already exists\");\r\n            }\r\n        }\r\n\r\n        return saveOrUpdateCourt(existingCourt, courtDto);\r\n    }\r\n\r\n    private Court saveOrUpdateCourt(Court court, CourtDto courtDto) {\r\n        try {\r\n            System.out.println(\"==> saveOrUpdateCourt called, dto=\" + courtDto);\r\n            court.setName(courtDto.getName());\r\n            court.setLocation(courtDto.getLocation());\r\n            court.setStatus(courtDto.getStatus().toUpperCase());\r\n            court.setOpeningTime(courtDto.getOpeningTime());\r\n            court.setClosingTime(courtDto.getClosingTime());\r\n            // operatingDays 统一大写并去重\r\n            if (courtDto.getOperatingDays() != null && !courtDto.getOperatingDays().isEmpty()) {\r\n                String normalizedDays = Arrays.stream(courtDto.getOperatingDays().split(\",\"))\r\n                    .map(String::trim)\r\n                    .map(String::toUpperCase)\r\n                    .distinct()\r\n                    .collect(Collectors.joining(\",\"));\r\n                court.setOperatingDays(normalizedDays);\r\n            } else {\r\n                court.setOperatingDays(null);\r\n            }\r\n            court.setPeakHourlyPrice(courtDto.getPeakHourlyPrice());\r\n            court.setOffPeakHourlyPrice(courtDto.getOffPeakHourlyPrice());\r\n            court.setDailyPrice(courtDto.getDailyPrice());\r\n            court.setPeakStartTime(courtDto.getPeakStartTime());\r\n            court.setPeakEndTime(courtDto.getPeakEndTime());\r\n\r\n            validatePeakTimes(courtDto);\r\n            Court saved = courtRepository.save(court);\r\n            System.out.println(\"==> saveOrUpdateCourt success, id=\" + saved.getId());\r\n            return saved;\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    private void validatePeakTimes(CourtDto courtDto) {\r\n        if (courtDto.getPeakStartTime() != null && courtDto.getPeakEndTime() != null) {\r\n            LocalTime start = LocalTime.parse(courtDto.getPeakStartTime());\r\n            LocalTime end = LocalTime.parse(courtDto.getPeakEndTime());\r\n\r\n            if (!start.isBefore(end)) {\r\n                throw new IllegalArgumentException(\"Peak start time must be before end time\");\r\n            }\r\n\r\n            // Check against operating hours\r\n            if (courtDto.getOpeningTime() != null && courtDto.getClosingTime() != null) {\r\n                LocalTime opening = LocalTime.parse(courtDto.getOpeningTime());\r\n                LocalTime closing = LocalTime.parse(courtDto.getClosingTime());\r\n\r\n                if (start.isBefore(opening) || end.isAfter(closing)) {\r\n                    throw new IllegalArgumentException(\r\n                            \"Peak hours must be within operating hours\"\r\n                    );\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    @Override\r\n    @Transactional\r\n    public void deleteCourt(Integer id) {\r\n        Court court = courtRepository.findById(id)\r\n                .orElseThrow(() -> new IllegalArgumentException(\"Court not found with id: \" + id));\r\n\r\n        if (court.getIsArchived() != null && court.getIsArchived()) {\r\n            throw new IllegalStateException(\"Court already deleted\");\r\n        }\r\n\r\n        // List<Booking> activeBookings = bookingRepository.findActiveBookingsByCourtId(id);\r\n        // 替换为通过 BookingSlotRepository 查询所有该 courtId 下的 bookingSlot，且 booking 状态为有效\r\n        List<BookingSlot> activeBookingSlots = bookingSlotRepository.findActiveByCourtId(id);\r\n        List<Booking> activeBookings = activeBookingSlots.stream()\r\n            .map(BookingSlot::getBooking)\r\n            .filter(Objects::nonNull)\r\n            .filter(b -> !\"CANCELLED\".equalsIgnoreCase(b.getStatus()) && !\"COMPLETED\".equalsIgnoreCase(b.getStatus()) && !\"CANCELLED_DUE_TO_COURT_DELETION\".equalsIgnoreCase(b.getStatus()))\r\n            .collect(Collectors.toList());\r\n\r\n        if (!activeBookings.isEmpty()) {\r\n            for (Booking booking : activeBookings) {\r\n                try {\r\n                    // 新增：同步取消 FriendlyMatch\r\n                    friendlyMatchService.cancelReservationAndMatch(booking.getId());\r\n                    refundBooking(booking);\r\n                    // Slot slot = booking.getSlot();\r\n                    Slot slot = booking.getBookingSlots() != null && !booking.getBookingSlots().isEmpty() ? booking.getBookingSlots().get(0).getSlot() : null;\r\n                    emailService.sendCourtDeletionNotification(\r\n                            booking.getMember().getUser().getEmail(),\r\n                            court.getName(),\r\n                            slot != null ? slot.getDate() : null,\r\n                            slot != null ? slot.getStartTime() : null,\r\n                            booking.getTotalAmount()\r\n                    );\r\n                    updateBookingStatus(booking);\r\n\r\n                    addCompensationPoints(booking.getMember());\r\n                } catch (Exception e) {\r\n                    log.error(\"Error processing booking {} during court deletion: {}\", booking.getId(), e.getMessage());\r\n                }\r\n            }\r\n        }\r\n\r\n        // 軟刪除球場\r\n        courtRepository.softDeleteCourt(id, LocalDateTime.now());\r\n        log.info(\"Court {} has been soft deleted\", id);\r\n    }\r\n\r\n    private void refundBooking(Booking booking) {\r\n        log.info(\"Processing refund for booking ID: {}, Amount: ${}\",\r\n                booking.getId(), booking.getTotalAmount());\r\n\r\n        Payment payment = booking.getPayment();\r\n        payment.setStatus(\"REFUNDED\");\r\n        paymentRepository.save(payment);\r\n\r\n        // Slot slot = booking.getSlot();\r\n        Slot slot = booking.getBookingSlots() != null && !booking.getBookingSlots().isEmpty() ? booking.getBookingSlots().get(0).getSlot() : null;\r\n        if (slot != null) {\r\n            slot.setAvailable(true);\r\n            slotRepository.save(slot);\r\n        }\r\n\r\n        // BookingSlot bookingSlot = booking.getBookingSlot();\r\n        BookingSlot bookingSlot = booking.getBookingSlots() != null && !booking.getBookingSlots().isEmpty() ? booking.getBookingSlots().get(0) : null;\r\n        if (bookingSlot != null) {\r\n            bookingSlot.setStatus(\"CANCELLED\");\r\n            bookingSlotRepository.save(bookingSlot);\r\n        }\r\n    }\r\n\r\n    private void updateBookingStatus(Booking booking) {\r\n        booking.setStatus(\"CANCELLED_DUE_TO_COURT_DELETION\");\r\n        bookingRepository.save(booking);\r\n    }\r\n\r\n    private void addCompensationPoints(Member member) {\r\n        int currentPoints = member.getPointBalance();\r\n        member.setPointBalance(currentPoints + 200); // 添加200積分作為補償\r\n        memberRepository.save(member);\r\n        log.info(\"Added 200 compensation points to member ID: {}\", member.getId());\r\n    }\r\n\r\n    @Override\r\n    @Transactional\r\n    public void updateCourtPricing(Integer id, CourtPricingDto pricingDto) {\r\n        Court court = courtRepository.findById(id)\r\n                .orElseThrow(() -> new IllegalArgumentException(\"Court not found with id: \" + id));\r\n\r\n        // Validate peak times\r\n        if (pricingDto.getPeakStartTime() != null && pricingDto.getPeakEndTime() != null) {\r\n            LocalTime start = LocalTime.parse(pricingDto.getPeakStartTime());\r\n            LocalTime end = LocalTime.parse(pricingDto.getPeakEndTime());\r\n\r\n            if (!start.isBefore(end)) {\r\n                throw new IllegalArgumentException(\"Peak start time must be before end time\");\r\n            }\r\n\r\n            // Check against operating hours only if they exist\r\n            if (court.getOpeningTime() != null && court.getClosingTime() != null) {\r\n                try {\r\n                    LocalTime opening = LocalTime.parse(court.getOpeningTime());\r\n                    LocalTime closing = LocalTime.parse(court.getClosingTime());\r\n\r\n                    if (start.isBefore(opening) || end.isAfter(closing)) {\r\n                        throw new IllegalArgumentException(\r\n                                \"Peak hours must be within operating hours\"\r\n                        );\r\n                    }\r\n                } catch (DateTimeParseException e) {\r\n                    throw new IllegalArgumentException(\"Invalid operating hours format\");\r\n                }\r\n            }\r\n        }\r\n\r\n        // Update pricing fields\r\n        court.setPeakHourlyPrice(pricingDto.getPeakHourlyPrice());\r\n        court.setOffPeakHourlyPrice(pricingDto.getOffPeakHourlyPrice());\r\n        court.setDailyPrice(pricingDto.getDailyPrice());\r\n        court.setPeakStartTime(pricingDto.getPeakStartTime());\r\n        court.setPeakEndTime(pricingDto.getPeakEndTime());\r\n\r\n        courtRepository.save(court);\r\n    }\r\n\r\n    //slot\r\n    @Override\r\n    public List<Court> getAllCourts() {\r\n        return courtRepository.findActiveCourts(); // Use the new query\r\n    }\r\n\r\n    @Override\r\n    public List<Court> findAvailableCourts(LocalDate date, String startTime, String endTime) {\r\n        // 1. 获取所有未归档球场\r\n        List<Court> allCourts = courtRepository.findActiveCourts();\r\n\r\n        // 2. 解析时间\r\n        java.time.LocalTime start = java.time.LocalTime.parse(startTime);\r\n        java.time.LocalTime end = java.time.LocalTime.parse(endTime);\r\n\r\n        // 3. 查询该日期、时间段有冲突的预订（只查有效状态）\r\n        List<Booking> bookings = bookingRepository.findAll();\r\n        Set<Integer> bookedCourtIds = new HashSet<>();\r\n        for (Booking booking : bookings) {\r\n            if (booking.getStatus() != null && booking.getStatus().equalsIgnoreCase(\"CANCELLED\")) continue;\r\n            if (booking.getBookingSlots() == null) continue;\r\n            for (BookingSlot bs : booking.getBookingSlots()) {\r\n                Slot slot = bs.getSlot();\r\n                if (slot == null) continue;\r\n                if (!date.equals(slot.getDate())) continue;\r\n                // 判断时间段是否有重叠\r\n                if (!(end.isBefore(slot.getStartTime()) || start.isAfter(slot.getEndTime()))) {\r\n                    bookedCourtIds.add(slot.getCourtId());\r\n                }\r\n            }\r\n        }\r\n        // 4. 过滤出未被预订的球场\r\n        return allCourts.stream()\r\n                .filter(court -> !bookedCourtIds.contains(court.getId()))\r\n                .collect(Collectors.toList());\r\n    }\r\n\r\n    @Override\r\n    public Court getCourtByIdForMember(Integer id) {\r\n        return courtRepository.findById(id)\r\n                .filter(court ->\r\n                        court.getIsArchived() == null ||\r\n                                !court.getIsArchived()\r\n                )\r\n                .orElse(null);\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/CourtServiceImpl.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/CourtServiceImpl.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/CourtServiceImpl.java	(revision 89327e12854b108d004ebb020d0592b1c618ecaf)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/CourtServiceImpl.java	(date 1754078616042)
@@ -286,10 +286,12 @@
     }
 
     private void addCompensationPoints(Member member) {
-        int currentPoints = member.getPointBalance();
-        member.setPointBalance(currentPoints + 200); // 添加200積分作為補償
+        // Add compensation points to both tier points and reward points
+        member.setTierPointBalance(member.getTierPointBalance() + 200);
+        member.setRewardPointBalance(member.getRewardPointBalance() + 200);
         memberRepository.save(member);
-        log.info("Added 200 compensation points to member ID: {}", member.getId());
+        log.info("Added 200 compensation points to member ID: {} (Tier: {}, Reward: {})", 
+                member.getId(), member.getTierPointBalance(), member.getRewardPointBalance());
     }
 
     @Override
Index: pickleball-frontend/src/utils/dateUtils.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// 全局日期格式化工具函数\r\n\r\n/**\r\n * 将日期格式化为 dd-MM-yyyy 格式\r\n * @param {string|Date} dateString - 日期字符串或Date对象\r\n * @returns {string} 格式化后的日期字符串\r\n */\r\nexport const formatDateToDDMMYYYY = (dateString) => {\r\n  if (!dateString) return '';\r\n  \r\n  // 如果已经是 dd-MM-yyyy 格式，直接返回\r\n  if (typeof dateString === 'string' && dateString.match(/^\\d{2}-\\d{2}-\\d{4}$/)) {\r\n    return dateString;\r\n  }\r\n  \r\n  const date = new Date(dateString);\r\n  if (isNaN(date.getTime())) return '';\r\n  \r\n  const day = String(date.getDate()).padStart(2, '0');\r\n  const month = String(date.getMonth() + 1).padStart(2, '0');\r\n  const year = date.getFullYear();\r\n  \r\n  return `${day}-${month}-${year}`;\r\n};\r\n\r\n/**\r\n * 将 dd-MM-yyyy 格式转换为 yyyy-MM-dd 格式（用于HTML date input）\r\n * @param {string} dateString - dd-MM-yyyy 格式的日期字符串\r\n * @returns {string} yyyy-MM-dd 格式的日期字符串\r\n */\r\nexport const formatDateForHTMLInput = (dateString) => {\r\n  if (!dateString) return '';\r\n  \r\n  const parts = dateString.split('-');\r\n  if (parts.length === 3) {\r\n    const [day, month, year] = parts;\r\n    return `${year}-${month}-${day}`;\r\n  }\r\n  return dateString;\r\n};\r\n\r\n/**\r\n * 将 yyyy-MM-dd 格式转换为 dd-MM-yyyy 格式\r\n * @param {string} dateString - yyyy-MM-dd 格式的日期字符串\r\n * @returns {string} dd-MM-yyyy 格式的日期字符串\r\n */\r\nexport const formatDateFromHTMLInput = (dateString) => {\r\n  if (!dateString) return '';\r\n  \r\n  const parts = dateString.split('-');\r\n  if (parts.length === 3) {\r\n    const [year, month, day] = parts;\r\n    return `${day}-${month}-${year}`;\r\n  }\r\n  return dateString;\r\n};\r\n\r\n/**\r\n * 检查日期是否有效\r\n * @param {string} dateString - 日期字符串\r\n * @returns {boolean} 是否为有效日期\r\n */\r\nexport const isValidDate = (dateString) => {\r\n  if (!dateString) return false;\r\n  const date = new Date(dateString);\r\n  return !isNaN(date.getTime());\r\n}; 
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball-frontend/src/utils/dateUtils.js b/pickleball-frontend/src/utils/dateUtils.js
--- a/pickleball-frontend/src/utils/dateUtils.js	(revision 89327e12854b108d004ebb020d0592b1c618ecaf)
+++ b/pickleball-frontend/src/utils/dateUtils.js	(date 1754073088319)
@@ -56,12 +56,96 @@
 };
 
 /**
- * 检查日期是否有效
- * @param {string} dateString - 日期字符串
- * @returns {boolean} 是否为有效日期
+ * 檢查日期是否有效
+ * @param {string|Date} date - 日期
+ * @returns {boolean} 是否有效
+ */
+export const isValidDate = (date) => {
+  if (!date) return false;
+  
+  try {
+    const d = new Date(date);
+    return !isNaN(d.getTime());
+  } catch (error) {
+    return false;
+  }
+};
+
+/**
+ * 檢查日期是否過期
+ * @param {string|Date} date - 日期
+ * @returns {boolean} 是否過期
  */
-export const isValidDate = (dateString) => {
-  if (!dateString) return false;
-  const date = new Date(dateString);
-  return !isNaN(date.getTime());
+export const isExpired = (date) => {
+  if (!date) return false;
+  
+  try {
+    const d = new Date(date);
+    if (isNaN(d.getTime())) return false;
+    
+    return d < new Date();
+  } catch (error) {
+    return false;
+  }
+};
+
+// 日期處理工具函數
+
+/**
+ * 格式化voucher過期日期
+ * @param {string|Date|null} expiryDate - 過期日期
+ * @returns {string} 格式化後的日期字符串
+ */
+export const formatVoucherExpiryDate = (expiryDate) => {
+  if (!expiryDate) {
+    return 'No expiry';
+  }
+
+  try {
+    // 如果是字符串，嘗試解析
+    let date;
+    if (typeof expiryDate === 'string') {
+      // 處理不同的日期格式
+      if (expiryDate.includes('-')) {
+        // 標準日期格式 yyyy-MM-dd 或 dd-MM-yyyy
+        const parts = expiryDate.split('-');
+        if (parts.length === 3) {
+          if (parts[0].length === 4) {
+            // yyyy-MM-dd 格式
+            date = new Date(expiryDate);
+          } else {
+            // dd-MM-yyyy 格式，轉換為 yyyy-MM-dd
+            date = new Date(`${parts[2]}-${parts[1]}-${parts[0]}`);
+          }
+        } else {
+          date = new Date(expiryDate);
+        }
+      } else {
+        date = new Date(expiryDate);
+      }
+    } else {
+      date = new Date(expiryDate);
+    }
+
+    // 檢查日期是否有效
+    if (isNaN(date.getTime())) {
+      return 'No expiry';
+    }
+
+    // 檢查是否為1970-01-01（默認日期）
+    if (date.getFullYear() === 1970 && date.getMonth() === 0 && date.getDate() === 1) {
+      return 'No expiry';
+    }
+
+    // 格式化日期
+    return date.toLocaleDateString('en-US', {
+      year: 'numeric',
+      month: 'short',
+      day: 'numeric'
+    });
+
+  } catch (error) {
+    console.error('Error formatting date:', error);
+    return 'No expiry';
+  }
 }; 
\ No newline at end of file
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/EscrowAccountService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.service;\r\n\r\nimport com.pickleball_backend.pickleball.entity.Payment;\r\nimport com.pickleball_backend.pickleball.entity.Wallet;\r\nimport com.pickleball_backend.pickleball.entity.User;\r\nimport com.pickleball_backend.pickleball.entity.ClassSession;\r\nimport com.pickleball_backend.pickleball.repository.WalletRepository;\r\nimport com.pickleball_backend.pickleball.repository.PaymentRepository;\r\nimport com.pickleball_backend.pickleball.exception.ResourceNotFoundException;\r\nimport com.pickleball_backend.pickleball.exception.ValidationException;\r\nimport lombok.RequiredArgsConstructor;\r\nimport lombok.extern.slf4j.Slf4j;\r\nimport org.springframework.stereotype.Service;\r\nimport org.springframework.transaction.annotation.Transactional;\r\n\r\nimport java.time.LocalDateTime;\r\nimport java.util.List;\r\n\r\n@Service\r\n@Slf4j\r\n@RequiredArgsConstructor\r\npublic class EscrowAccountService {\r\n\r\n    private final WalletRepository walletRepository;\r\n    private final PaymentRepository paymentRepository;\r\n\r\n    /**\r\n     * 用戶報名課程時，將錢存入託管狀態\r\n     */\r\n    @Transactional\r\n    public void depositToEscrow(User user, double amount, ClassSession session) {\r\n        // 從用戶錢包扣款\r\n        Wallet userWallet = walletRepository.findByMemberId(user.getId())\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"User wallet not found\"));\r\n\r\n        if (userWallet.getBalance() < amount) {\r\n            throw new ValidationException(\"Insufficient wallet balance\");\r\n        }\r\n\r\n        userWallet.setBalance(userWallet.getBalance() - amount);\r\n        walletRepository.save(userWallet);\r\n\r\n        // 創建託管支付記錄\r\n        Payment payment = new Payment();\r\n        payment.setAmount(amount);\r\n        payment.setPaymentDate(LocalDateTime.now());\r\n        payment.setPaymentMethod(\"WALLET\");\r\n        payment.setStatus(\"ESCROWED\"); // 託管狀態\r\n        payment.setPaymentType(\"CLASS_SESSION_ESCROW\");\r\n        payment.setTransactionId(\"SESSION_\" + session.getId() + \"_\" + user.getId()); // 關聯課程和用戶\r\n        payment.setGroupBookingId(\"ESCROW_\" + session.getId() + \"_\" + user.getId()); // 添加 groupBookingId\r\n        paymentRepository.save(payment);\r\n\r\n        log.info(\"Deposited RM{} to escrow for session {} by user {}\", \r\n                amount, session.getId(), user.getId());\r\n    }\r\n\r\n    /**\r\n     * 課程開始時自動分帳：80% 給教練，20% 給平台\r\n     */\r\n    @Transactional\r\n    public void settleClassSession(ClassSession session) {\r\n        // 獲取該課程的所有託管支付（通過 transactionId 關聯）\r\n        List<Payment> escrowedPayments = paymentRepository.findByPaymentTypeAndStatus(\"CLASS_SESSION_ESCROW\", \"ESCROWED\")\r\n                .stream()\r\n                .filter(payment -> payment.getTransactionId() != null && \r\n                        payment.getTransactionId().startsWith(\"SESSION_\" + session.getId() + \"_\"))\r\n                .collect(java.util.stream.Collectors.toList());\r\n        \r\n        if (escrowedPayments.isEmpty()) {\r\n            log.warn(\"No escrowed payments found for session {}\", session.getId());\r\n            return;\r\n        }\r\n\r\n        double totalEscrowedAmount = escrowedPayments.stream()\r\n                .mapToDouble(Payment::getAmount)\r\n                .sum();\r\n\r\n        // 計算分帳金額\r\n        double coachAmount = totalEscrowedAmount * 0.8; // 80% 給教練\r\n        double platformAmount = totalEscrowedAmount * 0.2; // 20% 給平台\r\n\r\n        // 轉給教練\r\n        Wallet coachWallet = walletRepository.findByMemberId(session.getCoach().getId())\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"Coach wallet not found\"));\r\n\r\n        coachWallet.setBalance(coachWallet.getBalance() + coachAmount);\r\n        walletRepository.save(coachWallet);\r\n\r\n        // 創建教練收入記錄\r\n        Payment coachPayment = new Payment();\r\n        coachPayment.setAmount(coachAmount);\r\n        coachPayment.setPaymentDate(LocalDateTime.now());\r\n        coachPayment.setPaymentMethod(\"ESCROW_SETTLEMENT\");\r\n        coachPayment.setStatus(\"COMPLETED\");\r\n        coachPayment.setPaymentType(\"COACH_INCOME\");\r\n        coachPayment.setTransactionId(\"SETTLEMENT_\" + session.getId());\r\n        coachPayment.setGroupBookingId(\"SETTLEMENT_\" + session.getId());\r\n        paymentRepository.save(coachPayment);\r\n\r\n        // 創建平台收入記錄\r\n        Payment platformPayment = new Payment();\r\n        platformPayment.setAmount(platformAmount);\r\n        platformPayment.setPaymentDate(LocalDateTime.now());\r\n        platformPayment.setPaymentMethod(\"ESCROW_SETTLEMENT\");\r\n        platformPayment.setStatus(\"COMPLETED\");\r\n        platformPayment.setPaymentType(\"PLATFORM_FEE\");\r\n        platformPayment.setTransactionId(\"SETTLEMENT_\" + session.getId());\r\n        platformPayment.setGroupBookingId(\"SETTLEMENT_\" + session.getId());\r\n        paymentRepository.save(platformPayment);\r\n\r\n        // 更新所有相關的託管支付狀態\r\n        escrowedPayments.forEach(payment -> {\r\n            payment.setStatus(\"SETTLED\");\r\n            paymentRepository.save(payment);\r\n        });\r\n\r\n        log.info(\"Settled session {}: Coach received RM{}, Platform received RM{}\", \r\n                session.getId(), coachAmount, platformAmount);\r\n    }\r\n\r\n    /**\r\n     * 課程取消時退款給用戶\r\n     */\r\n    @Transactional\r\n    public void refundFromEscrow(User user, double amount, ClassSession session) {\r\n        // 退款到用戶錢包\r\n        Wallet userWallet = walletRepository.findByMemberId(user.getId())\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"User wallet not found\"));\r\n\r\n        userWallet.setBalance(userWallet.getBalance() + amount);\r\n        walletRepository.save(userWallet);\r\n\r\n        // 創建退款記錄\r\n        Payment refund = new Payment();\r\n        refund.setAmount(amount);\r\n        refund.setRefundDate(LocalDateTime.now());\r\n        refund.setPaymentMethod(\"ESCROW_REFUND\");\r\n        refund.setStatus(\"REFUNDED\");\r\n        refund.setPaymentType(\"CLASS_SESSION_REFUND\");\r\n        refund.setTransactionId(\"REFUND_\" + session.getId() + \"_\" + user.getId());\r\n        refund.setGroupBookingId(\"REFUND_\" + session.getId() + \"_\" + user.getId());\r\n        paymentRepository.save(refund);\r\n\r\n        log.info(\"Refunded RM{} from escrow to user {} for cancelled session {}\", \r\n                amount, user.getId(), session.getId());\r\n    }\r\n\r\n    /**\r\n     * 獲取平台託管餘額（所有 ESCROWED 狀態的支付總和）\r\n     */\r\n    public double getPlatformEscrowBalance() {\r\n        return paymentRepository.findByPaymentTypeAndStatus(\"CLASS_SESSION_ESCROW\", \"ESCROWED\")\r\n                .stream()\r\n                .mapToDouble(Payment::getAmount)\r\n                .sum();\r\n    }\r\n\r\n    /**\r\n     * 獲取平台收入總額（所有 PLATFORM_FEE 類型的支付總和）\r\n     */\r\n    public double getPlatformRevenue() {\r\n        return paymentRepository.findByPaymentTypeAndStatus(\"PLATFORM_FEE\", \"COMPLETED\")\r\n                .stream()\r\n                .mapToDouble(Payment::getAmount)\r\n                .sum();\r\n    }\r\n\r\n    /**\r\n     * 獲取教練收入總額（所有 COACH_INCOME 類型的支付總和）\r\n     */\r\n    public double getCoachRevenue() {\r\n        return paymentRepository.findByPaymentTypeAndStatus(\"COACH_INCOME\", \"COMPLETED\")\r\n                .stream()\r\n                .mapToDouble(Payment::getAmount)\r\n                .sum();\r\n    }\r\n} 
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/EscrowAccountService.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/EscrowAccountService.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/EscrowAccountService.java	(revision 89327e12854b108d004ebb020d0592b1c618ecaf)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/EscrowAccountService.java	(date 1754223281562)
@@ -2,10 +2,14 @@
 
 import com.pickleball_backend.pickleball.entity.Payment;
 import com.pickleball_backend.pickleball.entity.Wallet;
+import com.pickleball_backend.pickleball.entity.WalletTransaction;
+import com.pickleball_backend.pickleball.entity.Member;
 import com.pickleball_backend.pickleball.entity.User;
 import com.pickleball_backend.pickleball.entity.ClassSession;
 import com.pickleball_backend.pickleball.repository.WalletRepository;
 import com.pickleball_backend.pickleball.repository.PaymentRepository;
+import com.pickleball_backend.pickleball.repository.WalletTransactionRepository;
+import com.pickleball_backend.pickleball.repository.MemberRepository;
 import com.pickleball_backend.pickleball.exception.ResourceNotFoundException;
 import com.pickleball_backend.pickleball.exception.ValidationException;
 import lombok.RequiredArgsConstructor;
@@ -23,6 +27,8 @@
 
     private final WalletRepository walletRepository;
     private final PaymentRepository paymentRepository;
+    private final WalletTransactionRepository walletTransactionRepository;
+    private final MemberRepository memberRepository;
 
     /**
      * 用戶報名課程時，將錢存入託管狀態
@@ -81,12 +87,53 @@
         double platformAmount = totalEscrowedAmount * 0.2; // 20% 給平台
 
         // 轉給教練
-        Wallet coachWallet = walletRepository.findByMemberId(session.getCoach().getId())
-                .orElseThrow(() -> new ResourceNotFoundException("Coach wallet not found"));
+        User coach = session.getCoach();
+        if (coach == null) {
+            log.error("Coach not found for session: {}", session.getId());
+            return;
+        }
+        
+        Member coachMember = memberRepository.findByUser(coach);
+        if (coachMember == null) {
+            log.error("Coach member not found for coach: {}", coach.getId());
+            return;
+        }
+        
+        // 獲取或創建教練錢包
+        Wallet coachWallet = walletRepository.findByMemberId(coachMember.getId()).orElse(null);
+        if (coachWallet == null) {
+            // 創建教練錢包
+            coachWallet = new Wallet();
+            coachWallet.setMember(coachMember);
+            coachWallet.setBalance(0.00);
+            coachWallet.setFrozenBalance(0.00);
+            coachWallet.setTotalDeposited(0.00);
+            coachWallet.setTotalSpent(0.00);
+            coachWallet.setStatus("ACTIVE");
+            coachWallet = walletRepository.save(coachWallet);
+            log.info("Created new wallet for coach: {}", coach.getId());
+        }
 
-        coachWallet.setBalance(coachWallet.getBalance() + coachAmount);
+        // 更新教練錢包餘額
+        double oldBalance = coachWallet.getBalance();
+        coachWallet.setBalance(oldBalance + coachAmount);
         walletRepository.save(coachWallet);
 
+        // 創建錢包交易記錄
+        WalletTransaction coachTransaction = new WalletTransaction();
+        coachTransaction.setWalletId(coachWallet.getId());
+        coachTransaction.setTransactionType("COACH_INCOME");
+        coachTransaction.setAmount(coachAmount);
+        coachTransaction.setBalanceBefore(oldBalance);
+        coachTransaction.setBalanceAfter(coachWallet.getBalance());
+        coachTransaction.setFrozenBefore(coachWallet.getFrozenBalance());
+        coachTransaction.setFrozenAfter(coachWallet.getFrozenBalance());
+        coachTransaction.setReferenceType("CLASS_SESSION");
+        coachTransaction.setReferenceId(session.getId());
+        coachTransaction.setDescription("Class session revenue: " + session.getTitle() + " (80% share via escrow)");
+        coachTransaction.setStatus("COMPLETED");
+        walletTransactionRepository.save(coachTransaction);
+
         // 創建教練收入記錄
         Payment coachPayment = new Payment();
         coachPayment.setAmount(coachAmount);
@@ -115,8 +162,8 @@
             paymentRepository.save(payment);
         });
 
-        log.info("Settled session {}: Coach received RM{}, Platform received RM{}", 
-                session.getId(), coachAmount, platformAmount);
+        log.info("Successfully settled session {}: Coach {} received RM{}, Platform received RM{}", 
+                session.getId(), coach.getId(), coachAmount, platformAmount);
     }
 
     /**
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/ClassSession.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.entity;\r\n\r\nimport jakarta.persistence.*;\r\nimport lombok.Data;\r\n\r\nimport java.time.LocalDate;\r\nimport java.time.LocalDateTime;\r\nimport java.util.List;\r\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\r\nimport com.fasterxml.jackson.annotation.JsonBackReference;\r\nimport com.fasterxml.jackson.annotation.JsonManagedReference;\r\nimport lombok.Getter;\r\nimport lombok.NoArgsConstructor;\r\nimport lombok.Setter;\r\nimport com.fasterxml.jackson.annotation.JsonIgnore;\r\n\r\n@Entity\r\n@Getter\r\n@Setter\r\n@NoArgsConstructor\r\n@Data\r\n@Table(name = \"classsession\")\r\npublic class ClassSession {\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Integer id;\r\n\r\n    @Column(name = \"start_time\")\r\n    private LocalDateTime startTime;\r\n    private LocalDateTime endTime;\r\n    private String status; // AVAILABLE, BOOKED, CANCELLED, COMPLETED, OPEN, BOOKED_BY_COACH, BOOKED_BY_USER\r\n    private String note;\r\n    @Column(name = \"experience_year\")\r\n    private Integer experienceYear;\r\n\r\n    @Column(name = \"slot_type\")\r\n    private String slotType; // COACH_AVAILABILITY or REGULAR_BOOKING\r\n\r\n    @Column(name = \"created_at\")\r\n    private LocalDateTime createdAt;\r\n\r\n    @Column(name = \"updated_at\")\r\n    private LocalDateTime updatedAt;\r\n\r\n    @ManyToOne\r\n    @JoinColumn(name = \"coach_id\")\r\n    @com.fasterxml.jackson.annotation.JsonIgnore\r\n    private User coach;\r\n\r\n    @ManyToOne\r\n    @JoinColumn(name = \"court_id\")\r\n    @JsonIgnoreProperties(\"sessions\") // 只忽略 sessions，讓 venue 信息能傳遞\r\n    private Court court;\r\n\r\n    @ManyToOne\r\n    @JoinColumn(name = \"player_id\")\r\n    private User player;\r\n\r\n    @OneToOne\r\n    @JoinColumn(name = \"payment_id\") // 這個欄位名要和你的資料庫一致\r\n    private Payment payment;\r\n\r\n    @OneToOne(mappedBy = \"session\", cascade = CascadeType.ALL)\r\n    private CancellationRequest cancellationRequest;\r\n\r\n    // 新增欄位\r\n    @Column(name = \"max_participants\")\r\n    private Integer maxParticipants;\r\n\r\n    @Column(name = \"description\")\r\n    private String description;\r\n\r\n    @Column(name = \"price\", nullable = false)\r\n    private double price = 0.0; // 默認0，強制教練設置價格\r\n\r\n    @Column(name = \"title\", nullable = false)\r\n    private String title;\r\n\r\n    // 新增：當前參與人數\r\n    @Column(name = \"current_participants\")\r\n    private int currentParticipants = 0;\r\n\r\n    @Column(name = \"is_recurring\")\r\n    private Boolean isRecurring; // 是否為固定課程\r\n\r\n    @Column(name = \"recurrence_pattern\")\r\n    private String recurrencePattern; // 週期模式：WEEKLY/MONTHLY\r\n\r\n    @Column(name = \"recurrence_days\")\r\n    private String recurrenceDays; // 週期日：MON,WED,FRI\r\n\r\n    @Column(name = \"recurrence_end_date\")\r\n    private LocalDate recurrenceEndDate; // 週期結束日\r\n\r\n    @Column(name = \"recurring_group_id\")\r\n    private String recurringGroupId; // recurring 課程分組用\r\n\r\n    @ManyToOne\r\n    @JoinColumn(name = \"venue_id\")\r\n    private Venue venue;\r\n\r\n    // 新增：報名關聯\r\n    @OneToMany(mappedBy = \"classSession\")\r\n    private List<ClassRegistration> registrations;\r\n\r\n    // Replacement class: reference to the original cancelled session\r\n    @Column(name = \"replacement_for_session_id\")\r\n    private Integer replacementForSessionId;\r\n\r\n    @Column(name = \"revenue_distributed\")\r\n    private Boolean revenueDistributed = false; // 收入是否已分配\r\n\r\n    // 商務邏輯方法：檢查是否可報名\r\n    public boolean canRegister() {\r\n        return \"AVAILABLE\".equals(status) && currentParticipants < maxParticipants;\r\n    }\r\n\r\n    // 商務邏輯方法：增加參與者\r\n    public void addParticipant() {\r\n        if (currentParticipants < maxParticipants) {\r\n            currentParticipants++;\r\n            if (currentParticipants >= maxParticipants) {\r\n                status = \"FULL\";\r\n            }\r\n        }\r\n    }\r\n\r\n    public Boolean getRecurring() {\r\n        return isRecurring;\r\n    }\r\n\r\n    public void setRecurring(Boolean recurring) {\r\n        isRecurring = recurring;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/ClassSession.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/ClassSession.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/ClassSession.java	(revision 89327e12854b108d004ebb020d0592b1c618ecaf)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/ClassSession.java	(date 1754264917580)
@@ -107,6 +107,10 @@
     @Column(name = "replacement_for_session_id")
     private Integer replacementForSessionId;
 
+    // 新增：是否允許補課
+    @Column(name = "allow_replacement")
+    private Boolean allowReplacement = false;
+
     @Column(name = "revenue_distributed")
     private Boolean revenueDistributed = false; // 收入是否已分配
 
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/ClassSessionService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.service;\r\n\r\nimport com.pickleball_backend.pickleball.dto.ClassSessionDto;\r\nimport com.pickleball_backend.pickleball.dto.RecurringSessionRequestDto;\r\nimport com.pickleball_backend.pickleball.entity.ClassSession;\r\nimport com.pickleball_backend.pickleball.entity.User;\r\nimport com.pickleball_backend.pickleball.exception.*;\r\nimport org.springframework.transaction.annotation.Transactional;\r\n\r\nimport java.time.LocalDateTime;\r\nimport java.util.List;\r\n\r\npublic interface ClassSessionService {\r\n    ClassSession createClassSession(ClassSessionDto sessionDto, com.pickleball_backend.pickleball.entity.User coach) throws ConflictException, ResourceNotFoundException;\r\n    ClassSession updateClassSession(Integer sessionId, ClassSessionDto sessionDto) throws ResourceNotFoundException, ConflictException;\r\n    void cancelClassSession(Integer sessionId, boolean force, String reason) throws ResourceNotFoundException, ConflictException;\r\n    List<ClassSession> getCoachSchedule(Integer coachId, LocalDateTime start, LocalDateTime end);\r\n    boolean registerUserForSession(Integer sessionId, Integer userId) throws ConflictException, ResourceNotFoundException;\r\n    List<ClassSession> getAvailableSessions(Integer courtId, LocalDateTime start, LocalDateTime end);\r\n\r\n    // ClassSessionServiceImpl.java 添加\r\n    @Transactional\r\n    List<ClassSession> createRecurringSessions(RecurringSessionRequestDto request, User coach)\r\n            throws ConflictException, ResourceNotFoundException;\r\n\r\n    // 新增：court 衝突檢查\r\n    boolean hasCourtConflict(Integer courtId, java.time.LocalDateTime start, java.time.LocalDateTime end);\r\n\r\n    // Multi-session registration\r\n    boolean registerUserForMultipleSessions(Integer userId, List<Integer> sessionIds, String paymentMethod) throws ConflictException, ResourceNotFoundException;\r\n\r\n    // 批量查詢課程詳情\r\n    List<ClassSession> getSessionsByIds(List<Integer> sessionIds);\r\n\r\n    // 新增：查詢單一課程\r\n    ClassSession getSessionById(Integer sessionId);\r\n\r\n    // 新增：根據 recurringGroupId 查詢所有 class session\r\n    List<ClassSession> getSessionsByRecurringGroupId(String recurringGroupId);\r\n\r\n    // 新增：手動結算課程\r\n    void settleClassSession(Integer sessionId);\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/ClassSessionService.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/ClassSessionService.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/ClassSessionService.java	(revision 89327e12854b108d004ebb020d0592b1c618ecaf)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/ClassSessionService.java	(date 1754330520579)
@@ -9,10 +9,14 @@
 
 import java.time.LocalDateTime;
 import java.util.List;
+import java.util.Map;
 
 public interface ClassSessionService {
     ClassSession createClassSession(ClassSessionDto sessionDto, com.pickleball_backend.pickleball.entity.User coach) throws ConflictException, ResourceNotFoundException;
     ClassSession updateClassSession(Integer sessionId, ClassSessionDto sessionDto) throws ResourceNotFoundException, ConflictException;
+    
+    // 新增：部分更新課程（只更新特定字段）
+    ClassSession partialUpdateClassSession(Integer sessionId, Map<String, Object> updates) throws ResourceNotFoundException, ConflictException;
     void cancelClassSession(Integer sessionId, boolean force, String reason) throws ResourceNotFoundException, ConflictException;
     List<ClassSession> getCoachSchedule(Integer coachId, LocalDateTime start, LocalDateTime end);
     boolean registerUserForSession(Integer sessionId, Integer userId) throws ConflictException, ResourceNotFoundException;
@@ -27,7 +31,7 @@
     boolean hasCourtConflict(Integer courtId, java.time.LocalDateTime start, java.time.LocalDateTime end);
 
     // Multi-session registration
-    boolean registerUserForMultipleSessions(Integer userId, List<Integer> sessionIds, String paymentMethod) throws ConflictException, ResourceNotFoundException;
+    Map<String, Object> registerUserForMultipleSessions(Integer userId, List<Integer> sessionIds, String paymentMethod, Integer numPaddles, Boolean buyBallSet) throws ConflictException, ResourceNotFoundException;
 
     // 批量查詢課程詳情
     List<ClassSession> getSessionsByIds(List<Integer> sessionIds);
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/ClassSessionController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.controller;\r\n\r\nimport com.pickleball_backend.pickleball.entity.*;\r\nimport com.pickleball_backend.pickleball.dto.ClassSessionDto;\r\nimport com.pickleball_backend.pickleball.dto.ClassRegistrationDto;\r\nimport com.pickleball_backend.pickleball.dto.LeaveRequestDto;\r\nimport com.pickleball_backend.pickleball.exception.ConflictException;\r\nimport com.pickleball_backend.pickleball.exception.ResourceNotFoundException;\r\nimport com.pickleball_backend.pickleball.service.EscrowAccountService;\r\nimport com.pickleball_backend.pickleball.entity.Feedback;\r\nimport com.pickleball_backend.pickleball.repository.FeedbackRepository;\r\nimport com.pickleball_backend.pickleball.service.ClassSessionService;\r\nimport com.pickleball_backend.pickleball.service.EmailService;\r\nimport com.pickleball_backend.pickleball.service.LeaveRequestService;\r\nimport com.pickleball_backend.pickleball.repository.*;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.security.access.prepost.PreAuthorize;\r\nimport org.springframework.security.core.Authentication;\r\nimport org.springframework.security.core.context.SecurityContextHolder;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\nimport java.security.Principal;\r\nimport java.time.LocalDateTime;\r\nimport java.time.OffsetDateTime;\r\nimport java.util.*;\r\nimport java.util.stream.Collectors;\r\nimport org.springframework.http.HttpStatus;\r\n\r\n@RestController\r\n@RequestMapping(\"/api/class-sessions\")\r\npublic class ClassSessionController {\r\n\r\n    private final ClassSessionService classSessionService;\r\n    private final UserRepository userRepository;\r\n    private final ClassRegistrationRepository classRegistrationRepository;\r\n    private final PaymentRepository paymentRepository;\r\n    private final EmailService emailService;\r\n    private final ClassSessionRepository classSessionRepository;\r\n    private final MemberRepository memberRepository;\r\n    private final LeaveRequestService leaveRequestService;\r\n    private final EscrowAccountService escrowAccountService;\r\n    private final FeedbackRepository feedbackRepository;\r\n\r\n    @Autowired\r\n    public ClassSessionController(ClassSessionService classSessionService, UserRepository userRepository, ClassRegistrationRepository classRegistrationRepository, PaymentRepository paymentRepository, EmailService emailService, ClassSessionRepository classSessionRepository, MemberRepository memberRepository, LeaveRequestService leaveRequestService, EscrowAccountService escrowAccountService, FeedbackRepository feedbackRepository) {\r\n        this.classSessionService = classSessionService;\r\n        this.userRepository = userRepository;\r\n        this.classRegistrationRepository = classRegistrationRepository;\r\n        this.paymentRepository = paymentRepository;\r\n        this.emailService = emailService;\r\n        this.classSessionRepository = classSessionRepository;\r\n        this.memberRepository = memberRepository;\r\n        this.leaveRequestService = leaveRequestService;\r\n        this.escrowAccountService = escrowAccountService;\r\n        this.feedbackRepository = feedbackRepository;\r\n    }\r\n\r\n    // 教练创建课程\r\n    @PostMapping\r\n    @PreAuthorize(\"hasAuthority('ROLE_COACH')\")\r\n    public ResponseEntity<?> createClassSession(@RequestBody ClassSessionDto sessionDto, @RequestParam(value = \"makeupForSessionId\", required = false) Integer makeupForSessionId) {\r\n        try {\r\n            String username = SecurityContextHolder.getContext().getAuthentication().getName();\r\n            User coach = userRepository.findByUserAccount_Username(username)\r\n                    .orElseThrow(() -> new ResourceNotFoundException(\"Coach not found\"));\r\n\r\n            // 確保設置了課程類型\r\n            if (sessionDto.getSlotType() == null || sessionDto.getSlotType().isEmpty()) {\r\n                sessionDto.setSlotType(\"COACH_SESSION\");\r\n            }\r\n\r\n            ClassSession session = classSessionService.createClassSession(sessionDto, coach);\r\n\r\n            // 新增：如果是補課，設置 replacementForSessionId 並通知原本 session 的學生\r\n            if (makeupForSessionId != null) {\r\n                session.setReplacementForSessionId(makeupForSessionId);\r\n                classSessionRepository.save(session);\r\n                ClassSession origin = classSessionService.getSessionById(makeupForSessionId);\r\n                if (origin != null && origin.getRegistrations() != null) {\r\n                    for (var reg : origin.getRegistrations()) {\r\n                        if (reg.getMember() != null && reg.getMember().getUser() != null) {\r\n                            String email = reg.getMember().getUser().getEmail();\r\n                            String registerUrl = \"http://localhost:3000/class-session/\" + session.getId();\r\n                            String msg = String.format(\r\n                                \"Dear student,\\n\\n\" +\r\n                                \"Your original class (%s, %s) has been cancelled by the coach.\\n\\n\" +\r\n                                \"A make-up class has been scheduled for you:\\n\" +\r\n                                \"Make-up Time: %s\\n\" +\r\n                                \"Venue: %s\\n\" +\r\n                                \"Class Title: %s\\n\\n\" +\r\n                                \"Please click the link below to register for the make-up class:\\n%s\\n\\n\" +\r\n                                \"If you have any questions, please contact customer service or your coach.\",\r\n                                origin.getTitle(),\r\n                                origin.getStartTime(),\r\n                                session.getStartTime(),\r\n                                session.getVenue() != null ? session.getVenue().getName() : \"\",\r\n                                session.getTitle(),\r\n                                registerUrl\r\n                            );\r\n                            emailService.sendEmail(email, \"Make-up Class Notification - Please Register\", msg);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return ResponseEntity.ok(session);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            return ResponseEntity.badRequest().body(Map.of(\"error\", e.getMessage()));\r\n        }\r\n    }\r\n\r\n    // 用户报名课程\r\n    @PostMapping(\"/{sessionId}/register\")\r\n    @PreAuthorize(\"hasRole('USER')\")\r\n    public ResponseEntity<?> registerForSession(\r\n            @PathVariable Integer sessionId,\r\n            @RequestParam Integer userId) {\r\n        try {\r\n            boolean success = classSessionService.registerUserForSession(sessionId, userId);\r\n            return ResponseEntity.ok(Map.of(\"success\", success));\r\n        } catch (Exception e) {\r\n            return ResponseEntity.badRequest().body(Map.of(\"error\", e.getMessage()));\r\n        }\r\n    }\r\n\r\n    // 一次註冊多堂課\r\n    @PostMapping(\"/register-multi\")\r\n    @PreAuthorize(\"hasRole('USER')\")\r\n    public ResponseEntity<?> registerForMultipleSessions(@RequestBody com.pickleball_backend.pickleball.dto.RegisterMultiSessionRequest request, Principal principal) {\r\n        try {\r\n            String username = principal.getName();\r\n            User user = userRepository.findByUserAccount_Username(username)\r\n                .orElseThrow(() -> new com.pickleball_backend.pickleball.exception.ResourceNotFoundException(\"User not found\"));\r\n            Integer userId = user.getId();\r\n            boolean success = classSessionService.registerUserForMultipleSessions(userId, request.getSessionIds(), request.getPaymentMethod());\r\n            return ResponseEntity.ok(Map.of(\"success\", success));\r\n        } catch (Exception e) {\r\n            return ResponseEntity.badRequest().body(Map.of(\"error\", e.getMessage()));\r\n        }\r\n    }\r\n\r\n    // 获取教练课程表\r\n    @GetMapping(\"/coach/{coachId}\")\r\n    @PreAuthorize(\"hasAuthority('ROLE_COACH')\")\r\n    public ResponseEntity<List<ClassSession>> getCoachSchedule(\r\n            @PathVariable Integer coachId,\r\n            @RequestParam LocalDateTime start,\r\n            @RequestParam LocalDateTime end) {\r\n        List<ClassSession> schedule = classSessionService.getCoachSchedule(coachId, start, end);\r\n        return ResponseEntity.ok(schedule);\r\n    }\r\n\r\n    // 取得可用課程（只顯示教練保留時段在前一天或當天的，否則不顯示）\r\n    @GetMapping(\"/available\")\r\n    public ResponseEntity<List<ClassSessionDto>> getAvailableSessions(\r\n            @RequestParam(required = false) Integer courtId,\r\n            @RequestParam String start,\r\n            @RequestParam String end) {\r\n        \r\n        System.out.println(\"=== getAvailableSessions called ===\");\r\n        System.out.println(\"courtId: \" + courtId);\r\n        System.out.println(\"start: \" + start);\r\n        System.out.println(\"end: \" + end);\r\n        \r\n        // 支援 ISO 格式（含 Z/時區）\r\n        LocalDateTime startDateTime = OffsetDateTime.parse(start).toLocalDateTime();\r\n        LocalDateTime endDateTime = OffsetDateTime.parse(end).toLocalDateTime();\r\n        \r\n        List<ClassSession> sessions = classSessionService.getAvailableSessions(courtId, startDateTime, endDateTime);\r\n        System.out.println(\"Found \" + sessions.size() + \" sessions\");\r\n        \r\n        // 檢查每個 session 的 registrations\r\n        sessions.forEach(s -> {\r\n            System.out.println(\"Session \" + s.getId() + \" has \" + (s.getRegistrations() != null ? s.getRegistrations().size() : 0) + \" registrations\");\r\n            if (s.getRegistrations() != null && !s.getRegistrations().isEmpty()) {\r\n                s.getRegistrations().forEach(r -> {\r\n                    System.out.println(\"  - Registration \" + r.getId() + \" for user \" + \r\n                        (r.getMember() != null && r.getMember().getUser() != null ? r.getMember().getUser().getId() : \"unknown\"));\r\n                });\r\n            }\r\n        });\r\n        \r\n        // 顯示所有非取消/完成的課程，包括 AVAILABLE, CONFIRMED, FULL 等\r\n        List<ClassSession> filtered = sessions.stream()\r\n                .filter(s -> !s.getStatus().equals(\"CANCELLED\") && !s.getStatus().equals(\"COMPLETED\"))\r\n                .toList();\r\n        \r\n        System.out.println(\"=== Session Status Debug ===\");\r\n        System.out.println(\"Total sessions found: \" + sessions.size());\r\n        sessions.forEach(s -> {\r\n            System.out.println(\"Session \" + s.getId() + \" status: \" + s.getStatus());\r\n        });\r\n        System.out.println(\"Filtered sessions: \" + filtered.size());\r\n        filtered.forEach(s -> {\r\n            System.out.println(\"Filtered Session \" + s.getId() + \" status: \" + s.getStatus());\r\n        });\r\n        System.out.println(\"=== End Session Status Debug ===\");\r\n        \r\n        List<ClassSessionDto> dtos = filtered.stream().map(s -> {\r\n            ClassSessionDto dto = new ClassSessionDto();\r\n            dto.setId(s.getId());\r\n            dto.setCoachId(s.getCoach() != null ? s.getCoach().getId() : null);\r\n            dto.setCoachName(s.getCoach() != null ? s.getCoach().getName() : null);\r\n            dto.setCourtId(s.getCourt() != null ? s.getCourt().getId() : null);\r\n            dto.setCourtName(s.getCourt() != null ? s.getCourt().getName() : null);\r\n            dto.setStartTime(s.getStartTime());\r\n            dto.setEndTime(s.getEndTime());\r\n            dto.setMaxParticipants(s.getMaxParticipants());\r\n            dto.setCurrentParticipants(s.getCurrentParticipants());\r\n            dto.setDescription(s.getDescription());\r\n            dto.setStatus(s.getStatus());\r\n            dto.setCreatedAt(s.getCreatedAt());\r\n            dto.setUpdatedAt(s.getUpdatedAt());\r\n            dto.setPrice(s.getPrice());\r\n            dto.setTitle(s.getTitle());\r\n            dto.setSlotType(s.getSlotType());\r\n            dto.setRecurringGroupId(s.getRecurringGroupId());\r\n            // 優先使用直接關聯的 venue，如果沒有則使用 court 的 venue\r\n            Venue venue = s.getVenue();\r\n            if (venue == null && s.getCourt() != null) {\r\n                venue = s.getCourt().getVenue();\r\n            }\r\n            dto.setVenueName(venue != null ? venue.getName() : null);\r\n            dto.setVenueState(venue != null ? venue.getState() : null);\r\n            // 添加 registrations 數據\r\n            if (s.getRegistrations() != null) {\r\n                System.out.println(\"Session \" + s.getId() + \" has \" + s.getRegistrations().size() + \" registrations\");\r\n                dto.setRegistrations(s.getRegistrations().stream().map(reg -> {\r\n                    String userName = reg.getMember() != null && reg.getMember().getUser() != null ? \r\n                        reg.getMember().getUser().getName() : null;\r\n                    Integer userId = reg.getMember() != null && reg.getMember().getUser() != null ? \r\n                        reg.getMember().getUser().getId() : null;\r\n                    Integer memberId = reg.getMember() != null ? reg.getMember().getId() : null;\r\n                    String email = reg.getMember() != null && reg.getMember().getUser() != null ? \r\n                        reg.getMember().getUser().getEmail() : null;\r\n                    String username = reg.getMember() != null && reg.getMember().getUser() != null && \r\n                        reg.getMember().getUser().getUserAccount() != null ? \r\n                        reg.getMember().getUser().getUserAccount().getUsername() : null;\r\n                    \r\n                    System.out.println(\"Registration \" + reg.getId() + \" for user \" + userId + \" (\" + userName + \")\");\r\n                    \r\n                    return new ClassRegistrationDto(\r\n                        reg.getId(), // registrationId\r\n                        memberId,\r\n                        userId,\r\n                        userName, // memberName\r\n                        email,\r\n                        reg.getRegistrationDate(),\r\n                        username,\r\n                        null, // phone - 設為 null\r\n                        reg.getAttendanceStatus() // attendanceStatus\r\n                    );\r\n                }).collect(Collectors.toList()));\r\n            } else {\r\n                System.out.println(\"Session \" + s.getId() + \" has no registrations\");\r\n                dto.setRegistrations(new ArrayList<>()); // 設置為空列表而不是 null\r\n            }\r\n            return dto;\r\n        }).toList();\r\n        \r\n        System.out.println(\"Returning \" + dtos.size() + \" DTOs\");\r\n        // 調試：檢查所有DTO的狀態\r\n        dtos.forEach(dto -> {\r\n            System.out.println(\"Final DTO \" + dto.getId() + \" status: \" + dto.getStatus());\r\n        });\r\n        return ResponseEntity.ok(dtos);\r\n    }\r\n\r\n    // 新增：建立 recurring 課程（多日期）\r\n    @PostMapping(\"/recurring\")\r\n    @PreAuthorize(\"hasAuthority('ROLE_COACH')\")\r\n    public ResponseEntity<?> createRecurringSessions(@RequestBody com.pickleball_backend.pickleball.dto.RecurringSessionRequestDto request) {\r\n        try {\r\n            String username = SecurityContextHolder.getContext().getAuthentication().getName();\r\n            User coach = userRepository.findByUserAccount_Username(username)\r\n                    .orElseThrow(() -> new ResourceNotFoundException(\"Coach not found\"));\r\n            List<ClassSession> sessions = classSessionService.createRecurringSessions(request, coach);\r\n            return ResponseEntity.ok(sessions);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            return ResponseEntity.badRequest().body(Map.of(\"error\", e.getMessage()));\r\n        }\r\n    }\r\n\r\n    // 新增：即時檢查 court 多日期是否有衝突\r\n    @PostMapping(\"/check-court-availability\")\r\n    @PreAuthorize(\"hasAuthority('ROLE_COACH')\")\r\n    public ResponseEntity<?> checkCourtAvailability(@RequestBody Map<String, Object> body) {\r\n        try {\r\n            Integer courtId = (Integer) body.get(\"courtId\");\r\n            List<Map<String, String>> dateTimes = (List<Map<String, String>>) body.get(\"dateTimes\");\r\n            List<String> conflicts = new java.util.ArrayList<>();\r\n            for (Map<String, String> dt : dateTimes) {\r\n                java.time.LocalDateTime start = java.time.LocalDateTime.parse(dt.get(\"startTime\"));\r\n                java.time.LocalDateTime end = java.time.LocalDateTime.parse(dt.get(\"endTime\"));\r\n                boolean conflict = classSessionService.hasCourtConflict(courtId, start, end);\r\n                if (conflict) {\r\n                    conflicts.add(dt.get(\"startTime\"));\r\n                }\r\n            }\r\n            return ResponseEntity.ok(Map.of(\"conflicts\", conflicts));\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            return ResponseEntity.badRequest().body(Map.of(\"error\", e.getMessage()));\r\n        }\r\n    }\r\n\r\n    // 新增：根據 id 批量查詢課程詳情（for receipt）\r\n    @PostMapping(\"/details-batch\")\r\n    @PreAuthorize(\"hasRole('USER')\")\r\n    public ResponseEntity<List<ClassSessionDto>> getSessionDetailsBatch(@RequestBody List<Integer> sessionIds) {\r\n        List<ClassSession> sessions = classSessionService.getSessionsByIds(sessionIds);\r\n        List<ClassSessionDto> dtos = sessions.stream().map(s -> {\r\n            ClassSessionDto dto = new ClassSessionDto();\r\n            dto.setId(s.getId());\r\n            dto.setCoachId(s.getCoach() != null ? s.getCoach().getId() : null);\r\n            dto.setCoachName(s.getCoach() != null ? s.getCoach().getName() : null);\r\n            dto.setCourtId(s.getCourt() != null ? s.getCourt().getId() : null);\r\n            dto.setCourtName(s.getCourt() != null ? s.getCourt().getName() : null);\r\n            dto.setStartTime(s.getStartTime());\r\n            dto.setEndTime(s.getEndTime());\r\n            dto.setMaxParticipants(s.getMaxParticipants());\r\n            dto.setCurrentParticipants(s.getCurrentParticipants());\r\n            dto.setDescription(s.getDescription());\r\n            dto.setStatus(s.getStatus());\r\n            dto.setCreatedAt(s.getCreatedAt());\r\n            dto.setUpdatedAt(s.getUpdatedAt());\r\n            dto.setPrice(s.getPrice());\r\n            dto.setTitle(s.getTitle());\r\n            dto.setSlotType(s.getSlotType());\r\n            dto.setRecurringGroupId(s.getRecurringGroupId());\r\n            // 優先使用直接關聯的 venue，如果沒有則使用 court 的 venue\r\n            Venue venue = s.getVenue();\r\n            if (venue == null && s.getCourt() != null) {\r\n                venue = s.getCourt().getVenue();\r\n            }\r\n            dto.setVenueName(venue != null ? venue.getName() : null);\r\n            dto.setVenueState(venue != null ? venue.getState() : null);\r\n            return dto;\r\n        }).toList();\r\n        return ResponseEntity.ok(dtos);\r\n    }\r\n\r\n    // 新增：查詢單一課程詳情，補課自動加 allowedMemberIds\r\n    @GetMapping(\"/{sessionId}/details\")\r\n    public ResponseEntity<?> getSessionDetails(@PathVariable Integer sessionId) {\r\n        ClassSession session = classSessionService.getSessionById(sessionId);\r\n        if (session == null) return ResponseEntity.notFound().build();\r\n        Map<String, Object> dto = new java.util.HashMap<>();\r\n        dto.put(\"id\", session.getId());\r\n        dto.put(\"title\", session.getTitle());\r\n        dto.put(\"startTime\", session.getStartTime());\r\n        dto.put(\"endTime\", session.getEndTime());\r\n        // 優先使用直接關聯的 venue，如果沒有則使用 court 的 venue\r\n        Venue venue = session.getVenue();\r\n        if (venue == null && session.getCourt() != null) {\r\n            venue = session.getCourt().getVenue();\r\n        }\r\n        dto.put(\"venueName\", venue != null ? venue.getName() : \"\");\r\n        dto.put(\"price\", session.getPrice());\r\n        dto.put(\"replacementForSessionId\", session.getReplacementForSessionId());\r\n        // 如果是補課，補上 allowedMemberIds\r\n        if (session.getReplacementForSessionId() != null) {\r\n            ClassSession origin = classSessionService.getSessionById(session.getReplacementForSessionId());\r\n            if (origin != null && origin.getRegistrations() != null) {\r\n                java.util.List<Integer> allowed = new java.util.ArrayList<>();\r\n                for (var reg : origin.getRegistrations()) {\r\n                    if (reg.getMember() != null && reg.getMember().getUser() != null) {\r\n                        allowed.add(reg.getMember().getUser().getId());\r\n                    }\r\n                }\r\n                dto.put(\"allowedMemberIds\", allowed);\r\n            }\r\n        }\r\n        return ResponseEntity.ok(dto);\r\n    }\r\n\r\n    // 新增：查詢 class session 的學生名單\r\n    @GetMapping(\"/{sessionId}/students\")\r\n    public ResponseEntity<List<Map<String, Object>>> getSessionStudents(@PathVariable Integer sessionId) {\r\n        List<ClassRegistration> regs = classRegistrationRepository.findByClassSessionId(sessionId);\r\n        List<Map<String, Object>> students = regs.stream()\r\n            .filter(reg -> {\r\n                if (reg.getGroupBookingId() != null) {\r\n                    String gbid = reg.getGroupBookingId().trim().toLowerCase();\r\n                    return paymentRepository.findByGroupBookingId(gbid)\r\n                        .map(payment -> \"completed\".equalsIgnoreCase(payment.getStatus().trim()))\r\n                        .orElse(false);\r\n                }\r\n                // fallback: 單堂課\r\n                if (reg.getPayment() != null) {\r\n                    return \"COMPLETED\".equalsIgnoreCase(reg.getPayment().getStatus().trim());\r\n                }\r\n                return false;\r\n            })\r\n            .map(reg -> {\r\n                Map<String, Object> m = new java.util.HashMap<>();\r\n                m.put(\"memberId\", reg.getMember().getId());\r\n                m.put(\"userId\", reg.getMember().getUser().getId());\r\n                m.put(\"name\", reg.getMember().getUser().getName());\r\n                m.put(\"email\", reg.getMember().getUser().getEmail());\r\n                m.put(\"username\", reg.getMember().getUser().getUserAccount() != null ? reg.getMember().getUser().getUserAccount().getUsername() : null);\r\n                m.put(\"phone\", reg.getMember().getUser().getPhone());\r\n                return m;\r\n            }).toList();\r\n        return ResponseEntity.ok(students);\r\n    }\r\n\r\n    // 改為：查詢 recurring_group_id 下所有 class session 及其報名名單\r\n    @GetMapping(\"/recurring/{recurringGroupId}/full-details\")\r\n    public ResponseEntity<?> getRecurringClassFullDetails(@PathVariable String recurringGroupId) {\r\n        List<ClassSession> sessions = classSessionService.getSessionsByRecurringGroupId(recurringGroupId);\r\n        List<ClassSessionDto> dtos = sessions.stream().map(session -> {\r\n            ClassSessionDto dto = new ClassSessionDto();\r\n            dto.setId(session.getId());\r\n            dto.setCoachId(session.getCoach() != null ? session.getCoach().getId() : null);\r\n            dto.setCoachName(session.getCoach() != null ? session.getCoach().getName() : null);\r\n            dto.setCourtId(session.getCourt() != null ? session.getCourt().getId() : null);\r\n            dto.setCourtName(session.getCourt() != null ? session.getCourt().getName() : null);\r\n            dto.setStartTime(session.getStartTime());\r\n            dto.setEndTime(session.getEndTime());\r\n            dto.setMaxParticipants(session.getMaxParticipants());\r\n            dto.setCurrentParticipants(session.getCurrentParticipants());\r\n            dto.setDescription(session.getDescription());\r\n            dto.setStatus(session.getStatus());\r\n            dto.setCreatedAt(session.getCreatedAt());\r\n            dto.setUpdatedAt(session.getUpdatedAt());\r\n            dto.setPrice(session.getPrice());\r\n            dto.setTitle(session.getTitle());\r\n            dto.setSlotType(session.getSlotType());\r\n            dto.setRecurringGroupId(session.getRecurringGroupId());\r\n            // 優先使用直接關聯的 venue，如果沒有則使用 court 的 venue\r\n            Venue venue = session.getVenue();\r\n            if (venue == null && session.getCourt() != null) {\r\n                venue = session.getCourt().getVenue();\r\n            }\r\n            dto.setVenueName(venue != null ? venue.getName() : null);\r\n            dto.setVenueState(venue != null ? venue.getState() : null);\r\n            // 報名名單\r\n            List<ClassRegistrationDto> regDtos = session.getRegistrations() == null ? List.of() : session.getRegistrations().stream().map(reg ->\r\n                new ClassRegistrationDto(\r\n                    reg.getId(), // registrationId\r\n                    reg.getMember() != null ? reg.getMember().getId() : null, // memberId\r\n                    reg.getMember() != null && reg.getMember().getUser() != null ? reg.getMember().getUser().getId() : null, // userId\r\n                    reg.getMember() != null && reg.getMember().getUser() != null ? reg.getMember().getUser().getName() : null, // memberName\r\n                    reg.getMember() != null && reg.getMember().getUser() != null ? reg.getMember().getUser().getEmail() : null, // email\r\n                    reg.getRegistrationDate(), // registrationDate\r\n                    reg.getMember() != null && reg.getMember().getUser() != null && reg.getMember().getUser().getUserAccount() != null ? reg.getMember().getUser().getUserAccount().getUsername() : null, // username\r\n                    reg.getMember() != null && reg.getMember().getUser() != null ? reg.getMember().getUser().getPhone() : null, // phone\r\n                    reg.getAttendanceStatus() // attendanceStatus\r\n                )\r\n            ).toList();\r\n            dto.setRegistrations(regDtos);\r\n            return dto;\r\n        }).toList();\r\n        return ResponseEntity.ok(dtos);\r\n    }\r\n\r\n    // 查詢所有 replacement class for coach\r\n    @GetMapping(\"/replacements\")\r\n    @PreAuthorize(\"hasAuthority('ROLE_COACH')\")\r\n    public ResponseEntity<?> getReplacementClasses(@RequestParam Integer coachId) {\r\n        List<ClassSession> replacements = classSessionRepository.findByReplacementForSessionIdNotNullAndCoachId(coachId);\r\n        return ResponseEntity.ok(replacements);\r\n    }\r\n\r\n    // 測試端點：檢查 registrations 數據\r\n    @GetMapping(\"/test-registrations\")\r\n    public ResponseEntity<?> testRegistrations() {\r\n        List<ClassSession> sessions = classSessionRepository.findAvailableSessionsWithRegistrations(null, LocalDateTime.now(), LocalDateTime.now().plusMonths(1));\r\n        List<Map<String, Object>> result = sessions.stream().map(s -> {\r\n            Map<String, Object> map = new HashMap<>();\r\n            map.put(\"sessionId\", s.getId());\r\n            map.put(\"title\", s.getTitle());\r\n            map.put(\"registrationsCount\", s.getRegistrations() != null ? s.getRegistrations().size() : 0);\r\n            if (s.getRegistrations() != null && !s.getRegistrations().isEmpty()) {\r\n                map.put(\"registrations\", s.getRegistrations().stream().map(reg -> {\r\n                    Map<String, Object> regMap = new HashMap<>();\r\n                    regMap.put(\"registrationId\", reg.getId());\r\n                    regMap.put(\"userId\", reg.getMember() != null && reg.getMember().getUser() != null ? reg.getMember().getUser().getId() : null);\r\n                    regMap.put(\"userName\", reg.getMember() != null && reg.getMember().getUser() != null ? reg.getMember().getUser().getName() : null);\r\n                    return regMap;\r\n                }).collect(Collectors.toList()));\r\n            }\r\n            return map;\r\n        }).collect(Collectors.toList());\r\n        return ResponseEntity.ok(result);\r\n    }\r\n\r\n    // 測試端點：手動創建一個 registration\r\n    @PostMapping(\"/test-create-registration\")\r\n    public ResponseEntity<?> testCreateRegistration(@RequestParam Integer sessionId, @RequestParam Integer userId) {\r\n        try {\r\n            boolean success = classSessionService.registerUserForSession(sessionId, userId);\r\n            return ResponseEntity.ok(Map.of(\"success\", success, \"message\", \"Registration created successfully\"));\r\n        } catch (Exception e) {\r\n            return ResponseEntity.badRequest().body(Map.of(\"error\", e.getMessage()));\r\n        }\r\n    }\r\n\r\n    // 測試端點：檢查所有 registrations\r\n    @GetMapping(\"/test-all-registrations\")\r\n    public ResponseEntity<?> testAllRegistrations() {\r\n        List<ClassRegistration> allRegistrations = classRegistrationRepository.findAll();\r\n        List<Map<String, Object>> result = allRegistrations.stream().map(reg -> {\r\n            Map<String, Object> map = new HashMap<>();\r\n            map.put(\"registrationId\", reg.getId());\r\n            map.put(\"sessionId\", reg.getClassSession() != null ? reg.getClassSession().getId() : null);\r\n            map.put(\"memberId\", reg.getMember() != null ? reg.getMember().getId() : null);\r\n            map.put(\"userId\", reg.getMember() != null && reg.getMember().getUser() != null ? reg.getMember().getUser().getId() : null);\r\n            map.put(\"userName\", reg.getMember() != null && reg.getMember().getUser() != null ? reg.getMember().getUser().getName() : null);\r\n            map.put(\"registrationDate\", reg.getRegistrationDate());\r\n            return map;\r\n        }).collect(Collectors.toList());\r\n        return ResponseEntity.ok(result);\r\n    }\r\n\r\n    // 測試端點：創建一個測試 registration\r\n    @PostMapping(\"/test-create-sample-registration\")\r\n    public ResponseEntity<?> testCreateSampleRegistration() {\r\n        try {\r\n            // 獲取第一個可用的 session\r\n            List<ClassSession> sessions = classSessionRepository.findAvailableSessionsWithRegistrations(null, LocalDateTime.now(), LocalDateTime.now().plusMonths(1));\r\n            if (sessions.isEmpty()) {\r\n                return ResponseEntity.badRequest().body(Map.of(\"error\", \"No available sessions found\"));\r\n            }\r\n            \r\n            ClassSession session = sessions.get(0);\r\n            \r\n            // 獲取第一個用戶\r\n            List<User> users = userRepository.findAll();\r\n            if (users.isEmpty()) {\r\n                return ResponseEntity.badRequest().body(Map.of(\"error\", \"No users found\"));\r\n            }\r\n            \r\n            User user = users.get(0);\r\n            Member member = memberRepository.findByUserId(user.getId());\r\n            if (member == null) {\r\n                return ResponseEntity.badRequest().body(Map.of(\"error\", \"User is not a member\"));\r\n            }\r\n            \r\n            // 創建 registration\r\n            ClassRegistration registration = new ClassRegistration();\r\n            registration.setClassSession(session);\r\n            registration.setMember(member);\r\n            registration.setRegistrationDate(LocalDateTime.now());\r\n            classRegistrationRepository.save(registration);\r\n            \r\n            // 更新 session 人數\r\n            session.setCurrentParticipants(session.getCurrentParticipants() + 1);\r\n            classSessionRepository.save(session);\r\n            \r\n            return ResponseEntity.ok(Map.of(\r\n                \"success\", true,\r\n                \"message\", \"Test registration created\",\r\n                \"sessionId\", session.getId(),\r\n                \"userId\", user.getId(),\r\n                \"userName\", user.getName()\r\n            ));\r\n        } catch (Exception e) {\r\n            return ResponseEntity.badRequest().body(Map.of(\"error\", e.getMessage()));\r\n        }\r\n    }\r\n\r\n    // 測試端點：檢查特定 session 的 registrations\r\n    @GetMapping(\"/test-session-registrations/{sessionId}\")\r\n    public ResponseEntity<?> testSessionRegistrations(@PathVariable Integer sessionId) {\r\n        try {\r\n            ClassSession session = classSessionRepository.findById(sessionId).orElse(null);\r\n            if (session == null) {\r\n                return ResponseEntity.badRequest().body(Map.of(\"error\", \"Session not found\"));\r\n            }\r\n            \r\n            Map<String, Object> result = new HashMap<>();\r\n            result.put(\"sessionId\", session.getId());\r\n            result.put(\"title\", session.getTitle());\r\n            result.put(\"registrationsCount\", session.getRegistrations() != null ? session.getRegistrations().size() : 0);\r\n            \r\n            if (session.getRegistrations() != null && !session.getRegistrations().isEmpty()) {\r\n                result.put(\"registrations\", session.getRegistrations().stream().map(reg -> {\r\n                    Map<String, Object> regMap = new HashMap<>();\r\n                    regMap.put(\"registrationId\", reg.getId());\r\n                    regMap.put(\"userId\", reg.getMember() != null && reg.getMember().getUser() != null ? reg.getMember().getUser().getId() : null);\r\n                    regMap.put(\"userName\", reg.getMember() != null && reg.getMember().getUser() != null ? reg.getMember().getUser().getName() : null);\r\n                    regMap.put(\"memberId\", reg.getMember() != null ? reg.getMember().getId() : null);\r\n                    return regMap;\r\n                }).collect(Collectors.toList()));\r\n            }\r\n            \r\n            return ResponseEntity.ok(result);\r\n        } catch (Exception e) {\r\n            return ResponseEntity.badRequest().body(Map.of(\"error\", e.getMessage()));\r\n        }\r\n    }\r\n\r\n    // 測試端點：檢查當前用戶的 token 信息\r\n    @GetMapping(\"/test-current-user\")\r\n    public ResponseEntity<?> testCurrentUser() {\r\n        try {\r\n            String username = SecurityContextHolder.getContext().getAuthentication().getName();\r\n            User user = userRepository.findByUserAccount_Username(username)\r\n                    .orElseThrow(() -> new ResourceNotFoundException(\"User not found\"));\r\n            \r\n            Map<String, Object> result = new HashMap<>();\r\n            result.put(\"userId\", user.getId());\r\n            result.put(\"userName\", user.getName());\r\n            result.put(\"username\", username);\r\n            result.put(\"email\", user.getEmail());\r\n            \r\n            // 檢查是否是 member\r\n            Member member = memberRepository.findByUserId(user.getId());\r\n            if (member != null) {\r\n                result.put(\"isMember\", true);\r\n                result.put(\"memberId\", member.getId());\r\n            } else {\r\n                result.put(\"isMember\", false);\r\n            }\r\n            \r\n            return ResponseEntity.ok(result);\r\n        } catch (Exception e) {\r\n            return ResponseEntity.badRequest().body(Map.of(\"error\", e.getMessage()));\r\n        }\r\n    }\r\n\r\n    // 獲取所有教練的資料\r\n    @GetMapping(\"/coaches\")\r\n    public ResponseEntity<?> getAllCoaches() {\r\n        try {\r\n            System.out.println(\"=== getAllCoaches called ===\");\r\n            \r\n            // 獲取所有用戶類型為 COACH 的用戶\r\n            List<User> coaches = userRepository.findByUserTypeIn(List.of(\"COACH\"));\r\n            System.out.println(\"Found \" + coaches.size() + \" coaches\");\r\n            \r\n            coaches.forEach(coach -> {\r\n                System.out.println(\"Coach: \" + coach.getName() + \" (ID: \" + coach.getId() + \", Type: \" + coach.getUserType() + \")\");\r\n            });\r\n            \r\n            List<Map<String, Object>> coachData = coaches.stream().map(coach -> {\r\n                Map<String, Object> coachInfo = new HashMap<>();\r\n                coachInfo.put(\"id\", coach.getId());\r\n                coachInfo.put(\"name\", coach.getName());\r\n                coachInfo.put(\"email\", coach.getEmail());\r\n                coachInfo.put(\"rating\", 4.5); // 默認評分\r\n                coachInfo.put(\"avatar\", coach.getName().substring(0, 2).toUpperCase()); // 取名字前兩個字母\r\n                \r\n                // 獲取教練的場地信息 - 使用更寬泛的查詢\r\n                                        List<ClassSession> allSessions = classSessionRepository.findAll();\r\n                        List<ClassSession> coachSessions = allSessions.stream()\r\n                            .filter(s -> s.getCoach() != null && s.getCoach().getId().equals(coach.getId()))\r\n                            .collect(Collectors.toList());\r\n\r\n                        // 計算可用的課程數量\r\n                        long availableSessionsCount = coachSessions.stream()\r\n                            .filter(s -> \"AVAILABLE\".equals(s.getStatus()))\r\n                            .count();\r\n\r\n                        System.out.println(\"Coach \" + coach.getName() + \" has \" + coachSessions.size() + \" total sessions, \" + availableSessionsCount + \" available\");\r\n                \r\n                // 獲取場地信息\r\n                Set<String> venues = new HashSet<>();\r\n                Set<String> states = new HashSet<>();\r\n                \r\n                coachSessions.forEach(session -> {\r\n                    if (session.getVenue() != null) {\r\n                        venues.add(session.getVenue().getName());\r\n                        states.add(session.getVenue().getState());\r\n                        System.out.println(\"  - Session \" + session.getId() + \" at venue: \" + session.getVenue().getName() + \", state: \" + session.getVenue().getState());\r\n                    } else if (session.getCourt() != null && session.getCourt().getVenue() != null) {\r\n                        venues.add(session.getCourt().getVenue().getName());\r\n                        states.add(session.getCourt().getVenue().getState());\r\n                        System.out.println(\"  - Session \" + session.getId() + \" at court venue: \" + session.getCourt().getVenue().getName() + \", state: \" + session.getCourt().getVenue().getState());\r\n                    }\r\n                });\r\n                \r\n                String venue = venues.isEmpty() ? \"Sunway Arena\" : venues.iterator().next();\r\n                String state = states.isEmpty() ? \"Selangor\" : states.iterator().next();\r\n                \r\n                coachInfo.put(\"venue\", venue);\r\n                coachInfo.put(\"state\", state);\r\n                coachInfo.put(\"specialties\", List.of(\"Pickleball\", \"Training\")); // 默認專長\r\n                coachInfo.put(\"sessionsCount\", (int) availableSessionsCount);\r\n                \r\n                System.out.println(\"Coach info: \" + coachInfo);\r\n                return coachInfo;\r\n            }).collect(Collectors.toList());\r\n            \r\n            System.out.println(\"Returning \" + coachData.size() + \" coaches\");\r\n            return ResponseEntity.ok(coachData);\r\n        } catch (Exception e) {\r\n            System.out.println(\"Error in getAllCoaches: \" + e.getMessage());\r\n            e.printStackTrace();\r\n            return ResponseEntity.badRequest().body(Map.of(\"error\", e.getMessage()));\r\n        }\r\n    }\r\n\r\n    // 獲取用戶的所有課程\r\n    @GetMapping(\"/user/{userId}\")\r\n    @PreAuthorize(\"hasRole('USER')\")\r\n    public ResponseEntity<?> getUserSessions(@PathVariable Integer userId) {\r\n        try {\r\n            System.out.println(\"=== getUserSessions called for userId: \" + userId + \" ===\");\r\n            \r\n            // 檢查用戶是否存在\r\n            User user = userRepository.findById(userId).orElse(null);\r\n            if (user == null) {\r\n                return ResponseEntity.badRequest().body(Map.of(\"error\", \"User not found\"));\r\n            }\r\n            \r\n            // 獲取用戶的所有課程註冊\r\n            List<ClassRegistration> registrations = classRegistrationRepository.findByMemberUserId(userId);\r\n            System.out.println(\"Found \" + registrations.size() + \" registrations for user \" + userId);\r\n            \r\n            List<Map<String, Object>> userSessions = registrations.stream().map(reg -> {\r\n                ClassSession session = reg.getClassSession();\r\n                Map<String, Object> sessionInfo = new HashMap<>();\r\n                \r\n                sessionInfo.put(\"id\", session.getId());\r\n                sessionInfo.put(\"title\", session.getTitle());\r\n                sessionInfo.put(\"startTime\", session.getStartTime());\r\n                sessionInfo.put(\"endTime\", session.getEndTime());\r\n                sessionInfo.put(\"status\", session.getStatus());\r\n                sessionInfo.put(\"price\", session.getPrice());\r\n                sessionInfo.put(\"recurringGroupId\", session.getRecurringGroupId());\r\n                \r\n                // 教練信息\r\n                if (session.getCoach() != null) {\r\n                    sessionInfo.put(\"coachName\", session.getCoach().getName());\r\n                    sessionInfo.put(\"coachId\", session.getCoach().getId());\r\n                }\r\n                \r\n                // 場地信息\r\n                if (session.getVenue() != null) {\r\n                    sessionInfo.put(\"venue\", session.getVenue().getName());\r\n                    sessionInfo.put(\"state\", session.getVenue().getState());\r\n                } else if (session.getCourt() != null && session.getCourt().getVenue() != null) {\r\n                    sessionInfo.put(\"venue\", session.getCourt().getVenue().getName());\r\n                    sessionInfo.put(\"state\", session.getCourt().getVenue().getState());\r\n                }\r\n                \r\n                // 球場信息\r\n                if (session.getCourt() != null) {\r\n                    sessionInfo.put(\"court\", session.getCourt().getName());\r\n                }\r\n                \r\n                // 註冊信息\r\n                sessionInfo.put(\"registrationId\", reg.getId());\r\n                sessionInfo.put(\"registrationDate\", reg.getRegistrationDate());\r\n                sessionInfo.put(\"attendanceStatus\", reg.getAttendanceStatus());\r\n                \r\n                // 教練評論（如果有）\r\n                sessionInfo.put(\"coachComment\", reg.getCoachComment());\r\n                sessionInfo.put(\"rating\", reg.getRating());\r\n                \r\n                System.out.println(\"Session \" + session.getId() + \" for user \" + userId + \": \" + sessionInfo);\r\n                return sessionInfo;\r\n            }).collect(Collectors.toList());\r\n            \r\n            System.out.println(\"Returning \" + userSessions.size() + \" sessions for user \" + userId);\r\n            return ResponseEntity.ok(userSessions);\r\n            \r\n        } catch (Exception e) {\r\n            System.out.println(\"Error in getUserSessions: \" + e.getMessage());\r\n            e.printStackTrace();\r\n            return ResponseEntity.badRequest().body(Map.of(\"error\", e.getMessage()));\r\n        }\r\n    }\r\n\r\n    @PostMapping(\"/{sessionId}/leave-request\")\r\n    @PreAuthorize(\"hasRole('USER')\")\r\n    public ResponseEntity<?> submitLeaveRequest(@PathVariable Integer sessionId, @RequestBody Map<String, Object> leaveData) {\r\n        try {\r\n            System.out.println(\"=== submitLeaveRequest called for sessionId: \" + sessionId + \" ===\");\r\n            System.out.println(\"Leave data: \" + leaveData);\r\n            \r\n            // Get the current user from JWT token\r\n            Authentication authentication = SecurityContextHolder.getContext().getAuthentication();\r\n            String username = authentication.getName();\r\n            System.out.println(\"Authentication name: \" + username);\r\n            \r\n            // Try to find user by username first, then by email\r\n            User user = userRepository.findByUserAccount_Username(username).orElse(null);\r\n            if (user == null) {\r\n                user = userRepository.findByEmail(username).orElse(null);\r\n            }\r\n            \r\n            if (user == null) {\r\n                System.out.println(\"User not found for username/email: \" + username);\r\n                return ResponseEntity.badRequest().body(Map.of(\"error\", \"User not found\"));\r\n            }\r\n            \r\n            System.out.println(\"Found user: \" + user.getId() + \" - \" + user.getName());\r\n            \r\n            // Find the class session\r\n            ClassSession session = classSessionRepository.findById(sessionId)\r\n                    .orElseThrow(() -> new IllegalArgumentException(\"Session not found\"));\r\n            \r\n            if (session.getCoach() == null) {\r\n                return ResponseEntity.badRequest().body(Map.of(\"error\", \"Session has no coach assigned\"));\r\n            }\r\n            \r\n            System.out.println(\"Found session: \" + session.getId() + \" with coach: \" + session.getCoach().getId());\r\n            \r\n            // Create leave request using the new system\r\n            String reason = (String) leaveData.get(\"reason\");\r\n            \r\n            if (reason != null && !reason.trim().isEmpty()) {\r\n                // Create leave request in the leave_request table\r\n                LeaveRequestDto leaveRequest = leaveRequestService.createLeaveRequest(\r\n                    user.getId(),\r\n                    session.getCoach().getId(),\r\n                    sessionId,\r\n                    session.getStartTime(), // Use session start time as preferred date\r\n                    reason,\r\n                    \"PENDING\" // Default request type\r\n                );\r\n                \r\n                System.out.println(\"Leave request created successfully: \" + leaveRequest.getId());\r\n                return ResponseEntity.ok(Map.of(\"message\", \"Leave request submitted successfully\", \"leaveRequestId\", leaveRequest.getId()));\r\n            } else {\r\n                return ResponseEntity.badRequest().body(Map.of(\"error\", \"Reason is required\"));\r\n            }\r\n            \r\n        } catch (Exception e) {\r\n            System.out.println(\"Error in submitLeaveRequest: \" + e.getMessage());\r\n            e.printStackTrace();\r\n            return ResponseEntity.badRequest().body(Map.of(\"error\", e.getMessage()));\r\n        }\r\n    }\r\n\r\n    @PostMapping(\"/{sessionId}/review\")\r\n    @PreAuthorize(\"hasRole('USER')\")\r\n    public ResponseEntity<?> submitReview(@PathVariable Integer sessionId, @RequestBody Map<String, Object> reviewData) {\r\n        try {\r\n            System.out.println(\"=== submitReview called for sessionId: \" + sessionId + \" ===\");\r\n            System.out.println(\"Review data: \" + reviewData);\r\n            \r\n            // Get the current user from JWT token\r\n            Authentication authentication = SecurityContextHolder.getContext().getAuthentication();\r\n            String username = authentication.getName();\r\n            System.out.println(\"Current user from JWT: \" + username);\r\n            \r\n            // Try to find user by username first, then by email\r\n            User user = userRepository.findByUserAccount_Username(username).orElse(null);\r\n            if (user == null) {\r\n                user = userRepository.findByEmail(username).orElse(null);\r\n            }\r\n            \r\n            if (user == null) {\r\n                System.out.println(\"User not found for username/email: \" + username);\r\n                return ResponseEntity.badRequest().body(Map.of(\"error\", \"User not found for: \" + username));\r\n            }\r\n\r\n            System.out.println(\"Found user: \" + user.getId() + \" - \" + user.getName());\r\n\r\n            // Find the class registration for this user and session\r\n            ClassRegistration registration = classRegistrationRepository.findByMemberUserIdAndClassSessionId(user.getId(), sessionId);\r\n            \r\n            if (registration == null) {\r\n                System.out.println(\"Registration not found for user \" + user.getId() + \" and session \" + sessionId);\r\n                return ResponseEntity.badRequest().body(Map.of(\"error\", \"Registration not found for this session. Please make sure you are registered for this class.\"));\r\n            }\r\n            \r\n            System.out.println(\"Found registration: \" + registration.getId());\r\n\r\n            // Get the class session to find the coach\r\n            ClassSession session = classSessionRepository.findById(sessionId).orElse(null);\r\n            if (session == null) {\r\n                return ResponseEntity.badRequest().body(Map.of(\"error\", \"Class session not found\"));\r\n            }\r\n\r\n            // Update the registration with review data\r\n            Integer rating = (Integer) reviewData.get(\"rating\");\r\n            String comment = (String) reviewData.get(\"comment\");\r\n            \r\n            if (rating != null && rating >= 1 && rating <= 5) {\r\n                registration.setRating(rating);\r\n                System.out.println(\"Setting rating: \" + rating);\r\n            }\r\n            \r\n            if (comment != null) {\r\n                registration.setCoachComment(comment);\r\n                System.out.println(\"Setting comment: \" + comment);\r\n            }\r\n            \r\n            classRegistrationRepository.save(registration);\r\n            \r\n            // 同时创建feedback记录（如果session有教练）\r\n            if (session.getCoach() != null) {\r\n                try {\r\n                    // 创建feedback记录\r\n                    Feedback feedback = new Feedback();\r\n                    feedback.setTargetType(Feedback.TargetType.COACH);\r\n                    feedback.setTargetId(session.getCoach().getId());\r\n                    feedback.setRating(rating);\r\n                    feedback.setReview(comment);\r\n                    feedback.setUser(user);\r\n                    feedback.setCreatedAt(LocalDateTime.now());\r\n\r\n                    // 保存feedback记录\r\n                    feedbackRepository.save(feedback);\r\n                    System.out.println(\"Feedback record created for coach: \" + session.getCoach().getId());\r\n                } catch (Exception feedbackError) {\r\n                    System.out.println(\"Warning: Failed to create feedback record: \" + feedbackError.getMessage());\r\n                    // 不阻止主要流程，只是记录警告\r\n                }\r\n            }\r\n\r\n            System.out.println(\"Review submitted successfully for session \" + sessionId + \" by user \" + user.getId());\r\n            return ResponseEntity.ok(Map.of(\"message\", \"Review submitted successfully\"));\r\n            \r\n        } catch (Exception e) {\r\n            System.out.println(\"Error in submitReview: \" + e.getMessage());\r\n            e.printStackTrace();\r\n            return ResponseEntity.badRequest().body(Map.of(\"error\", \"Error submitting review: \" + e.getMessage()));\r\n        }\r\n    }\r\n\r\n    // 獲取教練可用時間（供用戶查看補課時間）\r\n    @GetMapping(\"/coach/{coachId}/available-times\")\r\n    @PreAuthorize(\"hasRole('USER')\")\r\n    public ResponseEntity<?> getCoachAvailableTimes(\r\n            @PathVariable Integer coachId,\r\n            @RequestParam String start,\r\n            @RequestParam String end) {\r\n        try {\r\n            System.out.println(\"=== getCoachAvailableTimes called for coachId: \" + coachId + \" ===\");\r\n            System.out.println(\"Start: \" + start + \", End: \" + end);\r\n            \r\n            // 解析日期時間\r\n            LocalDateTime startDateTime = OffsetDateTime.parse(start).toLocalDateTime();\r\n            LocalDateTime endDateTime = OffsetDateTime.parse(end).toLocalDateTime();\r\n            \r\n            // 獲取教練在指定時間範圍內的可用課程\r\n            List<ClassSession> availableSessions = classSessionService.getCoachSchedule(coachId, startDateTime, endDateTime);\r\n            \r\n            // 過濾出狀態為 AVAILABLE 的課程\r\n            List<ClassSession> availableTimes = availableSessions.stream()\r\n                .filter(session -> \"AVAILABLE\".equals(session.getStatus()))\r\n                .collect(Collectors.toList());\r\n            \r\n            System.out.println(\"Found \" + availableTimes.size() + \" available times for coach \" + coachId);\r\n            \r\n            // 轉換為 DTO\r\n            List<Map<String, Object>> result = availableTimes.stream().map(session -> {\r\n                Map<String, Object> sessionMap = new HashMap<>();\r\n                sessionMap.put(\"id\", session.getId());\r\n                sessionMap.put(\"startTime\", session.getStartTime());\r\n                sessionMap.put(\"endTime\", session.getEndTime());\r\n                sessionMap.put(\"title\", session.getTitle());\r\n                sessionMap.put(\"description\", session.getDescription());\r\n                sessionMap.put(\"price\", session.getPrice());\r\n                // 優先使用直接關聯的 venue，如果沒有則使用 court 的 venue\r\n                Venue venue = session.getVenue();\r\n                if (venue == null && session.getCourt() != null) {\r\n                    venue = session.getCourt().getVenue();\r\n                }\r\n                sessionMap.put(\"venue\", venue != null ? venue.getName() : null);\r\n                sessionMap.put(\"state\", venue != null ? venue.getState() : null);\r\n                sessionMap.put(\"court\", session.getCourt() != null ? session.getCourt().getName() : null);\r\n                return sessionMap;\r\n            }).collect(Collectors.toList());\r\n            \r\n            return ResponseEntity.ok(result);\r\n            \r\n        } catch (Exception e) {\r\n            System.out.println(\"Error in getCoachAvailableTimes: \" + e.getMessage());\r\n            e.printStackTrace();\r\n            return ResponseEntity.badRequest().body(Map.of(\"error\", e.getMessage()));\r\n        }\r\n    }\r\n\r\n    @PutMapping(\"/{sessionId}\")\r\n    @PreAuthorize(\"hasAuthority('ROLE_COACH')\")\r\n    public ResponseEntity<?> updateClassSession(\r\n            @PathVariable Integer sessionId,\r\n            @RequestBody ClassSessionDto sessionDto) {\r\n        try {\r\n            ClassSession updated = classSessionService.updateClassSession(sessionId, sessionDto);\r\n            return ResponseEntity.ok(updated);\r\n        } catch (Exception e) {\r\n            return ResponseEntity.badRequest().body(Map.of(\"error\", e.getMessage()));\r\n        }\r\n    }\r\n\r\n    // 教練取消課程\r\n    @PutMapping(\"/{sessionId}/cancel\")\r\n    @PreAuthorize(\"hasAuthority('ROLE_COACH')\")\r\n    public ResponseEntity<?> cancelClassSession(\r\n        @PathVariable Integer sessionId,\r\n        @RequestParam(value = \"force\", defaultValue = \"false\") boolean force,\r\n        @RequestParam(value = \"reason\", required = false) String reason\r\n    ) {\r\n        try {\r\n            classSessionService.cancelClassSession(sessionId, force, reason);\r\n            return ResponseEntity.ok(Map.of(\"success\", true));\r\n        } catch (Exception e) {\r\n            return ResponseEntity.badRequest().body(Map.of(\"error\", e.getMessage()));\r\n        }\r\n    }\r\n\r\n    // 用戶取消課程（取消自己的預訂）\r\n    @PutMapping(\"/{sessionId}/cancel-registration\")\r\n    @PreAuthorize(\"hasRole('USER')\")\r\n    public ResponseEntity<?> cancelUserRegistration(\r\n        @PathVariable Integer sessionId,\r\n        @RequestParam(value = \"force\", defaultValue = \"false\") boolean force,\r\n        @RequestParam(value = \"reason\", required = false) String reason,\r\n        Principal principal\r\n    ) {\r\n        try {\r\n            // 獲取當前用戶\r\n            User user = userRepository.findByUserAccount_Username(principal.getName())\r\n                    .orElseThrow(() -> new ResourceNotFoundException(\"User not found\"));\r\n            \r\n            // 檢查用戶是否已預訂此課程\r\n            ClassRegistration registration = classRegistrationRepository\r\n                    .findByMemberUserIdAndClassSessionId(user.getId(), sessionId);\r\n            if (registration == null) {\r\n                throw new ResourceNotFoundException(\"Registration not found\");\r\n            }\r\n            \r\n            // 檢查24小時限制\r\n            ClassSession session = registration.getClassSession();\r\n            LocalDateTime now = LocalDateTime.now();\r\n            long hoursUntilSession = java.time.temporal.ChronoUnit.HOURS.between(now, session.getStartTime());\r\n            \r\n            if (hoursUntilSession <= 24 && !force) {\r\n                throw new ConflictException(\"Cannot cancel class session within 24 hours of start time. Use force=true to override.\");\r\n            }\r\n            \r\n            // 使用託管帳戶退款\r\n            Member member = registration.getMember();\r\n            escrowAccountService.refundFromEscrow(user, session.getPrice(), session);\r\n            \r\n            // 發送email通知\r\n            String email = user.getEmail();\r\n            String subject = \"Class Session Cancellation Confirmed\";\r\n            String content = String.format(\r\n                \"Dear %s,\\n\\n\" +\r\n                \"Your class session cancellation has been confirmed.\\n\\n\" +\r\n                \"Session Details:\\n\" +\r\n                \"- Title: %s\\n\" +\r\n                \"- Date: %s\\n\" +\r\n                \"- Time: %s - %s\\n\" +\r\n                \"- Coach: %s\\n\" +\r\n                \"- Venue: %s\\n\\n\" +\r\n                \"Refund Amount: RM %.2f\\n\" +\r\n                \"The refund has been processed to your wallet.\\n\\n\" +\r\n                \"Thank you,\\n\" +\r\n                \"The Pickleball Management Team\",\r\n                user.getName(),\r\n                session.getTitle(),\r\n                session.getStartTime().toLocalDate(),\r\n                session.getStartTime().toLocalTime(),\r\n                session.getEndTime().toLocalTime(),\r\n                session.getCoach() != null ? session.getCoach().getName() : \"N/A\",\r\n                session.getVenue() != null ? session.getVenue().getName() : \r\n                (session.getCourt() != null && session.getCourt().getVenue() != null ? \r\n                 session.getCourt().getVenue().getName() : \"N/A\"),\r\n                session.getPrice()\r\n            );\r\n            \r\n            if (reason != null && !reason.isEmpty()) {\r\n                content += \"\\n\\nCancellation Reason: \" + reason;\r\n            }\r\n            \r\n            emailService.sendEmail(email, subject, content);\r\n            \r\n            // 刪除預訂記錄\r\n            classRegistrationRepository.delete(registration);\r\n            \r\n            // 更新課程人數\r\n            session.setCurrentParticipants(session.getCurrentParticipants() - 1);\r\n            if (session.getCurrentParticipants() < session.getMaxParticipants() && \r\n                \"FULL\".equals(session.getStatus())) {\r\n                session.setStatus(\"AVAILABLE\");\r\n            }\r\n            classSessionRepository.save(session);\r\n            \r\n            return ResponseEntity.ok(Map.of(\"success\", true, \"message\", \"Registration cancelled and refund processed\"));\r\n        } catch (Exception e) {\r\n            return ResponseEntity.badRequest().body(Map.of(\"error\", e.getMessage()));\r\n        }\r\n    }\r\n\r\n    // 測試端點：檢查特定教練的所有課程\r\n    @GetMapping(\"/test-coach-sessions/{coachId}\")\r\n    public ResponseEntity<?> testCoachSessions(@PathVariable Integer coachId, @RequestParam(required = false) Integer userId) {\r\n        try {\r\n            System.out.println(\"=== testCoachSessions called for coachId: \" + coachId + \" ===\");\r\n            System.out.println(\"userId: \" + userId);\r\n            \r\n            // 檢查教練是否存在\r\n            User coach = userRepository.findById(coachId).orElse(null);\r\n            if (coach == null) {\r\n                return ResponseEntity.badRequest().body(Map.of(\"error\", \"Coach not found\"));\r\n            }\r\n            System.out.println(\"Coach found: \" + coach.getName() + \" (Type: \" + coach.getUserType() + \")\");\r\n            \r\n            // 獲取所有課程\r\n            List<ClassSession> allSessions = classSessionRepository.findAll();\r\n            System.out.println(\"Total sessions in database: \" + allSessions.size());\r\n            \r\n            // 過濾該教練的課程，只顯示 AVAILABLE 狀態的，排除補課課程\r\n            List<ClassSession> coachSessions = allSessions.stream()\r\n                .filter(s -> s.getCoach() != null && \r\n                           s.getCoach().getId().equals(coachId) && \r\n                           \"AVAILABLE\".equals(s.getStatus()) &&\r\n                           s.getReplacementForSessionId() == null) // 排除補課課程\r\n                .collect(Collectors.toList());\r\n            \r\n            // 如果提供了 userId，進一步過濾掉用戶已經預訂的課程\r\n            if (userId != null) {\r\n                List<ClassSession> filteredSessions = new ArrayList<>();\r\n                for (ClassSession session : coachSessions) {\r\n                    boolean userBooked = false;\r\n                    if (session.getRegistrations() != null) {\r\n                        for (ClassRegistration reg : session.getRegistrations()) {\r\n                            if (reg.getMember() != null && \r\n                                reg.getMember().getUser() != null && \r\n                                reg.getMember().getUser().getId().equals(userId)) {\r\n                                userBooked = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                    if (!userBooked) {\r\n                        filteredSessions.add(session);\r\n                    }\r\n                }\r\n                coachSessions = filteredSessions;\r\n                System.out.println(\"After filtering user bookings, remaining sessions: \" + coachSessions.size());\r\n            }\r\n            \r\n            System.out.println(\"Coach sessions found: \" + coachSessions.size());\r\n            \r\n            // 詳細輸出每個課程\r\n            coachSessions.forEach(session -> {\r\n                System.out.println(\"Session \" + session.getId() + \":\");\r\n                System.out.println(\"  - Title: \" + session.getTitle());\r\n                System.out.println(\"  - Status: \" + session.getStatus());\r\n                System.out.println(\"  - Start Time: \" + session.getStartTime());\r\n                // 優先使用直接關聯的 venue，如果沒有則使用 court 的 venue\r\n                Venue venue = session.getVenue();\r\n                if (venue == null && session.getCourt() != null) {\r\n                    venue = session.getCourt().getVenue();\r\n                }\r\n                System.out.println(\"  - Venue: \" + (venue != null ? venue.getName() : \"null\"));\r\n                System.out.println(\"  - Court: \" + (session.getCourt() != null ? session.getCourt().getName() : \"null\"));\r\n            });\r\n            \r\n            // 按狀態分組\r\n            Map<String, Long> statusCount = coachSessions.stream()\r\n                .collect(Collectors.groupingBy(s -> s.getStatus(), Collectors.counting()));\r\n            System.out.println(\"Sessions by status: \" + statusCount);\r\n            \r\n            Map<String, Object> result = new HashMap<>();\r\n            result.put(\"coachId\", coachId);\r\n            result.put(\"coachName\", coach.getName());\r\n            result.put(\"totalSessions\", coachSessions.size());\r\n            result.put(\"sessionsByStatus\", statusCount);\r\n            result.put(\"sessions\", coachSessions.stream().map(s -> {\r\n                Map<String, Object> sessionInfo = new HashMap<>();\r\n                sessionInfo.put(\"id\", s.getId());\r\n                sessionInfo.put(\"title\", s.getTitle());\r\n                sessionInfo.put(\"status\", s.getStatus());\r\n                sessionInfo.put(\"startTime\", s.getStartTime());\r\n                sessionInfo.put(\"endTime\", s.getEndTime());\r\n                sessionInfo.put(\"price\", s.getPrice());\r\n                sessionInfo.put(\"recurringGroupId\", s.getRecurringGroupId());\r\n                // 優先使用直接關聯的 venue，如果沒有則使用 court 的 venue\r\n                Venue venue = s.getVenue();\r\n                if (venue == null && s.getCourt() != null) {\r\n                    venue = s.getCourt().getVenue();\r\n                }\r\n                sessionInfo.put(\"venue\", venue != null ? venue.getName() : null);\r\n                sessionInfo.put(\"venueState\", venue != null ? venue.getState() : null);\r\n                sessionInfo.put(\"court\", s.getCourt() != null ? s.getCourt().getName() : null);\r\n                \r\n                // 添加註冊信息\r\n                if (s.getRegistrations() != null && !s.getRegistrations().isEmpty()) {\r\n                    List<Map<String, Object>> registrations = s.getRegistrations().stream().map(reg -> {\r\n                        Map<String, Object> regInfo = new HashMap<>();\r\n                        regInfo.put(\"registrationId\", reg.getId());\r\n                        regInfo.put(\"userId\", reg.getMember() != null && reg.getMember().getUser() != null ? \r\n                            reg.getMember().getUser().getId() : null);\r\n                        regInfo.put(\"memberName\", reg.getMember() != null && reg.getMember().getUser() != null ? \r\n                            reg.getMember().getUser().getName() : null);\r\n                        regInfo.put(\"registrationDate\", reg.getRegistrationDate());\r\n                        return regInfo;\r\n                    }).collect(Collectors.toList());\r\n                    sessionInfo.put(\"registrations\", registrations);\r\n                } else {\r\n                    sessionInfo.put(\"registrations\", new ArrayList<>());\r\n                }\r\n                \r\n                return sessionInfo;\r\n            }).collect(Collectors.toList()));\r\n            \r\n            return ResponseEntity.ok(result);\r\n        } catch (Exception e) {\r\n            System.out.println(\"Error in testCoachSessions: \" + e.getMessage());\r\n            e.printStackTrace();\r\n            return ResponseEntity.badRequest().body(Map.of(\"error\", e.getMessage()));\r\n        }\r\n    }\r\n\r\n    // 新增：手動觸發課程結算（僅管理員可操作）\r\n    @PostMapping(\"/{sessionId}/settle\")\r\n    @PreAuthorize(\"hasAuthority('ROLE_ADMIN')\")\r\n    public ResponseEntity<?> manuallySettleSession(@PathVariable Integer sessionId) {\r\n        try {\r\n            classSessionService.settleClassSession(sessionId);\r\n            return ResponseEntity.ok(Map.of(\r\n                \"message\", \"Session settled successfully\",\r\n                \"sessionId\", sessionId\r\n            ));\r\n        } catch (ResourceNotFoundException e) {\r\n            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(e.getMessage());\r\n        } catch (IllegalStateException e) {\r\n            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(e.getMessage());\r\n        } catch (Exception e) {\r\n            return ResponseEntity.internalServerError().body(\"Error settling session: \" + e.getMessage());\r\n        }\r\n    }\r\n\r\n    // 新增：獲取課程結算狀態\r\n    @GetMapping(\"/{sessionId}/settlement-status\")\r\n    @PreAuthorize(\"hasAuthority('ROLE_ADMIN')\")\r\n    public ResponseEntity<?> getSessionSettlementStatus(@PathVariable Integer sessionId) {\r\n        try {\r\n            ClassSession session = classSessionService.getSessionById(sessionId);\r\n            if (session == null) {\r\n                return ResponseEntity.status(HttpStatus.NOT_FOUND).body(\"Session not found\");\r\n            }\r\n\r\n            // 檢查是否有託管支付記錄\r\n            List<Payment> escrowedPayments = paymentRepository.findByPaymentTypeAndStatus(\"CLASS_SESSION_ESCROW\", \"ESCROWED\")\r\n                    .stream()\r\n                    .filter(payment -> payment.getTransactionId() != null &&\r\n                            payment.getTransactionId().startsWith(\"SESSION_\" + sessionId + \"_\"))\r\n                    .collect(java.util.stream.Collectors.toList());\r\n\r\n            // 檢查是否有結算記錄\r\n            List<Payment> settlementPayments = paymentRepository.findByPaymentTypeAndStatus(\"COACH_INCOME\", \"COMPLETED\")\r\n                    .stream()\r\n                    .filter(payment -> payment.getTransactionId() != null &&\r\n                            payment.getTransactionId().equals(\"SETTLEMENT_\" + sessionId))\r\n                    .collect(java.util.stream.Collectors.toList());\r\n\r\n            Map<String, Object> response = new HashMap<>();\r\n            response.put(\"sessionId\", sessionId);\r\n            response.put(\"sessionStatus\", session.getStatus());\r\n            response.put(\"escrowedPaymentsCount\", escrowedPayments.size());\r\n            response.put(\"escrowedAmount\", escrowedPayments.stream().mapToDouble(Payment::getAmount).sum());\r\n            response.put(\"settlementPaymentsCount\", settlementPayments.size());\r\n            response.put(\"isSettled\", !settlementPayments.isEmpty());\r\n            response.put(\"note\", session.getNote());\r\n\r\n            return ResponseEntity.ok(response);\r\n        } catch (Exception e) {\r\n            return ResponseEntity.internalServerError().body(\"Error getting settlement status: \" + e.getMessage());\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/ClassSessionController.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/ClassSessionController.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/ClassSessionController.java	(revision 89327e12854b108d004ebb020d0592b1c618ecaf)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/ClassSessionController.java	(date 1754330991185)
@@ -8,6 +8,7 @@
 import com.pickleball_backend.pickleball.exception.ResourceNotFoundException;
 import com.pickleball_backend.pickleball.service.EscrowAccountService;
 import com.pickleball_backend.pickleball.entity.Feedback;
+import java.time.LocalDateTime;
 import com.pickleball_backend.pickleball.repository.FeedbackRepository;
 import com.pickleball_backend.pickleball.service.ClassSessionService;
 import com.pickleball_backend.pickleball.service.EmailService;
@@ -134,8 +135,8 @@
             User user = userRepository.findByUserAccount_Username(username)
                 .orElseThrow(() -> new com.pickleball_backend.pickleball.exception.ResourceNotFoundException("User not found"));
             Integer userId = user.getId();
-            boolean success = classSessionService.registerUserForMultipleSessions(userId, request.getSessionIds(), request.getPaymentMethod());
-            return ResponseEntity.ok(Map.of("success", success));
+            Map<String, Object> result = classSessionService.registerUserForMultipleSessions(userId, request.getSessionIds(), request.getPaymentMethod(), request.getNumPaddles(), request.getBuyBallSet());
+            return ResponseEntity.ok(result);
         } catch (Exception e) {
             return ResponseEntity.badRequest().body(Map.of("error", e.getMessage()));
         }
@@ -351,16 +352,32 @@
         Map<String, Object> dto = new java.util.HashMap<>();
         dto.put("id", session.getId());
         dto.put("title", session.getTitle());
+        dto.put("description", session.getDescription());
         dto.put("startTime", session.getStartTime());
         dto.put("endTime", session.getEndTime());
-        // 優先使用直接關聯的 venue，如果沒有則使用 court 的 venue
+        dto.put("maxParticipants", session.getMaxParticipants());
+        dto.put("price", session.getPrice());
+        dto.put("allowReplacement", session.getAllowReplacement());
+        dto.put("replacementForSessionId", session.getReplacementForSessionId());
+        
+        // 場地信息 - 優先使用直接關聯的 venue，如果沒有則使用 court 的 venue
         Venue venue = session.getVenue();
         if (venue == null && session.getCourt() != null) {
             venue = session.getCourt().getVenue();
         }
-        dto.put("venueName", venue != null ? venue.getName() : "");
-        dto.put("price", session.getPrice());
-        dto.put("replacementForSessionId", session.getReplacementForSessionId());
+        if (venue != null) {
+            dto.put("venueId", venue.getId());
+            dto.put("venueName", venue.getName());
+            dto.put("venue", venue);
+        }
+        
+        // 球場信息
+        if (session.getCourt() != null) {
+            dto.put("courtId", session.getCourt().getId());
+            dto.put("courtName", session.getCourt().getName());
+            dto.put("court", session.getCourt());
+        }
+        
         // 如果是補課，補上 allowedMemberIds
         if (session.getReplacementForSessionId() != null) {
             ClassSession origin = classSessionService.getSessionById(session.getReplacementForSessionId());
@@ -438,6 +455,7 @@
             }
             dto.setVenueName(venue != null ? venue.getName() : null);
             dto.setVenueState(venue != null ? venue.getState() : null);
+            dto.setAllowReplacement(session.getAllowReplacement());
             // 報名名單
             List<ClassRegistrationDto> regDtos = session.getRegistrations() == null ? List.of() : session.getRegistrations().stream().map(reg ->
                 new ClassRegistrationDto(
@@ -724,6 +742,7 @@
                 sessionInfo.put("status", session.getStatus());
                 sessionInfo.put("price", session.getPrice());
                 sessionInfo.put("recurringGroupId", session.getRecurringGroupId());
+                sessionInfo.put("replacementForSessionId", session.getReplacementForSessionId());
                 
                 // 教練信息
                 if (session.getCoach() != null) {
@@ -750,9 +769,46 @@
                 sessionInfo.put("registrationDate", reg.getRegistrationDate());
                 sessionInfo.put("attendanceStatus", reg.getAttendanceStatus());
                 
-                // 教練評論（如果有）
+                // 教練對用戶的評價（如果有）
                 sessionInfo.put("coachComment", reg.getCoachComment());
-                sessionInfo.put("rating", reg.getRating());
+                
+                // 用戶對教練的評價（從 feedback 表獲取）
+                try {
+                    if (session.getCoach() != null) {
+                        // 查找用戶對這個教練的評價
+                        List<Feedback> userFeedbacks = feedbackRepository.findByUserId(user.getId());
+                        
+                        if (!userFeedbacks.isEmpty()) {
+                            // 找到用戶對這個教練的評價
+                            Feedback userFeedback = userFeedbacks.stream()
+                                .filter(feedback -> 
+                                    feedback.getTargetType() == Feedback.TargetType.COACH && 
+                                    feedback.getTargetId().equals(session.getCoach().getId())
+                                )
+                                .findFirst()
+                                .orElse(null);
+                            
+                            if (userFeedback != null) {
+                                sessionInfo.put("userRating", userFeedback.getRating());
+                                sessionInfo.put("userComment", userFeedback.getReview());
+                                System.out.println("Found user feedback for session " + session.getId() + ": rating=" + userFeedback.getRating() + ", comment=" + userFeedback.getReview());
+                            } else {
+                                sessionInfo.put("userRating", null);
+                                sessionInfo.put("userComment", null);
+                            }
+                        } else {
+                            sessionInfo.put("userRating", null);
+                            sessionInfo.put("userComment", null);
+                        }
+                    } else {
+                        sessionInfo.put("userRating", null);
+                        sessionInfo.put("userComment", null);
+                    }
+                } catch (Exception e) {
+                    System.out.println("Error fetching user feedback for session " + session.getId() + ": " + e.getMessage());
+                    sessionInfo.put("userRating", null);
+                    sessionInfo.put("userComment", null);
+                }
                 
                 System.out.println("Session " + session.getId() + " for user " + userId + ": " + sessionInfo);
                 return sessionInfo;
@@ -871,41 +927,64 @@
                 return ResponseEntity.badRequest().body(Map.of("error", "Class session not found"));
             }
 
-            // Update the registration with review data
+            // Get review type from request
+            String reviewType = (String) reviewData.get("reviewType");
             Integer rating = (Integer) reviewData.get("rating");
             String comment = (String) reviewData.get("comment");
             
-            if (rating != null && rating >= 1 && rating <= 5) {
-                registration.setRating(rating);
-                System.out.println("Setting rating: " + rating);
-            }
-            
-            if (comment != null) {
-                registration.setCoachComment(comment);
-                System.out.println("Setting comment: " + comment);
-            }
-            
-            classRegistrationRepository.save(registration);
-            
-            // 同时创建feedback记录（如果session有教练）
-            if (session.getCoach() != null) {
-                try {
-                    // 创建feedback记录
-                    Feedback feedback = new Feedback();
-                    feedback.setTargetType(Feedback.TargetType.COACH);
-                    feedback.setTargetId(session.getCoach().getId());
-                    feedback.setRating(rating);
-                    feedback.setReview(comment);
-                    feedback.setUser(user);
-                    feedback.setCreatedAt(LocalDateTime.now());
+            // 根據評價類型進行不同的處理
+            if ("USER_TO_COACH".equals(reviewType)) {
+                // 用戶對教練的評價 - 保存到 feedback 表
+                if (session.getCoach() != null) {
+                    try {
+                        // 創建 feedback 記錄
+                        Feedback feedback = new Feedback();
+                        feedback.setTargetType(Feedback.TargetType.COACH);
+                        feedback.setTargetId(session.getCoach().getId());
+                        feedback.setRating(rating);
+                        feedback.setReview(comment);
+                        feedback.setUser(user);
+                        feedback.setClassSessionId(sessionId); // 設置關聯的課程ID
+                        feedback.setCreatedAt(LocalDateTime.now());
 
-                    // 保存feedback记录
-                    feedbackRepository.save(feedback);
-                    System.out.println("Feedback record created for coach: " + session.getCoach().getId());
-                } catch (Exception feedbackError) {
-                    System.out.println("Warning: Failed to create feedback record: " + feedbackError.getMessage());
-                    // 不阻止主要流程，只是记录警告
+                        // 保存 feedback 記錄
+                        feedbackRepository.save(feedback);
+                        System.out.println("User to Coach feedback record created for coach: " + session.getCoach().getId());
+                    } catch (Exception feedbackError) {
+                        System.out.println("Error creating feedback record: " + feedbackError.getMessage());
+                        return ResponseEntity.badRequest().body(Map.of("error", "Failed to create feedback record: " + feedbackError.getMessage()));
+                    }
                 }
+                
+                // 同時更新 registration 中的用戶評價字段
+                if (rating != null && rating >= 1 && rating <= 5) {
+                    registration.setRating(rating);
+                    System.out.println("Setting user rating: " + rating);
+                }
+                
+                if (comment != null) {
+                    // 注意：這裡我們暫時不保存用戶評價到 registration 表
+                    // 因為 coachComment 字段是用來存儲教練對用戶的評價
+                    // 用戶對教練的評價只保存在 feedback 表中
+                    System.out.println("User comment will be saved to feedback table only: " + comment);
+                }
+                
+                classRegistrationRepository.save(registration);
+                
+            } else {
+                // 默認處理（向後兼容）
+                if (rating != null && rating >= 1 && rating <= 5) {
+                    registration.setRating(rating);
+                }
+                
+                if (comment != null) {
+                    // 注意：這裡我們暫時不保存用戶評價到 registration 表
+                    // 因為 coachComment 字段是用來存儲教練對用戶的評價
+                    // 用戶對教練的評價只保存在 feedback 表中
+                    System.out.println("User comment will be saved to feedback table only: " + comment);
+                }
+                
+                classRegistrationRepository.save(registration);
             }
 
             System.out.println("Review submitted successfully for session " + sessionId + " by user " + user.getId());
@@ -918,6 +997,79 @@
         }
     }
 
+    // 教練給用戶的評價
+    @PostMapping("/{sessionId}/coach-feedback")
+    @PreAuthorize("hasAuthority('ROLE_COACH')")
+    public ResponseEntity<?> submitCoachFeedback(@PathVariable Integer sessionId, @RequestBody Map<String, Object> feedbackData) {
+        try {
+            System.out.println("=== submitCoachFeedback called for sessionId: " + sessionId + " ===");
+            System.out.println("Feedback data: " + feedbackData);
+            
+            // Get the current coach from JWT token
+            Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
+            String username = authentication.getName();
+            System.out.println("Current coach from JWT: " + username);
+            
+            // Try to find coach by username first, then by email
+            User coach = userRepository.findByUserAccount_Username(username).orElse(null);
+            if (coach == null) {
+                coach = userRepository.findByEmail(username).orElse(null);
+            }
+            
+            if (coach == null) {
+                System.out.println("Coach not found for username/email: " + username);
+                return ResponseEntity.badRequest().body(Map.of("error", "Coach not found for: " + username));
+            }
+
+            System.out.println("Found coach: " + coach.getId() + " - " + coach.getName());
+
+            // Get the class session
+            ClassSession session = classSessionRepository.findById(sessionId).orElse(null);
+            if (session == null) {
+                return ResponseEntity.badRequest().body(Map.of("error", "Class session not found"));
+            }
+
+            // Verify that the current user is the coach of this session
+            if (!session.getCoach().getId().equals(coach.getId())) {
+                return ResponseEntity.badRequest().body(Map.of("error", "You are not the coach of this session"));
+            }
+
+            // Get student ID from feedback data
+            Integer studentId = (Integer) feedbackData.get("studentId");
+            String comment = (String) feedbackData.get("comment");
+            
+            if (studentId == null) {
+                return ResponseEntity.badRequest().body(Map.of("error", "Student ID is required"));
+            }
+
+            // Find the class registration for this student and session
+            ClassRegistration registration = classRegistrationRepository.findByMemberUserIdAndClassSessionId(studentId, sessionId);
+            
+            if (registration == null) {
+                System.out.println("Registration not found for student " + studentId + " and session " + sessionId);
+                return ResponseEntity.badRequest().body(Map.of("error", "Registration not found for this student and session"));
+            }
+            
+            System.out.println("Found registration: " + registration.getId());
+
+            // Update the registration with coach feedback
+            if (comment != null) {
+                registration.setCoachComment(comment);
+                System.out.println("Setting coach comment: " + comment);
+            }
+            
+            classRegistrationRepository.save(registration);
+
+            System.out.println("Coach feedback submitted successfully for session " + sessionId + " for student " + studentId);
+            return ResponseEntity.ok(Map.of("message", "Coach feedback submitted successfully"));
+            
+        } catch (Exception e) {
+            System.out.println("Error in submitCoachFeedback: " + e.getMessage());
+            e.printStackTrace();
+            return ResponseEntity.badRequest().body(Map.of("error", "Error submitting coach feedback: " + e.getMessage()));
+        }
+    }
+
     // 獲取教練可用時間（供用戶查看補課時間）
     @GetMapping("/coach/{coachId}/available-times")
     @PreAuthorize("hasRole('USER')")
@@ -984,6 +1136,27 @@
             return ResponseEntity.badRequest().body(Map.of("error", e.getMessage()));
         }
     }
+
+    // 新增：部分更新課程（只更新特定字段）
+    @PatchMapping("/{sessionId}")
+    @PreAuthorize("hasAuthority('ROLE_COACH')")
+    public ResponseEntity<?> partialUpdateClassSession(
+            @PathVariable Integer sessionId,
+            @RequestBody Map<String, Object> updates) {
+        try {
+            // 调试信息
+            System.out.println("=== PATCH Request Debug ===");
+            System.out.println("Session ID: " + sessionId);
+            System.out.println("Updates: " + updates);
+            
+            ClassSession updated = classSessionService.partialUpdateClassSession(sessionId, updates);
+            return ResponseEntity.ok(updated);
+        } catch (Exception e) {
+            System.out.println("PATCH Error: " + e.getMessage());
+            e.printStackTrace();
+            return ResponseEntity.badRequest().body(Map.of("error", e.getMessage()));
+        }
+    }
 
     // 教練取消課程
     @PutMapping("/{sessionId}/cancel")
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/User.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.entity;\r\n\r\nimport jakarta.persistence.*;\r\nimport lombok.AllArgsConstructor;\r\nimport lombok.Data;\r\nimport lombok.NoArgsConstructor;\r\n\r\nimport java.time.LocalDate;\r\nimport java.time.LocalDateTime;\r\nimport java.util.List;\r\nimport java.util.UUID;\r\n\r\nimport com.fasterxml.jackson.annotation.JsonIgnore;\r\nimport com.fasterxml.jackson.annotation.JsonBackReference;\r\nimport com.fasterxml.jackson.annotation.JsonManagedReference;\r\n\r\n@Entity\r\n@Data\r\n@NoArgsConstructor\r\n@AllArgsConstructor\r\n@Table(name = \"user\")\r\npublic class User {\r\n\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Integer id;\r\n\r\n    @Column(nullable = false, unique = true)\r\n    private UUID uuid = UUID.randomUUID();\r\n\r\n    private String name;\r\n    private String gender;\r\n    private String email;\r\n    private String phone;\r\n\r\n    private LocalDate dob;\r\n\r\n    @Column(name = \"user_type\")\r\n    private String userType;\r\n\r\n    @Column(name = \"requested_user_type\")\r\n    private String requestedUserType;\r\n\r\n    private LocalDateTime createdAt = LocalDateTime.now();\r\n    private LocalDateTime updatedAt = LocalDateTime.now();\r\n\r\n    @Column(name = \"bookings_made\")\r\n    private int bookingsMade;\r\n\r\n    @Column(name = \"booking_hours\")\r\n    private double bookingHours;\r\n\r\n    @Column(name = \"sumos_joined\")\r\n    private int sumosJoined;\r\n\r\n    @Column(name = \"amount_spent\")\r\n    private double amountSpent;\r\n\r\n    @OneToOne(mappedBy = \"user\", cascade = CascadeType.ALL, fetch = FetchType.LAZY)\r\n    private Member member;\r\n\r\n    @OneToOne(mappedBy = \"user\", cascade = CascadeType.ALL, fetch = FetchType.EAGER)\r\n    private UserAccount userAccount;\r\n\r\n    public String getProfileImage() {\r\n        return (userAccount != null) ? userAccount.getProfileImage() : null;\r\n    }\r\n\r\n\r\n\r\n    @OneToMany(mappedBy = \"sender\", cascade = CascadeType.ALL, fetch = FetchType.LAZY)\r\n    private List<Message> sentMessages;\r\n\r\n    @OneToMany(mappedBy = \"receiver\", cascade = CascadeType.ALL, fetch = FetchType.LAZY)\r\n    private List<Message> receivedMessages;\r\n\r\n    @OneToMany(mappedBy = \"coach\", cascade = CascadeType.ALL)\r\n    @JsonIgnore // 或 @JsonBackReference\r\n    private List<ClassSession> coachSessions;\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/User.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/User.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/User.java	(revision 89327e12854b108d004ebb020d0592b1c618ecaf)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/User.java	(date 1754146587902)
@@ -2,8 +2,9 @@
 
 import jakarta.persistence.*;
 import lombok.AllArgsConstructor;
-import lombok.Data;
+import lombok.Getter;
 import lombok.NoArgsConstructor;
+import lombok.Setter;
 
 import java.time.LocalDate;
 import java.time.LocalDateTime;
@@ -15,7 +16,8 @@
 import com.fasterxml.jackson.annotation.JsonManagedReference;
 
 @Entity
-@Data
+@Getter
+@Setter
 @NoArgsConstructor
 @AllArgsConstructor
 @Table(name = "user")
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/LeaveRequestController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.controller;\r\n\r\nimport com.pickleball_backend.pickleball.dto.LeaveRequestDto;\r\nimport com.pickleball_backend.pickleball.entity.LeaveRequest;\r\nimport com.pickleball_backend.pickleball.service.LeaveRequestService;\r\nimport com.pickleball_backend.pickleball.repository.LeaveRequestRepository;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.security.access.prepost.PreAuthorize;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\nimport java.security.Principal;\r\nimport java.time.LocalDateTime;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.HashMap;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.stream.Collectors;\r\nimport com.pickleball_backend.pickleball.entity.ClassSession;\r\nimport com.pickleball_backend.pickleball.repository.ClassSessionRepository;\r\n\r\n@RestController\r\n@RequestMapping(\"/api/leave-requests\")\r\npublic class LeaveRequestController {\r\n    \r\n    @Autowired\r\n    private LeaveRequestService leaveRequestService;\r\n    \r\n    @Autowired\r\n    private LeaveRequestRepository leaveRequestRepository;\r\n    \r\n    @Autowired\r\n    private ClassSessionRepository classSessionRepository;\r\n    \r\n    // 創建補課請求\r\n    @PostMapping\r\n    @PreAuthorize(\"hasRole('USER')\")\r\n    public ResponseEntity<LeaveRequestDto> createLeaveRequest(@RequestBody Map<String, Object> request, Principal principal) {\r\n        try {\r\n            Integer studentId = (Integer) request.get(\"studentId\");\r\n            Integer coachId = (Integer) request.get(\"coachId\");\r\n            Integer sessionId = (Integer) request.get(\"sessionId\");\r\n            String preferredDateStr = (String) request.get(\"preferredDate\");\r\n            String reason = (String) request.get(\"reason\");\r\n            String requestType = (String) request.get(\"requestType\");\r\n            \r\n            LocalDateTime preferredDate = null;\r\n            if (preferredDateStr != null && !preferredDateStr.trim().isEmpty()) {\r\n                try {\r\n                    System.out.println(\"=== LeaveRequestController.createLeaveRequest ===\");\r\n                    System.out.println(\"preferredDateStr: \" + preferredDateStr);\r\n                    // 嘗試解析 ISO 格式的日期時間字符串\r\n                    preferredDate = LocalDateTime.parse(preferredDateStr);\r\n                    System.out.println(\"Parsed preferredDate: \" + preferredDate);\r\n                } catch (Exception e) {\r\n                    System.out.println(\"Failed to parse preferredDate: \" + e.getMessage());\r\n                    // 如果解析失敗，設置為特殊值表示需要教練安排\r\n                    preferredDate = LocalDateTime.of(1900, 1, 1, 0, 0, 0);\r\n                    System.out.println(\"Setting preferredDate to special value for coach arrangement\");\r\n                }\r\n            } else {\r\n                System.out.println(\"preferredDateStr is null or empty, setting preferredDate to special value for coach arrangement\");\r\n                // 設置為特殊值表示需要教練安排\r\n                preferredDate = LocalDateTime.of(1900, 1, 1, 0, 0, 0);\r\n            }\r\n            \r\n            LeaveRequestDto result = leaveRequestService.createLeaveRequest(studentId, coachId, sessionId, preferredDate, reason, requestType);\r\n            return ResponseEntity.ok(result);\r\n        } catch (Exception e) {\r\n            return ResponseEntity.badRequest().build();\r\n        }\r\n    }\r\n    \r\n    // 獲取教練的待處理請求\r\n    @GetMapping(\"/coach/pending\")\r\n    @PreAuthorize(\"hasAuthority('ROLE_COACH')\")\r\n    public ResponseEntity<List<LeaveRequestDto>> getPendingRequestsByCoach(@RequestParam Integer coachId) {\r\n        System.out.println(\"=== Controller: getPendingRequestsByCoach ===\");\r\n        System.out.println(\"coachId: \" + coachId);\r\n        List<LeaveRequestDto> requests = leaveRequestService.getPendingRequestsByCoach(coachId);\r\n        System.out.println(\"Found \" + requests.size() + \" pending requests\");\r\n        for (LeaveRequestDto request : requests) {\r\n            System.out.println(\"Request ID: \" + request.getId() + \", Status: \" + request.getStatus() + \", Student: \" + request.getStudentName());\r\n        }\r\n        return ResponseEntity.ok(requests);\r\n    }\r\n    \r\n    // 獲取教練的所有請求\r\n    @GetMapping(\"/coach/all\")\r\n    @PreAuthorize(\"hasAuthority('ROLE_COACH')\")\r\n    public ResponseEntity<List<LeaveRequestDto>> getAllRequestsByCoach(@RequestParam Integer coachId) {\r\n        List<LeaveRequestDto> requests = leaveRequestService.getAllRequestsByCoach(coachId);\r\n        return ResponseEntity.ok(requests);\r\n    }\r\n    \r\n    // 獲取學生的所有請求\r\n    @GetMapping(\"/student\")\r\n    @PreAuthorize(\"hasRole('USER')\")\r\n    public ResponseEntity<List<LeaveRequestDto>> getAllRequestsByStudent(@RequestParam Integer studentId) {\r\n        List<LeaveRequestDto> requests = leaveRequestService.getAllRequestsByStudent(studentId);\r\n        return ResponseEntity.ok(requests);\r\n    }\r\n    \r\n    // 更新請假請求狀態\r\n    @PutMapping(\"/{requestId}\")\r\n    @PreAuthorize(\"hasRole('USER')\")\r\n    public ResponseEntity<LeaveRequestDto> updateLeaveRequest(\r\n            @PathVariable Integer requestId,\r\n            @RequestBody Map<String, Object> request) {\r\n        try {\r\n            String status = (String) request.get(\"status\");\r\n            String preferredDateStr = (String) request.get(\"preferredDate\");\r\n            \r\n            LocalDateTime preferredDate = null;\r\n            if (preferredDateStr != null && !preferredDateStr.trim().isEmpty()) {\r\n                try {\r\n                    preferredDate = LocalDateTime.parse(preferredDateStr);\r\n                } catch (Exception e) {\r\n                    preferredDate = LocalDateTime.of(1900, 1, 1, 0, 0, 0);\r\n                }\r\n            }\r\n            \r\n            LeaveRequestDto result = leaveRequestService.updateLeaveRequest(requestId, status, preferredDate);\r\n            return ResponseEntity.ok(result);\r\n        } catch (Exception e) {\r\n            return ResponseEntity.badRequest().build();\r\n        }\r\n    }\r\n    \r\n    // 批准請求\r\n    @PutMapping(\"/{requestId}/approve\")\r\n    @PreAuthorize(\"hasAuthority('ROLE_COACH')\")\r\n    public ResponseEntity<LeaveRequestDto> approveRequest(\r\n            @PathVariable Integer requestId,\r\n            @RequestBody Map<String, Object> request) {\r\n        try {\r\n            Integer replacementSessionId = (Integer) request.get(\"replacementSessionId\");\r\n            String coachNotes = (String) request.get(\"coachNotes\");\r\n            \r\n            LeaveRequestDto result = leaveRequestService.approveRequest(requestId, replacementSessionId, coachNotes);\r\n            return ResponseEntity.ok(result);\r\n        } catch (Exception e) {\r\n            return ResponseEntity.badRequest().build();\r\n        }\r\n    }\r\n    \r\n    // 拒絕請求\r\n    @PutMapping(\"/{requestId}/decline\")\r\n    @PreAuthorize(\"hasAuthority('ROLE_COACH')\")\r\n    public ResponseEntity<LeaveRequestDto> declineRequest(\r\n            @PathVariable Integer requestId,\r\n            @RequestBody Map<String, Object> request) {\r\n        try {\r\n            String coachNotes = (String) request.get(\"coachNotes\");\r\n            \r\n            LeaveRequestDto result = leaveRequestService.declineRequest(requestId, coachNotes);\r\n            return ResponseEntity.ok(result);\r\n        } catch (Exception e) {\r\n            return ResponseEntity.badRequest().build();\r\n        }\r\n    }\r\n    \r\n    // 獲取教練的待處理請求數量\r\n    @GetMapping(\"/coach/pending-count\")\r\n    @PreAuthorize(\"hasAuthority('ROLE_COACH')\")\r\n    public ResponseEntity<Map<String, Long>> getPendingRequestCount(@RequestParam Integer coachId) {\r\n        long count = leaveRequestService.getPendingRequestCount(coachId);\r\n        return ResponseEntity.ok(Map.of(\"count\", count));\r\n    }\r\n    \r\n    // 獲取可用的補課時間（排除已預約的課程）\r\n    @GetMapping(\"/available-replacement-sessions\")\r\n    @PreAuthorize(\"hasRole('USER')\")\r\n    public ResponseEntity<List<Map<String, Object>>> getAvailableReplacementSessions(\r\n            @RequestParam Integer coachId,\r\n            @RequestParam Integer studentId) {\r\n        try {\r\n            System.out.println(\"=== Controller: getAvailableReplacementSessions ===\");\r\n            System.out.println(\"coachId: \" + coachId + \", studentId: \" + studentId);\r\n            \r\n            List<Map<String, Object>> availableSessions = leaveRequestService.getAvailableReplacementSessions(coachId, studentId);\r\n            System.out.println(\"Controller returning \" + availableSessions.size() + \" sessions\");\r\n            \r\n            return ResponseEntity.ok(availableSessions);\r\n        } catch (Exception e) {\r\n            System.out.println(\"Controller error: \" + e.getMessage());\r\n            e.printStackTrace();\r\n            return ResponseEntity.badRequest().build();\r\n        }\r\n    }\r\n    \r\n    // 調試端點：檢查所有請假請求\r\n    @GetMapping(\"/debug/all-requests\")\r\n    @PreAuthorize(\"hasRole('USER')\")\r\n    public ResponseEntity<Map<String, Object>> debugAllRequests() {\r\n        try {\r\n            System.out.println(\"=== Debug: All Leave Requests ===\");\r\n            List<LeaveRequest> allRequests = leaveRequestRepository.findAll();\r\n            System.out.println(\"Total leave requests in database: \" + allRequests.size());\r\n            \r\n            Map<String, Object> result = new HashMap<>();\r\n            result.put(\"totalRequests\", allRequests.size());\r\n            \r\n            List<Map<String, Object>> requestsData = new ArrayList<>();\r\n            for (LeaveRequest request : allRequests) {\r\n                Map<String, Object> requestData = new HashMap<>();\r\n                requestData.put(\"id\", request.getId());\r\n                requestData.put(\"coachId\", request.getCoach() != null ? request.getCoach().getId() : \"null\");\r\n                requestData.put(\"studentId\", request.getStudent() != null ? request.getStudent().getId() : \"null\");\r\n                requestData.put(\"studentName\", request.getStudent() != null ? request.getStudent().getName() : \"null\");\r\n                requestData.put(\"status\", request.getStatus());\r\n                requestData.put(\"reason\", request.getReason());\r\n                requestData.put(\"requestDate\", request.getRequestDate());\r\n                requestsData.add(requestData);\r\n                \r\n                System.out.println(\"Request \" + request.getId() + \": Coach=\" + requestData.get(\"coachId\") + \r\n                                 \", Student=\" + requestData.get(\"studentName\") + \", Status=\" + request.getStatus());\r\n            }\r\n            result.put(\"requests\", requestsData);\r\n            \r\n            return ResponseEntity.ok(result);\r\n        } catch (Exception e) {\r\n            System.out.println(\"Debug error: \" + e.getMessage());\r\n            e.printStackTrace();\r\n            return ResponseEntity.badRequest().build();\r\n        }\r\n    }\r\n\r\n    // 調試端點：檢查教練課程數據\r\n    @GetMapping(\"/debug/coach-sessions\")\r\n    @PreAuthorize(\"hasRole('USER')\")\r\n    public ResponseEntity<Map<String, Object>> debugCoachSessions(@RequestParam Integer coachId) {\r\n        try {\r\n            System.out.println(\"=== Debug: Checking coach sessions for coachId: \" + coachId + \" ===\");\r\n            \r\n            // 獲取所有課程\r\n            List<ClassSession> allSessions = classSessionRepository.findAll();\r\n            System.out.println(\"Total sessions in database: \" + allSessions.size());\r\n            \r\n            // 過濾該教練的課程\r\n            List<ClassSession> coachSessions = allSessions.stream()\r\n                    .filter(session -> session.getCoach() != null && \r\n                                     session.getCoach().getId().equals(coachId))\r\n                    .collect(Collectors.toList());\r\n            System.out.println(\"Coach sessions found: \" + coachSessions.size());\r\n            \r\n            // 按狀態分組\r\n            Map<String, Long> statusCount = coachSessions.stream()\r\n                    .collect(Collectors.groupingBy(s -> s.getStatus(), Collectors.counting()));\r\n            System.out.println(\"Sessions by status: \" + statusCount);\r\n            \r\n            // 詳細信息\r\n            List<Map<String, Object>> sessionDetails = coachSessions.stream()\r\n                    .map(session -> {\r\n                        Map<String, Object> detail = new HashMap<>();\r\n                        detail.put(\"id\", session.getId());\r\n                        detail.put(\"title\", session.getTitle());\r\n                        detail.put(\"status\", session.getStatus());\r\n                        detail.put(\"startTime\", session.getStartTime());\r\n                        detail.put(\"endTime\", session.getEndTime());\r\n                        detail.put(\"coachId\", session.getCoach() != null ? session.getCoach().getId() : null);\r\n                        detail.put(\"courtId\", session.getCourt() != null ? session.getCourt().getId() : null);\r\n                        return detail;\r\n                    })\r\n                    .collect(Collectors.toList());\r\n            \r\n            Map<String, Object> result = new HashMap<>();\r\n            result.put(\"totalSessions\", allSessions.size());\r\n            result.put(\"coachSessions\", coachSessions.size());\r\n            result.put(\"statusCount\", statusCount);\r\n            result.put(\"sessionDetails\", sessionDetails);\r\n            \r\n            return ResponseEntity.ok(result);\r\n        } catch (Exception e) {\r\n            System.out.println(\"Debug error: \" + e.getMessage());\r\n            e.printStackTrace();\r\n            return ResponseEntity.badRequest().body(Map.of(\"error\", e.getMessage()));\r\n        }\r\n    }\r\n} 
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/LeaveRequestController.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/LeaveRequestController.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/LeaveRequestController.java	(revision 89327e12854b108d004ebb020d0592b1c618ecaf)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/LeaveRequestController.java	(date 1754310675069)
@@ -161,6 +161,31 @@
         }
     }
     
+    // 安排補課
+    @PutMapping("/{requestId}/arrange-makeup")
+    @PreAuthorize("hasAuthority('ROLE_COACH')")
+    public ResponseEntity<LeaveRequestDto> arrangeMakeup(
+            @PathVariable Integer requestId,
+            @RequestBody Map<String, Object> request) {
+        try {
+            Integer makeupSessionId = (Integer) request.get("makeupSessionId");
+            Integer studentId = (Integer) request.get("studentId");
+            
+            System.out.println("=== arrangeMakeup called ===");
+            System.out.println("requestId: " + requestId);
+            System.out.println("makeupSessionId: " + makeupSessionId);
+            System.out.println("studentId: " + studentId);
+            
+            // 使用现有的approveRequest方法来安排补课
+            LeaveRequestDto result = leaveRequestService.approveRequest(requestId, makeupSessionId, "Makeup class arranged by coach");
+            return ResponseEntity.ok(result);
+        } catch (Exception e) {
+            System.out.println("Error in arrangeMakeup: " + e.getMessage());
+            e.printStackTrace();
+            return ResponseEntity.badRequest().body(null);
+        }
+    }
+    
     // 獲取教練的待處理請求數量
     @GetMapping("/coach/pending-count")
     @PreAuthorize("hasAuthority('ROLE_COACH')")
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/ClassSessionDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.dto;\r\n\r\nimport lombok.Data;\r\nimport java.time.LocalDateTime;\r\nimport java.util.List;\r\n\r\n@Data\r\npublic class ClassSessionDto {\r\n    private Integer id;\r\n    private Integer coachId;\r\n    private String coachName;\r\n    private Integer courtId;\r\n    private String courtName;\r\n    private LocalDateTime startTime;\r\n    private LocalDateTime endTime;\r\n    private Integer maxParticipants;\r\n    private Integer currentParticipants;\r\n    private String description;\r\n    private String status;\r\n    private LocalDateTime createdAt;\r\n    private LocalDateTime updatedAt;\r\n    private Double price;\r\n    private String title;\r\n    private String slotType; // 新增字段：课程类型\r\n    private String recurringGroupId;\r\n    private String venueName;\r\n    private String venueState;\r\n    // 新增：報名名單\r\n    private List<ClassRegistrationDto> registrations;\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/ClassSessionDto.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/ClassSessionDto.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/ClassSessionDto.java	(revision 89327e12854b108d004ebb020d0592b1c618ecaf)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/ClassSessionDto.java	(date 1754289886329)
@@ -25,6 +25,7 @@
     private String recurringGroupId;
     private String venueName;
     private String venueState;
+    private Boolean allowReplacement; // 新增：是否允許補課
     // 新增：報名名單
     private List<ClassRegistrationDto> registrations;
 }
\ No newline at end of file
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/PaymentController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.controller;\r\n\r\nimport com.pickleball_backend.pickleball.dto.BookingResponseDto;\r\nimport com.pickleball_backend.pickleball.dto.PaymentRequestDto;\r\nimport com.pickleball_backend.pickleball.exception.InsufficientBalanceException;\r\nimport com.pickleball_backend.pickleball.service.BookingService;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\nimport java.util.Map;\r\n\r\n@RestController\r\n@RequestMapping(\"/api/payment\")\r\n@RequiredArgsConstructor\r\npublic class PaymentController {\r\n    private final BookingService bookingService;\r\n\r\n    @PostMapping(\"/wallet\")\r\n    public ResponseEntity<?> processWalletPayment(@RequestBody PaymentRequestDto request) {\r\n        try {\r\n            BookingResponseDto response = bookingService.bookCourt(request.getBookingRequest());\r\n            return ResponseEntity.ok(response);\r\n        } catch (InsufficientBalanceException e) {\r\n            return ResponseEntity.badRequest().body(\r\n                    Map.of(\"error\", \"INSUFFICIENT_BALANCE\", \"message\", e.getMessage())\r\n            );\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/PaymentController.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/PaymentController.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/PaymentController.java	(revision 89327e12854b108d004ebb020d0592b1c618ecaf)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/PaymentController.java	(date 1754067738395)
@@ -27,4 +27,37 @@
             );
         }
     }
+
+    @PostMapping("/voucher")
+    public ResponseEntity<?> processVoucherPayment(@RequestBody PaymentRequestDto request) {
+        try {
+            // 確保使用voucher
+            request.getBookingRequest().setUseVoucher(true);
+            BookingResponseDto response = bookingService.bookCourt(request.getBookingRequest());
+            return ResponseEntity.ok(response);
+        } catch (Exception e) {
+            return ResponseEntity.badRequest().body(
+                    Map.of("error", "VOUCHER_ERROR", "message", e.getMessage())
+            );
+        }
+    }
+
+    @PostMapping("/wallet-with-voucher")
+    public ResponseEntity<?> processWalletWithVoucherPayment(@RequestBody PaymentRequestDto request) {
+        try {
+            // 同時使用wallet和voucher
+            request.getBookingRequest().setUseWallet(true);
+            request.getBookingRequest().setUseVoucher(true);
+            BookingResponseDto response = bookingService.bookCourt(request.getBookingRequest());
+            return ResponseEntity.ok(response);
+        } catch (InsufficientBalanceException e) {
+            return ResponseEntity.badRequest().body(
+                    Map.of("error", "INSUFFICIENT_BALANCE", "message", e.getMessage())
+            );
+        } catch (Exception e) {
+            return ResponseEntity.badRequest().body(
+                    Map.of("error", "PAYMENT_ERROR", "message", e.getMessage())
+            );
+        }
+    }
 }
\ No newline at end of file
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/UserServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.service;\r\n\r\nimport com.pickleball_backend.pickleball.dto.*;\r\nimport com.pickleball_backend.pickleball.entity.*;\r\nimport com.pickleball_backend.pickleball.exception.UnauthorizedException;\r\nimport com.pickleball_backend.pickleball.repository.*;\r\nimport com.pickleball_backend.pickleball.security.JwtService;\r\nimport jakarta.persistence.EntityNotFoundException;\r\nimport lombok.RequiredArgsConstructor;\r\nimport lombok.extern.slf4j.Slf4j;\r\nimport org.springframework.security.core.Authentication;\r\nimport org.springframework.security.core.context.SecurityContextHolder;\r\nimport org.springframework.security.core.userdetails.UsernameNotFoundException;\r\nimport org.springframework.security.crypto.password.PasswordEncoder;\r\nimport org.springframework.stereotype.Service;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.transaction.annotation.Transactional;\r\n\r\nimport java.time.LocalDate;\r\nimport java.time.LocalDateTime;\r\nimport java.util.*;\r\nimport java.util.stream.Collectors;\r\n\r\n@Service\r\n@RequiredArgsConstructor\r\n@Slf4j\r\npublic class UserServiceImpl implements UserService {\r\n\r\n    private final UserRepository userRepository;\r\n    private final UserAccountRepository userAccountRepository;\r\n    private final AdminRepository adminRepository;\r\n    private final PasswordEncoder passwordEncoder;\r\n    private final JwtService jwtService;\r\n    private final EmailService emailService;\r\n    private final MemberRepository memberRepository;\r\n    private final MembershipTierRepository membershipTierRepository;\r\n    private final WalletRepository walletRepository;\r\n    private final FeedbackRepository feedbackRepository;\r\n    private final EventOrganizerRepository eventOrganizerRepository;\r\n    private final FriendRequestRepository friendRequestRepository;\r\n    // 你要注入 CoachRepository\r\n    @Autowired\r\n    private CoachRepository coachRepository;\r\n\r\n    @Override\r\n    public void register(RegistrationDto dto) {\r\n        if (userAccountRepository.findByUsername(dto.getUsername()).isPresent()) {\r\n            throw new RuntimeException(\"Username already exists\");\r\n        }\r\n\r\n        if (userRepository.findByEmail(dto.getEmail()).isPresent()) {\r\n            throw new RuntimeException(\"Email already registered\");\r\n        }\r\n\r\n        User user = new User();\r\n        user.setName(dto.getName());\r\n        user.setGender(dto.getGender());\r\n        user.setDob(LocalDate.parse(dto.getDob()));\r\n        user.setEmail(dto.getEmail());\r\n        user.setPhone(dto.getPhone());\r\n        user.setUserType(dto.getUserType());\r\n\r\n        if (\"EventOrganizer\".equals(dto.getUserType())) {\r\n            user.setRequestedUserType(\"EventOrganizer\");\r\n        }\r\n\r\n        userRepository.save(user);\r\n\r\n        UserAccount account = new UserAccount();\r\n        account.setUsername(dto.getUsername());\r\n        account.setPassword(passwordEncoder.encode(dto.getPassword()));\r\n        account.setUser(user);\r\n        account.setStatus(\"ACTIVE\"); // 設置狀態為ACTIVE\r\n        userAccountRepository.save(account);\r\n\r\n        if (\"ADMIN\".equalsIgnoreCase(dto.getUserType())) {\r\n            Admin admin = new Admin();\r\n            admin.setUser(user);\r\n            admin.setPosition(dto.getPosition());\r\n            adminRepository.save(admin);\r\n        }\r\n\r\n        if (\"EventOrganizer\".equalsIgnoreCase(dto.getUserType())) {\r\n            EventOrganizer eventOrganizer = new EventOrganizer();\r\n            eventOrganizer.setUser(user);\r\n            eventOrganizer.setOrganizerRating(0.0);\r\n            eventOrganizerRepository.save(eventOrganizer);\r\n        }\r\n\r\n        if (\"COACH\".equalsIgnoreCase(dto.getUserType())) {\r\n            Coach coach = new Coach();\r\n            coach.setUser(user);\r\n            coach.setExperienceYear(dto.getExperienceYear());\r\n            coachRepository.save(coach);\r\n        }\r\n\r\n        // Create membership tier assignment\r\n        assignDefaultMembershipTier(user);\r\n        initializeUserWallet(user);\r\n        log.info(\"User registered successfully with Silver tier: {}\", dto.getUsername());\r\n    }\r\n\r\n    private void assignDefaultMembershipTier(User user) {\r\n        // Use the correct repository: membershipTierRepository\r\n        MembershipTier silverTier = membershipTierRepository.findByTierName(\"SILVER\");\r\n\r\n        // Create default tier if not exists\r\n        if (silverTier == null) {\r\n            silverTier = new MembershipTier();\r\n            silverTier.setTierName(\"SILVER\"); // 直接使用字符串值\r\n            silverTier.setMinPoints(0);\r\n            silverTier.setMaxPoints(2000);\r\n            silverTier.setBenefits(\"10% discount\");\r\n            silverTier = membershipTierRepository.save(silverTier);\r\n            log.info(\"Created default SILVER tier\");\r\n        }\r\n\r\n        // Create member record\r\n        Member member = new Member();\r\n        member.setUser(user);\r\n        member.setTier(silverTier);\r\n        member.setPointBalance(0);  // Changed from 1000 to 0\r\n        memberRepository.save(member);\r\n        user.setMember(member);\r\n        userRepository.save(user);\r\n        log.info(\"Assigned default Silver tier to user: {}\", user.getEmail());\r\n    }\r\n\r\n    @Override\r\n    public Optional<String> login(LoginDto dto) {\r\n        log.debug(\"Login attempt for: {}\", dto.getUsernameOrEmail());\r\n\r\n        Optional<UserAccount> accountOpt = userAccountRepository.findByUsername(dto.getUsernameOrEmail());\r\n\r\n        if (accountOpt.isEmpty()) {\r\n            accountOpt = userAccountRepository.findByUser_Email(dto.getUsernameOrEmail());\r\n        }\r\n\r\n        Optional<String> token = accountOpt\r\n                .filter(account -> passwordEncoder.matches(dto.getPassword(), account.getPassword()))\r\n                .map(account -> {\r\n                    String userType = account.getUser().getUserType();\r\n                    String role = \"ROLE_\" + userType.toUpperCase(); // 添加ROLE_前綴\r\n                    return jwtService.generateTokenWithUserId(\r\n                            account.getUsername(),\r\n                            role, // 使用正確的角色格式\r\n                            account.getUser().getId() // Include user ID\r\n                    );\r\n                });\r\n\r\n        if (token.isPresent()) {\r\n            log.info(\"Login successful for: {}\", dto.getUsernameOrEmail());\r\n        } else {\r\n            log.warn(\"Login failed for: {}\", dto.getUsernameOrEmail());\r\n        }\r\n\r\n        return token;\r\n    }\r\n\r\n    @Override\r\n    public void requestPasswordReset(String email) {\r\n        log.info(\"Password reset requested for: {}\", email);\r\n\r\n        try {\r\n            User user = userRepository.findByEmail(email)\r\n                    .orElseThrow(() -> {\r\n                        String errorMsg = \"User not found with email: \" + email;\r\n                        log.error(errorMsg);\r\n                        return new RuntimeException(errorMsg);\r\n                    });\r\n\r\n            UserAccount account = userAccountRepository.findByUser_Email(email)\r\n                    .orElseThrow(() -> {\r\n                        String errorMsg = \"User account not found for email: \" + email;\r\n                        log.error(errorMsg);\r\n                        return new RuntimeException(errorMsg);\r\n                    });\r\n\r\n            // Generate token\r\n            String token = UUID.randomUUID().toString();\r\n            account.setResetPasswordToken(token);\r\n            account.setResetPasswordTokenExpiry(LocalDateTime.now().plusHours(1));\r\n            userAccountRepository.save(account);\r\n\r\n            log.info(\"Generated reset token: {} for email: {}\", token, email);\r\n\r\n            // Send email\r\n            String resetLink = \"http://localhost:3000/reset-password/\" + token;\r\n            emailService.sendPasswordResetEmail(email, resetLink);\r\n            log.info(\"Password reset email sent to: {}\", email);\r\n\r\n        } catch (Exception e) {\r\n            log.error(\"Password reset failed for: {}\", email, e);\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void resetPassword(String token, String newPassword) {\r\n        log.info(\"Password reset attempt with token: {}\", token);\r\n\r\n        try {\r\n            UserAccount account = userAccountRepository.findByResetPasswordToken(token)\r\n                    .orElseThrow(() -> {\r\n                        String errorMsg = \"Invalid password reset token: \" + token;\r\n                        log.error(errorMsg);\r\n                        return new RuntimeException(errorMsg);\r\n                    });\r\n\r\n            if (account.getResetPasswordTokenExpiry().isBefore(LocalDateTime.now())) {\r\n                String errorMsg = \"Token expired: \" + token;\r\n                log.error(errorMsg);\r\n                throw new RuntimeException(errorMsg);\r\n            }\r\n\r\n            account.setPassword(passwordEncoder.encode(newPassword));\r\n            account.setResetPasswordToken(null);\r\n            account.setResetPasswordTokenExpiry(null);\r\n            userAccountRepository.save(account);\r\n\r\n            log.info(\"Password reset successful for user: {}\", account.getUsername());\r\n\r\n        } catch (Exception e) {\r\n            log.error(\"Password reset failed for token: {}\", token, e);\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    private void initializeUserWallet(User user) {\r\n        Member member = user.getMember();\r\n        if (member != null && walletRepository.findByMemberId(member.getId()).isEmpty()) {\r\n            Wallet wallet = new Wallet();\r\n            wallet.setMember(member);\r\n            wallet.setBalance(0.00);\r\n            walletRepository.save(wallet);\r\n            log.info(\"Created wallet for member: {}\", member.getId());\r\n        }\r\n    }\r\n\r\n    @Override\r\n    @Transactional\r\n    public List<UserDto> searchUsers(String query) {\r\n        List<User> users = userRepository.searchActiveUsers(query);\r\n        return users.stream()\r\n                .map(user -> new UserDto(\r\n                        user.getUserAccount() != null ? user.getUserAccount().getUsername() : null,\r\n                        user.getName(),\r\n                        user.getProfileImage()\r\n                ))\r\n                .collect(Collectors.toList());\r\n    }\r\n\r\n    public Integer getCurrentUserId() {\r\n        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();\r\n        if (authentication == null) {\r\n            throw new UnauthorizedException(\"No authentication found\");\r\n        }\r\n\r\n        String username = authentication.getName();\r\n        if (username == null) {\r\n            throw new UsernameNotFoundException(\"Username not found in authentication\");\r\n        }\r\n        UserAccount account = userAccountRepository.findByUsername(username)\r\n                .orElseThrow(() -> new UsernameNotFoundException(\"User not found\"));\r\n\r\n        return account.getUser().getId();\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/UserServiceImpl.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/UserServiceImpl.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/UserServiceImpl.java	(revision 89327e12854b108d004ebb020d0592b1c618ecaf)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/UserServiceImpl.java	(date 1754078717542)
@@ -38,6 +38,8 @@
     private final FeedbackRepository feedbackRepository;
     private final EventOrganizerRepository eventOrganizerRepository;
     private final FriendRequestRepository friendRequestRepository;
+    private final VoucherRepository voucherRepository;
+
     // 你要注入 CoachRepository
     @Autowired
     private CoachRepository coachRepository;
@@ -97,6 +99,10 @@
         // Create membership tier assignment
         assignDefaultMembershipTier(user);
         initializeUserWallet(user);
+        
+        // Create new user welcome voucher
+        createNewUserVoucher(user);
+        
         log.info("User registered successfully with Silver tier: {}", dto.getUsername());
     }
 
@@ -119,11 +125,12 @@
         Member member = new Member();
         member.setUser(user);
         member.setTier(silverTier);
-        member.setPointBalance(0);  // Changed from 1000 to 0
+        member.setTierPointBalance(0);  // Initialize tier points
+        member.setRewardPointBalance(0); // Initialize reward points
         memberRepository.save(member);
         user.setMember(member);
         userRepository.save(user);
-        log.info("Assigned default Silver tier to user: {}", user.getEmail());
+        log.info("Assigned default Silver tier to user: {} with 0 tier points and 0 reward points", user.getEmail());
     }
 
     @Override
@@ -237,6 +244,27 @@
         }
     }
 
+    private void createNewUserVoucher(User user) {
+        try {
+            // Create a welcome voucher for new users
+            Voucher welcomeVoucher = new Voucher();
+            welcomeVoucher.setCode("WELCOME");
+            welcomeVoucher.setDiscountType("percentage");
+            welcomeVoucher.setDiscountValue(10.0); // 10% discount
+            welcomeVoucher.setRequestPoints(0); // Free voucher
+            welcomeVoucher.setExpiryDate(LocalDate.now().plusMonths(3)); // Valid for 3 months
+            welcomeVoucher.setTierId(null); // Available to all tiers (general voucher)
+            welcomeVoucher.setMember(user.getMember()); // Assign to the new user
+            
+            voucherRepository.save(welcomeVoucher);
+            log.info("Created welcome voucher for new user: {}", user.getEmail());
+            
+        } catch (Exception e) {
+            log.error("Failed to create welcome voucher for user: {}", user.getEmail(), e);
+            // Don't throw exception to avoid breaking registration process
+        }
+    }
+
     @Override
     @Transactional
     public List<UserDto> searchUsers(String query) {
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/VoucherDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.dto;\r\n\r\nimport com.fasterxml.jackson.annotation.JsonFormat;\r\nimport lombok.AllArgsConstructor;\r\nimport lombok.Getter;\r\nimport lombok.NoArgsConstructor;\r\nimport lombok.Setter;\r\n\r\nimport java.time.LocalDate;\r\n\r\n@Getter\r\n@Setter\r\n@AllArgsConstructor\r\n@NoArgsConstructor\r\npublic class VoucherDto {\r\n    private Integer id;\r\n    private String code;\r\n    private Double discountValue;  // Changed from discountAmount to discountValue\r\n    private String discountType;  // Added discount type field\r\n    private Integer requestPoints;\r\n    private String tierName;  // Added tier name field\r\n    \r\n    @JsonFormat(pattern = \"dd-MM-yyyy\")\r\n    private LocalDate expiryDate;\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/VoucherDto.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/VoucherDto.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/VoucherDto.java	(revision 89327e12854b108d004ebb020d0592b1c618ecaf)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/VoucherDto.java	(date 1754073077039)
@@ -20,6 +20,6 @@
     private Integer requestPoints;
     private String tierName;  // Added tier name field
     
-    @JsonFormat(pattern = "dd-MM-yyyy")
+    @JsonFormat(pattern = "yyyy-MM-dd")
     private LocalDate expiryDate;
 }
\ No newline at end of file
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/VoucherRedemption.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.entity;\r\n\r\nimport jakarta.persistence.*;\r\nimport jakarta.persistence.AttributeConverter;\r\nimport jakarta.persistence.Converter;\r\nimport lombok.Data;\r\nimport lombok.NoArgsConstructor;\r\nimport lombok.AllArgsConstructor;\r\n\r\nimport java.time.LocalDate;\r\n\r\n@Entity\r\n@Table(name = \"voucher_redemption\")\r\n@Data\r\n@NoArgsConstructor\r\n@AllArgsConstructor\r\npublic class VoucherRedemption {\r\n    \r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Integer id;\r\n    \r\n    @Column(name = \"voucher_id\", nullable = false)\r\n    private Integer voucherId;\r\n    \r\n    @Column(name = \"user_id\", nullable = false)\r\n    private Integer userId;\r\n    \r\n    @Column(name = \"redemption_date\", nullable = false)\r\n    private LocalDate redemptionDate;\r\n    \r\n    @Column(name = \"expiry_date\")\r\n    private LocalDate expiryDate;\r\n\r\n    @Column(name = \"status\", nullable = false)\r\n    private String status;  // Changed from enum to String\r\n    \r\n    // Relationships\r\n    @ManyToOne(fetch = FetchType.LAZY)\r\n    @JoinColumn(name = \"voucher_id\", insertable = false, updatable = false)\r\n    private Voucher voucher;\r\n    \r\n    @ManyToOne(fetch = FetchType.LAZY)\r\n    @JoinColumn(name = \"user_id\", insertable = false, updatable = false)\r\n    private User user;\r\n} 
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/VoucherRedemption.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/VoucherRedemption.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/VoucherRedemption.java	(revision 89327e12854b108d004ebb020d0592b1c618ecaf)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/entity/VoucherRedemption.java	(date 1754164584088)
@@ -3,7 +3,8 @@
 import jakarta.persistence.*;
 import jakarta.persistence.AttributeConverter;
 import jakarta.persistence.Converter;
-import lombok.Data;
+import lombok.Getter;
+import lombok.Setter;
 import lombok.NoArgsConstructor;
 import lombok.AllArgsConstructor;
 
@@ -11,11 +12,18 @@
 
 @Entity
 @Table(name = "voucher_redemption")
-@Data
+@Getter
+@Setter
 @NoArgsConstructor
 @AllArgsConstructor
 public class VoucherRedemption {
     
+    // Status constants
+    public static final String STATUS_ACTIVE = "ACTIVE";
+    public static final String STATUS_USED = "USED";
+    public static final String STATUS_PENDING_REFUND = "PENDING_REFUND";
+    public static final String STATUS_RESTORED = "RESTORED";
+    
     @Id
     @GeneratedValue(strategy = GenerationType.IDENTITY)
     private Integer id;
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/RegisterMultiSessionRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.dto;\r\n\r\nimport lombok.Data;\r\nimport java.util.List;\r\n\r\n@Data\r\npublic class RegisterMultiSessionRequest {\r\n    private List<Integer> sessionIds;\r\n    private String paymentMethod; // \"wallet\" or \"card\"\r\n} 
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/RegisterMultiSessionRequest.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/RegisterMultiSessionRequest.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/RegisterMultiSessionRequest.java	(revision 89327e12854b108d004ebb020d0592b1c618ecaf)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/dto/RegisterMultiSessionRequest.java	(date 1754174882567)
@@ -7,4 +7,6 @@
 public class RegisterMultiSessionRequest {
     private List<Integer> sessionIds;
     private String paymentMethod; // "wallet" or "card"
+    private Integer numPaddles; // 球拍數量
+    private Boolean buyBallSet; // 是否購買球組
 } 
\ No newline at end of file
Index: pickleball-frontend/src/components/profile/ActiveVouchers.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useState, useEffect } from 'react';\r\nimport { \r\n  Box, \r\n  Typography, \r\n  CircularProgress, \r\n  Grid,\r\n  Card,\r\n  CardContent,\r\n  Button,\r\n  Alert,\r\n  useTheme,\r\n  Chip,\r\n  alpha\r\n} from '@mui/material';\r\nimport { \r\n  LocalOffer as VoucherIcon,\r\n  CheckCircle as UsedIcon,\r\n  Schedule as ActiveIcon,\r\n  Warning as ExpiredIcon\r\n} from '@mui/icons-material';\r\nimport axios from 'axios';\r\nimport UserService from '../../service/UserService';\r\nimport ThemedCard from '../common/ThemedCard';\r\n\r\nconst ActiveVouchers = () => {\r\n  const theme = useTheme();\r\n  const [activeVouchers, setActiveVouchers] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState('');\r\n  const [usingVoucher, setUsingVoucher] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchActiveVouchers = async () => {\r\n      try {\r\n        const token = UserService.getToken();\r\n        const response = await axios.get('http://localhost:8081/api/voucher-redemption/my-active-redemptions', {\r\n          headers: { \r\n            'Authorization': `Bearer ${token}`,\r\n            'Content-Type': 'application/json'\r\n          }\r\n        });\r\n        \r\n        setActiveVouchers(response.data);\r\n      } catch (err) {\r\n        setError('Failed to load active vouchers');\r\n        console.error(err);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchActiveVouchers();\r\n  }, []);\r\n\r\n  const handleUseVoucher = async (redemptionId) => {\r\n    setUsingVoucher(redemptionId);\r\n    try {\r\n      const token = UserService.getToken();\r\n      await axios.post(`http://localhost:8081/api/voucher-redemption/use/${redemptionId}`, {}, {\r\n        headers: { \r\n          'Authorization': `Bearer ${token}`,\r\n          'Content-Type': 'application/json'\r\n        }\r\n      });\r\n      \r\n      // Refresh the list\r\n      const response = await axios.get('http://localhost:8081/api/voucher-redemption/my-active-redemptions', {\r\n        headers: { \r\n          'Authorization': `Bearer ${token}`,\r\n          'Content-Type': 'application/json'\r\n        }\r\n      });\r\n      setActiveVouchers(response.data);\r\n      \r\n      // Show success message\r\n      alert('Voucher used successfully!');\r\n    } catch (err) {\r\n      const errorMsg = err.response?.data?.message || 'Failed to use voucher';\r\n      alert(errorMsg);\r\n    } finally {\r\n      setUsingVoucher(null);\r\n    }\r\n  };\r\n\r\n  const formatDate = (dateString) => {\r\n    if (!dateString) return 'No expiry date';\r\n    return new Date(dateString).toLocaleDateString('en-US', {\r\n      year: 'numeric',\r\n      month: 'long',\r\n      day: 'numeric'\r\n    });\r\n  };\r\n\r\n  const isExpired = (expiryDate) => {\r\n    if (!expiryDate) return false;\r\n    return new Date(expiryDate) < new Date();\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <Box display=\"flex\" justifyContent=\"center\" mt={4}>\r\n        <CircularProgress />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <Box mt={4}>\r\n        <Alert severity=\"error\">{error}</Alert>\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  if (activeVouchers.length === 0) {\r\n    return (\r\n      <Box mt={4} textAlign=\"center\">\r\n        <VoucherIcon sx={{ fontSize: 60, color: theme.palette.text.disabled, mb: 2 }} />\r\n        <Typography variant=\"h6\" color=\"textSecondary\">\r\n          No active vouchers found\r\n        </Typography>\r\n        <Typography variant=\"body1\" color=\"textSecondary\" mt={1}>\r\n          You don't have any active vouchers to use.\r\n        </Typography>\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Box>\r\n      <Typography variant=\"h4\" fontWeight=\"bold\" sx={{ mb: 3 }}>\r\n        Active Vouchers\r\n      </Typography>\r\n      \r\n      <Grid container spacing={3}>\r\n        {activeVouchers.map((voucher) => {\r\n          const expired = isExpired(voucher.expiryDate);\r\n          \r\n          return (\r\n            <Grid item xs={12} md={6} lg={4} key={voucher.id}>\r\n              <ThemedCard sx={{ \r\n                height: '100%',\r\n                borderRadius: 3,\r\n                boxShadow: '0 4px 12px rgba(0,0,0,0.1)',\r\n                transition: 'transform 0.2s, box-shadow 0.2s',\r\n                '&:hover': {\r\n                  transform: 'translateY(-2px)',\r\n                  boxShadow: '0 8px 24px rgba(0,0,0,0.15)'\r\n                },\r\n                opacity: expired ? 0.7 : 1\r\n              }}>\r\n                <CardContent sx={{ p: 3 }}>\r\n                  <Box sx={{ \r\n                    display: 'flex', \r\n                    justifyContent: 'space-between', \r\n                    alignItems: 'flex-start',\r\n                    mb: 2\r\n                  }}>\r\n                    <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                      <VoucherIcon sx={{ color: theme.palette.primary.main, mr: 1 }} />\r\n                      <Typography variant=\"h6\" fontWeight=\"bold\">\r\n                        {voucher.voucherCode}\r\n                      </Typography>\r\n                    </Box>\r\n                    {expired ? (\r\n                      <ExpiredIcon sx={{ color: theme.palette.error.main }} />\r\n                    ) : (\r\n                      <ActiveIcon sx={{ color: theme.palette.success.main }} />\r\n                    )}\r\n                  </Box>\r\n\r\n                  <Typography variant=\"h5\" fontWeight=\"bold\" sx={{ mb: 1 }}>\r\n                    {voucher.voucherTitle}\r\n                  </Typography>\r\n\r\n                  <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\r\n                    {voucher.voucherDescription}\r\n                  </Typography>\r\n\r\n                  <Box sx={{ \r\n                    backgroundColor: expired ? \r\n                      alpha(theme.palette.error.main, 0.1) : \r\n                      alpha(theme.palette.success.main, 0.1),\r\n                    p: 2,\r\n                    borderRadius: 2,\r\n                    mb: 2\r\n                  }}>\r\n                    <Chip \r\n                      label={expired ? 'EXPIRED' : 'ACTIVE'}\r\n                      size=\"small\"\r\n                      sx={{ \r\n                        backgroundColor: expired ? \r\n                          theme.palette.error.main : \r\n                          theme.palette.success.main,\r\n                        color: 'white',\r\n                        fontWeight: 'bold',\r\n                        mb: 1\r\n                      }}\r\n                    />\r\n                    \r\n                    <Typography variant=\"body2\" color=\"text.secondary\">\r\n                      <strong>Redeemed:</strong> {formatDate(voucher.redemptionDate)}\r\n                    </Typography>\r\n                    \r\n                    {voucher.expiryDate && (\r\n                      <Typography variant=\"body2\" color=\"text.secondary\">\r\n                        <strong>Expires:</strong> {formatDate(voucher.expiryDate)}\r\n                      </Typography>\r\n                    )}\r\n                  </Box>\r\n\r\n                  <Box sx={{ \r\n                    display: 'flex', \r\n                    justifyContent: 'space-between',\r\n                    alignItems: 'center',\r\n                    pt: 1,\r\n                    borderTop: '2px solid',\r\n                    borderColor: theme.palette.divider,\r\n                    opacity: 0.8\r\n                  }}>\r\n                    <Typography variant=\"body2\" color=\"text.secondary\">\r\n                      Discount: {voucher.discountType === 'percentage' ? \r\n                        `${voucher.discountValue}%` : \r\n                        `RM${voucher.discountValue}`}\r\n                    </Typography>\r\n                    \r\n                    <Button\r\n                      variant=\"contained\"\r\n                      size=\"small\"\r\n                      disabled={expired || usingVoucher === voucher.id}\r\n                      onClick={() => handleUseVoucher(voucher.id)}\r\n                      sx={{ \r\n                        backgroundColor: expired ? \r\n                          theme.palette.error.main : \r\n                          theme.palette.primary.main,\r\n                        '&:hover': {\r\n                          backgroundColor: expired ? \r\n                            theme.palette.error.dark : \r\n                            theme.palette.primary.dark\r\n                        }\r\n                      }}\r\n                    >\r\n                      {usingVoucher === voucher.id ? (\r\n                        <CircularProgress size={16} color=\"inherit\" />\r\n                      ) : expired ? (\r\n                        'Expired'\r\n                      ) : (\r\n                        'Use Voucher'\r\n                      )}\r\n                    </Button>\r\n                  </Box>\r\n                </CardContent>\r\n              </ThemedCard>\r\n            </Grid>\r\n          );\r\n        })}\r\n      </Grid>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default ActiveVouchers; 
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball-frontend/src/components/profile/ActiveVouchers.jsx b/pickleball-frontend/src/components/profile/ActiveVouchers.jsx
--- a/pickleball-frontend/src/components/profile/ActiveVouchers.jsx	(revision 89327e12854b108d004ebb020d0592b1c618ecaf)
+++ b/pickleball-frontend/src/components/profile/ActiveVouchers.jsx	(date 1754076339631)
@@ -1,49 +1,37 @@
 import React, { useState, useEffect } from 'react';
 import { 
-  Box, 
-  Typography, 
-  CircularProgress, 
-  Grid,
-  Card,
-  CardContent,
-  Button,
-  Alert,
-  useTheme,
-  Chip,
-  alpha
+  Box, Grid, Card, CardContent, Typography, Chip, Button, 
+  CircularProgress, Alert, Grow, useTheme, alpha
 } from '@mui/material';
-import { 
-  LocalOffer as VoucherIcon,
-  CheckCircle as UsedIcon,
-  Schedule as ActiveIcon,
-  Warning as ExpiredIcon
-} from '@mui/icons-material';
+import { ConfirmationNumber as VoucherIcon } from '@mui/icons-material';
 import axios from 'axios';
 import UserService from '../../service/UserService';
-import ThemedCard from '../common/ThemedCard';
+import { formatVoucherExpiryDate } from '../../utils/dateUtils';
 
-const ActiveVouchers = () => {
+const ActiveVouchers = ({ onSuccess, onError }) => {
   const theme = useTheme();
+  const [usingId, setUsingId] = useState(null);
   const [activeVouchers, setActiveVouchers] = useState([]);
   const [loading, setLoading] = useState(true);
   const [error, setError] = useState('');
-  const [usingVoucher, setUsingVoucher] = useState(null);
+  const [success, setSuccess] = useState('');
 
+  // Fetch active vouchers
   useEffect(() => {
     const fetchActiveVouchers = async () => {
       try {
         const token = UserService.getToken();
+        if (!token) return;
+
         const response = await axios.get('http://localhost:8081/api/voucher-redemption/my-active-redemptions', {
-          headers: { 
-            'Authorization': `Bearer ${token}`,
-            'Content-Type': 'application/json'
-          }
+          headers: { Authorization: `Bearer ${token}` }
         });
-        
+
         setActiveVouchers(response.data);
       } catch (err) {
-        setError('Failed to load active vouchers');
-        console.error(err);
+        console.error('Error fetching active vouchers:', err);
+        setError('Failed to load active vouchers. Please try again later.');
+        if (onError) onError('Failed to load active vouchers. Please try again later.');
       } finally {
         setLoading(false);
       }
@@ -53,208 +41,237 @@
   }, []);
 
   const handleUseVoucher = async (redemptionId) => {
-    setUsingVoucher(redemptionId);
+    setUsingId(redemptionId);
+    setError('');
+    setSuccess('');
+    
     try {
       const token = UserService.getToken();
-      await axios.post(`http://localhost:8081/api/voucher-redemption/use/${redemptionId}`, {}, {
-        headers: { 
-          'Authorization': `Bearer ${token}`,
-          'Content-Type': 'application/json'
-        }
-      });
-      
-      // Refresh the list
-      const response = await axios.get('http://localhost:8081/api/voucher-redemption/my-active-redemptions', {
-        headers: { 
-          'Authorization': `Bearer ${token}`,
-          'Content-Type': 'application/json'
-        }
-      });
-      setActiveVouchers(response.data);
-      
-      // Show success message
-      alert('Voucher used successfully!');
+      if (!token) return;
+
+      const response = await axios.post(
+        `http://localhost:8081/api/voucher-redemption/use/${redemptionId}`,
+        {},
+        { headers: { Authorization: `Bearer ${token}` } }
+      );
+
+      if (response.data) {
+        const successMsg = `Successfully used voucher: ${response.data.voucherCode}`;
+        setSuccess(successMsg);
+        if (onSuccess) onSuccess(successMsg);
+        
+        // Remove the used voucher from the list
+        setActiveVouchers(prev => prev.filter(v => v.id !== redemptionId));
+      }
     } catch (err) {
+      console.error('Error using voucher:', err);
       const errorMsg = err.response?.data?.message || 'Failed to use voucher';
-      alert(errorMsg);
+      setError(errorMsg);
+      if (onError) onError(errorMsg);
     } finally {
-      setUsingVoucher(null);
+      setUsingId(null);
     }
   };
 
-  const formatDate = (dateString) => {
-    if (!dateString) return 'No expiry date';
-    return new Date(dateString).toLocaleDateString('en-US', {
-      year: 'numeric',
-      month: 'long',
-      day: 'numeric'
-    });
-  };
-
-  const isExpired = (expiryDate) => {
-    if (!expiryDate) return false;
-    return new Date(expiryDate) < new Date();
+  const handleCloseSnackbar = () => {
+    setError('');
+    setSuccess('');
   };
 
   if (loading) {
     return (
-      <Box display="flex" justifyContent="center" mt={4}>
-        <CircularProgress />
-      </Box>
-    );
-  }
-
-  if (error) {
-    return (
-      <Box mt={4}>
-        <Alert severity="error">{error}</Alert>
-      </Box>
-    );
-  }
-
-  if (activeVouchers.length === 0) {
-    return (
-      <Box mt={4} textAlign="center">
-        <VoucherIcon sx={{ fontSize: 60, color: theme.palette.text.disabled, mb: 2 }} />
-        <Typography variant="h6" color="textSecondary">
-          No active vouchers found
-        </Typography>
-        <Typography variant="body1" color="textSecondary" mt={1}>
-          You don't have any active vouchers to use.
-        </Typography>
+      <Box sx={{ display: 'flex', justifyContent: 'center', mt: 4 }}>
+        <CircularProgress size={60} sx={{ color: theme.palette.primary.main }} />
       </Box>
     );
   }
 
   return (
     <Box>
+      {error && (
+        <Alert severity="error" onClose={handleCloseSnackbar} sx={{ mb: 3 }}>
+          {error}
+        </Alert>
+      )}
+      
+      {success && (
+        <Alert severity="success" onClose={handleCloseSnackbar} sx={{ mb: 3 }}>
+          {success}
+        </Alert>
+      )}
+
       <Typography variant="h4" fontWeight="bold" sx={{ mb: 3 }}>
-        Active Vouchers
+        My Active Vouchers
       </Typography>
       
-      <Grid container spacing={3}>
-        {activeVouchers.map((voucher) => {
-          const expired = isExpired(voucher.expiryDate);
-          
-          return (
-            <Grid item xs={12} md={6} lg={4} key={voucher.id}>
-              <ThemedCard sx={{ 
-                height: '100%',
-                borderRadius: 3,
-                boxShadow: '0 4px 12px rgba(0,0,0,0.1)',
-                transition: 'transform 0.2s, box-shadow 0.2s',
-                '&:hover': {
-                  transform: 'translateY(-2px)',
-                  boxShadow: '0 8px 24px rgba(0,0,0,0.15)'
-                },
-                opacity: expired ? 0.7 : 1
-              }}>
-                <CardContent sx={{ p: 3 }}>
-                  <Box sx={{ 
-                    display: 'flex', 
-                    justifyContent: 'space-between', 
-                    alignItems: 'flex-start',
-                    mb: 2
-                  }}>
-                    <Box sx={{ display: 'flex', alignItems: 'center' }}>
-                      <VoucherIcon sx={{ color: theme.palette.primary.main, mr: 1 }} />
-                      <Typography variant="h6" fontWeight="bold">
-                        {voucher.voucherCode}
+      {activeVouchers.length === 0 ? (
+        <Alert severity="info" sx={{ borderRadius: 3, boxShadow: 1 }}>
+          You don't have any active vouchers. Redeem some vouchers to get started!
+        </Alert>
+      ) : (
+        <Grid container spacing={3}>
+          {activeVouchers.map((voucher, index) => {
+            let backgroundColor;
+            if (voucher.discountType === 'percentage') {
+              backgroundColor = voucher.discountValue > 30 
+                ? '#e8f5e8' 
+                : voucher.discountValue > 15 
+                  ? '#fff3e0' 
+                  : '#f3e5f5';
+            } else {
+              backgroundColor = voucher.discountValue > 50 
+                ? '#e8f5e8' 
+                : voucher.discountValue > 20 
+                  ? '#fff3e0' 
+                  : '#f3e5f5';
+            }
+            
+            return (
+              <Grid item xs={12} sm={6} md={4} key={voucher.id}>
+                <Grow in timeout={index * 200}>
+                  <Card sx={{ 
+                    height: '100%',
+                    borderRadius: 3,
+                    overflow: 'hidden',
+                    boxShadow: '0 6px 16px rgba(0,0,0,0.08)',
+                    transition: 'transform 0.3s',
+                    '&:hover': {
+                      transform: 'translateY(-5px)',
+                      boxShadow: '0 12px 28px rgba(0,0,0,0.15)'
+                    }
+                  }}>
+                    <Box sx={{ 
+                      height: 140,
+                      background: `linear-gradient(135deg, ${backgroundColor}, ${alpha(backgroundColor, 0.8)})`,
+                      display: 'flex',
+                      alignItems: 'center',
+                      justifyContent: 'center',
+                      position: 'relative',
+                      overflow: 'hidden'
+                    }}>
+                      <Box sx={{
+                        position: 'absolute',
+                        top: -20,
+                        right: -20,
+                        width: 80,
+                        height: 80,
+                        borderRadius: '50%',
+                        background: alpha(theme.palette.primary.light, 0.2)
+                      }} />
+                      <Typography variant="h1" fontWeight="bold" sx={{ 
+                        fontSize: '4rem', 
+                        opacity: 0.15,
+                        position: 'absolute',
+                        top: 10,
+                        left: 10,
+                        lineHeight: 1
+                      }}>
+                        {voucher.discountType === 'percentage' ? `${voucher.discountValue}%` : `RM${voucher.discountValue}`}
                       </Typography>
+                      <Typography variant="h2" fontWeight="bold" color="primary.main">
+                        {voucher.discountType === 'percentage' ? `${voucher.discountValue}%` : `RM${voucher.discountValue}`}
+                      </Typography>
+                      <Chip 
+                        label={voucher.discountType === 'percentage' ? 'DISCOUNT' : 'VOUCHER'}
+                        size="small"
+                        sx={{ 
+                          position: 'absolute',
+                          bottom: 10,
+                          right: 10,
+                          bgcolor: 'rgba(255,255,255,0.9)',
+                          fontWeight: 'bold',
+                          letterSpacing: 0.5
+                        }}
+                      />
                     </Box>
-                    {expired ? (
-                      <ExpiredIcon sx={{ color: theme.palette.error.main }} />
-                    ) : (
-                      <ActiveIcon sx={{ color: theme.palette.success.main }} />
-                    )}
-                  </Box>
-
-                  <Typography variant="h5" fontWeight="bold" sx={{ mb: 1 }}>
-                    {voucher.voucherTitle}
-                  </Typography>
-
-                  <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
-                    {voucher.voucherDescription}
-                  </Typography>
-
-                  <Box sx={{ 
-                    backgroundColor: expired ? 
-                      alpha(theme.palette.error.main, 0.1) : 
-                      alpha(theme.palette.success.main, 0.1),
-                    p: 2,
-                    borderRadius: 2,
-                    mb: 2
-                  }}>
-                    <Chip 
-                      label={expired ? 'EXPIRED' : 'ACTIVE'}
-                      size="small"
-                      sx={{ 
-                        backgroundColor: expired ? 
-                          theme.palette.error.main : 
-                          theme.palette.success.main,
-                        color: 'white',
-                        fontWeight: 'bold',
-                        mb: 1
-                      }}
-                    />
-                    
-                    <Typography variant="body2" color="text.secondary">
-                      <strong>Redeemed:</strong> {formatDate(voucher.redemptionDate)}
-                    </Typography>
-                    
-                    {voucher.expiryDate && (
-                      <Typography variant="body2" color="text.secondary">
-                        <strong>Expires:</strong> {formatDate(voucher.expiryDate)}
-                      </Typography>
-                    )}
-                  </Box>
-
-                  <Box sx={{ 
-                    display: 'flex', 
-                    justifyContent: 'space-between',
-                    alignItems: 'center',
-                    pt: 1,
-                    borderTop: '2px solid',
-                    borderColor: theme.palette.divider,
-                    opacity: 0.8
-                  }}>
-                    <Typography variant="body2" color="text.secondary">
-                      Discount: {voucher.discountType === 'percentage' ? 
-                        `${voucher.discountValue}%` : 
-                        `RM${voucher.discountValue}`}
-                    </Typography>
-                    
-                    <Button
-                      variant="contained"
-                      size="small"
-                      disabled={expired || usingVoucher === voucher.id}
-                      onClick={() => handleUseVoucher(voucher.id)}
-                      sx={{ 
-                        backgroundColor: expired ? 
-                          theme.palette.error.main : 
-                          theme.palette.primary.main,
-                        '&:hover': {
-                          backgroundColor: expired ? 
-                            theme.palette.error.dark : 
-                            theme.palette.primary.dark
-                        }
-                      }}
-                    >
-                      {usingVoucher === voucher.id ? (
-                        <CircularProgress size={16} color="inherit" />
-                      ) : expired ? (
-                        'Expired'
-                      ) : (
-                        'Use Voucher'
-                      )}
-                    </Button>
-                  </Box>
-                </CardContent>
-              </ThemedCard>
-            </Grid>
-          );
-        })}
-      </Grid>
+                    <CardContent sx={{ p: 3, position: 'relative', zIndex: 1 }}>
+                      <Box sx={{ 
+                        position: 'absolute',
+                        top: -20,
+                        right: 20,
+                        width: 50,
+                        height: 50,
+                        borderRadius: '50%',
+                        background: alpha(theme.palette.primary.light, 0.2),
+                        zIndex: -1
+                      }} />
+                      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', mb: 1 }}>
+                        <Typography variant="h5" fontWeight="bold">
+                          {voucher.voucherTitle}
+                        </Typography>
+                        <Chip 
+                          label={voucher.status} 
+                          size="small"
+                          color={voucher.status === 'ACTIVE' ? 'success' : 'warning'}
+                          sx={{ 
+                            fontWeight: 'bold',
+                            fontSize: '0.7rem'
+                          }}
+                        />
+                      </Box>
+                      <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
+                        {voucher.voucherDescription}
+                      </Typography>
+                      <Box sx={{ 
+                        display: 'flex', 
+                        justifyContent: 'space-between', 
+                        alignItems: 'center', 
+                        mb: 2,
+                        bgcolor: alpha(theme.palette.background.default, 0.5),
+                        p: 1.5,
+                        borderRadius: 2
+                      }}>
+                        <Box>
+                          <Typography variant="caption" color="text.secondary">
+                            Expires
+                          </Typography>
+                          <Typography variant="body2" fontWeight="medium">
+                            {formatVoucherExpiryDate(voucher.expiryDate)}
+                          </Typography>
+                        </Box>
+                        <Chip 
+                          label={voucher.voucherCode} 
+                          size="medium"
+                          sx={{ 
+                            bgcolor: alpha(theme.palette.primary.light, 0.2),
+                            fontWeight: 'bold',
+                            color: 'primary.dark'
+                          }}
+                        />
+                      </Box>
+                      <Button
+                        fullWidth
+                        variant="contained"
+                        startIcon={<VoucherIcon />}
+                        onClick={() => handleUseVoucher(voucher.id)}
+                        disabled={usingId === voucher.id || voucher.status !== 'ACTIVE'}
+                        sx={{ 
+                          borderRadius: 3,
+                          py: 1.5,
+                          fontWeight: 'bold',
+                          background: 'linear-gradient(45deg, #8e44ad, #732d91)',
+                          boxShadow: '0 4px 12px rgba(142, 68, 173, 0.3)',
+                          '&:hover': {
+                            boxShadow: '0 6px 16px rgba(142, 68, 173, 0.4)'
+                          }
+                        }}
+                      >
+                        {usingId === voucher.id ? (
+                          <CircularProgress size={24} color="inherit" />
+                        ) : voucher.status === 'ACTIVE' ? (
+                          'Use Voucher'
+                        ) : (
+                          'Used'
+                        )}
+                      </Button>
+                    </CardContent>
+                  </Card>
+                </Grow>
+              </Grid>
+            );
+          })}
+        </Grid>
+      )}
     </Box>
   );
 };
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/FeedbackController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// FeedbackController.java\r\npackage com.pickleball_backend.pickleball.controller;\r\n\r\nimport com.pickleball_backend.pickleball.dto.*;\r\nimport com.pickleball_backend.pickleball.entity.Feedback;\r\nimport com.pickleball_backend.pickleball.service.FeedbackService;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.web.bind.annotation.*;\r\nimport java.util.List;\r\n\r\n@RestController\r\n@RequestMapping(\"/api/feedback\")\r\n@RequiredArgsConstructor\r\npublic class FeedbackController {\r\n\r\n    private final FeedbackService feedbackService;\r\n\r\n    @PostMapping\r\n    public ResponseEntity<FeedbackResponseDto> createFeedback(@RequestBody FeedbackDto dto) {\r\n        return ResponseEntity.ok(feedbackService.createFeedback(dto));\r\n    }\r\n\r\n    @PutMapping(\"/{id}\")\r\n    public ResponseEntity<FeedbackResponseDto> updateFeedback(\r\n            @PathVariable Integer id,\r\n            @RequestBody FeedbackDto dto\r\n    ) {\r\n        return ResponseEntity.ok(feedbackService.updateFeedback(id, dto));\r\n    }\r\n\r\n    @DeleteMapping(\"/{id}\")\r\n    public ResponseEntity<Void> deleteFeedback(@PathVariable Integer id) {\r\n        feedbackService.deleteFeedback(id);\r\n        return ResponseEntity.noContent().build();\r\n    }\r\n\r\n    @GetMapping\r\n    public ResponseEntity<List<FeedbackResponseDto>> getFeedbackForTarget(\r\n            @RequestParam(value = \"targetType\", required = false) String targetType,\r\n            @RequestParam(value = \"targetId\", required = false) Integer targetId,\r\n            @RequestParam(value = \"bookingId\", required = false) Integer bookingId\r\n    ) {\r\n        // 如果提供了bookingId，优先使用bookingId查询\r\n        if (bookingId != null) {\r\n            return ResponseEntity.ok(feedbackService.getFeedbackByBookingId(bookingId));\r\n        }\r\n        \r\n        // 否则使用targetType和targetId查询\r\n        if (targetType == null || targetId == null) {\r\n            return ResponseEntity.badRequest().build();\r\n        }\r\n        \r\n        return ResponseEntity.ok(feedbackService.getFeedbackForTarget(\r\n                Feedback.TargetType.valueOf(targetType.toUpperCase()),\r\n                targetId\r\n        ));\r\n    }\r\n\r\n    @GetMapping(\"/stats\")\r\n    public ResponseEntity<FeedbackStatsDto> getFeedbackStats(\r\n            @RequestParam(\"targetType\") String targetType,\r\n            @RequestParam(\"targetId\") Integer targetId\r\n    ) {\r\n        return ResponseEntity.ok(feedbackService.getFeedbackStats(\r\n                Feedback.TargetType.valueOf(targetType.toUpperCase()),\r\n                targetId\r\n        ));\r\n    }\r\n\r\n    @GetMapping(\"/user\")\r\n    public ResponseEntity<List<FeedbackResponseDto>> getFeedbackByCurrentUser() {\r\n        return ResponseEntity.ok(feedbackService.getFeedbackByCurrentUser());\r\n    }\r\n\r\n    @GetMapping(\"/reviewable-items\")\r\n    public ResponseEntity<List<ReviewableItemDto>> getReviewableItems() {\r\n        return ResponseEntity.ok(feedbackService.getReviewableBookings());\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/FeedbackController.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/FeedbackController.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/FeedbackController.java	(revision 89327e12854b108d004ebb020d0592b1c618ecaf)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/FeedbackController.java	(date 1754067028561)
@@ -1,4 +1,3 @@
-// FeedbackController.java
 package com.pickleball_backend.pickleball.controller;
 
 import com.pickleball_backend.pickleball.dto.*;
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/TierAutoUpgradeService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.service;\r\n\r\nimport com.pickleball_backend.pickleball.entity.Member;\r\nimport com.pickleball_backend.pickleball.repository.MemberRepository;\r\nimport lombok.RequiredArgsConstructor;\r\nimport lombok.extern.slf4j.Slf4j;\r\nimport org.springframework.scheduling.annotation.Scheduled;\r\nimport org.springframework.stereotype.Service;\r\nimport org.springframework.transaction.annotation.Transactional;\r\n\r\nimport java.util.List;\r\n\r\n@Service\r\n@Slf4j\r\n@RequiredArgsConstructor\r\npublic class TierAutoUpgradeService {\r\n\r\n    private final MemberRepository memberRepository;\r\n    private final TierService tierService;\r\n\r\n    /**\r\n     * Scheduled task to check and upgrade member tiers automatically\r\n     * Runs every hour at the start of the hour\r\n     */\r\n    @Scheduled(cron = \"0 0 * * * *\") // Every hour\r\n    @Transactional\r\n    public void autoUpgradeMemberTiers() {\r\n        log.info(\"\uD83D\uDD04 Starting automatic tier upgrade check...\");\r\n        \r\n        try {\r\n            List<Member> allMembers = memberRepository.findAll();\r\n            int upgradedCount = 0;\r\n            \r\n            for (Member member : allMembers) {\r\n                try {\r\n                    String oldTierName = member.getTier() != null ? member.getTier().getTierName() : \"NONE\";\r\n                    \r\n                    // Trigger tier recalculation\r\n                    tierService.recalculateMemberTier(member);\r\n                    \r\n                    // Refresh member data\r\n                    member = memberRepository.findByUserId(member.getUser().getId());\r\n                    String newTierName = member.getTier() != null ? member.getTier().getTierName() : \"NONE\";\r\n                    \r\n                    if (!oldTierName.equals(newTierName)) {\r\n                        upgradedCount++;\r\n                        log.info(\"\uD83C\uDF89 Auto-upgraded member {}: {} -> {} (Points: {})\", \r\n                                member.getUser().getEmail(), oldTierName, newTierName, member.getPointBalance());\r\n                    }\r\n                } catch (Exception e) {\r\n                    log.error(\"Error upgrading tier for member {}: {}\", \r\n                            member.getId(), e.getMessage());\r\n                }\r\n            }\r\n            \r\n            log.info(\"✅ Automatic tier upgrade completed. {} members upgraded.\", upgradedCount);\r\n            \r\n        } catch (Exception e) {\r\n            log.error(\"❌ Error during automatic tier upgrade: {}\", e.getMessage());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Manual trigger for tier upgrade check\r\n     */\r\n    @Transactional\r\n    public void manualUpgradeCheck() {\r\n        log.info(\"\uD83D\uDD04 Manual tier upgrade check triggered...\");\r\n        autoUpgradeMemberTiers();\r\n    }\r\n\r\n    /**\r\n     * Check and upgrade a specific member's tier\r\n     */\r\n    @Transactional\r\n    public boolean upgradeSpecificMember(Integer memberId) {\r\n        try {\r\n            Member member = memberRepository.findById(memberId)\r\n                    .orElseThrow(() -> new RuntimeException(\"Member not found\"));\r\n            \r\n            String oldTierName = member.getTier() != null ? member.getTier().getTierName() : \"NONE\";\r\n            \r\n            tierService.recalculateMemberTier(member);\r\n            \r\n            // Refresh member data\r\n            member = memberRepository.findByUserId(member.getUser().getId());\r\n            String newTierName = member.getTier() != null ? member.getTier().getTierName() : \"NONE\";\r\n            \r\n            if (!oldTierName.equals(newTierName)) {\r\n                log.info(\"\uD83C\uDF89 Manually upgraded member {}: {} -> {} (Points: {})\", \r\n                        member.getUser().getEmail(), oldTierName, newTierName, member.getPointBalance());\r\n                return true;\r\n            } else {\r\n                log.info(\"ℹ\uFE0F No upgrade needed for member {}: {} (Points: {})\", \r\n                        member.getUser().getEmail(), newTierName, member.getPointBalance());\r\n                return false;\r\n            }\r\n            \r\n        } catch (Exception e) {\r\n            log.error(\"❌ Error upgrading member {}: {}\", memberId, e.getMessage());\r\n            return false;\r\n        }\r\n    }\r\n} 
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/TierAutoUpgradeService.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/TierAutoUpgradeService.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/TierAutoUpgradeService.java	(revision 89327e12854b108d004ebb020d0592b1c618ecaf)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/TierAutoUpgradeService.java	(date 1754078643213)
@@ -44,8 +44,8 @@
                     
                     if (!oldTierName.equals(newTierName)) {
                         upgradedCount++;
-                        log.info("🎉 Auto-upgraded member {}: {} -> {} (Points: {})", 
-                                member.getUser().getEmail(), oldTierName, newTierName, member.getPointBalance());
+                        log.info("🎉 Auto-upgraded member {}: {} -> {} (Tier Points: {})", 
+                                member.getUser().getEmail(), oldTierName, newTierName, member.getTierPointBalance());
                     }
                 } catch (Exception e) {
                     log.error("Error upgrading tier for member {}: {}", 
@@ -87,12 +87,12 @@
             String newTierName = member.getTier() != null ? member.getTier().getTierName() : "NONE";
             
             if (!oldTierName.equals(newTierName)) {
-                log.info("🎉 Manually upgraded member {}: {} -> {} (Points: {})", 
-                        member.getUser().getEmail(), oldTierName, newTierName, member.getPointBalance());
+                log.info("🎉 Manually upgraded member {}: {} -> {} (Tier Points: {})", 
+                        member.getUser().getEmail(), oldTierName, newTierName, member.getTierPointBalance());
                 return true;
             } else {
-                log.info("ℹ️ No upgrade needed for member {}: {} (Points: {})", 
-                        member.getUser().getEmail(), newTierName, member.getPointBalance());
+                log.info("ℹ️ No upgrade needed for member {}: {} (Tier Points: {})", 
+                        member.getUser().getEmail(), newTierName, member.getTierPointBalance());
                 return false;
             }
             
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/MemberController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.controller;\r\n\r\nimport com.pickleball_backend.pickleball.dto.*;\r\nimport com.pickleball_backend.pickleball.entity.Court;\r\nimport com.pickleball_backend.pickleball.entity.Member;\r\nimport com.pickleball_backend.pickleball.entity.UserAccount;\r\nimport com.pickleball_backend.pickleball.entity.Wallet;\r\nimport com.pickleball_backend.pickleball.exception.ResourceNotFoundException;\r\nimport com.pickleball_backend.pickleball.exception.ValidationException;\r\nimport com.pickleball_backend.pickleball.repository.MemberRepository;\r\nimport com.pickleball_backend.pickleball.repository.UserAccountRepository;\r\nimport com.pickleball_backend.pickleball.repository.WalletRepository;\r\nimport com.pickleball_backend.pickleball.service.BookingService;\r\nimport com.pickleball_backend.pickleball.service.CourtService;\r\nimport com.pickleball_backend.pickleball.service.MemberService;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.springframework.format.annotation.DateTimeFormat;\r\nimport org.springframework.http.HttpStatus;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.security.access.prepost.PreAuthorize;\r\nimport org.springframework.security.core.Authentication;\r\nimport org.springframework.security.core.context.SecurityContextHolder;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\nimport java.time.LocalDate;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.HashMap;\r\nimport com.pickleball_backend.pickleball.entity.MembershipTier;\r\nimport com.pickleball_backend.pickleball.repository.MembershipTierRepository;\r\nimport java.util.ArrayList;\r\nimport com.pickleball_backend.pickleball.service.TierService;\r\n\r\n@RestController\r\n@RequestMapping(\"/api/member\")\r\n@RequiredArgsConstructor\r\npublic class MemberController {\r\n\r\n    private final MemberService memberService;\r\n    private final BookingService bookingService;\r\n    private final CourtService courtService;\r\n    private final WalletRepository walletRepository;\r\n    private final UserAccountRepository userAccountRepository;\r\n    private final MemberRepository memberRepository;\r\n    private final MembershipTierRepository tierRepository;\r\n    private final TierService tierService;\r\n\r\n    @GetMapping(\"/dashboard\")\r\n    @PreAuthorize(\"hasRole('USER')\")\r\n    public ResponseEntity<MemberDashboardDto> getDashboard() {\r\n        return ResponseEntity.ok(memberService.getMemberDashboard());\r\n    }\r\n\r\n    @GetMapping(\"/tiers\")\r\n    @PreAuthorize(\"hasRole('USER')\")\r\n    public ResponseEntity<List<TierDto>> getAvailableTiers() {\r\n        return ResponseEntity.ok(memberService.getAllAvailableTiers());\r\n    }\r\n\r\n    @PostMapping(\"/vouchers/redeem/{voucherId}\")\r\n    @PreAuthorize(\"hasRole('USER')\")\r\n    public ResponseEntity<VoucherRedemptionResponse> redeemVoucher(\r\n            @PathVariable Integer voucherId) {\r\n        return ResponseEntity.ok(memberService.redeemVoucher(voucherId));\r\n    }\r\n\r\n    @PostMapping(\"/add-points\")\r\n    @PreAuthorize(\"hasRole('USER')\")\r\n    public ResponseEntity<String> addPoints(@RequestParam int points) {\r\n        memberService.addPoints(points);\r\n        return ResponseEntity.ok(points + \" points added\");\r\n    }\r\n\r\n    @GetMapping(\"/debug/tier-info\")\r\n    @PreAuthorize(\"hasRole('USER')\")\r\n    public ResponseEntity<Map<String, Object>> getTierDebugInfo() {\r\n        String username = SecurityContextHolder.getContext().getAuthentication().getName();\r\n        UserAccount account = userAccountRepository.findByUsername(username)\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"User account not found\"));\r\n\r\n        Member member = memberRepository.findByUserId(account.getUser().getId());\r\n        if (member == null) {\r\n            throw new ResourceNotFoundException(\"Member not found\");\r\n        }\r\n\r\n        // Get all tiers for comparison\r\n        List<MembershipTier> allTiers = tierRepository.findAllByActiveTrueOrderByMinPointsAsc();\r\n\r\n        Map<String, Object> debugInfo = new HashMap<>();\r\n        debugInfo.put(\"memberId\", member.getId());\r\n        debugInfo.put(\"pointBalance\", member.getPointBalance());\r\n        debugInfo.put(\"currentTierId\", member.getTier() != null ? member.getTier().getId() : null);\r\n        debugInfo.put(\"currentTierName\", member.getTier() != null ? member.getTier().getTierName() : null);\r\n        debugInfo.put(\"currentTierMinPoints\", member.getTier() != null ? member.getTier().getMinPoints() : null);\r\n        debugInfo.put(\"currentTierMaxPoints\", member.getTier() != null ? member.getTier().getMaxPoints() : null);\r\n\r\n        // Add all tiers information\r\n        List<Map<String, Object>> tiersInfo = new ArrayList<>();\r\n        for (MembershipTier tier : allTiers) {\r\n            Map<String, Object> tierInfo = new HashMap<>();\r\n            tierInfo.put(\"id\", tier.getId());\r\n            tierInfo.put(\"name\", tier.getTierName());\r\n            tierInfo.put(\"minPoints\", tier.getMinPoints());\r\n            tierInfo.put(\"maxPoints\", tier.getMaxPoints());\r\n            tierInfo.put(\"active\", tier.isActive());\r\n            tierInfo.put(\"benefits\", tier.getBenefits());\r\n            tiersInfo.add(tierInfo);\r\n        }\r\n        debugInfo.put(\"allTiers\", tiersInfo);\r\n\r\n        return ResponseEntity.ok(debugInfo);\r\n    }\r\n\r\n    @PostMapping(\"/debug/recalculate-tier\")\r\n    @PreAuthorize(\"hasRole('USER')\")\r\n    public ResponseEntity<String> recalculateTier() {\r\n        String username = SecurityContextHolder.getContext().getAuthentication().getName();\r\n        UserAccount account = userAccountRepository.findByUsername(username)\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"User account not found\"));\r\n\r\n        Member member = memberRepository.findByUserId(account.getUser().getId());\r\n        if (member == null) {\r\n            throw new ResourceNotFoundException(\"Member not found\");\r\n        }\r\n\r\n        // Get current tier before recalculation\r\n        String oldTierName = member.getTier() != null ? member.getTier().getTierName() : \"NULL\";\r\n        \r\n        // Trigger tier recalculation\r\n        tierService.recalculateMemberTier(member);\r\n        \r\n        // Refresh member data\r\n        member = memberRepository.findByUserId(account.getUser().getId());\r\n        String newTierName = member.getTier() != null ? member.getTier().getTierName() : \"NULL\";\r\n        \r\n        return ResponseEntity.ok(\"Tier recalculated: \" + oldTierName + \" -> \" + newTierName);\r\n    }\r\n\r\n    @GetMapping(\"/courts/availability\")\r\n    @PreAuthorize(\"hasRole('USER')\") // Add security annotation\r\n    public ResponseEntity<?> getAvailableSlots(\r\n            @RequestParam(required = false)\r\n            @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate date) {\r\n\r\n        // Handle null date\r\n        if (date == null) {\r\n            date = LocalDate.now();\r\n        }\r\n\r\n        // Validate date not in past\r\n        if (date.isBefore(LocalDate.now())) {\r\n            return ResponseEntity.badRequest()\r\n                    .body(\"Date must be today or in future\");\r\n        }\r\n\r\n        List<SlotResponseDto> slots = bookingService.getAvailableSlots(date);\r\n\r\n        return slots.isEmpty()\r\n                ? ResponseEntity.ok(\"No available slots found for \" + date)\r\n                : ResponseEntity.ok(slots);\r\n    }\r\n\r\n    @GetMapping(\"/redeem-history\")\r\n    @PreAuthorize(\"hasRole('USER')\")\r\n    public ResponseEntity<List<VoucherDto>> getRedeemHistory() {\r\n        return ResponseEntity.ok(memberService.getRedeemHistory());\r\n    }\r\n\r\n    @GetMapping(\"/courts\")\r\n    @PreAuthorize(\"hasAnyRole('USER', 'COACH')\")\r\n    public ResponseEntity<?> getAllCourtsForMember() {\r\n        try {\r\n            List<Court> courts = courtService.getAllCourts();\r\n            return new ResponseEntity<>(courts, HttpStatus.OK);\r\n        } catch (Exception e) {\r\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\r\n                    .body(\"Error retrieving courts\");\r\n        }\r\n    }\r\n\r\n    @GetMapping(\"/courts/{id}\")\r\n    @PreAuthorize(\"hasAnyRole('USER', 'COACH')\")\r\n    public ResponseEntity<?> getCourtById(@PathVariable Integer id) {\r\n        try {\r\n            Court court = courtService.getCourtByIdForMember(id);\r\n            if (court == null) {\r\n                return ResponseEntity.status(HttpStatus.NOT_FOUND).body(\"Court not found\");\r\n            }\r\n            return new ResponseEntity<>(court, HttpStatus.OK);\r\n        } catch (Exception e) {\r\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(\"Error retrieving court\");\r\n        }\r\n    }\r\n\r\n    @GetMapping(\"/courts/available\")\r\n    @PreAuthorize(\"hasAnyRole('USER', 'COACH')\")\r\n    public ResponseEntity<?> getAvailableCourts(\r\n            @RequestParam(\"date\") @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate date,\r\n            @RequestParam(\"startTime\") String startTime,\r\n            @RequestParam(\"endTime\") String endTime) {\r\n        if (date == null || startTime == null || endTime == null || startTime.isBlank() || endTime.isBlank()) {\r\n            return ResponseEntity.badRequest().body(\"Missing required parameters\");\r\n        }\r\n        try {\r\n            return ResponseEntity.ok(courtService.findAvailableCourts(date, startTime, endTime));\r\n        } catch (Exception e) {\r\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(\"Error finding available courts: \" + e.getMessage());\r\n        }\r\n    }\r\n\r\n    @PostMapping(\"/wallet/init\")\r\n    @PreAuthorize(\"hasRole('USER')\")\r\n    public ResponseEntity<?> initializeWallet() {\r\n        try {\r\n            String username = SecurityContextHolder.getContext().getAuthentication().getName();\r\n            UserAccount account = userAccountRepository.findByUsername(username)\r\n                    .orElseThrow(() -> new ResourceNotFoundException(\"User not found\"));\r\n\r\n            Member member = memberRepository.findByUserId(account.getUser().getId());\r\n\r\n            if (walletRepository.findByMemberId(member.getId()).isPresent()) {\r\n                return ResponseEntity.status(HttpStatus.CONFLICT)\r\n                        .body(\"Wallet already exists\");\r\n            }\r\n\r\n            Wallet wallet = new Wallet();\r\n            wallet.setMember(member);\r\n            wallet.setBalance(0.00); // Initial balance\r\n            walletRepository.save(wallet);\r\n\r\n            return ResponseEntity.ok(\"Wallet initialized successfully\");\r\n        } catch (Exception e) {\r\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\r\n                    .body(\"Error initializing wallet: \" + e.getMessage());\r\n        }\r\n    }\r\n\r\n    @GetMapping(\"/courts/{id}/pricing\")\r\n    @PreAuthorize(\"hasRole('USER')\")\r\n    public ResponseEntity<?> getCourtPricing(@PathVariable Integer id) {\r\n        try {\r\n            Court court = courtService.getCourtByIdForMember(id);\r\n            if (court == null) {\r\n                return ResponseEntity.status(HttpStatus.NOT_FOUND).body(\"Court not found\");\r\n            }\r\n\r\n            return ResponseEntity.ok(Map.of(\r\n                    \"peakHourlyPrice\", court.getPeakHourlyPrice(),\r\n                    \"offPeakHourlyPrice\", court.getOffPeakHourlyPrice(),\r\n                    \"peakStartTime\", court.getPeakStartTime(),\r\n                    \"peakEndTime\", court.getPeakEndTime()\r\n            ));\r\n        } catch (Exception e) {\r\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\r\n                    .body(\"Error retrieving court pricing\");\r\n        }\r\n    }\r\n\r\n    @PostMapping(\"/bookings/{id}/cancel\")\r\n    @PreAuthorize(\"hasRole('USER')\")\r\n    public ResponseEntity<?> cancelBooking(@PathVariable Integer id, @RequestBody(required = false) java.util.Map<String, Object> body) {\r\n        String username = SecurityContextHolder.getContext().getAuthentication().getName();\r\n        String reason = body != null && body.get(\"reason\") != null ? body.get(\"reason\").toString() : null;\r\n        CancellationResponse response = bookingService.cancelBooking(id, username, reason);\r\n        return ResponseEntity.ok(response);\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/MemberController.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/MemberController.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/MemberController.java	(revision 89327e12854b108d004ebb020d0592b1c618ecaf)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/controller/MemberController.java	(date 1754078717545)
@@ -88,7 +88,8 @@
 
         Map<String, Object> debugInfo = new HashMap<>();
         debugInfo.put("memberId", member.getId());
-        debugInfo.put("pointBalance", member.getPointBalance());
+        debugInfo.put("tierPointBalance", member.getTierPointBalance());
+        debugInfo.put("rewardPointBalance", member.getRewardPointBalance());
         debugInfo.put("currentTierId", member.getTier() != null ? member.getTier().getId() : null);
         debugInfo.put("currentTierName", member.getTier() != null ? member.getTier().getTierName() : null);
         debugInfo.put("currentTierMinPoints", member.getTier() != null ? member.getTier().getMinPoints() : null);
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/VoucherRedemptionServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.service;\r\n\r\nimport com.pickleball_backend.pickleball.dto.VoucherRedemptionDto;\r\nimport com.pickleball_backend.pickleball.entity.*;\r\nimport com.pickleball_backend.pickleball.exception.ResourceNotFoundException;\r\nimport com.pickleball_backend.pickleball.exception.ValidationException;\r\nimport com.pickleball_backend.pickleball.repository.*;\r\nimport lombok.RequiredArgsConstructor;\r\nimport lombok.extern.slf4j.Slf4j;\r\nimport org.springframework.security.core.context.SecurityContextHolder;\r\nimport org.springframework.stereotype.Service;\r\nimport org.springframework.transaction.annotation.Transactional;\r\n\r\nimport java.time.LocalDate;\r\nimport java.util.List;\r\nimport java.util.UUID;\r\nimport java.util.stream.Collectors;\r\n\r\n@Service\r\n@RequiredArgsConstructor\r\n@Slf4j\r\npublic class VoucherRedemptionServiceImpl implements VoucherRedemptionService {\r\n\r\n    private final VoucherRedemptionRepository redemptionRepository;\r\n    private final VoucherRepository voucherRepository;\r\n    private final UserAccountRepository userAccountRepository;\r\n    private final MemberRepository memberRepository;\r\n    private final EmailService emailService;\r\n\r\n    @Override\r\n    @Transactional\r\n    public VoucherRedemptionDto redeemVoucher(Integer voucherId) {\r\n        // Get current user\r\n        String username = SecurityContextHolder.getContext().getAuthentication().getName();\r\n        UserAccount account = userAccountRepository.findByUsername(username)\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"User account not found\"));\r\n        User user = account.getUser();\r\n        Member member = memberRepository.findByUserId(user.getId());\r\n\r\n        if (member == null) {\r\n            throw new ResourceNotFoundException(\"Member not found\");\r\n        }\r\n\r\n        // Get voucher\r\n        Voucher voucher = voucherRepository.findById(voucherId)\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"Voucher not found\"));\r\n\r\n        // Validate voucher\r\n        if (voucher.getTier() == null || voucher.getTier().getId() == null || \r\n            member.getTier() == null || member.getTier().getId() == null ||\r\n            !voucher.getTier().getId().equals(member.getTier().getId())) {\r\n            throw new ValidationException(\"Voucher not available for your tier\");\r\n        }\r\n\r\n        if (member.getPointBalance() < voucher.getRequestPoints()) {\r\n            throw new ValidationException(\"Insufficient points\");\r\n        }\r\n\r\n        // Check if user has already redeemed this voucher\r\n        if (redemptionRepository.existsByVoucherIdAndUserId(voucherId, user.getId())) {\r\n            throw new ValidationException(\"You have already redeemed this voucher\");\r\n        }\r\n\r\n        // Check expiry date\r\n        if (voucher.getExpiryDate() != null && \r\n            !voucher.getExpiryDate().equals(LocalDate.of(1970, 1, 1)) && \r\n            voucher.getExpiryDate().isBefore(LocalDate.now())) {\r\n            throw new ValidationException(\"Voucher has expired\");\r\n        }\r\n\r\n        // Deduct points\r\n        member.setPointBalance(member.getPointBalance() - voucher.getRequestPoints());\r\n        memberRepository.save(member);\r\n\r\n        // Create redemption record\r\n        VoucherRedemption redemption = new VoucherRedemption();\r\n        redemption.setVoucherId(voucherId);\r\n        redemption.setUserId(user.getId());\r\n        redemption.setRedemptionDate(LocalDate.now());\r\n        \r\n        // Set expiry date (30 days from redemption if voucher has no expiry, otherwise use voucher expiry)\r\n        LocalDate redemptionExpiry;\r\n        if (voucher.getExpiryDate() == null || voucher.getExpiryDate().equals(LocalDate.of(1970, 1, 1))) {\r\n            redemptionExpiry = LocalDate.now().plusDays(30);\r\n        } else {\r\n            redemptionExpiry = voucher.getExpiryDate();\r\n        }\r\n        redemption.setExpiryDate(redemptionExpiry);\r\n        redemption.setStatus(\"active\");  // Use lowercase string\r\n\r\n        redemption = redemptionRepository.save(redemption);\r\n\r\n        // Generate unique voucher code\r\n        String uniqueCode = voucher.getCode() + \"-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\r\n\r\n        // Send confirmation email\r\n        emailService.sendVoucherEmail(\r\n                user.getEmail(),\r\n                \"Voucher Redemption Confirmation\",\r\n                \"You successfully redeemed voucher: \" + uniqueCode + \r\n                \"\\nDiscount: \" + (voucher.getDiscountType().equals(\"percentage\") ? \r\n                    voucher.getDiscountValue() + \"%\" : \"RM\" + voucher.getDiscountValue()) +\r\n                \"\\nExpires: \" + redemptionExpiry +\r\n                \"\\nNew balance: \" + member.getPointBalance() + \" points\"\r\n        );\r\n\r\n        log.info(\"User {} redeemed voucher {} for {} points\", user.getEmail(), voucher.getCode(), voucher.getRequestPoints());\r\n\r\n        return mapToDto(redemption, voucher, user);\r\n    }\r\n\r\n    @Override\r\n    @Transactional(readOnly = true)\r\n    public List<VoucherRedemptionDto> getUserRedemptions() {\r\n        String username = SecurityContextHolder.getContext().getAuthentication().getName();\r\n        UserAccount account = userAccountRepository.findByUsername(username)\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"User account not found\"));\r\n        User user = account.getUser();\r\n\r\n        List<VoucherRedemption> redemptions = redemptionRepository.findByUserIdOrderByRedemptionDateDesc(user.getId());\r\n        \r\n        return redemptions.stream()\r\n                .map(redemption -> {\r\n                    Voucher voucher = voucherRepository.findById(redemption.getVoucherId()).orElse(null);\r\n                    return mapToDto(redemption, voucher, user);\r\n                })\r\n                .collect(Collectors.toList());\r\n    }\r\n\r\n    @Override\r\n    @Transactional(readOnly = true)\r\n    public List<VoucherRedemptionDto> getUserActiveRedemptions() {\r\n        String username = SecurityContextHolder.getContext().getAuthentication().getName();\r\n        UserAccount account = userAccountRepository.findByUsername(username)\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"User account not found\"));\r\n        User user = account.getUser();\r\n\r\n        List<VoucherRedemption> redemptions = redemptionRepository.findByUserIdAndStatusOrderByRedemptionDateDesc(\r\n                user.getId(), \"active\");  // Use lowercase string\r\n        \r\n        return redemptions.stream()\r\n                .map(redemption -> {\r\n                    Voucher voucher = voucherRepository.findById(redemption.getVoucherId()).orElse(null);\r\n                    return mapToDto(redemption, voucher, user);\r\n                })\r\n                .collect(Collectors.toList());\r\n    }\r\n\r\n    @Override\r\n    @Transactional\r\n    public VoucherRedemptionDto useVoucher(Integer redemptionId) {\r\n        String username = SecurityContextHolder.getContext().getAuthentication().getName();\r\n        UserAccount account = userAccountRepository.findByUsername(username)\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"User account not found\"));\r\n        User user = account.getUser();\r\n\r\n        VoucherRedemption redemption = redemptionRepository.findById(redemptionId)\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"Redemption not found\"));\r\n\r\n        // Verify ownership\r\n        if (!redemption.getUserId().equals(user.getId())) {\r\n            throw new ValidationException(\"You can only use your own vouchers\");\r\n        }\r\n\r\n        // Check status\r\n        if (!\"active\".equals(redemption.getStatus())) {\r\n            throw new ValidationException(\"Voucher is not active\");\r\n        }\r\n\r\n        // Check expiry\r\n        if (redemption.getExpiryDate() != null && redemption.getExpiryDate().isBefore(LocalDate.now())) {\r\n            redemption.setStatus(\"expired\");\r\n            redemptionRepository.save(redemption);\r\n            throw new ValidationException(\"Voucher has expired\");\r\n        }\r\n\r\n        // Mark as used\r\n        redemption.setStatus(\"used\");\r\n        redemption = redemptionRepository.save(redemption);\r\n\r\n        Voucher voucher = voucherRepository.findById(redemption.getVoucherId()).orElse(null);\r\n        \r\n        log.info(\"User {} used voucher redemption {}\", user.getEmail(), redemptionId);\r\n        \r\n        return mapToDto(redemption, voucher, user);\r\n    }\r\n\r\n    @Override\r\n    @Transactional(readOnly = true)\r\n    public VoucherRedemptionDto getRedemptionById(Integer redemptionId) {\r\n        String username = SecurityContextHolder.getContext().getAuthentication().getName();\r\n        UserAccount account = userAccountRepository.findByUsername(username)\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"User account not found\"));\r\n        User user = account.getUser();\r\n\r\n        VoucherRedemption redemption = redemptionRepository.findById(redemptionId)\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"Redemption not found\"));\r\n\r\n        // Verify ownership\r\n        if (!redemption.getUserId().equals(user.getId())) {\r\n            throw new ValidationException(\"You can only view your own vouchers\");\r\n        }\r\n\r\n        Voucher voucher = voucherRepository.findById(redemption.getVoucherId()).orElse(null);\r\n        return mapToDto(redemption, voucher, user);\r\n    }\r\n\r\n    @Override\r\n    @Transactional(readOnly = true)\r\n    public boolean canRedeemVoucher(Integer voucherId) {\r\n        try {\r\n            String username = SecurityContextHolder.getContext().getAuthentication().getName();\r\n            UserAccount account = userAccountRepository.findByUsername(username)\r\n                    .orElseThrow(() -> new ResourceNotFoundException(\"User account not found\"));\r\n            User user = account.getUser();\r\n            Member member = memberRepository.findByUserId(user.getId());\r\n\r\n            if (member == null) return false;\r\n\r\n            Voucher voucher = voucherRepository.findById(voucherId)\r\n                    .orElseThrow(() -> new ResourceNotFoundException(\"Voucher not found\"));\r\n\r\n            // Check if already redeemed\r\n            if (redemptionRepository.existsByVoucherIdAndUserId(voucherId, user.getId())) {\r\n                return false;\r\n            }\r\n\r\n            // Check tier and points\r\n            return voucher.getTier() != null && voucher.getTier().getId() != null &&\r\n                   member.getTier() != null && member.getTier().getId() != null &&\r\n                   voucher.getTier().getId().equals(member.getTier().getId()) &&\r\n                   member.getPointBalance() >= voucher.getRequestPoints();\r\n        } catch (Exception e) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    @Transactional\r\n    public void processExpiredRedemptions() {\r\n        List<VoucherRedemption> expiredRedemptions = redemptionRepository.findExpiredRedemptions(LocalDate.now());\r\n        \r\n        for (VoucherRedemption redemption : expiredRedemptions) {\r\n            redemption.setStatus(\"expired\");\r\n            redemptionRepository.save(redemption);\r\n            log.info(\"Marked redemption {} as expired\", redemption.getId());\r\n        }\r\n    }\r\n\r\n    private VoucherRedemptionDto mapToDto(VoucherRedemption redemption, Voucher voucher, User user) {\r\n        VoucherRedemptionDto dto = new VoucherRedemptionDto();\r\n        dto.setId(redemption.getId());\r\n        dto.setVoucherId(redemption.getVoucherId());\r\n        dto.setUserId(redemption.getUserId());\r\n        dto.setRedemptionDate(redemption.getRedemptionDate());\r\n        dto.setExpiryDate(redemption.getExpiryDate());\r\n        dto.setStatus(redemption.getStatus().toUpperCase());  // Convert to uppercase for frontend\r\n        dto.setUserName(user.getName());\r\n\r\n        if (voucher != null) {\r\n            dto.setVoucherCode(voucher.getCode());\r\n            dto.setDiscountType(voucher.getDiscountType());\r\n            dto.setDiscountValue(voucher.getDiscountValue());\r\n            \r\n            // Create title based on discount type\r\n            if (voucher.getDiscountType().equals(\"percentage\")) {\r\n                dto.setVoucherTitle(voucher.getDiscountValue() + \"% Discount\");\r\n            } else {\r\n                dto.setVoucherTitle(\"RM\" + voucher.getDiscountValue() + \" Discount\");\r\n            }\r\n            \r\n            dto.setVoucherDescription(\"Special offer for members\");\r\n        }\r\n\r\n        return dto;\r\n    }\r\n} 
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/VoucherRedemptionServiceImpl.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/VoucherRedemptionServiceImpl.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/VoucherRedemptionServiceImpl.java	(revision 89327e12854b108d004ebb020d0592b1c618ecaf)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/service/VoucherRedemptionServiceImpl.java	(date 1754164772631)
@@ -46,20 +46,28 @@
                 .orElseThrow(() -> new ResourceNotFoundException("Voucher not found"));
 
         // Validate voucher
-        if (voucher.getTier() == null || voucher.getTier().getId() == null || 
-            member.getTier() == null || member.getTier().getId() == null ||
-            !voucher.getTier().getId().equals(member.getTier().getId())) {
-            throw new ValidationException("Voucher not available for your tier");
+        if (voucher.getTier() != null) {
+            // Tier-specific voucher - check if user's tier matches
+            if (member.getTier() == null || member.getTier().getId() == null ||
+                !voucher.getTier().getId().equals(member.getTier().getId())) {
+                throw new ValidationException("Voucher not available for your tier");
+            }
         }
+        // General voucher (tier == null) is available to all tiers
 
-        if (member.getPointBalance() < voucher.getRequestPoints()) {
-            throw new ValidationException("Insufficient points");
+        if (member.getRewardPointBalance() < voucher.getRequestPoints()) {
+            throw new ValidationException("Insufficient reward points");
         }
 
         // Check if user has already redeemed this voucher
-        if (redemptionRepository.existsByVoucherIdAndUserId(voucherId, user.getId())) {
-            throw new ValidationException("You have already redeemed this voucher");
+        // For 0-point vouchers, only allow one redemption per user
+        // For other vouchers, allow multiple redemptions
+        if (voucher.getRequestPoints() == 0) {
+            if (redemptionRepository.existsByVoucherIdAndUserId(voucherId, user.getId())) {
+                throw new ValidationException("You have already redeemed this voucher");
+            }
         }
+        // For non-zero point vouchers, allow multiple redemptions (no check needed)
 
         // Check expiry date
         if (voucher.getExpiryDate() != null && 
@@ -68,8 +76,8 @@
             throw new ValidationException("Voucher has expired");
         }
 
-        // Deduct points
-        member.setPointBalance(member.getPointBalance() - voucher.getRequestPoints());
+        // Deduct reward points
+        member.setRewardPointBalance(member.getRewardPointBalance() - voucher.getRequestPoints());
         memberRepository.save(member);
 
         // Create redemption record
@@ -86,7 +94,7 @@
             redemptionExpiry = voucher.getExpiryDate();
         }
         redemption.setExpiryDate(redemptionExpiry);
-        redemption.setStatus("active");  // Use lowercase string
+        redemption.setStatus(VoucherRedemption.STATUS_ACTIVE);
 
         redemption = redemptionRepository.save(redemption);
 
@@ -101,7 +109,7 @@
                 "\nDiscount: " + (voucher.getDiscountType().equals("percentage") ? 
                     voucher.getDiscountValue() + "%" : "RM" + voucher.getDiscountValue()) +
                 "\nExpires: " + redemptionExpiry +
-                "\nNew balance: " + member.getPointBalance() + " points"
+                "\nNew reward points balance: " + member.getRewardPointBalance() + " points"
         );
 
         log.info("User {} redeemed voucher {} for {} points", user.getEmail(), voucher.getCode(), voucher.getRequestPoints());
@@ -135,8 +143,10 @@
                 .orElseThrow(() -> new ResourceNotFoundException("User account not found"));
         User user = account.getUser();
 
-        List<VoucherRedemption> redemptions = redemptionRepository.findByUserIdAndStatusOrderByRedemptionDateDesc(
-                user.getId(), "active");  // Use lowercase string
+        // Get both ACTIVE and RESTORED vouchers
+        List<String> activeStatuses = List.of(VoucherRedemption.STATUS_ACTIVE, VoucherRedemption.STATUS_RESTORED);
+        List<VoucherRedemption> redemptions = redemptionRepository.findByUserIdAndStatusInOrderByRedemptionDateDesc(
+                user.getId(), activeStatuses);
         
         return redemptions.stream()
                 .map(redemption -> {
@@ -163,19 +173,19 @@
         }
 
         // Check status
-        if (!"active".equals(redemption.getStatus())) {
+        if (!VoucherRedemption.STATUS_ACTIVE.equals(redemption.getStatus())) {
             throw new ValidationException("Voucher is not active");
         }
 
         // Check expiry
         if (redemption.getExpiryDate() != null && redemption.getExpiryDate().isBefore(LocalDate.now())) {
-            redemption.setStatus("expired");
+            redemption.setStatus(VoucherRedemption.STATUS_USED);
             redemptionRepository.save(redemption);
             throw new ValidationException("Voucher has expired");
         }
 
         // Mark as used
-        redemption.setStatus("used");
+        redemption.setStatus(VoucherRedemption.STATUS_USED);
         redemption = redemptionRepository.save(redemption);
 
         Voucher voucher = voucherRepository.findById(redemption.getVoucherId()).orElse(null);
@@ -221,15 +231,23 @@
                     .orElseThrow(() -> new ResourceNotFoundException("Voucher not found"));
 
             // Check if already redeemed
-            if (redemptionRepository.existsByVoucherIdAndUserId(voucherId, user.getId())) {
-                return false;
+            if (voucher.getRequestPoints() == 0) {
+                if (redemptionRepository.existsByVoucherIdAndUserId(voucherId, user.getId())) {
+                    return false;
+                }
             }
-
+            // For non-zero point vouchers, allow multiple redemptions (no check needed)
+            
             // Check tier and points
-            return voucher.getTier() != null && voucher.getTier().getId() != null &&
-                   member.getTier() != null && member.getTier().getId() != null &&
-                   voucher.getTier().getId().equals(member.getTier().getId()) &&
-                   member.getPointBalance() >= voucher.getRequestPoints();
+            boolean tierValid = true;
+            if (voucher.getTier() != null) {
+                // Tier-specific voucher - check if user's tier matches
+                tierValid = member.getTier() != null && member.getTier().getId() != null &&
+                           voucher.getTier().getId().equals(member.getTier().getId());
+            }
+            // General voucher (tier == null) is available to all tiers
+            
+            return tierValid && member.getRewardPointBalance() >= voucher.getRequestPoints();
         } catch (Exception e) {
             return false;
         }
@@ -238,10 +256,10 @@
     @Override
     @Transactional
     public void processExpiredRedemptions() {
-        List<VoucherRedemption> expiredRedemptions = redemptionRepository.findExpiredRedemptions(LocalDate.now());
+        List<VoucherRedemption> expiredRedemptions = redemptionRepository.findExpiredRedemptions(LocalDate.now(), VoucherRedemption.STATUS_ACTIVE);
         
         for (VoucherRedemption redemption : expiredRedemptions) {
-            redemption.setStatus("expired");
+            redemption.setStatus(VoucherRedemption.STATUS_USED);
             redemptionRepository.save(redemption);
             log.info("Marked redemption {} as expired", redemption.getId());
         }
Index: pickleball-frontend/src/components/coach/CoachScheduleManagement.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Box,\r\n  Typography,\r\n  Grid,\r\n  Card,\r\n  CardContent,\r\n  Button,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  TextField,\r\n  Alert,\r\n  CircularProgress,\r\n  useTheme,\r\n  IconButton,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions\r\n} from '@mui/material';\r\nimport ChevronLeftIcon from '@mui/icons-material/ChevronLeft';\r\nimport ChevronRightIcon from '@mui/icons-material/ChevronRight';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport CalendarMonthIcon from '@mui/icons-material/CalendarMonth';\r\nimport AccessTimeIcon from '@mui/icons-material/AccessTime';\r\nimport PlaceIcon from '@mui/icons-material/Place';\r\nimport GroupIcon from '@mui/icons-material/Group';\r\nimport CoachService from '../../service/CoachService';\r\nimport ModernCalendar from '../common/ModernCalendar';\r\nimport { useAuth } from '../../context/AuthContext';\r\nimport axios from 'axios';\r\nimport ClassSessionCreateForm from '../class/ClassSessionCreateForm';\r\nimport EditClassSessionDialog from '../class/EditClassSessionDialog';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport ClassSessionService from '../../service/ClassSessionService';\r\n\r\n// Query busy slots for a court on a specific day\r\nconst fetchBusySlots = async (courtId, date) => {\r\n  if (!courtId || !date) return [];\r\n  const res = await axios.get('/api/coach/available-times', {\r\n    params: { courtId, date }\r\n  });\r\n  return Array.isArray(res.data) ? res.data : [];\r\n};\r\n\r\n// 獲取指定日期的可用時段\r\nconst getAvailableSlotsForDate = async (dateStr, courtId, courtsList) => {\r\n  try {\r\n    // 獲取球場的營業時間\r\n    const court = courtsList.find(c => c.id === courtId);\r\n    if (!court) {\r\n      console.error('Court not found');\r\n      return [];\r\n    }\r\n\r\n    // 解析營業時間\r\n    const openingHour = court.openingTime ? parseInt(court.openingTime.split(':')[0]) : 8;\r\n    const closingHour = court.closingTime ? parseInt(court.closingTime.split(':')[0]) : 22;\r\n    \r\n    console.log('Court operating hours:', openingHour, 'to', closingHour);\r\n\r\n    // 獲取該日期的已預訂時段\r\n    let bookedSlots = [];\r\n    if (courtId && dateStr) {\r\n      try {\r\n        const response = await axios.get('/api/coach/available-times', {\r\n          params: { courtId, date: dateStr }\r\n        });\r\n        bookedSlots = Array.isArray(response.data) ? response.data : [];\r\n        console.log('Booked slots:', bookedSlots);\r\n      } catch (error) {\r\n        console.error('Failed to fetch booked slots:', error);\r\n      }\r\n    }\r\n\r\n    // 生成所有時段\r\n    const allSlots = [];\r\n    for (let hour = openingHour; hour < closingHour; hour++) {\r\n      const startTime = `${hour.toString().padStart(2, '0')}:00`;\r\n      const endTime = `${(hour + 1).toString().padStart(2, '0')}:00`;\r\n      const slotKey = `${startTime}-${endTime}`;\r\n      \r\n      // 檢查是否被預訂\r\n      const isBooked = bookedSlots.some(bookedSlot => {\r\n        const bookedStart = new Date(bookedSlot.start);\r\n        const bookedEnd = new Date(bookedSlot.end);\r\n        const slotStart = new Date(`${dateStr}T${startTime}:00`);\r\n        const slotEnd = new Date(`${dateStr}T${endTime}:00`);\r\n        \r\n        // 檢查時間重疊\r\n        return slotStart < bookedEnd && slotEnd > bookedStart;\r\n      });\r\n\r\n      allSlots.push({\r\n        time: slotKey,\r\n        startTime: startTime,\r\n        endTime: endTime,\r\n        isBooked: isBooked\r\n      });\r\n    }\r\n\r\n    console.log('Generated slots:', allSlots);\r\n    return allSlots;\r\n  } catch (error) {\r\n    console.error('Error fetching available slots:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\nconst CoachScheduleManagement = () => {\r\n  const { hasRole, currentUser } = useAuth();\r\n  const isCoach = hasRole('COACH') || currentUser?.userType === 'COACH' || currentUser?.userType === 'Coach';\r\n  \r\n  // 調試信息\r\n  console.log('=== CoachScheduleManagement Debug ===');\r\n  console.log('currentUser:', currentUser);\r\n  console.log('hasRole(\"COACH\"):', hasRole('COACH'));\r\n  console.log('currentUser?.userType:', currentUser?.userType);\r\n  console.log('isCoach:', isCoach);\r\n  const [venues, setVenues] = useState([]);\r\n  const [allVenues, setAllVenues] = useState([]);\r\n  const [courts, setCourts] = useState([]);\r\n  const [allCourts, setAllCourts] = useState([]);\r\n  const [sessions, setSessions] = useState([]);\r\n  const [timeSlots, setTimeSlots] = useState([]);\r\n  const [openDialog, setOpenDialog] = useState(false);\r\n  const [selectedDate, setSelectedDate] = useState(null);\r\n  const [currentDate, setCurrentDate] = useState(new Date());\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState('');\r\n  const [message, setMessage] = useState('');\r\n  const [busySlots, setBusySlots] = useState([]);\r\n  const [selectedCourtId, setSelectedCourtId] = useState('');\r\n  const [selectedDateForBusySlots, setSelectedDateForBusySlots] = useState(''); // 格式: 'YYYY-MM-DD'\r\n  const [openCreateDialog, setOpenCreateDialog] = useState(false);\r\n  const [editSession, setEditSession] = useState(null);\r\n  const [currentPage, setCurrentPage] = useState(0);\r\n  const sessionsPerPage = 3;\r\n\r\n  const [formData, setFormData] = useState({\r\n    title: '',\r\n    description: '',\r\n    venueId: '',\r\n    courtId: '',\r\n    startTime: '',\r\n    endTime: '',\r\n    experienceYear: '',\r\n    maxParticipants: 6,\r\n    price: '',\r\n    slotType: 'COACH_SESSION',\r\n    date: '',\r\n    availableSlots: [],\r\n    selectedSlot: ''\r\n  });\r\n\r\n  // 測試用戶權限\r\n  const testUserPermissions = () => {\r\n    const token = localStorage.getItem('authToken');\r\n    if (token) {\r\n      try {\r\n        const payload = JSON.parse(atob(token.split('.')[1]));\r\n        console.log('=== JWT Token Analysis ===');\r\n        console.log('Token payload:', payload);\r\n        console.log('Role:', payload.role);\r\n        console.log('UserType:', payload.userType);\r\n        console.log('UserId:', payload.userId);\r\n        console.log('Subject:', payload.sub);\r\n      } catch (error) {\r\n        console.error('Failed to parse JWT token:', error);\r\n      }\r\n    } else {\r\n      console.log('No auth token found');\r\n    }\r\n  };\r\n\r\n  // 在組件加載時測試權限\r\n  useEffect(() => {\r\n    testUserPermissions();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    setError('');\r\n    \r\n    if (isCoach) {\r\n      // Coach view - load management data\r\n      console.log('=== Loading coach data ===');\r\n      console.log('isCoach:', isCoach);\r\n      console.log('currentUser:', currentUser);\r\n      \r\n      Promise.all([\r\n        CoachService.getDebugStatus().catch(err => {\r\n          console.error('Debug status failed:', err);\r\n          return { error: 'Debug status failed' };\r\n        }),\r\n        CoachService.getVenues().catch(err => {\r\n          console.error('Venues failed:', err);\r\n          return [];\r\n        }),\r\n        CoachService.getAllVenues().catch(async (err) => {\r\n          console.error('All venues failed:', err);\r\n          console.log('Trying fallback method for venues');\r\n          return await fetchVenuesFallback();\r\n        }),\r\n        CoachService.getAvailableCourts().catch(err => {\r\n          console.error('Available courts failed:', err);\r\n          return [];\r\n        }),\r\n        CoachService.getAllCourts().catch(async (err) => {\r\n          console.error('All courts failed:', err);\r\n          console.log('Trying fallback method for courts');\r\n          return await fetchCourtsFallback();\r\n        }),\r\n        CoachService.getTimeSlots().catch(err => {\r\n          console.error('Time slots failed:', err);\r\n          return [];\r\n        }),\r\n        fetchScheduleForMonth(currentDate).catch(err => {\r\n          console.error('Schedule failed:', err);\r\n          return [];\r\n        })\r\n      ])\r\n        .then(([debugData, venuesData, allVenuesData, courtsData, allCourtsData, timeSlotsData, sessionsData]) => {\r\n          console.log('Coach debug status:', debugData);\r\n          setVenues(venuesData);\r\n          setAllVenues(allVenuesData);\r\n          setCourts(courtsData);\r\n          setAllCourts(allCourtsData);\r\n          setTimeSlots(timeSlotsData);\r\n          setSessions(Array.isArray(sessionsData) ? sessionsData : []);\r\n        })\r\n        .catch((err) => {\r\n          console.error('Error loading coach data:', err);\r\n          setError(`Failed to load data: ${err.message || err}`);\r\n        })\r\n        .finally(() => setLoading(false));\r\n    } else {\r\n      // User view - load available coaching sessions\r\n      fetchAvailableCoachingSessions()\r\n        .then((sessionsData) => {\r\n          console.log('sessionsData:', sessionsData, Array.isArray(sessionsData));\r\n          setSessions(Array.isArray(sessionsData) ? sessionsData : []);\r\n        })\r\n        .catch((err) => {\r\n          console.error('Error loading coaching sessions:', err);\r\n          setError(`Failed to load coaching sessions: ${err.message || err}`);\r\n        })\r\n        .finally(() => setLoading(false));\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [isCoach]);\r\n\r\n  useEffect(() => {\r\n    if (isCoach) {\r\n      fetchScheduleForMonth(currentDate)\r\n        .then((sessionsData) => setSessions(Array.isArray(sessionsData) ? sessionsData : []))\r\n        .catch(() => setError('Failed to load schedule.'));\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [currentDate, isCoach]);\r\n\r\n  useEffect(() => {\r\n    if (selectedCourtId && selectedDateForBusySlots) {\r\n      fetchBusySlots(selectedCourtId, selectedDateForBusySlots).then(setBusySlots);\r\n    } else {\r\n      setBusySlots([]);\r\n    }\r\n  }, [selectedCourtId, selectedDateForBusySlots]);\r\n\r\n  const fetchScheduleForMonth = async (date) => {\r\n    const year = date.getFullYear();\r\n    const month = date.getMonth();\r\n    const start = new Date(year, month, 1, 0, 0, 0);\r\n    const end = new Date(year, month + 1, 0, 23, 59, 59);\r\n    const data = await CoachService.getSchedule(start.toISOString(), end.toISOString());\r\n    return Array.isArray(data) ? data : [];\r\n  };\r\n\r\n  const fetchAvailableCoachingSessions = async () => {\r\n    try {\r\n      const start = new Date();\r\n      const end = new Date();\r\n      end.setMonth(end.getMonth() + 1); // Next month\r\n      const sessions = await CoachService.getPublicSessions(start.toISOString(), end.toISOString());\r\n      return sessions;\r\n    } catch (error) {\r\n      console.error('Error in fetchAvailableCoachingSessions:', error);\r\n      // Return empty array if there's an error, so users can still see the page\r\n      return [];\r\n    }\r\n  };\r\n\r\n  // 備用的球場獲取方法\r\n  const fetchCourtsFallback = async () => {\r\n    try {\r\n      console.log('Using fallback court fetching method');\r\n      const response = await fetch('http://localhost:8081/api/courts');\r\n      if (response.ok) {\r\n        const courts = await response.json();\r\n        console.log('Fallback courts:', courts);\r\n        return courts;\r\n      } else {\r\n        console.error('Fallback court fetch failed:', response.status);\r\n        return [];\r\n      }\r\n    } catch (error) {\r\n      console.error('Fallback court fetch error:', error);\r\n      return [];\r\n    }\r\n  };\r\n\r\n  // 備用的場地獲取方法\r\n  const fetchVenuesFallback = async () => {\r\n    try {\r\n      console.log('Using fallback venue fetching method');\r\n      const response = await fetch('http://localhost:8081/api/venues');\r\n      if (response.ok) {\r\n        const venues = await response.json();\r\n        console.log('Fallback venues:', venues);\r\n        return venues;\r\n      } else {\r\n        console.error('Fallback venue fetch failed:', response.status);\r\n        return [];\r\n      }\r\n    } catch (error) {\r\n      console.error('Fallback venue fetch error:', error);\r\n      return [];\r\n    }\r\n  };\r\n\r\n  const getCalendarData = () => {\r\n    const year = currentDate.getFullYear();\r\n    const month = currentDate.getMonth();\r\n    const firstDay = new Date(year, month, 1);\r\n    const lastDay = new Date(year, month + 1, 0);\r\n    const startDate = new Date(firstDay);\r\n    startDate.setDate(startDate.getDate() - firstDay.getDay());\r\n    const endDate = new Date(lastDay);\r\n    endDate.setDate(endDate.getDate() + (6 - lastDay.getDay()));\r\n    const weeks = [];\r\n    const current = new Date(startDate);\r\n    while (current <= endDate) {\r\n      const week = [];\r\n      for (let i = 0; i < 7; i++) {\r\n        week.push(new Date(current));\r\n        current.setDate(current.getDate() + 1);\r\n      }\r\n      weeks.push(week);\r\n    }\r\n    return { weeks, currentMonth: month, currentYear: year };\r\n  };\r\n\r\n  const { weeks, currentMonth, currentYear } = getCalendarData();\r\n\r\n  const monthNames = [\r\n    'January', 'February', 'March', 'April', 'May', 'June',\r\n    'July', 'August', 'September', 'October', 'November', 'December'\r\n  ];\r\n  const dayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\n\r\n  const navigateMonth = (direction) => {\r\n    setCurrentDate(prev => {\r\n      const newDate = new Date(prev);\r\n      newDate.setMonth(prev.getMonth() + direction);\r\n      return newDate;\r\n    });\r\n  };\r\n\r\n  const isToday = (date) => {\r\n    const today = new Date();\r\n    return date.toDateString() === today.toDateString();\r\n  };\r\n\r\n  const isCurrentMonth = (date) => {\r\n    return date.getMonth() === currentMonth;\r\n  };\r\n\r\n  const handleDateClick = (date) => {\r\n    setSelectedDate(date);\r\n  };\r\n\r\n  const handleInputChange = (e) => {\r\n    setFormData({ ...formData, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  // 當選擇場地時，更新球場選項\r\n  const handleVenueChange = (venueId) => {\r\n    setFormData(prev => ({ ...prev, venueId, courtId: '', date: '', availableSlots: [], selectedSlot: '' }));\r\n    if (venueId) {\r\n      CoachService.getCourtsByVenue(venueId)\r\n        .then(courtsData => {\r\n          setCourts(courtsData);\r\n        })\r\n        .catch(err => {\r\n          console.error('Error loading courts for venue:', err);\r\n        });\r\n    } else {\r\n      setCourts([]);\r\n    }\r\n  };\r\n\r\n  // 當選擇開始時間時，自動設置結束時間\r\n  const handleStartTimeChange = (startTime) => {\r\n    if (startTime) {\r\n      const start = new Date(startTime);\r\n      const end = new Date(start.getTime() + 60 * 60 * 1000); // 加1小時\r\n      setFormData(prev => ({ \r\n        ...prev, \r\n        startTime, \r\n        endTime: end.toISOString().slice(0, 16) \r\n      }));\r\n    }\r\n  };\r\n\r\n  const handleCreateSession = async (e) => {\r\n    e.preventDefault();\r\n    setMessage('');\r\n    setError('');\r\n    if (!formData.title || formData.title.trim() === '') {\r\n      setError('Title is required');\r\n      return;\r\n    }\r\n    console.log('Create session payload:', formData);\r\n    try {\r\n      await CoachService.createSlot(formData);\r\n      setMessage('Session created successfully!');\r\n      setOpenDialog(false);\r\n      setFormData({\r\n        title: '',\r\n        description: '',\r\n        venueId: '',\r\n        courtId: '',\r\n        startTime: '',\r\n        endTime: '',\r\n        experienceYear: '',\r\n        maxParticipants: 6,\r\n        price: '',\r\n        slotType: 'COACH_SESSION',\r\n        date: '',\r\n        availableSlots: [],\r\n        selectedSlot: ''\r\n      });\r\n      fetchScheduleForMonth(currentDate).then(setSessions);\r\n    } catch (err) {\r\n      setError(\r\n        err?.response?.data?.error ||\r\n        err?.response?.data?.message ||\r\n        'Session creation failed'\r\n      );\r\n    }\r\n  };\r\n\r\n  // 在 filter 前加防呆\r\n  const getSessionsForDate = (date) => {\r\n    if (!Array.isArray(sessions)) return [];\r\n    return sessions.filter(s => {\r\n      const sessionDate = new Date(s.startTime);\r\n      return sessionDate.toDateString() === date.toDateString();\r\n    });\r\n  };\r\n\r\n  const thisMonthSessions = sessions.length;\r\n  const thisMonthActive = sessions.filter(s => s.status === 'AVAILABLE' || s.status === 'BOOKED_BY_USER').length;\r\n  const thisMonthRevenue = sessions.reduce((sum, s) => sum + (s.price || 0), 0);\r\n\r\n  // recurringGroupId 分組計算\r\n  const getTotalSessionsByGroup = (recurringGroupId) => {\r\n    if (!recurringGroupId) return 1;\r\n    return sessions.filter(s => s.recurringGroupId === recurringGroupId).length;\r\n  };\r\n\r\n  // 建立課程成功後自動刷新日曆與統計數據\r\n  const handleClassSessionCreated = (newSessionDate) => {\r\n    fetchScheduleForMonth(currentDate).then(setSessions);\r\n    if (newSessionDate) {\r\n      setSelectedDate(new Date(newSessionDate));\r\n    }\r\n    setMessage('Session created successfully!');\r\n    setTimeout(() => setMessage(''), 2000);\r\n  };\r\n\r\n  // 編輯成功後刷新\r\n  const handleEditSuccess = () => {\r\n    fetchScheduleForMonth(currentDate).then(setSessions);\r\n    setEditSession(null);\r\n  };\r\n\r\n  // Cancel class session\r\n  const handleCancelSession = async (sessionId) => {\r\n    if (!window.confirm(\"Are you sure you want to cancel this session?\")) return;\r\n    try {\r\n      await ClassSessionService.cancelSession(sessionId);\r\n      alert(\"Session cancelled successfully!\");\r\n      fetchScheduleForMonth(currentDate).then(setSessions);\r\n    } catch (e) {\r\n      const errorMessage = e?.response?.data?.error || e.message;\r\n      if (errorMessage.includes('24 hours')) {\r\n        if (window.confirm(\"Cannot cancel session within 24 hours of start time. Do you want to force cancel?\")) {\r\n          try {\r\n            await ClassSessionService.cancelSession(sessionId, '', true);\r\n            alert(\"Session force-cancelled successfully!\");\r\n            fetchScheduleForMonth(currentDate).then(setSessions);\r\n          } catch (forceError) {\r\n            alert(\"Force cancellation failed: \" + (forceError?.response?.data?.error || forceError.message));\r\n          }\r\n        }\r\n      } else {\r\n        alert(\"Cancellation failed: \" + errorMessage);\r\n      }\r\n    }\r\n  };\r\n\r\n  // 分頁處理函數\r\n  const handleNextPage = () => {\r\n    const maxPage = Math.ceil(sessions.length / sessionsPerPage) - 1;\r\n    if (currentPage < maxPage) {\r\n      setCurrentPage(currentPage + 1);\r\n    }\r\n  };\r\n\r\n  const handlePrevPage = () => {\r\n    if (currentPage > 0) {\r\n      setCurrentPage(currentPage - 1);\r\n    }\r\n  };\r\n\r\n  const getCurrentPageSessions = () => {\r\n    const startIndex = currentPage * sessionsPerPage;\r\n    return sessions.slice(startIndex, startIndex + sessionsPerPage);\r\n  };\r\n\r\n  const totalPages = Math.ceil(sessions.length / sessionsPerPage);\r\n\r\n  return (\r\n    <Box sx={{ minHeight: '100vh', bgcolor: 'background.default', p: 3 }}>\r\n      <Grid container justifyContent=\"space-between\" alignItems=\"center\">\r\n        <Grid item>\r\n          <Typography variant=\"h4\" fontWeight=\"bold\" gutterBottom>\r\n            {isCoach ? 'Coach Schedule Management' : 'Available Coaching Sessions'}\r\n          </Typography>\r\n          <Typography variant=\"subtitle1\">\r\n            {isCoach ? 'Manage your coaching sessions and availability' : 'Browse and book coaching sessions'}\r\n          </Typography>\r\n        </Grid>\r\n        {isCoach && (\r\n          <Grid item>\r\n            <Button variant=\"contained\" color=\"secondary\" startIcon={<AddIcon />} onClick={() => setOpenCreateDialog(true)} sx={{ boxShadow: 2 }}>\r\n              Create Recurring Session\r\n            </Button>\r\n          </Grid>\r\n        )}\r\n      </Grid>\r\n      <ClassSessionCreateForm open={openCreateDialog} onClose={() => setOpenCreateDialog(false)} onSuccess={handleClassSessionCreated} />\r\n      {/* Edit Dialog */}\r\n      <EditClassSessionDialog open={!!editSession} session={editSession} onClose={() => setEditSession(null)} onSuccess={handleEditSuccess} />\r\n\r\n      {loading && <Typography align=\"center\" color=\"primary\" sx={{ py: 4 }}>Loading...</Typography>}\r\n      {error && <Typography align=\"center\" color=\"error\" sx={{ py: 2 }}>{error}</Typography>}\r\n\r\n      {message && (\r\n        <Box sx={{ position: 'fixed', top: 80, right: 40, zIndex: 9999, bgcolor: 'success.light', color: 'success.dark', p: 2, borderRadius: 2, boxShadow: 3 }}>\r\n          <Typography fontWeight=\"bold\">{message}</Typography>\r\n        </Box>\r\n      )}\r\n\r\n      {isCoach ? (\r\n        // Coach view - show calendar and management features\r\n        <Grid container spacing={3} justifyContent=\"center\" alignItems=\"flex-start\" sx={{ mt: 2 }}>\r\n          {/* Calendar */}\r\n          <Grid item xs={12} md={7} lg={8}>\r\n            <ModernCalendar\r\n              currentDate={currentDate}\r\n              onPrevMonth={() => navigateMonth(-1)}\r\n              onNextMonth={() => navigateMonth(1)}\r\n              onDateClick={handleDateClick}\r\n              getSessionsForDate={getSessionsForDate}\r\n              selectedDate={selectedDate}\r\n              maxWidth=\"650px\"\r\n            />\r\n          </Grid>\r\n          {/* Session Details and This Month */}\r\n          <Grid item xs={12} md={5} lg={4}>\r\n            {/* Session Details Panel */}\r\n            <Card elevation={2} sx={{ p: 3, borderRadius: 3, minHeight: 300 }}>\r\n              <Box display=\"flex\" alignItems=\"center\" gap={1} mb={2}>\r\n                <CalendarMonthIcon color=\"primary\" />\r\n                <Typography variant=\"h6\" fontWeight=\"bold\">Session Details</Typography>\r\n              </Box>\r\n              {selectedDate ? (\r\n                <Box>\r\n                  <Card elevation={0} sx={{ bgcolor: 'primary.light', p: 2, mb: 2, borderRadius: 2 }}>\r\n                    <Typography fontWeight=\"bold\" color=\"primary.dark\">Selected Date</Typography>\r\n                    <Typography color=\"primary.main\">\r\n                      {selectedDate.toLocaleDateString('en-US', {\r\n                        weekday: 'long', year: 'numeric', month: 'long', day: 'numeric'\r\n                      })}\r\n                    </Typography>\r\n                  </Card>\r\n                  {getSessionsForDate(selectedDate).length > 0 ? (\r\n                    <Box display=\"flex\" flexDirection=\"column\" gap={2}>\r\n                      {getSessionsForDate(selectedDate).map((session, idx) => (\r\n                        <Card key={session.id || idx} elevation={1} sx={{ p: 2, borderRadius: 2, borderLeft: 4, borderColor: session.status === 'AVAILABLE' ? 'success.main' : 'warning.main', bgcolor: session.status === 'AVAILABLE' ? 'success.lighter' : 'warning.lighter', cursor: 'pointer', position: 'relative' }}\r\n                          onClick={() => setEditSession(session)}\r\n                        >\r\n                          <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={1}>\r\n                            <Typography fontWeight=\"bold\" color={session.status === 'AVAILABLE' ? 'success.dark' : 'warning.dark'}>{session.title || 'Session'}</Typography>\r\n                            <Typography variant=\"caption\" sx={{ bgcolor: session.status === 'AVAILABLE' ? 'success.light' : 'warning.light', color: session.status === 'AVAILABLE' ? 'success.dark' : 'warning.dark', px: 1, borderRadius: 1 }}>{session.status}</Typography>\r\n                            {/* 新增 Cancel 按鈕 */}\r\n                            <IconButton color=\"error\" size=\"small\" onClick={e => { e.stopPropagation(); handleCancelSession(session.id); }}>\r\n                              <DeleteIcon fontSize=\"small\" />\r\n                            </IconButton>\r\n                          </Box>\r\n                          <Box display=\"flex\" alignItems=\"center\" gap={1} color={session.status === 'AVAILABLE' ? 'success.main' : 'warning.main'}>\r\n                            <AccessTimeIcon fontSize=\"small\" />\r\n                            <Typography variant=\"body2\">{new Date(session.startTime).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })} - {new Date(session.endTime).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}</Typography>\r\n                          </Box>\r\n                          <Box display=\"flex\" alignItems=\"center\" gap={1} color={session.status === 'AVAILABLE' ? 'success.main' : 'warning.main'}>\r\n                            <PlaceIcon fontSize=\"small\" />\r\n                            <Typography variant=\"body2\">{session.court?.name} - {venues.find(v => v.id === session.venueId)?.name || ''}</Typography>\r\n                          </Box>\r\n                          <Box display=\"flex\" alignItems=\"center\" gap={1} color={session.status === 'AVAILABLE' ? 'success.main' : 'warning.main'}>\r\n                            <GroupIcon fontSize=\"small\" />\r\n                            <Typography variant=\"body2\">{session.currentParticipants || 0}/{session.maxParticipants} participants</Typography>\r\n                          </Box>\r\n                          <Typography variant=\"caption\" color=\"text.secondary\" mt={1}>{session.description}</Typography>\r\n                          {/* 新增：右下角顯示 recurringGroupId 分組總堂數 */}\r\n                          {session.recurringGroupId && (\r\n                            <Box sx={{ position: 'absolute', right: 12, bottom: 8, color: 'primary.main', fontSize: 13 }}>\r\n                              Total {getTotalSessionsByGroup(session.recurringGroupId)} sessions\r\n                            </Box>\r\n                          )}\r\n                        </Card>\r\n                      ))}\r\n                    </Box>\r\n                  ) : (\r\n                    <Box textAlign=\"center\" py={4} color=\"text.disabled\">\r\n                      <CalendarMonthIcon fontSize=\"large\" sx={{ opacity: 0.5 }} />\r\n                      <Typography>No sessions scheduled for this date</Typography>\r\n                    </Box>\r\n                  )}\r\n                </Box>\r\n              ) : (\r\n                <Box textAlign=\"center\" py={4} color=\"text.disabled\">\r\n                  <CalendarMonthIcon fontSize=\"large\" sx={{ opacity: 0.5 }} />\r\n                  <Typography>Select a date to view sessions</Typography>\r\n                </Box>\r\n              )}\r\n            </Card>\r\n\r\n            {/* Quick Stats */}\r\n            <Card elevation={2} sx={{ p: 3, borderRadius: 3, mt: 3 }}>\r\n              <Typography variant=\"h6\" fontWeight=\"bold\" mb={2}>This Month</Typography>\r\n              <Box display=\"flex\" flexDirection=\"column\" gap={2}>\r\n                <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\r\n                  <Typography color=\"text.secondary\">Total Sessions</Typography>\r\n                  <Typography fontWeight=\"bold\" color=\"primary.main\">{thisMonthSessions}</Typography>\r\n                </Box>\r\n                <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\r\n                  <Typography color=\"text.secondary\">Active Bookings</Typography>\r\n                  <Typography fontWeight=\"bold\" color=\"success.main\">{thisMonthActive}</Typography>\r\n                </Box>\r\n                <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\r\n                  <Typography color=\"text.secondary\">Revenue</Typography>\r\n                  <Typography fontWeight=\"bold\" color=\"secondary.main\">${thisMonthRevenue}</Typography>\r\n                </Box>\r\n              </Box>\r\n            </Card>\r\n          </Grid>\r\n        </Grid>\r\n      ) : (\r\n        // User view - show available coaching sessions\r\n        <Card elevation={2} sx={{ p: 4, borderRadius: 3 }}>\r\n          <Typography variant=\"h5\" color=\"text.primary\" gutterBottom>\r\n            Available Coaching Sessions\r\n          </Typography>\r\n          <Typography variant=\"body1\" color=\"text.secondary\" sx={{ mb: 3 }}>\r\n            Browse and book coaching sessions with our experienced coaches.\r\n          </Typography>\r\n          \r\n          {Array.isArray(sessions) && sessions.length > 0 ? (\r\n            <>\r\n              <Grid container spacing={3} justifyContent=\"center\">\r\n                {getCurrentPageSessions().map((session, idx) => (\r\n                  <Grid item xs={12} sm={6} md={4} key={session.id || idx}>\r\n                    <Card elevation={2} sx={{ p: 3, borderRadius: 2, borderLeft: 4, borderColor: 'primary.main' }}>\r\n                      <Typography variant=\"h6\" fontWeight=\"bold\" gutterBottom>\r\n                        {session.title || 'Coaching Session'}\r\n                      </Typography>\r\n                      <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\r\n                        {session.description || 'Professional coaching session'}\r\n                      </Typography>\r\n                      <Box display=\"flex\" alignItems=\"center\" gap={1} sx={{ mb: 1 }}>\r\n                        <AccessTimeIcon fontSize=\"small\" color=\"primary\" />\r\n                        <Typography variant=\"body2\">\r\n                          {new Date(session.startTime).toLocaleDateString()} at {new Date(session.startTime).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}\r\n                        </Typography>\r\n                      </Box>\r\n                      <Box display=\"flex\" alignItems=\"center\" gap={1} sx={{ mb: 1 }}>\r\n                        <PlaceIcon fontSize=\"small\" color=\"primary\" />\r\n                        <Typography variant=\"body2\">\r\n                          {session.court?.name} - {venues.find(v => v.id === session.venueId)?.name || 'Venue'}\r\n                        </Typography>\r\n                      </Box>\r\n                      <Box display=\"flex\" alignItems=\"center\" gap={1} sx={{ mb: 2 }}>\r\n                        <GroupIcon fontSize=\"small\" color=\"primary\" />\r\n                        <Typography variant=\"body2\">\r\n                          {session.currentParticipants || 0}/{session.maxParticipants} participants\r\n                        </Typography>\r\n                      </Box>\r\n                      <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\r\n                        <Typography variant=\"h6\" color=\"primary.main\" fontWeight=\"bold\">\r\n                          ${session.price || 0}\r\n                        </Typography>\r\n                        <Button \r\n                          variant=\"contained\" \r\n                          color=\"primary\" \r\n                          size=\"small\"\r\n                          disabled={session.status !== 'AVAILABLE'}\r\n                        >\r\n                          {session.status === 'AVAILABLE' ? 'Book Now' : 'Full'}\r\n                        </Button>\r\n                      </Box>\r\n                    </Card>\r\n                  </Grid>\r\n                ))}\r\n              </Grid>\r\n              \r\n              {/* 分頁導航 */}\r\n              {totalPages > 1 && (\r\n                <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', mt: 3, gap: 2 }}>\r\n                  <Button\r\n                    variant=\"outlined\"\r\n                    startIcon={<ChevronLeftIcon />}\r\n                    onClick={handlePrevPage}\r\n                    disabled={currentPage === 0}\r\n                    sx={{ borderRadius: 2 }}\r\n                  >\r\n                    Previous\r\n                  </Button>\r\n                  <Typography variant=\"body2\" sx={{ px: 2 }}>\r\n                    Page {currentPage + 1} of {totalPages}\r\n                  </Typography>\r\n                  <Button\r\n                    variant=\"outlined\"\r\n                    endIcon={<ChevronRightIcon />}\r\n                    onClick={handleNextPage}\r\n                    disabled={currentPage === totalPages - 1}\r\n                    sx={{ borderRadius: 2 }}\r\n                  >\r\n                    Next\r\n                  </Button>\r\n                </Box>\r\n              )}\r\n            </>\r\n          ) : (\r\n            <Box textAlign=\"center\" py={4}>\r\n              <CalendarMonthIcon fontSize=\"large\" sx={{ opacity: 0.5, mb: 2 }} />\r\n              <Typography variant=\"h6\" color=\"text.secondary\" gutterBottom>\r\n                No coaching sessions available\r\n              </Typography>\r\n              <Typography variant=\"body2\" color=\"text.secondary\">\r\n                Check back later for new coaching sessions.\r\n              </Typography>\r\n            </Box>\r\n          )}\r\n        </Card>\r\n      )}\r\n\r\n      {/* Create Session Modal */}\r\n      {isCoach && (\r\n        <Dialog open={openDialog} onClose={() => setOpenDialog(false)} maxWidth=\"md\" fullWidth>\r\n        <DialogTitle sx={{ background: 'linear-gradient(90deg, #2196f3 0%, #9c27b0 100%)', color: 'white' }}>Create Coaching Session</DialogTitle>\r\n        <DialogContent dividers>\r\n          <Box component=\"form\" onSubmit={handleCreateSession} sx={{ mt: 2 }}>\r\n            <Grid container spacing={3}>\r\n              <Grid item xs={12} md={6}>\r\n                <TextField\r\n                  label=\"Session Title\"\r\n                  name=\"title\"\r\n                  value={formData.title}\r\n                  onChange={handleInputChange}\r\n                  fullWidth\r\n                  required\r\n                  margin=\"normal\"\r\n                />\r\n                <TextField\r\n                  label=\"Description\"\r\n                  name=\"description\"\r\n                  value={formData.description}\r\n                  onChange={handleInputChange}\r\n                  fullWidth\r\n                  required\r\n                  margin=\"normal\"\r\n                  multiline\r\n                  rows={3}\r\n                />\r\n                <FormControl fullWidth margin=\"normal\" required>\r\n                  <InputLabel>Venue</InputLabel>\r\n                <Select\r\n                  name=\"venueId\"\r\n                  value={formData.venueId}\r\n                  onChange={(e) => handleVenueChange(e.target.value)}\r\n                  label=\"Venue\"\r\n                >\r\n                  <MenuItem value=\"\">Select a venue</MenuItem>\r\n                  {allVenues.map(venue => (\r\n                    <MenuItem key={venue.id} value={venue.id}>{venue.name}</MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n              <FormControl fullWidth margin=\"normal\" required disabled={!formData.venueId}>\r\n                <InputLabel>Court</InputLabel>\r\n                <Select\r\n                  name=\"courtId\"\r\n                  value={formData.courtId}\r\n                  onChange={e => {\r\n                    setFormData({ ...formData, courtId: e.target.value });\r\n                    setSelectedCourtId(e.target.value);\r\n                  }}\r\n                  label=\"Court\"\r\n                >\r\n                  <MenuItem value=\"\">Select a court</MenuItem>\r\n                  {courts.map(court => (\r\n                    <MenuItem key={court.id} value={court.id}>{court.name}</MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n              </Grid>\r\n              <Grid item xs={12} md={6}>\r\n                <TextField\r\n                  label=\"Date\"\r\n                  type=\"date\"\r\n                  value={formData.date || ''}\r\n                  onChange={async (e) => {\r\n                    const dateStr = e.target.value;\r\n                    setFormData({ ...formData, date: dateStr, startTime: '', endTime: '', selectedSlot: '' });\r\n                    // 獲取該日期的可用時段\r\n                    if (dateStr && formData.courtId) {\r\n                    try {\r\n                      const availableSlots = await getAvailableSlotsForDate(dateStr, formData.courtId, courts);\r\n                      setFormData(prev => ({ ...prev, availableSlots }));\r\n                    } catch (error) {\r\n                      console.error('Failed to fetch available slots:', error);\r\n                    }\r\n                  }\r\n                  }}\r\n                  fullWidth\r\n                  required\r\n                  margin=\"normal\"\r\n                  InputLabelProps={{ shrink: true }}\r\n                />\r\n                \r\n                {formData.date && formData.availableSlots && (\r\n                  <Box sx={{ mt: 2 }}>\r\n                    <Typography variant=\"h6\" sx={{ mb: 2, display: 'flex', alignItems: 'center' }}>\r\n                      <CalendarMonthIcon sx={{ mr: 1, color: 'primary.main' }} />\r\n                      Available Time Slots - {new Date(formData.date).toLocaleDateString('en-US', { \r\n                        weekday: 'long', \r\n                        year: 'numeric', \r\n                        month: 'long', \r\n                        day: 'numeric' \r\n                      })}\r\n                    </Typography>\r\n                    <Grid container spacing={1}>\r\n                      {formData.availableSlots.map((slot, index) => {\r\n                        const isSelected = formData.selectedSlot === slot.time;\r\n                        const isAvailable = !slot.isBooked;\r\n                        \r\n                        return (\r\n                          <Grid item xs={6} sm={4} md={3} key={index}>\r\n                            <Button\r\n                              fullWidth\r\n                              variant={isSelected ? \"contained\" : \"outlined\"}\r\n                              onClick={() => {\r\n                                if (isAvailable) {\r\n                                  const dateTime = `${formData.date}T${slot.startTime}:00`;\r\n                                  setFormData({\r\n                                    ...formData,\r\n                                    selectedSlot: slot.time,\r\n                                    startTime: dateTime\r\n                                  });\r\n                                }\r\n                              }}\r\n                              disabled={!isAvailable}\r\n                              sx={{\r\n                                py: 1.5,\r\n                                borderRadius: '12px',\r\n                                fontWeight: 600,\r\n                                ...(isSelected ? {\r\n                                  background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n                                  color: 'white',\r\n                                  boxShadow: '0 4px 8px rgba(102, 126, 234, 0.3)',\r\n                                  '&:hover': {\r\n                                    background: 'linear-gradient(135deg, #5a6fd8 0%, #6a4190 100%)'\r\n                                  }\r\n                                } : {\r\n                                  borderColor: isAvailable ? '#667eea' : '#ccc',\r\n                                  color: isAvailable ? '#667eea' : '#999',\r\n                                  '&:hover': isAvailable ? {\r\n                                    borderColor: '#5a6fd8',\r\n                                    backgroundColor: 'rgba(102, 126, 234, 0.05)'\r\n                                  } : {}\r\n                                }),\r\n                                ...(!isAvailable && {\r\n                                  backgroundColor: '#f5f5f5',\r\n                                  opacity: 0.6,\r\n                                  cursor: 'not-allowed'\r\n                                })\r\n                              }}\r\n                            >\r\n                              {slot.startTime}\r\n                              {slot.isBooked && (\r\n                                <Box component=\"span\" sx={{ \r\n                                  fontSize: '0.7em', \r\n                                  display: 'block', \r\n                                  color: '#999',\r\n                                  mt: 0.5 \r\n                                }}>\r\n                                  Booked\r\n                                </Box>\r\n                              )}\r\n                            </Button>\r\n                          </Grid>\r\n                        );\r\n                      })}\r\n                    </Grid>\r\n                    <Box sx={{ mt: 2, p: 1, bgcolor: '#e8f5e8', borderRadius: 1, textAlign: 'center' }}>\r\n                      <Typography variant=\"body2\" color=\"text.secondary\">\r\n                        RM45-60/hour\r\n                      </Typography>\r\n                    </Box>\r\n                  </Box>\r\n                )}\r\n                \r\n                <TextField\r\n                  label=\"Duration (hours)\"\r\n                  type=\"number\"\r\n                  value={formData.startTime && formData.endTime ? \r\n                    (new Date(formData.endTime) - new Date(formData.startTime)) / (1000 * 60 * 60) : 1}\r\n                  onChange={(e) => {\r\n                    const duration = parseFloat(e.target.value);\r\n                    const startTime = formData.startTime || new Date().toISOString();\r\n                    const endTime = new Date(new Date(startTime).getTime() + duration * 60 * 60 * 1000).toISOString();\r\n                    setFormData({...formData, endTime});\r\n                  }}\r\n                  fullWidth\r\n                  required\r\n                  margin=\"normal\"\r\n                  inputProps={{ min: 0.5, max: 8, step: 0.5 }}\r\n                />\r\n                <TextField\r\n                  label=\"Max Participants\"\r\n                  name=\"maxParticipants\"\r\n                  type=\"number\"\r\n                  value={formData.maxParticipants}\r\n                  onChange={handleInputChange}\r\n                  fullWidth\r\n                  required\r\n                  margin=\"normal\"\r\n                  inputProps={{ min: 1, max: 20 }}\r\n                />\r\n                <TextField\r\n                  label=\"Experience (Years)\"\r\n                  name=\"experienceYear\"\r\n                  type=\"number\"\r\n                  value={formData.experienceYear}\r\n                  onChange={handleInputChange}\r\n                  fullWidth\r\n                  required\r\n                  margin=\"normal\"\r\n                />\r\n                <TextField\r\n                  label=\"Price ($)\"\r\n                  name=\"price\"\r\n                  type=\"number\"\r\n                  value={formData.price}\r\n                  onChange={handleInputChange}\r\n                  fullWidth\r\n                  required\r\n                  margin=\"normal\"\r\n                  inputProps={{ step: 0.01 }}\r\n                />\r\n                <FormControl fullWidth margin=\"normal\" required>\r\n                  <InputLabel>Session Type</InputLabel>\r\n                  <Select\r\n                    name=\"slotType\"\r\n                    value={formData.slotType}\r\n                    onChange={handleInputChange}\r\n                    label=\"Session Type\"\r\n                  >\r\n                    <MenuItem value=\"COACH_SESSION\">Regular Session</MenuItem>\r\n                    <MenuItem value=\"COACH_AVAILABILITY\">Coach Availability</MenuItem>\r\n                    <MenuItem value=\"PRIVATE\">Private Lesson</MenuItem>\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n            </Grid>\r\n            {message && (\r\n              <Box mt={3} p={2} borderRadius={2} bgcolor=\"#e8f5e9\" color=\"success.main\" border={1} borderColor=\"success.light\">\r\n                {message}\r\n              </Box>\r\n            )}\r\n            {error && (\r\n              <Box mt={3} p={2} borderRadius={2} bgcolor=\"#ffebee\" color=\"error.main\" border={1} borderColor=\"error.light\">\r\n                {error}\r\n              </Box>\r\n            )}\r\n            {busySlots.length > 0 && (\r\n              <div style={{ color: 'red', marginTop: 8 }}>\r\n                Booked time slots:\r\n                <ul>\r\n                  {busySlots.map((slot, idx) => (\r\n                    <li key={idx}>\r\n                      {slot.start} ~ {slot.end}\r\n                    </li>\r\n                  ))}\r\n                </ul>\r\n              </div>\r\n            )}\r\n          </Box>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setOpenDialog(false)} color=\"inherit\">Cancel</Button>\r\n          <Button onClick={handleCreateSession} variant=\"contained\" color=\"primary\">Create Session</Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default CoachScheduleManagement;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball-frontend/src/components/coach/CoachScheduleManagement.jsx b/pickleball-frontend/src/components/coach/CoachScheduleManagement.jsx
--- a/pickleball-frontend/src/components/coach/CoachScheduleManagement.jsx	(revision 89327e12854b108d004ebb020d0592b1c618ecaf)
+++ b/pickleball-frontend/src/components/coach/CoachScheduleManagement.jsx	(date 1754332117491)
@@ -33,7 +33,7 @@
 import axios from 'axios';
 import ClassSessionCreateForm from '../class/ClassSessionCreateForm';
 import EditClassSessionDialog from '../class/EditClassSessionDialog';
-import DeleteIcon from '@mui/icons-material/Delete';
+// 移除删除按钮，不再需要 DeleteIcon
 import ClassSessionService from '../../service/ClassSessionService';
 
 // Query busy slots for a court on a specific day
@@ -607,10 +607,7 @@
                           <Box display="flex" justifyContent="space-between" alignItems="center" mb={1}>
                             <Typography fontWeight="bold" color={session.status === 'AVAILABLE' ? 'success.dark' : 'warning.dark'}>{session.title || 'Session'}</Typography>
                             <Typography variant="caption" sx={{ bgcolor: session.status === 'AVAILABLE' ? 'success.light' : 'warning.light', color: session.status === 'AVAILABLE' ? 'success.dark' : 'warning.dark', px: 1, borderRadius: 1 }}>{session.status}</Typography>
-                            {/* 新增 Cancel 按鈕 */}
-                            <IconButton color="error" size="small" onClick={e => { e.stopPropagation(); handleCancelSession(session.id); }}>
-                              <DeleteIcon fontSize="small" />
-                            </IconButton>
+                            {/* 移除删除按钮 - 教练不能删除课程 */}
                           </Box>
                           <Box display="flex" alignItems="center" gap={1} color={session.status === 'AVAILABLE' ? 'success.main' : 'warning.main'}>
                             <AccessTimeIcon fontSize="small" />
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/MemberRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.repository;\r\n\r\nimport com.pickleball_backend.pickleball.entity.Member;\r\nimport com.pickleball_backend.pickleball.entity.User;\r\nimport com.pickleball_backend.pickleball.entity.MembershipTier;\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\nimport org.springframework.data.jpa.repository.Modifying;\r\nimport org.springframework.data.jpa.repository.Query;\r\nimport org.springframework.data.repository.query.Param;\r\nimport org.springframework.transaction.annotation.Transactional;\r\nimport java.util.List;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\n\r\npublic interface MemberRepository extends JpaRepository<Member, Integer> {\r\n\r\n    @Modifying\r\n    @Transactional\r\n    @Query(\"UPDATE Member m SET m.tier = :tier WHERE m.pointBalance BETWEEN :min AND :max\")\r\n    int updateMembersTier(\r\n            @Param(\"min\") int min,\r\n            @Param(\"max\") int max,\r\n            @Param(\"tier\") MembershipTier tier\r\n    );\r\n\r\n    @Modifying\r\n    @Transactional\r\n    @Query(\"UPDATE Member m SET m.tier = :newTier WHERE m.tier.id = :oldTierId\")\r\n    int reassignMembersFromTier(\r\n            @Param(\"oldTierId\") Integer oldTierId,\r\n            @Param(\"newTier\") MembershipTier newTier\r\n    );\r\n\r\n    Member findByUserId(Integer userId);\r\n\r\n    @Query(\"SELECT m.user FROM Member m WHERE m.tier.tierName IN :tierNames\")\r\n    List<User> findUsersByTierNames(@Param(\"tierNames\") List<String> tierNames);\r\n\r\n    @Query(\"SELECT m FROM Member m WHERE m.user.userAccount.username = :username\")\r\n    Member findByUsername(@Param(\"username\") String username);\r\n    \r\n    // 根據User查找Member\r\n    Member findByUser(User user);\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/MemberRepository.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/MemberRepository.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/MemberRepository.java	(revision 89327e12854b108d004ebb020d0592b1c618ecaf)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/MemberRepository.java	(date 1754078717544)
@@ -15,7 +15,7 @@
 
     @Modifying
     @Transactional
-    @Query("UPDATE Member m SET m.tier = :tier WHERE m.pointBalance BETWEEN :min AND :max")
+    @Query("UPDATE Member m SET m.tier = :tier WHERE m.tierPointBalance BETWEEN :min AND :max")
     int updateMembersTier(
             @Param("min") int min,
             @Param("max") int max,
Index: pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/VoucherRedemptionRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pickleball_backend.pickleball.repository;\r\n\r\nimport com.pickleball_backend.pickleball.entity.VoucherRedemption;\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\nimport org.springframework.data.jpa.repository.Query;\r\nimport org.springframework.data.repository.query.Param;\r\nimport org.springframework.stereotype.Repository;\r\n\r\nimport java.time.LocalDate;\r\nimport java.util.List;\r\n\r\n@Repository\r\npublic interface VoucherRedemptionRepository extends JpaRepository<VoucherRedemption, Integer> {\r\n    \r\n    // Find all redemptions by user ID\r\n    List<VoucherRedemption> findByUserIdOrderByRedemptionDateDesc(Integer userId);\r\n    \r\n    // Find active redemptions by user ID\r\n    List<VoucherRedemption> findByUserIdAndStatusOrderByRedemptionDateDesc(Integer userId, String status);\r\n    \r\n    // Find redemptions by voucher ID and user ID\r\n    List<VoucherRedemption> findByVoucherIdAndUserId(Integer voucherId, Integer userId);\r\n    \r\n    // Check if user has already redeemed a specific voucher\r\n    boolean existsByVoucherIdAndUserId(Integer voucherId, Integer userId);\r\n    \r\n    // Find expired redemptions\r\n    @Query(\"SELECT vr FROM VoucherRedemption vr WHERE vr.expiryDate < :currentDate AND vr.status = 'active'\")\r\n    List<VoucherRedemption> findExpiredRedemptions(@Param(\"currentDate\") LocalDate currentDate);\r\n    \r\n    // Count active redemptions by user\r\n    long countByUserIdAndStatus(Integer userId, String status);\r\n} 
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/VoucherRedemptionRepository.java b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/VoucherRedemptionRepository.java
--- a/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/VoucherRedemptionRepository.java	(revision 89327e12854b108d004ebb020d0592b1c618ecaf)
+++ b/pickleball/pickleball/src/main/java/com/pickleball_backend/pickleball/repository/VoucherRedemptionRepository.java	(date 1754164741349)
@@ -25,9 +25,16 @@
     boolean existsByVoucherIdAndUserId(Integer voucherId, Integer userId);
     
     // Find expired redemptions
-    @Query("SELECT vr FROM VoucherRedemption vr WHERE vr.expiryDate < :currentDate AND vr.status = 'active'")
-    List<VoucherRedemption> findExpiredRedemptions(@Param("currentDate") LocalDate currentDate);
+    @Query("SELECT vr FROM VoucherRedemption vr WHERE vr.expiryDate < :currentDate AND vr.status = :status")
+    List<VoucherRedemption> findExpiredRedemptions(@Param("currentDate") LocalDate currentDate, @Param("status") String status);
     
     // Count active redemptions by user
     long countByUserIdAndStatus(Integer userId, String status);
+    
+    // Find redemptions by status
+    List<VoucherRedemption> findByStatus(String status);
+    
+    // Find redemptions by user ID and multiple statuses (for active and restored vouchers)
+    @Query("SELECT vr FROM VoucherRedemption vr WHERE vr.userId = :userId AND vr.status IN (:statuses) ORDER BY vr.redemptionDate DESC")
+    List<VoucherRedemption> findByUserIdAndStatusInOrderByRedemptionDateDesc(@Param("userId") Integer userId, @Param("statuses") List<String> statuses);
 } 
\ No newline at end of file
